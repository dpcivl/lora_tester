
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000187d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003888  080189a8  080189a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c230  0801c230  0001e214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c230  0801c230  0001d230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c238  0801c238  0001e214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c238  0801c238  0001d238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c23c  0801c23c  0001d23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  0801c240  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d4  0801c314  0001e0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000174  0801c3b4  0001e174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00012f90  20000220  0801c454  0001e220  2**5
                  ALLOC
 12 ._user_heap_stack 00000600  200131b0  0801c454  0001f1b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001e214  2**0
                  CONTENTS, READONLY
 14 .debug_info   00042afd  00000000  00000000  0001e244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009154  00000000  00000000  00060d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000037f8  00000000  00000000  00069e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002ba6  00000000  00000000  0006d690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037efa  00000000  00000000  00070236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004bd90  00000000  00000000  000a8130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012e2d4  00000000  00000000  000f3ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00222194  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f760  00000000  00000000  002221d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  00231938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018990 	.word	0x08018990

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	08018990 	.word	0x08018990

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f005 f870 	bl	8005710 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f017 fa52 	bl	8017ae8 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f017 f962 	bl	8017938 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f005 f840 	bl	8005710 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f005 f9a1 	bl	80059d8 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f005 f832 	bl	8005710 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f005 f82a 	bl	8005710 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f005 f825 	bl	8005710 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	080189a8 	.word	0x080189a8
 80006d4:	080189c4 	.word	0x080189c4
 80006d8:	080189cc 	.word	0x080189cc
 80006dc:	080189e4 	.word	0x080189e4
 80006e0:	08018a14 	.word	0x08018a14
 80006e4:	08018a4c 	.word	0x08018a4c

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0e      	cmp	r3, #14
 80006f6:	d83f      	bhi.n	8000778 <get_state_name+0x90>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800073d 	.word	0x0800073d
 8000704:	08000741 	.word	0x08000741
 8000708:	08000745 	.word	0x08000745
 800070c:	08000749 	.word	0x08000749
 8000710:	0800074d 	.word	0x0800074d
 8000714:	08000751 	.word	0x08000751
 8000718:	08000755 	.word	0x08000755
 800071c:	08000759 	.word	0x08000759
 8000720:	0800075d 	.word	0x0800075d
 8000724:	08000761 	.word	0x08000761
 8000728:	08000765 	.word	0x08000765
 800072c:	08000769 	.word	0x08000769
 8000730:	0800076d 	.word	0x0800076d
 8000734:	08000771 	.word	0x08000771
 8000738:	08000775 	.word	0x08000775
        case LORA_STATE_INIT: return "INIT";
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <get_state_name+0xa0>)
 800073e:	e01c      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <get_state_name+0xa4>)
 8000742:	e01a      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <get_state_name+0xa8>)
 8000746:	e018      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <get_state_name+0xac>)
 800074a:	e016      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <get_state_name+0xb0>)
 800074e:	e014      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_TIMEREQ: return "SEND_TIMEREQ";
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <get_state_name+0xb4>)
 8000752:	e012      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_TIMEREQ_OK: return "WAIT_TIMEREQ_OK";
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <get_state_name+0xb8>)
 8000756:	e010      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_LTIME: return "SEND_LTIME";
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <get_state_name+0xbc>)
 800075a:	e00e      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_LTIME_RESPONSE: return "WAIT_LTIME_RESPONSE";
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <get_state_name+0xc0>)
 800075e:	e00c      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <get_state_name+0xc4>)
 8000762:	e00a      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <get_state_name+0xc8>)
 8000766:	e008      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <get_state_name+0xcc>)
 800076a:	e006      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <get_state_name+0xd0>)
 800076e:	e004      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_DONE: return "DONE";
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <get_state_name+0xd4>)
 8000772:	e002      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_ERROR: return "ERROR";
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <get_state_name+0xd8>)
 8000776:	e000      	b.n	800077a <get_state_name+0x92>
        default: return "UNKNOWN";
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <get_state_name+0xdc>)
    }
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	08018ab8 	.word	0x08018ab8
 800078c:	08018ac0 	.word	0x08018ac0
 8000790:	08018acc 	.word	0x08018acc
 8000794:	08018ad4 	.word	0x08018ad4
 8000798:	08018ae0 	.word	0x08018ae0
 800079c:	08018af0 	.word	0x08018af0
 80007a0:	08018b00 	.word	0x08018b00
 80007a4:	08018b10 	.word	0x08018b10
 80007a8:	08018b1c 	.word	0x08018b1c
 80007ac:	08018b30 	.word	0x08018b30
 80007b0:	08018b40 	.word	0x08018b40
 80007b4:	08018b54 	.word	0x08018b54
 80007b8:	08018b68 	.word	0x08018b68
 80007bc:	08018b74 	.word	0x08018b74
 80007c0:	08018b7c 	.word	0x08018b7c
 80007c4:	08018b84 	.word	0x08018b84

080007c8 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d032      	beq.n	800083e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <LoraStarter_InitWithDefaults+0x80>)
 80007e8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ea:	2205      	movs	r2, #5
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <LoraStarter_InitWithDefaults+0x32>
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	e000      	b.n	80007fc <LoraStarter_InitWithDefaults+0x34>
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <LoraStarter_InitWithDefaults+0x84>)
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2203      	movs	r2, #3
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <LoraStarter_InitWithDefaults+0x88>)
 800080a:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	4907      	ldr	r1, [pc, #28]	@ (8000854 <LoraStarter_InitWithDefaults+0x8c>)
 8000836:	2001      	movs	r0, #1
 8000838:	f004 ff6a 	bl	8005710 <LOGGER_SendFormatted>
 800083c:	e000      	b.n	8000840 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800083e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000000 	.word	0x20000000
 800084c:	08018ba8 	.word	0x08018ba8
 8000850:	000493e0 	.word	0x000493e0
 8000854:	08018bb0 	.word	0x08018bb0

08000858 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b0bf      	sub	sp, #252	@ 0xfc
 800085c:	af02      	add	r7, sp, #8
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	f000 82ee 	beq.w	8000e46 <LoraStarter_Process+0x5ee>

    LoraState old_state = ctx->state;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b0c      	cmp	r3, #12
 8000878:	f200 82c4 	bhi.w	8000e04 <LoraStarter_Process+0x5ac>
 800087c:	a201      	add	r2, pc, #4	@ (adr r2, 8000884 <LoraStarter_Process+0x2c>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	080008b9 	.word	0x080008b9
 8000888:	08000907 	.word	0x08000907
 800088c:	0800095d 	.word	0x0800095d
 8000890:	08000a17 	.word	0x08000a17
 8000894:	08000a2d 	.word	0x08000a2d
 8000898:	08000a75 	.word	0x08000a75
 800089c:	08000a8b 	.word	0x08000a8b
 80008a0:	08000ab1 	.word	0x08000ab1
 80008a4:	08000ac7 	.word	0x08000ac7
 80008a8:	08000b1d 	.word	0x08000b1d
 80008ac:	08000c39 	.word	0x08000c39
 80008b0:	08000d2b 	.word	0x08000d2b
 80008b4:	08000d91 	.word	0x08000d91
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d102      	bne.n	80008d8 <LoraStarter_Process+0x80>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <LoraStarter_Process+0x8e>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a99      	ldr	r2, [pc, #612]	@ (8000b48 <LoraStarter_Process+0x2f0>)
 80008e4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008f2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	69da      	ldr	r2, [r3, #28]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fc:	4993      	ldr	r1, [pc, #588]	@ (8000b4c <LoraStarter_Process+0x2f4>)
 80008fe:	2001      	movs	r0, #1
 8000900:	f004 ff06 	bl	8005710 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 8000904:	e287      	b.n	8000e16 <LoraStarter_Process+0x5be>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	685a      	ldr	r2, [r3, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	429a      	cmp	r2, r3
 8000910:	da20      	bge.n	8000954 <LoraStarter_Process+0xfc>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	1c59      	adds	r1, r3, #1
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68d8      	ldr	r0, [r3, #12]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	4603      	mov	r3, r0
 800092e:	460a      	mov	r2, r1
 8000930:	4987      	ldr	r1, [pc, #540]	@ (8000b50 <LoraStarter_Process+0x2f8>)
 8000932:	2000      	movs	r0, #0
 8000934:	f004 feec 	bl	8005710 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe60 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2202      	movs	r2, #2
 8000950:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000952:	e260      	b.n	8000e16 <LoraStarter_Process+0x5be>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2203      	movs	r2, #3
 8000958:	701a      	strb	r2, [r3, #0]
            break;
 800095a:	e25c      	b.n	8000e16 <LoraStarter_Process+0x5be>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 8252 	beq.w	8000e08 <LoraStarter_Process+0x5b0>
                if (is_response_ok(uart_rx)) {
 8000964:	6838      	ldr	r0, [r7, #0]
 8000966:	f000 fa99 	bl	8000e9c <is_response_ok>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d010      	beq.n	8000992 <LoraStarter_Process+0x13a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	3301      	adds	r3, #1
 8000976:	461a      	mov	r2, r3
 8000978:	4976      	ldr	r1, [pc, #472]	@ (8000b54 <LoraStarter_Process+0x2fc>)
 800097a:	2000      	movs	r0, #0
 800097c:	f004 fec8 	bl	8005710 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000990:	e23a      	b.n	8000e08 <LoraStarter_Process+0x5b0>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000992:	4971      	ldr	r1, [pc, #452]	@ (8000b58 <LoraStarter_Process+0x300>)
 8000994:	6838      	ldr	r0, [r7, #0]
 8000996:	f017 f8cf 	bl	8017b38 <strstr>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d107      	bne.n	80009b0 <LoraStarter_Process+0x158>
 80009a0:	496e      	ldr	r1, [pc, #440]	@ (8000b5c <LoraStarter_Process+0x304>)
 80009a2:	6838      	ldr	r0, [r7, #0]
 80009a4:	f017 f8c8 	bl	8017b38 <strstr>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 822c 	beq.w	8000e08 <LoraStarter_Process+0x5b0>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	4969      	ldr	r1, [pc, #420]	@ (8000b60 <LoraStarter_Process+0x308>)
 80009ba:	2002      	movs	r0, #2
 80009bc:	f004 fea8 	bl	8005710 <LOGGER_SendFormatted>
                    ctx->error_count++;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a1b      	ldr	r3, [r3, #32]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a1b      	ldr	r3, [r3, #32]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	dc0d      	bgt.n	80009ee <LoraStarter_Process+0x196>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a1b      	ldr	r3, [r3, #32]
 80009dc:	3301      	adds	r3, #1
 80009de:	4961      	ldr	r1, [pc, #388]	@ (8000b64 <LoraStarter_Process+0x30c>)
 80009e0:	2001      	movs	r0, #1
 80009e2:	f004 fe95 	bl	8005710 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
            break;
 80009ec:	e20c      	b.n	8000e08 <LoraStarter_Process+0x5b0>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	461a      	mov	r2, r3
 80009f6:	495c      	ldr	r1, [pc, #368]	@ (8000b68 <LoraStarter_Process+0x310>)
 80009f8:	2002      	movs	r0, #2
 80009fa:	f004 fe89 	bl	8005710 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
            break;
 8000a14:	e1f8      	b.n	8000e08 <LoraStarter_Process+0x5b0>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 8000a16:	4955      	ldr	r1, [pc, #340]	@ (8000b6c <LoraStarter_Process+0x314>)
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f004 fe79 	bl	8005710 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 8000a1e:	4854      	ldr	r0, [pc, #336]	@ (8000b70 <LoraStarter_Process+0x318>)
 8000a20:	f7ff fdf4 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2204      	movs	r2, #4
 8000a28:	701a      	strb	r2, [r3, #0]
            break;
 8000a2a:	e1f4      	b.n	8000e16 <LoraStarter_Process+0x5be>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 81ec 	beq.w	8000e0c <LoraStarter_Process+0x5b4>
 8000a34:	6838      	ldr	r0, [r7, #0]
 8000a36:	f000 fa99 	bl	8000f6c <is_join_response_ok>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 81e5 	beq.w	8000e0c <LoraStarter_Process+0x5b4>
                LORA_LOG_JOIN_SUCCESS();
 8000a42:	494c      	ldr	r1, [pc, #304]	@ (8000b74 <LoraStarter_Process+0x31c>)
 8000a44:	2002      	movs	r0, #2
 8000a46:	f004 fe63 	bl	8005710 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_TIMEREQ; // JOIN 후 시간 동기화 요청으로 전환
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2205      	movs	r2, #5
 8000a4e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a62:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_INFO("[LoRa] JOIN successful, requesting time synchronization...");
 8000a6a:	4943      	ldr	r1, [pc, #268]	@ (8000b78 <LoraStarter_Process+0x320>)
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f004 fe4f 	bl	8005710 <LOGGER_SendFormatted>
            }
            break;
 8000a72:	e1cb      	b.n	8000e0c <LoraStarter_Process+0x5b4>
        case LORA_STATE_SEND_TIMEREQ:
            LOG_INFO("[LoRa] Sending time synchronization request...");
 8000a74:	4941      	ldr	r1, [pc, #260]	@ (8000b7c <LoraStarter_Process+0x324>)
 8000a76:	2001      	movs	r0, #1
 8000a78:	f004 fe4a 	bl	8005710 <LOGGER_SendFormatted>
            CommandSender_Send("AT+TIMEREQ=1\r\n");
 8000a7c:	4840      	ldr	r0, [pc, #256]	@ (8000b80 <LoraStarter_Process+0x328>)
 8000a7e:	f7ff fdc5 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_TIMEREQ_OK;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2206      	movs	r2, #6
 8000a86:	701a      	strb	r2, [r3, #0]
            break;
 8000a88:	e1c5      	b.n	8000e16 <LoraStarter_Process+0x5be>
        case LORA_STATE_WAIT_TIMEREQ_OK:
            if (uart_rx && is_response_ok(uart_rx)) {
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f000 81bf 	beq.w	8000e10 <LoraStarter_Process+0x5b8>
 8000a92:	6838      	ldr	r0, [r7, #0]
 8000a94:	f000 fa02 	bl	8000e9c <is_response_ok>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 81b8 	beq.w	8000e10 <LoraStarter_Process+0x5b8>
                LOG_WARN("[LoRa] ✅ Time synchronization enabled");
 8000aa0:	4938      	ldr	r1, [pc, #224]	@ (8000b84 <LoraStarter_Process+0x32c>)
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f004 fe34 	bl	8005710 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_LTIME;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2207      	movs	r2, #7
 8000aac:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000aae:	e1af      	b.n	8000e10 <LoraStarter_Process+0x5b8>
        case LORA_STATE_SEND_LTIME:
            LOG_INFO("[LoRa] Requesting network time...");
 8000ab0:	4935      	ldr	r1, [pc, #212]	@ (8000b88 <LoraStarter_Process+0x330>)
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f004 fe2c 	bl	8005710 <LOGGER_SendFormatted>
            CommandSender_Send("AT+LTIME=?\r\n");
 8000ab8:	4834      	ldr	r0, [pc, #208]	@ (8000b8c <LoraStarter_Process+0x334>)
 8000aba:	f7ff fda7 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_LTIME_RESPONSE;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2208      	movs	r2, #8
 8000ac2:	701a      	strb	r2, [r3, #0]
            break;
 8000ac4:	e1a7      	b.n	8000e16 <LoraStarter_Process+0x5be>
        case LORA_STATE_WAIT_LTIME_RESPONSE:
            if (uart_rx) {
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d022      	beq.n	8000b12 <LoraStarter_Process+0x2ba>
                LOG_DEBUG("[LoRa] LTIME response received: '%s'", uart_rx);
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	4930      	ldr	r1, [pc, #192]	@ (8000b90 <LoraStarter_Process+0x338>)
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f004 fe1d 	bl	8005710 <LOGGER_SendFormatted>
                
                // ResponseHandler에서 시간 응답 파싱 처리
                if (ResponseHandler_IsTimeResponse(uart_rx)) {
 8000ad6:	6838      	ldr	r0, [r7, #0]
 8000ad8:	f000 fb2e 	bl	8001138 <ResponseHandler_IsTimeResponse>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d011      	beq.n	8000b06 <LoraStarter_Process+0x2ae>
                    ResponseHandler_ParseTimeResponse(uart_rx);
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f000 fb4e 	bl	8001184 <ResponseHandler_ParseTimeResponse>
                    LOG_WARN("[LoRa] 🕐 Network time received, starting periodic transmission");
 8000ae8:	492a      	ldr	r1, [pc, #168]	@ (8000b94 <LoraStarter_Process+0x33c>)
 8000aea:	2002      	movs	r0, #2
 8000aec:	f004 fe10 	bl	8005710 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2209      	movs	r2, #9
 8000af4:	701a      	strb	r2, [r3, #0]
                    LOG_WARN("[LoRa] 🚀 PERIODIC SEND STARTED with message: %s", ctx->send_message);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4926      	ldr	r1, [pc, #152]	@ (8000b98 <LoraStarter_Process+0x340>)
 8000afe:	2002      	movs	r0, #2
 8000b00:	f004 fe06 	bl	8005710 <LOGGER_SendFormatted>
                    LOG_DEBUG("[LoRa] Waiting for LTIME response, got: '%s'", uart_rx);
                }
            } else {
                LOG_DEBUG("[LoRa] WAIT_LTIME_RESPONSE: No uart_rx data received");
            }
            break;
 8000b04:	e187      	b.n	8000e16 <LoraStarter_Process+0x5be>
                    LOG_DEBUG("[LoRa] Waiting for LTIME response, got: '%s'", uart_rx);
 8000b06:	683a      	ldr	r2, [r7, #0]
 8000b08:	4924      	ldr	r1, [pc, #144]	@ (8000b9c <LoraStarter_Process+0x344>)
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f004 fe00 	bl	8005710 <LOGGER_SendFormatted>
            break;
 8000b10:	e181      	b.n	8000e16 <LoraStarter_Process+0x5be>
                LOG_DEBUG("[LoRa] WAIT_LTIME_RESPONSE: No uart_rx data received");
 8000b12:	4923      	ldr	r1, [pc, #140]	@ (8000ba0 <LoraStarter_Process+0x348>)
 8000b14:	2000      	movs	r0, #0
 8000b16:	f004 fdfb 	bl	8005710 <LOGGER_SendFormatted>
            break;
 8000b1a:	e17c      	b.n	8000e16 <LoraStarter_Process+0x5be>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <LoraStarter_Process+0x2d2>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	e000      	b.n	8000b2c <LoraStarter_Process+0x2d4>
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <LoraStarter_Process+0x2f0>)
 8000b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000b30:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000b34:	f7ff fb76 	bl	8000224 <strlen>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000b44:	e043      	b.n	8000bce <LoraStarter_Process+0x376>
 8000b46:	bf00      	nop
 8000b48:	08018bf0 	.word	0x08018bf0
 8000b4c:	08018bf8 	.word	0x08018bf8
 8000b50:	08018c30 	.word	0x08018c30
 8000b54:	08018c54 	.word	0x08018c54
 8000b58:	08018b7c 	.word	0x08018b7c
 8000b5c:	08018c74 	.word	0x08018c74
 8000b60:	08018c8c 	.word	0x08018c8c
 8000b64:	08018cac 	.word	0x08018cac
 8000b68:	08018cd8 	.word	0x08018cd8
 8000b6c:	08018d14 	.word	0x08018d14
 8000b70:	08018d38 	.word	0x08018d38
 8000b74:	08018d44 	.word	0x08018d44
 8000b78:	08018d60 	.word	0x08018d60
 8000b7c:	08018d9c 	.word	0x08018d9c
 8000b80:	08018dcc 	.word	0x08018dcc
 8000b84:	08018ddc 	.word	0x08018ddc
 8000b88:	08018e04 	.word	0x08018e04
 8000b8c:	08018e28 	.word	0x08018e28
 8000b90:	08018e38 	.word	0x08018e38
 8000b94:	08018e60 	.word	0x08018e60
 8000b98:	08018ea4 	.word	0x08018ea4
 8000b9c:	08018ed8 	.word	0x08018ed8
 8000ba0:	08018f08 	.word	0x08018f08
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000ba4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	f107 020c 	add.w	r2, r7, #12
 8000bae:	18d0      	adds	r0, r2, r3
 8000bb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bb4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	49a4      	ldr	r1, [pc, #656]	@ (8000e50 <LoraStarter_Process+0x5f8>)
 8000bc0:	f016 fef0 	bl	80179a4 <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000bc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bc8:	3301      	adds	r3, #1
 8000bca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000bd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	da03      	bge.n	8000be2 <LoraStarter_Process+0x38a>
 8000bda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bde:	2b1e      	cmp	r3, #30
 8000be0:	dde0      	ble.n	8000ba4 <LoraStarter_Process+0x34c>
                }
                hex_data[len*2] = '\0';
 8000be2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	33f0      	adds	r3, #240	@ 0xf0
 8000bea:	443b      	add	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000bfa:	4a96      	ldr	r2, [pc, #600]	@ (8000e54 <LoraStarter_Process+0x5fc>)
 8000bfc:	2180      	movs	r1, #128	@ 0x80
 8000bfe:	f016 fe9b 	bl	8017938 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000c02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000c06:	4994      	ldr	r1, [pc, #592]	@ (8000e58 <LoraStarter_Process+0x600>)
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f004 fd81 	bl	8005710 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000c0e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fcfa 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	220a      	movs	r2, #10
 8000c1c:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	498b      	ldr	r1, [pc, #556]	@ (8000e5c <LoraStarter_Process+0x604>)
 8000c30:	2000      	movs	r0, #0
 8000c32:	f004 fd6d 	bl	8005710 <LOGGER_SendFormatted>
            }
            break;
 8000c36:	e0ee      	b.n	8000e16 <LoraStarter_Process+0x5be>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 80ea 	beq.w	8000e14 <LoraStarter_Process+0x5bc>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000c40:	6838      	ldr	r0, [r7, #0]
 8000c42:	f000 fa23 	bl	800108c <ResponseHandler_ParseSendResponse>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000c4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d01a      	beq.n	8000c8a <LoraStarter_Process+0x432>
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	dc61      	bgt.n	8000d1c <LoraStarter_Process+0x4c4>
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <LoraStarter_Process+0x40a>
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d028      	beq.n	8000cb2 <LoraStarter_Process+0x45a>
 8000c60:	e05c      	b.n	8000d1c <LoraStarter_Process+0x4c4>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000c62:	497f      	ldr	r1, [pc, #508]	@ (8000e60 <LoraStarter_Process+0x608>)
 8000c64:	2002      	movs	r0, #2
 8000c66:	f004 fd53 	bl	8005710 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	220b      	movs	r2, #11
 8000c6e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000c7e:	f004 fcad 	bl	80055dc <TIME_GetCurrentMs>
 8000c82:	4602      	mov	r2, r0
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	611a      	str	r2, [r3, #16]
                        break;
 8000c88:	e04e      	b.n	8000d28 <LoraStarter_Process+0x4d0>
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000c8a:	4976      	ldr	r1, [pc, #472]	@ (8000e64 <LoraStarter_Process+0x60c>)
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f004 fd3f 	bl	8005710 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	220b      	movs	r2, #11
 8000c96:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000ca6:	f004 fc99 	bl	80055dc <TIME_GetCurrentMs>
 8000caa:	4602      	mov	r2, r0
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	611a      	str	r2, [r3, #16]
                        break;
 8000cb0:	e03a      	b.n	8000d28 <LoraStarter_Process+0x4d0>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000cb2:	4a6d      	ldr	r2, [pc, #436]	@ (8000e68 <LoraStarter_Process+0x610>)
 8000cb4:	496d      	ldr	r1, [pc, #436]	@ (8000e6c <LoraStarter_Process+0x614>)
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f004 fd2a 	bl	8005710 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a1b      	ldr	r3, [r3, #32]
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a1b      	ldr	r3, [r3, #32]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4968      	ldr	r1, [pc, #416]	@ (8000e70 <LoraStarter_Process+0x618>)
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f004 fd1e 	bl	8005710 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d005      	beq.n	8000ce8 <LoraStarter_Process+0x490>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a1a      	ldr	r2, [r3, #32]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	da11      	bge.n	8000d0c <LoraStarter_Process+0x4b4>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a1a      	ldr	r2, [r3, #32]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <LoraStarter_Process+0x4a2>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf8:	e000      	b.n	8000cfc <LoraStarter_Process+0x4a4>
 8000cfa:	4b5e      	ldr	r3, [pc, #376]	@ (8000e74 <LoraStarter_Process+0x61c>)
 8000cfc:	495e      	ldr	r1, [pc, #376]	@ (8000e78 <LoraStarter_Process+0x620>)
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f004 fd06 	bl	8005710 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	220c      	movs	r2, #12
 8000d08:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000d0a:	e00d      	b.n	8000d28 <LoraStarter_Process+0x4d0>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000d0c:	495b      	ldr	r1, [pc, #364]	@ (8000e7c <LoraStarter_Process+0x624>)
 8000d0e:	2003      	movs	r0, #3
 8000d10:	f004 fcfe 	bl	8005710 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	220e      	movs	r2, #14
 8000d18:	701a      	strb	r2, [r3, #0]
                        break;
 8000d1a:	e005      	b.n	8000d28 <LoraStarter_Process+0x4d0>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	4958      	ldr	r1, [pc, #352]	@ (8000e80 <LoraStarter_Process+0x628>)
 8000d20:	2000      	movs	r0, #0
 8000d22:	f004 fcf5 	bl	8005710 <LOGGER_SendFormatted>
                        break;
 8000d26:	bf00      	nop
                }
            }
            break;
 8000d28:	e074      	b.n	8000e14 <LoraStarter_Process+0x5bc>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000d2a:	f004 fc57 	bl	80055dc <TIME_GetCurrentMs>
 8000d2e:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <LoraStarter_Process+0x4e8>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	e001      	b.n	8000d44 <LoraStarter_Process+0x4ec>
 8000d40:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000d44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d809      	bhi.n	8000d6e <LoraStarter_Process+0x516>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000d5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d5e:	4949      	ldr	r1, [pc, #292]	@ (8000e84 <LoraStarter_Process+0x62c>)
 8000d60:	2000      	movs	r0, #0
 8000d62:	f004 fcd5 	bl	8005710 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2209      	movs	r2, #9
 8000d6a:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000d6c:	e053      	b.n	8000e16 <LoraStarter_Process+0x5be>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d7c:	4413      	add	r3, r2
 8000d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000d82:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000d86:	4940      	ldr	r1, [pc, #256]	@ (8000e88 <LoraStarter_Process+0x630>)
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f004 fcc1 	bl	8005710 <LOGGER_SendFormatted>
            break;
 8000d8e:	e042      	b.n	8000e16 <LoraStarter_Process+0x5be>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000d90:	f004 fc24 	bl	80055dc <TIME_GetCurrentMs>
 8000d94:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10b      	bne.n	8000db8 <LoraStarter_Process+0x560>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000da0:	493a      	ldr	r1, [pc, #232]	@ (8000e8c <LoraStarter_Process+0x634>)
 8000da2:	2000      	movs	r0, #0
 8000da4:	f004 fcb4 	bl	8005710 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2203      	movs	r2, #3
 8000db4:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000db6:	e02e      	b.n	8000e16 <LoraStarter_Process+0x5be>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dbc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000dc0:	1ad2      	subs	r2, r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d30e      	bcc.n	8000de8 <LoraStarter_Process+0x590>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dce:	461a      	mov	r2, r3
 8000dd0:	492f      	ldr	r1, [pc, #188]	@ (8000e90 <LoraStarter_Process+0x638>)
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f004 fc9c 	bl	8005710 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000dde:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2203      	movs	r2, #3
 8000de4:	701a      	strb	r2, [r3, #0]
            break;
 8000de6:	e016      	b.n	8000e16 <LoraStarter_Process+0x5be>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000df4:	1acb      	subs	r3, r1, r3
 8000df6:	4413      	add	r3, r2
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4926      	ldr	r1, [pc, #152]	@ (8000e94 <LoraStarter_Process+0x63c>)
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f004 fc87 	bl	8005710 <LOGGER_SendFormatted>
            break;
 8000e02:	e008      	b.n	8000e16 <LoraStarter_Process+0x5be>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000e04:	bf00      	nop
 8000e06:	e006      	b.n	8000e16 <LoraStarter_Process+0x5be>
            break;
 8000e08:	bf00      	nop
 8000e0a:	e004      	b.n	8000e16 <LoraStarter_Process+0x5be>
            break;
 8000e0c:	bf00      	nop
 8000e0e:	e002      	b.n	8000e16 <LoraStarter_Process+0x5be>
            break;
 8000e10:	bf00      	nop
 8000e12:	e000      	b.n	8000e16 <LoraStarter_Process+0x5be>
            break;
 8000e14:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d012      	beq.n	8000e48 <LoraStarter_Process+0x5f0>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000e22:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fc5e 	bl	80006e8 <get_state_name>
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fc58 	bl	80006e8 <get_state_name>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4622      	mov	r2, r4
 8000e3c:	4916      	ldr	r1, [pc, #88]	@ (8000e98 <LoraStarter_Process+0x640>)
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f004 fc66 	bl	8005710 <LOGGER_SendFormatted>
 8000e44:	e000      	b.n	8000e48 <LoraStarter_Process+0x5f0>
    if (ctx == NULL) return;
 8000e46:	bf00      	nop
    }
}
 8000e48:	37f4      	adds	r7, #244	@ 0xf4
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08018f40 	.word	0x08018f40
 8000e54:	08018f48 	.word	0x08018f48
 8000e58:	08018f58 	.word	0x08018f58
 8000e5c:	08018f78 	.word	0x08018f78
 8000e60:	08018f90 	.word	0x08018f90
 8000e64:	08018fac 	.word	0x08018fac
 8000e68:	08018fc0 	.word	0x08018fc0
 8000e6c:	08018fd0 	.word	0x08018fd0
 8000e70:	08018fe8 	.word	0x08018fe8
 8000e74:	08019000 	.word	0x08019000
 8000e78:	08019004 	.word	0x08019004
 8000e7c:	08019020 	.word	0x08019020
 8000e80:	08019044 	.word	0x08019044
 8000e84:	08019060 	.word	0x08019060
 8000e88:	0801909c 	.word	0x0801909c
 8000e8c:	080190d0 	.word	0x080190d0
 8000e90:	080190e8 	.word	0x080190e8
 8000e94:	08019110 	.word	0x08019110
 8000e98:	08019144 	.word	0x08019144

08000e9c <is_response_ok>:
// 전역 변수: 네트워크에서 수신한 시간 정보 저장
static char g_network_time[64] = {0};
static bool g_time_synchronized = false;

bool is_response_ok(const char* response)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d105      	bne.n	8000eb6 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000eaa:	4925      	ldr	r1, [pc, #148]	@ (8000f40 <is_response_ok+0xa4>)
 8000eac:	2000      	movs	r0, #0
 8000eae:	f004 fc2f 	bl	8005710 <LOGGER_SendFormatted>
        return false;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e03f      	b.n	8000f36 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4922      	ldr	r1, [pc, #136]	@ (8000f44 <is_response_ok+0xa8>)
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f004 fc28 	bl	8005710 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000ec0:	4921      	ldr	r1, [pc, #132]	@ (8000f48 <is_response_ok+0xac>)
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff f9a4 	bl	8000210 <strcmp>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d105      	bne.n	8000eda <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000ece:	491f      	ldr	r1, [pc, #124]	@ (8000f4c <is_response_ok+0xb0>)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f004 fc1d 	bl	8005710 <LOGGER_SendFormatted>
        return true;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e02d      	b.n	8000f36 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000eda:	491d      	ldr	r1, [pc, #116]	@ (8000f50 <is_response_ok+0xb4>)
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff f997 	bl	8000210 <strcmp>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d105      	bne.n	8000ef4 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000ee8:	491a      	ldr	r1, [pc, #104]	@ (8000f54 <is_response_ok+0xb8>)
 8000eea:	2000      	movs	r0, #0
 8000eec:	f004 fc10 	bl	8005710 <LOGGER_SendFormatted>
        return true;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e020      	b.n	8000f36 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000ef4:	4918      	ldr	r1, [pc, #96]	@ (8000f58 <is_response_ok+0xbc>)
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff f98a 	bl	8000210 <strcmp>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d105      	bne.n	8000f0e <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000f02:	4916      	ldr	r1, [pc, #88]	@ (8000f5c <is_response_ok+0xc0>)
 8000f04:	2000      	movs	r0, #0
 8000f06:	f004 fc03 	bl	8005710 <LOGGER_SendFormatted>
        return true;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e013      	b.n	8000f36 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000f0e:	4914      	ldr	r1, [pc, #80]	@ (8000f60 <is_response_ok+0xc4>)
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f016 fe11 	bl	8017b38 <strstr>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d006      	beq.n	8000f2a <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	4911      	ldr	r1, [pc, #68]	@ (8000f64 <is_response_ok+0xc8>)
 8000f20:	2000      	movs	r0, #0
 8000f22:	f004 fbf5 	bl	8005710 <LOGGER_SendFormatted>
        return true;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e005      	b.n	8000f36 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	490e      	ldr	r1, [pc, #56]	@ (8000f68 <is_response_ok+0xcc>)
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f004 fbee 	bl	8005710 <LOGGER_SendFormatted>
    return false;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	08019164 	.word	0x08019164
 8000f44:	08019194 	.word	0x08019194
 8000f48:	080191c4 	.word	0x080191c4
 8000f4c:	080191c8 	.word	0x080191c8
 8000f50:	080191f0 	.word	0x080191f0
 8000f54:	080191f8 	.word	0x080191f8
 8000f58:	0801922c 	.word	0x0801922c
 8000f5c:	08019230 	.word	0x08019230
 8000f60:	08019264 	.word	0x08019264
 8000f64:	0801926c 	.word	0x0801926c
 8000f68:	080192a0 	.word	0x080192a0

08000f6c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f78:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f7c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000f7e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f82:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d105      	bne.n	8000f98 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000f8c:	4938      	ldr	r1, [pc, #224]	@ (8001070 <is_join_response_ok+0x104>)
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f004 fbbe 	bl	8005710 <LOGGER_SendFormatted>
        return false;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e066      	b.n	8001066 <is_join_response_ok+0xfa>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000f98:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f9c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4934      	ldr	r1, [pc, #208]	@ (8001074 <is_join_response_ok+0x108>)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f004 fbb3 	bl	8005710 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000faa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fae:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fb2:	f107 0008 	add.w	r0, r7, #8
 8000fb6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000fba:	6819      	ldr	r1, [r3, #0]
 8000fbc:	f016 fda9 	bl	8017b12 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000fc0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fc4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000fd6:	e013      	b.n	8001000 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000fd8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b0d      	cmp	r3, #13
 8000fe0:	d004      	beq.n	8000fec <is_join_response_ok+0x80>
 8000fe2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b0a      	cmp	r3, #10
 8000fea:	d104      	bne.n	8000ff6 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000fec:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
            break;
 8000ff4:	e009      	b.n	800100a <is_join_response_ok+0x9e>
        }
        pos++;
 8000ff6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8001000:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1e6      	bne.n	8000fd8 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	491a      	ldr	r1, [pc, #104]	@ (8001078 <is_join_response_ok+0x10c>)
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8fd 	bl	8000210 <strcmp>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf0c      	ite	eq
 800101c:	2301      	moveq	r3, #1
 800101e:	2300      	movne	r3, #0
 8001020:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8001024:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8001028:	2b00      	cmp	r3, #0
 800102a:	d011      	beq.n	8001050 <is_join_response_ok+0xe4>
        LOG_WARN("[ResponseHandler] ✅ JOIN SUCCESS: %s", response);
 800102c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001030:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4911      	ldr	r1, [pc, #68]	@ (800107c <is_join_response_ok+0x110>)
 8001038:	2002      	movs	r0, #2
 800103a:	f004 fb69 	bl	8005710 <LOGGER_SendFormatted>
        LOG_WARN("[LoRa] 🌐 Network joined successfully - SD logging active");
 800103e:	4910      	ldr	r1, [pc, #64]	@ (8001080 <is_join_response_ok+0x114>)
 8001040:	2002      	movs	r0, #2
 8001042:	f004 fb65 	bl	8005710 <LOGGER_SendFormatted>
        
        // JOIN 성공 후 시간 조회 요청 (네트워크 동기화 대기 후)
        LOG_INFO("[ResponseHandler] Requesting network time after JOIN success...");
 8001046:	490f      	ldr	r1, [pc, #60]	@ (8001084 <is_join_response_ok+0x118>)
 8001048:	2001      	movs	r0, #1
 800104a:	f004 fb61 	bl	8005710 <LOGGER_SendFormatted>
 800104e:	e008      	b.n	8001062 <is_join_response_ok+0xf6>
        // 짧은 대기 후 시간 조회 (메인 루프에서 처리될 예정)
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8001050:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001054:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	490b      	ldr	r1, [pc, #44]	@ (8001088 <is_join_response_ok+0x11c>)
 800105c:	2000      	movs	r0, #0
 800105e:	f004 fb57 	bl	8005710 <LOGGER_SendFormatted>
    }
    
    return result;
 8001062:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8001066:	4618      	mov	r0, r3
 8001068:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	080192cc 	.word	0x080192cc
 8001074:	08019304 	.word	0x08019304
 8001078:	08019334 	.word	0x08019334
 800107c:	08019340 	.word	0x08019340
 8001080:	08019368 	.word	0x08019368
 8001084:	080193a4 	.word	0x080193a4
 8001088:	080193e4 	.word	0x080193e4

0800108c <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 800109a:	491e      	ldr	r1, [pc, #120]	@ (8001114 <ResponseHandler_ParseSendResponse+0x88>)
 800109c:	2000      	movs	r0, #0
 800109e:	f004 fb37 	bl	8005710 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e031      	b.n	800110a <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	491b      	ldr	r1, [pc, #108]	@ (8001118 <ResponseHandler_ParseSendResponse+0x8c>)
 80010aa:	2000      	movs	r0, #0
 80010ac:	f004 fb30 	bl	8005710 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 80010b0:	491a      	ldr	r1, [pc, #104]	@ (800111c <ResponseHandler_ParseSendResponse+0x90>)
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f016 fd40 	bl	8017b38 <strstr>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <ResponseHandler_ParseSendResponse+0x3e>
        LOG_WARN("[ResponseHandler] ✅ SEND SUCCESS: CONFIRMED_OK");
 80010be:	4918      	ldr	r1, [pc, #96]	@ (8001120 <ResponseHandler_ParseSendResponse+0x94>)
 80010c0:	2002      	movs	r0, #2
 80010c2:	f004 fb25 	bl	8005710 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e01f      	b.n	800110a <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 80010ca:	4916      	ldr	r1, [pc, #88]	@ (8001124 <ResponseHandler_ParseSendResponse+0x98>)
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f016 fd33 	bl	8017b38 <strstr>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 80010d8:	4913      	ldr	r1, [pc, #76]	@ (8001128 <ResponseHandler_ParseSendResponse+0x9c>)
 80010da:	2002      	movs	r0, #2
 80010dc:	f004 fb18 	bl	8005710 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e012      	b.n	800110a <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 80010e4:	4911      	ldr	r1, [pc, #68]	@ (800112c <ResponseHandler_ParseSendResponse+0xa0>)
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff f892 	bl	8000210 <strcmp>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d105      	bne.n	80010fe <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 80010f2:	490f      	ldr	r1, [pc, #60]	@ (8001130 <ResponseHandler_ParseSendResponse+0xa4>)
 80010f4:	2002      	movs	r0, #2
 80010f6:	f004 fb0b 	bl	8005710 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 80010fa:	2302      	movs	r3, #2
 80010fc:	e005      	b.n	800110a <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	490c      	ldr	r1, [pc, #48]	@ (8001134 <ResponseHandler_ParseSendResponse+0xa8>)
 8001102:	2000      	movs	r0, #0
 8001104:	f004 fb04 	bl	8005710 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 8001108:	2303      	movs	r3, #3
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	08019410 	.word	0x08019410
 8001118:	08019444 	.word	0x08019444
 800111c:	08019474 	.word	0x08019474
 8001120:	0801948c 	.word	0x0801948c
 8001124:	080194c0 	.word	0x080194c0
 8001128:	080194dc 	.word	0x080194dc
 800112c:	08019510 	.word	0x08019510
 8001130:	08019518 	.word	0x08019518
 8001134:	08019544 	.word	0x08019544

08001138 <ResponseHandler_IsTimeResponse>:

// 시간 응답 확인 함수
bool ResponseHandler_IsTimeResponse(const char* response)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <ResponseHandler_IsTimeResponse+0x12>
        return false;
 8001146:	2300      	movs	r3, #0
 8001148:	e013      	b.n	8001172 <ResponseHandler_IsTimeResponse+0x3a>
    }
    
    return (strstr(response, "LTIME:") != NULL || strstr(response, "LTIME=") != NULL);
 800114a:	490c      	ldr	r1, [pc, #48]	@ (800117c <ResponseHandler_IsTimeResponse+0x44>)
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f016 fcf3 	bl	8017b38 <strstr>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d106      	bne.n	8001166 <ResponseHandler_IsTimeResponse+0x2e>
 8001158:	4909      	ldr	r1, [pc, #36]	@ (8001180 <ResponseHandler_IsTimeResponse+0x48>)
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f016 fcec 	bl	8017b38 <strstr>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <ResponseHandler_IsTimeResponse+0x32>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <ResponseHandler_IsTimeResponse+0x34>
 800116a:	2300      	movs	r3, #0
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	b2db      	uxtb	r3, r3
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	08019574 	.word	0x08019574
 8001180:	0801957c 	.word	0x0801957c

08001184 <ResponseHandler_ParseTimeResponse>:

// 시간 응답 파싱 및 저장 함수
void ResponseHandler_ParseTimeResponse(const char* response)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    if (response == NULL || !ResponseHandler_IsTimeResponse(response)) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d05c      	beq.n	800124c <ResponseHandler_ParseTimeResponse+0xc8>
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffd0 	bl	8001138 <ResponseHandler_IsTimeResponse>
 8001198:	4603      	mov	r3, r0
 800119a:	f083 0301 	eor.w	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d153      	bne.n	800124c <ResponseHandler_ParseTimeResponse+0xc8>
        return;
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing time response: '%s'", response);
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	492b      	ldr	r1, [pc, #172]	@ (8001254 <ResponseHandler_ParseTimeResponse+0xd0>)
 80011a8:	2000      	movs	r0, #0
 80011aa:	f004 fab1 	bl	8005710 <LOGGER_SendFormatted>
    
    // LTIME 응답에서 시간 정보 추출 (LTIME: 또는 LTIME= 형식 모두 지원)
    const char* time_start = strstr(response, "LTIME:");
 80011ae:	492a      	ldr	r1, [pc, #168]	@ (8001258 <ResponseHandler_ParseTimeResponse+0xd4>)
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f016 fcc1 	bl	8017b38 <strstr>
 80011b6:	60f8      	str	r0, [r7, #12]
    if (time_start != NULL) {
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <ResponseHandler_ParseTimeResponse+0x42>
        // "LTIME: 14h25m30s on 01/29/2025" 형태에서 시간 부분 추출
        time_start += 6; // "LTIME:" 부분 건너뛰기
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3306      	adds	r3, #6
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e00a      	b.n	80011dc <ResponseHandler_ParseTimeResponse+0x58>
    } else {
        time_start = strstr(response, "LTIME=");
 80011c6:	4925      	ldr	r1, [pc, #148]	@ (800125c <ResponseHandler_ParseTimeResponse+0xd8>)
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f016 fcb5 	bl	8017b38 <strstr>
 80011ce:	60f8      	str	r0, [r7, #12]
        if (time_start != NULL) {
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <ResponseHandler_ParseTimeResponse+0x58>
            // "AT+LTIME=00h00m28s on 01/01/19" 형태에서 시간 부분 추출
            time_start += 6; // "LTIME=" 부분 건너뛰기
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3306      	adds	r3, #6
 80011da:	60fb      	str	r3, [r7, #12]
        }
    }
    
    if (time_start != NULL) {
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d035      	beq.n	800124e <ResponseHandler_ParseTimeResponse+0xca>
        
        // 앞쪽 공백 제거
        while (*time_start == ' ') {
 80011e2:	e002      	b.n	80011ea <ResponseHandler_ParseTimeResponse+0x66>
            time_start++;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
        while (*time_start == ' ') {
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b20      	cmp	r3, #32
 80011f0:	d0f8      	beq.n	80011e4 <ResponseHandler_ParseTimeResponse+0x60>
        }
        
        // 전역 변수에 시간 정보 저장 (개행 문자 제거)
        strncpy(g_network_time, time_start, sizeof(g_network_time) - 1);
 80011f2:	223f      	movs	r2, #63	@ 0x3f
 80011f4:	68f9      	ldr	r1, [r7, #12]
 80011f6:	481a      	ldr	r0, [pc, #104]	@ (8001260 <ResponseHandler_ParseTimeResponse+0xdc>)
 80011f8:	f016 fc8b 	bl	8017b12 <strncpy>
        g_network_time[sizeof(g_network_time) - 1] = '\0';
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <ResponseHandler_ParseTimeResponse+0xdc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        
        // 개행 문자 제거
        char* newline = strchr(g_network_time, '\r');
 8001204:	210d      	movs	r1, #13
 8001206:	4816      	ldr	r0, [pc, #88]	@ (8001260 <ResponseHandler_ParseTimeResponse+0xdc>)
 8001208:	f016 fc76 	bl	8017af8 <strchr>
 800120c:	60b8      	str	r0, [r7, #8]
        if (newline) *newline = '\0';
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <ResponseHandler_ParseTimeResponse+0x96>
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
        newline = strchr(g_network_time, '\n');
 800121a:	210a      	movs	r1, #10
 800121c:	4810      	ldr	r0, [pc, #64]	@ (8001260 <ResponseHandler_ParseTimeResponse+0xdc>)
 800121e:	f016 fc6b 	bl	8017af8 <strchr>
 8001222:	60b8      	str	r0, [r7, #8]
        if (newline) *newline = '\0';
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <ResponseHandler_ParseTimeResponse+0xac>
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
        
        g_time_synchronized = true;
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <ResponseHandler_ParseTimeResponse+0xe0>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
        
        LOG_WARN("[LoRa] 🕐 Network time synchronized: %s", g_network_time);
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <ResponseHandler_ParseTimeResponse+0xdc>)
 8001238:	490b      	ldr	r1, [pc, #44]	@ (8001268 <ResponseHandler_ParseTimeResponse+0xe4>)
 800123a:	2002      	movs	r0, #2
 800123c:	f004 fa68 	bl	8005710 <LOGGER_SendFormatted>
        LOG_WARN("[TIMESTAMP] Network time: %s", g_network_time);
 8001240:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <ResponseHandler_ParseTimeResponse+0xdc>)
 8001242:	490a      	ldr	r1, [pc, #40]	@ (800126c <ResponseHandler_ParseTimeResponse+0xe8>)
 8001244:	2002      	movs	r0, #2
 8001246:	f004 fa63 	bl	8005710 <LOGGER_SendFormatted>
 800124a:	e000      	b.n	800124e <ResponseHandler_ParseTimeResponse+0xca>
        return;
 800124c:	bf00      	nop
    }
}
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	08019584 	.word	0x08019584
 8001258:	08019574 	.word	0x08019574
 800125c:	0801957c 	.word	0x0801957c
 8001260:	2000023c 	.word	0x2000023c
 8001264:	2000027c 	.word	0x2000027c
 8001268:	080195b4 	.word	0x080195b4
 800126c:	080195e0 	.word	0x080195e0

08001270 <ResponseHandler_GetNetworkTime>:

// 현재 저장된 네트워크 시간 반환
const char* ResponseHandler_GetNetworkTime(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
    if (g_time_synchronized) {
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <ResponseHandler_GetNetworkTime+0x1c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <ResponseHandler_GetNetworkTime+0x10>
        return g_network_time;
 800127c:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <ResponseHandler_GetNetworkTime+0x20>)
 800127e:	e000      	b.n	8001282 <ResponseHandler_GetNetworkTime+0x12>
    }
    return NULL;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	2000027c 	.word	0x2000027c
 8001290:	2000023c 	.word	0x2000023c

08001294 <ResponseHandler_IsTimeSynchronized>:

// 시간 동기화 상태 확인
bool ResponseHandler_IsTimeSynchronized(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
    return g_time_synchronized;
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <ResponseHandler_IsTimeSynchronized+0x14>)
 800129a:	781b      	ldrb	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	2000027c 	.word	0x2000027c

080012ac <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80012b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <SCB_CleanInvalidateDCache+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012ba:	f3bf 8f4f 	dsb	sy
}
 80012be:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80012c0:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <SCB_CleanInvalidateDCache+0x74>)
 80012c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012c6:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	0b5b      	lsrs	r3, r3, #13
 80012cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012d0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	08db      	lsrs	r3, r3, #3
 80012d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012da:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	015a      	lsls	r2, r3, #5
 80012e0:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80012e4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80012ea:	490d      	ldr	r1, [pc, #52]	@ (8001320 <SCB_CleanInvalidateDCache+0x74>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1e5a      	subs	r2, r3, #1
 80012f6:	60ba      	str	r2, [r7, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ef      	bne.n	80012dc <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1e5a      	subs	r2, r3, #1
 8001300:	60fa      	str	r2, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1e5      	bne.n	80012d2 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001306:	f3bf 8f4f 	dsb	sy
}
 800130a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800130c:	f3bf 8f6f 	isb	sy
}
 8001310:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <_ensure_file_closed>:
static FILE* g_log_file = NULL;
#endif

// 파일 닫기 보장 함수들
#ifdef STM32F746xx
static void _ensure_file_closed(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    if (g_current_file_handle != NULL) {
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <_ensure_file_closed+0x38>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d012      	beq.n	8001356 <_ensure_file_closed+0x32>
        LOG_DEBUG("[SDStorage] Force closing previously opened file: %s", g_current_open_file);
 8001330:	4a0b      	ldr	r2, [pc, #44]	@ (8001360 <_ensure_file_closed+0x3c>)
 8001332:	490c      	ldr	r1, [pc, #48]	@ (8001364 <_ensure_file_closed+0x40>)
 8001334:	2000      	movs	r0, #0
 8001336:	f004 f9eb 	bl	8005710 <LOGGER_SendFormatted>
        f_close(g_current_file_handle);
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <_ensure_file_closed+0x38>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f012 ff8c 	bl	801425c <f_close>
        g_current_file_handle = NULL;
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <_ensure_file_closed+0x38>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
        memset(g_current_open_file, 0, sizeof(g_current_open_file));
 800134a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800134e:	2100      	movs	r1, #0
 8001350:	4803      	ldr	r0, [pc, #12]	@ (8001360 <_ensure_file_closed+0x3c>)
 8001352:	f016 fbc9 	bl	8017ae8 <memset>
    }
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000388 	.word	0x20000388
 8001360:	2000038c 	.word	0x2000038c
 8001364:	08019600 	.word	0x08019600

08001368 <_register_file_opened>:

static void _register_file_opened(FIL* file_handle, const char* filename) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
    g_current_file_handle = file_handle;
 8001372:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <_register_file_opened+0x2c>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6013      	str	r3, [r2, #0]
    strncpy(g_current_open_file, filename, sizeof(g_current_open_file) - 1);
 8001378:	22ff      	movs	r2, #255	@ 0xff
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	4806      	ldr	r0, [pc, #24]	@ (8001398 <_register_file_opened+0x30>)
 800137e:	f016 fbc8 	bl	8017b12 <strncpy>
    g_current_open_file[sizeof(g_current_open_file) - 1] = '\0';
 8001382:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <_register_file_opened+0x30>)
 8001384:	2200      	movs	r2, #0
 8001386:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000388 	.word	0x20000388
 8001398:	2000038c 	.word	0x2000038c

0800139c <_register_file_closed>:

static void _register_file_closed(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
    g_current_file_handle = NULL;
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <_register_file_closed+0x1c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
    memset(g_current_open_file, 0, sizeof(g_current_open_file));
 80013a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013aa:	2100      	movs	r1, #0
 80013ac:	4803      	ldr	r0, [pc, #12]	@ (80013bc <_register_file_closed+0x20>)
 80013ae:	f016 fb9b 	bl	8017ae8 <memset>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000388 	.word	0x20000388
 80013bc:	2000038c 	.word	0x2000038c

080013c0 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
// static uint32_t _get_current_timestamp(void); - unused function removed

int SDStorage_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 및 진단
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 80013c6:	49b0      	ldr	r1, [pc, #704]	@ (8001688 <SDStorage_Init+0x2c8>)
 80013c8:	2001      	movs	r0, #1
 80013ca:	f004 f9a1 	bl	8005710 <LOGGER_SendFormatted>
    
    // 초기화 시 파일 닫기 보장
    _ensure_file_closed();
 80013ce:	f7ff ffa9 	bl	8001324 <_ensure_file_closed>
    
    // 1. 하드웨어 상태 진단 및 TRANSFER 상태까지 대기
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 80013d2:	48ae      	ldr	r0, [pc, #696]	@ (800168c <SDStorage_Init+0x2cc>)
 80013d4:	f00c f952 	bl	800d67c <HAL_SD_GetCardState>
 80013d8:	6178      	str	r0, [r7, #20]
    LOG_INFO("[SDStorage] Initial SD card state: %d", card_state);
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	49ac      	ldr	r1, [pc, #688]	@ (8001690 <SDStorage_Init+0x2d0>)
 80013de:	2001      	movs	r0, #1
 80013e0:	f004 f996 	bl	8005710 <LOGGER_SendFormatted>
    
    // SD 카드가 TRANSFER 상태가 될 때까지 대기 (성공 프로젝트 패턴)
    int wait_count = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 80013e8:	e010      	b.n	800140c <SDStorage_Init+0x4c>
        LOG_INFO("[SDStorage] Waiting for SD card TRANSFER state... (attempt %d)", wait_count + 1);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	3301      	adds	r3, #1
 80013ee:	461a      	mov	r2, r3
 80013f0:	49a8      	ldr	r1, [pc, #672]	@ (8001694 <SDStorage_Init+0x2d4>)
 80013f2:	2001      	movs	r0, #1
 80013f4:	f004 f98c 	bl	8005710 <LOGGER_SendFormatted>
        HAL_Delay(100);
 80013f8:	2064      	movs	r0, #100	@ 0x64
 80013fa:	f004 ffa9 	bl	8006350 <HAL_Delay>
        card_state = HAL_SD_GetCardState(&hsd1);
 80013fe:	48a3      	ldr	r0, [pc, #652]	@ (800168c <SDStorage_Init+0x2cc>)
 8001400:	f00c f93c 	bl	800d67c <HAL_SD_GetCardState>
 8001404:	6178      	str	r0, [r7, #20]
        wait_count++;
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3301      	adds	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d002      	beq.n	8001418 <SDStorage_Init+0x58>
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	2b31      	cmp	r3, #49	@ 0x31
 8001416:	dde8      	ble.n	80013ea <SDStorage_Init+0x2a>
    }
    
    if (card_state == HAL_SD_CARD_TRANSFER) {
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b04      	cmp	r3, #4
 800141c:	d128      	bne.n	8001470 <SDStorage_Init+0xb0>
        LOG_INFO("[SDStorage] ✅ SD card reached TRANSFER state successfully");
 800141e:	499e      	ldr	r1, [pc, #632]	@ (8001698 <SDStorage_Init+0x2d8>)
 8001420:	2001      	movs	r0, #1
 8001422:	f004 f975 	bl	8005710 <LOGGER_SendFormatted>
        
        // SDMMC 에러 코드 상세 체크 (성공 프로젝트 패턴)
        if (hsd1.ErrorCode != HAL_SD_ERROR_NONE) {
 8001426:	4b99      	ldr	r3, [pc, #612]	@ (800168c <SDStorage_Init+0x2cc>)
 8001428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800142a:	2b00      	cmp	r3, #0
 800142c:	d02f      	beq.n	800148e <SDStorage_Init+0xce>
            LOG_WARN("[SDStorage] SDMMC ErrorCode detected: 0x%08X", hsd1.ErrorCode);
 800142e:	4b97      	ldr	r3, [pc, #604]	@ (800168c <SDStorage_Init+0x2cc>)
 8001430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001432:	461a      	mov	r2, r3
 8001434:	4999      	ldr	r1, [pc, #612]	@ (800169c <SDStorage_Init+0x2dc>)
 8001436:	2002      	movs	r0, #2
 8001438:	f004 f96a 	bl	8005710 <LOGGER_SendFormatted>
            
            if (hsd1.ErrorCode & SDMMC_ERROR_TX_UNDERRUN) {
 800143c:	4b93      	ldr	r3, [pc, #588]	@ (800168c <SDStorage_Init+0x2cc>)
 800143e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <SDStorage_Init+0x90>
                LOG_WARN("[SDStorage] TX_UNDERRUN detected - clock may be too fast");
 8001448:	4995      	ldr	r1, [pc, #596]	@ (80016a0 <SDStorage_Init+0x2e0>)
 800144a:	2002      	movs	r0, #2
 800144c:	f004 f960 	bl	8005710 <LOGGER_SendFormatted>
            }
            if (hsd1.ErrorCode & SDMMC_ERROR_DATA_CRC_FAIL) {
 8001450:	4b8e      	ldr	r3, [pc, #568]	@ (800168c <SDStorage_Init+0x2cc>)
 8001452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <SDStorage_Init+0xa8>
                LOG_WARN("[SDStorage] CRC_FAIL detected - cache issue possible");
 800145c:	4991      	ldr	r1, [pc, #580]	@ (80016a4 <SDStorage_Init+0x2e4>)
 800145e:	2002      	movs	r0, #2
 8001460:	f004 f956 	bl	8005710 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 8001464:	f7ff ff22 	bl	80012ac <SCB_CleanInvalidateDCache>
            }
            
            // 에러 코드 클리어
            hsd1.ErrorCode = HAL_SD_ERROR_NONE;
 8001468:	4b88      	ldr	r3, [pc, #544]	@ (800168c <SDStorage_Init+0x2cc>)
 800146a:	2200      	movs	r2, #0
 800146c:	639a      	str	r2, [r3, #56]	@ 0x38
 800146e:	e00e      	b.n	800148e <SDStorage_Init+0xce>
        }
    } else {
        LOG_ERROR("[SDStorage] ❌ SD card failed to reach TRANSFER state (state: %d)", card_state);
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	498d      	ldr	r1, [pc, #564]	@ (80016a8 <SDStorage_Init+0x2e8>)
 8001474:	2003      	movs	r0, #3
 8001476:	f004 f94b 	bl	8005710 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] SDMMC ErrorCode: 0x%08X", hsd1.ErrorCode);
 800147a:	4b84      	ldr	r3, [pc, #528]	@ (800168c <SDStorage_Init+0x2cc>)
 800147c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800147e:	461a      	mov	r2, r3
 8001480:	498a      	ldr	r1, [pc, #552]	@ (80016ac <SDStorage_Init+0x2ec>)
 8001482:	2003      	movs	r0, #3
 8001484:	f004 f944 	bl	8005710 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
 800148c:	e199      	b.n	80017c2 <SDStorage_Init+0x402>
    }
    
    DSTATUS disk_status = disk_initialize(0);
 800148e:	2000      	movs	r0, #0
 8001490:	f010 ff72 	bl	8012378 <disk_initialize>
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	461a      	mov	r2, r3
 800149c:	4984      	ldr	r1, [pc, #528]	@ (80016b0 <SDStorage_Init+0x2f0>)
 800149e:	2001      	movs	r0, #1
 80014a0:	f004 f936 	bl	8005710 <LOGGER_SendFormatted>
    
    // disk_initialize 실패 시 조기 종료 (블로킹 방지)
    if (disk_status != 0) {
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00a      	beq.n	80014c0 <SDStorage_Init+0x100>
        LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 80014aa:	4982      	ldr	r1, [pc, #520]	@ (80016b4 <SDStorage_Init+0x2f4>)
 80014ac:	2003      	movs	r0, #3
 80014ae:	f004 f92f 	bl	8005710 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 80014b2:	4981      	ldr	r1, [pc, #516]	@ (80016b8 <SDStorage_Init+0x2f8>)
 80014b4:	2003      	movs	r0, #3
 80014b6:	f004 f92b 	bl	8005710 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e180      	b.n	80017c2 <SDStorage_Init+0x402>
    }
    
    // 2. 파일시스템 마운트 시도 (지연 마운트로 변경 - 블로킹 방지)
    LOG_INFO("[SDStorage] Using deferred mount (flag=0) to avoid blocking...");
 80014c0:	497e      	ldr	r1, [pc, #504]	@ (80016bc <SDStorage_Init+0x2fc>)
 80014c2:	2001      	movs	r0, #1
 80014c4:	f004 f924 	bl	8005710 <LOGGER_SendFormatted>
    
    // f_mount 호출 전에 충분한 지연 (SD 카드 안정화)
    #ifdef STM32F746xx
    LOG_INFO("[SDStorage] Waiting for SD card stabilization (500ms)...");
 80014c8:	497d      	ldr	r1, [pc, #500]	@ (80016c0 <SDStorage_Init+0x300>)
 80014ca:	2001      	movs	r0, #1
 80014cc:	f004 f920 	bl	8005710 <LOGGER_SendFormatted>
    HAL_Delay(500);
 80014d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014d4:	f004 ff3c 	bl	8006350 <HAL_Delay>
    #endif
    
    // f_mount 블로킹 문제 - 완전 우회 시도
    LOG_WARN("[SDStorage] f_mount consistently blocks despite all fixes");
 80014d8:	497a      	ldr	r1, [pc, #488]	@ (80016c4 <SDStorage_Init+0x304>)
 80014da:	2002      	movs	r0, #2
 80014dc:	f004 f918 	bl	8005710 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Attempting direct file operations without f_mount...");
 80014e0:	4979      	ldr	r1, [pc, #484]	@ (80016c8 <SDStorage_Init+0x308>)
 80014e2:	2001      	movs	r0, #1
 80014e4:	f004 f914 	bl	8005710 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Some FatFs implementations support auto-mount on first file access");
 80014e8:	4978      	ldr	r1, [pc, #480]	@ (80016cc <SDStorage_Init+0x30c>)
 80014ea:	2001      	movs	r0, #1
 80014ec:	f004 f910 	bl	8005710 <LOGGER_SendFormatted>
    
    // f_mount 여러 번 재시도 (성공 프로젝트 패턴)
    LOG_INFO("[SDStorage] Attempting f_mount with retry logic...");
 80014f0:	4977      	ldr	r1, [pc, #476]	@ (80016d0 <SDStorage_Init+0x310>)
 80014f2:	2001      	movs	r0, #1
 80014f4:	f004 f90c 	bl	8005710 <LOGGER_SendFormatted>
    FRESULT mount_result = FR_DISK_ERR;  // 초기값
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
    
    for (int retry = 0; retry < 3; retry++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	e035      	b.n	800156e <SDStorage_Init+0x1ae>
        LOG_INFO("[SDStorage] f_mount attempt %d/3...", retry + 1);
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3301      	adds	r3, #1
 8001506:	461a      	mov	r2, r3
 8001508:	4972      	ldr	r1, [pc, #456]	@ (80016d4 <SDStorage_Init+0x314>)
 800150a:	2001      	movs	r0, #1
 800150c:	f004 f900 	bl	8005710 <LOGGER_SendFormatted>
        mount_result = f_mount(&SDFatFS, SDPath, 1);  // 즉시 마운트
 8001510:	2201      	movs	r2, #1
 8001512:	4971      	ldr	r1, [pc, #452]	@ (80016d8 <SDStorage_Init+0x318>)
 8001514:	4871      	ldr	r0, [pc, #452]	@ (80016dc <SDStorage_Init+0x31c>)
 8001516:	f012 fadf 	bl	8013ad8 <f_mount>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
        LOG_INFO("[SDStorage] f_mount result: %d", mount_result);
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	461a      	mov	r2, r3
 8001522:	496f      	ldr	r1, [pc, #444]	@ (80016e0 <SDStorage_Init+0x320>)
 8001524:	2001      	movs	r0, #1
 8001526:	f004 f8f3 	bl	8005710 <LOGGER_SendFormatted>
        
        if (mount_result == FR_OK) {
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d107      	bne.n	8001540 <SDStorage_Init+0x180>
            LOG_INFO("[SDStorage] ✅ f_mount successful on attempt %d", retry + 1);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	3301      	adds	r3, #1
 8001534:	461a      	mov	r2, r3
 8001536:	496b      	ldr	r1, [pc, #428]	@ (80016e4 <SDStorage_Init+0x324>)
 8001538:	2001      	movs	r0, #1
 800153a:	f004 f8e9 	bl	8005710 <LOGGER_SendFormatted>
            break;
 800153e:	e019      	b.n	8001574 <SDStorage_Init+0x1b4>
        } else {
            LOG_WARN("[SDStorage] f_mount failed on attempt %d, retrying in 1000ms...", retry + 1);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3301      	adds	r3, #1
 8001544:	461a      	mov	r2, r3
 8001546:	4968      	ldr	r1, [pc, #416]	@ (80016e8 <SDStorage_Init+0x328>)
 8001548:	2002      	movs	r0, #2
 800154a:	f004 f8e1 	bl	8005710 <LOGGER_SendFormatted>
            if (retry < 2) {  // 마지막 시도가 아니면 대기
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	dc09      	bgt.n	8001568 <SDStorage_Init+0x1a8>
                // STM32F7 D-Cache 클리어 (성공 프로젝트 패턴)
                LOG_INFO("[SDStorage] Clearing D-Cache for STM32F7 compatibility...");
 8001554:	4965      	ldr	r1, [pc, #404]	@ (80016ec <SDStorage_Init+0x32c>)
 8001556:	2001      	movs	r0, #1
 8001558:	f004 f8da 	bl	8005710 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 800155c:	f7ff fea6 	bl	80012ac <SCB_CleanInvalidateDCache>
                HAL_Delay(1000);
 8001560:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001564:	f004 fef4 	bl	8006350 <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	3301      	adds	r3, #1
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b02      	cmp	r3, #2
 8001572:	ddc6      	ble.n	8001502 <SDStorage_Init+0x142>
            }
        }
    }
    
    // 즉시 마운트 성공 시 쓰기 준비 완료
    if (mount_result == FR_OK) {
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d103      	bne.n	8001582 <SDStorage_Init+0x1c2>
        LOG_INFO("[SDStorage] Immediate mount successful - SD ready for write operations");
 800157a:	495d      	ldr	r1, [pc, #372]	@ (80016f0 <SDStorage_Init+0x330>)
 800157c:	2001      	movs	r0, #1
 800157e:	f004 f8c7 	bl	8005710 <LOGGER_SendFormatted>
    }
    
    if (mount_result != FR_OK) {
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80f8 	beq.w	800177a <SDStorage_Init+0x3ba>
        LOG_WARN("[SDStorage] f_mount failed with result: %d", mount_result);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	461a      	mov	r2, r3
 800158e:	4959      	ldr	r1, [pc, #356]	@ (80016f4 <SDStorage_Init+0x334>)
 8001590:	2002      	movs	r0, #2
 8001592:	f004 f8bd 	bl	8005710 <LOGGER_SendFormatted>
        
        // SD 카드가 이미 포맷되어 있다면 f_mkfs 시도하지 않고 다른 접근법 사용
        if (mount_result == FR_DISK_ERR) {
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d12f      	bne.n	80015fc <SDStorage_Init+0x23c>
            LOG_WARN("[SDStorage] FR_DISK_ERR detected - SD card may be formatted but incompatible");
 800159c:	4956      	ldr	r1, [pc, #344]	@ (80016f8 <SDStorage_Init+0x338>)
 800159e:	2002      	movs	r0, #2
 80015a0:	f004 f8b6 	bl	8005710 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Skipping f_mkfs since SD card is already FAT32 formatted");
 80015a4:	4955      	ldr	r1, [pc, #340]	@ (80016fc <SDStorage_Init+0x33c>)
 80015a6:	2001      	movs	r0, #1
 80015a8:	f004 f8b2 	bl	8005710 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Trying alternative mount approach...");
 80015ac:	4954      	ldr	r1, [pc, #336]	@ (8001700 <SDStorage_Init+0x340>)
 80015ae:	2001      	movs	r0, #1
 80015b0:	f004 f8ae 	bl	8005710 <LOGGER_SendFormatted>
            
            // 다른 마운트 방식 시도 (지연 마운트)
            LOG_INFO("[SDStorage] Attempting deferred mount (flag=0)...");
 80015b4:	4953      	ldr	r1, [pc, #332]	@ (8001704 <SDStorage_Init+0x344>)
 80015b6:	2001      	movs	r0, #1
 80015b8:	f004 f8aa 	bl	8005710 <LOGGER_SendFormatted>
            mount_result = f_mount(&SDFatFS, SDPath, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	4946      	ldr	r1, [pc, #280]	@ (80016d8 <SDStorage_Init+0x318>)
 80015c0:	4846      	ldr	r0, [pc, #280]	@ (80016dc <SDStorage_Init+0x31c>)
 80015c2:	f012 fa89 	bl	8013ad8 <f_mount>
 80015c6:	4603      	mov	r3, r0
 80015c8:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Deferred mount result: %d", mount_result);
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	461a      	mov	r2, r3
 80015ce:	494e      	ldr	r1, [pc, #312]	@ (8001708 <SDStorage_Init+0x348>)
 80015d0:	2001      	movs	r0, #1
 80015d2:	f004 f89d 	bl	8005710 <LOGGER_SendFormatted>
            
            if (mount_result == FR_OK) {
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d104      	bne.n	80015e6 <SDStorage_Init+0x226>
                LOG_INFO("[SDStorage] Deferred mount successful!");
 80015dc:	494b      	ldr	r1, [pc, #300]	@ (800170c <SDStorage_Init+0x34c>)
 80015de:	2001      	movs	r0, #1
 80015e0:	f004 f896 	bl	8005710 <LOGGER_SendFormatted>
 80015e4:	e0c9      	b.n	800177a <SDStorage_Init+0x3ba>
            } else {
                LOG_ERROR("[SDStorage] Both immediate and deferred mount failed");
 80015e6:	494a      	ldr	r1, [pc, #296]	@ (8001710 <SDStorage_Init+0x350>)
 80015e8:	2003      	movs	r0, #3
 80015ea:	f004 f891 	bl	8005710 <LOGGER_SendFormatted>
                LOG_ERROR("[SDStorage] SD card may have hardware compatibility issues");
 80015ee:	4949      	ldr	r1, [pc, #292]	@ (8001714 <SDStorage_Init+0x354>)
 80015f0:	2003      	movs	r0, #3
 80015f2:	f004 f88d 	bl	8005710 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e0e2      	b.n	80017c2 <SDStorage_Init+0x402>
            }
        }
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d003      	beq.n	800160a <SDStorage_Init+0x24a>
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b0d      	cmp	r3, #13
 8001606:	f040 80ae 	bne.w	8001766 <SDStorage_Init+0x3a6>
            // 작업 버퍼 할당 (전역 또는 스택)
            static BYTE work[_MAX_SS];
            
            // 실제 f_mkfs 시도
            LOG_INFO("[SDStorage] Attempting to create filesystem with f_mkfs...");
 800160a:	4943      	ldr	r1, [pc, #268]	@ (8001718 <SDStorage_Init+0x358>)
 800160c:	2001      	movs	r0, #1
 800160e:	f004 f87f 	bl	8005710 <LOGGER_SendFormatted>
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 8001612:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	4b40      	ldr	r3, [pc, #256]	@ (800171c <SDStorage_Init+0x35c>)
 800161a:	2200      	movs	r2, #0
 800161c:	2107      	movs	r1, #7
 800161e:	482e      	ldr	r0, [pc, #184]	@ (80016d8 <SDStorage_Init+0x318>)
 8001620:	f012 ff44 	bl	80144ac <f_mkfs>
 8001624:	4603      	mov	r3, r0
 8001626:	71bb      	strb	r3, [r7, #6]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 8001628:	79bb      	ldrb	r3, [r7, #6]
 800162a:	461a      	mov	r2, r3
 800162c:	493c      	ldr	r1, [pc, #240]	@ (8001720 <SDStorage_Init+0x360>)
 800162e:	2001      	movs	r0, #1
 8001630:	f004 f86e 	bl	8005710 <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 8001634:	79bb      	ldrb	r3, [r7, #6]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d07c      	beq.n	8001734 <SDStorage_Init+0x374>
                // FAT32로 다시 시도
                LOG_INFO("[SDStorage] Retrying with explicit FAT32 format...");
 800163a:	493a      	ldr	r1, [pc, #232]	@ (8001724 <SDStorage_Init+0x364>)
 800163c:	2001      	movs	r0, #1
 800163e:	f004 f867 	bl	8005710 <LOGGER_SendFormatted>
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 8001642:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	4b34      	ldr	r3, [pc, #208]	@ (800171c <SDStorage_Init+0x35c>)
 800164a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800164e:	2102      	movs	r1, #2
 8001650:	4821      	ldr	r0, [pc, #132]	@ (80016d8 <SDStorage_Init+0x318>)
 8001652:	f012 ff2b 	bl	80144ac <f_mkfs>
 8001656:	4603      	mov	r3, r0
 8001658:	71bb      	strb	r3, [r7, #6]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	461a      	mov	r2, r3
 800165e:	4932      	ldr	r1, [pc, #200]	@ (8001728 <SDStorage_Init+0x368>)
 8001660:	2001      	movs	r0, #1
 8001662:	f004 f855 	bl	8005710 <LOGGER_SendFormatted>
                
                if (mkfs_result != FR_OK) {
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d063      	beq.n	8001734 <SDStorage_Init+0x374>
                    LOG_ERROR("[SDStorage] File system creation failed: %d", mkfs_result);
 800166c:	79bb      	ldrb	r3, [r7, #6]
 800166e:	461a      	mov	r2, r3
 8001670:	492e      	ldr	r1, [pc, #184]	@ (800172c <SDStorage_Init+0x36c>)
 8001672:	2003      	movs	r0, #3
 8001674:	f004 f84c 	bl	8005710 <LOGGER_SendFormatted>
                    LOG_ERROR("[SDStorage] Possible SD card hardware issue - try different card");
 8001678:	492d      	ldr	r1, [pc, #180]	@ (8001730 <SDStorage_Init+0x370>)
 800167a:	2003      	movs	r0, #3
 800167c:	f004 f848 	bl	8005710 <LOGGER_SendFormatted>
                    return SDSTORAGE_ERROR;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	e09d      	b.n	80017c2 <SDStorage_Init+0x402>
 8001686:	bf00      	nop
 8001688:	08019638 	.word	0x08019638
 800168c:	20001d90 	.word	0x20001d90
 8001690:	08019668 	.word	0x08019668
 8001694:	08019690 	.word	0x08019690
 8001698:	080196d0 	.word	0x080196d0
 800169c:	0801970c 	.word	0x0801970c
 80016a0:	0801973c 	.word	0x0801973c
 80016a4:	08019778 	.word	0x08019778
 80016a8:	080197b0 	.word	0x080197b0
 80016ac:	080197f4 	.word	0x080197f4
 80016b0:	08019818 	.word	0x08019818
 80016b4:	08019844 	.word	0x08019844
 80016b8:	0801987c 	.word	0x0801987c
 80016bc:	080198c8 	.word	0x080198c8
 80016c0:	08019908 	.word	0x08019908
 80016c4:	08019944 	.word	0x08019944
 80016c8:	08019980 	.word	0x08019980
 80016cc:	080199c4 	.word	0x080199c4
 80016d0:	08019a14 	.word	0x08019a14
 80016d4:	08019a48 	.word	0x08019a48
 80016d8:	200026d4 	.word	0x200026d4
 80016dc:	200026d8 	.word	0x200026d8
 80016e0:	08019a6c 	.word	0x08019a6c
 80016e4:	08019a8c 	.word	0x08019a8c
 80016e8:	08019ac0 	.word	0x08019ac0
 80016ec:	08019b00 	.word	0x08019b00
 80016f0:	08019b3c 	.word	0x08019b3c
 80016f4:	08019b84 	.word	0x08019b84
 80016f8:	08019bb0 	.word	0x08019bb0
 80016fc:	08019c00 	.word	0x08019c00
 8001700:	08019c48 	.word	0x08019c48
 8001704:	08019c7c 	.word	0x08019c7c
 8001708:	08019cb0 	.word	0x08019cb0
 800170c:	08019cd8 	.word	0x08019cd8
 8001710:	08019d00 	.word	0x08019d00
 8001714:	08019d38 	.word	0x08019d38
 8001718:	08019d74 	.word	0x08019d74
 800171c:	2000048c 	.word	0x2000048c
 8001720:	08019db0 	.word	0x08019db0
 8001724:	08019dd8 	.word	0x08019dd8
 8001728:	08019e0c 	.word	0x08019e0c
 800172c:	08019e34 	.word	0x08019e34
 8001730:	08019e60 	.word	0x08019e60
                }
            }
            
            // 파일시스템 생성 후 재마운트 시도
            mount_result = f_mount(&SDFatFS, SDPath, 1);
 8001734:	2201      	movs	r2, #1
 8001736:	4925      	ldr	r1, [pc, #148]	@ (80017cc <SDStorage_Init+0x40c>)
 8001738:	4825      	ldr	r0, [pc, #148]	@ (80017d0 <SDStorage_Init+0x410>)
 800173a:	f012 f9cd 	bl	8013ad8 <f_mount>
 800173e:	4603      	mov	r3, r0
 8001740:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	461a      	mov	r2, r3
 8001746:	4923      	ldr	r1, [pc, #140]	@ (80017d4 <SDStorage_Init+0x414>)
 8001748:	2001      	movs	r0, #1
 800174a:	f003 ffe1 	bl	8005710 <LOGGER_SendFormatted>
            
            if (mount_result != FR_OK) {
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d011      	beq.n	8001778 <SDStorage_Init+0x3b8>
                LOG_ERROR("[SDStorage] Re-mount failed after mkfs: %d", mount_result);
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	461a      	mov	r2, r3
 8001758:	491f      	ldr	r1, [pc, #124]	@ (80017d8 <SDStorage_Init+0x418>)
 800175a:	2003      	movs	r0, #3
 800175c:	f003 ffd8 	bl	8005710 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	e02d      	b.n	80017c2 <SDStorage_Init+0x402>
            }
        } else {
            LOG_ERROR("[SDStorage] Mount failed with unrecoverable error: %d", mount_result);
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	461a      	mov	r2, r3
 800176a:	491c      	ldr	r1, [pc, #112]	@ (80017dc <SDStorage_Init+0x41c>)
 800176c:	2003      	movs	r0, #3
 800176e:	f003 ffcf 	bl	8005710 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e024      	b.n	80017c2 <SDStorage_Init+0x402>
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001778:	bf00      	nop
        }
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 800177a:	4919      	ldr	r1, [pc, #100]	@ (80017e0 <SDStorage_Init+0x420>)
 800177c:	2001      	movs	r0, #1
 800177e:	f003 ffc7 	bl	8005710 <LOGGER_SendFormatted>
#endif

    // FatFs 마운트 성공 확인됨
    
    // 디렉토리 생성 시도
    LOG_INFO("[SDStorage] Creating log directory...");
 8001782:	4918      	ldr	r1, [pc, #96]	@ (80017e4 <SDStorage_Init+0x424>)
 8001784:	2001      	movs	r0, #1
 8001786:	f003 ffc3 	bl	8005710 <LOGGER_SendFormatted>
    int dir_result = _create_log_directory();
 800178a:	f000 fb51 	bl	8001e30 <_create_log_directory>
 800178e:	6038      	str	r0, [r7, #0]
    g_directory_available = (dir_result == SDSTORAGE_OK);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf0c      	ite	eq
 8001796:	2301      	moveq	r3, #1
 8001798:	2300      	movne	r3, #0
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <SDStorage_Init+0x428>)
 800179e:	701a      	strb	r2, [r3, #0]
    
    g_sd_ready = true;
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <SDStorage_Init+0x42c>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <SDStorage_Init+0x430>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 80017ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017b0:	2100      	movs	r1, #0
 80017b2:	4810      	ldr	r0, [pc, #64]	@ (80017f4 <SDStorage_Init+0x434>)
 80017b4:	f016 f998 	bl	8017ae8 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 80017b8:	490f      	ldr	r1, [pc, #60]	@ (80017f8 <SDStorage_Init+0x438>)
 80017ba:	2001      	movs	r0, #1
 80017bc:	f003 ffa8 	bl	8005710 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200026d4 	.word	0x200026d4
 80017d0:	200026d8 	.word	0x200026d8
 80017d4:	08019ea4 	.word	0x08019ea4
 80017d8:	08019ed0 	.word	0x08019ed0
 80017dc:	08019efc 	.word	0x08019efc
 80017e0:	08019f34 	.word	0x08019f34
 80017e4:	08019f60 	.word	0x08019f60
 80017e8:	20000384 	.word	0x20000384
 80017ec:	2000027d 	.word	0x2000027d
 80017f0:	20000380 	.word	0x20000380
 80017f4:	20000280 	.word	0x20000280
 80017f8:	08019f88 	.word	0x08019f88

080017fc <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 8001802:	af02      	add	r7, sp, #8
 8001804:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001808:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800180c:	6018      	str	r0, [r3, #0]
 800180e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001812:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001816:	6019      	str	r1, [r3, #0]
    if (!g_sd_ready) {
 8001818:	4b90      	ldr	r3, [pc, #576]	@ (8001a5c <SDStorage_WriteLog+0x260>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f083 0301 	eor.w	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <SDStorage_WriteLog+0x30>
        return SDSTORAGE_NOT_READY;
 8001826:	f06f 0301 	mvn.w	r3, #1
 800182a:	e23c      	b.n	8001ca6 <SDStorage_WriteLog+0x4aa>
    }
    
    if (data == NULL || size == 0) {
 800182c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001830:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <SDStorage_WriteLog+0x4c>
 800183a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800183e:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <SDStorage_WriteLog+0x52>
        return SDSTORAGE_INVALID_PARAM;
 8001848:	f06f 0304 	mvn.w	r3, #4
 800184c:	e22b      	b.n	8001ca6 <SDStorage_WriteLog+0x4aa>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 800184e:	4b84      	ldr	r3, [pc, #528]	@ (8001a60 <SDStorage_WriteLog+0x264>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00a      	beq.n	800186c <SDStorage_WriteLog+0x70>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 8001856:	4b83      	ldr	r3, [pc, #524]	@ (8001a64 <SDStorage_WriteLog+0x268>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800185e:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 8001866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800186a:	d907      	bls.n	800187c <SDStorage_WriteLog+0x80>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 800186c:	f000 fa3a 	bl	8001ce4 <SDStorage_CreateNewLogFile>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <SDStorage_WriteLog+0x80>
            return SDSTORAGE_FILE_ERROR;
 8001876:	f06f 0302 	mvn.w	r3, #2
 800187a:	e214      	b.n	8001ca6 <SDStorage_WriteLog+0x4aa>

#ifdef STM32F746xx
    // STM32 환경: 안정적인 열기-쓰기-닫기 방식
    
    // 로그 파일명이 없으면 생성
    if (strlen(g_current_log_file) == 0) {
 800187c:	4b78      	ldr	r3, [pc, #480]	@ (8001a60 <SDStorage_WriteLog+0x264>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10e      	bne.n	80018a2 <SDStorage_WriteLog+0xa6>
        if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001884:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001888:	4875      	ldr	r0, [pc, #468]	@ (8001a60 <SDStorage_WriteLog+0x264>)
 800188a:	f000 fb33 	bl	8001ef4 <_generate_log_filename>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <SDStorage_WriteLog+0xa6>
            LOG_ERROR("[SDStorage] Failed to generate log filename");
 8001894:	4974      	ldr	r1, [pc, #464]	@ (8001a68 <SDStorage_WriteLog+0x26c>)
 8001896:	2003      	movs	r0, #3
 8001898:	f003 ff3a 	bl	8005710 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	e201      	b.n	8001ca6 <SDStorage_WriteLog+0x4aa>
        }
    }
    
    // SD 카드 상태 변화에 robust한 방식: 매번 열고 닫기
    FIL temp_file;
    memset(&temp_file, 0, sizeof(temp_file));
 80018a2:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80018a6:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f016 f91b 	bl	8017ae8 <memset>
    
    // 파일 닫기 보장: 이전에 열린 파일이 있으면 강제로 닫기
    _ensure_file_closed();
 80018b2:	f7ff fd37 	bl	8001324 <_ensure_file_closed>
    
    // 성공 프로젝트 방식: 디스크 상태 먼저 확인
    DSTATUS current_disk_stat = disk_status(0);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f010 fd44 	bl	8012344 <disk_status>
 80018bc:	4603      	mov	r3, r0
 80018be:	f887 344e 	strb.w	r3, [r7, #1102]	@ 0x44e
    if (current_disk_stat != 0) {
 80018c2:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01a      	beq.n	8001900 <SDStorage_WriteLog+0x104>
        LOG_WARN("[SDStorage] Disk not ready (%d), reinitializing...", current_disk_stat);
 80018ca:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 80018ce:	461a      	mov	r2, r3
 80018d0:	4966      	ldr	r1, [pc, #408]	@ (8001a6c <SDStorage_WriteLog+0x270>)
 80018d2:	2002      	movs	r0, #2
 80018d4:	f003 ff1c 	bl	8005710 <LOGGER_SendFormatted>
        DSTATUS init_result = disk_initialize(0);
 80018d8:	2000      	movs	r0, #0
 80018da:	f010 fd4d 	bl	8012378 <disk_initialize>
 80018de:	4603      	mov	r3, r0
 80018e0:	f887 344d 	strb.w	r3, [r7, #1101]	@ 0x44d
        if (init_result != 0) {
 80018e4:	f897 344d 	ldrb.w	r3, [r7, #1101]	@ 0x44d
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <SDStorage_WriteLog+0x104>
            LOG_ERROR("[SDStorage] Disk reinitialization failed: %d", init_result);
 80018ec:	f897 344d 	ldrb.w	r3, [r7, #1101]	@ 0x44d
 80018f0:	461a      	mov	r2, r3
 80018f2:	495f      	ldr	r1, [pc, #380]	@ (8001a70 <SDStorage_WriteLog+0x274>)
 80018f4:	2003      	movs	r0, #3
 80018f6:	f003 ff0b 	bl	8005710 <LOGGER_SendFormatted>
            return SDSTORAGE_NOT_READY;
 80018fa:	f06f 0301 	mvn.w	r3, #1
 80018fe:	e1d2      	b.n	8001ca6 <SDStorage_WriteLog+0x4aa>
        }
    }
    
    // 파일 열기 (성공 프로젝트 방식: 단계적 시도)
    FRESULT open_result = f_open(&temp_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 8001900:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001904:	2232      	movs	r2, #50	@ 0x32
 8001906:	4956      	ldr	r1, [pc, #344]	@ (8001a60 <SDStorage_WriteLog+0x264>)
 8001908:	4618      	mov	r0, r3
 800190a:	f012 f929 	bl	8013b60 <f_open>
 800190e:	4603      	mov	r3, r0
 8001910:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
    
    // 파일 열기 성공 시 추적 등록
    if (open_result == FR_OK) {
 8001914:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10a      	bne.n	8001932 <SDStorage_WriteLog+0x136>
        _register_file_opened(&temp_file, g_current_log_file);
 800191c:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001920:	494f      	ldr	r1, [pc, #316]	@ (8001a60 <SDStorage_WriteLog+0x264>)
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fd20 	bl	8001368 <_register_file_opened>
        LOG_DEBUG("[SDStorage] File opened and registered: %s", g_current_log_file);
 8001928:	4a4d      	ldr	r2, [pc, #308]	@ (8001a60 <SDStorage_WriteLog+0x264>)
 800192a:	4952      	ldr	r1, [pc, #328]	@ (8001a74 <SDStorage_WriteLog+0x278>)
 800192c:	2000      	movs	r0, #0
 800192e:	f003 feef 	bl	8005710 <LOGGER_SendFormatted>
    }
    
    // f_open 실패 시 성공 프로젝트 방식의 복구 로직
    if (open_result != FR_OK) {
 8001932:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 80b0 	beq.w	8001a9c <SDStorage_WriteLog+0x2a0>
        LOG_WARN("[SDStorage] f_open failed (%d), trying recovery...", open_result);
 800193c:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001940:	461a      	mov	r2, r3
 8001942:	494d      	ldr	r1, [pc, #308]	@ (8001a78 <SDStorage_WriteLog+0x27c>)
 8001944:	2002      	movs	r0, #2
 8001946:	f003 fee3 	bl	8005710 <LOGGER_SendFormatted>
        
        // 1단계: 마운트 재시도
        f_mount(NULL, SDPath, 0);  // 언마운트
 800194a:	2200      	movs	r2, #0
 800194c:	494b      	ldr	r1, [pc, #300]	@ (8001a7c <SDStorage_WriteLog+0x280>)
 800194e:	2000      	movs	r0, #0
 8001950:	f012 f8c2 	bl	8013ad8 <f_mount>
        HAL_Delay(200);
 8001954:	20c8      	movs	r0, #200	@ 0xc8
 8001956:	f004 fcfb 	bl	8006350 <HAL_Delay>
        FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);  // 강제 재마운트
 800195a:	2201      	movs	r2, #1
 800195c:	4947      	ldr	r1, [pc, #284]	@ (8001a7c <SDStorage_WriteLog+0x280>)
 800195e:	4848      	ldr	r0, [pc, #288]	@ (8001a80 <SDStorage_WriteLog+0x284>)
 8001960:	f012 f8ba 	bl	8013ad8 <f_mount>
 8001964:	4603      	mov	r3, r0
 8001966:	f887 344c 	strb.w	r3, [r7, #1100]	@ 0x44c
        
        if (remount_result == FR_OK) {
 800196a:	f897 344c 	ldrb.w	r3, [r7, #1100]	@ 0x44c
 800196e:	2b00      	cmp	r3, #0
 8001970:	d117      	bne.n	80019a2 <SDStorage_WriteLog+0x1a6>
            // 재마운트 성공 후 다시 파일 열기 시도
            open_result = f_open(&temp_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 8001972:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001976:	2232      	movs	r2, #50	@ 0x32
 8001978:	4939      	ldr	r1, [pc, #228]	@ (8001a60 <SDStorage_WriteLog+0x264>)
 800197a:	4618      	mov	r0, r3
 800197c:	f012 f8f0 	bl	8013b60 <f_open>
 8001980:	4603      	mov	r3, r0
 8001982:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
            if (open_result == FR_OK) {
 8001986:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <SDStorage_WriteLog+0x1a6>
                _register_file_opened(&temp_file, g_current_log_file);
 800198e:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001992:	4933      	ldr	r1, [pc, #204]	@ (8001a60 <SDStorage_WriteLog+0x264>)
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fce7 	bl	8001368 <_register_file_opened>
                LOG_INFO("[SDStorage] File opened after remount recovery");
 800199a:	493a      	ldr	r1, [pc, #232]	@ (8001a84 <SDStorage_WriteLog+0x288>)
 800199c:	2001      	movs	r0, #1
 800199e:	f003 feb7 	bl	8005710 <LOGGER_SendFormatted>
            }
        }
        
        // 2단계: 여전히 실패하면 f_mkfs 시도
        if (open_result != FR_OK) {
 80019a2:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d049      	beq.n	8001a3e <SDStorage_WriteLog+0x242>
            LOG_WARN("[SDStorage] File still failed, trying f_mkfs recovery...");
 80019aa:	4937      	ldr	r1, [pc, #220]	@ (8001a88 <SDStorage_WriteLog+0x28c>)
 80019ac:	2002      	movs	r0, #2
 80019ae:	f003 feaf 	bl	8005710 <LOGGER_SendFormatted>
            static BYTE work[4096];
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 80019b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <SDStorage_WriteLog+0x290>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	2107      	movs	r1, #7
 80019be:	482f      	ldr	r0, [pc, #188]	@ (8001a7c <SDStorage_WriteLog+0x280>)
 80019c0:	f012 fd74 	bl	80144ac <f_mkfs>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f887 344b 	strb.w	r3, [r7, #1099]	@ 0x44b
            
            if (mkfs_result == FR_OK) {
 80019ca:	f897 344b 	ldrb.w	r3, [r7, #1099]	@ 0x44b
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d135      	bne.n	8001a3e <SDStorage_WriteLog+0x242>
                LOG_INFO("[SDStorage] f_mkfs successful, remounting...");
 80019d2:	492f      	ldr	r1, [pc, #188]	@ (8001a90 <SDStorage_WriteLog+0x294>)
 80019d4:	2001      	movs	r0, #1
 80019d6:	f003 fe9b 	bl	8005710 <LOGGER_SendFormatted>
                f_mount(NULL, SDPath, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	4927      	ldr	r1, [pc, #156]	@ (8001a7c <SDStorage_WriteLog+0x280>)
 80019de:	2000      	movs	r0, #0
 80019e0:	f012 f87a 	bl	8013ad8 <f_mount>
                HAL_Delay(500);
 80019e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019e8:	f004 fcb2 	bl	8006350 <HAL_Delay>
                remount_result = f_mount(&SDFatFS, SDPath, 1);
 80019ec:	2201      	movs	r2, #1
 80019ee:	4923      	ldr	r1, [pc, #140]	@ (8001a7c <SDStorage_WriteLog+0x280>)
 80019f0:	4823      	ldr	r0, [pc, #140]	@ (8001a80 <SDStorage_WriteLog+0x284>)
 80019f2:	f012 f871 	bl	8013ad8 <f_mount>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f887 344c 	strb.w	r3, [r7, #1100]	@ 0x44c
                
                if (remount_result == FR_OK) {
 80019fc:	f897 344c 	ldrb.w	r3, [r7, #1100]	@ 0x44c
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d11c      	bne.n	8001a3e <SDStorage_WriteLog+0x242>
                    // 파일명 재생성 (mkfs 후 파일이 사라졌으므로)
                    _generate_log_filename(g_current_log_file, sizeof(g_current_log_file));
 8001a04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a08:	4815      	ldr	r0, [pc, #84]	@ (8001a60 <SDStorage_WriteLog+0x264>)
 8001a0a:	f000 fa73 	bl	8001ef4 <_generate_log_filename>
                    open_result = f_open(&temp_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001a0e:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001a12:	220a      	movs	r2, #10
 8001a14:	4912      	ldr	r1, [pc, #72]	@ (8001a60 <SDStorage_WriteLog+0x264>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f012 f8a2 	bl	8013b60 <f_open>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
                    if (open_result == FR_OK) {
 8001a22:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <SDStorage_WriteLog+0x242>
                        _register_file_opened(&temp_file, g_current_log_file);
 8001a2a:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001a2e:	490c      	ldr	r1, [pc, #48]	@ (8001a60 <SDStorage_WriteLog+0x264>)
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fc99 	bl	8001368 <_register_file_opened>
                        LOG_INFO("[SDStorage] File created after f_mkfs recovery");
 8001a36:	4917      	ldr	r1, [pc, #92]	@ (8001a94 <SDStorage_WriteLog+0x298>)
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f003 fe69 	bl	8005710 <LOGGER_SendFormatted>
                }
            }
        }
        
        // 모든 복구 시도 실패
        if (open_result != FR_OK) {
 8001a3e:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d02a      	beq.n	8001a9c <SDStorage_WriteLog+0x2a0>
            LOG_ERROR("[SDStorage] All recovery attempts failed: %d", open_result);
 8001a46:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4912      	ldr	r1, [pc, #72]	@ (8001a98 <SDStorage_WriteLog+0x29c>)
 8001a4e:	2003      	movs	r0, #3
 8001a50:	f003 fe5e 	bl	8005710 <LOGGER_SendFormatted>
            return SDSTORAGE_FILE_ERROR;
 8001a54:	f06f 0302 	mvn.w	r3, #2
 8001a58:	e125      	b.n	8001ca6 <SDStorage_WriteLog+0x4aa>
 8001a5a:	bf00      	nop
 8001a5c:	2000027d 	.word	0x2000027d
 8001a60:	20000280 	.word	0x20000280
 8001a64:	20000380 	.word	0x20000380
 8001a68:	08019fbc 	.word	0x08019fbc
 8001a6c:	08019fe8 	.word	0x08019fe8
 8001a70:	0801a01c 	.word	0x0801a01c
 8001a74:	0801a04c 	.word	0x0801a04c
 8001a78:	0801a078 	.word	0x0801a078
 8001a7c:	200026d4 	.word	0x200026d4
 8001a80:	200026d8 	.word	0x200026d8
 8001a84:	0801a0ac 	.word	0x0801a0ac
 8001a88:	0801a0dc 	.word	0x0801a0dc
 8001a8c:	2000068c 	.word	0x2000068c
 8001a90:	0801a118 	.word	0x0801a118
 8001a94:	0801a148 	.word	0x0801a148
 8001a98:	0801a178 	.word	0x0801a178
        }
    }
    
    if (open_result == FR_OK) {
 8001a9c:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 80df 	bne.w	8001c64 <SDStorage_WriteLog+0x468>
        // FA_OPEN_APPEND 사용 시 자동으로 파일 끝에 위치
        
        // 원본 데이터 + 줄바꿈을 함께 쓰기 (FR_INVALID_OBJECT 방지)
        char write_buffer[512];  // 충분한 버퍼 크기
        UINT total_bytes_to_write = size + 2;  // 원본 데이터 + \r\n
 8001aa6:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001aaa:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
        
        if (size + 2 < sizeof(write_buffer)) {
 8001ab6:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001aba:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ac6:	d273      	bcs.n	8001bb0 <SDStorage_WriteLog+0x3b4>
            // 원본 데이터 복사
            memcpy(write_buffer, data, size);
 8001ac8:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001acc:	f5a3 628a 	sub.w	r2, r3, #1104	@ 0x450
 8001ad0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001ad4:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8001ad8:	f107 000c 	add.w	r0, r7, #12
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	f016 f8c3 	bl	8017c6a <memcpy>
            // 줄바꿈 추가
            write_buffer[size] = '\r';
 8001ae4:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001ae8:	f2a3 4244 	subw	r2, r3, #1092	@ 0x444
 8001aec:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001af0:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	220d      	movs	r2, #13
 8001afa:	701a      	strb	r2, [r3, #0]
            write_buffer[size + 1] = '\n';
 8001afc:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001b00:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8001b0c:	f2a2 4244 	subw	r2, r2, #1092	@ 0x444
 8001b10:	210a      	movs	r1, #10
 8001b12:	54d1      	strb	r1, [r2, r3]
            
            // 한 번에 쓰기
            UINT bytes_written;
            FRESULT write_result = f_write(&temp_file, write_buffer, total_bytes_to_write, &bytes_written);
 8001b14:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001b18:	f107 010c 	add.w	r1, r7, #12
 8001b1c:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8001b20:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 8001b24:	f012 f9a7 	bl	8013e76 <f_write>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f887 3442 	strb.w	r3, [r7, #1090]	@ 0x442
            
            // 즉시 동기화 및 닫기
            f_sync(&temp_file);
 8001b2e:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001b32:	4618      	mov	r0, r3
 8001b34:	f012 fb14 	bl	8014160 <f_sync>
            f_close(&temp_file);
 8001b38:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f012 fb8d 	bl	801425c <f_close>
            _register_file_closed();  // 추적 해제
 8001b42:	f7ff fc2b 	bl	800139c <_register_file_closed>
            
            if (write_result == FR_OK && bytes_written == total_bytes_to_write) {
 8001b46:	f897 3442 	ldrb.w	r3, [r7, #1090]	@ 0x442
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d11e      	bne.n	8001b8c <SDStorage_WriteLog+0x390>
 8001b4e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001b52:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d115      	bne.n	8001b8c <SDStorage_WriteLog+0x390>
                g_current_log_size += bytes_written;
 8001b60:	4b53      	ldr	r3, [pc, #332]	@ (8001cb0 <SDStorage_WriteLog+0x4b4>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001b68:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a4f      	ldr	r2, [pc, #316]	@ (8001cb0 <SDStorage_WriteLog+0x4b4>)
 8001b72:	6013      	str	r3, [r2, #0]
                LOG_DEBUG("[SDStorage] Log written successfully: %d bytes (including CRLF)", bytes_written);
 8001b74:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001b78:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	494c      	ldr	r1, [pc, #304]	@ (8001cb4 <SDStorage_WriteLog+0x4b8>)
 8001b82:	2000      	movs	r0, #0
 8001b84:	f003 fdc4 	bl	8005710 <LOGGER_SendFormatted>
                return SDSTORAGE_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e08c      	b.n	8001ca6 <SDStorage_WriteLog+0x4aa>
            } else {
                LOG_ERROR("[SDStorage] f_write failed: %d, written: %d/%d", write_result, bytes_written, total_bytes_to_write);
 8001b8c:	f897 2442 	ldrb.w	r2, [r7, #1090]	@ 0x442
 8001b90:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001b94:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4945      	ldr	r1, [pc, #276]	@ (8001cb8 <SDStorage_WriteLog+0x4bc>)
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f003 fdb3 	bl	8005710 <LOGGER_SendFormatted>
                return SDSTORAGE_FILE_ERROR;
 8001baa:	f06f 0302 	mvn.w	r3, #2
 8001bae:	e07a      	b.n	8001ca6 <SDStorage_WriteLog+0x4aa>
            }
        } else {
            // 버퍼 크기 초과 - 원본 데이터만 쓰기
            UINT bytes_written;
            FRESULT write_result = f_write(&temp_file, data, size, &bytes_written);
 8001bb0:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001bb4:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8001bb8:	f5a2 628a 	sub.w	r2, r2, #1104	@ 0x450
 8001bbc:	f507 618a 	add.w	r1, r7, #1104	@ 0x450
 8001bc0:	f2a1 414c 	subw	r1, r1, #1100	@ 0x44c
 8001bc4:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	6809      	ldr	r1, [r1, #0]
 8001bcc:	f012 f953 	bl	8013e76 <f_write>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3443 	strb.w	r3, [r7, #1091]	@ 0x443
            
            // 즉시 동기화 및 닫기
            f_sync(&temp_file);
 8001bd6:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f012 fac0 	bl	8014160 <f_sync>
            f_close(&temp_file);
 8001be0:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001be4:	4618      	mov	r0, r3
 8001be6:	f012 fb39 	bl	801425c <f_close>
            _register_file_closed();  // 추적 해제
 8001bea:	f7ff fbd7 	bl	800139c <_register_file_closed>
            
            if (write_result == FR_OK && bytes_written == size) {
 8001bee:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d121      	bne.n	8001c3a <SDStorage_WriteLog+0x43e>
 8001bf6:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001bfa:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8001c04:	f5a2 628a 	sub.w	r2, r2, #1104	@ 0x450
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d115      	bne.n	8001c3a <SDStorage_WriteLog+0x43e>
                g_current_log_size += bytes_written;
 8001c0e:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <SDStorage_WriteLog+0x4b4>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c16:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4a24      	ldr	r2, [pc, #144]	@ (8001cb0 <SDStorage_WriteLog+0x4b4>)
 8001c20:	6013      	str	r3, [r2, #0]
                LOG_DEBUG("[SDStorage] Log written successfully: %d bytes (no CRLF due to size)", bytes_written);
 8001c22:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c26:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4923      	ldr	r1, [pc, #140]	@ (8001cbc <SDStorage_WriteLog+0x4c0>)
 8001c30:	2000      	movs	r0, #0
 8001c32:	f003 fd6d 	bl	8005710 <LOGGER_SendFormatted>
                return SDSTORAGE_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e035      	b.n	8001ca6 <SDStorage_WriteLog+0x4aa>
            } else {
                LOG_ERROR("[SDStorage] f_write failed: %d, written: %d/%d", write_result, bytes_written, size);
 8001c3a:	f897 2443 	ldrb.w	r2, [r7, #1091]	@ 0x443
 8001c3e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c42:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001c46:	6819      	ldr	r1, [r3, #0]
 8001c48:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c4c:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	460b      	mov	r3, r1
 8001c56:	4918      	ldr	r1, [pc, #96]	@ (8001cb8 <SDStorage_WriteLog+0x4bc>)
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f003 fd59 	bl	8005710 <LOGGER_SendFormatted>
                return SDSTORAGE_FILE_ERROR;
 8001c5e:	f06f 0302 	mvn.w	r3, #2
 8001c62:	e020      	b.n	8001ca6 <SDStorage_WriteLog+0x4aa>
            }
        }
    } else {
        LOG_ERROR("[SDStorage] f_open failed: %d - SD card state may have changed", open_result);
 8001c64:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4915      	ldr	r1, [pc, #84]	@ (8001cc0 <SDStorage_WriteLog+0x4c4>)
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f003 fd4f 	bl	8005710 <LOGGER_SendFormatted>
        
        // SD 카드 상태 재확인
        DSTATUS current_status = disk_status(0);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f010 fb66 	bl	8012344 <disk_status>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f887 344a 	strb.w	r3, [r7, #1098]	@ 0x44a
        LOG_WARN("[SDStorage] Current disk status: 0x%02X", current_status);
 8001c7e:	f897 344a 	ldrb.w	r3, [r7, #1098]	@ 0x44a
 8001c82:	461a      	mov	r2, r3
 8001c84:	490f      	ldr	r1, [pc, #60]	@ (8001cc4 <SDStorage_WriteLog+0x4c8>)
 8001c86:	2002      	movs	r0, #2
 8001c88:	f003 fd42 	bl	8005710 <LOGGER_SendFormatted>
        
        if (current_status != 0) {
 8001c8c:	f897 344a 	ldrb.w	r3, [r7, #1098]	@ 0x44a
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <SDStorage_WriteLog+0x4a6>
            LOG_WARN("[SDStorage] SD card not ready - temporarily disabling SD logging");
 8001c94:	490c      	ldr	r1, [pc, #48]	@ (8001cc8 <SDStorage_WriteLog+0x4cc>)
 8001c96:	2002      	movs	r0, #2
 8001c98:	f003 fd3a 	bl	8005710 <LOGGER_SendFormatted>
            return SDSTORAGE_NOT_READY;
 8001c9c:	f06f 0301 	mvn.w	r3, #1
 8001ca0:	e001      	b.n	8001ca6 <SDStorage_WriteLog+0x4aa>
        }
        
        return SDSTORAGE_FILE_ERROR;
 8001ca2:	f06f 0302 	mvn.w	r3, #2
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
    return SDSTORAGE_OK;
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f507 678a 	add.w	r7, r7, #1104	@ 0x450
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000380 	.word	0x20000380
 8001cb4:	0801a1a8 	.word	0x0801a1a8
 8001cb8:	0801a1e8 	.word	0x0801a1e8
 8001cbc:	0801a218 	.word	0x0801a218
 8001cc0:	0801a260 	.word	0x0801a260
 8001cc4:	0801a2a0 	.word	0x0801a2a0
 8001cc8:	0801a2c8 	.word	0x0801a2c8

08001ccc <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
    return g_sd_ready;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	@ (8001ce0 <SDStorage_IsReady+0x14>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	2000027d 	.word	0x2000027d

08001ce4 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8001cea:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 8001cec:	4b43      	ldr	r3, [pc, #268]	@ (8001dfc <SDStorage_CreateNewLogFile+0x118>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	f083 0301 	eor.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <SDStorage_CreateNewLogFile+0x1c>
        return SDSTORAGE_NOT_READY;
 8001cfa:	f06f 0301 	mvn.w	r3, #1
 8001cfe:	e077      	b.n	8001df0 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 전역 파일 객체 제거됨 - 별도 처리 불필요
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001d00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d04:	483e      	ldr	r0, [pc, #248]	@ (8001e00 <SDStorage_CreateNewLogFile+0x11c>)
 8001d06:	f000 f8f5 	bl	8001ef4 <_generate_log_filename>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <SDStorage_CreateNewLogFile+0x32>
        return SDSTORAGE_ERROR;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
 8001d14:	e06c      	b.n	8001df0 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 테스트 (간단한 방식)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Testing file creation: %s", g_current_log_file);
 8001d16:	4a3a      	ldr	r2, [pc, #232]	@ (8001e00 <SDStorage_CreateNewLogFile+0x11c>)
 8001d18:	493a      	ldr	r1, [pc, #232]	@ (8001e04 <SDStorage_CreateNewLogFile+0x120>)
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f003 fcf8 	bl	8005710 <LOGGER_SendFormatted>
    
    // 지역 변수로 파일 객체 생성
    FIL test_file;
    memset(&test_file, 0, sizeof(test_file));
 8001d20:	463b      	mov	r3, r7
 8001d22:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f015 fedd 	bl	8017ae8 <memset>
    
    // SD 카드 상태 재확인
    DSTATUS current_disk_status = disk_status(0);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f010 fb08 	bl	8012344 <disk_status>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
    LOG_INFO("[SDStorage] Current disk status: 0x%02X", current_disk_status);
 8001d3a:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4931      	ldr	r1, [pc, #196]	@ (8001e08 <SDStorage_CreateNewLogFile+0x124>)
 8001d42:	2001      	movs	r0, #1
 8001d44:	f003 fce4 	bl	8005710 <LOGGER_SendFormatted>
    
    // 파일 생성 테스트
    FRESULT open_result = f_open(&test_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001d48:	463b      	mov	r3, r7
 8001d4a:	220a      	movs	r2, #10
 8001d4c:	492c      	ldr	r1, [pc, #176]	@ (8001e00 <SDStorage_CreateNewLogFile+0x11c>)
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f011 ff06 	bl	8013b60 <f_open>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001d5a:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001d5e:	461a      	mov	r2, r3
 8001d60:	492a      	ldr	r1, [pc, #168]	@ (8001e0c <SDStorage_CreateNewLogFile+0x128>)
 8001d62:	2001      	movs	r0, #1
 8001d64:	f003 fcd4 	bl	8005710 <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 8001d68:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d032      	beq.n	8001dd6 <SDStorage_CreateNewLogFile+0xf2>
        LOG_ERROR("[SDStorage] f_open failed: %d", open_result);
 8001d70:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001d74:	461a      	mov	r2, r3
 8001d76:	4926      	ldr	r1, [pc, #152]	@ (8001e10 <SDStorage_CreateNewLogFile+0x12c>)
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f003 fcc9 	bl	8005710 <LOGGER_SendFormatted>
        
        // 상세 에러 분석
        switch (open_result) {
 8001d7e:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d006      	beq.n	8001d94 <SDStorage_CreateNewLogFile+0xb0>
 8001d86:	2b10      	cmp	r3, #16
 8001d88:	dc13      	bgt.n	8001db2 <SDStorage_CreateNewLogFile+0xce>
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d00c      	beq.n	8001da8 <SDStorage_CreateNewLogFile+0xc4>
 8001d8e:	2b09      	cmp	r3, #9
 8001d90:	d005      	beq.n	8001d9e <SDStorage_CreateNewLogFile+0xba>
 8001d92:	e00e      	b.n	8001db2 <SDStorage_CreateNewLogFile+0xce>
            case 16: // FR_INVALID_OBJECT
                LOG_ERROR("[SDStorage] FR_INVALID_OBJECT - File object initialization issue");
 8001d94:	491f      	ldr	r1, [pc, #124]	@ (8001e14 <SDStorage_CreateNewLogFile+0x130>)
 8001d96:	2003      	movs	r0, #3
 8001d98:	f003 fcba 	bl	8005710 <LOGGER_SendFormatted>
                break;
 8001d9c:	e011      	b.n	8001dc2 <SDStorage_CreateNewLogFile+0xde>
            case 9: // FR_WRITE_PROTECTED  
                LOG_ERROR("[SDStorage] FR_WRITE_PROTECTED - SD card is write protected");
 8001d9e:	491e      	ldr	r1, [pc, #120]	@ (8001e18 <SDStorage_CreateNewLogFile+0x134>)
 8001da0:	2003      	movs	r0, #3
 8001da2:	f003 fcb5 	bl	8005710 <LOGGER_SendFormatted>
                break;
 8001da6:	e00c      	b.n	8001dc2 <SDStorage_CreateNewLogFile+0xde>
            case 3: // FR_NOT_READY
                LOG_ERROR("[SDStorage] FR_NOT_READY - Disk not ready");
 8001da8:	491c      	ldr	r1, [pc, #112]	@ (8001e1c <SDStorage_CreateNewLogFile+0x138>)
 8001daa:	2003      	movs	r0, #3
 8001dac:	f003 fcb0 	bl	8005710 <LOGGER_SendFormatted>
                break;
 8001db0:	e007      	b.n	8001dc2 <SDStorage_CreateNewLogFile+0xde>
            default:
                LOG_ERROR("[SDStorage] Unknown f_open error: %d", open_result);
 8001db2:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001db6:	461a      	mov	r2, r3
 8001db8:	4919      	ldr	r1, [pc, #100]	@ (8001e20 <SDStorage_CreateNewLogFile+0x13c>)
 8001dba:	2003      	movs	r0, #3
 8001dbc:	f003 fca8 	bl	8005710 <LOGGER_SendFormatted>
                break;
 8001dc0:	bf00      	nop
        }
        
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 8001dc2:	4918      	ldr	r1, [pc, #96]	@ (8001e24 <SDStorage_CreateNewLogFile+0x140>)
 8001dc4:	2002      	movs	r0, #2
 8001dc6:	f003 fca3 	bl	8005710 <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 8001dca:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <SDStorage_CreateNewLogFile+0x118>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 8001dd0:	f06f 0302 	mvn.w	r3, #2
 8001dd4:	e00c      	b.n	8001df0 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 확인 후 즉시 닫기 (추적 등록 없이)
    f_close(&test_file);
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f012 fa3f 	bl	801425c <f_close>
    LOG_INFO("[SDStorage] File created and ready for logging: %s", g_current_log_file);
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <SDStorage_CreateNewLogFile+0x11c>)
 8001de0:	4911      	ldr	r1, [pc, #68]	@ (8001e28 <SDStorage_CreateNewLogFile+0x144>)
 8001de2:	2001      	movs	r0, #1
 8001de4:	f003 fc94 	bl	8005710 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 8001de8:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <SDStorage_CreateNewLogFile+0x148>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000027d 	.word	0x2000027d
 8001e00:	20000280 	.word	0x20000280
 8001e04:	0801a30c 	.word	0x0801a30c
 8001e08:	0801a2a0 	.word	0x0801a2a0
 8001e0c:	0801a334 	.word	0x0801a334
 8001e10:	0801a354 	.word	0x0801a354
 8001e14:	0801a374 	.word	0x0801a374
 8001e18:	0801a3b8 	.word	0x0801a3b8
 8001e1c:	0801a3f4 	.word	0x0801a3f4
 8001e20:	0801a420 	.word	0x0801a420
 8001e24:	0801a448 	.word	0x0801a448
 8001e28:	0801a488 	.word	0x0801a488
 8001e2c:	20000380 	.word	0x20000380

08001e30 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // FatFs가 이미 정상 동작하므로 HAL 테스트 불필요
    
    // f_mkdir 전에 볼륨 상태 재확인 (에러 6 방지)
    LOG_INFO("[SDStorage] Verifying volume state before f_mkdir...");
 8001e36:	4924      	ldr	r1, [pc, #144]	@ (8001ec8 <_create_log_directory+0x98>)
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f003 fc69 	bl	8005710 <LOGGER_SendFormatted>
    
    // 볼륨 재마운트 시도 (상태 안정화)
    FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4922      	ldr	r1, [pc, #136]	@ (8001ecc <_create_log_directory+0x9c>)
 8001e42:	4823      	ldr	r0, [pc, #140]	@ (8001ed0 <_create_log_directory+0xa0>)
 8001e44:	f011 fe48 	bl	8013ad8 <f_mount>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] Volume re-mount result: %d", remount_result);
 8001e4c:	79bb      	ldrb	r3, [r7, #6]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4920      	ldr	r1, [pc, #128]	@ (8001ed4 <_create_log_directory+0xa4>)
 8001e52:	2001      	movs	r0, #1
 8001e54:	f003 fc5c 	bl	8005710 <LOGGER_SendFormatted>
    
    FRESULT mkdir_result = FR_NOT_ENABLED;  // 초기값 설정
 8001e58:	230c      	movs	r3, #12
 8001e5a:	71fb      	strb	r3, [r7, #7]
    
    if (remount_result == FR_OK) {
 8001e5c:	79bb      	ldrb	r3, [r7, #6]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10f      	bne.n	8001e82 <_create_log_directory+0x52>
        LOG_INFO("[SDStorage] Volume ready - attempting f_mkdir...");
 8001e62:	491d      	ldr	r1, [pc, #116]	@ (8001ed8 <_create_log_directory+0xa8>)
 8001e64:	2001      	movs	r0, #1
 8001e66:	f003 fc53 	bl	8005710 <LOGGER_SendFormatted>
        mkdir_result = f_mkdir("lora_logs");
 8001e6a:	481c      	ldr	r0, [pc, #112]	@ (8001edc <_create_log_directory+0xac>)
 8001e6c:	f012 fa16 	bl	801429c <f_mkdir>
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] f_mkdir result: %d", mkdir_result);
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	461a      	mov	r2, r3
 8001e78:	4919      	ldr	r1, [pc, #100]	@ (8001ee0 <_create_log_directory+0xb0>)
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f003 fc48 	bl	8005710 <LOGGER_SendFormatted>
 8001e80:	e005      	b.n	8001e8e <_create_log_directory+0x5e>
    } else {
        LOG_ERROR("[SDStorage] Volume re-mount failed: %d", remount_result);
 8001e82:	79bb      	ldrb	r3, [r7, #6]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4917      	ldr	r1, [pc, #92]	@ (8001ee4 <_create_log_directory+0xb4>)
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f003 fc41 	bl	8005710 <LOGGER_SendFormatted>
    }
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <_create_log_directory+0x6a>
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d105      	bne.n	8001ea6 <_create_log_directory+0x76>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 8001e9a:	4913      	ldr	r1, [pc, #76]	@ (8001ee8 <_create_log_directory+0xb8>)
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f003 fc37 	bl	8005710 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 성공
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e00b      	b.n	8001ebe <_create_log_directory+0x8e>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4910      	ldr	r1, [pc, #64]	@ (8001eec <_create_log_directory+0xbc>)
 8001eac:	2003      	movs	r0, #3
 8001eae:	f003 fc2f 	bl	8005710 <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 8001eb2:	490f      	ldr	r1, [pc, #60]	@ (8001ef0 <_create_log_directory+0xc0>)
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f003 fc2b 	bl	8005710 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;  // 디렉토리 실패
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	0801a4bc 	.word	0x0801a4bc
 8001ecc:	200026d4 	.word	0x200026d4
 8001ed0:	200026d8 	.word	0x200026d8
 8001ed4:	0801a4f4 	.word	0x0801a4f4
 8001ed8:	0801a51c 	.word	0x0801a51c
 8001edc:	0801a550 	.word	0x0801a550
 8001ee0:	0801a55c 	.word	0x0801a55c
 8001ee4:	0801a57c 	.word	0x0801a57c
 8001ee8:	0801a5a4 	.word	0x0801a5a4
 8001eec:	0801a5dc 	.word	0x0801a5dc
 8001ef0:	0801a614 	.word	0x0801a614

08001ef4 <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001f00:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001f04:	6018      	str	r0, [r3, #0]
 8001f06:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001f0a:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001f0e:	6019      	str	r1, [r3, #0]
    // 8.3 형식 파일명 생성 - 기존 파일 확인하여 중복 방지
    static int file_counter = 0;  // 0부터 시작하여 첫 번째 호출에서 1로 설정
    
    // 첫 번째 호출에서만 기존 파일 확인
    if (file_counter == 0) {
 8001f10:	4b48      	ldr	r3, [pc, #288]	@ (8002034 <_generate_log_filename+0x140>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d14a      	bne.n	8001fae <_generate_log_filename+0xba>
        file_counter = 1;
 8001f18:	4b46      	ldr	r3, [pc, #280]	@ (8002034 <_generate_log_filename+0x140>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
        
        // 기존 파일들 확인하여 다음 번호 찾기
        for (int i = 1; i <= 9999; i++) {
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001f24:	e034      	b.n	8001f90 <_generate_log_filename+0x9c>
            char test_filename[256];
            FIL test_file;
            
            if (g_directory_available) {
 8001f26:	4b44      	ldr	r3, [pc, #272]	@ (8002038 <_generate_log_filename+0x144>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <_generate_log_filename+0x4e>
                snprintf(test_filename, sizeof(test_filename), "lora_logs/LORA%04d.TXT", i);
 8001f2e:	f107 0008 	add.w	r0, r7, #8
 8001f32:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001f36:	4a41      	ldr	r2, [pc, #260]	@ (800203c <_generate_log_filename+0x148>)
 8001f38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f3c:	f015 fcfc 	bl	8017938 <sniprintf>
 8001f40:	e008      	b.n	8001f54 <_generate_log_filename+0x60>
            } else {
                snprintf(test_filename, sizeof(test_filename), "LORA%04d.TXT", i);
 8001f42:	f107 0008 	add.w	r0, r7, #8
 8001f46:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001f4a:	4a3d      	ldr	r2, [pc, #244]	@ (8002040 <_generate_log_filename+0x14c>)
 8001f4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f50:	f015 fcf2 	bl	8017938 <sniprintf>
            }
            
            // 파일이 존재하는지 확인
            FRESULT test_result = f_open(&test_file, test_filename, FA_READ);
 8001f54:	f107 0108 	add.w	r1, r7, #8
 8001f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f011 fdfe 	bl	8013b60 <f_open>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
            if (test_result == FR_OK) {
 8001f6a:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d115      	bne.n	8001f9e <_generate_log_filename+0xaa>
                f_close(&test_file);
 8001f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f76:	4618      	mov	r0, r3
 8001f78:	f012 f970 	bl	801425c <f_close>
                file_counter = i + 1;  // 다음 번호로 설정
 8001f7c:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a2c      	ldr	r2, [pc, #176]	@ (8002034 <_generate_log_filename+0x140>)
 8001f84:	6013      	str	r3, [r2, #0]
        for (int i = 1; i <= 9999; i++) {
 8001f86:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001f90:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001f94:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	ddc4      	ble.n	8001f26 <_generate_log_filename+0x32>
 8001f9c:	e000      	b.n	8001fa0 <_generate_log_filename+0xac>
            } else {
                break;  // 파일이 없으면 현재 번호 사용
 8001f9e:	bf00      	nop
            }
        }
        
        LOG_DEBUG("[SDStorage] Auto-detected next log file number: %d", file_counter);
 8001fa0:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <_generate_log_filename+0x140>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4927      	ldr	r1, [pc, #156]	@ (8002044 <_generate_log_filename+0x150>)
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f003 fbb1 	bl	8005710 <LOGGER_SendFormatted>
    }
    
    // 디렉토리 사용 가능 여부에 따라 경로 결정
    int result;
    if (g_directory_available) {
 8001fae:	4b22      	ldr	r3, [pc, #136]	@ (8002038 <_generate_log_filename+0x144>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d011      	beq.n	8001fda <_generate_log_filename+0xe6>
        // lora_logs 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "lora_logs/LORA%04d.TXT", file_counter);
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <_generate_log_filename+0x140>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001fbe:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 8001fc2:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001fc6:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8001fca:	4a1c      	ldr	r2, [pc, #112]	@ (800203c <_generate_log_filename+0x148>)
 8001fcc:	6809      	ldr	r1, [r1, #0]
 8001fce:	6800      	ldr	r0, [r0, #0]
 8001fd0:	f015 fcb2 	bl	8017938 <sniprintf>
 8001fd4:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 8001fd8:	e010      	b.n	8001ffc <_generate_log_filename+0x108>
    } else {
        // 루트 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "LORA%04d.TXT", file_counter);
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <_generate_log_filename+0x140>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001fe2:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 8001fe6:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001fea:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8001fee:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <_generate_log_filename+0x14c>)
 8001ff0:	6809      	ldr	r1, [r1, #0]
 8001ff2:	6800      	ldr	r0, [r0, #0]
 8001ff4:	f015 fca0 	bl	8017938 <sniprintf>
 8001ff8:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
    }
    
    file_counter++;
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <_generate_log_filename+0x140>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	4a0c      	ldr	r2, [pc, #48]	@ (8002034 <_generate_log_filename+0x140>)
 8002004:	6013      	str	r3, [r2, #0]
    
    if (result < 0 || (size_t)result >= max_len) {
 8002006:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800200a:	2b00      	cmp	r3, #0
 800200c:	db08      	blt.n	8002020 <_generate_log_filename+0x12c>
 800200e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002012:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8002016:	f5a2 7250 	sub.w	r2, r2, #832	@ 0x340
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d802      	bhi.n	8002026 <_generate_log_filename+0x132>
        return SDSTORAGE_ERROR;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
 8002024:	e000      	b.n	8002028 <_generate_log_filename+0x134>
    }
    
    return SDSTORAGE_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000168c 	.word	0x2000168c
 8002038:	20000384 	.word	0x20000384
 800203c:	0801a650 	.word	0x0801a650
 8002040:	0801a668 	.word	0x0801a668
 8002044:	0801a678 	.word	0x0801a678

08002048 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a07      	ldr	r2, [pc, #28]	@ (80020a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800208c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4a06      	ldr	r2, [pc, #24]	@ (80020ac <vApplicationGetIdleTaskMemory+0x30>)
 8002092:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2280      	movs	r2, #128	@ 0x80
 8002098:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20001690 	.word	0x20001690
 80020ac:	200016e8 	.word	0x200016e8

080020b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b09a      	sub	sp, #104	@ 0x68
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 80020b6:	4b96      	ldr	r3, [pc, #600]	@ (8002310 <main+0x260>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	4a94      	ldr	r2, [pc, #592]	@ (8002310 <main+0x260>)
 80020be:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c0:	f004 f919 	bl	80062f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c4:	f000 f966 	bl	8002394 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80020c8:	f000 f9d6 	bl	8002478 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020cc:	f001 f9a0 	bl	8003410 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 80020d0:	f001 ffe6 	bl	80040a0 <MX_DMA_Init>
  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
 80020d4:	f002 f80a 	bl	80040ec <MX_USART6_DMA_Init>
  MX_ADC3_Init();
 80020d8:	f000 fa00 	bl	80024dc <MX_ADC3_Init>
  MX_CRC_Init();
 80020dc:	f000 fa50 	bl	8002580 <MX_CRC_Init>
  MX_DCMI_Init();
 80020e0:	f000 fa70 	bl	80025c4 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80020e4:	f000 faa2 	bl	800262c <MX_DMA2D_Init>
  MX_ETH_Init();
 80020e8:	f000 fad2 	bl	8002690 <MX_ETH_Init>
  MX_FMC_Init();
 80020ec:	f001 f940 	bl	8003370 <MX_FMC_Init>
  MX_I2C1_Init();
 80020f0:	f000 fb1c 	bl	800272c <MX_I2C1_Init>
  MX_I2C3_Init();
 80020f4:	f000 fb5a 	bl	80027ac <MX_I2C3_Init>
  MX_LTDC_Init();
 80020f8:	f000 fb98 	bl	800282c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80020fc:	f000 fc18 	bl	8002930 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8002100:	f000 fc42 	bl	8002988 <MX_RTC_Init>
  MX_SAI2_Init();
 8002104:	f000 fce4 	bl	8002ad0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8002108:	f000 fd8a 	bl	8002c20 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800210c:	f000 fdb6 	bl	8002c7c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8002110:	f000 fde4 	bl	8002cdc <MX_SPI2_Init>
  MX_TIM1_Init();
 8002114:	f000 fe20 	bl	8002d58 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002118:	f000 feca 	bl	8002eb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800211c:	f000 ff3e 	bl	8002f9c <MX_TIM3_Init>
  MX_TIM5_Init();
 8002120:	f000 ffb4 	bl	800308c <MX_TIM5_Init>
  MX_TIM8_Init();
 8002124:	f001 f82a 	bl	800317c <MX_TIM8_Init>
  MX_TIM12_Init();
 8002128:	f001 f87c 	bl	8003224 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800212c:	f001 f8c0 	bl	80032b0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002130:	f001 f8ee 	bl	8003310 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8002134:	4b77      	ldr	r3, [pc, #476]	@ (8002314 <main+0x264>)
 8002136:	4a78      	ldr	r2, [pc, #480]	@ (8002318 <main+0x268>)
 8002138:	675a      	str	r2, [r3, #116]	@ 0x74
 800213a:	4b77      	ldr	r3, [pc, #476]	@ (8002318 <main+0x268>)
 800213c:	4a75      	ldr	r2, [pc, #468]	@ (8002314 <main+0x264>)
 800213e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8002140:	4b74      	ldr	r3, [pc, #464]	@ (8002314 <main+0x264>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b73      	ldr	r3, [pc, #460]	@ (8002314 <main+0x264>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0210 	orr.w	r2, r2, #16
 800214e:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8002150:	f00f fd00 	bl	8011b54 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8002154:	2100      	movs	r1, #0
 8002156:	4871      	ldr	r0, [pc, #452]	@ (800231c <main+0x26c>)
 8002158:	f003 fa4e 	bl	80055f8 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 800215c:	4b6c      	ldr	r3, [pc, #432]	@ (8002310 <main+0x260>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	496f      	ldr	r1, [pc, #444]	@ (8002320 <main+0x270>)
 8002164:	2001      	movs	r0, #1
 8002166:	f003 fad3 	bl	8005710 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 800216a:	4b6e      	ldr	r3, [pc, #440]	@ (8002324 <main+0x274>)
 800216c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800216e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <main+0xce>
 8002176:	496c      	ldr	r1, [pc, #432]	@ (8002328 <main+0x278>)
 8002178:	2002      	movs	r0, #2
 800217a:	f003 fac9 	bl	8005710 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 800217e:	4b69      	ldr	r3, [pc, #420]	@ (8002324 <main+0x274>)
 8002180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002182:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <main+0xe2>
 800218a:	4968      	ldr	r1, [pc, #416]	@ (800232c <main+0x27c>)
 800218c:	2002      	movs	r0, #2
 800218e:	f003 fabf 	bl	8005710 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 8002192:	4b64      	ldr	r3, [pc, #400]	@ (8002324 <main+0x274>)
 8002194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002196:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <main+0xf6>
 800219e:	4964      	ldr	r1, [pc, #400]	@ (8002330 <main+0x280>)
 80021a0:	2002      	movs	r0, #2
 80021a2:	f003 fab5 	bl	8005710 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 80021a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002324 <main+0x274>)
 80021a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <main+0x10a>
 80021b2:	4960      	ldr	r1, [pc, #384]	@ (8002334 <main+0x284>)
 80021b4:	2002      	movs	r0, #2
 80021b6:	f003 faab 	bl	8005710 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 80021ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002324 <main+0x274>)
 80021bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <main+0x11e>
 80021c6:	495c      	ldr	r1, [pc, #368]	@ (8002338 <main+0x288>)
 80021c8:	2002      	movs	r0, #2
 80021ca:	f003 faa1 	bl	8005710 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 80021ce:	4b55      	ldr	r3, [pc, #340]	@ (8002324 <main+0x274>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <main+0x132>
 80021da:	4958      	ldr	r1, [pc, #352]	@ (800233c <main+0x28c>)
 80021dc:	2002      	movs	r0, #2
 80021de:	f003 fa97 	bl	8005710 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 80021e2:	4b50      	ldr	r3, [pc, #320]	@ (8002324 <main+0x274>)
 80021e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	da03      	bge.n	80021f2 <main+0x142>
 80021ea:	4955      	ldr	r1, [pc, #340]	@ (8002340 <main+0x290>)
 80021ec:	2002      	movs	r0, #2
 80021ee:	f003 fa8f 	bl	8005710 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 80021f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002324 <main+0x274>)
 80021f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021f6:	4a4b      	ldr	r2, [pc, #300]	@ (8002324 <main+0x274>)
 80021f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021fc:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 80021fe:	4951      	ldr	r1, [pc, #324]	@ (8002344 <main+0x294>)
 8002200:	2001      	movs	r0, #1
 8002202:	f003 fa85 	bl	8005710 <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8002206:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <main+0x298>)
 8002208:	f04f 32ff 	mov.w	r2, #4294967295
 800220c:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화 건너뛰기 (이미 main 초기화에서 완료됨)
  LOG_INFO("📤 UART DMA already initialized in main() - skipping");
 800220e:	494f      	ldr	r1, [pc, #316]	@ (800234c <main+0x29c>)
 8002210:	2001      	movs	r0, #1
 8002212:	f003 fa7d 	bl	8005710 <LOGGER_SendFormatted>
  
  // IDLE 인터럽트만 활성화 (메시지 끝 감지용)
  LOG_INFO("📤 Enabling UART IDLE interrupt...");
 8002216:	494e      	ldr	r1, [pc, #312]	@ (8002350 <main+0x2a0>)
 8002218:	2001      	movs	r0, #1
 800221a:	f003 fa79 	bl	8005710 <LOGGER_SendFormatted>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800221e:	4b3d      	ldr	r3, [pc, #244]	@ (8002314 <main+0x264>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b3b      	ldr	r3, [pc, #236]	@ (8002314 <main+0x264>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0210 	orr.w	r2, r2, #16
 800222c:	601a      	str	r2, [r3, #0]
  LOG_INFO("✅ UART setup completed");
 800222e:	4949      	ldr	r1, [pc, #292]	@ (8002354 <main+0x2a4>)
 8002230:	2001      	movs	r0, #1
 8002232:	f003 fa6d 	bl	8005710 <LOGGER_SendFormatted>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  // SD 로깅 큐 생성 (안전성 체크 포함)
  LOG_INFO("📤 Creating SD logging queue (size: %d, item: %d bytes)", 
 8002236:	2388      	movs	r3, #136	@ 0x88
 8002238:	220a      	movs	r2, #10
 800223a:	4947      	ldr	r1, [pc, #284]	@ (8002358 <main+0x2a8>)
 800223c:	2001      	movs	r0, #1
 800223e:	f003 fa67 	bl	8005710 <LOGGER_SendFormatted>
           SD_LOG_QUEUE_SIZE, sizeof(SDLogEntry_t));
  
  osMessageQDef(sdLogQueue, SD_LOG_QUEUE_SIZE, SDLogEntry_t);
 8002242:	4b46      	ldr	r3, [pc, #280]	@ (800235c <main+0x2ac>)
 8002244:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800224a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdLogQueueHandle = osMessageCreate(osMessageQ(sdLogQueue), NULL);
 800224e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f012 fe5d 	bl	8014f14 <osMessageCreate>
 800225a:	4603      	mov	r3, r0
 800225c:	4a40      	ldr	r2, [pc, #256]	@ (8002360 <main+0x2b0>)
 800225e:	6013      	str	r3, [r2, #0]
  
  if (sdLogQueueHandle == NULL) {
 8002260:	4b3f      	ldr	r3, [pc, #252]	@ (8002360 <main+0x2b0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <main+0x1c2>
    LOG_ERROR("❌ SD logging queue creation FAILED - insufficient memory");
 8002268:	493e      	ldr	r1, [pc, #248]	@ (8002364 <main+0x2b4>)
 800226a:	2003      	movs	r0, #3
 800226c:	f003 fa50 	bl	8005710 <LOGGER_SendFormatted>
 8002270:	e003      	b.n	800227a <main+0x1ca>
  } else {
    LOG_INFO("✅ SD logging queue created successfully");
 8002272:	493d      	ldr	r1, [pc, #244]	@ (8002368 <main+0x2b8>)
 8002274:	2001      	movs	r0, #1
 8002276:	f003 fa4b 	bl	8005710 <LOGGER_SendFormatted>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 8192);
 800227a:	4b3c      	ldr	r3, [pc, #240]	@ (800236c <main+0x2bc>)
 800227c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002280:	461d      	mov	r5, r3
 8002282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800228a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800228e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f012 fddd 	bl	8014e54 <osThreadCreate>
 800229a:	4603      	mov	r3, r0
 800229c:	4a34      	ldr	r2, [pc, #208]	@ (8002370 <main+0x2c0>)
 800229e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 활성화 - LoRa 통신을 위해 필수 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 4096);
 80022a0:	4b34      	ldr	r3, [pc, #208]	@ (8002374 <main+0x2c4>)
 80022a2:	f107 0420 	add.w	r4, r7, #32
 80022a6:	461d      	mov	r5, r3
 80022a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 80022b4:	f107 0320 	add.w	r3, r7, #32
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f012 fdca 	bl	8014e54 <osThreadCreate>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002378 <main+0x2c8>)
 80022c4:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 Receive Task enabled for LoRa communication");
 80022c6:	492d      	ldr	r1, [pc, #180]	@ (800237c <main+0x2cc>)
 80022c8:	2001      	movs	r0, #1
 80022ca:	f003 fa21 	bl	8005710 <LOGGER_SendFormatted>
  
  /* SD 로깅 태스크 활성화 - SD 카드 로깅을 위해 */
  osThreadDef(sdLoggingTask, StartSDLoggingTask, osPriorityLow, 0, 4096);
 80022ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002380 <main+0x2d0>)
 80022d0:	1d3c      	adds	r4, r7, #4
 80022d2:	461d      	mov	r5, r3
 80022d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdLoggingTaskHandle = osThreadCreate(osThread(sdLoggingTask), NULL);
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f012 fdb5 	bl	8014e54 <osThreadCreate>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a25      	ldr	r2, [pc, #148]	@ (8002384 <main+0x2d4>)
 80022ee:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 SD Logging Task enabled");
 80022f0:	4925      	ldr	r1, [pc, #148]	@ (8002388 <main+0x2d8>)
 80022f2:	2001      	movs	r0, #1
 80022f4:	f003 fa0c 	bl	8005710 <LOGGER_SendFormatted>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  LOG_INFO("🚀 Starting FreeRTOS scheduler...");
 80022f8:	4924      	ldr	r1, [pc, #144]	@ (800238c <main+0x2dc>)
 80022fa:	2001      	movs	r0, #1
 80022fc:	f003 fa08 	bl	8005710 <LOGGER_SendFormatted>
  osKernelStart();
 8002300:	f012 fd85 	bl	8014e0e <osKernelStart>
  
  // 이 부분은 절대 실행되면 안됨 (스케줄러가 제어를 가져가야 함)
  LOG_ERROR("❌ FATAL: Scheduler failed to start - system halted");
 8002304:	4922      	ldr	r1, [pc, #136]	@ (8002390 <main+0x2e0>)
 8002306:	2003      	movs	r0, #3
 8002308:	f003 fa02 	bl	8005710 <LOGGER_SendFormatted>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <main+0x25c>
 8002310:	20002450 	.word	0x20002450
 8002314:	20002114 	.word	0x20002114
 8002318:	200023ec 	.word	0x200023ec
 800231c:	0801a6ac 	.word	0x0801a6ac
 8002320:	0801a6b4 	.word	0x0801a6b4
 8002324:	40023800 	.word	0x40023800
 8002328:	0801a6d8 	.word	0x0801a6d8
 800232c:	0801a6f0 	.word	0x0801a6f0
 8002330:	0801a708 	.word	0x0801a708
 8002334:	0801a720 	.word	0x0801a720
 8002338:	0801a730 	.word	0x0801a730
 800233c:	0801a748 	.word	0x0801a748
 8002340:	0801a768 	.word	0x0801a768
 8002344:	0801a780 	.word	0x0801a780
 8002348:	20000014 	.word	0x20000014
 800234c:	0801a7c0 	.word	0x0801a7c0
 8002350:	0801a7f8 	.word	0x0801a7f8
 8002354:	0801a820 	.word	0x0801a820
 8002358:	0801a83c 	.word	0x0801a83c
 800235c:	0801a990 	.word	0x0801a990
 8002360:	200021dc 	.word	0x200021dc
 8002364:	0801a878 	.word	0x0801a878
 8002368:	0801a8b4 	.word	0x0801a8b4
 800236c:	0801a9ac 	.word	0x0801a9ac
 8002370:	200021d0 	.word	0x200021d0
 8002374:	0801a9d4 	.word	0x0801a9d4
 8002378:	200021d4 	.word	0x200021d4
 800237c:	0801a8e0 	.word	0x0801a8e0
 8002380:	0801aa00 	.word	0x0801aa00
 8002384:	200021d8 	.word	0x200021d8
 8002388:	0801a914 	.word	0x0801a914
 800238c:	0801a934 	.word	0x0801a934
 8002390:	0801a958 	.word	0x0801a958

08002394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b094      	sub	sp, #80	@ 0x50
 8002398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800239a:	f107 0320 	add.w	r3, r7, #32
 800239e:	2230      	movs	r2, #48	@ 0x30
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f015 fba0 	bl	8017ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80023b8:	f008 fa4c 	bl	800a854 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002470 <SystemClock_Config+0xdc>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002470 <SystemClock_Config+0xdc>)
 80023c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c8:	4b29      	ldr	r3, [pc, #164]	@ (8002470 <SystemClock_Config+0xdc>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d4:	4b27      	ldr	r3, [pc, #156]	@ (8002474 <SystemClock_Config+0xe0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a26      	ldr	r2, [pc, #152]	@ (8002474 <SystemClock_Config+0xe0>)
 80023da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b24      	ldr	r3, [pc, #144]	@ (8002474 <SystemClock_Config+0xe0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80023ec:	2309      	movs	r3, #9
 80023ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80023f6:	2301      	movs	r3, #1
 80023f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023fa:	2302      	movs	r3, #2
 80023fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002402:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002404:	2319      	movs	r3, #25
 8002406:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002408:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800240c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800240e:	2302      	movs	r3, #2
 8002410:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002412:	2309      	movs	r3, #9
 8002414:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002416:	f107 0320 	add.w	r3, r7, #32
 800241a:	4618      	mov	r0, r3
 800241c:	f008 fb3c 	bl	800aa98 <HAL_RCC_OscConfig>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002426:	f001 fe35 	bl	8004094 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800242a:	f008 fa23 	bl	800a874 <HAL_PWREx_EnableOverDrive>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002434:	f001 fe2e 	bl	8004094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002438:	230f      	movs	r3, #15
 800243a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800243c:	2302      	movs	r3, #2
 800243e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002444:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002448:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800244a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800244e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	2106      	movs	r1, #6
 8002456:	4618      	mov	r0, r3
 8002458:	f008 fdc2 	bl	800afe0 <HAL_RCC_ClockConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002462:	f001 fe17 	bl	8004094 <Error_Handler>
  }
}
 8002466:	bf00      	nop
 8002468:	3750      	adds	r7, #80	@ 0x50
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40007000 	.word	0x40007000

08002478 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0a2      	sub	sp, #136	@ 0x88
 800247c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	2284      	movs	r2, #132	@ 0x84
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f015 fb2f 	bl	8017ae8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800248a:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <PeriphCommonClock_Config+0x60>)
 800248c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800248e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002492:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002494:	2305      	movs	r3, #5
 8002496:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002498:	2302      	movs	r3, #2
 800249a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800249c:	2303      	movs	r3, #3
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80024a0:	2301      	movs	r3, #1
 80024a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80024a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80024aa:	2300      	movs	r3, #0
 80024ac:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80024ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80024b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	4618      	mov	r0, r3
 80024c0:	f008 ffa6 	bl	800b410 <HAL_RCCEx_PeriphCLKConfig>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80024ca:	f001 fde3 	bl	8004094 <Error_Handler>
  }
}
 80024ce:	bf00      	nop
 80024d0:	3788      	adds	r7, #136	@ 0x88
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	00b00008 	.word	0x00b00008

080024dc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024e2:	463b      	mov	r3, r7
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80024ee:	4b21      	ldr	r3, [pc, #132]	@ (8002574 <MX_ADC3_Init+0x98>)
 80024f0:	4a21      	ldr	r2, [pc, #132]	@ (8002578 <MX_ADC3_Init+0x9c>)
 80024f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002574 <MX_ADC3_Init+0x98>)
 80024f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024fa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80024fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002574 <MX_ADC3_Init+0x98>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002502:	4b1c      	ldr	r3, [pc, #112]	@ (8002574 <MX_ADC3_Init+0x98>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002508:	4b1a      	ldr	r3, [pc, #104]	@ (8002574 <MX_ADC3_Init+0x98>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800250e:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <MX_ADC3_Init+0x98>)
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002516:	4b17      	ldr	r3, [pc, #92]	@ (8002574 <MX_ADC3_Init+0x98>)
 8002518:	2200      	movs	r2, #0
 800251a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800251c:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <MX_ADC3_Init+0x98>)
 800251e:	4a17      	ldr	r2, [pc, #92]	@ (800257c <MX_ADC3_Init+0xa0>)
 8002520:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002522:	4b14      	ldr	r3, [pc, #80]	@ (8002574 <MX_ADC3_Init+0x98>)
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002528:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <MX_ADC3_Init+0x98>)
 800252a:	2201      	movs	r2, #1
 800252c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800252e:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <MX_ADC3_Init+0x98>)
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002536:	4b0f      	ldr	r3, [pc, #60]	@ (8002574 <MX_ADC3_Init+0x98>)
 8002538:	2201      	movs	r2, #1
 800253a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800253c:	480d      	ldr	r0, [pc, #52]	@ (8002574 <MX_ADC3_Init+0x98>)
 800253e:	f003 ff2b 	bl	8006398 <HAL_ADC_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002548:	f001 fda4 	bl	8004094 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800254c:	2304      	movs	r3, #4
 800254e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002550:	2301      	movs	r3, #1
 8002552:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002558:	463b      	mov	r3, r7
 800255a:	4619      	mov	r1, r3
 800255c:	4805      	ldr	r0, [pc, #20]	@ (8002574 <MX_ADC3_Init+0x98>)
 800255e:	f003 ff5f 	bl	8006420 <HAL_ADC_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002568:	f001 fd94 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800256c:	bf00      	nop
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20001920 	.word	0x20001920
 8002578:	40012200 	.word	0x40012200
 800257c:	0f000001 	.word	0x0f000001

08002580 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002584:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <MX_CRC_Init+0x3c>)
 8002586:	4a0e      	ldr	r2, [pc, #56]	@ (80025c0 <MX_CRC_Init+0x40>)
 8002588:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800258a:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <MX_CRC_Init+0x3c>)
 800258c:	2200      	movs	r2, #0
 800258e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002590:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <MX_CRC_Init+0x3c>)
 8002592:	2200      	movs	r2, #0
 8002594:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002596:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <MX_CRC_Init+0x3c>)
 8002598:	2200      	movs	r2, #0
 800259a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800259c:	4b07      	ldr	r3, [pc, #28]	@ (80025bc <MX_CRC_Init+0x3c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <MX_CRC_Init+0x3c>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80025a8:	4804      	ldr	r0, [pc, #16]	@ (80025bc <MX_CRC_Init+0x3c>)
 80025aa:	f004 fa6f 	bl	8006a8c <HAL_CRC_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80025b4:	f001 fd6e 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20001968 	.word	0x20001968
 80025c0:	40023000 	.word	0x40023000

080025c4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80025c8:	4b16      	ldr	r3, [pc, #88]	@ (8002624 <MX_DCMI_Init+0x60>)
 80025ca:	4a17      	ldr	r2, [pc, #92]	@ (8002628 <MX_DCMI_Init+0x64>)
 80025cc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <MX_DCMI_Init+0x60>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80025d4:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <MX_DCMI_Init+0x60>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80025da:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <MX_DCMI_Init+0x60>)
 80025dc:	2200      	movs	r2, #0
 80025de:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <MX_DCMI_Init+0x60>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80025e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <MX_DCMI_Init+0x60>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80025ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <MX_DCMI_Init+0x60>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80025f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <MX_DCMI_Init+0x60>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <MX_DCMI_Init+0x60>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80025fe:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <MX_DCMI_Init+0x60>)
 8002600:	2200      	movs	r2, #0
 8002602:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002604:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <MX_DCMI_Init+0x60>)
 8002606:	2200      	movs	r2, #0
 8002608:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <MX_DCMI_Init+0x60>)
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002610:	4804      	ldr	r0, [pc, #16]	@ (8002624 <MX_DCMI_Init+0x60>)
 8002612:	f004 fb2d 	bl	8006c70 <HAL_DCMI_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800261c:	f001 fd3a 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000198c 	.word	0x2000198c
 8002628:	50050000 	.word	0x50050000

0800262c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002630:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <MX_DMA2D_Init+0x5c>)
 8002632:	4a16      	ldr	r2, [pc, #88]	@ (800268c <MX_DMA2D_Init+0x60>)
 8002634:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002636:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <MX_DMA2D_Init+0x5c>)
 8002638:	2200      	movs	r2, #0
 800263a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <MX_DMA2D_Init+0x5c>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002642:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <MX_DMA2D_Init+0x5c>)
 8002644:	2200      	movs	r2, #0
 8002646:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002648:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <MX_DMA2D_Init+0x5c>)
 800264a:	2200      	movs	r2, #0
 800264c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <MX_DMA2D_Init+0x5c>)
 8002650:	2200      	movs	r2, #0
 8002652:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <MX_DMA2D_Init+0x5c>)
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800265a:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <MX_DMA2D_Init+0x5c>)
 800265c:	2200      	movs	r2, #0
 800265e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002660:	4809      	ldr	r0, [pc, #36]	@ (8002688 <MX_DMA2D_Init+0x5c>)
 8002662:	f004 fff3 	bl	800764c <HAL_DMA2D_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800266c:	f001 fd12 	bl	8004094 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002670:	2101      	movs	r1, #1
 8002672:	4805      	ldr	r0, [pc, #20]	@ (8002688 <MX_DMA2D_Init+0x5c>)
 8002674:	f005 f944 	bl	8007900 <HAL_DMA2D_ConfigLayer>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800267e:	f001 fd09 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200019dc 	.word	0x200019dc
 800268c:	4002b000 	.word	0x4002b000

08002690 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002694:	4b1f      	ldr	r3, [pc, #124]	@ (8002714 <MX_ETH_Init+0x84>)
 8002696:	4a20      	ldr	r2, [pc, #128]	@ (8002718 <MX_ETH_Init+0x88>)
 8002698:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800269a:	4b20      	ldr	r3, [pc, #128]	@ (800271c <MX_ETH_Init+0x8c>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80026a0:	4b1e      	ldr	r3, [pc, #120]	@ (800271c <MX_ETH_Init+0x8c>)
 80026a2:	2280      	movs	r2, #128	@ 0x80
 80026a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80026a6:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <MX_ETH_Init+0x8c>)
 80026a8:	22e1      	movs	r2, #225	@ 0xe1
 80026aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <MX_ETH_Init+0x8c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80026b2:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <MX_ETH_Init+0x8c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80026b8:	4b18      	ldr	r3, [pc, #96]	@ (800271c <MX_ETH_Init+0x8c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <MX_ETH_Init+0x84>)
 80026c0:	4a16      	ldr	r2, [pc, #88]	@ (800271c <MX_ETH_Init+0x8c>)
 80026c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80026c4:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <MX_ETH_Init+0x84>)
 80026c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026ca:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80026cc:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <MX_ETH_Init+0x84>)
 80026ce:	4a14      	ldr	r2, [pc, #80]	@ (8002720 <MX_ETH_Init+0x90>)
 80026d0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <MX_ETH_Init+0x84>)
 80026d4:	4a13      	ldr	r2, [pc, #76]	@ (8002724 <MX_ETH_Init+0x94>)
 80026d6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80026d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <MX_ETH_Init+0x84>)
 80026da:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80026de:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80026e0:	480c      	ldr	r0, [pc, #48]	@ (8002714 <MX_ETH_Init+0x84>)
 80026e2:	f005 f99f 	bl	8007a24 <HAL_ETH_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80026ec:	f001 fcd2 	bl	8004094 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80026f0:	2238      	movs	r2, #56	@ 0x38
 80026f2:	2100      	movs	r1, #0
 80026f4:	480c      	ldr	r0, [pc, #48]	@ (8002728 <MX_ETH_Init+0x98>)
 80026f6:	f015 f9f7 	bl	8017ae8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <MX_ETH_Init+0x98>)
 80026fc:	2221      	movs	r2, #33	@ 0x21
 80026fe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <MX_ETH_Init+0x98>)
 8002702:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002706:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002708:	4b07      	ldr	r3, [pc, #28]	@ (8002728 <MX_ETH_Init+0x98>)
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20001a1c 	.word	0x20001a1c
 8002718:	40028000 	.word	0x40028000
 800271c:	20002454 	.word	0x20002454
 8002720:	20000174 	.word	0x20000174
 8002724:	200000d4 	.word	0x200000d4
 8002728:	200018e8 	.word	0x200018e8

0800272c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002730:	4b1b      	ldr	r3, [pc, #108]	@ (80027a0 <MX_I2C1_Init+0x74>)
 8002732:	4a1c      	ldr	r2, [pc, #112]	@ (80027a4 <MX_I2C1_Init+0x78>)
 8002734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002736:	4b1a      	ldr	r3, [pc, #104]	@ (80027a0 <MX_I2C1_Init+0x74>)
 8002738:	4a1b      	ldr	r2, [pc, #108]	@ (80027a8 <MX_I2C1_Init+0x7c>)
 800273a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800273c:	4b18      	ldr	r3, [pc, #96]	@ (80027a0 <MX_I2C1_Init+0x74>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002742:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <MX_I2C1_Init+0x74>)
 8002744:	2201      	movs	r2, #1
 8002746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002748:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <MX_I2C1_Init+0x74>)
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800274e:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <MX_I2C1_Init+0x74>)
 8002750:	2200      	movs	r2, #0
 8002752:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <MX_I2C1_Init+0x74>)
 8002756:	2200      	movs	r2, #0
 8002758:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800275a:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <MX_I2C1_Init+0x74>)
 800275c:	2200      	movs	r2, #0
 800275e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002760:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <MX_I2C1_Init+0x74>)
 8002762:	2200      	movs	r2, #0
 8002764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002766:	480e      	ldr	r0, [pc, #56]	@ (80027a0 <MX_I2C1_Init+0x74>)
 8002768:	f007 fc2e 	bl	8009fc8 <HAL_I2C_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002772:	f001 fc8f 	bl	8004094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002776:	2100      	movs	r1, #0
 8002778:	4809      	ldr	r0, [pc, #36]	@ (80027a0 <MX_I2C1_Init+0x74>)
 800277a:	f007 fcc1 	bl	800a100 <HAL_I2CEx_ConfigAnalogFilter>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002784:	f001 fc86 	bl	8004094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002788:	2100      	movs	r1, #0
 800278a:	4805      	ldr	r0, [pc, #20]	@ (80027a0 <MX_I2C1_Init+0x74>)
 800278c:	f007 fd03 	bl	800a196 <HAL_I2CEx_ConfigDigitalFilter>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002796:	f001 fc7d 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20001acc 	.word	0x20001acc
 80027a4:	40005400 	.word	0x40005400
 80027a8:	00c0eaff 	.word	0x00c0eaff

080027ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002820 <MX_I2C3_Init+0x74>)
 80027b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <MX_I2C3_Init+0x78>)
 80027b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002820 <MX_I2C3_Init+0x74>)
 80027b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002828 <MX_I2C3_Init+0x7c>)
 80027ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80027bc:	4b18      	ldr	r3, [pc, #96]	@ (8002820 <MX_I2C3_Init+0x74>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027c2:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <MX_I2C3_Init+0x74>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027c8:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <MX_I2C3_Init+0x74>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80027ce:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <MX_I2C3_Init+0x74>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027d4:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <MX_I2C3_Init+0x74>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027da:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <MX_I2C3_Init+0x74>)
 80027dc:	2200      	movs	r2, #0
 80027de:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <MX_I2C3_Init+0x74>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80027e6:	480e      	ldr	r0, [pc, #56]	@ (8002820 <MX_I2C3_Init+0x74>)
 80027e8:	f007 fbee 	bl	8009fc8 <HAL_I2C_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80027f2:	f001 fc4f 	bl	8004094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027f6:	2100      	movs	r1, #0
 80027f8:	4809      	ldr	r0, [pc, #36]	@ (8002820 <MX_I2C3_Init+0x74>)
 80027fa:	f007 fc81 	bl	800a100 <HAL_I2CEx_ConfigAnalogFilter>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002804:	f001 fc46 	bl	8004094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002808:	2100      	movs	r1, #0
 800280a:	4805      	ldr	r0, [pc, #20]	@ (8002820 <MX_I2C3_Init+0x74>)
 800280c:	f007 fcc3 	bl	800a196 <HAL_I2CEx_ConfigDigitalFilter>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002816:	f001 fc3d 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20001b20 	.word	0x20001b20
 8002824:	40005c00 	.word	0x40005c00
 8002828:	00c0eaff 	.word	0x00c0eaff

0800282c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08e      	sub	sp, #56	@ 0x38
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	2234      	movs	r2, #52	@ 0x34
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f015 f955 	bl	8017ae8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800283e:	4b3a      	ldr	r3, [pc, #232]	@ (8002928 <MX_LTDC_Init+0xfc>)
 8002840:	4a3a      	ldr	r2, [pc, #232]	@ (800292c <MX_LTDC_Init+0x100>)
 8002842:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002844:	4b38      	ldr	r3, [pc, #224]	@ (8002928 <MX_LTDC_Init+0xfc>)
 8002846:	2200      	movs	r2, #0
 8002848:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800284a:	4b37      	ldr	r3, [pc, #220]	@ (8002928 <MX_LTDC_Init+0xfc>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002850:	4b35      	ldr	r3, [pc, #212]	@ (8002928 <MX_LTDC_Init+0xfc>)
 8002852:	2200      	movs	r2, #0
 8002854:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002856:	4b34      	ldr	r3, [pc, #208]	@ (8002928 <MX_LTDC_Init+0xfc>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800285c:	4b32      	ldr	r3, [pc, #200]	@ (8002928 <MX_LTDC_Init+0xfc>)
 800285e:	2228      	movs	r2, #40	@ 0x28
 8002860:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002862:	4b31      	ldr	r3, [pc, #196]	@ (8002928 <MX_LTDC_Init+0xfc>)
 8002864:	2209      	movs	r2, #9
 8002866:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002868:	4b2f      	ldr	r3, [pc, #188]	@ (8002928 <MX_LTDC_Init+0xfc>)
 800286a:	2235      	movs	r2, #53	@ 0x35
 800286c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800286e:	4b2e      	ldr	r3, [pc, #184]	@ (8002928 <MX_LTDC_Init+0xfc>)
 8002870:	220b      	movs	r2, #11
 8002872:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002874:	4b2c      	ldr	r3, [pc, #176]	@ (8002928 <MX_LTDC_Init+0xfc>)
 8002876:	f240 2215 	movw	r2, #533	@ 0x215
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800287c:	4b2a      	ldr	r3, [pc, #168]	@ (8002928 <MX_LTDC_Init+0xfc>)
 800287e:	f240 121b 	movw	r2, #283	@ 0x11b
 8002882:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002884:	4b28      	ldr	r3, [pc, #160]	@ (8002928 <MX_LTDC_Init+0xfc>)
 8002886:	f240 2235 	movw	r2, #565	@ 0x235
 800288a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 800288c:	4b26      	ldr	r3, [pc, #152]	@ (8002928 <MX_LTDC_Init+0xfc>)
 800288e:	f240 121d 	movw	r2, #285	@ 0x11d
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002894:	4b24      	ldr	r3, [pc, #144]	@ (8002928 <MX_LTDC_Init+0xfc>)
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800289c:	4b22      	ldr	r3, [pc, #136]	@ (8002928 <MX_LTDC_Init+0xfc>)
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80028a4:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <MX_LTDC_Init+0xfc>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80028ac:	481e      	ldr	r0, [pc, #120]	@ (8002928 <MX_LTDC_Init+0xfc>)
 80028ae:	f007 fcbe 	bl	800a22e <HAL_LTDC_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80028b8:	f001 fbec 	bl	8004094 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80028c0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80028c4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80028ca:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80028ce:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80028d0:	2302      	movs	r3, #2
 80028d2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80028d4:	23ff      	movs	r3, #255	@ 0xff
 80028d6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80028dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028e0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80028e2:	2307      	movs	r3, #7
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80028e6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80028ec:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80028f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80028f2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80028f6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	2200      	movs	r2, #0
 800290e:	4619      	mov	r1, r3
 8002910:	4805      	ldr	r0, [pc, #20]	@ (8002928 <MX_LTDC_Init+0xfc>)
 8002912:	f007 fdeb 	bl	800a4ec <HAL_LTDC_ConfigLayer>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800291c:	f001 fbba 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002920:	bf00      	nop
 8002922:	3738      	adds	r7, #56	@ 0x38
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20001b74 	.word	0x20001b74
 800292c:	40016800 	.word	0x40016800

08002930 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002934:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <MX_QUADSPI_Init+0x50>)
 8002936:	4a13      	ldr	r2, [pc, #76]	@ (8002984 <MX_QUADSPI_Init+0x54>)
 8002938:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800293a:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <MX_QUADSPI_Init+0x50>)
 800293c:	2201      	movs	r2, #1
 800293e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002940:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <MX_QUADSPI_Init+0x50>)
 8002942:	2204      	movs	r2, #4
 8002944:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002946:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <MX_QUADSPI_Init+0x50>)
 8002948:	2210      	movs	r2, #16
 800294a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <MX_QUADSPI_Init+0x50>)
 800294e:	2218      	movs	r2, #24
 8002950:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8002952:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <MX_QUADSPI_Init+0x50>)
 8002954:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002958:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <MX_QUADSPI_Init+0x50>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002960:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <MX_QUADSPI_Init+0x50>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <MX_QUADSPI_Init+0x50>)
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800296c:	4804      	ldr	r0, [pc, #16]	@ (8002980 <MX_QUADSPI_Init+0x50>)
 800296e:	f007 ffd1 	bl	800a914 <HAL_QSPI_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002978:	f001 fb8c 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20001c1c 	.word	0x20001c1c
 8002984:	a0001000 	.word	0xa0001000

08002988 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b090      	sub	sp, #64	@ 0x40
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800298e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	60da      	str	r2, [r3, #12]
 800299c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800299e:	2300      	movs	r3, #0
 80029a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80029a2:	463b      	mov	r3, r7
 80029a4:	2228      	movs	r2, #40	@ 0x28
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f015 f89d 	bl	8017ae8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029ae:	4b46      	ldr	r3, [pc, #280]	@ (8002ac8 <MX_RTC_Init+0x140>)
 80029b0:	4a46      	ldr	r2, [pc, #280]	@ (8002acc <MX_RTC_Init+0x144>)
 80029b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029b4:	4b44      	ldr	r3, [pc, #272]	@ (8002ac8 <MX_RTC_Init+0x140>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80029ba:	4b43      	ldr	r3, [pc, #268]	@ (8002ac8 <MX_RTC_Init+0x140>)
 80029bc:	227f      	movs	r2, #127	@ 0x7f
 80029be:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80029c0:	4b41      	ldr	r3, [pc, #260]	@ (8002ac8 <MX_RTC_Init+0x140>)
 80029c2:	22ff      	movs	r2, #255	@ 0xff
 80029c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029c6:	4b40      	ldr	r3, [pc, #256]	@ (8002ac8 <MX_RTC_Init+0x140>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029cc:	4b3e      	ldr	r3, [pc, #248]	@ (8002ac8 <MX_RTC_Init+0x140>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029d2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac8 <MX_RTC_Init+0x140>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029d8:	483b      	ldr	r0, [pc, #236]	@ (8002ac8 <MX_RTC_Init+0x140>)
 80029da:	f009 fa49 	bl	800be70 <HAL_RTC_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80029e4:	f001 fb56 	bl	8004094 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a06:	2201      	movs	r2, #1
 8002a08:	4619      	mov	r1, r3
 8002a0a:	482f      	ldr	r0, [pc, #188]	@ (8002ac8 <MX_RTC_Init+0x140>)
 8002a0c:	f009 fab2 	bl	800bf74 <HAL_RTC_SetTime>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002a16:	f001 fb3d 	bl	8004094 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a36:	2201      	movs	r2, #1
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4823      	ldr	r0, [pc, #140]	@ (8002ac8 <MX_RTC_Init+0x140>)
 8002a3c:	f009 fb34 	bl	800c0a8 <HAL_RTC_SetDate>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002a46:	f001 fb25 	bl	8004094 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a7a:	463b      	mov	r3, r7
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4811      	ldr	r0, [pc, #68]	@ (8002ac8 <MX_RTC_Init+0x140>)
 8002a82:	f009 fb95 	bl	800c1b0 <HAL_RTC_SetAlarm>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002a8c:	f001 fb02 	bl	8004094 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002a90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a96:	463b      	mov	r3, r7
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	480a      	ldr	r0, [pc, #40]	@ (8002ac8 <MX_RTC_Init+0x140>)
 8002a9e:	f009 fb87 	bl	800c1b0 <HAL_RTC_SetAlarm>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002aa8:	f001 faf4 	bl	8004094 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002aac:	2202      	movs	r2, #2
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4805      	ldr	r0, [pc, #20]	@ (8002ac8 <MX_RTC_Init+0x140>)
 8002ab2:	f009 fd47 	bl	800c544 <HAL_RTCEx_SetTimeStamp>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002abc:	f001 faea 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002ac0:	bf00      	nop
 8002ac2:	3740      	adds	r7, #64	@ 0x40
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20001c68 	.word	0x20001c68
 8002acc:	40002800 	.word	0x40002800

08002ad0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002ad6:	4a4e      	ldr	r2, [pc, #312]	@ (8002c10 <MX_SAI2_Init+0x140>)
 8002ad8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002ada:	4b4c      	ldr	r3, [pc, #304]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002ae0:	4b4a      	ldr	r3, [pc, #296]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8002ae6:	4b49      	ldr	r3, [pc, #292]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002ae8:	2240      	movs	r2, #64	@ 0x40
 8002aea:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002aec:	4b47      	ldr	r3, [pc, #284]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002af2:	4b46      	ldr	r3, [pc, #280]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002af8:	4b44      	ldr	r3, [pc, #272]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002afe:	4b43      	ldr	r3, [pc, #268]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002b04:	4b41      	ldr	r3, [pc, #260]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002b0a:	4b40      	ldr	r3, [pc, #256]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002b10:	4b3e      	ldr	r3, [pc, #248]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b12:	4a40      	ldr	r2, [pc, #256]	@ (8002c14 <MX_SAI2_Init+0x144>)
 8002b14:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002b16:	4b3d      	ldr	r3, [pc, #244]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002b22:	4b3a      	ldr	r3, [pc, #232]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002b28:	4b38      	ldr	r3, [pc, #224]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002b2e:	4b37      	ldr	r3, [pc, #220]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b30:	2208      	movs	r2, #8
 8002b32:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002b34:	4b35      	ldr	r3, [pc, #212]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002b3a:	4b34      	ldr	r3, [pc, #208]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002b40:	4b32      	ldr	r3, [pc, #200]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002b46:	4b31      	ldr	r3, [pc, #196]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002b52:	4b2e      	ldr	r3, [pc, #184]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002b58:	4b2c      	ldr	r3, [pc, #176]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002b64:	4829      	ldr	r0, [pc, #164]	@ (8002c0c <MX_SAI2_Init+0x13c>)
 8002b66:	f009 fd55 	bl	800c614 <HAL_SAI_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8002b70:	f001 fa90 	bl	8004094 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002b74:	4b28      	ldr	r3, [pc, #160]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002b76:	4a29      	ldr	r2, [pc, #164]	@ (8002c1c <MX_SAI2_Init+0x14c>)
 8002b78:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002b7a:	4b27      	ldr	r3, [pc, #156]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002b80:	4b25      	ldr	r3, [pc, #148]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002b82:	2203      	movs	r2, #3
 8002b84:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8002b86:	4b24      	ldr	r3, [pc, #144]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002b88:	2240      	movs	r2, #64	@ 0x40
 8002b8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002b8c:	4b22      	ldr	r3, [pc, #136]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002b92:	4b21      	ldr	r3, [pc, #132]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002b98:	4b1f      	ldr	r3, [pc, #124]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002baa:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002bb0:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002bb6:	4b18      	ldr	r3, [pc, #96]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002bbc:	4b16      	ldr	r3, [pc, #88]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002bc8:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002bce:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002bd4:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002bda:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002be0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002bec:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002bf2:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002bf8:	4807      	ldr	r0, [pc, #28]	@ (8002c18 <MX_SAI2_Init+0x148>)
 8002bfa:	f009 fd0b 	bl	800c614 <HAL_SAI_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002c04:	f001 fa46 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20001c88 	.word	0x20001c88
 8002c10:	40015c04 	.word	0x40015c04
 8002c14:	0002ee00 	.word	0x0002ee00
 8002c18:	20001d0c 	.word	0x20001d0c
 8002c1c:	40015c24 	.word	0x40015c24

08002c20 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002c26:	4b13      	ldr	r3, [pc, #76]	@ (8002c74 <MX_SDMMC1_SD_Init+0x54>)
 8002c28:	4a13      	ldr	r2, [pc, #76]	@ (8002c78 <MX_SDMMC1_SD_Init+0x58>)
 8002c2a:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002c2c:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <MX_SDMMC1_SD_Init+0x54>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002c32:	4b10      	ldr	r3, [pc, #64]	@ (8002c74 <MX_SDMMC1_SD_Init+0x54>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002c38:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <MX_SDMMC1_SD_Init+0x54>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <MX_SDMMC1_SD_Init+0x54>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;  // 하드웨어 플로우 컨트롤 활성화 (안정성 향상)
 8002c44:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <MX_SDMMC1_SD_Init+0x54>)
 8002c46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c4a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;  // 클럭 분주비 증가 (2→8, STM32F7 안정화 권장값)
 8002c4c:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <MX_SDMMC1_SD_Init+0x54>)
 8002c4e:	2208      	movs	r2, #8
 8002c50:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002c52:	4808      	ldr	r0, [pc, #32]	@ (8002c74 <MX_SDMMC1_SD_Init+0x54>)
 8002c54:	f009 fe94 	bl	800c980 <HAL_SD_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_SDMMC1_SD_Init+0x42>
  {
    Error_Handler();
 8002c5e:	f001 fa19 	bl	8004094 <Error_Handler>
  }
  
  // BSP 초기화도 호출 (FatFs 호환성을 위해)
  uint8_t bsp_result = BSP_SD_Init();
 8002c62:	f00e ff91 	bl	8011b88 <BSP_SD_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
    // Error_Handler() 호출하지 않음
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20001d90 	.word	0x20001d90
 8002c78:	40012c00 	.word	0x40012c00

08002c7c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002c80:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <MX_SPDIFRX_Init+0x5c>)
 8002c82:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002c86:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002c88:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <MX_SPDIFRX_Init+0x5c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002c8e:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <MX_SPDIFRX_Init+0x5c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002c94:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <MX_SPDIFRX_Init+0x5c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <MX_SPDIFRX_Init+0x5c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <MX_SPDIFRX_Init+0x5c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd8 <MX_SPDIFRX_Init+0x5c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <MX_SPDIFRX_Init+0x5c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002cb2:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <MX_SPDIFRX_Init+0x5c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002cb8:	4b07      	ldr	r3, [pc, #28]	@ (8002cd8 <MX_SPDIFRX_Init+0x5c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <MX_SPDIFRX_Init+0x5c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002cc4:	4804      	ldr	r0, [pc, #16]	@ (8002cd8 <MX_SPDIFRX_Init+0x5c>)
 8002cc6:	f00b f81b 	bl	800dd00 <HAL_SPDIFRX_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002cd0:	f001 f9e0 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20001e14 	.word	0x20001e14

08002cdc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d54 <MX_SPI2_Init+0x78>)
 8002ce4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002ce8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002cee:	4b18      	ldr	r3, [pc, #96]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002cf4:	4b16      	ldr	r3, [pc, #88]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002cf6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002cfa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cfc:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d02:	4b13      	ldr	r3, [pc, #76]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d08:	4b11      	ldr	r3, [pc, #68]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d0e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002d28:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d2e:	4b08      	ldr	r3, [pc, #32]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d34:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002d36:	2208      	movs	r2, #8
 8002d38:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d3a:	4805      	ldr	r0, [pc, #20]	@ (8002d50 <MX_SPI2_Init+0x74>)
 8002d3c:	f00b f83c 	bl	800ddb8 <HAL_SPI_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002d46:	f001 f9a5 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20001e60 	.word	0x20001e60
 8002d54:	40003800 	.word	0x40003800

08002d58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b09a      	sub	sp, #104	@ 0x68
 8002d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d5e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d6c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
 8002d88:	615a      	str	r2, [r3, #20]
 8002d8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	222c      	movs	r2, #44	@ 0x2c
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f014 fea8 	bl	8017ae8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d98:	4b43      	ldr	r3, [pc, #268]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002d9a:	4a44      	ldr	r2, [pc, #272]	@ (8002eac <MX_TIM1_Init+0x154>)
 8002d9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d9e:	4b42      	ldr	r3, [pc, #264]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da4:	4b40      	ldr	r3, [pc, #256]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002daa:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002dac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002db0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002db8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dc4:	4838      	ldr	r0, [pc, #224]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002dc6:	f00b f8a2 	bl	800df0e <HAL_TIM_Base_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002dd0:	f001 f960 	bl	8004094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dd8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dda:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002dde:	4619      	mov	r1, r3
 8002de0:	4831      	ldr	r0, [pc, #196]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002de2:	f00b fbd5 	bl	800e590 <HAL_TIM_ConfigClockSource>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002dec:	f001 f952 	bl	8004094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002df0:	482d      	ldr	r0, [pc, #180]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002df2:	f00b f95b 	bl	800e0ac <HAL_TIM_PWM_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002dfc:	f001 f94a 	bl	8004094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e00:	2300      	movs	r3, #0
 8002e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e04:	2300      	movs	r3, #0
 8002e06:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002e10:	4619      	mov	r1, r3
 8002e12:	4825      	ldr	r0, [pc, #148]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002e14:	f00c f84c 	bl	800eeb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002e1e:	f001 f939 	bl	8004094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e22:	2360      	movs	r3, #96	@ 0x60
 8002e24:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e42:	2200      	movs	r2, #0
 8002e44:	4619      	mov	r1, r3
 8002e46:	4818      	ldr	r0, [pc, #96]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002e48:	f00b fa8e 	bl	800e368 <HAL_TIM_PWM_ConfigChannel>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002e52:	f001 f91f 	bl	8004094 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4807      	ldr	r0, [pc, #28]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002e8c:	f00c f89e 	bl	800efcc <HAL_TIMEx_ConfigBreakDeadTime>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002e96:	f001 f8fd 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e9a:	4803      	ldr	r0, [pc, #12]	@ (8002ea8 <MX_TIM1_Init+0x150>)
 8002e9c:	f001 ff6e 	bl	8004d7c <HAL_TIM_MspPostInit>

}
 8002ea0:	bf00      	nop
 8002ea2:	3768      	adds	r7, #104	@ 0x68
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20001ec4 	.word	0x20001ec4
 8002eac:	40010000 	.word	0x40010000

08002eb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08e      	sub	sp, #56	@ 0x38
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec4:	f107 031c 	add.w	r3, r7, #28
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ed0:	463b      	mov	r3, r7
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	609a      	str	r2, [r3, #8]
 8002eda:	60da      	str	r2, [r3, #12]
 8002edc:	611a      	str	r2, [r3, #16]
 8002ede:	615a      	str	r2, [r3, #20]
 8002ee0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f98 <MX_TIM2_Init+0xe8>)
 8002ee4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ee8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002eea:	4b2b      	ldr	r3, [pc, #172]	@ (8002f98 <MX_TIM2_Init+0xe8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef0:	4b29      	ldr	r3, [pc, #164]	@ (8002f98 <MX_TIM2_Init+0xe8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002ef6:	4b28      	ldr	r3, [pc, #160]	@ (8002f98 <MX_TIM2_Init+0xe8>)
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8002efc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efe:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <MX_TIM2_Init+0xe8>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f04:	4b24      	ldr	r3, [pc, #144]	@ (8002f98 <MX_TIM2_Init+0xe8>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f0a:	4823      	ldr	r0, [pc, #140]	@ (8002f98 <MX_TIM2_Init+0xe8>)
 8002f0c:	f00a ffff 	bl	800df0e <HAL_TIM_Base_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002f16:	f001 f8bd 	bl	8004094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f24:	4619      	mov	r1, r3
 8002f26:	481c      	ldr	r0, [pc, #112]	@ (8002f98 <MX_TIM2_Init+0xe8>)
 8002f28:	f00b fb32 	bl	800e590 <HAL_TIM_ConfigClockSource>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002f32:	f001 f8af 	bl	8004094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f36:	4818      	ldr	r0, [pc, #96]	@ (8002f98 <MX_TIM2_Init+0xe8>)
 8002f38:	f00b f8b8 	bl	800e0ac <HAL_TIM_PWM_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002f42:	f001 f8a7 	bl	8004094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f4e:	f107 031c 	add.w	r3, r7, #28
 8002f52:	4619      	mov	r1, r3
 8002f54:	4810      	ldr	r0, [pc, #64]	@ (8002f98 <MX_TIM2_Init+0xe8>)
 8002f56:	f00b ffab 	bl	800eeb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002f60:	f001 f898 	bl	8004094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f64:	2360      	movs	r3, #96	@ 0x60
 8002f66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f74:	463b      	mov	r3, r7
 8002f76:	2200      	movs	r2, #0
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4807      	ldr	r0, [pc, #28]	@ (8002f98 <MX_TIM2_Init+0xe8>)
 8002f7c:	f00b f9f4 	bl	800e368 <HAL_TIM_PWM_ConfigChannel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002f86:	f001 f885 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f8a:	4803      	ldr	r0, [pc, #12]	@ (8002f98 <MX_TIM2_Init+0xe8>)
 8002f8c:	f001 fef6 	bl	8004d7c <HAL_TIM_MspPostInit>

}
 8002f90:	bf00      	nop
 8002f92:	3738      	adds	r7, #56	@ 0x38
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20001f10 	.word	0x20001f10

08002f9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08e      	sub	sp, #56	@ 0x38
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb0:	f107 031c 	add.w	r3, r7, #28
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
 8002fc8:	611a      	str	r2, [r3, #16]
 8002fca:	615a      	str	r2, [r3, #20]
 8002fcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fce:	4b2d      	ldr	r3, [pc, #180]	@ (8003084 <MX_TIM3_Init+0xe8>)
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <MX_TIM3_Init+0xec>)
 8002fd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003084 <MX_TIM3_Init+0xe8>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fda:	4b2a      	ldr	r3, [pc, #168]	@ (8003084 <MX_TIM3_Init+0xe8>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002fe0:	4b28      	ldr	r3, [pc, #160]	@ (8003084 <MX_TIM3_Init+0xe8>)
 8002fe2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fe6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe8:	4b26      	ldr	r3, [pc, #152]	@ (8003084 <MX_TIM3_Init+0xe8>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fee:	4b25      	ldr	r3, [pc, #148]	@ (8003084 <MX_TIM3_Init+0xe8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ff4:	4823      	ldr	r0, [pc, #140]	@ (8003084 <MX_TIM3_Init+0xe8>)
 8002ff6:	f00a ff8a 	bl	800df0e <HAL_TIM_Base_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003000:	f001 f848 	bl	8004094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003008:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800300a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800300e:	4619      	mov	r1, r3
 8003010:	481c      	ldr	r0, [pc, #112]	@ (8003084 <MX_TIM3_Init+0xe8>)
 8003012:	f00b fabd 	bl	800e590 <HAL_TIM_ConfigClockSource>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800301c:	f001 f83a 	bl	8004094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003020:	4818      	ldr	r0, [pc, #96]	@ (8003084 <MX_TIM3_Init+0xe8>)
 8003022:	f00b f843 	bl	800e0ac <HAL_TIM_PWM_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800302c:	f001 f832 	bl	8004094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003034:	2300      	movs	r3, #0
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003038:	f107 031c 	add.w	r3, r7, #28
 800303c:	4619      	mov	r1, r3
 800303e:	4811      	ldr	r0, [pc, #68]	@ (8003084 <MX_TIM3_Init+0xe8>)
 8003040:	f00b ff36 	bl	800eeb0 <HAL_TIMEx_MasterConfigSynchronization>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800304a:	f001 f823 	bl	8004094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800304e:	2360      	movs	r3, #96	@ 0x60
 8003050:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800305e:	463b      	mov	r3, r7
 8003060:	2200      	movs	r2, #0
 8003062:	4619      	mov	r1, r3
 8003064:	4807      	ldr	r0, [pc, #28]	@ (8003084 <MX_TIM3_Init+0xe8>)
 8003066:	f00b f97f 	bl	800e368 <HAL_TIM_PWM_ConfigChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003070:	f001 f810 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003074:	4803      	ldr	r0, [pc, #12]	@ (8003084 <MX_TIM3_Init+0xe8>)
 8003076:	f001 fe81 	bl	8004d7c <HAL_TIM_MspPostInit>

}
 800307a:	bf00      	nop
 800307c:	3738      	adds	r7, #56	@ 0x38
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20001f5c 	.word	0x20001f5c
 8003088:	40000400 	.word	0x40000400

0800308c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08e      	sub	sp, #56	@ 0x38
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003092:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a0:	f107 031c 	add.w	r3, r7, #28
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ac:	463b      	mov	r3, r7
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	60da      	str	r2, [r3, #12]
 80030b8:	611a      	str	r2, [r3, #16]
 80030ba:	615a      	str	r2, [r3, #20]
 80030bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80030be:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <MX_TIM5_Init+0xe8>)
 80030c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003178 <MX_TIM5_Init+0xec>)
 80030c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80030c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003174 <MX_TIM5_Init+0xe8>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003174 <MX_TIM5_Init+0xe8>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80030d0:	4b28      	ldr	r3, [pc, #160]	@ (8003174 <MX_TIM5_Init+0xe8>)
 80030d2:	f04f 32ff 	mov.w	r2, #4294967295
 80030d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d8:	4b26      	ldr	r3, [pc, #152]	@ (8003174 <MX_TIM5_Init+0xe8>)
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030de:	4b25      	ldr	r3, [pc, #148]	@ (8003174 <MX_TIM5_Init+0xe8>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80030e4:	4823      	ldr	r0, [pc, #140]	@ (8003174 <MX_TIM5_Init+0xe8>)
 80030e6:	f00a ff12 	bl	800df0e <HAL_TIM_Base_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80030f0:	f000 ffd0 	bl	8004094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80030fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030fe:	4619      	mov	r1, r3
 8003100:	481c      	ldr	r0, [pc, #112]	@ (8003174 <MX_TIM5_Init+0xe8>)
 8003102:	f00b fa45 	bl	800e590 <HAL_TIM_ConfigClockSource>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800310c:	f000 ffc2 	bl	8004094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003110:	4818      	ldr	r0, [pc, #96]	@ (8003174 <MX_TIM5_Init+0xe8>)
 8003112:	f00a ffcb 	bl	800e0ac <HAL_TIM_PWM_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800311c:	f000 ffba 	bl	8004094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	4619      	mov	r1, r3
 800312e:	4811      	ldr	r0, [pc, #68]	@ (8003174 <MX_TIM5_Init+0xe8>)
 8003130:	f00b febe 	bl	800eeb0 <HAL_TIMEx_MasterConfigSynchronization>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800313a:	f000 ffab 	bl	8004094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800313e:	2360      	movs	r3, #96	@ 0x60
 8003140:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800314e:	463b      	mov	r3, r7
 8003150:	220c      	movs	r2, #12
 8003152:	4619      	mov	r1, r3
 8003154:	4807      	ldr	r0, [pc, #28]	@ (8003174 <MX_TIM5_Init+0xe8>)
 8003156:	f00b f907 	bl	800e368 <HAL_TIM_PWM_ConfigChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8003160:	f000 ff98 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003164:	4803      	ldr	r0, [pc, #12]	@ (8003174 <MX_TIM5_Init+0xe8>)
 8003166:	f001 fe09 	bl	8004d7c <HAL_TIM_MspPostInit>

}
 800316a:	bf00      	nop
 800316c:	3738      	adds	r7, #56	@ 0x38
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20001fa8 	.word	0x20001fa8
 8003178:	40000c00 	.word	0x40000c00

0800317c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003190:	1d3b      	adds	r3, r7, #4
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800319a:	4b20      	ldr	r3, [pc, #128]	@ (800321c <MX_TIM8_Init+0xa0>)
 800319c:	4a20      	ldr	r2, [pc, #128]	@ (8003220 <MX_TIM8_Init+0xa4>)
 800319e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80031a0:	4b1e      	ldr	r3, [pc, #120]	@ (800321c <MX_TIM8_Init+0xa0>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a6:	4b1d      	ldr	r3, [pc, #116]	@ (800321c <MX_TIM8_Init+0xa0>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80031ac:	4b1b      	ldr	r3, [pc, #108]	@ (800321c <MX_TIM8_Init+0xa0>)
 80031ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b4:	4b19      	ldr	r3, [pc, #100]	@ (800321c <MX_TIM8_Init+0xa0>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80031ba:	4b18      	ldr	r3, [pc, #96]	@ (800321c <MX_TIM8_Init+0xa0>)
 80031bc:	2200      	movs	r2, #0
 80031be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031c0:	4b16      	ldr	r3, [pc, #88]	@ (800321c <MX_TIM8_Init+0xa0>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80031c6:	4815      	ldr	r0, [pc, #84]	@ (800321c <MX_TIM8_Init+0xa0>)
 80031c8:	f00a fea1 	bl	800df0e <HAL_TIM_Base_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80031d2:	f000 ff5f 	bl	8004094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80031dc:	f107 0310 	add.w	r3, r7, #16
 80031e0:	4619      	mov	r1, r3
 80031e2:	480e      	ldr	r0, [pc, #56]	@ (800321c <MX_TIM8_Init+0xa0>)
 80031e4:	f00b f9d4 	bl	800e590 <HAL_TIM_ConfigClockSource>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80031ee:	f000 ff51 	bl	8004094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	4619      	mov	r1, r3
 8003202:	4806      	ldr	r0, [pc, #24]	@ (800321c <MX_TIM8_Init+0xa0>)
 8003204:	f00b fe54 	bl	800eeb0 <HAL_TIMEx_MasterConfigSynchronization>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800320e:	f000 ff41 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003212:	bf00      	nop
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20001ff4 	.word	0x20001ff4
 8003220:	40010400 	.word	0x40010400

08003224 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]
 8003238:	615a      	str	r2, [r3, #20]
 800323a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800323c:	4b1a      	ldr	r3, [pc, #104]	@ (80032a8 <MX_TIM12_Init+0x84>)
 800323e:	4a1b      	ldr	r2, [pc, #108]	@ (80032ac <MX_TIM12_Init+0x88>)
 8003240:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003242:	4b19      	ldr	r3, [pc, #100]	@ (80032a8 <MX_TIM12_Init+0x84>)
 8003244:	2200      	movs	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003248:	4b17      	ldr	r3, [pc, #92]	@ (80032a8 <MX_TIM12_Init+0x84>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800324e:	4b16      	ldr	r3, [pc, #88]	@ (80032a8 <MX_TIM12_Init+0x84>)
 8003250:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003254:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003256:	4b14      	ldr	r3, [pc, #80]	@ (80032a8 <MX_TIM12_Init+0x84>)
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325c:	4b12      	ldr	r3, [pc, #72]	@ (80032a8 <MX_TIM12_Init+0x84>)
 800325e:	2200      	movs	r2, #0
 8003260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <MX_TIM12_Init+0x84>)
 8003264:	f00a ff22 	bl	800e0ac <HAL_TIM_PWM_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800326e:	f000 ff11 	bl	8004094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003272:	2360      	movs	r3, #96	@ 0x60
 8003274:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	2200      	movs	r2, #0
 8003286:	4619      	mov	r1, r3
 8003288:	4807      	ldr	r0, [pc, #28]	@ (80032a8 <MX_TIM12_Init+0x84>)
 800328a:	f00b f86d 	bl	800e368 <HAL_TIM_PWM_ConfigChannel>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8003294:	f000 fefe 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003298:	4803      	ldr	r0, [pc, #12]	@ (80032a8 <MX_TIM12_Init+0x84>)
 800329a:	f001 fd6f 	bl	8004d7c <HAL_TIM_MspPostInit>

}
 800329e:	bf00      	nop
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20002040 	.word	0x20002040
 80032ac:	40001800 	.word	0x40001800

080032b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032b4:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <MX_USART1_UART_Init+0x58>)
 80032b6:	4a15      	ldr	r2, [pc, #84]	@ (800330c <MX_USART1_UART_Init+0x5c>)
 80032b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032ba:	4b13      	ldr	r3, [pc, #76]	@ (8003308 <MX_USART1_UART_Init+0x58>)
 80032bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032c2:	4b11      	ldr	r3, [pc, #68]	@ (8003308 <MX_USART1_UART_Init+0x58>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <MX_USART1_UART_Init+0x58>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003308 <MX_USART1_UART_Init+0x58>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <MX_USART1_UART_Init+0x58>)
 80032d6:	220c      	movs	r2, #12
 80032d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032da:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <MX_USART1_UART_Init+0x58>)
 80032dc:	2200      	movs	r2, #0
 80032de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e0:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <MX_USART1_UART_Init+0x58>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032e6:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <MX_USART1_UART_Init+0x58>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032ec:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <MX_USART1_UART_Init+0x58>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032f2:	4805      	ldr	r0, [pc, #20]	@ (8003308 <MX_USART1_UART_Init+0x58>)
 80032f4:	f00b ff06 	bl	800f104 <HAL_UART_Init>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80032fe:	f000 fec9 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	2000208c 	.word	0x2000208c
 800330c:	40011000 	.word	0x40011000

08003310 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003314:	4b14      	ldr	r3, [pc, #80]	@ (8003368 <MX_USART6_UART_Init+0x58>)
 8003316:	4a15      	ldr	r2, [pc, #84]	@ (800336c <MX_USART6_UART_Init+0x5c>)
 8003318:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800331a:	4b13      	ldr	r3, [pc, #76]	@ (8003368 <MX_USART6_UART_Init+0x58>)
 800331c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003320:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003322:	4b11      	ldr	r3, [pc, #68]	@ (8003368 <MX_USART6_UART_Init+0x58>)
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003328:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <MX_USART6_UART_Init+0x58>)
 800332a:	2200      	movs	r2, #0
 800332c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800332e:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <MX_USART6_UART_Init+0x58>)
 8003330:	2200      	movs	r2, #0
 8003332:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003334:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <MX_USART6_UART_Init+0x58>)
 8003336:	220c      	movs	r2, #12
 8003338:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800333a:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <MX_USART6_UART_Init+0x58>)
 800333c:	2200      	movs	r2, #0
 800333e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003340:	4b09      	ldr	r3, [pc, #36]	@ (8003368 <MX_USART6_UART_Init+0x58>)
 8003342:	2200      	movs	r2, #0
 8003344:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003346:	4b08      	ldr	r3, [pc, #32]	@ (8003368 <MX_USART6_UART_Init+0x58>)
 8003348:	2200      	movs	r2, #0
 800334a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800334c:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <MX_USART6_UART_Init+0x58>)
 800334e:	2200      	movs	r2, #0
 8003350:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003352:	4805      	ldr	r0, [pc, #20]	@ (8003368 <MX_USART6_UART_Init+0x58>)
 8003354:	f00b fed6 	bl	800f104 <HAL_UART_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800335e:	f000 fe99 	bl	8004094 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20002114 	.word	0x20002114
 800336c:	40011400 	.word	0x40011400

08003370 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8003376:	1d3b      	adds	r3, r7, #4
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	611a      	str	r2, [r3, #16]
 8003384:	615a      	str	r2, [r3, #20]
 8003386:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003388:	4b1f      	ldr	r3, [pc, #124]	@ (8003408 <MX_FMC_Init+0x98>)
 800338a:	4a20      	ldr	r2, [pc, #128]	@ (800340c <MX_FMC_Init+0x9c>)
 800338c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800338e:	4b1e      	ldr	r3, [pc, #120]	@ (8003408 <MX_FMC_Init+0x98>)
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003394:	4b1c      	ldr	r3, [pc, #112]	@ (8003408 <MX_FMC_Init+0x98>)
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800339a:	4b1b      	ldr	r3, [pc, #108]	@ (8003408 <MX_FMC_Init+0x98>)
 800339c:	2204      	movs	r2, #4
 800339e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80033a0:	4b19      	ldr	r3, [pc, #100]	@ (8003408 <MX_FMC_Init+0x98>)
 80033a2:	2210      	movs	r2, #16
 80033a4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80033a6:	4b18      	ldr	r3, [pc, #96]	@ (8003408 <MX_FMC_Init+0x98>)
 80033a8:	2240      	movs	r2, #64	@ 0x40
 80033aa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80033ac:	4b16      	ldr	r3, [pc, #88]	@ (8003408 <MX_FMC_Init+0x98>)
 80033ae:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80033b2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80033b4:	4b14      	ldr	r3, [pc, #80]	@ (8003408 <MX_FMC_Init+0x98>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80033ba:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <MX_FMC_Init+0x98>)
 80033bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033c0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80033c2:	4b11      	ldr	r3, [pc, #68]	@ (8003408 <MX_FMC_Init+0x98>)
 80033c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80033ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <MX_FMC_Init+0x98>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80033d0:	2302      	movs	r3, #2
 80033d2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80033d4:	2307      	movs	r3, #7
 80033d6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80033d8:	2304      	movs	r3, #4
 80033da:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80033dc:	2307      	movs	r3, #7
 80033de:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80033e0:	2303      	movs	r3, #3
 80033e2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80033e4:	2302      	movs	r3, #2
 80033e6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80033e8:	2302      	movs	r3, #2
 80033ea:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80033ec:	1d3b      	adds	r3, r7, #4
 80033ee:	4619      	mov	r1, r3
 80033f0:	4805      	ldr	r0, [pc, #20]	@ (8003408 <MX_FMC_Init+0x98>)
 80033f2:	f00a fc50 	bl	800dc96 <HAL_SDRAM_Init>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80033fc:	f000 fe4a 	bl	8004094 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003400:	bf00      	nop
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	2000219c 	.word	0x2000219c
 800340c:	a0000140 	.word	0xa0000140

08003410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b090      	sub	sp, #64	@ 0x40
 8003414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003416:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	60da      	str	r2, [r3, #12]
 8003424:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003426:	4bb0      	ldr	r3, [pc, #704]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4aaf      	ldr	r2, [pc, #700]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 800342c:	f043 0310 	orr.w	r3, r3, #16
 8003430:	6313      	str	r3, [r2, #48]	@ 0x30
 8003432:	4bad      	ldr	r3, [pc, #692]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800343c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800343e:	4baa      	ldr	r3, [pc, #680]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	4aa9      	ldr	r2, [pc, #676]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003448:	6313      	str	r3, [r2, #48]	@ 0x30
 800344a:	4ba7      	ldr	r3, [pc, #668]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003452:	627b      	str	r3, [r7, #36]	@ 0x24
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003456:	4ba4      	ldr	r3, [pc, #656]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	4aa3      	ldr	r2, [pc, #652]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	6313      	str	r3, [r2, #48]	@ 0x30
 8003462:	4ba1      	ldr	r3, [pc, #644]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800346e:	4b9e      	ldr	r3, [pc, #632]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	4a9d      	ldr	r2, [pc, #628]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003474:	f043 0308 	orr.w	r3, r3, #8
 8003478:	6313      	str	r3, [r2, #48]	@ 0x30
 800347a:	4b9b      	ldr	r3, [pc, #620]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003486:	4b98      	ldr	r3, [pc, #608]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	4a97      	ldr	r2, [pc, #604]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	6313      	str	r3, [r2, #48]	@ 0x30
 8003492:	4b95      	ldr	r3, [pc, #596]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800349e:	4b92      	ldr	r3, [pc, #584]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	4a91      	ldr	r2, [pc, #580]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034aa:	4b8f      	ldr	r3, [pc, #572]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80034b6:	4b8c      	ldr	r3, [pc, #560]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	4a8b      	ldr	r2, [pc, #556]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 80034bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034c2:	4b89      	ldr	r3, [pc, #548]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80034ce:	4b86      	ldr	r3, [pc, #536]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	4a85      	ldr	r2, [pc, #532]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034da:	4b83      	ldr	r3, [pc, #524]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80034e6:	4b80      	ldr	r3, [pc, #512]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	4a7f      	ldr	r2, [pc, #508]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 80034ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f2:	4b7d      	ldr	r3, [pc, #500]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034fe:	4b7a      	ldr	r3, [pc, #488]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	4a79      	ldr	r2, [pc, #484]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003504:	f043 0320 	orr.w	r3, r3, #32
 8003508:	6313      	str	r3, [r2, #48]	@ 0x30
 800350a:	4b77      	ldr	r3, [pc, #476]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003516:	4b74      	ldr	r3, [pc, #464]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	4a73      	ldr	r2, [pc, #460]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 800351c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003520:	6313      	str	r3, [r2, #48]	@ 0x30
 8003522:	4b71      	ldr	r3, [pc, #452]	@ (80036e8 <MX_GPIO_Init+0x2d8>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800352e:	2201      	movs	r2, #1
 8003530:	2120      	movs	r1, #32
 8003532:	486e      	ldr	r0, [pc, #440]	@ (80036ec <MX_GPIO_Init+0x2dc>)
 8003534:	f004 ff88 	bl	8008448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8003538:	2200      	movs	r2, #0
 800353a:	210c      	movs	r1, #12
 800353c:	486c      	ldr	r0, [pc, #432]	@ (80036f0 <MX_GPIO_Init+0x2e0>)
 800353e:	f004 ff83 	bl	8008448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8003542:	2201      	movs	r2, #1
 8003544:	2108      	movs	r1, #8
 8003546:	486b      	ldr	r0, [pc, #428]	@ (80036f4 <MX_GPIO_Init+0x2e4>)
 8003548:	f004 ff7e 	bl	8008448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800354c:	2201      	movs	r2, #1
 800354e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003552:	4867      	ldr	r0, [pc, #412]	@ (80036f0 <MX_GPIO_Init+0x2e0>)
 8003554:	f004 ff78 	bl	8008448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003558:	2200      	movs	r2, #0
 800355a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800355e:	4866      	ldr	r0, [pc, #408]	@ (80036f8 <MX_GPIO_Init+0x2e8>)
 8003560:	f004 ff72 	bl	8008448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003564:	2200      	movs	r2, #0
 8003566:	21c8      	movs	r1, #200	@ 0xc8
 8003568:	4864      	ldr	r0, [pc, #400]	@ (80036fc <MX_GPIO_Init+0x2ec>)
 800356a:	f004 ff6d 	bl	8008448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800356e:	2308      	movs	r3, #8
 8003570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003572:	2300      	movs	r3, #0
 8003574:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800357a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800357e:	4619      	mov	r1, r3
 8003580:	485f      	ldr	r0, [pc, #380]	@ (8003700 <MX_GPIO_Init+0x2f0>)
 8003582:	f004 fd9d 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8003586:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800358a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358c:	2302      	movs	r3, #2
 800358e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003590:	2300      	movs	r3, #0
 8003592:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003594:	2303      	movs	r3, #3
 8003596:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003598:	230a      	movs	r3, #10
 800359a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035a0:	4619      	mov	r1, r3
 80035a2:	4858      	ldr	r0, [pc, #352]	@ (8003704 <MX_GPIO_Init+0x2f4>)
 80035a4:	f004 fd8c 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80035a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ae:	2300      	movs	r3, #0
 80035b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80035b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035ba:	4619      	mov	r1, r3
 80035bc:	4852      	ldr	r0, [pc, #328]	@ (8003708 <MX_GPIO_Init+0x2f8>)
 80035be:	f004 fd7f 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80035c2:	2340      	movs	r3, #64	@ 0x40
 80035c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80035c6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80035ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80035d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035d4:	4619      	mov	r1, r3
 80035d6:	4845      	ldr	r0, [pc, #276]	@ (80036ec <MX_GPIO_Init+0x2dc>)
 80035d8:	f004 fd72 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80035dc:	2320      	movs	r3, #32
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e0:	2301      	movs	r3, #1
 80035e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e8:	2300      	movs	r3, #0
 80035ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80035ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035f0:	4619      	mov	r1, r3
 80035f2:	483e      	ldr	r0, [pc, #248]	@ (80036ec <MX_GPIO_Init+0x2dc>)
 80035f4:	f004 fd64 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80035f8:	f241 030c 	movw	r3, #4108	@ 0x100c
 80035fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035fe:	2301      	movs	r3, #1
 8003600:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003606:	2300      	movs	r3, #0
 8003608:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800360a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800360e:	4619      	mov	r1, r3
 8003610:	4837      	ldr	r0, [pc, #220]	@ (80036f0 <MX_GPIO_Init+0x2e0>)
 8003612:	f004 fd55 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003616:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800361c:	2300      	movs	r3, #0
 800361e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003624:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003628:	4619      	mov	r1, r3
 800362a:	4838      	ldr	r0, [pc, #224]	@ (800370c <MX_GPIO_Init+0x2fc>)
 800362c:	f004 fd48 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003630:	2308      	movs	r3, #8
 8003632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003634:	2301      	movs	r3, #1
 8003636:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363c:	2300      	movs	r3, #0
 800363e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003640:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003644:	4619      	mov	r1, r3
 8003646:	482b      	ldr	r0, [pc, #172]	@ (80036f4 <MX_GPIO_Init+0x2e4>)
 8003648:	f004 fd3a 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800364c:	2310      	movs	r3, #16
 800364e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003650:	2300      	movs	r3, #0
 8003652:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003658:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800365c:	4619      	mov	r1, r3
 800365e:	4823      	ldr	r0, [pc, #140]	@ (80036ec <MX_GPIO_Init+0x2dc>)
 8003660:	f004 fd2e 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8003664:	f248 0304 	movw	r3, #32772	@ 0x8004
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800366a:	2300      	movs	r3, #0
 800366c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003672:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003676:	4619      	mov	r1, r3
 8003678:	481f      	ldr	r0, [pc, #124]	@ (80036f8 <MX_GPIO_Init+0x2e8>)
 800367a:	f004 fd21 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800367e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003684:	2301      	movs	r3, #1
 8003686:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368c:	2300      	movs	r3, #0
 800368e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003690:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003694:	4619      	mov	r1, r3
 8003696:	4818      	ldr	r0, [pc, #96]	@ (80036f8 <MX_GPIO_Init+0x2e8>)
 8003698:	f004 fd12 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800369c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80036a2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80036a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80036ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036b0:	4619      	mov	r1, r3
 80036b2:	480f      	ldr	r0, [pc, #60]	@ (80036f0 <MX_GPIO_Init+0x2e0>)
 80036b4:	f004 fd04 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80036b8:	2310      	movs	r3, #16
 80036ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036bc:	2302      	movs	r3, #2
 80036be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c4:	2303      	movs	r3, #3
 80036c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80036c8:	230a      	movs	r3, #10
 80036ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80036cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036d0:	4619      	mov	r1, r3
 80036d2:	4809      	ldr	r0, [pc, #36]	@ (80036f8 <MX_GPIO_Init+0x2e8>)
 80036d4:	f004 fcf4 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80036d8:	23c8      	movs	r3, #200	@ 0xc8
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036dc:	2301      	movs	r3, #1
 80036de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e4:	e014      	b.n	8003710 <MX_GPIO_Init+0x300>
 80036e6:	bf00      	nop
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40020c00 	.word	0x40020c00
 80036f0:	40022000 	.word	0x40022000
 80036f4:	40022800 	.word	0x40022800
 80036f8:	40021c00 	.word	0x40021c00
 80036fc:	40021800 	.word	0x40021800
 8003700:	40021000 	.word	0x40021000
 8003704:	40020400 	.word	0x40020400
 8003708:	40022400 	.word	0x40022400
 800370c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003710:	2300      	movs	r3, #0
 8003712:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003714:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003718:	4619      	mov	r1, r3
 800371a:	4819      	ldr	r0, [pc, #100]	@ (8003780 <MX_GPIO_Init+0x370>)
 800371c:	f004 fcd0 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003720:	2305      	movs	r3, #5
 8003722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003730:	230a      	movs	r3, #10
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003734:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003738:	4619      	mov	r1, r3
 800373a:	4812      	ldr	r0, [pc, #72]	@ (8003784 <MX_GPIO_Init+0x374>)
 800373c:	f004 fcc0 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003740:	2304      	movs	r3, #4
 8003742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003744:	2300      	movs	r3, #0
 8003746:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800374c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003750:	4619      	mov	r1, r3
 8003752:	480b      	ldr	r0, [pc, #44]	@ (8003780 <MX_GPIO_Init+0x370>)
 8003754:	f004 fcb4 	bl	80080c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003758:	2328      	movs	r3, #40	@ 0x28
 800375a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003764:	2303      	movs	r3, #3
 8003766:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003768:	230a      	movs	r3, #10
 800376a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003770:	4619      	mov	r1, r3
 8003772:	4805      	ldr	r0, [pc, #20]	@ (8003788 <MX_GPIO_Init+0x378>)
 8003774:	f004 fca4 	bl	80080c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003778:	bf00      	nop
 800377a:	3740      	adds	r7, #64	@ 0x40
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021800 	.word	0x40021800
 8003784:	40020800 	.word	0x40020800
 8003788:	40020000 	.word	0x40020000

0800378c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b096      	sub	sp, #88	@ 0x58
 8003790:	af02      	add	r7, sp, #8
 8003792:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST - 임시 비활성화 (SD 카드 테스트용) */
  LOG_WARN("USB Host initialization temporarily disabled to avoid RTOS task conflicts");
 8003794:	49ba      	ldr	r1, [pc, #744]	@ (8003a80 <StartDefaultTask+0x2f4>)
 8003796:	2002      	movs	r0, #2
 8003798:	f001 ffba 	bl	8005710 <LOGGER_SendFormatted>
  LOG_INFO("This eliminates USBH_Thread vs defaultTask priority conflicts");
 800379c:	49b9      	ldr	r1, [pc, #740]	@ (8003a84 <StartDefaultTask+0x2f8>)
 800379e:	2001      	movs	r0, #1
 80037a0:	f001 ffb6 	bl	8005710 <LOGGER_SendFormatted>
  // MX_USB_HOST_Init();  // SD 카드 테스트 완료 후 재활성화 예정
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 80037a4:	49b8      	ldr	r1, [pc, #736]	@ (8003a88 <StartDefaultTask+0x2fc>)
 80037a6:	2001      	movs	r0, #1
 80037a8:	f001 ffb2 	bl	8005710 <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 80037ac:	49b7      	ldr	r1, [pc, #732]	@ (8003a8c <StartDefaultTask+0x300>)
 80037ae:	2001      	movs	r0, #1
 80037b0:	f001 ffae 	bl	8005710 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 80037b4:	4bb6      	ldr	r3, [pc, #728]	@ (8003a90 <StartDefaultTask+0x304>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4ab6      	ldr	r2, [pc, #728]	@ (8003a94 <StartDefaultTask+0x308>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0c9b      	lsrs	r3, r3, #18
 80037c0:	461a      	mov	r2, r3
 80037c2:	49b5      	ldr	r1, [pc, #724]	@ (8003a98 <StartDefaultTask+0x30c>)
 80037c4:	2001      	movs	r0, #1
 80037c6:	f001 ffa3 	bl	8005710 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 80037ca:	49b4      	ldr	r1, [pc, #720]	@ (8003a9c <StartDefaultTask+0x310>)
 80037cc:	2001      	movs	r0, #1
 80037ce:	f001 ff9f 	bl	8005710 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 80037d2:	49b3      	ldr	r1, [pc, #716]	@ (8003aa0 <StartDefaultTask+0x314>)
 80037d4:	2001      	movs	r0, #1
 80037d6:	f001 ff9b 	bl	8005710 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 80037da:	49b2      	ldr	r1, [pc, #712]	@ (8003aa4 <StartDefaultTask+0x318>)
 80037dc:	2001      	movs	r0, #1
 80037de:	f001 ff97 	bl	8005710 <LOGGER_SendFormatted>
  
  // SD 카드 기본 기능 테스트 (Default Task에서 수행)
  LOG_INFO("📤 [TX_TASK] Starting SD card basic functionality test...");
 80037e2:	49b1      	ldr	r1, [pc, #708]	@ (8003aa8 <StartDefaultTask+0x31c>)
 80037e4:	2001      	movs	r0, #1
 80037e6:	f001 ff93 	bl	8005710 <LOGGER_SendFormatted>
  
  // SD 초기화 시도
  LOG_INFO("📤 [TX_TASK] Attempting SD card initialization...");
 80037ea:	49b0      	ldr	r1, [pc, #704]	@ (8003aac <StartDefaultTask+0x320>)
 80037ec:	2001      	movs	r0, #1
 80037ee:	f001 ff8f 	bl	8005710 <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 80037f2:	f7fd fde5 	bl	80013c0 <SDStorage_Init>
 80037f6:	4603      	mov	r3, r0
 80037f8:	4aad      	ldr	r2, [pc, #692]	@ (8003ab0 <StartDefaultTask+0x324>)
 80037fa:	6013      	str	r3, [r2, #0]
  
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 80037fc:	4bac      	ldr	r3, [pc, #688]	@ (8003ab0 <StartDefaultTask+0x324>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d124      	bne.n	800384e <StartDefaultTask+0xc2>
    LOG_INFO("✅ [TX_TASK] SD card initialization SUCCESS");
 8003804:	49ab      	ldr	r1, [pc, #684]	@ (8003ab4 <StartDefaultTask+0x328>)
 8003806:	2001      	movs	r0, #1
 8003808:	f001 ff82 	bl	8005710 <LOGGER_SendFormatted>
    
    // 기본 쓰기 테스트
    LOG_INFO("📤 [TX_TASK] Testing SD card write operation...");
 800380c:	49aa      	ldr	r1, [pc, #680]	@ (8003ab8 <StartDefaultTask+0x32c>)
 800380e:	2001      	movs	r0, #1
 8003810:	f001 ff7e 	bl	8005710 <LOGGER_SendFormatted>
    const char* test_message = "SD Card Test - Hello World from FreeRTOS!\n";
 8003814:	4ba9      	ldr	r3, [pc, #676]	@ (8003abc <StartDefaultTask+0x330>)
 8003816:	647b      	str	r3, [r7, #68]	@ 0x44
    int write_result = SDStorage_WriteLog(test_message, strlen(test_message));
 8003818:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800381a:	f7fc fd03 	bl	8000224 <strlen>
 800381e:	4603      	mov	r3, r0
 8003820:	4619      	mov	r1, r3
 8003822:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003824:	f7fd ffea 	bl	80017fc <SDStorage_WriteLog>
 8003828:	6438      	str	r0, [r7, #64]	@ 0x40
    
    if (write_result == SDSTORAGE_OK) {
 800382a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d108      	bne.n	8003842 <StartDefaultTask+0xb6>
      LOG_INFO("✅ [TX_TASK] SD card write operation SUCCESS");
 8003830:	49a3      	ldr	r1, [pc, #652]	@ (8003ac0 <StartDefaultTask+0x334>)
 8003832:	2001      	movs	r0, #1
 8003834:	f001 ff6c 	bl	8005710 <LOGGER_SendFormatted>
      LOG_INFO("🎉 [TX_TASK] SD card functionality confirmed - ready for long-term logging");
 8003838:	49a2      	ldr	r1, [pc, #648]	@ (8003ac4 <StartDefaultTask+0x338>)
 800383a:	2001      	movs	r0, #1
 800383c:	f001 ff68 	bl	8005710 <LOGGER_SendFormatted>
 8003840:	e010      	b.n	8003864 <StartDefaultTask+0xd8>
    } else {
      LOG_ERROR("❌ [TX_TASK] SD card write operation FAILED (code: %d)", write_result);
 8003842:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003844:	49a0      	ldr	r1, [pc, #640]	@ (8003ac8 <StartDefaultTask+0x33c>)
 8003846:	2003      	movs	r0, #3
 8003848:	f001 ff62 	bl	8005710 <LOGGER_SendFormatted>
 800384c:	e00a      	b.n	8003864 <StartDefaultTask+0xd8>
    }
  } else {
    LOG_ERROR("❌ [TX_TASK] SD card initialization FAILED (code: %d)", g_sd_initialization_result);
 800384e:	4b98      	ldr	r3, [pc, #608]	@ (8003ab0 <StartDefaultTask+0x324>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	499d      	ldr	r1, [pc, #628]	@ (8003acc <StartDefaultTask+0x340>)
 8003856:	2003      	movs	r0, #3
 8003858:	f001 ff5a 	bl	8005710 <LOGGER_SendFormatted>
    LOG_INFO("📺 [TX_TASK] Continuing with terminal-only logging");
 800385c:	499c      	ldr	r1, [pc, #624]	@ (8003ad0 <StartDefaultTask+0x344>)
 800385e:	2001      	movs	r0, #1
 8003860:	f001 ff56 	bl	8005710 <LOGGER_SendFormatted>
  }

  // SD 테스트 건너뛰고 바로 LoRa 시작
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8003864:	499b      	ldr	r1, [pc, #620]	@ (8003ad4 <StartDefaultTask+0x348>)
 8003866:	2001      	movs	r0, #1
 8003868:	f001 ff52 	bl	8005710 <LOGGER_SendFormatted>
  
  // UART 연결 (LoRa 통신을 위해 필수)
  LOG_INFO("📤 [TX_TASK] Connecting to UART for LoRa communication...");
 800386c:	499a      	ldr	r1, [pc, #616]	@ (8003ad8 <StartDefaultTask+0x34c>)
 800386e:	2001      	movs	r0, #1
 8003870:	f001 ff4e 	bl	8005710 <LOGGER_SendFormatted>
  UartStatus uart_status = UART_Connect("UART6");
 8003874:	4899      	ldr	r0, [pc, #612]	@ (8003adc <StartDefaultTask+0x350>)
 8003876:	f002 f877 	bl	8005968 <UART_Connect>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (uart_status == UART_STATUS_OK) {
 8003880:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <StartDefaultTask+0x106>
    LOG_INFO("✅ [TX_TASK] UART connection successful");
 8003888:	4995      	ldr	r1, [pc, #596]	@ (8003ae0 <StartDefaultTask+0x354>)
 800388a:	2001      	movs	r0, #1
 800388c:	f001 ff40 	bl	8005710 <LOGGER_SendFormatted>
 8003890:	e006      	b.n	80038a0 <StartDefaultTask+0x114>
  } else {
    LOG_ERROR("❌ [TX_TASK] UART connection failed (status: %d)", uart_status);
 8003892:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003896:	461a      	mov	r2, r3
 8003898:	4992      	ldr	r1, [pc, #584]	@ (8003ae4 <StartDefaultTask+0x358>)
 800389a:	2003      	movs	r0, #3
 800389c:	f001 ff38 	bl	8005710 <LOGGER_SendFormatted>
  }
  
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (5 seconds - optimized for long-term test)...");
 80038a0:	4991      	ldr	r1, [pc, #580]	@ (8003ae8 <StartDefaultTask+0x35c>)
 80038a2:	2001      	movs	r0, #1
 80038a4:	f001 ff34 	bl	8005710 <LOGGER_SendFormatted>
  osDelay(5000); // 5초 대기 (장기 테스트를 위해 단축)
 80038a8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80038ac:	f011 fb1e 	bl	8014eec <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	498d      	ldr	r1, [pc, #564]	@ (8003aec <StartDefaultTask+0x360>)
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc ff86 	bl	80007c8 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 80038bc:	498c      	ldr	r1, [pc, #560]	@ (8003af0 <StartDefaultTask+0x364>)
 80038be:	2001      	movs	r0, #1
 80038c0:	f001 ff26 	bl	8005710 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	460b      	mov	r3, r1
 80038ce:	4989      	ldr	r1, [pc, #548]	@ (8003af4 <StartDefaultTask+0x368>)
 80038d0:	2001      	movs	r0, #1
 80038d2:	f001 ff1d 	bl	8005710 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 카드 로깅 설정 (간단한 방식)
  extern int g_sd_initialization_result; // main()에서 설정된 SD 결과
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 80038d6:	4b76      	ldr	r3, [pc, #472]	@ (8003ab0 <StartDefaultTask+0x324>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d104      	bne.n	80038e8 <StartDefaultTask+0x15c>
    LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 80038de:	4986      	ldr	r1, [pc, #536]	@ (8003af8 <StartDefaultTask+0x36c>)
 80038e0:	2001      	movs	r0, #1
 80038e2:	f001 ff15 	bl	8005710 <LOGGER_SendFormatted>
 80038e6:	e003      	b.n	80038f0 <StartDefaultTask+0x164>
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 80038e8:	4984      	ldr	r1, [pc, #528]	@ (8003afc <StartDefaultTask+0x370>)
 80038ea:	2001      	movs	r0, #1
 80038ec:	f001 ff10 	bl	8005710 <LOGGER_SendFormatted>
  }
  
  // LoRa 로깅 모드 설정 - 초기화 단계에서는 터미널만 사용
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 80038f0:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab0 <StartDefaultTask+0x324>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d110      	bne.n	800391a <StartDefaultTask+0x18e>
    LOGGER_SetMode(LOGGER_MODE_DUAL);  // 터미널 + SD 동시 출력
 80038f8:	2002      	movs	r0, #2
 80038fa:	f001 fee5 	bl	80056c8 <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);  // 터미널에서 모든 로그 확인 가능
 80038fe:	2001      	movs	r0, #1
 8003900:	f001 fea6 	bl	8005650 <LOGGER_SetFilterLevel>
    LOGGER_SetSDFilterLevel(LOG_LEVEL_WARN);  // SD 카드에는 WARN 이상만 저장
 8003904:	2002      	movs	r0, #2
 8003906:	f001 feb3 	bl	8005670 <LOGGER_SetSDFilterLevel>
    LOGGER_EnableSDLogging(false);  // 초기화 완료 전까지 SD 로깅 비활성화
 800390a:	2000      	movs	r0, #0
 800390c:	f001 fec0 	bl	8005690 <LOGGER_EnableSDLogging>
    LOG_WARN("✅ LoRa logging mode: DUAL (Terminal + SD), SD logging will start from JOIN attempts");
 8003910:	497b      	ldr	r1, [pc, #492]	@ (8003b00 <StartDefaultTask+0x374>)
 8003912:	2002      	movs	r0, #2
 8003914:	f001 fefc 	bl	8005710 <LOGGER_SendFormatted>
 8003918:	e009      	b.n	800392e <StartDefaultTask+0x1a2>
  } else {
    LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
 800391a:	2000      	movs	r0, #0
 800391c:	f001 fed4 	bl	80056c8 <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
 8003920:	2001      	movs	r0, #1
 8003922:	f001 fe95 	bl	8005650 <LOGGER_SetFilterLevel>
    LOG_INFO("📺 LoRa logging mode: Terminal only");
 8003926:	4977      	ldr	r1, [pc, #476]	@ (8003b04 <StartDefaultTask+0x378>)
 8003928:	2001      	movs	r0, #1
 800392a:	f001 fef1 	bl	8005710 <LOGGER_SendFormatted>
  }
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  LOG_INFO("📤 [TX_TASK] Starting LoRa process loop...");
 800392e:	4976      	ldr	r1, [pc, #472]	@ (8003b08 <StartDefaultTask+0x37c>)
 8003930:	2001      	movs	r0, #1
 8003932:	f001 feed 	bl	8005710 <LOGGER_SendFormatted>
  
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (lora_new_response) {
 800393a:	4b74      	ldr	r3, [pc, #464]	@ (8003b0c <StartDefaultTask+0x380>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <StartDefaultTask+0x1c2>
      rx_data = lora_rx_response;
 8003944:	4b72      	ldr	r3, [pc, #456]	@ (8003b10 <StartDefaultTask+0x384>)
 8003946:	64fb      	str	r3, [r7, #76]	@ 0x4c
      lora_new_response = false; // 플래그 클리어
 8003948:	4b70      	ldr	r3, [pc, #448]	@ (8003b0c <StartDefaultTask+0x380>)
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
      // 응답 처리 - 로그는 ResponseHandler에서 이미 출력됨
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 800394e:	f107 030c 	add.w	r3, r7, #12
 8003952:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003954:	4618      	mov	r0, r3
 8003956:	f7fc ff7f 	bl	8000858 <LoraStarter_Process>
    
    // JOIN 성공 후 시간 조회는 LoRa 상태 머신에서 자동 처리됨 (TIMEREQ → LTIME)
    
    // 상태별 처리 간격 및 디버깅 (중요한 상태만)
    static int last_state = -1;
    if (lora_ctx.state != last_state) {
 800395a:	7b3b      	ldrb	r3, [r7, #12]
 800395c:	461a      	mov	r2, r3
 800395e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b14 <StartDefaultTask+0x388>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d01a      	beq.n	800399c <StartDefaultTask+0x210>
      // JOIN, SEND, ERROR 등 중요한 상태 변경만 로그 출력
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 8003966:	7b3b      	ldrb	r3, [r7, #12]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d008      	beq.n	800397e <StartDefaultTask+0x1f2>
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 800396c:	7b3b      	ldrb	r3, [r7, #12]
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 800396e:	2b09      	cmp	r3, #9
 8003970:	d005      	beq.n	800397e <StartDefaultTask+0x1f2>
          lora_ctx.state == LORA_STATE_DONE ||
 8003972:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 8003974:	2b0d      	cmp	r3, #13
 8003976:	d002      	beq.n	800397e <StartDefaultTask+0x1f2>
          lora_ctx.state == LORA_STATE_ERROR) {
 8003978:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_DONE ||
 800397a:	2b0e      	cmp	r3, #14
 800397c:	d10a      	bne.n	8003994 <StartDefaultTask+0x208>
        LOG_INFO("[TX_TASK] ⚙️ LoRa State: %d, cmd_index: %d/%d", 
 800397e:	7b3b      	ldrb	r3, [r7, #12]
 8003980:	4619      	mov	r1, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	460a      	mov	r2, r1
 800398c:	4962      	ldr	r1, [pc, #392]	@ (8003b18 <StartDefaultTask+0x38c>)
 800398e:	2001      	movs	r0, #1
 8003990:	f001 febe 	bl	8005710 <LOGGER_SendFormatted>
                  lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
      }
      last_state = lora_ctx.state;
 8003994:	7b3b      	ldrb	r3, [r7, #12]
 8003996:	461a      	mov	r2, r3
 8003998:	4b5e      	ldr	r3, [pc, #376]	@ (8003b14 <StartDefaultTask+0x388>)
 800399a:	601a      	str	r2, [r3, #0]
    }
    
    switch(lora_ctx.state) {
 800399c:	7b3b      	ldrb	r3, [r7, #12]
 800399e:	2b0e      	cmp	r3, #14
 80039a0:	f200 80d3 	bhi.w	8003b4a <StartDefaultTask+0x3be>
 80039a4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ac <StartDefaultTask+0x220>)
 80039a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039aa:	bf00      	nop
 80039ac:	080039e9 	.word	0x080039e9
 80039b0:	080039f3 	.word	0x080039f3
 80039b4:	08003a0b 	.word	0x08003a0b
 80039b8:	08003a15 	.word	0x08003a15
 80039bc:	08003a63 	.word	0x08003a63
 80039c0:	08003a45 	.word	0x08003a45
 80039c4:	08003a63 	.word	0x08003a63
 80039c8:	08003a4f 	.word	0x08003a4f
 80039cc:	08003a63 	.word	0x08003a63
 80039d0:	08003a59 	.word	0x08003a59
 80039d4:	08003a63 	.word	0x08003a63
 80039d8:	08003a6d 	.word	0x08003a6d
 80039dc:	08003a77 	.word	0x08003a77
 80039e0:	08003b25 	.word	0x08003b25
 80039e4:	08003b25 	.word	0x08003b25
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 80039e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80039ec:	f011 fa7e 	bl	8014eec <osDelay>
        break;
 80039f0:	e0b0      	b.n	8003b54 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4948      	ldr	r1, [pc, #288]	@ (8003b1c <StartDefaultTask+0x390>)
 80039fa:	2001      	movs	r0, #1
 80039fc:	f001 fe88 	bl	8005710 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 8003a00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a04:	f011 fa72 	bl	8014eec <osDelay>
        break;
 8003a08:	e0a4      	b.n	8003b54 <StartDefaultTask+0x3c8>
      case LORA_STATE_WAIT_OK:
        // OK 응답 대기 중 - 조용히 대기
        osDelay(2000); // OK 응답 대기 중 2초 간격
 8003a0a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a0e:	f011 fa6d 	bl	8014eec <osDelay>
        break;
 8003a12:	e09f      	b.n	8003b54 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_JOIN:
        // JOIN 시도 시작 - SD 로깅 활성화
        if (g_sd_initialization_result == SDSTORAGE_OK && !LOGGER_IsSDLoggingEnabled()) {
 8003a14:	4b26      	ldr	r3, [pc, #152]	@ (8003ab0 <StartDefaultTask+0x324>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10e      	bne.n	8003a3a <StartDefaultTask+0x2ae>
 8003a1c:	f001 fe48 	bl	80056b0 <LOGGER_IsSDLoggingEnabled>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f083 0301 	eor.w	r3, r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d006      	beq.n	8003a3a <StartDefaultTask+0x2ae>
          LOGGER_EnableSDLogging(true);
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f001 fe2f 	bl	8005690 <LOGGER_EnableSDLogging>
          LOG_WARN("🗂️ SD logging enabled from JOIN attempts (WARN+ levels only)");
 8003a32:	493b      	ldr	r1, [pc, #236]	@ (8003b20 <StartDefaultTask+0x394>)
 8003a34:	2002      	movs	r0, #2
 8003a36:	f001 fe6b 	bl	8005710 <LOGGER_SendFormatted>
        }
        osDelay(2000); // JOIN 명령어 전송 후 2초 대기
 8003a3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a3e:	f011 fa55 	bl	8014eec <osDelay>
        break;
 8003a42:	e087      	b.n	8003b54 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_TIMEREQ:
        osDelay(1000); // TIMEREQ 명령어 전송 후 1초 대기
 8003a44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a48:	f011 fa50 	bl	8014eec <osDelay>
        break;
 8003a4c:	e082      	b.n	8003b54 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_LTIME:
        osDelay(1000); // LTIME 명령어 전송 후 1초 대기
 8003a4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a52:	f011 fa4b 	bl	8014eec <osDelay>
        break;
 8003a56:	e07d      	b.n	8003b54 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // SEND 명령어 전송 후 2초 대기
 8003a58:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a5c:	f011 fa46 	bl	8014eec <osDelay>
        break;
 8003a60:	e078      	b.n	8003b54 <StartDefaultTask+0x3c8>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_TIMEREQ_OK:
      case LORA_STATE_WAIT_LTIME_RESPONSE:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // 응답 대기 중 3초 간격
 8003a62:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003a66:	f011 fa41 	bl	8014eec <osDelay>
        break;
 8003a6a:	e073      	b.n	8003b54 <StartDefaultTask+0x3c8>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        // 주기적 전송 대기 중 - 로그 출력 없이 조용히 대기
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8003a6c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003a70:	f011 fa3c 	bl	8014eec <osDelay>
        break;
 8003a74:	e06e      	b.n	8003b54 <StartDefaultTask+0x3c8>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8003a76:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003a7a:	f011 fa37 	bl	8014eec <osDelay>
        break;
 8003a7e:	e069      	b.n	8003b54 <StartDefaultTask+0x3c8>
 8003a80:	0801aa1c 	.word	0x0801aa1c
 8003a84:	0801aa68 	.word	0x0801aa68
 8003a88:	0801aaa8 	.word	0x0801aaa8
 8003a8c:	0801aaf0 	.word	0x0801aaf0
 8003a90:	2000001c 	.word	0x2000001c
 8003a94:	431bde83 	.word	0x431bde83
 8003a98:	0801ab1c 	.word	0x0801ab1c
 8003a9c:	0801ab34 	.word	0x0801ab34
 8003aa0:	0801ab5c 	.word	0x0801ab5c
 8003aa4:	0801aba8 	.word	0x0801aba8
 8003aa8:	0801abe4 	.word	0x0801abe4
 8003aac:	0801ac20 	.word	0x0801ac20
 8003ab0:	20000014 	.word	0x20000014
 8003ab4:	0801ac54 	.word	0x0801ac54
 8003ab8:	0801ac84 	.word	0x0801ac84
 8003abc:	0801acb8 	.word	0x0801acb8
 8003ac0:	0801ace4 	.word	0x0801ace4
 8003ac4:	0801ad14 	.word	0x0801ad14
 8003ac8:	0801ad64 	.word	0x0801ad64
 8003acc:	0801ad9c 	.word	0x0801ad9c
 8003ad0:	0801add4 	.word	0x0801add4
 8003ad4:	0801ae0c 	.word	0x0801ae0c
 8003ad8:	0801ae44 	.word	0x0801ae44
 8003adc:	0801ae80 	.word	0x0801ae80
 8003ae0:	0801ae88 	.word	0x0801ae88
 8003ae4:	0801aeb4 	.word	0x0801aeb4
 8003ae8:	0801aee8 	.word	0x0801aee8
 8003aec:	0801af48 	.word	0x0801af48
 8003af0:	0801af50 	.word	0x0801af50
 8003af4:	0801af6c 	.word	0x0801af6c
 8003af8:	0801af9c 	.word	0x0801af9c
 8003afc:	0801afd4 	.word	0x0801afd4
 8003b00:	0801b01c 	.word	0x0801b01c
 8003b04:	0801b074 	.word	0x0801b074
 8003b08:	0801b09c 	.word	0x0801b09c
 8003b0c:	200023e8 	.word	0x200023e8
 8003b10:	200021e8 	.word	0x200021e8
 8003b14:	20000018 	.word	0x20000018
 8003b18:	0801b0cc 	.word	0x0801b0cc
 8003b1c:	0801b100 	.word	0x0801b100
 8003b20:	0801b128 	.word	0x0801b128
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8003b24:	7b3b      	ldrb	r3, [r7, #12]
 8003b26:	2b0d      	cmp	r3, #13
 8003b28:	d101      	bne.n	8003b2e <StartDefaultTask+0x3a2>
 8003b2a:	4b13      	ldr	r3, [pc, #76]	@ (8003b78 <StartDefaultTask+0x3ec>)
 8003b2c:	e000      	b.n	8003b30 <StartDefaultTask+0x3a4>
 8003b2e:	4b13      	ldr	r3, [pc, #76]	@ (8003b7c <StartDefaultTask+0x3f0>)
 8003b30:	461a      	mov	r2, r3
 8003b32:	4913      	ldr	r1, [pc, #76]	@ (8003b80 <StartDefaultTask+0x3f4>)
 8003b34:	2001      	movs	r0, #1
 8003b36:	f001 fdeb 	bl	8005710 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 8003b3a:	bf00      	nop
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8003b3c:	4911      	ldr	r1, [pc, #68]	@ (8003b84 <StartDefaultTask+0x3f8>)
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f001 fde6 	bl	8005710 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b48:	e005      	b.n	8003b56 <StartDefaultTask+0x3ca>
        osDelay(1000);
 8003b4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b4e:	f011 f9cd 	bl	8014eec <osDelay>
        break;
 8003b52:	bf00      	nop
  {
 8003b54:	e6ef      	b.n	8003936 <StartDefaultTask+0x1aa>
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 8003b56:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003b5a:	f011 f9c7 	bl	8014eec <osDelay>
    idle_counter++;
 8003b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b60:	3301      	adds	r3, #1
 8003b62:	64bb      	str	r3, [r7, #72]	@ 0x48
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8003b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4907      	ldr	r1, [pc, #28]	@ (8003b88 <StartDefaultTask+0x3fc>)
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f001 fdcf 	bl	8005710 <LOGGER_SendFormatted>
    osDelay(30000);
 8003b72:	bf00      	nop
 8003b74:	e7ef      	b.n	8003b56 <StartDefaultTask+0x3ca>
 8003b76:	bf00      	nop
 8003b78:	0801b16c 	.word	0x0801b16c
 8003b7c:	0801b174 	.word	0x0801b174
 8003b80:	0801b17c 	.word	0x0801b17c
 8003b84:	0801b1b4 	.word	0x0801b1b4
 8003b88:	0801b1dc 	.word	0x0801b1dc

08003b8c <StartSDLoggingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDLoggingTask */
void StartSDLoggingTask(void const * argument)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b0b2      	sub	sp, #200	@ 0xc8
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDLoggingTask */
  LOG_INFO("=== SD Logging Task Started ===");
 8003b94:	4971      	ldr	r1, [pc, #452]	@ (8003d5c <StartSDLoggingTask+0x1d0>)
 8003b96:	2001      	movs	r0, #1
 8003b98:	f001 fdba 	bl	8005710 <LOGGER_SendFormatted>
  
  // 시스템 안정화 대기 (다른 태스크들 먼저 시작)
  osDelay(3000);
 8003b9c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003ba0:	f011 f9a4 	bl	8014eec <osDelay>
  
  // SD 초기화 시도 (타임아웃 있는 안전한 방식)
  LOG_INFO("[SD_TASK] 🔄 Attempting SD card initialization...");
 8003ba4:	496e      	ldr	r1, [pc, #440]	@ (8003d60 <StartSDLoggingTask+0x1d4>)
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	f001 fdb2 	bl	8005710 <LOGGER_SendFormatted>
  
  // 단계별 안전한 SD 초기화
  int init_attempts = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const int MAX_INIT_ATTEMPTS = 3;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003bbe:	e054      	b.n	8003c6a <StartSDLoggingTask+0xde>
    LOG_INFO("[SD_TASK] Initialization attempt %d/%d", init_attempts + 1, MAX_INIT_ATTEMPTS);
 8003bc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003bca:	4966      	ldr	r1, [pc, #408]	@ (8003d64 <StartSDLoggingTask+0x1d8>)
 8003bcc:	2001      	movs	r0, #1
 8003bce:	f001 fd9f 	bl	8005710 <LOGGER_SendFormatted>
    
    // SDStorage_Init을 타임아웃과 함께 호출
    uint32_t init_start_time = HAL_GetTick();
 8003bd2:	f002 fbb1 	bl	8006338 <HAL_GetTick>
 8003bd6:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    const uint32_t INIT_TIMEOUT_MS = 10000;  // 10초 타임아웃
 8003bda:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003bde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    
    // TODO: 실제로는 별도 태스크에서 SDStorage_Init 호출하고 여기서는 폴링
    // 현재는 간단히 직접 호출하되 타임아웃 체크
    int init_result = SDStorage_Init();
 8003be2:	f7fd fbed 	bl	80013c0 <SDStorage_Init>
 8003be6:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    uint32_t init_duration = HAL_GetTick() - init_start_time;
 8003bea:	f002 fba5 	bl	8006338 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    
    LOG_INFO("[SD_TASK] Init attempt %d took %lu ms, result: %d", 
 8003bfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c0a:	4957      	ldr	r1, [pc, #348]	@ (8003d68 <StartSDLoggingTask+0x1dc>)
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f001 fd7f 	bl	8005710 <LOGGER_SendFormatted>
             init_attempts + 1, init_duration, init_result);
    
    if (init_result == SDSTORAGE_OK) {
 8003c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <StartSDLoggingTask+0xa4>
      LOG_INFO("[SD_TASK] ✅ SD initialization successful!");
 8003c1a:	4954      	ldr	r1, [pc, #336]	@ (8003d6c <StartSDLoggingTask+0x1e0>)
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f001 fd77 	bl	8005710 <LOGGER_SendFormatted>
      g_sd_initialization_result = SDSTORAGE_OK;
 8003c22:	4b53      	ldr	r3, [pc, #332]	@ (8003d70 <StartSDLoggingTask+0x1e4>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
      g_sd_logging_active = true;
 8003c28:	4b52      	ldr	r3, [pc, #328]	@ (8003d74 <StartSDLoggingTask+0x1e8>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
      break;
 8003c2e:	e022      	b.n	8003c76 <StartSDLoggingTask+0xea>
    } else {
      LOG_WARN("[SD_TASK] ⚠️ SD init attempt %d failed (code: %d)", 
 8003c30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c3a:	494f      	ldr	r1, [pc, #316]	@ (8003d78 <StartSDLoggingTask+0x1ec>)
 8003c3c:	2002      	movs	r0, #2
 8003c3e:	f001 fd67 	bl	8005710 <LOGGER_SendFormatted>
               init_attempts + 1, init_result);
      
      if (init_attempts < MAX_INIT_ATTEMPTS - 1) {
 8003c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c46:	3b01      	subs	r3, #1
 8003c48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	da07      	bge.n	8003c60 <StartSDLoggingTask+0xd4>
        LOG_INFO("[SD_TASK] Waiting 5 seconds before retry...");
 8003c50:	494a      	ldr	r1, [pc, #296]	@ (8003d7c <StartSDLoggingTask+0x1f0>)
 8003c52:	2001      	movs	r0, #1
 8003c54:	f001 fd5c 	bl	8005710 <LOGGER_SendFormatted>
        osDelay(5000);
 8003c58:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003c5c:	f011 f946 	bl	8014eec <osDelay>
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003c60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c64:	3301      	adds	r3, #1
 8003c66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c72:	429a      	cmp	r2, r3
 8003c74:	dba4      	blt.n	8003bc0 <StartSDLoggingTask+0x34>
      }
    }
  }
  
  if (!g_sd_logging_active) {
 8003c76:	4b3f      	ldr	r3, [pc, #252]	@ (8003d74 <StartSDLoggingTask+0x1e8>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	f083 0301 	eor.w	r3, r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00c      	beq.n	8003c9e <StartSDLoggingTask+0x112>
    LOG_ERROR("[SD_TASK] ❌ All SD initialization attempts failed");
 8003c84:	493e      	ldr	r1, [pc, #248]	@ (8003d80 <StartSDLoggingTask+0x1f4>)
 8003c86:	2003      	movs	r0, #3
 8003c88:	f001 fd42 	bl	8005710 <LOGGER_SendFormatted>
    LOG_INFO("[SD_TASK] Continuing with terminal-only logging");
 8003c8c:	493d      	ldr	r1, [pc, #244]	@ (8003d84 <StartSDLoggingTask+0x1f8>)
 8003c8e:	2001      	movs	r0, #1
 8003c90:	f001 fd3e 	bl	8005710 <LOGGER_SendFormatted>
    
    // SD 실패해도 태스크는 계속 실행 (나중에 재시도 가능)
    for(;;) {
      osDelay(60000);  // 1분마다 재시도 체크 (향후 확장)
 8003c94:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8003c98:	f011 f928 	bl	8014eec <osDelay>
 8003c9c:	e7fa      	b.n	8003c94 <StartSDLoggingTask+0x108>
    }
  }
  
  LOG_INFO("[SD_TASK] 🗂️ SD logging queue processing started");
 8003c9e:	493a      	ldr	r1, [pc, #232]	@ (8003d88 <StartSDLoggingTask+0x1fc>)
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f001 fd35 	bl	8005710 <LOGGER_SendFormatted>
  
  // SD 로그 큐 처리 메인 루프
  for(;;)
  {
    SDLogEntry_t log_entry;
    osEvent event = osMessageGet(sdLogQueueHandle, 1000);  // 1초 타임아웃
 8003ca6:	4b39      	ldr	r3, [pc, #228]	@ (8003d8c <StartSDLoggingTask+0x200>)
 8003ca8:	6819      	ldr	r1, [r3, #0]
 8003caa:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8003cae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f011 f996 	bl	8014fe4 <osMessageGet>
    
    if (event.status == osEventMessage) {
 8003cb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d12d      	bne.n	8003d1c <StartSDLoggingTask+0x190>
      // 큐에서 로그 엔트리 수신
      log_entry = *((SDLogEntry_t*)event.value.p);
 8003cc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cc4:	f107 0308 	add.w	r3, r7, #8
 8003cc8:	4611      	mov	r1, r2
 8003cca:	2288      	movs	r2, #136	@ 0x88
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f013 ffcc 	bl	8017c6a <memcpy>
      
      // SD에 안전하게 쓰기 (타임아웃 포함)
      uint32_t write_start = HAL_GetTick();
 8003cd2:	f002 fb31 	bl	8006338 <HAL_GetTick>
 8003cd6:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
      int write_result = SDStorage_WriteLog(log_entry.message, log_entry.length);
 8003cda:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003cde:	f107 0308 	add.w	r3, r7, #8
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fd fd89 	bl	80017fc <SDStorage_WriteLog>
 8003cea:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
      uint32_t write_duration = HAL_GetTick() - write_start;
 8003cee:	f002 fb23 	bl	8006338 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      
      if (write_result != SDSTORAGE_OK) {
 8003cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <StartSDLoggingTask+0x190>
        // SD 쓰기 실패 - 터미널에만 에러 출력 (무한루프 방지)
        printf("[SD_TASK] Write failed (duration: %lu ms, result: %d)\n", 
 8003d06:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003d0a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003d0e:	4820      	ldr	r0, [pc, #128]	@ (8003d90 <StartSDLoggingTask+0x204>)
 8003d10:	f013 fe00 	bl	8017914 <iprintf>
               write_duration, write_result);
        
        // SD 쓰기 실패 시 잠시 대기 후 재시도 여부 결정
        osDelay(1000);
 8003d14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d18:	f011 f8e8 	bl	8014eec <osDelay>
      }
    }
    
    // 주기적으로 SD 상태 체크 (1분마다)
    static uint32_t status_check_counter = 0;
    status_check_counter++;
 8003d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d94 <StartSDLoggingTask+0x208>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	4a1c      	ldr	r2, [pc, #112]	@ (8003d94 <StartSDLoggingTask+0x208>)
 8003d24:	6013      	str	r3, [r2, #0]
    if (status_check_counter % 60 == 0) {  // 60초마다
 8003d26:	4b1b      	ldr	r3, [pc, #108]	@ (8003d94 <StartSDLoggingTask+0x208>)
 8003d28:	6819      	ldr	r1, [r3, #0]
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d98 <StartSDLoggingTask+0x20c>)
 8003d2c:	fba3 2301 	umull	r2, r3, r3, r1
 8003d30:	095a      	lsrs	r2, r3, #5
 8003d32:	4613      	mov	r3, r2
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	1aca      	subs	r2, r1, r3
 8003d3c:	2a00      	cmp	r2, #0
 8003d3e:	d108      	bne.n	8003d52 <StartSDLoggingTask+0x1c6>
      if (SDStorage_IsReady()) {
 8003d40:	f7fd ffc4 	bl	8001ccc <SDStorage_IsReady>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d103      	bne.n	8003d52 <StartSDLoggingTask+0x1c6>
        // SD 상태 정상
      } else {
        // SD 상태 이상 - 재초기화 시도 (향후 확장)
        LOG_WARN("[SD_TASK] SD card appears disconnected - monitoring");
 8003d4a:	4914      	ldr	r1, [pc, #80]	@ (8003d9c <StartSDLoggingTask+0x210>)
 8003d4c:	2002      	movs	r0, #2
 8003d4e:	f001 fcdf 	bl	8005710 <LOGGER_SendFormatted>
      }
    }
    
    osDelay(50);  // CPU 부하 방지
 8003d52:	2032      	movs	r0, #50	@ 0x32
 8003d54:	f011 f8ca 	bl	8014eec <osDelay>
  {
 8003d58:	e7a5      	b.n	8003ca6 <StartSDLoggingTask+0x11a>
 8003d5a:	bf00      	nop
 8003d5c:	0801b20c 	.word	0x0801b20c
 8003d60:	0801b22c 	.word	0x0801b22c
 8003d64:	0801b260 	.word	0x0801b260
 8003d68:	0801b288 	.word	0x0801b288
 8003d6c:	0801b2bc 	.word	0x0801b2bc
 8003d70:	20000014 	.word	0x20000014
 8003d74:	200021e0 	.word	0x200021e0
 8003d78:	0801b2e8 	.word	0x0801b2e8
 8003d7c:	0801b320 	.word	0x0801b320
 8003d80:	0801b34c 	.word	0x0801b34c
 8003d84:	0801b380 	.word	0x0801b380
 8003d88:	0801b3b0 	.word	0x0801b3b0
 8003d8c:	200021dc 	.word	0x200021dc
 8003d90:	0801b3e8 	.word	0x0801b3e8
 8003d94:	2000245c 	.word	0x2000245c
 8003d98:	88888889 	.word	0x88888889
 8003d9c:	0801b420 	.word	0x0801b420

08003da0 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003da6:	af02      	add	r7, sp, #8
 8003da8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003dac:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003db0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8003db2:	499b      	ldr	r1, [pc, #620]	@ (8004020 <StartReceiveTask+0x280>)
 8003db4:	2001      	movs	r0, #1
 8003db6:	f001 fcab 	bl	8005710 <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8003dba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003dbe:	f011 f895 	bl	8014eec <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8003dc2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003dc6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8003dce:	f107 0208 	add.w	r2, r7, #8
 8003dd2:	f107 030c 	add.w	r3, r7, #12
 8003dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f001 fe40 	bl	8005a60 <UART_Receive>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8003de6:	4b8f      	ldr	r3, [pc, #572]	@ (8004024 <StartReceiveTask+0x284>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3301      	adds	r3, #1
 8003dec:	4a8d      	ldr	r2, [pc, #564]	@ (8004024 <StartReceiveTask+0x284>)
 8003dee:	6013      	str	r3, [r2, #0]
    if (debug_counter % 1200 == 0 && status != UART_STATUS_TIMEOUT) {  // 1분마다, 타임아웃 제외
 8003df0:	4b8c      	ldr	r3, [pc, #560]	@ (8004024 <StartReceiveTask+0x284>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b8c      	ldr	r3, [pc, #560]	@ (8004028 <StartReceiveTask+0x288>)
 8003df6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dfa:	09db      	lsrs	r3, r3, #7
 8003dfc:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d116      	bne.n	8003e38 <StartReceiveTask+0x98>
 8003e0a:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d012      	beq.n	8003e38 <StartReceiveTask+0x98>
      LOG_DEBUG("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 8003e12:	4b84      	ldr	r3, [pc, #528]	@ (8004024 <StartReceiveTask+0x284>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a84      	ldr	r2, [pc, #528]	@ (8004028 <StartReceiveTask+0x288>)
 8003e18:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1c:	09da      	lsrs	r2, r3, #7
 8003e1e:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8003e22:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003e26:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	497e      	ldr	r1, [pc, #504]	@ (800402c <StartReceiveTask+0x28c>)
 8003e32:	2000      	movs	r0, #0
 8003e34:	f001 fc6c 	bl	8005710 <LOGGER_SendFormatted>
               debug_counter / 1200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8003e38:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 80eb 	bne.w	8004018 <StartReceiveTask+0x278>
 8003e42:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003e46:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f340 80e3 	ble.w	8004018 <StartReceiveTask+0x278>
      // 수신 완료 - 간단한 수신 로그 + ResponseHandler 분석
      LOG_INFO("📥 RECV: '%.30s%s' (%d bytes)", 
 8003e52:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003e56:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b1e      	cmp	r3, #30
 8003e5e:	dd01      	ble.n	8003e64 <StartReceiveTask+0xc4>
 8003e60:	4973      	ldr	r1, [pc, #460]	@ (8004030 <StartReceiveTask+0x290>)
 8003e62:	e000      	b.n	8003e66 <StartReceiveTask+0xc6>
 8003e64:	4973      	ldr	r1, [pc, #460]	@ (8004034 <StartReceiveTask+0x294>)
 8003e66:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003e6a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f107 020c 	add.w	r2, r7, #12
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	460b      	mov	r3, r1
 8003e78:	496f      	ldr	r1, [pc, #444]	@ (8004038 <StartReceiveTask+0x298>)
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f001 fc48 	bl	8005710 <LOGGER_SendFormatted>
               local_buffer, 
               (local_bytes_received > 30) ? "..." : "", 
               local_bytes_received);
      
      // 기본적인 응답 타입 체크 (ResponseHandler에서 상세 로그 출력)
      if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003e80:	f107 030c 	add.w	r3, r7, #12
 8003e84:	496d      	ldr	r1, [pc, #436]	@ (800403c <StartReceiveTask+0x29c>)
 8003e86:	4618      	mov	r0, r3
 8003e88:	f013 fe56 	bl	8017b38 <strstr>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <StartReceiveTask+0x106>
        LOG_WARN("✅ JOIN CONFIRMED - Network joined successfully");
 8003e92:	496b      	ldr	r1, [pc, #428]	@ (8004040 <StartReceiveTask+0x2a0>)
 8003e94:	2002      	movs	r0, #2
 8003e96:	f001 fc3b 	bl	8005710 <LOGGER_SendFormatted>
        g_join_success_time = HAL_GetTick();  // JOIN 성공 시간 기록
 8003e9a:	f002 fa4d 	bl	8006338 <HAL_GetTick>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4a68      	ldr	r2, [pc, #416]	@ (8004044 <StartReceiveTask+0x2a4>)
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	e01a      	b.n	8003edc <StartReceiveTask+0x13c>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8003ea6:	f107 030c 	add.w	r3, r7, #12
 8003eaa:	4967      	ldr	r1, [pc, #412]	@ (8004048 <StartReceiveTask+0x2a8>)
 8003eac:	4618      	mov	r0, r3
 8003eae:	f013 fe43 	bl	8017b38 <strstr>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <StartReceiveTask+0x122>
        LOG_DEBUG("📡 LoRa module boot message (ignored)");
 8003eb8:	4964      	ldr	r1, [pc, #400]	@ (800404c <StartReceiveTask+0x2ac>)
 8003eba:	2000      	movs	r0, #0
 8003ebc:	f001 fc28 	bl	8005710 <LOGGER_SendFormatted>
 8003ec0:	e00c      	b.n	8003edc <StartReceiveTask+0x13c>
      } else if (ResponseHandler_IsTimeResponse(local_buffer)) {
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd f936 	bl	8001138 <ResponseHandler_IsTimeResponse>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <StartReceiveTask+0x13c>
        // 시간 응답 처리
        ResponseHandler_ParseTimeResponse(local_buffer);
 8003ed2:	f107 030c 	add.w	r3, r7, #12
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd f954 	bl	8001184 <ResponseHandler_ParseTimeResponse>
      }
      // 나머지 응답 분석은 아래 필터링 로직에서 한 번만 처리
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 8003edc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003ee0:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f107 030c 	add.w	r3, r7, #12
 8003eec:	4619      	mov	r1, r3
 8003eee:	4858      	ldr	r0, [pc, #352]	@ (8004050 <StartReceiveTask+0x2b0>)
 8003ef0:	f013 febb 	bl	8017c6a <memcpy>
      rx_bytes_received = local_bytes_received;
 8003ef4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003ef8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a55      	ldr	r2, [pc, #340]	@ (8004054 <StartReceiveTask+0x2b4>)
 8003f00:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc ffc5 	bl	8000e9c <is_response_ok>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <StartReceiveTask+0x180>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003f1e:	e04b      	b.n	8003fb8 <StartReceiveTask+0x218>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	4945      	ldr	r1, [pc, #276]	@ (800403c <StartReceiveTask+0x29c>)
 8003f26:	4618      	mov	r0, r3
 8003f28:	f013 fe06 	bl	8017b38 <strstr>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <StartReceiveTask+0x19a>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003f38:	e03e      	b.n	8003fb8 <StartReceiveTask+0x218>
      } else if (ResponseHandler_IsTimeResponse(local_buffer)) {
 8003f3a:	f107 030c 	add.w	r3, r7, #12
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fd f8fa 	bl	8001138 <ResponseHandler_IsTimeResponse>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <StartReceiveTask+0x1b2>
        // 시간 응답 - LoRa 상태 머신에도 전달해야 함 (상태 전환을 위해)
        is_lora_command_response = true;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003f50:	e032      	b.n	8003fb8 <StartReceiveTask+0x218>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 8003f52:	f107 030c 	add.w	r3, r7, #12
 8003f56:	4940      	ldr	r1, [pc, #256]	@ (8004058 <StartReceiveTask+0x2b8>)
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f013 fded 	bl	8017b38 <strstr>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <StartReceiveTask+0x1cc>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003f6a:	e025      	b.n	8003fb8 <StartReceiveTask+0x218>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8003f6c:	f107 030c 	add.w	r3, r7, #12
 8003f70:	4935      	ldr	r1, [pc, #212]	@ (8004048 <StartReceiveTask+0x2a8>)
 8003f72:	4618      	mov	r0, r3
 8003f74:	f013 fde0 	bl	8017b38 <strstr>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d108      	bne.n	8003f90 <StartReceiveTask+0x1f0>
 8003f7e:	f107 030c 	add.w	r3, r7, #12
 8003f82:	4936      	ldr	r1, [pc, #216]	@ (800405c <StartReceiveTask+0x2bc>)
 8003f84:	4618      	mov	r0, r3
 8003f86:	f013 fdd7 	bl	8017b38 <strstr>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <StartReceiveTask+0x1fa>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 8003f90:	4933      	ldr	r1, [pc, #204]	@ (8004060 <StartReceiveTask+0x2c0>)
 8003f92:	2000      	movs	r0, #0
 8003f94:	f001 fbbc 	bl	8005710 <LOGGER_SendFormatted>
 8003f98:	e00e      	b.n	8003fb8 <StartReceiveTask+0x218>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8003f9a:	f107 030c 	add.w	r3, r7, #12
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd f874 	bl	800108c <ResponseHandler_ParseSendResponse>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        if (response_type != RESPONSE_UNKNOWN) {
 8003faa:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d002      	beq.n	8003fb8 <StartReceiveTask+0x218>
          is_lora_command_response = true;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 8003fb8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01d      	beq.n	8003ffc <StartReceiveTask+0x25c>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8003fc0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003fc4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f107 030c 	add.w	r3, r7, #12
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4824      	ldr	r0, [pc, #144]	@ (8004064 <StartReceiveTask+0x2c4>)
 8003fd4:	f013 fe49 	bl	8017c6a <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 8003fd8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003fdc:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a20      	ldr	r2, [pc, #128]	@ (8004064 <StartReceiveTask+0x2c4>)
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8004068 <StartReceiveTask+0x2c8>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8003fee:	f107 030c 	add.w	r3, r7, #12
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	491d      	ldr	r1, [pc, #116]	@ (800406c <StartReceiveTask+0x2cc>)
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	f001 fb8a 	bl	8005710 <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 8003ffc:	f107 030c 	add.w	r3, r7, #12
 8004000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004004:	2100      	movs	r1, #0
 8004006:	4618      	mov	r0, r3
 8004008:	f013 fd6e 	bl	8017ae8 <memset>
      local_bytes_received = 0;
 800400c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004010:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8004018:	2032      	movs	r0, #50	@ 0x32
 800401a:	f010 ff67 	bl	8014eec <osDelay>
  {
 800401e:	e6d6      	b.n	8003dce <StartReceiveTask+0x2e>
 8004020:	0801b454 	.word	0x0801b454
 8004024:	20002460 	.word	0x20002460
 8004028:	1b4e81b5 	.word	0x1b4e81b5
 800402c:	0801b47c 	.word	0x0801b47c
 8004030:	0801b4b0 	.word	0x0801b4b0
 8004034:	0801b4b4 	.word	0x0801b4b4
 8004038:	0801b4b8 	.word	0x0801b4b8
 800403c:	0801b4d8 	.word	0x0801b4d8
 8004040:	0801b4e4 	.word	0x0801b4e4
 8004044:	2000244c 	.word	0x2000244c
 8004048:	0801b518 	.word	0x0801b518
 800404c:	0801b524 	.word	0x0801b524
 8004050:	200024c8 	.word	0x200024c8
 8004054:	200021e4 	.word	0x200021e4
 8004058:	0801b54c 	.word	0x0801b54c
 800405c:	0801b554 	.word	0x0801b554
 8004060:	0801b564 	.word	0x0801b564
 8004064:	200021e8 	.word	0x200021e8
 8004068:	200023e8 	.word	0x200023e8
 800406c:	0801b5a0 	.word	0x0801b5a0

08004070 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a04      	ldr	r2, [pc, #16]	@ (8004090 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8004082:	f002 f945 	bl	8006310 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40001000 	.word	0x40001000

08004094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004098:	b672      	cpsid	i
}
 800409a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <Error_Handler+0x8>

080040a0 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80040a6:	4b10      	ldr	r3, [pc, #64]	@ (80040e8 <MX_DMA_Init+0x48>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	4a0f      	ldr	r2, [pc, #60]	@ (80040e8 <MX_DMA_Init+0x48>)
 80040ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040b2:	4b0d      	ldr	r3, [pc, #52]	@ (80040e8 <MX_DMA_Init+0x48>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80040be:	2200      	movs	r2, #0
 80040c0:	2105      	movs	r1, #5
 80040c2:	2039      	movs	r0, #57	@ 0x39
 80040c4:	f002 fcb8 	bl	8006a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80040c8:	2039      	movs	r0, #57	@ 0x39
 80040ca:	f002 fcd1 	bl	8006a70 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80040ce:	2200      	movs	r2, #0
 80040d0:	2105      	movs	r1, #5
 80040d2:	2047      	movs	r0, #71	@ 0x47
 80040d4:	f002 fcb0 	bl	8006a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80040d8:	2047      	movs	r0, #71	@ 0x47
 80040da:	f002 fcc9 	bl	8006a70 <HAL_NVIC_EnableIRQ>
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40023800 	.word	0x40023800

080040ec <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  // DMA 이미 초기화되었는지 체크
  if (hdma_usart6_rx.Instance != NULL) {
 80040f2:	4b1e      	ldr	r3, [pc, #120]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d133      	bne.n	8004162 <MX_USART6_DMA_Init+0x76>
    return; // 이미 초기화됨
  }
  
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 80040fa:	4b1c      	ldr	r3, [pc, #112]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 80040fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004170 <MX_USART6_DMA_Init+0x84>)
 80040fe:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004100:	4b1a      	ldr	r3, [pc, #104]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 8004102:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004106:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004108:	4b18      	ldr	r3, [pc, #96]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800410e:	4b17      	ldr	r3, [pc, #92]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 8004110:	2200      	movs	r2, #0
 8004112:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004114:	4b15      	ldr	r3, [pc, #84]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 8004116:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800411a:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800411c:	4b13      	ldr	r3, [pc, #76]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 800411e:	2200      	movs	r2, #0
 8004120:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004122:	4b12      	ldr	r3, [pc, #72]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 8004128:	4b10      	ldr	r3, [pc, #64]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 800412a:	2200      	movs	r2, #0
 800412c:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800412e:	4b0f      	ldr	r3, [pc, #60]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 8004130:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004134:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 8004138:	2200      	movs	r2, #0
 800413a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  HAL_StatusTypeDef dma_result = HAL_DMA_Init(&hdma_usart6_rx);
 800413c:	480b      	ldr	r0, [pc, #44]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 800413e:	f002 fe11 	bl	8006d64 <HAL_DMA_Init>
 8004142:	4603      	mov	r3, r0
 8004144:	71fb      	strb	r3, [r7, #7]
  if (dma_result != HAL_OK)
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <MX_USART6_DMA_Init+0x68>
  {
    // 에러 처리하되 Error_Handler() 호출하지 않음 (시스템 중단 방지)
    hdma_usart6_rx.Instance = NULL; // 실패 표시
 800414c:	4b07      	ldr	r3, [pc, #28]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
    return;
 8004152:	e007      	b.n	8004164 <MX_USART6_DMA_Init+0x78>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8004154:	4b07      	ldr	r3, [pc, #28]	@ (8004174 <MX_USART6_DMA_Init+0x88>)
 8004156:	4a05      	ldr	r2, [pc, #20]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 8004158:	675a      	str	r2, [r3, #116]	@ 0x74
 800415a:	4b04      	ldr	r3, [pc, #16]	@ (800416c <MX_USART6_DMA_Init+0x80>)
 800415c:	4a05      	ldr	r2, [pc, #20]	@ (8004174 <MX_USART6_DMA_Init+0x88>)
 800415e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004160:	e000      	b.n	8004164 <MX_USART6_DMA_Init+0x78>
    return; // 이미 초기화됨
 8004162:	bf00      	nop
}
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	200023ec 	.word	0x200023ec
 8004170:	40026428 	.word	0x40026428
 8004174:	20002114 	.word	0x20002114

08004178 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	4b11      	ldr	r3, [pc, #68]	@ (80041c4 <HAL_MspInit+0x4c>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	4a10      	ldr	r2, [pc, #64]	@ (80041c4 <HAL_MspInit+0x4c>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004188:	6413      	str	r3, [r2, #64]	@ 0x40
 800418a:	4b0e      	ldr	r3, [pc, #56]	@ (80041c4 <HAL_MspInit+0x4c>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004196:	4b0b      	ldr	r3, [pc, #44]	@ (80041c4 <HAL_MspInit+0x4c>)
 8004198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419a:	4a0a      	ldr	r2, [pc, #40]	@ (80041c4 <HAL_MspInit+0x4c>)
 800419c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80041a2:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <HAL_MspInit+0x4c>)
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80041ae:	2200      	movs	r2, #0
 80041b0:	210f      	movs	r1, #15
 80041b2:	f06f 0001 	mvn.w	r0, #1
 80041b6:	f002 fc3f 	bl	8006a38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800

080041c8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	@ 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a21      	ldr	r2, [pc, #132]	@ (800426c <HAL_ADC_MspInit+0xa4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d13c      	bne.n	8004264 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80041ea:	4b21      	ldr	r3, [pc, #132]	@ (8004270 <HAL_ADC_MspInit+0xa8>)
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	4a20      	ldr	r2, [pc, #128]	@ (8004270 <HAL_ADC_MspInit+0xa8>)
 80041f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80041f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004270 <HAL_ADC_MspInit+0xa8>)
 80041f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004202:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <HAL_ADC_MspInit+0xa8>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	4a1a      	ldr	r2, [pc, #104]	@ (8004270 <HAL_ADC_MspInit+0xa8>)
 8004208:	f043 0320 	orr.w	r3, r3, #32
 800420c:	6313      	str	r3, [r2, #48]	@ 0x30
 800420e:	4b18      	ldr	r3, [pc, #96]	@ (8004270 <HAL_ADC_MspInit+0xa8>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800421a:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <HAL_ADC_MspInit+0xa8>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	4a14      	ldr	r2, [pc, #80]	@ (8004270 <HAL_ADC_MspInit+0xa8>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	6313      	str	r3, [r2, #48]	@ 0x30
 8004226:	4b12      	ldr	r3, [pc, #72]	@ (8004270 <HAL_ADC_MspInit+0xa8>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8004232:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8004236:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004238:	2303      	movs	r3, #3
 800423a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004240:	f107 0314 	add.w	r3, r7, #20
 8004244:	4619      	mov	r1, r3
 8004246:	480b      	ldr	r0, [pc, #44]	@ (8004274 <HAL_ADC_MspInit+0xac>)
 8004248:	f003 ff3a 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800424c:	2301      	movs	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004250:	2303      	movs	r3, #3
 8004252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8004258:	f107 0314 	add.w	r3, r7, #20
 800425c:	4619      	mov	r1, r3
 800425e:	4806      	ldr	r0, [pc, #24]	@ (8004278 <HAL_ADC_MspInit+0xb0>)
 8004260:	f003 ff2e 	bl	80080c0 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8004264:	bf00      	nop
 8004266:	3728      	adds	r7, #40	@ 0x28
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40012200 	.word	0x40012200
 8004270:	40023800 	.word	0x40023800
 8004274:	40021400 	.word	0x40021400
 8004278:	40020000 	.word	0x40020000

0800427c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a0a      	ldr	r2, [pc, #40]	@ (80042b4 <HAL_CRC_MspInit+0x38>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d10b      	bne.n	80042a6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800428e:	4b0a      	ldr	r3, [pc, #40]	@ (80042b8 <HAL_CRC_MspInit+0x3c>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004292:	4a09      	ldr	r2, [pc, #36]	@ (80042b8 <HAL_CRC_MspInit+0x3c>)
 8004294:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004298:	6313      	str	r3, [r2, #48]	@ 0x30
 800429a:	4b07      	ldr	r3, [pc, #28]	@ (80042b8 <HAL_CRC_MspInit+0x3c>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40023000 	.word	0x40023000
 80042b8:	40023800 	.word	0x40023800

080042bc <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08e      	sub	sp, #56	@ 0x38
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	60da      	str	r2, [r3, #12]
 80042d2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a50      	ldr	r2, [pc, #320]	@ (800441c <HAL_DCMI_MspInit+0x160>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	f040 809a 	bne.w	8004414 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80042e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 80042e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6353      	str	r3, [r2, #52]	@ 0x34
 80042ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 80042ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	623b      	str	r3, [r7, #32]
 80042f6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042f8:	4b49      	ldr	r3, [pc, #292]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 80042fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fc:	4a48      	ldr	r2, [pc, #288]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 80042fe:	f043 0310 	orr.w	r3, r3, #16
 8004302:	6313      	str	r3, [r2, #48]	@ 0x30
 8004304:	4b46      	ldr	r3, [pc, #280]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 8004306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004310:	4b43      	ldr	r3, [pc, #268]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 8004312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004314:	4a42      	ldr	r2, [pc, #264]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 8004316:	f043 0308 	orr.w	r3, r3, #8
 800431a:	6313      	str	r3, [r2, #48]	@ 0x30
 800431c:	4b40      	ldr	r3, [pc, #256]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004328:	4b3d      	ldr	r3, [pc, #244]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	4a3c      	ldr	r2, [pc, #240]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 800432e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004332:	6313      	str	r3, [r2, #48]	@ 0x30
 8004334:	4b3a      	ldr	r3, [pc, #232]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004340:	4b37      	ldr	r3, [pc, #220]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004344:	4a36      	ldr	r2, [pc, #216]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 8004346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800434a:	6313      	str	r3, [r2, #48]	@ 0x30
 800434c:	4b34      	ldr	r3, [pc, #208]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004358:	4b31      	ldr	r3, [pc, #196]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	4a30      	ldr	r2, [pc, #192]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	6313      	str	r3, [r2, #48]	@ 0x30
 8004364:	4b2e      	ldr	r3, [pc, #184]	@ (8004420 <HAL_DCMI_MspInit+0x164>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8004370:	2360      	movs	r3, #96	@ 0x60
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004374:	2302      	movs	r3, #2
 8004376:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437c:	2300      	movs	r3, #0
 800437e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004380:	230d      	movs	r3, #13
 8004382:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004388:	4619      	mov	r1, r3
 800438a:	4826      	ldr	r0, [pc, #152]	@ (8004424 <HAL_DCMI_MspInit+0x168>)
 800438c:	f003 fe98 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8004390:	2308      	movs	r3, #8
 8004392:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004394:	2302      	movs	r3, #2
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439c:	2300      	movs	r3, #0
 800439e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80043a0:	230d      	movs	r3, #13
 80043a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80043a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043a8:	4619      	mov	r1, r3
 80043aa:	481f      	ldr	r0, [pc, #124]	@ (8004428 <HAL_DCMI_MspInit+0x16c>)
 80043ac:	f003 fe88 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80043b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b6:	2302      	movs	r3, #2
 80043b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043be:	2300      	movs	r3, #0
 80043c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80043c2:	230d      	movs	r3, #13
 80043c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80043c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043ca:	4619      	mov	r1, r3
 80043cc:	4817      	ldr	r0, [pc, #92]	@ (800442c <HAL_DCMI_MspInit+0x170>)
 80043ce:	f003 fe77 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80043d2:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80043d6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d8:	2302      	movs	r3, #2
 80043da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e0:	2300      	movs	r3, #0
 80043e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80043e4:	230d      	movs	r3, #13
 80043e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80043e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043ec:	4619      	mov	r1, r3
 80043ee:	4810      	ldr	r0, [pc, #64]	@ (8004430 <HAL_DCMI_MspInit+0x174>)
 80043f0:	f003 fe66 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80043f4:	2350      	movs	r3, #80	@ 0x50
 80043f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f8:	2302      	movs	r3, #2
 80043fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004400:	2300      	movs	r3, #0
 8004402:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004404:	230d      	movs	r3, #13
 8004406:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004408:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800440c:	4619      	mov	r1, r3
 800440e:	4809      	ldr	r0, [pc, #36]	@ (8004434 <HAL_DCMI_MspInit+0x178>)
 8004410:	f003 fe56 	bl	80080c0 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8004414:	bf00      	nop
 8004416:	3738      	adds	r7, #56	@ 0x38
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	50050000 	.word	0x50050000
 8004420:	40023800 	.word	0x40023800
 8004424:	40021000 	.word	0x40021000
 8004428:	40020c00 	.word	0x40020c00
 800442c:	40021800 	.word	0x40021800
 8004430:	40021c00 	.word	0x40021c00
 8004434:	40020000 	.word	0x40020000

08004438 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a0d      	ldr	r2, [pc, #52]	@ (800447c <HAL_DMA2D_MspInit+0x44>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d113      	bne.n	8004472 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <HAL_DMA2D_MspInit+0x48>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444e:	4a0c      	ldr	r2, [pc, #48]	@ (8004480 <HAL_DMA2D_MspInit+0x48>)
 8004450:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004454:	6313      	str	r3, [r2, #48]	@ 0x30
 8004456:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <HAL_DMA2D_MspInit+0x48>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004462:	2200      	movs	r2, #0
 8004464:	2105      	movs	r1, #5
 8004466:	205a      	movs	r0, #90	@ 0x5a
 8004468:	f002 fae6 	bl	8006a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800446c:	205a      	movs	r0, #90	@ 0x5a
 800446e:	f002 faff 	bl	8006a70 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	4002b000 	.word	0x4002b000
 8004480:	40023800 	.word	0x40023800

08004484 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08e      	sub	sp, #56	@ 0x38
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	60da      	str	r2, [r3, #12]
 800449a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3f      	ldr	r2, [pc, #252]	@ (80045a0 <HAL_ETH_MspInit+0x11c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d178      	bne.n	8004598 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80044a6:	4b3f      	ldr	r3, [pc, #252]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	4a3e      	ldr	r2, [pc, #248]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 80044ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044b2:	4b3c      	ldr	r3, [pc, #240]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ba:	623b      	str	r3, [r7, #32]
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	4b39      	ldr	r3, [pc, #228]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	4a38      	ldr	r2, [pc, #224]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 80044c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ca:	4b36      	ldr	r3, [pc, #216]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	4b33      	ldr	r3, [pc, #204]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044da:	4a32      	ldr	r2, [pc, #200]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 80044dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044e2:	4b30      	ldr	r3, [pc, #192]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80044ee:	4b2d      	ldr	r3, [pc, #180]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	4a2c      	ldr	r2, [pc, #176]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 80044f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044fa:	4b2a      	ldr	r3, [pc, #168]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004506:	4b27      	ldr	r3, [pc, #156]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	4a26      	ldr	r2, [pc, #152]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 800450c:	f043 0304 	orr.w	r3, r3, #4
 8004510:	6313      	str	r3, [r2, #48]	@ 0x30
 8004512:	4b24      	ldr	r3, [pc, #144]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800451e:	4b21      	ldr	r3, [pc, #132]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	4a20      	ldr	r2, [pc, #128]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	6313      	str	r3, [r2, #48]	@ 0x30
 800452a:	4b1e      	ldr	r3, [pc, #120]	@ (80045a4 <HAL_ETH_MspInit+0x120>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8004536:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453c:	2302      	movs	r3, #2
 800453e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2300      	movs	r3, #0
 8004542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004544:	2303      	movs	r3, #3
 8004546:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004548:	230b      	movs	r3, #11
 800454a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800454c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004550:	4619      	mov	r1, r3
 8004552:	4815      	ldr	r0, [pc, #84]	@ (80045a8 <HAL_ETH_MspInit+0x124>)
 8004554:	f003 fdb4 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004558:	2332      	movs	r3, #50	@ 0x32
 800455a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455c:	2302      	movs	r3, #2
 800455e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004560:	2300      	movs	r3, #0
 8004562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004564:	2303      	movs	r3, #3
 8004566:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004568:	230b      	movs	r3, #11
 800456a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800456c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004570:	4619      	mov	r1, r3
 8004572:	480e      	ldr	r0, [pc, #56]	@ (80045ac <HAL_ETH_MspInit+0x128>)
 8004574:	f003 fda4 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004578:	2386      	movs	r3, #134	@ 0x86
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457c:	2302      	movs	r3, #2
 800457e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004580:	2300      	movs	r3, #0
 8004582:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004584:	2303      	movs	r3, #3
 8004586:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004588:	230b      	movs	r3, #11
 800458a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004590:	4619      	mov	r1, r3
 8004592:	4807      	ldr	r0, [pc, #28]	@ (80045b0 <HAL_ETH_MspInit+0x12c>)
 8004594:	f003 fd94 	bl	80080c0 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8004598:	bf00      	nop
 800459a:	3738      	adds	r7, #56	@ 0x38
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40028000 	.word	0x40028000
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40021800 	.word	0x40021800
 80045ac:	40020800 	.word	0x40020800
 80045b0:	40020000 	.word	0x40020000

080045b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b0ac      	sub	sp, #176	@ 0xb0
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	60da      	str	r2, [r3, #12]
 80045ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045cc:	f107 0318 	add.w	r3, r7, #24
 80045d0:	2284      	movs	r2, #132	@ 0x84
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f013 fa87 	bl	8017ae8 <memset>
  if(hi2c->Instance==I2C1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a44      	ldr	r2, [pc, #272]	@ (80046f0 <HAL_I2C_MspInit+0x13c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d13d      	bne.n	8004660 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80045e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80045ea:	2300      	movs	r3, #0
 80045ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045ee:	f107 0318 	add.w	r3, r7, #24
 80045f2:	4618      	mov	r0, r3
 80045f4:	f006 ff0c 	bl	800b410 <HAL_RCCEx_PeriphCLKConfig>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80045fe:	f7ff fd49 	bl	8004094 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004602:	4b3c      	ldr	r3, [pc, #240]	@ (80046f4 <HAL_I2C_MspInit+0x140>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004606:	4a3b      	ldr	r2, [pc, #236]	@ (80046f4 <HAL_I2C_MspInit+0x140>)
 8004608:	f043 0302 	orr.w	r3, r3, #2
 800460c:	6313      	str	r3, [r2, #48]	@ 0x30
 800460e:	4b39      	ldr	r3, [pc, #228]	@ (80046f4 <HAL_I2C_MspInit+0x140>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800461a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800461e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004622:	2312      	movs	r3, #18
 8004624:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004628:	2301      	movs	r3, #1
 800462a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462e:	2300      	movs	r3, #0
 8004630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004634:	2304      	movs	r3, #4
 8004636:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800463e:	4619      	mov	r1, r3
 8004640:	482d      	ldr	r0, [pc, #180]	@ (80046f8 <HAL_I2C_MspInit+0x144>)
 8004642:	f003 fd3d 	bl	80080c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004646:	4b2b      	ldr	r3, [pc, #172]	@ (80046f4 <HAL_I2C_MspInit+0x140>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	4a2a      	ldr	r2, [pc, #168]	@ (80046f4 <HAL_I2C_MspInit+0x140>)
 800464c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004650:	6413      	str	r3, [r2, #64]	@ 0x40
 8004652:	4b28      	ldr	r3, [pc, #160]	@ (80046f4 <HAL_I2C_MspInit+0x140>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800465e:	e042      	b.n	80046e6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a25      	ldr	r2, [pc, #148]	@ (80046fc <HAL_I2C_MspInit+0x148>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d13d      	bne.n	80046e6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800466a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800466e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004670:	2300      	movs	r3, #0
 8004672:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004676:	f107 0318 	add.w	r3, r7, #24
 800467a:	4618      	mov	r0, r3
 800467c:	f006 fec8 	bl	800b410 <HAL_RCCEx_PeriphCLKConfig>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8004686:	f7ff fd05 	bl	8004094 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800468a:	4b1a      	ldr	r3, [pc, #104]	@ (80046f4 <HAL_I2C_MspInit+0x140>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	4a19      	ldr	r2, [pc, #100]	@ (80046f4 <HAL_I2C_MspInit+0x140>)
 8004690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004694:	6313      	str	r3, [r2, #48]	@ 0x30
 8004696:	4b17      	ldr	r3, [pc, #92]	@ (80046f4 <HAL_I2C_MspInit+0x140>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80046a2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80046a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046aa:	2312      	movs	r3, #18
 80046ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b6:	2303      	movs	r3, #3
 80046b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80046bc:	2304      	movs	r3, #4
 80046be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80046c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80046c6:	4619      	mov	r1, r3
 80046c8:	480d      	ldr	r0, [pc, #52]	@ (8004700 <HAL_I2C_MspInit+0x14c>)
 80046ca:	f003 fcf9 	bl	80080c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80046ce:	4b09      	ldr	r3, [pc, #36]	@ (80046f4 <HAL_I2C_MspInit+0x140>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	4a08      	ldr	r2, [pc, #32]	@ (80046f4 <HAL_I2C_MspInit+0x140>)
 80046d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046da:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <HAL_I2C_MspInit+0x140>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	68bb      	ldr	r3, [r7, #8]
}
 80046e6:	bf00      	nop
 80046e8:	37b0      	adds	r7, #176	@ 0xb0
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40005400 	.word	0x40005400
 80046f4:	40023800 	.word	0x40023800
 80046f8:	40020400 	.word	0x40020400
 80046fc:	40005c00 	.word	0x40005c00
 8004700:	40021c00 	.word	0x40021c00

08004704 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08e      	sub	sp, #56	@ 0x38
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800470c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a55      	ldr	r2, [pc, #340]	@ (8004878 <HAL_LTDC_MspInit+0x174>)
 8004722:	4293      	cmp	r3, r2
 8004724:	f040 80a3 	bne.w	800486e <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004728:	4b54      	ldr	r3, [pc, #336]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 800472a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472c:	4a53      	ldr	r2, [pc, #332]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 800472e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004732:	6453      	str	r3, [r2, #68]	@ 0x44
 8004734:	4b51      	ldr	r3, [pc, #324]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 8004736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004738:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004740:	4b4e      	ldr	r3, [pc, #312]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004744:	4a4d      	ldr	r2, [pc, #308]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 8004746:	f043 0310 	orr.w	r3, r3, #16
 800474a:	6313      	str	r3, [r2, #48]	@ 0x30
 800474c:	4b4b      	ldr	r3, [pc, #300]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004758:	4b48      	ldr	r3, [pc, #288]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475c:	4a47      	ldr	r2, [pc, #284]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 800475e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004762:	6313      	str	r3, [r2, #48]	@ 0x30
 8004764:	4b45      	ldr	r3, [pc, #276]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 8004766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004770:	4b42      	ldr	r3, [pc, #264]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004774:	4a41      	ldr	r2, [pc, #260]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 8004776:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800477a:	6313      	str	r3, [r2, #48]	@ 0x30
 800477c:	4b3f      	ldr	r3, [pc, #252]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004788:	4b3c      	ldr	r3, [pc, #240]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478c:	4a3b      	ldr	r2, [pc, #236]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 800478e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004792:	6313      	str	r3, [r2, #48]	@ 0x30
 8004794:	4b39      	ldr	r3, [pc, #228]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 8004796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80047a0:	4b36      	ldr	r3, [pc, #216]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 80047a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a4:	4a35      	ldr	r2, [pc, #212]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 80047a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ac:	4b33      	ldr	r3, [pc, #204]	@ (800487c <HAL_LTDC_MspInit+0x178>)
 80047ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80047b8:	2310      	movs	r3, #16
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047bc:	2302      	movs	r3, #2
 80047be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c4:	2300      	movs	r3, #0
 80047c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047c8:	230e      	movs	r3, #14
 80047ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80047cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047d0:	4619      	mov	r1, r3
 80047d2:	482b      	ldr	r0, [pc, #172]	@ (8004880 <HAL_LTDC_MspInit+0x17c>)
 80047d4:	f003 fc74 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80047d8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047de:	2302      	movs	r3, #2
 80047e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e6:	2300      	movs	r3, #0
 80047e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047ea:	230e      	movs	r3, #14
 80047ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80047ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047f2:	4619      	mov	r1, r3
 80047f4:	4823      	ldr	r0, [pc, #140]	@ (8004884 <HAL_LTDC_MspInit+0x180>)
 80047f6:	f003 fc63 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80047fa:	23f7      	movs	r3, #247	@ 0xf7
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fe:	2302      	movs	r3, #2
 8004800:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	2300      	movs	r3, #0
 8004804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004806:	2300      	movs	r3, #0
 8004808:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800480a:	230e      	movs	r3, #14
 800480c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800480e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004812:	4619      	mov	r1, r3
 8004814:	481c      	ldr	r0, [pc, #112]	@ (8004888 <HAL_LTDC_MspInit+0x184>)
 8004816:	f003 fc53 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800481a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004820:	2302      	movs	r3, #2
 8004822:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004824:	2300      	movs	r3, #0
 8004826:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004828:	2300      	movs	r3, #0
 800482a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800482c:	2309      	movs	r3, #9
 800482e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004834:	4619      	mov	r1, r3
 8004836:	4815      	ldr	r0, [pc, #84]	@ (800488c <HAL_LTDC_MspInit+0x188>)
 8004838:	f003 fc42 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800483c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8004840:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004842:	2302      	movs	r3, #2
 8004844:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004846:	2300      	movs	r3, #0
 8004848:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484a:	2300      	movs	r3, #0
 800484c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800484e:	230e      	movs	r3, #14
 8004850:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004856:	4619      	mov	r1, r3
 8004858:	480d      	ldr	r0, [pc, #52]	@ (8004890 <HAL_LTDC_MspInit+0x18c>)
 800485a:	f003 fc31 	bl	80080c0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800485e:	2200      	movs	r2, #0
 8004860:	2105      	movs	r1, #5
 8004862:	2058      	movs	r0, #88	@ 0x58
 8004864:	f002 f8e8 	bl	8006a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004868:	2058      	movs	r0, #88	@ 0x58
 800486a:	f002 f901 	bl	8006a70 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800486e:	bf00      	nop
 8004870:	3738      	adds	r7, #56	@ 0x38
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40016800 	.word	0x40016800
 800487c:	40023800 	.word	0x40023800
 8004880:	40021000 	.word	0x40021000
 8004884:	40022400 	.word	0x40022400
 8004888:	40022800 	.word	0x40022800
 800488c:	40021800 	.word	0x40021800
 8004890:	40022000 	.word	0x40022000

08004894 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08c      	sub	sp, #48	@ 0x30
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800489c:	f107 031c 	add.w	r3, r7, #28
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	609a      	str	r2, [r3, #8]
 80048a8:	60da      	str	r2, [r3, #12]
 80048aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a3b      	ldr	r2, [pc, #236]	@ (80049a0 <HAL_QSPI_MspInit+0x10c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d170      	bne.n	8004998 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80048b6:	4b3b      	ldr	r3, [pc, #236]	@ (80049a4 <HAL_QSPI_MspInit+0x110>)
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	4a3a      	ldr	r2, [pc, #232]	@ (80049a4 <HAL_QSPI_MspInit+0x110>)
 80048bc:	f043 0302 	orr.w	r3, r3, #2
 80048c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80048c2:	4b38      	ldr	r3, [pc, #224]	@ (80049a4 <HAL_QSPI_MspInit+0x110>)
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	61bb      	str	r3, [r7, #24]
 80048cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80048ce:	4b35      	ldr	r3, [pc, #212]	@ (80049a4 <HAL_QSPI_MspInit+0x110>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d2:	4a34      	ldr	r2, [pc, #208]	@ (80049a4 <HAL_QSPI_MspInit+0x110>)
 80048d4:	f043 0310 	orr.w	r3, r3, #16
 80048d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80048da:	4b32      	ldr	r3, [pc, #200]	@ (80049a4 <HAL_QSPI_MspInit+0x110>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048e6:	4b2f      	ldr	r3, [pc, #188]	@ (80049a4 <HAL_QSPI_MspInit+0x110>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	4a2e      	ldr	r2, [pc, #184]	@ (80049a4 <HAL_QSPI_MspInit+0x110>)
 80048ec:	f043 0302 	orr.w	r3, r3, #2
 80048f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80048f2:	4b2c      	ldr	r3, [pc, #176]	@ (80049a4 <HAL_QSPI_MspInit+0x110>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048fe:	4b29      	ldr	r3, [pc, #164]	@ (80049a4 <HAL_QSPI_MspInit+0x110>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	4a28      	ldr	r2, [pc, #160]	@ (80049a4 <HAL_QSPI_MspInit+0x110>)
 8004904:	f043 0308 	orr.w	r3, r3, #8
 8004908:	6313      	str	r3, [r2, #48]	@ 0x30
 800490a:	4b26      	ldr	r3, [pc, #152]	@ (80049a4 <HAL_QSPI_MspInit+0x110>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8004916:	2304      	movs	r3, #4
 8004918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491a:	2302      	movs	r3, #2
 800491c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004922:	2303      	movs	r3, #3
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004926:	2309      	movs	r3, #9
 8004928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800492a:	f107 031c 	add.w	r3, r7, #28
 800492e:	4619      	mov	r1, r3
 8004930:	481d      	ldr	r0, [pc, #116]	@ (80049a8 <HAL_QSPI_MspInit+0x114>)
 8004932:	f003 fbc5 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8004936:	2340      	movs	r3, #64	@ 0x40
 8004938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493a:	2302      	movs	r3, #2
 800493c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493e:	2300      	movs	r3, #0
 8004940:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004942:	2303      	movs	r3, #3
 8004944:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004946:	230a      	movs	r3, #10
 8004948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800494a:	f107 031c 	add.w	r3, r7, #28
 800494e:	4619      	mov	r1, r3
 8004950:	4816      	ldr	r0, [pc, #88]	@ (80049ac <HAL_QSPI_MspInit+0x118>)
 8004952:	f003 fbb5 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004956:	2304      	movs	r3, #4
 8004958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800495a:	2302      	movs	r3, #2
 800495c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495e:	2300      	movs	r3, #0
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004962:	2303      	movs	r3, #3
 8004964:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004966:	2309      	movs	r3, #9
 8004968:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800496a:	f107 031c 	add.w	r3, r7, #28
 800496e:	4619      	mov	r1, r3
 8004970:	480e      	ldr	r0, [pc, #56]	@ (80049ac <HAL_QSPI_MspInit+0x118>)
 8004972:	f003 fba5 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8004976:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800497a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497c:	2302      	movs	r3, #2
 800497e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004980:	2300      	movs	r3, #0
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004984:	2303      	movs	r3, #3
 8004986:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004988:	2309      	movs	r3, #9
 800498a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800498c:	f107 031c 	add.w	r3, r7, #28
 8004990:	4619      	mov	r1, r3
 8004992:	4807      	ldr	r0, [pc, #28]	@ (80049b0 <HAL_QSPI_MspInit+0x11c>)
 8004994:	f003 fb94 	bl	80080c0 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8004998:	bf00      	nop
 800499a:	3730      	adds	r7, #48	@ 0x30
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	a0001000 	.word	0xa0001000
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40020400 	.word	0x40020400
 80049b0:	40020c00 	.word	0x40020c00

080049b4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b0a4      	sub	sp, #144	@ 0x90
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049bc:	f107 030c 	add.w	r3, r7, #12
 80049c0:	2284      	movs	r2, #132	@ 0x84
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f013 f88f 	bl	8017ae8 <memset>
  if(hrtc->Instance==RTC)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004a08 <HAL_RTC_MspInit+0x54>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d114      	bne.n	80049fe <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80049d4:	2320      	movs	r3, #32
 80049d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80049d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80049dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049de:	f107 030c 	add.w	r3, r7, #12
 80049e2:	4618      	mov	r0, r3
 80049e4:	f006 fd14 	bl	800b410 <HAL_RCCEx_PeriphCLKConfig>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80049ee:	f7ff fb51 	bl	8004094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80049f2:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <HAL_RTC_MspInit+0x58>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f6:	4a05      	ldr	r2, [pc, #20]	@ (8004a0c <HAL_RTC_MspInit+0x58>)
 80049f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049fc:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80049fe:	bf00      	nop
 8004a00:	3790      	adds	r7, #144	@ 0x90
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40002800 	.word	0x40002800
 8004a0c:	40023800 	.word	0x40023800

08004a10 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	@ 0x28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a25      	ldr	r2, [pc, #148]	@ (8004ac4 <HAL_SD_MspInit+0xb4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d144      	bne.n	8004abc <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004a32:	4b25      	ldr	r3, [pc, #148]	@ (8004ac8 <HAL_SD_MspInit+0xb8>)
 8004a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a36:	4a24      	ldr	r2, [pc, #144]	@ (8004ac8 <HAL_SD_MspInit+0xb8>)
 8004a38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ac8 <HAL_SD_MspInit+0xb8>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ac8 <HAL_SD_MspInit+0xb8>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac8 <HAL_SD_MspInit+0xb8>)
 8004a50:	f043 0304 	orr.w	r3, r3, #4
 8004a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a56:	4b1c      	ldr	r3, [pc, #112]	@ (8004ac8 <HAL_SD_MspInit+0xb8>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a62:	4b19      	ldr	r3, [pc, #100]	@ (8004ac8 <HAL_SD_MspInit+0xb8>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	4a18      	ldr	r2, [pc, #96]	@ (8004ac8 <HAL_SD_MspInit+0xb8>)
 8004a68:	f043 0308 	orr.w	r3, r3, #8
 8004a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a6e:	4b16      	ldr	r3, [pc, #88]	@ (8004ac8 <HAL_SD_MspInit+0xb8>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8004a7a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8004a7e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a90:	f107 0314 	add.w	r3, r7, #20
 8004a94:	4619      	mov	r1, r3
 8004a96:	480d      	ldr	r0, [pc, #52]	@ (8004acc <HAL_SD_MspInit+0xbc>)
 8004a98:	f003 fb12 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004aac:	230c      	movs	r3, #12
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8004ab0:	f107 0314 	add.w	r3, r7, #20
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4806      	ldr	r0, [pc, #24]	@ (8004ad0 <HAL_SD_MspInit+0xc0>)
 8004ab8:	f003 fb02 	bl	80080c0 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004abc:	bf00      	nop
 8004abe:	3728      	adds	r7, #40	@ 0x28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40020800 	.word	0x40020800
 8004ad0:	40020c00 	.word	0x40020c00

08004ad4 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b0aa      	sub	sp, #168	@ 0xa8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004adc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	609a      	str	r2, [r3, #8]
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004aec:	f107 0310 	add.w	r3, r7, #16
 8004af0:	2284      	movs	r2, #132	@ 0x84
 8004af2:	2100      	movs	r1, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f012 fff7 	bl	8017ae8 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8004b02:	d143      	bne.n	8004b8c <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8004b04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b08:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8004b0a:	2364      	movs	r3, #100	@ 0x64
 8004b0c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004b12:	2302      	movs	r3, #2
 8004b14:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8004b16:	2302      	movs	r3, #2
 8004b18:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b1e:	f107 0310 	add.w	r3, r7, #16
 8004b22:	4618      	mov	r0, r3
 8004b24:	f006 fc74 	bl	800b410 <HAL_RCCEx_PeriphCLKConfig>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8004b2e:	f7ff fab1 	bl	8004094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8004b32:	4b18      	ldr	r3, [pc, #96]	@ (8004b94 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	4a17      	ldr	r2, [pc, #92]	@ (8004b94 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b3e:	4b15      	ldr	r3, [pc, #84]	@ (8004b94 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b4a:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4e:	4a11      	ldr	r2, [pc, #68]	@ (8004b94 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b50:	f043 0308 	orr.w	r3, r3, #8
 8004b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b56:	4b0f      	ldr	r3, [pc, #60]	@ (8004b94 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004b62:	2380      	movs	r3, #128	@ 0x80
 8004b64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004b80:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004b84:	4619      	mov	r1, r3
 8004b86:	4804      	ldr	r0, [pc, #16]	@ (8004b98 <HAL_SPDIFRX_MspInit+0xc4>)
 8004b88:	f003 fa9a 	bl	80080c0 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8004b8c:	bf00      	nop
 8004b8e:	37a8      	adds	r7, #168	@ 0xa8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40020c00 	.word	0x40020c00

08004b9c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08a      	sub	sp, #40	@ 0x28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba4:	f107 0314 	add.w	r3, r7, #20
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	605a      	str	r2, [r3, #4]
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	60da      	str	r2, [r3, #12]
 8004bb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a25      	ldr	r2, [pc, #148]	@ (8004c50 <HAL_SPI_MspInit+0xb4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d144      	bne.n	8004c48 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004bbe:	4b25      	ldr	r3, [pc, #148]	@ (8004c54 <HAL_SPI_MspInit+0xb8>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	4a24      	ldr	r2, [pc, #144]	@ (8004c54 <HAL_SPI_MspInit+0xb8>)
 8004bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bca:	4b22      	ldr	r3, [pc, #136]	@ (8004c54 <HAL_SPI_MspInit+0xb8>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c54 <HAL_SPI_MspInit+0xb8>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	4a1e      	ldr	r2, [pc, #120]	@ (8004c54 <HAL_SPI_MspInit+0xb8>)
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004be2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c54 <HAL_SPI_MspInit+0xb8>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bee:	4b19      	ldr	r3, [pc, #100]	@ (8004c54 <HAL_SPI_MspInit+0xb8>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf2:	4a18      	ldr	r2, [pc, #96]	@ (8004c54 <HAL_SPI_MspInit+0xb8>)
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bfa:	4b16      	ldr	r3, [pc, #88]	@ (8004c54 <HAL_SPI_MspInit+0xb8>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004c06:	2302      	movs	r3, #2
 8004c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c12:	2300      	movs	r3, #0
 8004c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c16:	2305      	movs	r3, #5
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004c1a:	f107 0314 	add.w	r3, r7, #20
 8004c1e:	4619      	mov	r1, r3
 8004c20:	480d      	ldr	r0, [pc, #52]	@ (8004c58 <HAL_SPI_MspInit+0xbc>)
 8004c22:	f003 fa4d 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004c26:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c34:	2300      	movs	r3, #0
 8004c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c38:	2305      	movs	r3, #5
 8004c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	4619      	mov	r1, r3
 8004c42:	4806      	ldr	r0, [pc, #24]	@ (8004c5c <HAL_SPI_MspInit+0xc0>)
 8004c44:	f003 fa3c 	bl	80080c0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004c48:	bf00      	nop
 8004c4a:	3728      	adds	r7, #40	@ 0x28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40003800 	.word	0x40003800
 8004c54:	40023800 	.word	0x40023800
 8004c58:	40022000 	.word	0x40022000
 8004c5c:	40020400 	.word	0x40020400

08004c60 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	@ 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004d28 <HAL_TIM_Base_MspInit+0xc8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10c      	bne.n	8004c8c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c72:	4b2e      	ldr	r3, [pc, #184]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c76:	4a2d      	ldr	r2, [pc, #180]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004c8a:	e046      	b.n	8004d1a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c94:	d10c      	bne.n	8004cb0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c96:	4b25      	ldr	r3, [pc, #148]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	4a24      	ldr	r2, [pc, #144]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ca2:	4b22      	ldr	r3, [pc, #136]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	69bb      	ldr	r3, [r7, #24]
}
 8004cae:	e034      	b.n	8004d1a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d30 <HAL_TIM_Base_MspInit+0xd0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cba:	4b1c      	ldr	r3, [pc, #112]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cc6:	4b19      	ldr	r3, [pc, #100]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	697b      	ldr	r3, [r7, #20]
}
 8004cd2:	e022      	b.n	8004d1a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a16      	ldr	r2, [pc, #88]	@ (8004d34 <HAL_TIM_Base_MspInit+0xd4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004cde:	4b13      	ldr	r3, [pc, #76]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	4a12      	ldr	r2, [pc, #72]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004ce4:	f043 0308 	orr.w	r3, r3, #8
 8004ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cea:	4b10      	ldr	r3, [pc, #64]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	693b      	ldr	r3, [r7, #16]
}
 8004cf6:	e010      	b.n	8004d1a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a0e      	ldr	r2, [pc, #56]	@ (8004d38 <HAL_TIM_Base_MspInit+0xd8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d10b      	bne.n	8004d1a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d02:	4b0a      	ldr	r3, [pc, #40]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d06:	4a09      	ldr	r2, [pc, #36]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004d08:	f043 0302 	orr.w	r3, r3, #2
 8004d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d0e:	4b07      	ldr	r3, [pc, #28]	@ (8004d2c <HAL_TIM_Base_MspInit+0xcc>)
 8004d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
}
 8004d1a:	bf00      	nop
 8004d1c:	3724      	adds	r7, #36	@ 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40010000 	.word	0x40010000
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40010400 	.word	0x40010400

08004d3c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a0a      	ldr	r2, [pc, #40]	@ (8004d74 <HAL_TIM_PWM_MspInit+0x38>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d10b      	bne.n	8004d66 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d78 <HAL_TIM_PWM_MspInit+0x3c>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	4a09      	ldr	r2, [pc, #36]	@ (8004d78 <HAL_TIM_PWM_MspInit+0x3c>)
 8004d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d5a:	4b07      	ldr	r3, [pc, #28]	@ (8004d78 <HAL_TIM_PWM_MspInit+0x3c>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40001800 	.word	0x40001800
 8004d78:	40023800 	.word	0x40023800

08004d7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	@ 0x30
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d84:	f107 031c 	add.w	r3, r7, #28
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a56      	ldr	r2, [pc, #344]	@ (8004ef4 <HAL_TIM_MspPostInit+0x178>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d11d      	bne.n	8004dda <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d9e:	4b56      	ldr	r3, [pc, #344]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	4a55      	ldr	r2, [pc, #340]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004daa:	4b53      	ldr	r3, [pc, #332]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004db6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004dcc:	f107 031c 	add.w	r3, r7, #28
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	484a      	ldr	r0, [pc, #296]	@ (8004efc <HAL_TIM_MspPostInit+0x180>)
 8004dd4:	f003 f974 	bl	80080c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004dd8:	e087      	b.n	8004eea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de2:	d11d      	bne.n	8004e20 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004de4:	4b44      	ldr	r3, [pc, #272]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de8:	4a43      	ldr	r2, [pc, #268]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	6313      	str	r3, [r2, #48]	@ 0x30
 8004df0:	4b41      	ldr	r3, [pc, #260]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004dfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e02:	2302      	movs	r3, #2
 8004e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004e12:	f107 031c 	add.w	r3, r7, #28
 8004e16:	4619      	mov	r1, r3
 8004e18:	4838      	ldr	r0, [pc, #224]	@ (8004efc <HAL_TIM_MspPostInit+0x180>)
 8004e1a:	f003 f951 	bl	80080c0 <HAL_GPIO_Init>
}
 8004e1e:	e064      	b.n	8004eea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a36      	ldr	r2, [pc, #216]	@ (8004f00 <HAL_TIM_MspPostInit+0x184>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d11c      	bne.n	8004e64 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e2a:	4b33      	ldr	r3, [pc, #204]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2e:	4a32      	ldr	r2, [pc, #200]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004e30:	f043 0302 	orr.w	r3, r3, #2
 8004e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e36:	4b30      	ldr	r3, [pc, #192]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004e42:	2310      	movs	r3, #16
 8004e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e46:	2302      	movs	r3, #2
 8004e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e52:	2302      	movs	r3, #2
 8004e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004e56:	f107 031c 	add.w	r3, r7, #28
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4829      	ldr	r0, [pc, #164]	@ (8004f04 <HAL_TIM_MspPostInit+0x188>)
 8004e5e:	f003 f92f 	bl	80080c0 <HAL_GPIO_Init>
}
 8004e62:	e042      	b.n	8004eea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a27      	ldr	r2, [pc, #156]	@ (8004f08 <HAL_TIM_MspPostInit+0x18c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d11c      	bne.n	8004ea8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004e6e:	4b22      	ldr	r3, [pc, #136]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e72:	4a21      	ldr	r2, [pc, #132]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004e86:	2301      	movs	r3, #1
 8004e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e92:	2300      	movs	r3, #0
 8004e94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004e96:	2302      	movs	r3, #2
 8004e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004e9a:	f107 031c 	add.w	r3, r7, #28
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	481a      	ldr	r0, [pc, #104]	@ (8004f0c <HAL_TIM_MspPostInit+0x190>)
 8004ea2:	f003 f90d 	bl	80080c0 <HAL_GPIO_Init>
}
 8004ea6:	e020      	b.n	8004eea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a18      	ldr	r2, [pc, #96]	@ (8004f10 <HAL_TIM_MspPostInit+0x194>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d11b      	bne.n	8004eea <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004eb2:	4b11      	ldr	r3, [pc, #68]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	4a10      	ldr	r2, [pc, #64]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef8 <HAL_TIM_MspPostInit+0x17c>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec6:	60bb      	str	r3, [r7, #8]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004eca:	2340      	movs	r3, #64	@ 0x40
 8004ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004eda:	2309      	movs	r3, #9
 8004edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004ede:	f107 031c 	add.w	r3, r7, #28
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	480b      	ldr	r0, [pc, #44]	@ (8004f14 <HAL_TIM_MspPostInit+0x198>)
 8004ee6:	f003 f8eb 	bl	80080c0 <HAL_GPIO_Init>
}
 8004eea:	bf00      	nop
 8004eec:	3730      	adds	r7, #48	@ 0x30
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	40020000 	.word	0x40020000
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40020400 	.word	0x40020400
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40022000 	.word	0x40022000
 8004f10:	40001800 	.word	0x40001800
 8004f14:	40021c00 	.word	0x40021c00

08004f18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b0ae      	sub	sp, #184	@ 0xb8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f30:	f107 0320 	add.w	r3, r7, #32
 8004f34:	2284      	movs	r2, #132	@ 0x84
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f012 fdd5 	bl	8017ae8 <memset>
  if(huart->Instance==USART1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a53      	ldr	r2, [pc, #332]	@ (8005090 <HAL_UART_MspInit+0x178>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d15d      	bne.n	8005004 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004f48:	2340      	movs	r3, #64	@ 0x40
 8004f4a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f50:	f107 0320 	add.w	r3, r7, #32
 8004f54:	4618      	mov	r0, r3
 8004f56:	f006 fa5b 	bl	800b410 <HAL_RCCEx_PeriphCLKConfig>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004f60:	f7ff f898 	bl	8004094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f64:	4b4b      	ldr	r3, [pc, #300]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 8004f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f68:	4a4a      	ldr	r2, [pc, #296]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 8004f6a:	f043 0310 	orr.w	r3, r3, #16
 8004f6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f70:	4b48      	ldr	r3, [pc, #288]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 8004f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f7c:	4b45      	ldr	r3, [pc, #276]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	4a44      	ldr	r2, [pc, #272]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 8004f82:	f043 0302 	orr.w	r3, r3, #2
 8004f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f88:	4b42      	ldr	r3, [pc, #264]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f94:	4b3f      	ldr	r3, [pc, #252]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 8004f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f98:	4a3e      	ldr	r2, [pc, #248]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fc4:	2307      	movs	r3, #7
 8004fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004fca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4831      	ldr	r0, [pc, #196]	@ (8005098 <HAL_UART_MspInit+0x180>)
 8004fd2:	f003 f875 	bl	80080c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fea:	2300      	movs	r3, #0
 8004fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ff0:	2307      	movs	r3, #7
 8004ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004ff6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4827      	ldr	r0, [pc, #156]	@ (800509c <HAL_UART_MspInit+0x184>)
 8004ffe:	f003 f85f 	bl	80080c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8005002:	e040      	b.n	8005086 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a25      	ldr	r2, [pc, #148]	@ (80050a0 <HAL_UART_MspInit+0x188>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d13b      	bne.n	8005086 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800500e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005012:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005014:	2300      	movs	r3, #0
 8005016:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005018:	f107 0320 	add.w	r3, r7, #32
 800501c:	4618      	mov	r0, r3
 800501e:	f006 f9f7 	bl	800b410 <HAL_RCCEx_PeriphCLKConfig>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8005028:	f7ff f834 	bl	8004094 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800502c:	4b19      	ldr	r3, [pc, #100]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 800502e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005030:	4a18      	ldr	r2, [pc, #96]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 8005032:	f043 0320 	orr.w	r3, r3, #32
 8005036:	6453      	str	r3, [r2, #68]	@ 0x44
 8005038:	4b16      	ldr	r3, [pc, #88]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 800503a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005044:	4b13      	ldr	r3, [pc, #76]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 8005046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005048:	4a12      	ldr	r2, [pc, #72]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 800504a:	f043 0304 	orr.w	r3, r3, #4
 800504e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005050:	4b10      	ldr	r3, [pc, #64]	@ (8005094 <HAL_UART_MspInit+0x17c>)
 8005052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800505c:	23c0      	movs	r3, #192	@ 0xc0
 800505e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005062:	2302      	movs	r3, #2
 8005064:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005068:	2300      	movs	r3, #0
 800506a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800506e:	2303      	movs	r3, #3
 8005070:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005074:	2308      	movs	r3, #8
 8005076:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800507a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800507e:	4619      	mov	r1, r3
 8005080:	4808      	ldr	r0, [pc, #32]	@ (80050a4 <HAL_UART_MspInit+0x18c>)
 8005082:	f003 f81d 	bl	80080c0 <HAL_GPIO_Init>
}
 8005086:	bf00      	nop
 8005088:	37b8      	adds	r7, #184	@ 0xb8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40011000 	.word	0x40011000
 8005094:	40023800 	.word	0x40023800
 8005098:	40020400 	.word	0x40020400
 800509c:	40020000 	.word	0x40020000
 80050a0:	40011400 	.word	0x40011400
 80050a4:	40020800 	.word	0x40020800

080050a8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80050ae:	1d3b      	adds	r3, r7, #4
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	609a      	str	r2, [r3, #8]
 80050b8:	60da      	str	r2, [r3, #12]
 80050ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80050bc:	4b3a      	ldr	r3, [pc, #232]	@ (80051a8 <HAL_FMC_MspInit+0x100>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d16d      	bne.n	80051a0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80050c4:	4b38      	ldr	r3, [pc, #224]	@ (80051a8 <HAL_FMC_MspInit+0x100>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80050ca:	4b38      	ldr	r3, [pc, #224]	@ (80051ac <HAL_FMC_MspInit+0x104>)
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	4a37      	ldr	r2, [pc, #220]	@ (80051ac <HAL_FMC_MspInit+0x104>)
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80050d6:	4b35      	ldr	r3, [pc, #212]	@ (80051ac <HAL_FMC_MspInit+0x104>)
 80050d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80050e2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80050e6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e8:	2302      	movs	r3, #2
 80050ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050f0:	2303      	movs	r3, #3
 80050f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050f4:	230c      	movs	r3, #12
 80050f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050f8:	1d3b      	adds	r3, r7, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	482c      	ldr	r0, [pc, #176]	@ (80051b0 <HAL_FMC_MspInit+0x108>)
 80050fe:	f002 ffdf 	bl	80080c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8005102:	f248 1333 	movw	r3, #33075	@ 0x8133
 8005106:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005108:	2302      	movs	r3, #2
 800510a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005110:	2303      	movs	r3, #3
 8005112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005114:	230c      	movs	r3, #12
 8005116:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005118:	1d3b      	adds	r3, r7, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4825      	ldr	r0, [pc, #148]	@ (80051b4 <HAL_FMC_MspInit+0x10c>)
 800511e:	f002 ffcf 	bl	80080c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8005122:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005126:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005128:	2302      	movs	r3, #2
 800512a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005130:	2303      	movs	r3, #3
 8005132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005134:	230c      	movs	r3, #12
 8005136:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005138:	1d3b      	adds	r3, r7, #4
 800513a:	4619      	mov	r1, r3
 800513c:	481e      	ldr	r0, [pc, #120]	@ (80051b8 <HAL_FMC_MspInit+0x110>)
 800513e:	f002 ffbf 	bl	80080c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8005142:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8005146:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005148:	2302      	movs	r3, #2
 800514a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005150:	2303      	movs	r3, #3
 8005152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005154:	230c      	movs	r3, #12
 8005156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005158:	1d3b      	adds	r3, r7, #4
 800515a:	4619      	mov	r1, r3
 800515c:	4817      	ldr	r0, [pc, #92]	@ (80051bc <HAL_FMC_MspInit+0x114>)
 800515e:	f002 ffaf 	bl	80080c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8005162:	2328      	movs	r3, #40	@ 0x28
 8005164:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005166:	2302      	movs	r3, #2
 8005168:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516e:	2303      	movs	r3, #3
 8005170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005172:	230c      	movs	r3, #12
 8005174:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005176:	1d3b      	adds	r3, r7, #4
 8005178:	4619      	mov	r1, r3
 800517a:	4811      	ldr	r0, [pc, #68]	@ (80051c0 <HAL_FMC_MspInit+0x118>)
 800517c:	f002 ffa0 	bl	80080c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8005180:	2308      	movs	r3, #8
 8005182:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005184:	2302      	movs	r3, #2
 8005186:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800518c:	2303      	movs	r3, #3
 800518e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005190:	230c      	movs	r3, #12
 8005192:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8005194:	1d3b      	adds	r3, r7, #4
 8005196:	4619      	mov	r1, r3
 8005198:	480a      	ldr	r0, [pc, #40]	@ (80051c4 <HAL_FMC_MspInit+0x11c>)
 800519a:	f002 ff91 	bl	80080c0 <HAL_GPIO_Init>
 800519e:	e000      	b.n	80051a2 <HAL_FMC_MspInit+0xfa>
    return;
 80051a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20002464 	.word	0x20002464
 80051ac:	40023800 	.word	0x40023800
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40021800 	.word	0x40021800
 80051b8:	40020c00 	.word	0x40020c00
 80051bc:	40021400 	.word	0x40021400
 80051c0:	40021c00 	.word	0x40021c00
 80051c4:	40020800 	.word	0x40020800

080051c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80051d0:	f7ff ff6a 	bl	80050a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	@ 0x28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005298 <HAL_SAI_MspInit+0xbc>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d124      	bne.n	8005238 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80051ee:	4b2b      	ldr	r3, [pc, #172]	@ (800529c <HAL_SAI_MspInit+0xc0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10b      	bne.n	800520e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80051f6:	4b2a      	ldr	r3, [pc, #168]	@ (80052a0 <HAL_SAI_MspInit+0xc4>)
 80051f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fa:	4a29      	ldr	r2, [pc, #164]	@ (80052a0 <HAL_SAI_MspInit+0xc4>)
 80051fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005200:	6453      	str	r3, [r2, #68]	@ 0x44
 8005202:	4b27      	ldr	r3, [pc, #156]	@ (80052a0 <HAL_SAI_MspInit+0xc4>)
 8005204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005206:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800520e:	4b23      	ldr	r3, [pc, #140]	@ (800529c <HAL_SAI_MspInit+0xc0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	4a21      	ldr	r2, [pc, #132]	@ (800529c <HAL_SAI_MspInit+0xc0>)
 8005216:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8005218:	23f0      	movs	r3, #240	@ 0xf0
 800521a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521c:	2302      	movs	r3, #2
 800521e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005224:	2300      	movs	r3, #0
 8005226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005228:	230a      	movs	r3, #10
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800522c:	f107 0314 	add.w	r3, r7, #20
 8005230:	4619      	mov	r1, r3
 8005232:	481c      	ldr	r0, [pc, #112]	@ (80052a4 <HAL_SAI_MspInit+0xc8>)
 8005234:	f002 ff44 	bl	80080c0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1a      	ldr	r2, [pc, #104]	@ (80052a8 <HAL_SAI_MspInit+0xcc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d125      	bne.n	800528e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8005242:	4b16      	ldr	r3, [pc, #88]	@ (800529c <HAL_SAI_MspInit+0xc0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10b      	bne.n	8005262 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800524a:	4b15      	ldr	r3, [pc, #84]	@ (80052a0 <HAL_SAI_MspInit+0xc4>)
 800524c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524e:	4a14      	ldr	r2, [pc, #80]	@ (80052a0 <HAL_SAI_MspInit+0xc4>)
 8005250:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005254:	6453      	str	r3, [r2, #68]	@ 0x44
 8005256:	4b12      	ldr	r3, [pc, #72]	@ (80052a0 <HAL_SAI_MspInit+0xc4>)
 8005258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8005262:	4b0e      	ldr	r3, [pc, #56]	@ (800529c <HAL_SAI_MspInit+0xc0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3301      	adds	r3, #1
 8005268:	4a0c      	ldr	r2, [pc, #48]	@ (800529c <HAL_SAI_MspInit+0xc0>)
 800526a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800526c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005272:	2302      	movs	r3, #2
 8005274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005276:	2300      	movs	r3, #0
 8005278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800527a:	2300      	movs	r3, #0
 800527c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800527e:	230a      	movs	r3, #10
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8005282:	f107 0314 	add.w	r3, r7, #20
 8005286:	4619      	mov	r1, r3
 8005288:	4808      	ldr	r0, [pc, #32]	@ (80052ac <HAL_SAI_MspInit+0xd0>)
 800528a:	f002 ff19 	bl	80080c0 <HAL_GPIO_Init>

    }
}
 800528e:	bf00      	nop
 8005290:	3728      	adds	r7, #40	@ 0x28
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40015c04 	.word	0x40015c04
 800529c:	20002468 	.word	0x20002468
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40022000 	.word	0x40022000
 80052a8:	40015c24 	.word	0x40015c24
 80052ac:	40021800 	.word	0x40021800

080052b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08e      	sub	sp, #56	@ 0x38
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80052c0:	4b33      	ldr	r3, [pc, #204]	@ (8005390 <HAL_InitTick+0xe0>)
 80052c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c4:	4a32      	ldr	r2, [pc, #200]	@ (8005390 <HAL_InitTick+0xe0>)
 80052c6:	f043 0310 	orr.w	r3, r3, #16
 80052ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80052cc:	4b30      	ldr	r3, [pc, #192]	@ (8005390 <HAL_InitTick+0xe0>)
 80052ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052d8:	f107 0210 	add.w	r2, r7, #16
 80052dc:	f107 0314 	add.w	r3, r7, #20
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f006 f862 	bl	800b3ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80052ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80052f2:	f006 f833 	bl	800b35c <HAL_RCC_GetPCLK1Freq>
 80052f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80052f8:	e004      	b.n	8005304 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80052fa:	f006 f82f 	bl	800b35c <HAL_RCC_GetPCLK1Freq>
 80052fe:	4603      	mov	r3, r0
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005306:	4a23      	ldr	r2, [pc, #140]	@ (8005394 <HAL_InitTick+0xe4>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	0c9b      	lsrs	r3, r3, #18
 800530e:	3b01      	subs	r3, #1
 8005310:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005312:	4b21      	ldr	r3, [pc, #132]	@ (8005398 <HAL_InitTick+0xe8>)
 8005314:	4a21      	ldr	r2, [pc, #132]	@ (800539c <HAL_InitTick+0xec>)
 8005316:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005318:	4b1f      	ldr	r3, [pc, #124]	@ (8005398 <HAL_InitTick+0xe8>)
 800531a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800531e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005320:	4a1d      	ldr	r2, [pc, #116]	@ (8005398 <HAL_InitTick+0xe8>)
 8005322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005324:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005326:	4b1c      	ldr	r3, [pc, #112]	@ (8005398 <HAL_InitTick+0xe8>)
 8005328:	2200      	movs	r2, #0
 800532a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800532c:	4b1a      	ldr	r3, [pc, #104]	@ (8005398 <HAL_InitTick+0xe8>)
 800532e:	2200      	movs	r2, #0
 8005330:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005332:	4b19      	ldr	r3, [pc, #100]	@ (8005398 <HAL_InitTick+0xe8>)
 8005334:	2200      	movs	r2, #0
 8005336:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005338:	4817      	ldr	r0, [pc, #92]	@ (8005398 <HAL_InitTick+0xe8>)
 800533a:	f008 fde8 	bl	800df0e <HAL_TIM_Base_Init>
 800533e:	4603      	mov	r3, r0
 8005340:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005344:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005348:	2b00      	cmp	r3, #0
 800534a:	d11b      	bne.n	8005384 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800534c:	4812      	ldr	r0, [pc, #72]	@ (8005398 <HAL_InitTick+0xe8>)
 800534e:	f008 fe35 	bl	800dfbc <HAL_TIM_Base_Start_IT>
 8005352:	4603      	mov	r3, r0
 8005354:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005358:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800535c:	2b00      	cmp	r3, #0
 800535e:	d111      	bne.n	8005384 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005360:	2036      	movs	r0, #54	@ 0x36
 8005362:	f001 fb85 	bl	8006a70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b0f      	cmp	r3, #15
 800536a:	d808      	bhi.n	800537e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800536c:	2200      	movs	r2, #0
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	2036      	movs	r0, #54	@ 0x36
 8005372:	f001 fb61 	bl	8006a38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005376:	4a0a      	ldr	r2, [pc, #40]	@ (80053a0 <HAL_InitTick+0xf0>)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e002      	b.n	8005384 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005384:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005388:	4618      	mov	r0, r3
 800538a:	3738      	adds	r7, #56	@ 0x38
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40023800 	.word	0x40023800
 8005394:	431bde83 	.word	0x431bde83
 8005398:	2000246c 	.word	0x2000246c
 800539c:	40001000 	.word	0x40001000
 80053a0:	2000006c 	.word	0x2000006c

080053a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <NMI_Handler+0x4>

080053ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053b0:	bf00      	nop
 80053b2:	e7fd      	b.n	80053b0 <HardFault_Handler+0x4>

080053b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <MemManage_Handler+0x4>

080053bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053c0:	bf00      	nop
 80053c2:	e7fd      	b.n	80053c0 <BusFault_Handler+0x4>

080053c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <UsageFault_Handler+0x4>

080053cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80053e0:	4802      	ldr	r0, [pc, #8]	@ (80053ec <TIM6_DAC_IRQHandler+0x10>)
 80053e2:	f008 feba 	bl	800e15a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80053e6:	bf00      	nop
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	2000246c 	.word	0x2000246c

080053f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80053f4:	4802      	ldr	r0, [pc, #8]	@ (8005400 <OTG_FS_IRQHandler+0x10>)
 80053f6:	f003 f840 	bl	800847a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80053fa:	bf00      	nop
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20012c84 	.word	0x20012c84

08005404 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005408:	4802      	ldr	r0, [pc, #8]	@ (8005414 <LTDC_IRQHandler+0x10>)
 800540a:	f004 ffad 	bl	800a368 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20001b74 	.word	0x20001b74

08005418 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800541c:	4802      	ldr	r0, [pc, #8]	@ (8005428 <DMA2D_IRQHandler+0x10>)
 800541e:	f002 f95f 	bl	80076e0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005422:	bf00      	nop
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	200019dc 	.word	0x200019dc

0800542c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005430:	4802      	ldr	r0, [pc, #8]	@ (800543c <DMA2_Stream1_IRQHandler+0x10>)
 8005432:	f001 fe95 	bl	8007160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005436:	bf00      	nop
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	200023ec 	.word	0x200023ec

08005440 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8005444:	4b09      	ldr	r3, [pc, #36]	@ (800546c <USART6_IRQHandler+0x2c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b10      	cmp	r3, #16
 8005450:	d106      	bne.n	8005460 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <USART6_IRQHandler+0x2c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2210      	movs	r2, #16
 8005458:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 800545a:	4804      	ldr	r0, [pc, #16]	@ (800546c <USART6_IRQHandler+0x2c>)
 800545c:	f000 fe8e 	bl	800617c <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005460:	4802      	ldr	r0, [pc, #8]	@ (800546c <USART6_IRQHandler+0x2c>)
 8005462:	f00a f8c5 	bl	800f5f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20002114 	.word	0x20002114

08005470 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e00a      	b.n	8005498 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005482:	f3af 8000 	nop.w
 8005486:	4601      	mov	r1, r0
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	60ba      	str	r2, [r7, #8]
 800548e:	b2ca      	uxtb	r2, r1
 8005490:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	3301      	adds	r3, #1
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	dbf0      	blt.n	8005482 <_read+0x12>
  }

  return len;
 80054a0:	687b      	ldr	r3, [r7, #4]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b086      	sub	sp, #24
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e009      	b.n	80054d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	60ba      	str	r2, [r7, #8]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	3301      	adds	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	dbf1      	blt.n	80054bc <_write+0x12>
  }
  return len;
 80054d8:	687b      	ldr	r3, [r7, #4]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <_close>:

int _close(int file)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80054ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800550a:	605a      	str	r2, [r3, #4]
  return 0;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <_isatty>:

int _isatty(int file)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005522:	2301      	movs	r3, #1
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005554:	4a14      	ldr	r2, [pc, #80]	@ (80055a8 <_sbrk+0x5c>)
 8005556:	4b15      	ldr	r3, [pc, #84]	@ (80055ac <_sbrk+0x60>)
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005560:	4b13      	ldr	r3, [pc, #76]	@ (80055b0 <_sbrk+0x64>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d102      	bne.n	800556e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005568:	4b11      	ldr	r3, [pc, #68]	@ (80055b0 <_sbrk+0x64>)
 800556a:	4a12      	ldr	r2, [pc, #72]	@ (80055b4 <_sbrk+0x68>)
 800556c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800556e:	4b10      	ldr	r3, [pc, #64]	@ (80055b0 <_sbrk+0x64>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	429a      	cmp	r2, r3
 800557a:	d207      	bcs.n	800558c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800557c:	f012 fb48 	bl	8017c10 <__errno>
 8005580:	4603      	mov	r3, r0
 8005582:	220c      	movs	r2, #12
 8005584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005586:	f04f 33ff 	mov.w	r3, #4294967295
 800558a:	e009      	b.n	80055a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800558c:	4b08      	ldr	r3, [pc, #32]	@ (80055b0 <_sbrk+0x64>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005592:	4b07      	ldr	r3, [pc, #28]	@ (80055b0 <_sbrk+0x64>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	4a05      	ldr	r2, [pc, #20]	@ (80055b0 <_sbrk+0x64>)
 800559c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800559e:	68fb      	ldr	r3, [r7, #12]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20050000 	.word	0x20050000
 80055ac:	00000400 	.word	0x00000400
 80055b0:	200024b8 	.word	0x200024b8
 80055b4:	200131b0 	.word	0x200131b0

080055b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055bc:	4b06      	ldr	r3, [pc, #24]	@ (80055d8 <SystemInit+0x20>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c2:	4a05      	ldr	r2, [pc, #20]	@ (80055d8 <SystemInit+0x20>)
 80055c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055cc:	bf00      	nop
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	e000ed00 	.word	0xe000ed00

080055dc <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 80055e0:	f000 f803 	bl	80055ea <TIME_Platform_GetCurrentMs>
 80055e4:	4603      	mov	r3, r0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	bd80      	pop	{r7, pc}

080055ea <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 80055ee:	f000 fea3 	bl	8006338 <HAL_GetTick>
 80055f2:	4603      	mov	r3, r0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d102      	bne.n	800560e <LOGGER_Connect+0x16>
 8005608:	f04f 33ff 	mov.w	r3, #4294967295
 800560c:	e016      	b.n	800563c <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 800560e:	223f      	movs	r2, #63	@ 0x3f
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	480c      	ldr	r0, [pc, #48]	@ (8005644 <LOGGER_Connect+0x4c>)
 8005614:	f012 fa7d 	bl	8017b12 <strncpy>
    current_config.server_port = port;
 8005618:	4a0b      	ldr	r2, [pc, #44]	@ (8005648 <LOGGER_Connect+0x50>)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 800561e:	6839      	ldr	r1, [r7, #0]
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f965 	bl	80058f0 <LOGGER_Platform_Connect>
 8005626:	4603      	mov	r3, r0
 8005628:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 800562a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d102      	bne.n	8005638 <LOGGER_Connect+0x40>
        logger_connected = true;
 8005632:	4b06      	ldr	r3, [pc, #24]	@ (800564c <LOGGER_Connect+0x54>)
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8005638:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000027 	.word	0x20000027
 8005648:	20000024 	.word	0x20000024
 800564c:	200024bc 	.word	0x200024bc

08005650 <LOGGER_SetFilterLevel>:
bool LOGGER_IsConnected(void) {
    return logger_connected;
}

// Logger 제어 함수들
void LOGGER_SetFilterLevel(LogLevel min_level) {
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	71fb      	strb	r3, [r7, #7]
    filter_level = min_level;
 800565a:	4a04      	ldr	r2, [pc, #16]	@ (800566c <LOGGER_SetFilterLevel+0x1c>)
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	7013      	strb	r3, [r2, #0]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	200024be 	.word	0x200024be

08005670 <LOGGER_SetSDFilterLevel>:

void LOGGER_SetSDFilterLevel(LogLevel min_level) {
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
    sd_filter_level = min_level;
 800567a:	4a04      	ldr	r2, [pc, #16]	@ (800568c <LOGGER_SetSDFilterLevel+0x1c>)
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	7013      	strb	r3, [r2, #0]
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	20000020 	.word	0x20000020

08005690 <LOGGER_EnableSDLogging>:

void LOGGER_EnableSDLogging(bool enable) {
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	71fb      	strb	r3, [r7, #7]
    sd_logging_enabled = enable;
 800569a:	4a04      	ldr	r2, [pc, #16]	@ (80056ac <LOGGER_EnableSDLogging+0x1c>)
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	7013      	strb	r3, [r2, #0]
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	200024bf 	.word	0x200024bf

080056b0 <LOGGER_IsSDLoggingEnabled>:

bool LOGGER_IsSDLoggingEnabled(void) {
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
    return sd_logging_enabled;
 80056b4:	4b03      	ldr	r3, [pc, #12]	@ (80056c4 <LOGGER_IsSDLoggingEnabled+0x14>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	200024bf 	.word	0x200024bf

080056c8 <LOGGER_SetMode>:

void LOGGER_SetMode(LoggerMode_t mode) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 80056d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005708 <LOGGER_SetMode+0x40>)
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	7013      	strb	r3, [r2, #0]
    
    // 모드에 따른 연결 상태 설정
    if (mode == LOGGER_MODE_TERMINAL_ONLY) {
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d103      	bne.n	80056e6 <LOGGER_SetMode+0x1e>
        logger_connected = true;  // 터미널은 항상 연결됨
 80056de:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <LOGGER_SetMode+0x44>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
        // SD 백엔드 사용 시 SDStorage 연결 상태에 따라 결정
        logger_connected = SDStorage_IsReady();
    }
}
 80056e4:	e00b      	b.n	80056fe <LOGGER_SetMode+0x36>
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d002      	beq.n	80056f2 <LOGGER_SetMode+0x2a>
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d105      	bne.n	80056fe <LOGGER_SetMode+0x36>
        logger_connected = SDStorage_IsReady();
 80056f2:	f7fc faeb 	bl	8001ccc <SDStorage_IsReady>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	4b04      	ldr	r3, [pc, #16]	@ (800570c <LOGGER_SetMode+0x44>)
 80056fc:	701a      	strb	r2, [r3, #0]
}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	200024bd 	.word	0x200024bd
 800570c:	200024bc 	.word	0x200024bc

08005710 <LOGGER_SendFormatted>:

LoggerMode_t LOGGER_GetMode(void) {
    return current_mode;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8005710:	b40e      	push	{r1, r2, r3}
 8005712:	b590      	push	{r4, r7, lr}
 8005714:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8005718:	af02      	add	r7, sp, #8
 800571a:	4602      	mov	r2, r0
 800571c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005720:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 8005724:	701a      	strb	r2, [r3, #0]
    // 필터 레벨 체크
    if (level < filter_level) return;
 8005726:	4b6a      	ldr	r3, [pc, #424]	@ (80058d0 <LOGGER_SendFormatted+0x1c0>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800572e:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 8005732:	7812      	ldrb	r2, [r2, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	f0c0 80bd 	bcc.w	80058b4 <LOGGER_SendFormatted+0x1a4>
    if (level < current_config.level) return;
 800573a:	4b66      	ldr	r3, [pc, #408]	@ (80058d4 <LOGGER_SendFormatted+0x1c4>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8005742:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 8005746:	7812      	ldrb	r2, [r2, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	f0c0 80b5 	bcc.w	80058b8 <LOGGER_SendFormatted+0x1a8>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 800574e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005752:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005756:	4a60      	ldr	r2, [pc, #384]	@ (80058d8 <LOGGER_SendFormatted+0x1c8>)
 8005758:	461c      	mov	r4, r3
 800575a:	4613      	mov	r3, r2
 800575c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800575e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 타임스탬프 + 레벨 문자열 추가
    int offset = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
    const char* network_time = ResponseHandler_GetNetworkTime();
 8005768:	f7fb fd82 	bl	8001270 <ResponseHandler_GetNetworkTime>
 800576c:	f8c7 0220 	str.w	r0, [r7, #544]	@ 0x220
    if (network_time != NULL && ResponseHandler_IsTimeSynchronized()) {
 8005770:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01c      	beq.n	80057b2 <LOGGER_SendFormatted+0xa2>
 8005778:	f7fb fd8c 	bl	8001294 <ResponseHandler_IsTimeSynchronized>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d017      	beq.n	80057b2 <LOGGER_SendFormatted+0xa2>
        // 네트워크 시간이 있으면 타임스탬프 추가
        offset = snprintf(buffer, sizeof(buffer), "[%s] %s ", network_time, level_str[level]);
 8005782:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005786:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 800578a:	781a      	ldrb	r2, [r3, #0]
 800578c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005790:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005798:	f107 0020 	add.w	r0, r7, #32
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80057a2:	4a4e      	ldr	r2, [pc, #312]	@ (80058dc <LOGGER_SendFormatted+0x1cc>)
 80057a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80057a8:	f012 f8c6 	bl	8017938 <sniprintf>
 80057ac:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
 80057b0:	e013      	b.n	80057da <LOGGER_SendFormatted+0xca>
    } else {
        // 네트워크 시간이 없으면 기본 형식
        offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 80057b2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80057b6:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 80057ba:	781a      	ldrb	r2, [r3, #0]
 80057bc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80057c0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80057c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c8:	f107 0020 	add.w	r0, r7, #32
 80057cc:	4a44      	ldr	r2, [pc, #272]	@ (80058e0 <LOGGER_SendFormatted+0x1d0>)
 80057ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80057d2:	f012 f8b1 	bl	8017938 <sniprintf>
 80057d6:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
    }
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 80057da:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 80057de:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80057e2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80057e6:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 80057e8:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80057ec:	f107 0220 	add.w	r2, r7, #32
 80057f0:	18d0      	adds	r0, r2, r3
 80057f2:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80057f6:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 80057fa:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80057fe:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8005808:	f012 f960 	bl	8017acc <vsniprintf>
    va_end(args);
    
    // 모드에 따른 출력 처리
    switch (current_mode) {
 800580c:	4b35      	ldr	r3, [pc, #212]	@ (80058e4 <LOGGER_SendFormatted+0x1d4>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d02b      	beq.n	800586c <LOGGER_SendFormatted+0x15c>
 8005814:	2b02      	cmp	r3, #2
 8005816:	dc54      	bgt.n	80058c2 <LOGGER_SendFormatted+0x1b2>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <LOGGER_SendFormatted+0x112>
 800581c:	2b01      	cmp	r3, #1
 800581e:	d006      	beq.n	800582e <LOGGER_SendFormatted+0x11e>
 8005820:	e04f      	b.n	80058c2 <LOGGER_SendFormatted+0x1b2>
        case LOGGER_MODE_TERMINAL_ONLY:
            LOGGER_Platform_Send(buffer);
 8005822:	f107 0320 	add.w	r3, r7, #32
 8005826:	4618      	mov	r0, r3
 8005828:	f000 f86e 	bl	8005908 <LOGGER_Platform_Send>
            break;
 800582c:	e049      	b.n	80058c2 <LOGGER_SendFormatted+0x1b2>
            
        case LOGGER_MODE_SD_ONLY:
            // SD 로깅 활성화 + SD 필터 레벨 체크
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 800582e:	4b2e      	ldr	r3, [pc, #184]	@ (80058e8 <LOGGER_SendFormatted+0x1d8>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d042      	beq.n	80058bc <LOGGER_SendFormatted+0x1ac>
 8005836:	4b2d      	ldr	r3, [pc, #180]	@ (80058ec <LOGGER_SendFormatted+0x1dc>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800583e:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 8005842:	7812      	ldrb	r2, [r2, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d339      	bcc.n	80058bc <LOGGER_SendFormatted+0x1ac>
 8005848:	f7fc fa40 	bl	8001ccc <SDStorage_IsReady>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d034      	beq.n	80058bc <LOGGER_SendFormatted+0x1ac>
                SDStorage_WriteLog(buffer, strlen(buffer));
 8005852:	f107 0320 	add.w	r3, r7, #32
 8005856:	4618      	mov	r0, r3
 8005858:	f7fa fce4 	bl	8000224 <strlen>
 800585c:	4602      	mov	r2, r0
 800585e:	f107 0320 	add.w	r3, r7, #32
 8005862:	4611      	mov	r1, r2
 8005864:	4618      	mov	r0, r3
 8005866:	f7fb ffc9 	bl	80017fc <SDStorage_WriteLog>
            }
            break;
 800586a:	e027      	b.n	80058bc <LOGGER_SendFormatted+0x1ac>
            
        case LOGGER_MODE_DUAL:
            // 터미널 출력 (실시간)
            LOGGER_Platform_Send(buffer);
 800586c:	f107 0320 	add.w	r3, r7, #32
 8005870:	4618      	mov	r0, r3
 8005872:	f000 f849 	bl	8005908 <LOGGER_Platform_Send>
            // SD 출력 (SD 로깅 활성화 + SD 필터 레벨 체크 + 에러 무시)
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 8005876:	4b1c      	ldr	r3, [pc, #112]	@ (80058e8 <LOGGER_SendFormatted+0x1d8>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d020      	beq.n	80058c0 <LOGGER_SendFormatted+0x1b0>
 800587e:	4b1b      	ldr	r3, [pc, #108]	@ (80058ec <LOGGER_SendFormatted+0x1dc>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8005886:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d317      	bcc.n	80058c0 <LOGGER_SendFormatted+0x1b0>
 8005890:	f7fc fa1c 	bl	8001ccc <SDStorage_IsReady>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d012      	beq.n	80058c0 <LOGGER_SendFormatted+0x1b0>
                SDStorage_WriteLog(buffer, strlen(buffer));
 800589a:	f107 0320 	add.w	r3, r7, #32
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fa fcc0 	bl	8000224 <strlen>
 80058a4:	4602      	mov	r2, r0
 80058a6:	f107 0320 	add.w	r3, r7, #32
 80058aa:	4611      	mov	r1, r2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fb ffa5 	bl	80017fc <SDStorage_WriteLog>
            }
            break;
 80058b2:	e005      	b.n	80058c0 <LOGGER_SendFormatted+0x1b0>
    if (level < filter_level) return;
 80058b4:	bf00      	nop
 80058b6:	e004      	b.n	80058c2 <LOGGER_SendFormatted+0x1b2>
    if (level < current_config.level) return;
 80058b8:	bf00      	nop
 80058ba:	e002      	b.n	80058c2 <LOGGER_SendFormatted+0x1b2>
            break;
 80058bc:	bf00      	nop
 80058be:	e000      	b.n	80058c2 <LOGGER_SendFormatted+0x1b2>
            break;
 80058c0:	bf00      	nop
    }
}
 80058c2:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 80058c6:	46bd      	mov	sp, r7
 80058c8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80058cc:	b003      	add	sp, #12
 80058ce:	4770      	bx	lr
 80058d0:	200024be 	.word	0x200024be
 80058d4:	20000024 	.word	0x20000024
 80058d8:	0801b60c 	.word	0x0801b60c
 80058dc:	0801b61c 	.word	0x0801b61c
 80058e0:	0801b628 	.word	0x0801b628
 80058e4:	200024bd 	.word	0x200024bd
 80058e8:	200024bf 	.word	0x200024bf
 80058ec:	20000020 	.word	0x20000020

080058f0 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d102      	bne.n	800591c <LOGGER_Platform_Send+0x14>
 8005916:	f04f 33ff 	mov.w	r3, #4294967295
 800591a:	e01c      	b.n	8005956 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fa fc81 	bl	8000224 <strlen>
 8005922:	4603      	mov	r3, r0
 8005924:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	dd12      	ble.n	8005952 <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	b29a      	uxth	r2, r3
 8005930:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	480a      	ldr	r0, [pc, #40]	@ (8005960 <LOGGER_Platform_Send+0x58>)
 8005938:	f009 fc32 	bl	800f1a0 <HAL_UART_Transmit>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d107      	bne.n	8005952 <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8005942:	2364      	movs	r3, #100	@ 0x64
 8005944:	2202      	movs	r2, #2
 8005946:	4907      	ldr	r1, [pc, #28]	@ (8005964 <LOGGER_Platform_Send+0x5c>)
 8005948:	4805      	ldr	r0, [pc, #20]	@ (8005960 <LOGGER_Platform_Send+0x58>)
 800594a:	f009 fc29 	bl	800f1a0 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e001      	b.n	8005956 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8005952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	2000208c 	.word	0x2000208c
 8005964:	0801b62c 	.word	0x0801b62c

08005968 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d105      	bne.n	8005982 <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 8005976:	4913      	ldr	r1, [pc, #76]	@ (80059c4 <UART_Connect+0x5c>)
 8005978:	2003      	movs	r0, #3
 800597a:	f7ff fec9 	bl	8005710 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e01c      	b.n	80059bc <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	4910      	ldr	r1, [pc, #64]	@ (80059c8 <UART_Connect+0x60>)
 8005986:	2001      	movs	r0, #1
 8005988:	f7ff fec2 	bl	8005710 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8ef 	bl	8005b70 <UART_Platform_Connect>
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d108      	bne.n	80059ae <UART_Connect+0x46>
        uart_connected = true;
 800599c:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <UART_Connect+0x64>)
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	490a      	ldr	r1, [pc, #40]	@ (80059d0 <UART_Connect+0x68>)
 80059a6:	2001      	movs	r0, #1
 80059a8:	f7ff feb2 	bl	8005710 <LOGGER_SendFormatted>
 80059ac:	e005      	b.n	80059ba <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	4908      	ldr	r1, [pc, #32]	@ (80059d4 <UART_Connect+0x6c>)
 80059b4:	2003      	movs	r0, #3
 80059b6:	f7ff feab 	bl	8005710 <LOGGER_SendFormatted>
    }

    return status;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	0801b630 	.word	0x0801b630
 80059c8:	0801b654 	.word	0x0801b654
 80059cc:	200024c0 	.word	0x200024c0
 80059d0:	0801b66c 	.word	0x0801b66c
 80059d4:	0801b690 	.word	0x0801b690

080059d8 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 80059e0:	4b19      	ldr	r3, [pc, #100]	@ (8005a48 <UART_Send+0x70>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	f083 0301 	eor.w	r3, r3, #1
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 80059ee:	4917      	ldr	r1, [pc, #92]	@ (8005a4c <UART_Send+0x74>)
 80059f0:	2003      	movs	r0, #3
 80059f2:	f7ff fe8d 	bl	8005710 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e022      	b.n	8005a40 <UART_Send+0x68>
    }

    if (data == NULL) {
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8005a00:	4913      	ldr	r1, [pc, #76]	@ (8005a50 <UART_Send+0x78>)
 8005a02:	2003      	movs	r0, #3
 8005a04:	f7ff fe84 	bl	8005710 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e019      	b.n	8005a40 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4911      	ldr	r1, [pc, #68]	@ (8005a54 <UART_Send+0x7c>)
 8005a10:	2000      	movs	r0, #0
 8005a12:	f7ff fe7d 	bl	8005710 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f992 	bl	8005d40 <UART_Platform_Send>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d105      	bne.n	8005a32 <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	490b      	ldr	r1, [pc, #44]	@ (8005a58 <UART_Send+0x80>)
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f7ff fe70 	bl	8005710 <LOGGER_SendFormatted>
 8005a30:	e005      	b.n	8005a3e <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	4909      	ldr	r1, [pc, #36]	@ (8005a5c <UART_Send+0x84>)
 8005a38:	2003      	movs	r0, #3
 8005a3a:	f7ff fe69 	bl	8005710 <LOGGER_SendFormatted>
    }

    return status;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	200024c0 	.word	0x200024c0
 8005a4c:	0801b6bc 	.word	0x0801b6bc
 8005a50:	0801b6e0 	.word	0x0801b6e0
 8005a54:	0801b700 	.word	0x0801b700
 8005a58:	0801b718 	.word	0x0801b718
 8005a5c:	0801b734 	.word	0x0801b734

08005a60 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 8005a6c:	4b22      	ldr	r3, [pc, #136]	@ (8005af8 <UART_Receive+0x98>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	f083 0301 	eor.w	r3, r3, #1
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 8005a7a:	4920      	ldr	r1, [pc, #128]	@ (8005afc <UART_Receive+0x9c>)
 8005a7c:	2003      	movs	r0, #3
 8005a7e:	f7ff fe47 	bl	8005710 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e034      	b.n	8005af0 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <UART_Receive+0x38>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	dd02      	ble.n	8005a98 <UART_Receive+0x38>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d105      	bne.n	8005aa4 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8005a98:	4919      	ldr	r1, [pc, #100]	@ (8005b00 <UART_Receive+0xa0>)
 8005a9a:	2003      	movs	r0, #3
 8005a9c:	f7ff fe38 	bl	8005710 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e025      	b.n	8005af0 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	4917      	ldr	r1, [pc, #92]	@ (8005b04 <UART_Receive+0xa4>)
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	f7ff fe31 	bl	8005710 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f980 	bl	8005db8 <UART_Platform_Receive>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d107      	bne.n	8005ad2 <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	490f      	ldr	r1, [pc, #60]	@ (8005b08 <UART_Receive+0xa8>)
 8005aca:	2000      	movs	r0, #0
 8005acc:	f7ff fe20 	bl	8005710 <LOGGER_SendFormatted>
 8005ad0:	e00d      	b.n	8005aee <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 8005ad2:	7dfb      	ldrb	r3, [r7, #23]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d104      	bne.n	8005ae2 <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8005ad8:	490c      	ldr	r1, [pc, #48]	@ (8005b0c <UART_Receive+0xac>)
 8005ada:	2000      	movs	r0, #0
 8005adc:	f7ff fe18 	bl	8005710 <LOGGER_SendFormatted>
 8005ae0:	e005      	b.n	8005aee <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	490a      	ldr	r1, [pc, #40]	@ (8005b10 <UART_Receive+0xb0>)
 8005ae8:	2003      	movs	r0, #3
 8005aea:	f7ff fe11 	bl	8005710 <LOGGER_SendFormatted>
    }

    return status;
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	200024c0 	.word	0x200024c0
 8005afc:	0801b758 	.word	0x0801b758
 8005b00:	0801b780 	.word	0x0801b780
 8005b04:	0801b7ac 	.word	0x0801b7ac
 8005b08:	0801b7d4 	.word	0x0801b7d4
 8005b0c:	0801b7f4 	.word	0x0801b7f4
 8005b10:	0801b80c 	.word	0x0801b80c

08005b14 <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005b1e:	e007      	b.n	8005b30 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8005b20:	4b12      	ldr	r3, [pc, #72]	@ (8005b6c <flush_rx_buffer+0x58>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005b30:	4b0e      	ldr	r3, [pc, #56]	@ (8005b6c <flush_rx_buffer+0x58>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d106      	bne.n	8005b4c <flush_rx_buffer+0x38>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b63      	cmp	r3, #99	@ 0x63
 8005b42:	dded      	ble.n	8005b20 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8005b44:	e002      	b.n	8005b4c <flush_rx_buffer+0x38>
        flush_count++;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8005b4c:	1cf9      	adds	r1, r7, #3
 8005b4e:	2301      	movs	r3, #1
 8005b50:	2201      	movs	r2, #1
 8005b52:	4806      	ldr	r0, [pc, #24]	@ (8005b6c <flush_rx_buffer+0x58>)
 8005b54:	f009 fbad 	bl	800f2b2 <HAL_UART_Receive>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d102      	bne.n	8005b64 <flush_rx_buffer+0x50>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b63      	cmp	r3, #99	@ 0x63
 8005b62:	ddf0      	ble.n	8005b46 <flush_rx_buffer+0x32>
    }
}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20002114 	.word	0x20002114

08005b70 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8005b78:	4b5b      	ldr	r3, [pc, #364]	@ (8005ce8 <UART_Platform_Connect+0x178>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8005b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005b80:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005b82:	4b5a      	ldr	r3, [pc, #360]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b88:	4959      	ldr	r1, [pc, #356]	@ (8005cf0 <UART_Platform_Connect+0x180>)
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	f7ff fdc0 	bl	8005710 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8005b90:	4b56      	ldr	r3, [pc, #344]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00e      	beq.n	8005bb6 <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8005b98:	4956      	ldr	r1, [pc, #344]	@ (8005cf4 <UART_Platform_Connect+0x184>)
 8005b9a:	2001      	movs	r0, #1
 8005b9c:	f7ff fdb8 	bl	8005710 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8005ba0:	4b52      	ldr	r3, [pc, #328]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	4952      	ldr	r1, [pc, #328]	@ (8005cf8 <UART_Platform_Connect+0x188>)
 8005bae:	2001      	movs	r0, #1
 8005bb0:	f7ff fdae 	bl	8005710 <LOGGER_SendFormatted>
 8005bb4:	e018      	b.n	8005be8 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8005bb6:	4951      	ldr	r1, [pc, #324]	@ (8005cfc <UART_Platform_Connect+0x18c>)
 8005bb8:	2003      	movs	r0, #3
 8005bba:	f7ff fda9 	bl	8005710 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8005bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005bc0:	4a4f      	ldr	r2, [pc, #316]	@ (8005d00 <UART_Platform_Connect+0x190>)
 8005bc2:	675a      	str	r2, [r3, #116]	@ 0x74
 8005bc4:	4b4e      	ldr	r3, [pc, #312]	@ (8005d00 <UART_Platform_Connect+0x190>)
 8005bc6:	4a49      	ldr	r2, [pc, #292]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005bc8:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8005bca:	4b48      	ldr	r3, [pc, #288]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8005bd2:	494c      	ldr	r1, [pc, #304]	@ (8005d04 <UART_Platform_Connect+0x194>)
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	f7ff fd9b 	bl	8005710 <LOGGER_SendFormatted>
 8005bda:	e005      	b.n	8005be8 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8005bdc:	494a      	ldr	r1, [pc, #296]	@ (8005d08 <UART_Platform_Connect+0x198>)
 8005bde:	2003      	movs	r0, #3
 8005be0:	f7ff fd96 	bl	8005710 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e07a      	b.n	8005cde <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8005be8:	4b48      	ldr	r3, [pc, #288]	@ (8005d0c <UART_Platform_Connect+0x19c>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d009      	beq.n	8005c04 <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8005bf0:	483e      	ldr	r0, [pc, #248]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005bf2:	f009 fc6a 	bl	800f4ca <HAL_UART_DMAStop>
        dma_receiving = false;
 8005bf6:	4b45      	ldr	r3, [pc, #276]	@ (8005d0c <UART_Platform_Connect+0x19c>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8005bfc:	4944      	ldr	r1, [pc, #272]	@ (8005d10 <UART_Platform_Connect+0x1a0>)
 8005bfe:	2001      	movs	r0, #1
 8005c00:	f7ff fd86 	bl	8005710 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8005c04:	4b39      	ldr	r3, [pc, #228]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005c06:	2220      	movs	r2, #32
 8005c08:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8005c0a:	4b38      	ldr	r3, [pc, #224]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8005c12:	4b36      	ldr	r3, [pc, #216]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d026      	beq.n	8005c68 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8005c1a:	4b34      	ldr	r3, [pc, #208]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d01a      	beq.n	8005c5e <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8005c28:	493a      	ldr	r1, [pc, #232]	@ (8005d14 <UART_Platform_Connect+0x1a4>)
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	f7ff fd70 	bl	8005710 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8005c30:	4b2e      	ldr	r3, [pc, #184]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 f943 	bl	8006ec0 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 8005c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f001 f890 	bl	8006d64 <HAL_DMA_Init>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 8005c4a:	4933      	ldr	r1, [pc, #204]	@ (8005d18 <UART_Platform_Connect+0x1a8>)
 8005c4c:	2003      	movs	r0, #3
 8005c4e:	f7ff fd5f 	bl	8005710 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e043      	b.n	8005cde <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 8005c56:	4931      	ldr	r1, [pc, #196]	@ (8005d1c <UART_Platform_Connect+0x1ac>)
 8005c58:	2001      	movs	r0, #1
 8005c5a:	f7ff fd59 	bl	8005710 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005c5e:	4b23      	ldr	r3, [pc, #140]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8005c68:	f7ff ff54 	bl	8005b14 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8005c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8005d20 <UART_Platform_Connect+0x1b0>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8005c72:	4b2c      	ldr	r3, [pc, #176]	@ (8005d24 <UART_Platform_Connect+0x1b4>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8005c78:	4b2b      	ldr	r3, [pc, #172]	@ (8005d28 <UART_Platform_Connect+0x1b8>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8005c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c82:	2100      	movs	r1, #0
 8005c84:	4829      	ldr	r0, [pc, #164]	@ (8005d2c <UART_Platform_Connect+0x1bc>)
 8005c86:	f011 ff2f 	bl	8017ae8 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 8005c8a:	4929      	ldr	r1, [pc, #164]	@ (8005d30 <UART_Platform_Connect+0x1c0>)
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	f7ff fd3f 	bl	8005710 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c96:	4925      	ldr	r1, [pc, #148]	@ (8005d2c <UART_Platform_Connect+0x1bc>)
 8005c98:	4814      	ldr	r0, [pc, #80]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005c9a:	f009 fbd2 	bl	800f442 <HAL_UART_Receive_DMA>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8005ca8:	4b18      	ldr	r3, [pc, #96]	@ (8005d0c <UART_Platform_Connect+0x19c>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8005cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cb2:	4920      	ldr	r1, [pc, #128]	@ (8005d34 <UART_Platform_Connect+0x1c4>)
 8005cb4:	2001      	movs	r0, #1
 8005cb6:	f7ff fd2b 	bl	8005710 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e00f      	b.n	8005cde <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	491d      	ldr	r1, [pc, #116]	@ (8005d38 <UART_Platform_Connect+0x1c8>)
 8005cc4:	2003      	movs	r0, #3
 8005cc6:	f7ff fd23 	bl	8005710 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8005cca:	4b08      	ldr	r3, [pc, #32]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005ccc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005cce:	4b07      	ldr	r3, [pc, #28]	@ (8005cec <UART_Platform_Connect+0x17c>)
 8005cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cd4:	4919      	ldr	r1, [pc, #100]	@ (8005d3c <UART_Platform_Connect+0x1cc>)
 8005cd6:	2003      	movs	r0, #3
 8005cd8:	f7ff fd1a 	bl	8005710 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005cdc:	2301      	movs	r3, #1
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200026c8 	.word	0x200026c8
 8005cec:	20002114 	.word	0x20002114
 8005cf0:	0801ba08 	.word	0x0801ba08
 8005cf4:	0801ba34 	.word	0x0801ba34
 8005cf8:	0801ba5c 	.word	0x0801ba5c
 8005cfc:	0801ba78 	.word	0x0801ba78
 8005d00:	200023ec 	.word	0x200023ec
 8005d04:	0801bab4 	.word	0x0801bab4
 8005d08:	0801bae0 	.word	0x0801bae0
 8005d0c:	200026c9 	.word	0x200026c9
 8005d10:	0801bb0c 	.word	0x0801bb0c
 8005d14:	0801bb38 	.word	0x0801bb38
 8005d18:	0801bb68 	.word	0x0801bb68
 8005d1c:	0801bb94 	.word	0x0801bb94
 8005d20:	200024c1 	.word	0x200024c1
 8005d24:	200024c2 	.word	0x200024c2
 8005d28:	200024c4 	.word	0x200024c4
 8005d2c:	200024c8 	.word	0x200024c8
 8005d30:	0801bbc0 	.word	0x0801bbc0
 8005d34:	0801bbe8 	.word	0x0801bbe8
 8005d38:	0801bc2c 	.word	0x0801bc2c
 8005d3c:	0801bc68 	.word	0x0801bc68

08005d40 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d006      	beq.n	8005d5c <UART_Platform_Send+0x1c>
 8005d4e:	4b17      	ldr	r3, [pc, #92]	@ (8005dac <UART_Platform_Send+0x6c>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	f083 0301 	eor.w	r3, r3, #1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <UART_Platform_Send+0x20>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e021      	b.n	8005da4 <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7fa fa5f 	bl	8000224 <strlen>
 8005d66:	4603      	mov	r3, r0
 8005d68:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <UART_Platform_Send+0x34>
 8005d70:	2300      	movs	r3, #0
 8005d72:	e017      	b.n	8005da4 <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8005d74:	f7ff fece 	bl	8005b14 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	480b      	ldr	r0, [pc, #44]	@ (8005db0 <UART_Platform_Send+0x70>)
 8005d84:	f009 fa0c 	bl	800f1a0 <HAL_UART_Transmit>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8005d8c:	7afb      	ldrb	r3, [r7, #11]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e006      	b.n	8005da4 <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8005d96:	7afb      	ldrb	r3, [r7, #11]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4906      	ldr	r1, [pc, #24]	@ (8005db4 <UART_Platform_Send+0x74>)
 8005d9c:	2003      	movs	r0, #3
 8005d9e:	f7ff fcb7 	bl	8005710 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005da2:	2301      	movs	r3, #1
    }
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	200026c8 	.word	0x200026c8
 8005db0:	20002114 	.word	0x20002114
 8005db4:	0801bcc8 	.word	0x0801bcc8

08005db8 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08a      	sub	sp, #40	@ 0x28
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d009      	beq.n	8005dde <UART_Platform_Receive+0x26>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d006      	beq.n	8005dde <UART_Platform_Receive+0x26>
 8005dd0:	4b74      	ldr	r3, [pc, #464]	@ (8005fa4 <UART_Platform_Receive+0x1ec>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	f083 0301 	eor.w	r3, r3, #1
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e0dc      	b.n	8005f9c <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dc04      	bgt.n	8005df2 <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e0d4      	b.n	8005f9c <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8005df8:	4b6b      	ldr	r3, [pc, #428]	@ (8005fa8 <UART_Platform_Receive+0x1f0>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	f083 0301 	eor.w	r3, r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e0c8      	b.n	8005f9c <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8005e0a:	4b68      	ldr	r3, [pc, #416]	@ (8005fac <UART_Platform_Receive+0x1f4>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 8005e14:	4b65      	ldr	r3, [pc, #404]	@ (8005fac <UART_Platform_Receive+0x1f4>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8005e1a:	4965      	ldr	r1, [pc, #404]	@ (8005fb0 <UART_Platform_Receive+0x1f8>)
 8005e1c:	2002      	movs	r0, #2
 8005e1e:	f7ff fc77 	bl	8005710 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e0ba      	b.n	8005f9c <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 8005e26:	4b63      	ldr	r3, [pc, #396]	@ (8005fb4 <UART_Platform_Receive+0x1fc>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80b4 	beq.w	8005f9a <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 8005e32:	4b60      	ldr	r3, [pc, #384]	@ (8005fb4 <UART_Platform_Receive+0x1fc>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 8005e38:	4b5f      	ldr	r3, [pc, #380]	@ (8005fb8 <UART_Platform_Receive+0x200>)
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	837b      	strh	r3, [r7, #26]
        LOG_DEBUG("[UART_STM32] DMA received %d bytes", received_length);
 8005e3e:	8b7b      	ldrh	r3, [r7, #26]
 8005e40:	461a      	mov	r2, r3
 8005e42:	495e      	ldr	r1, [pc, #376]	@ (8005fbc <UART_Platform_Receive+0x204>)
 8005e44:	2000      	movs	r0, #0
 8005e46:	f7ff fc63 	bl	8005710 <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8005e4a:	8b7b      	ldrh	r3, [r7, #26]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 809e 	beq.w	8005f8e <UART_Platform_Receive+0x1d6>
 8005e52:	8b7b      	ldrh	r3, [r7, #26]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	f340 8099 	ble.w	8005f8e <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8005e5c:	8b7b      	ldrh	r3, [r7, #26]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4957      	ldr	r1, [pc, #348]	@ (8005fc0 <UART_Platform_Receive+0x208>)
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f011 ff01 	bl	8017c6a <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8005e68:	8b7b      	ldrh	r3, [r7, #26]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	2200      	movs	r2, #0
 8005e70:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 8005e72:	8b7a      	ldrh	r2, [r7, #26]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_DEBUG("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8005e78:	8b7a      	ldrh	r2, [r7, #26]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4951      	ldr	r1, [pc, #324]	@ (8005fc4 <UART_Platform_Receive+0x20c>)
 8005e7e:	2000      	movs	r0, #0
 8005e80:	f7ff fc46 	bl	8005710 <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8005e84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e88:	2100      	movs	r1, #0
 8005e8a:	484d      	ldr	r0, [pc, #308]	@ (8005fc0 <UART_Platform_Receive+0x208>)
 8005e8c:	f011 fe2c 	bl	8017ae8 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8005e90:	484d      	ldr	r0, [pc, #308]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005e92:	f009 fb1a 	bl	800f4ca <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8005e96:	4b4c      	ldr	r3, [pc, #304]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8005e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8005ea6:	4b48      	ldr	r3, [pc, #288]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2204      	movs	r2, #4
 8005eac:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8005eae:	4b46      	ldr	r3, [pc, #280]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2208      	movs	r2, #8
 8005eb4:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8005eb6:	4b44      	ldr	r3, [pc, #272]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2210      	movs	r2, #16
 8005ebc:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8005ebe:	4b42      	ldr	r3, [pc, #264]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d025      	beq.n	8005f12 <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 8005ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005eca:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8005ecc:	e00b      	b.n	8005ee6 <UART_Platform_Receive+0x12e>
                    timeout--;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e002      	b.n	8005ee0 <UART_Platform_Receive+0x128>
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	3301      	adds	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b63      	cmp	r3, #99	@ 0x63
 8005ee4:	ddf9      	ble.n	8005eda <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8005ee6:	4b38      	ldr	r3, [pc, #224]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d002      	beq.n	8005efa <UART_Platform_Receive+0x142>
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	dce9      	bgt.n	8005ece <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d108      	bne.n	8005f12 <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8005f00:	4932      	ldr	r1, [pc, #200]	@ (8005fcc <UART_Platform_Receive+0x214>)
 8005f02:	2002      	movs	r0, #2
 8005f04:	f7ff fc04 	bl	8005710 <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005f08:	4b2f      	ldr	r3, [pc, #188]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 8005f12:	4b2d      	ldr	r3, [pc, #180]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005f14:	2220      	movs	r2, #32
 8005f16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 8005f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	e002      	b.n	8005f2c <UART_Platform_Receive+0x174>
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	613b      	str	r3, [r7, #16]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005f32:	4293      	cmp	r3, r2
 8005f34:	ddf7      	ble.n	8005f26 <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f3a:	4921      	ldr	r1, [pc, #132]	@ (8005fc0 <UART_Platform_Receive+0x208>)
 8005f3c:	4822      	ldr	r0, [pc, #136]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005f3e:	f009 fa80 	bl	800f442 <HAL_UART_Receive_DMA>
 8005f42:	4603      	mov	r3, r0
 8005f44:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 8005f46:	7e7b      	ldrb	r3, [r7, #25]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d104      	bne.n	8005f56 <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 8005f4c:	4920      	ldr	r1, [pc, #128]	@ (8005fd0 <UART_Platform_Receive+0x218>)
 8005f4e:	2000      	movs	r0, #0
 8005f50:	f7ff fbde 	bl	8005710 <LOGGER_SendFormatted>
 8005f54:	e019      	b.n	8005f8a <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 8005f56:	7e7a      	ldrb	r2, [r7, #25]
 8005f58:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005f5a:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8005f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	460b      	mov	r3, r1
 8005f66:	491b      	ldr	r1, [pc, #108]	@ (8005fd4 <UART_Platform_Receive+0x21c>)
 8005f68:	2002      	movs	r0, #2
 8005f6a:	f7ff fbd1 	bl	8005710 <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8005f6e:	4b16      	ldr	r3, [pc, #88]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 8005f76:	4b14      	ldr	r3, [pc, #80]	@ (8005fc8 <UART_Platform_Receive+0x210>)
 8005f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	4915      	ldr	r1, [pc, #84]	@ (8005fd8 <UART_Platform_Receive+0x220>)
 8005f84:	2002      	movs	r0, #2
 8005f86:	f7ff fbc3 	bl	8005710 <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e006      	b.n	8005f9c <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 8005f8e:	8b7a      	ldrh	r2, [r7, #26]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4912      	ldr	r1, [pc, #72]	@ (8005fdc <UART_Platform_Receive+0x224>)
 8005f94:	2002      	movs	r0, #2
 8005f96:	f7ff fbbb 	bl	8005710 <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8005f9a:	2302      	movs	r3, #2
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3720      	adds	r7, #32
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	200026c8 	.word	0x200026c8
 8005fa8:	200026c9 	.word	0x200026c9
 8005fac:	200024c2 	.word	0x200024c2
 8005fb0:	0801bd00 	.word	0x0801bd00
 8005fb4:	200024c1 	.word	0x200024c1
 8005fb8:	200024c4 	.word	0x200024c4
 8005fbc:	0801bd30 	.word	0x0801bd30
 8005fc0:	200024c8 	.word	0x200024c8
 8005fc4:	0801bd54 	.word	0x0801bd54
 8005fc8:	20002114 	.word	0x20002114
 8005fcc:	0801bd80 	.word	0x0801bd80
 8005fd0:	0801bdbc 	.word	0x0801bdbc
 8005fd4:	0801bdec 	.word	0x0801bdec
 8005fd8:	0801be34 	.word	0x0801be34
 8005fdc:	0801be50 	.word	0x0801be50

08005fe0 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a0a      	ldr	r2, [pc, #40]	@ (8006018 <HAL_UART_RxCpltCallback+0x38>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d10e      	bne.n	8006010 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800601c <HAL_UART_RxCpltCallback+0x3c>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8005ff8:	4b09      	ldr	r3, [pc, #36]	@ (8006020 <HAL_UART_RxCpltCallback+0x40>)
 8005ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ffe:	801a      	strh	r2, [r3, #0]
    LOG_DEBUG("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8006000:	4b07      	ldr	r3, [pc, #28]	@ (8006020 <HAL_UART_RxCpltCallback+0x40>)
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	4906      	ldr	r1, [pc, #24]	@ (8006024 <HAL_UART_RxCpltCallback+0x44>)
 800600a:	2000      	movs	r0, #0
 800600c:	f7ff fb80 	bl	8005710 <LOGGER_SendFormatted>
  }
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40011400 	.word	0x40011400
 800601c:	200024c1 	.word	0x200024c1
 8006020:	200024c4 	.word	0x200024c4
 8006024:	0801be8c 	.word	0x0801be8c

08006028 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a05      	ldr	r2, [pc, #20]	@ (800604c <HAL_UART_RxHalfCpltCallback+0x24>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d103      	bne.n	8006042 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 800603a:	4905      	ldr	r1, [pc, #20]	@ (8006050 <HAL_UART_RxHalfCpltCallback+0x28>)
 800603c:	2002      	movs	r0, #2
 800603e:	f7ff fb67 	bl	8005710 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40011400 	.word	0x40011400
 8006050:	0801bec4 	.word	0x0801bec4

08006054 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a3c      	ldr	r2, [pc, #240]	@ (8006154 <HAL_UART_ErrorCallback+0x100>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d171      	bne.n	800614a <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 8006066:	4b3c      	ldr	r3, [pc, #240]	@ (8006158 <HAL_UART_ErrorCallback+0x104>)
 8006068:	2201      	movs	r2, #1
 800606a:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 800606c:	493b      	ldr	r1, [pc, #236]	@ (800615c <HAL_UART_ErrorCallback+0x108>)
 800606e:	2002      	movs	r0, #2
 8006070:	f7ff fb4e 	bl	8005710 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b08      	cmp	r3, #8
 8006080:	d107      	bne.n	8006092 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2208      	movs	r2, #8
 8006088:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 800608a:	4935      	ldr	r1, [pc, #212]	@ (8006160 <HAL_UART_ErrorCallback+0x10c>)
 800608c:	2002      	movs	r0, #2
 800608e:	f7ff fb3f 	bl	8005710 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b04      	cmp	r3, #4
 800609e:	d107      	bne.n	80060b0 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2204      	movs	r2, #4
 80060a6:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 80060a8:	492e      	ldr	r1, [pc, #184]	@ (8006164 <HAL_UART_ErrorCallback+0x110>)
 80060aa:	2002      	movs	r0, #2
 80060ac:	f7ff fb30 	bl	8005710 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d107      	bne.n	80060ce <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2202      	movs	r2, #2
 80060c4:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 80060c6:	4928      	ldr	r1, [pc, #160]	@ (8006168 <HAL_UART_ErrorCallback+0x114>)
 80060c8:	2002      	movs	r0, #2
 80060ca:	f7ff fb21 	bl	8005710 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d107      	bne.n	80060ec <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2201      	movs	r2, #1
 80060e2:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 80060e4:	4921      	ldr	r1, [pc, #132]	@ (800616c <HAL_UART_ErrorCallback+0x118>)
 80060e6:	2002      	movs	r0, #2
 80060e8:	f7ff fb12 	bl	8005710 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f009 f9ec 	bl	800f4ca <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006104:	2b00      	cmp	r3, #0
 8006106:	d004      	beq.n	8006112 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8006112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006116:	2100      	movs	r1, #0
 8006118:	4815      	ldr	r0, [pc, #84]	@ (8006170 <HAL_UART_ErrorCallback+0x11c>)
 800611a:	f011 fce5 	bl	8017ae8 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800611e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006122:	4913      	ldr	r1, [pc, #76]	@ (8006170 <HAL_UART_ErrorCallback+0x11c>)
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f009 f98c 	bl	800f442 <HAL_UART_Receive_DMA>
 800612a:	4603      	mov	r3, r0
 800612c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800612e:	7bfb      	ldrb	r3, [r7, #15]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8006134:	490f      	ldr	r1, [pc, #60]	@ (8006174 <HAL_UART_ErrorCallback+0x120>)
 8006136:	2001      	movs	r0, #1
 8006138:	f7ff faea 	bl	8005710 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 800613c:	e005      	b.n	800614a <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	461a      	mov	r2, r3
 8006142:	490d      	ldr	r1, [pc, #52]	@ (8006178 <HAL_UART_ErrorCallback+0x124>)
 8006144:	2003      	movs	r0, #3
 8006146:	f7ff fae3 	bl	8005710 <LOGGER_SendFormatted>
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	40011400 	.word	0x40011400
 8006158:	200024c2 	.word	0x200024c2
 800615c:	0801bf10 	.word	0x0801bf10
 8006160:	0801bf3c 	.word	0x0801bf3c
 8006164:	0801bf58 	.word	0x0801bf58
 8006168:	0801bf74 	.word	0x0801bf74
 800616c:	0801bf90 	.word	0x0801bf90
 8006170:	200024c8 	.word	0x200024c8
 8006174:	0801bfac 	.word	0x0801bfac
 8006178:	0801bfe0 	.word	0x0801bfe0

0800617c <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af02      	add	r7, sp, #8
 8006182:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a3e      	ldr	r2, [pc, #248]	@ (8006284 <USER_UART_IDLECallback+0x108>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d175      	bne.n	800627a <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b08      	cmp	r3, #8
 800619e:	d103      	bne.n	80061a8 <USER_UART_IDLECallback+0x2c>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f043 0301 	orr.w	r3, r3, #1
 80061a6:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d103      	bne.n	80061be <USER_UART_IDLECallback+0x42>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f043 0302 	orr.w	r3, r3, #2
 80061bc:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d103      	bne.n	80061d4 <USER_UART_IDLECallback+0x58>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f043 0304 	orr.w	r3, r3, #4
 80061d2:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d103      	bne.n	80061ea <USER_UART_IDLECallback+0x6e>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f043 0308 	orr.w	r3, r3, #8
 80061e8:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 80061f4:	897b      	ldrh	r3, [r7, #10]
 80061f6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	4b22      	ldr	r3, [pc, #136]	@ (8006288 <USER_UART_IDLECallback+0x10c>)
 80061fe:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8006200:	4b21      	ldr	r3, [pc, #132]	@ (8006288 <USER_UART_IDLECallback+0x10c>)
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d033      	beq.n	8006272 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 800620a:	4b20      	ldr	r3, [pc, #128]	@ (800628c <USER_UART_IDLECallback+0x110>)
 800620c:	2201      	movs	r2, #1
 800620e:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 8006216:	4b1c      	ldr	r3, [pc, #112]	@ (8006288 <USER_UART_IDLECallback+0x10c>)
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	461a      	mov	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	491b      	ldr	r1, [pc, #108]	@ (8006290 <USER_UART_IDLECallback+0x114>)
 8006222:	2002      	movs	r0, #2
 8006224:	f7ff fa74 	bl	8005710 <LOGGER_SendFormatted>
 8006228:	e007      	b.n	800623a <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_DEBUG("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 800622a:	4b17      	ldr	r3, [pc, #92]	@ (8006288 <USER_UART_IDLECallback+0x10c>)
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	4918      	ldr	r1, [pc, #96]	@ (8006294 <USER_UART_IDLECallback+0x118>)
 8006234:	2000      	movs	r0, #0
 8006236:	f7ff fa6b 	bl	8005710 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 800623a:	4b13      	ldr	r3, [pc, #76]	@ (8006288 <USER_UART_IDLECallback+0x10c>)
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	2b03      	cmp	r3, #3
 8006242:	d912      	bls.n	800626a <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8006244:	4b14      	ldr	r3, [pc, #80]	@ (8006298 <USER_UART_IDLECallback+0x11c>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	4619      	mov	r1, r3
 800624a:	4b13      	ldr	r3, [pc, #76]	@ (8006298 <USER_UART_IDLECallback+0x11c>)
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	4618      	mov	r0, r3
 8006250:	4b11      	ldr	r3, [pc, #68]	@ (8006298 <USER_UART_IDLECallback+0x11c>)
 8006252:	789b      	ldrb	r3, [r3, #2]
 8006254:	461a      	mov	r2, r3
 8006256:	4b10      	ldr	r3, [pc, #64]	@ (8006298 <USER_UART_IDLECallback+0x11c>)
 8006258:	78db      	ldrb	r3, [r3, #3]
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	9200      	str	r2, [sp, #0]
 800625e:	4603      	mov	r3, r0
 8006260:	460a      	mov	r2, r1
 8006262:	490e      	ldr	r1, [pc, #56]	@ (800629c <USER_UART_IDLECallback+0x120>)
 8006264:	2000      	movs	r0, #0
 8006266:	f7ff fa53 	bl	8005710 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f009 f92d 	bl	800f4ca <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8006270:	e003      	b.n	800627a <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 8006272:	490b      	ldr	r1, [pc, #44]	@ (80062a0 <USER_UART_IDLECallback+0x124>)
 8006274:	2000      	movs	r0, #0
 8006276:	f7ff fa4b 	bl	8005710 <LOGGER_SendFormatted>
}
 800627a:	bf00      	nop
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40011400 	.word	0x40011400
 8006288:	200024c4 	.word	0x200024c4
 800628c:	200024c1 	.word	0x200024c1
 8006290:	0801c018 	.word	0x0801c018
 8006294:	0801c058 	.word	0x0801c058
 8006298:	200024c8 	.word	0x200024c8
 800629c:	0801c080 	.word	0x0801c080
 80062a0:	0801c0ac 	.word	0x0801c0ac

080062a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80062a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80062dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80062a8:	f7ff f986 	bl	80055b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80062ac:	480c      	ldr	r0, [pc, #48]	@ (80062e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80062ae:	490d      	ldr	r1, [pc, #52]	@ (80062e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80062b0:	4a0d      	ldr	r2, [pc, #52]	@ (80062e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80062b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062b4:	e002      	b.n	80062bc <LoopCopyDataInit>

080062b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062ba:	3304      	adds	r3, #4

080062bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062c0:	d3f9      	bcc.n	80062b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062c2:	4a0a      	ldr	r2, [pc, #40]	@ (80062ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80062c4:	4c0a      	ldr	r4, [pc, #40]	@ (80062f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80062c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062c8:	e001      	b.n	80062ce <LoopFillZerobss>

080062ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062cc:	3204      	adds	r2, #4

080062ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062d0:	d3fb      	bcc.n	80062ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80062d2:	f011 fca3 	bl	8017c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80062d6:	f7fb feeb 	bl	80020b0 <main>
  bx  lr    
 80062da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80062dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80062e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062e4:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80062e8:	0801c240 	.word	0x0801c240
  ldr r2, =_sbss
 80062ec:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80062f0:	200131b0 	.word	0x200131b0

080062f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062f4:	e7fe      	b.n	80062f4 <ADC_IRQHandler>

080062f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062fa:	2003      	movs	r0, #3
 80062fc:	f000 fb91 	bl	8006a22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006300:	2000      	movs	r0, #0
 8006302:	f7fe ffd5 	bl	80052b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006306:	f7fd ff37 	bl	8004178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006314:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <HAL_IncTick+0x20>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	4b06      	ldr	r3, [pc, #24]	@ (8006334 <HAL_IncTick+0x24>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4413      	add	r3, r2
 8006320:	4a04      	ldr	r2, [pc, #16]	@ (8006334 <HAL_IncTick+0x24>)
 8006322:	6013      	str	r3, [r2, #0]
}
 8006324:	bf00      	nop
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000070 	.word	0x20000070
 8006334:	200026cc 	.word	0x200026cc

08006338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
  return uwTick;
 800633c:	4b03      	ldr	r3, [pc, #12]	@ (800634c <HAL_GetTick+0x14>)
 800633e:	681b      	ldr	r3, [r3, #0]
}
 8006340:	4618      	mov	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	200026cc 	.word	0x200026cc

08006350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006358:	f7ff ffee 	bl	8006338 <HAL_GetTick>
 800635c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d005      	beq.n	8006376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800636a:	4b0a      	ldr	r3, [pc, #40]	@ (8006394 <HAL_Delay+0x44>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006376:	bf00      	nop
 8006378:	f7ff ffde 	bl	8006338 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	429a      	cmp	r2, r3
 8006386:	d8f7      	bhi.n	8006378 <HAL_Delay+0x28>
  {
  }
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20000070 	.word	0x20000070

08006398 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e031      	b.n	8006412 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fd ff06 	bl	80041c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d116      	bne.n	8006404 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063da:	4b10      	ldr	r3, [pc, #64]	@ (800641c <HAL_ADC_Init+0x84>)
 80063dc:	4013      	ands	r3, r2
 80063de:	f043 0202 	orr.w	r2, r3, #2
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f974 	bl	80066d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	f043 0201 	orr.w	r2, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	641a      	str	r2, [r3, #64]	@ 0x40
 8006402:	e001      	b.n	8006408 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	ffffeefd 	.word	0xffffeefd

08006420 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_ADC_ConfigChannel+0x1c>
 8006438:	2302      	movs	r3, #2
 800643a:	e13a      	b.n	80066b2 <HAL_ADC_ConfigChannel+0x292>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b09      	cmp	r3, #9
 800644a:	d93a      	bls.n	80064c2 <HAL_ADC_ConfigChannel+0xa2>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006454:	d035      	beq.n	80064c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68d9      	ldr	r1, [r3, #12]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	4613      	mov	r3, r2
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	4413      	add	r3, r2
 800646a:	3b1e      	subs	r3, #30
 800646c:	2207      	movs	r2, #7
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	43da      	mvns	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	400a      	ands	r2, r1
 800647a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a8f      	ldr	r2, [pc, #572]	@ (80066c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d10a      	bne.n	800649c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68d9      	ldr	r1, [r3, #12]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	061a      	lsls	r2, r3, #24
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800649a:	e039      	b.n	8006510 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68d9      	ldr	r1, [r3, #12]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	4618      	mov	r0, r3
 80064ae:	4603      	mov	r3, r0
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	4403      	add	r3, r0
 80064b4:	3b1e      	subs	r3, #30
 80064b6:	409a      	lsls	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064c0:	e026      	b.n	8006510 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6919      	ldr	r1, [r3, #16]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	4613      	mov	r3, r2
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	4413      	add	r3, r2
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2207      	movs	r2, #7
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	43da      	mvns	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	400a      	ands	r2, r1
 80064e8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6919      	ldr	r1, [r3, #16]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	4618      	mov	r0, r3
 80064fc:	4603      	mov	r3, r0
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	4403      	add	r3, r0
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	409a      	lsls	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	2b06      	cmp	r3, #6
 8006516:	d824      	bhi.n	8006562 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	3b05      	subs	r3, #5
 800652a:	221f      	movs	r2, #31
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	43da      	mvns	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	400a      	ands	r2, r1
 8006538:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	4618      	mov	r0, r3
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	3b05      	subs	r3, #5
 8006554:	fa00 f203 	lsl.w	r2, r0, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006560:	e04c      	b.n	80065fc <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b0c      	cmp	r3, #12
 8006568:	d824      	bhi.n	80065b4 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	3b23      	subs	r3, #35	@ 0x23
 800657c:	221f      	movs	r2, #31
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	43da      	mvns	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	400a      	ands	r2, r1
 800658a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	4618      	mov	r0, r3
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	3b23      	subs	r3, #35	@ 0x23
 80065a6:	fa00 f203 	lsl.w	r2, r0, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80065b2:	e023      	b.n	80065fc <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	3b41      	subs	r3, #65	@ 0x41
 80065c6:	221f      	movs	r2, #31
 80065c8:	fa02 f303 	lsl.w	r3, r2, r3
 80065cc:	43da      	mvns	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	400a      	ands	r2, r1
 80065d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	4618      	mov	r0, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	3b41      	subs	r3, #65	@ 0x41
 80065f0:	fa00 f203 	lsl.w	r2, r0, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a30      	ldr	r2, [pc, #192]	@ (80066c4 <HAL_ADC_ConfigChannel+0x2a4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d10a      	bne.n	800661c <HAL_ADC_ConfigChannel+0x1fc>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800660e:	d105      	bne.n	800661c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006610:	4b2d      	ldr	r3, [pc, #180]	@ (80066c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	4a2c      	ldr	r2, [pc, #176]	@ (80066c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8006616:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800661a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a28      	ldr	r2, [pc, #160]	@ (80066c4 <HAL_ADC_ConfigChannel+0x2a4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d10f      	bne.n	8006646 <HAL_ADC_ConfigChannel+0x226>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b12      	cmp	r3, #18
 800662c:	d10b      	bne.n	8006646 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800662e:	4b26      	ldr	r3, [pc, #152]	@ (80066c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	4a25      	ldr	r2, [pc, #148]	@ (80066c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8006634:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006638:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800663a:	4b23      	ldr	r3, [pc, #140]	@ (80066c8 <HAL_ADC_ConfigChannel+0x2a8>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	4a22      	ldr	r2, [pc, #136]	@ (80066c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8006640:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006644:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1e      	ldr	r2, [pc, #120]	@ (80066c4 <HAL_ADC_ConfigChannel+0x2a4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d12b      	bne.n	80066a8 <HAL_ADC_ConfigChannel+0x288>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1a      	ldr	r2, [pc, #104]	@ (80066c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d003      	beq.n	8006662 <HAL_ADC_ConfigChannel+0x242>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b11      	cmp	r3, #17
 8006660:	d122      	bne.n	80066a8 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006662:	4b19      	ldr	r3, [pc, #100]	@ (80066c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	4a18      	ldr	r2, [pc, #96]	@ (80066c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8006668:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800666c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800666e:	4b16      	ldr	r3, [pc, #88]	@ (80066c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	4a15      	ldr	r2, [pc, #84]	@ (80066c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8006674:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006678:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a10      	ldr	r2, [pc, #64]	@ (80066c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d111      	bne.n	80066a8 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006684:	4b11      	ldr	r3, [pc, #68]	@ (80066cc <HAL_ADC_ConfigChannel+0x2ac>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a11      	ldr	r2, [pc, #68]	@ (80066d0 <HAL_ADC_ConfigChannel+0x2b0>)
 800668a:	fba2 2303 	umull	r2, r3, r2, r3
 800668e:	0c9a      	lsrs	r2, r3, #18
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800669a:	e002      	b.n	80066a2 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3b01      	subs	r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1f9      	bne.n	800669c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	10000012 	.word	0x10000012
 80066c4:	40012000 	.word	0x40012000
 80066c8:	40012300 	.word	0x40012300
 80066cc:	2000001c 	.word	0x2000001c
 80066d0:	431bde83 	.word	0x431bde83

080066d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80066dc:	4b78      	ldr	r3, [pc, #480]	@ (80068c0 <ADC_Init+0x1ec>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4a77      	ldr	r2, [pc, #476]	@ (80068c0 <ADC_Init+0x1ec>)
 80066e2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80066e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80066e8:	4b75      	ldr	r3, [pc, #468]	@ (80068c0 <ADC_Init+0x1ec>)
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	4973      	ldr	r1, [pc, #460]	@ (80068c0 <ADC_Init+0x1ec>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6859      	ldr	r1, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	021a      	lsls	r2, r3, #8
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6859      	ldr	r1, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800674a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6899      	ldr	r1, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006762:	4a58      	ldr	r2, [pc, #352]	@ (80068c4 <ADC_Init+0x1f0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d022      	beq.n	80067ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006776:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6899      	ldr	r1, [r3, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6899      	ldr	r1, [r3, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	609a      	str	r2, [r3, #8]
 80067ac:	e00f      	b.n	80067ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80067bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80067cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0202 	bic.w	r2, r2, #2
 80067dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6899      	ldr	r1, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	005a      	lsls	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01b      	beq.n	8006834 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800680a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800681a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6859      	ldr	r1, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006826:	3b01      	subs	r3, #1
 8006828:	035a      	lsls	r2, r3, #13
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	e007      	b.n	8006844 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006842:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006852:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	3b01      	subs	r3, #1
 8006860:	051a      	lsls	r2, r3, #20
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6899      	ldr	r1, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006886:	025a      	lsls	r2, r3, #9
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800689e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6899      	ldr	r1, [r3, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	029a      	lsls	r2, r3, #10
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	609a      	str	r2, [r3, #8]
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	40012300 	.word	0x40012300
 80068c4:	0f000001 	.word	0x0f000001

080068c8 <__NVIC_SetPriorityGrouping>:
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006908 <__NVIC_SetPriorityGrouping+0x40>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80068e4:	4013      	ands	r3, r2
 80068e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80068f0:	4b06      	ldr	r3, [pc, #24]	@ (800690c <__NVIC_SetPriorityGrouping+0x44>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068f6:	4a04      	ldr	r2, [pc, #16]	@ (8006908 <__NVIC_SetPriorityGrouping+0x40>)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	60d3      	str	r3, [r2, #12]
}
 80068fc:	bf00      	nop
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	e000ed00 	.word	0xe000ed00
 800690c:	05fa0000 	.word	0x05fa0000

08006910 <__NVIC_GetPriorityGrouping>:
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006914:	4b04      	ldr	r3, [pc, #16]	@ (8006928 <__NVIC_GetPriorityGrouping+0x18>)
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	0a1b      	lsrs	r3, r3, #8
 800691a:	f003 0307 	and.w	r3, r3, #7
}
 800691e:	4618      	mov	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	e000ed00 	.word	0xe000ed00

0800692c <__NVIC_EnableIRQ>:
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693a:	2b00      	cmp	r3, #0
 800693c:	db0b      	blt.n	8006956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	f003 021f 	and.w	r2, r3, #31
 8006944:	4907      	ldr	r1, [pc, #28]	@ (8006964 <__NVIC_EnableIRQ+0x38>)
 8006946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	2001      	movs	r0, #1
 800694e:	fa00 f202 	lsl.w	r2, r0, r2
 8006952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	e000e100 	.word	0xe000e100

08006968 <__NVIC_SetPriority>:
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	6039      	str	r1, [r7, #0]
 8006972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006978:	2b00      	cmp	r3, #0
 800697a:	db0a      	blt.n	8006992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	b2da      	uxtb	r2, r3
 8006980:	490c      	ldr	r1, [pc, #48]	@ (80069b4 <__NVIC_SetPriority+0x4c>)
 8006982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006986:	0112      	lsls	r2, r2, #4
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	440b      	add	r3, r1
 800698c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006990:	e00a      	b.n	80069a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	b2da      	uxtb	r2, r3
 8006996:	4908      	ldr	r1, [pc, #32]	@ (80069b8 <__NVIC_SetPriority+0x50>)
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	3b04      	subs	r3, #4
 80069a0:	0112      	lsls	r2, r2, #4
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	440b      	add	r3, r1
 80069a6:	761a      	strb	r2, [r3, #24]
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	e000e100 	.word	0xe000e100
 80069b8:	e000ed00 	.word	0xe000ed00

080069bc <NVIC_EncodePriority>:
{
 80069bc:	b480      	push	{r7}
 80069be:	b089      	sub	sp, #36	@ 0x24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	f1c3 0307 	rsb	r3, r3, #7
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	bf28      	it	cs
 80069da:	2304      	movcs	r3, #4
 80069dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	3304      	adds	r3, #4
 80069e2:	2b06      	cmp	r3, #6
 80069e4:	d902      	bls.n	80069ec <NVIC_EncodePriority+0x30>
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	3b03      	subs	r3, #3
 80069ea:	e000      	b.n	80069ee <NVIC_EncodePriority+0x32>
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069f0:	f04f 32ff 	mov.w	r2, #4294967295
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	fa02 f303 	lsl.w	r3, r2, r3
 80069fa:	43da      	mvns	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	401a      	ands	r2, r3
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a04:	f04f 31ff 	mov.w	r1, #4294967295
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a0e:	43d9      	mvns	r1, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a14:	4313      	orrs	r3, r2
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3724      	adds	r7, #36	@ 0x24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff ff4c 	bl	80068c8 <__NVIC_SetPriorityGrouping>
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a4a:	f7ff ff61 	bl	8006910 <__NVIC_GetPriorityGrouping>
 8006a4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	6978      	ldr	r0, [r7, #20]
 8006a56:	f7ff ffb1 	bl	80069bc <NVIC_EncodePriority>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a60:	4611      	mov	r1, r2
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff ff80 	bl	8006968 <__NVIC_SetPriority>
}
 8006a68:	bf00      	nop
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff ff54 	bl	800692c <__NVIC_EnableIRQ>
}
 8006a84:	bf00      	nop
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e054      	b.n	8006b48 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	7f5b      	ldrb	r3, [r3, #29]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d105      	bne.n	8006ab4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7fd fbe4 	bl	800427c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	791b      	ldrb	r3, [r3, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10c      	bne.n	8006adc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a22      	ldr	r2, [pc, #136]	@ (8006b50 <HAL_CRC_Init+0xc4>)
 8006ac8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0218 	bic.w	r2, r2, #24
 8006ad8:	609a      	str	r2, [r3, #8]
 8006ada:	e00c      	b.n	8006af6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6899      	ldr	r1, [r3, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f834 	bl	8006b54 <HAL_CRCEx_Polynomial_Set>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e028      	b.n	8006b48 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	795b      	ldrb	r3, [r3, #5]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d105      	bne.n	8006b0a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295
 8006b06:	611a      	str	r2, [r3, #16]
 8006b08:	e004      	b.n	8006b14 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6912      	ldr	r2, [r2, #16]
 8006b12:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	695a      	ldr	r2, [r3, #20]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	04c11db7 	.word	0x04c11db7

08006b54 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006b64:	231f      	movs	r3, #31
 8006b66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d102      	bne.n	8006b78 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	75fb      	strb	r3, [r7, #23]
 8006b76:	e063      	b.n	8006c40 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006b78:	bf00      	nop
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1e5a      	subs	r2, r3, #1
 8006b7e:	613a      	str	r2, [r7, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d009      	beq.n	8006b98 <HAL_CRCEx_Polynomial_Set+0x44>
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0f0      	beq.n	8006b7a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b18      	cmp	r3, #24
 8006b9c:	d846      	bhi.n	8006c2c <HAL_CRCEx_Polynomial_Set+0xd8>
 8006b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba4:	08006c33 	.word	0x08006c33
 8006ba8:	08006c2d 	.word	0x08006c2d
 8006bac:	08006c2d 	.word	0x08006c2d
 8006bb0:	08006c2d 	.word	0x08006c2d
 8006bb4:	08006c2d 	.word	0x08006c2d
 8006bb8:	08006c2d 	.word	0x08006c2d
 8006bbc:	08006c2d 	.word	0x08006c2d
 8006bc0:	08006c2d 	.word	0x08006c2d
 8006bc4:	08006c21 	.word	0x08006c21
 8006bc8:	08006c2d 	.word	0x08006c2d
 8006bcc:	08006c2d 	.word	0x08006c2d
 8006bd0:	08006c2d 	.word	0x08006c2d
 8006bd4:	08006c2d 	.word	0x08006c2d
 8006bd8:	08006c2d 	.word	0x08006c2d
 8006bdc:	08006c2d 	.word	0x08006c2d
 8006be0:	08006c2d 	.word	0x08006c2d
 8006be4:	08006c15 	.word	0x08006c15
 8006be8:	08006c2d 	.word	0x08006c2d
 8006bec:	08006c2d 	.word	0x08006c2d
 8006bf0:	08006c2d 	.word	0x08006c2d
 8006bf4:	08006c2d 	.word	0x08006c2d
 8006bf8:	08006c2d 	.word	0x08006c2d
 8006bfc:	08006c2d 	.word	0x08006c2d
 8006c00:	08006c2d 	.word	0x08006c2d
 8006c04:	08006c09 	.word	0x08006c09
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b06      	cmp	r3, #6
 8006c0c:	d913      	bls.n	8006c36 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006c12:	e010      	b.n	8006c36 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2b07      	cmp	r3, #7
 8006c18:	d90f      	bls.n	8006c3a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006c1e:	e00c      	b.n	8006c3a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2b0f      	cmp	r3, #15
 8006c24:	d90b      	bls.n	8006c3e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006c2a:	e008      	b.n	8006c3e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	75fb      	strb	r3, [r7, #23]
        break;
 8006c30:	e006      	b.n	8006c40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006c32:	bf00      	nop
 8006c34:	e004      	b.n	8006c40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006c36:	bf00      	nop
 8006c38:	e002      	b.n	8006c40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006c3a:	bf00      	nop
 8006c3c:	e000      	b.n	8006c40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006c3e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10d      	bne.n	8006c62 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f023 0118 	bic.w	r1, r3, #24
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e069      	b.n	8006d56 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fd fb14 	bl	80042bc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6819      	ldr	r1, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8006d60 <HAL_DCMI_Init+0xf0>)
 8006cb6:	400b      	ands	r3, r1
 8006cb8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6819      	ldr	r1, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006cce:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006cda:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006ce6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cec:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006cf2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006cfe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2b10      	cmp	r3, #16
 8006d0e:	d112      	bne.n	8006d36 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	7f1b      	ldrb	r3, [r3, #28]
 8006d14:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	7f5b      	ldrb	r3, [r3, #29]
 8006d1a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006d1c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	7f9b      	ldrb	r3, [r3, #30]
 8006d22:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006d24:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7fdb      	ldrb	r3, [r3, #31]
 8006d2c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006d32:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006d34:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 021e 	orr.w	r2, r2, #30
 8006d44:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	ffe0f007 	.word	0xffe0f007

08006d64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006d70:	f7ff fae2 	bl	8006338 <HAL_GetTick>
 8006d74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e099      	b.n	8006eb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0201 	bic.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006da0:	e00f      	b.n	8006dc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006da2:	f7ff fac9 	bl	8006338 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b05      	cmp	r3, #5
 8006dae:	d908      	bls.n	8006dc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2203      	movs	r2, #3
 8006dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e078      	b.n	8006eb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e8      	bne.n	8006da2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4b38      	ldr	r3, [pc, #224]	@ (8006ebc <HAL_DMA_Init+0x158>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d107      	bne.n	8006e2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e24:	4313      	orrs	r3, r2
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f023 0307 	bic.w	r3, r3, #7
 8006e42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d117      	bne.n	8006e86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00e      	beq.n	8006e86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fb73 	bl	8007554 <DMA_CheckFifoParam>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2240      	movs	r2, #64	@ 0x40
 8006e78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006e82:	2301      	movs	r3, #1
 8006e84:	e016      	b.n	8006eb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fb2a 	bl	80074e8 <DMA_CalcBaseAndBitshift>
 8006e94:	4603      	mov	r3, r0
 8006e96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e9c:	223f      	movs	r2, #63	@ 0x3f
 8006e9e:	409a      	lsls	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	f010803f 	.word	0xf010803f

08006ec0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e050      	b.n	8006f74 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d101      	bne.n	8006ee2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006ede:	2302      	movs	r3, #2
 8006ee0:	e048      	b.n	8006f74 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0201 	bic.w	r2, r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2200      	movs	r2, #0
 8006f00:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2200      	movs	r2, #0
 8006f08:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2200      	movs	r2, #0
 8006f18:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2221      	movs	r2, #33	@ 0x21
 8006f20:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fae0 	bl	80074e8 <DMA_CalcBaseAndBitshift>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f30:	223f      	movs	r2, #63	@ 0x3f
 8006f32:	409a      	lsls	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <HAL_DMA_Start_IT+0x26>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e048      	b.n	8007034 <HAL_DMA_Start_IT+0xb8>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d137      	bne.n	8007026 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 fa5e 	bl	800748c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fd4:	223f      	movs	r2, #63	@ 0x3f
 8006fd6:	409a      	lsls	r2, r3
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0216 	orr.w	r2, r2, #22
 8006fea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	695a      	ldr	r2, [r3, #20]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ffa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0208 	orr.w	r2, r2, #8
 8007012:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	e005      	b.n	8007032 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800702e:	2302      	movs	r3, #2
 8007030:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007032:	7dfb      	ldrb	r3, [r7, #23]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007048:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800704a:	f7ff f975 	bl	8006338 <HAL_GetTick>
 800704e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d008      	beq.n	800706e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2280      	movs	r2, #128	@ 0x80
 8007060:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e052      	b.n	8007114 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0216 	bic.w	r2, r2, #22
 800707c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695a      	ldr	r2, [r3, #20]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800708c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	d103      	bne.n	800709e <HAL_DMA_Abort+0x62>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800709a:	2b00      	cmp	r3, #0
 800709c:	d007      	beq.n	80070ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0208 	bic.w	r2, r2, #8
 80070ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0201 	bic.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070be:	e013      	b.n	80070e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070c0:	f7ff f93a 	bl	8006338 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b05      	cmp	r3, #5
 80070cc:	d90c      	bls.n	80070e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2220      	movs	r2, #32
 80070d2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2203      	movs	r2, #3
 80070d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e015      	b.n	8007114 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e4      	bne.n	80070c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070fa:	223f      	movs	r2, #63	@ 0x3f
 80070fc:	409a      	lsls	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d004      	beq.n	800713a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2280      	movs	r2, #128	@ 0x80
 8007134:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e00c      	b.n	8007154 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2205      	movs	r2, #5
 800713e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0201 	bic.w	r2, r2, #1
 8007150:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800716c:	4b8e      	ldr	r3, [pc, #568]	@ (80073a8 <HAL_DMA_IRQHandler+0x248>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a8e      	ldr	r2, [pc, #568]	@ (80073ac <HAL_DMA_IRQHandler+0x24c>)
 8007172:	fba2 2303 	umull	r2, r3, r2, r3
 8007176:	0a9b      	lsrs	r3, r3, #10
 8007178:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800718a:	2208      	movs	r2, #8
 800718c:	409a      	lsls	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4013      	ands	r3, r2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d01a      	beq.n	80071cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d013      	beq.n	80071cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0204 	bic.w	r2, r2, #4
 80071b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b8:	2208      	movs	r2, #8
 80071ba:	409a      	lsls	r2, r3
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c4:	f043 0201 	orr.w	r2, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071d0:	2201      	movs	r2, #1
 80071d2:	409a      	lsls	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4013      	ands	r3, r2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d012      	beq.n	8007202 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00b      	beq.n	8007202 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ee:	2201      	movs	r2, #1
 80071f0:	409a      	lsls	r2, r3
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071fa:	f043 0202 	orr.w	r2, r3, #2
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007206:	2204      	movs	r2, #4
 8007208:	409a      	lsls	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4013      	ands	r3, r2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d012      	beq.n	8007238 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007224:	2204      	movs	r2, #4
 8007226:	409a      	lsls	r2, r3
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007230:	f043 0204 	orr.w	r2, r3, #4
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800723c:	2210      	movs	r2, #16
 800723e:	409a      	lsls	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4013      	ands	r3, r2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d043      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	2b00      	cmp	r3, #0
 8007254:	d03c      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800725a:	2210      	movs	r2, #16
 800725c:	409a      	lsls	r2, r3
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d018      	beq.n	80072a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d108      	bne.n	8007290 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	d024      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
 800728e:	e01f      	b.n	80072d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01b      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
 80072a0:	e016      	b.n	80072d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d107      	bne.n	80072c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0208 	bic.w	r2, r2, #8
 80072be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d4:	2220      	movs	r2, #32
 80072d6:	409a      	lsls	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4013      	ands	r3, r2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 808f 	beq.w	8007400 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 8087 	beq.w	8007400 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f6:	2220      	movs	r2, #32
 80072f8:	409a      	lsls	r2, r3
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b05      	cmp	r3, #5
 8007308:	d136      	bne.n	8007378 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 0216 	bic.w	r2, r2, #22
 8007318:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	695a      	ldr	r2, [r3, #20]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007328:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <HAL_DMA_IRQHandler+0x1da>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007336:	2b00      	cmp	r3, #0
 8007338:	d007      	beq.n	800734a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0208 	bic.w	r2, r2, #8
 8007348:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800734e:	223f      	movs	r2, #63	@ 0x3f
 8007350:	409a      	lsls	r2, r3
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800736a:	2b00      	cmp	r3, #0
 800736c:	d07e      	beq.n	800746c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	4798      	blx	r3
        }
        return;
 8007376:	e079      	b.n	800746c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d01d      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10d      	bne.n	80073b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007398:	2b00      	cmp	r3, #0
 800739a:	d031      	beq.n	8007400 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
 80073a4:	e02c      	b.n	8007400 <HAL_DMA_IRQHandler+0x2a0>
 80073a6:	bf00      	nop
 80073a8:	2000001c 	.word	0x2000001c
 80073ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d023      	beq.n	8007400 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	4798      	blx	r3
 80073c0:	e01e      	b.n	8007400 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10f      	bne.n	80073f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0210 	bic.w	r2, r2, #16
 80073de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007404:	2b00      	cmp	r3, #0
 8007406:	d032      	beq.n	800746e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d022      	beq.n	800745a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2205      	movs	r2, #5
 8007418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0201 	bic.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	3301      	adds	r3, #1
 8007430:	60bb      	str	r3, [r7, #8]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	429a      	cmp	r2, r3
 8007436:	d307      	bcc.n	8007448 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1f2      	bne.n	800742c <HAL_DMA_IRQHandler+0x2cc>
 8007446:	e000      	b.n	800744a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007448:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800745e:	2b00      	cmp	r3, #0
 8007460:	d005      	beq.n	800746e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	4798      	blx	r3
 800746a:	e000      	b.n	800746e <HAL_DMA_IRQHandler+0x30e>
        return;
 800746c:	bf00      	nop
    }
  }
}
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80074a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	2b40      	cmp	r3, #64	@ 0x40
 80074b8:	d108      	bne.n	80074cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80074ca:	e007      	b.n	80074dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	60da      	str	r2, [r3, #12]
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	3b10      	subs	r3, #16
 80074f8:	4a13      	ldr	r2, [pc, #76]	@ (8007548 <DMA_CalcBaseAndBitshift+0x60>)
 80074fa:	fba2 2303 	umull	r2, r3, r2, r3
 80074fe:	091b      	lsrs	r3, r3, #4
 8007500:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007502:	4a12      	ldr	r2, [pc, #72]	@ (800754c <DMA_CalcBaseAndBitshift+0x64>)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b03      	cmp	r3, #3
 8007514:	d908      	bls.n	8007528 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	4b0c      	ldr	r3, [pc, #48]	@ (8007550 <DMA_CalcBaseAndBitshift+0x68>)
 800751e:	4013      	ands	r3, r2
 8007520:	1d1a      	adds	r2, r3, #4
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	659a      	str	r2, [r3, #88]	@ 0x58
 8007526:	e006      	b.n	8007536 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	4b08      	ldr	r3, [pc, #32]	@ (8007550 <DMA_CalcBaseAndBitshift+0x68>)
 8007530:	4013      	ands	r3, r2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	aaaaaaab 	.word	0xaaaaaaab
 800754c:	0801c140 	.word	0x0801c140
 8007550:	fffffc00 	.word	0xfffffc00

08007554 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007564:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d11f      	bne.n	80075ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b03      	cmp	r3, #3
 8007572:	d856      	bhi.n	8007622 <DMA_CheckFifoParam+0xce>
 8007574:	a201      	add	r2, pc, #4	@ (adr r2, 800757c <DMA_CheckFifoParam+0x28>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	0800758d 	.word	0x0800758d
 8007580:	0800759f 	.word	0x0800759f
 8007584:	0800758d 	.word	0x0800758d
 8007588:	08007623 	.word	0x08007623
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d046      	beq.n	8007626 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800759c:	e043      	b.n	8007626 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075a6:	d140      	bne.n	800762a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075ac:	e03d      	b.n	800762a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b6:	d121      	bne.n	80075fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d837      	bhi.n	800762e <DMA_CheckFifoParam+0xda>
 80075be:	a201      	add	r2, pc, #4	@ (adr r2, 80075c4 <DMA_CheckFifoParam+0x70>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	080075db 	.word	0x080075db
 80075cc:	080075d5 	.word	0x080075d5
 80075d0:	080075ed 	.word	0x080075ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	73fb      	strb	r3, [r7, #15]
      break;
 80075d8:	e030      	b.n	800763c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d025      	beq.n	8007632 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075ea:	e022      	b.n	8007632 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075f4:	d11f      	bne.n	8007636 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80075fa:	e01c      	b.n	8007636 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d903      	bls.n	800760a <DMA_CheckFifoParam+0xb6>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b03      	cmp	r3, #3
 8007606:	d003      	beq.n	8007610 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007608:	e018      	b.n	800763c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	73fb      	strb	r3, [r7, #15]
      break;
 800760e:	e015      	b.n	800763c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00e      	beq.n	800763a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
      break;
 8007620:	e00b      	b.n	800763a <DMA_CheckFifoParam+0xe6>
      break;
 8007622:	bf00      	nop
 8007624:	e00a      	b.n	800763c <DMA_CheckFifoParam+0xe8>
      break;
 8007626:	bf00      	nop
 8007628:	e008      	b.n	800763c <DMA_CheckFifoParam+0xe8>
      break;
 800762a:	bf00      	nop
 800762c:	e006      	b.n	800763c <DMA_CheckFifoParam+0xe8>
      break;
 800762e:	bf00      	nop
 8007630:	e004      	b.n	800763c <DMA_CheckFifoParam+0xe8>
      break;
 8007632:	bf00      	nop
 8007634:	e002      	b.n	800763c <DMA_CheckFifoParam+0xe8>
      break;   
 8007636:	bf00      	nop
 8007638:	e000      	b.n	800763c <DMA_CheckFifoParam+0xe8>
      break;
 800763a:	bf00      	nop
    }
  } 
  
  return status; 
 800763c:	7bfb      	ldrb	r3, [r7, #15]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop

0800764c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e039      	b.n	80076d2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fc fee0 	bl	8004438 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800769c:	f023 0107 	bic.w	r1, r3, #7
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076b2:	4b0a      	ldr	r3, [pc, #40]	@ (80076dc <HAL_DMA2D_Init+0x90>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	68d1      	ldr	r1, [r2, #12]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	430b      	orrs	r3, r1
 80076c0:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	ffffc000 	.word	0xffffc000

080076e0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d026      	beq.n	8007750 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007708:	2b00      	cmp	r3, #0
 800770a:	d021      	beq.n	8007750 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800771a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007720:	f043 0201 	orr.w	r2, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2201      	movs	r2, #1
 800772e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2204      	movs	r2, #4
 8007734:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d026      	beq.n	80077a8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d021      	beq.n	80077a8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007772:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2220      	movs	r2, #32
 800777a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007780:	f043 0202 	orr.w	r2, r3, #2
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2204      	movs	r2, #4
 800778c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f003 0308 	and.w	r3, r3, #8
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d026      	beq.n	8007800 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d021      	beq.n	8007800 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077ca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2208      	movs	r2, #8
 80077d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d8:	f043 0204 	orr.w	r2, r3, #4
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2204      	movs	r2, #4
 80077e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b00      	cmp	r3, #0
 8007808:	d013      	beq.n	8007832 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00e      	beq.n	8007832 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007822:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2204      	movs	r2, #4
 800782a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f853 	bl	80078d8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d024      	beq.n	8007886 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007842:	2b00      	cmp	r3, #0
 8007844:	d01f      	beq.n	8007886 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007854:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2202      	movs	r2, #2
 800785c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f003 0310 	and.w	r3, r3, #16
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01f      	beq.n	80078d0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d01a      	beq.n	80078d0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078a8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2210      	movs	r2, #16
 80078b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f80e 	bl	80078ec <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_DMA2D_ConfigLayer+0x20>
 800791c:	2302      	movs	r3, #2
 800791e:	e079      	b.n	8007a14 <HAL_DMA2D_ConfigLayer+0x114>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	3318      	adds	r3, #24
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	4413      	add	r3, r2
 800793a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	041b      	lsls	r3, r3, #16
 8007946:	4313      	orrs	r3, r2
 8007948:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800794a:	4b35      	ldr	r3, [pc, #212]	@ (8007a20 <HAL_DMA2D_ConfigLayer+0x120>)
 800794c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	2b0a      	cmp	r3, #10
 8007954:	d003      	beq.n	800795e <HAL_DMA2D_ConfigLayer+0x5e>
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b09      	cmp	r3, #9
 800795c:	d107      	bne.n	800796e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4313      	orrs	r3, r2
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	e005      	b.n	800797a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	061b      	lsls	r3, r3, #24
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d120      	bne.n	80079c2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	43db      	mvns	r3, r3
 800798a:	ea02 0103 	and.w	r1, r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	430a      	orrs	r2, r1
 8007996:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	6812      	ldr	r2, [r2, #0]
 80079a0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	2b0a      	cmp	r3, #10
 80079a8:	d003      	beq.n	80079b2 <HAL_DMA2D_ConfigLayer+0xb2>
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b09      	cmp	r3, #9
 80079b0:	d127      	bne.n	8007a02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80079be:	629a      	str	r2, [r3, #40]	@ 0x28
 80079c0:	e01f      	b.n	8007a02 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69da      	ldr	r2, [r3, #28]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	43db      	mvns	r3, r3
 80079cc:	ea02 0103 	and.w	r1, r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	6812      	ldr	r2, [r2, #0]
 80079e2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2b0a      	cmp	r3, #10
 80079ea:	d003      	beq.n	80079f4 <HAL_DMA2D_ConfigLayer+0xf4>
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	2b09      	cmp	r3, #9
 80079f2:	d106      	bne.n	8007a02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007a00:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	371c      	adds	r7, #28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	ff03000f 	.word	0xff03000f

08007a24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e086      	b.n	8007b44 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d106      	bne.n	8007a4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7fc fd1b 	bl	8004484 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8007b4c <HAL_ETH_Init+0x128>)
 8007a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a52:	4a3e      	ldr	r2, [pc, #248]	@ (8007b4c <HAL_ETH_Init+0x128>)
 8007a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8007b4c <HAL_ETH_Init+0x128>)
 8007a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a62:	60bb      	str	r3, [r7, #8]
 8007a64:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007a66:	4b3a      	ldr	r3, [pc, #232]	@ (8007b50 <HAL_ETH_Init+0x12c>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	4a39      	ldr	r2, [pc, #228]	@ (8007b50 <HAL_ETH_Init+0x12c>)
 8007a6c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007a70:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007a72:	4b37      	ldr	r3, [pc, #220]	@ (8007b50 <HAL_ETH_Init+0x12c>)
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	4935      	ldr	r1, [pc, #212]	@ (8007b50 <HAL_ETH_Init+0x12c>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007a80:	4b33      	ldr	r3, [pc, #204]	@ (8007b50 <HAL_ETH_Init+0x12c>)
 8007a82:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6812      	ldr	r2, [r2, #0]
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a9c:	f7fe fc4c 	bl	8006338 <HAL_GetTick>
 8007aa0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007aa2:	e011      	b.n	8007ac8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007aa4:	f7fe fc48 	bl	8006338 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007ab2:	d909      	bls.n	8007ac8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2204      	movs	r2, #4
 8007ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	22e0      	movs	r2, #224	@ 0xe0
 8007ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e03d      	b.n	8007b44 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e4      	bne.n	8007aa4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f97a 	bl	8007dd4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fa25 	bl	8007f30 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa7b 	bl	8007fe2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	461a      	mov	r2, r3
 8007af2:	2100      	movs	r1, #0
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f9e3 	bl	8007ec0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8007b08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <HAL_ETH_Init+0x130>)
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8007b2e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2210      	movs	r2, #16
 8007b3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	40023800 	.word	0x40023800
 8007b50:	40013800 	.word	0x40013800
 8007b54:	00020060 	.word	0x00020060

08007b58 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4b53      	ldr	r3, [pc, #332]	@ (8007cbc <ETH_SetMACConfig+0x164>)
 8007b6e:	4013      	ands	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	7b9b      	ldrb	r3, [r3, #14]
 8007b76:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	7c12      	ldrb	r2, [r2, #16]
 8007b7c:	2a00      	cmp	r2, #0
 8007b7e:	d102      	bne.n	8007b86 <ETH_SetMACConfig+0x2e>
 8007b80:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007b84:	e000      	b.n	8007b88 <ETH_SetMACConfig+0x30>
 8007b86:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007b88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	7c52      	ldrb	r2, [r2, #17]
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	d102      	bne.n	8007b98 <ETH_SetMACConfig+0x40>
 8007b92:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007b96:	e000      	b.n	8007b9a <ETH_SetMACConfig+0x42>
 8007b98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007b9a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007ba0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	7fdb      	ldrb	r3, [r3, #31]
 8007ba6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007ba8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007bae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	7f92      	ldrb	r2, [r2, #30]
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	d102      	bne.n	8007bbe <ETH_SetMACConfig+0x66>
 8007bb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007bbc:	e000      	b.n	8007bc0 <ETH_SetMACConfig+0x68>
 8007bbe:	2200      	movs	r2, #0
                        macconf->Speed |
 8007bc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	7f1b      	ldrb	r3, [r3, #28]
 8007bc6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007bc8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007bce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	791b      	ldrb	r3, [r3, #4]
 8007bd4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007bd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	d102      	bne.n	8007be8 <ETH_SetMACConfig+0x90>
 8007be2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007be6:	e000      	b.n	8007bea <ETH_SetMACConfig+0x92>
 8007be8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007bea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	7bdb      	ldrb	r3, [r3, #15]
 8007bf0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007bf2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007bf8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c00:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007c02:	4313      	orrs	r3, r2
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c1a:	2001      	movs	r0, #1
 8007c1c:	f7fe fb98 	bl	8006350 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8007c36:	4013      	ands	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c3e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8007c46:	2a00      	cmp	r2, #0
 8007c48:	d101      	bne.n	8007c4e <ETH_SetMACConfig+0xf6>
 8007c4a:	2280      	movs	r2, #128	@ 0x80
 8007c4c:	e000      	b.n	8007c50 <ETH_SetMACConfig+0xf8>
 8007c4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007c50:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007c56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007c5e:	2a01      	cmp	r2, #1
 8007c60:	d101      	bne.n	8007c66 <ETH_SetMACConfig+0x10e>
 8007c62:	2208      	movs	r2, #8
 8007c64:	e000      	b.n	8007c68 <ETH_SetMACConfig+0x110>
 8007c66:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007c68:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8007c70:	2a01      	cmp	r2, #1
 8007c72:	d101      	bne.n	8007c78 <ETH_SetMACConfig+0x120>
 8007c74:	2204      	movs	r2, #4
 8007c76:	e000      	b.n	8007c7a <ETH_SetMACConfig+0x122>
 8007c78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007c7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007c82:	2a01      	cmp	r2, #1
 8007c84:	d101      	bne.n	8007c8a <ETH_SetMACConfig+0x132>
 8007c86:	2202      	movs	r2, #2
 8007c88:	e000      	b.n	8007c8c <ETH_SetMACConfig+0x134>
 8007c8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	f7fe fb53 	bl	8006350 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	619a      	str	r2, [r3, #24]
}
 8007cb2:	bf00      	nop
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	fd20810f 	.word	0xfd20810f

08007cc0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8007dd0 <ETH_SetDMAConfig+0x110>)
 8007cda:	4013      	ands	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	7b1b      	ldrb	r3, [r3, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <ETH_SetDMAConfig+0x2c>
 8007ce6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007cea:	e000      	b.n	8007cee <ETH_SetDMAConfig+0x2e>
 8007cec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	7b5b      	ldrb	r3, [r3, #13]
 8007cf2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007cf4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	7f52      	ldrb	r2, [r2, #29]
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d102      	bne.n	8007d04 <ETH_SetDMAConfig+0x44>
 8007cfe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d02:	e000      	b.n	8007d06 <ETH_SetDMAConfig+0x46>
 8007d04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007d06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	7b9b      	ldrb	r3, [r3, #14]
 8007d0c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007d0e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007d14:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	7f1b      	ldrb	r3, [r3, #28]
 8007d1a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007d1c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	7f9b      	ldrb	r3, [r3, #30]
 8007d22:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007d24:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007d2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007d32:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007d34:	4313      	orrs	r3, r2
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d44:	461a      	mov	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d56:	2001      	movs	r0, #1
 8007d58:	f7fe fafa 	bl	8006350 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d64:	461a      	mov	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	791b      	ldrb	r3, [r3, #4]
 8007d6e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007d74:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8007d7a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007d80:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007d88:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8007d8a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d90:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007d92:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007d98:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	6812      	ldr	r2, [r2, #0]
 8007d9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007da2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007da6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007db4:	2001      	movs	r0, #1
 8007db6:	f7fe facb 	bl	8006350 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6013      	str	r3, [r2, #0]
}
 8007dc8:	bf00      	nop
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	f8de3f23 	.word	0xf8de3f23

08007dd4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b0a6      	sub	sp, #152	@ 0x98
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007de8:	2300      	movs	r3, #0
 8007dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007dec:	2300      	movs	r3, #0
 8007dee:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007e10:	2300      	movs	r3, #0
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007e16:	2300      	movs	r3, #0
 8007e18:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007e24:	2300      	movs	r3, #0
 8007e26:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007e36:	2300      	movs	r3, #0
 8007e38:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007e3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007e40:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007e42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007e4e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7ff fe7f 	bl	8007b58 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007e62:	2301      	movs	r3, #1
 8007e64:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007e70:	2300      	movs	r3, #0
 8007e72:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8007e76:	2300      	movs	r3, #0
 8007e78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007e86:	2301      	movs	r3, #1
 8007e88:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007e8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007e8e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007e90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007e94:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007e96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007e9a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007eaa:	f107 0308 	add.w	r3, r7, #8
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff ff05 	bl	8007cc0 <ETH_SetDMAConfig>
}
 8007eb6:	bf00      	nop
 8007eb8:	3798      	adds	r7, #152	@ 0x98
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3305      	adds	r3, #5
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	3204      	adds	r2, #4
 8007ed8:	7812      	ldrb	r2, [r2, #0]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	4b11      	ldr	r3, [pc, #68]	@ (8007f28 <ETH_MACAddressConfig+0x68>)
 8007ee2:	4413      	add	r3, r2
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3303      	adds	r3, #3
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	061a      	lsls	r2, r3, #24
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3301      	adds	r3, #1
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	021b      	lsls	r3, r3, #8
 8007f04:	4313      	orrs	r3, r2
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	7812      	ldrb	r2, [r2, #0]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	4b06      	ldr	r3, [pc, #24]	@ (8007f2c <ETH_MACAddressConfig+0x6c>)
 8007f12:	4413      	add	r3, r2
 8007f14:	461a      	mov	r2, r3
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	6013      	str	r3, [r2, #0]
}
 8007f1a:	bf00      	nop
 8007f1c:	371c      	adds	r7, #28
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	40028040 	.word	0x40028040
 8007f2c:	40028044 	.word	0x40028044

08007f30 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	e03e      	b.n	8007fbc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68d9      	ldr	r1, [r3, #12]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	440b      	add	r3, r1
 8007f4e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2200      	movs	r2, #0
 8007f66:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007f68:	68b9      	ldr	r1, [r7, #8]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	3206      	adds	r2, #6
 8007f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d80c      	bhi.n	8007fa0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68d9      	ldr	r1, [r3, #12]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	4613      	mov	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	00db      	lsls	r3, r3, #3
 8007f96:	440b      	add	r3, r1
 8007f98:	461a      	mov	r2, r3
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	60da      	str	r2, [r3, #12]
 8007f9e:	e004      	b.n	8007faa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d9bd      	bls.n	8007f3e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fd4:	611a      	str	r2, [r3, #16]
}
 8007fd6:	bf00      	nop
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b085      	sub	sp, #20
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e048      	b.n	8008082 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6919      	ldr	r1, [r3, #16]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	440b      	add	r3, r1
 8008000:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2200      	movs	r2, #0
 8008012:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2200      	movs	r2, #0
 8008018:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2200      	movs	r2, #0
 800801e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800802c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	3212      	adds	r2, #18
 800804e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d80c      	bhi.n	8008072 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6919      	ldr	r1, [r3, #16]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	440b      	add	r3, r1
 800806a:	461a      	mov	r2, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	60da      	str	r2, [r3, #12]
 8008070:	e004      	b.n	800807c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	461a      	mov	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3301      	adds	r3, #1
 8008080:	60fb      	str	r3, [r7, #12]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b03      	cmp	r3, #3
 8008086:	d9b3      	bls.n	8007ff0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691a      	ldr	r2, [r3, #16]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080b2:	60da      	str	r2, [r3, #12]
}
 80080b4:	bf00      	nop
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b089      	sub	sp, #36	@ 0x24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80080ca:	2300      	movs	r3, #0
 80080cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80080ce:	2300      	movs	r3, #0
 80080d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80080d2:	2300      	movs	r3, #0
 80080d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80080d6:	2300      	movs	r3, #0
 80080d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80080da:	2300      	movs	r3, #0
 80080dc:	61fb      	str	r3, [r7, #28]
 80080de:	e175      	b.n	80083cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80080e0:	2201      	movs	r2, #1
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	fa02 f303 	lsl.w	r3, r2, r3
 80080e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	4013      	ands	r3, r2
 80080f2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	f040 8164 	bne.w	80083c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f003 0303 	and.w	r3, r3, #3
 8008106:	2b01      	cmp	r3, #1
 8008108:	d005      	beq.n	8008116 <HAL_GPIO_Init+0x56>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	2b02      	cmp	r3, #2
 8008114:	d130      	bne.n	8008178 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	2203      	movs	r2, #3
 8008122:	fa02 f303 	lsl.w	r3, r2, r3
 8008126:	43db      	mvns	r3, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4013      	ands	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	fa02 f303 	lsl.w	r3, r2, r3
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	4313      	orrs	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800814c:	2201      	movs	r2, #1
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	fa02 f303 	lsl.w	r3, r2, r3
 8008154:	43db      	mvns	r3, r3
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	4013      	ands	r3, r2
 800815a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	091b      	lsrs	r3, r3, #4
 8008162:	f003 0201 	and.w	r2, r3, #1
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	fa02 f303 	lsl.w	r3, r2, r3
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	4313      	orrs	r3, r2
 8008170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f003 0303 	and.w	r3, r3, #3
 8008180:	2b03      	cmp	r3, #3
 8008182:	d017      	beq.n	80081b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	2203      	movs	r2, #3
 8008190:	fa02 f303 	lsl.w	r3, r2, r3
 8008194:	43db      	mvns	r3, r3
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	4013      	ands	r3, r2
 800819a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f003 0303 	and.w	r3, r3, #3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d123      	bne.n	8008208 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	08da      	lsrs	r2, r3, #3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3208      	adds	r2, #8
 80081c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	220f      	movs	r2, #15
 80081d8:	fa02 f303 	lsl.w	r3, r2, r3
 80081dc:	43db      	mvns	r3, r3
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	4013      	ands	r3, r2
 80081e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	f003 0307 	and.w	r3, r3, #7
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	fa02 f303 	lsl.w	r3, r2, r3
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	08da      	lsrs	r2, r3, #3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3208      	adds	r2, #8
 8008202:	69b9      	ldr	r1, [r7, #24]
 8008204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	2203      	movs	r2, #3
 8008214:	fa02 f303 	lsl.w	r3, r2, r3
 8008218:	43db      	mvns	r3, r3
 800821a:	69ba      	ldr	r2, [r7, #24]
 800821c:	4013      	ands	r3, r2
 800821e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f003 0203 	and.w	r2, r3, #3
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	fa02 f303 	lsl.w	r3, r2, r3
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	4313      	orrs	r3, r2
 8008234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 80be 	beq.w	80083c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800824a:	4b66      	ldr	r3, [pc, #408]	@ (80083e4 <HAL_GPIO_Init+0x324>)
 800824c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824e:	4a65      	ldr	r2, [pc, #404]	@ (80083e4 <HAL_GPIO_Init+0x324>)
 8008250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008254:	6453      	str	r3, [r2, #68]	@ 0x44
 8008256:	4b63      	ldr	r3, [pc, #396]	@ (80083e4 <HAL_GPIO_Init+0x324>)
 8008258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800825a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008262:	4a61      	ldr	r2, [pc, #388]	@ (80083e8 <HAL_GPIO_Init+0x328>)
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	089b      	lsrs	r3, r3, #2
 8008268:	3302      	adds	r3, #2
 800826a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800826e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	220f      	movs	r2, #15
 800827a:	fa02 f303 	lsl.w	r3, r2, r3
 800827e:	43db      	mvns	r3, r3
 8008280:	69ba      	ldr	r2, [r7, #24]
 8008282:	4013      	ands	r3, r2
 8008284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a58      	ldr	r2, [pc, #352]	@ (80083ec <HAL_GPIO_Init+0x32c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d037      	beq.n	80082fe <HAL_GPIO_Init+0x23e>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a57      	ldr	r2, [pc, #348]	@ (80083f0 <HAL_GPIO_Init+0x330>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d031      	beq.n	80082fa <HAL_GPIO_Init+0x23a>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a56      	ldr	r2, [pc, #344]	@ (80083f4 <HAL_GPIO_Init+0x334>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d02b      	beq.n	80082f6 <HAL_GPIO_Init+0x236>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a55      	ldr	r2, [pc, #340]	@ (80083f8 <HAL_GPIO_Init+0x338>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d025      	beq.n	80082f2 <HAL_GPIO_Init+0x232>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a54      	ldr	r2, [pc, #336]	@ (80083fc <HAL_GPIO_Init+0x33c>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d01f      	beq.n	80082ee <HAL_GPIO_Init+0x22e>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a53      	ldr	r2, [pc, #332]	@ (8008400 <HAL_GPIO_Init+0x340>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d019      	beq.n	80082ea <HAL_GPIO_Init+0x22a>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a52      	ldr	r2, [pc, #328]	@ (8008404 <HAL_GPIO_Init+0x344>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d013      	beq.n	80082e6 <HAL_GPIO_Init+0x226>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a51      	ldr	r2, [pc, #324]	@ (8008408 <HAL_GPIO_Init+0x348>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00d      	beq.n	80082e2 <HAL_GPIO_Init+0x222>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a50      	ldr	r2, [pc, #320]	@ (800840c <HAL_GPIO_Init+0x34c>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d007      	beq.n	80082de <HAL_GPIO_Init+0x21e>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a4f      	ldr	r2, [pc, #316]	@ (8008410 <HAL_GPIO_Init+0x350>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d101      	bne.n	80082da <HAL_GPIO_Init+0x21a>
 80082d6:	2309      	movs	r3, #9
 80082d8:	e012      	b.n	8008300 <HAL_GPIO_Init+0x240>
 80082da:	230a      	movs	r3, #10
 80082dc:	e010      	b.n	8008300 <HAL_GPIO_Init+0x240>
 80082de:	2308      	movs	r3, #8
 80082e0:	e00e      	b.n	8008300 <HAL_GPIO_Init+0x240>
 80082e2:	2307      	movs	r3, #7
 80082e4:	e00c      	b.n	8008300 <HAL_GPIO_Init+0x240>
 80082e6:	2306      	movs	r3, #6
 80082e8:	e00a      	b.n	8008300 <HAL_GPIO_Init+0x240>
 80082ea:	2305      	movs	r3, #5
 80082ec:	e008      	b.n	8008300 <HAL_GPIO_Init+0x240>
 80082ee:	2304      	movs	r3, #4
 80082f0:	e006      	b.n	8008300 <HAL_GPIO_Init+0x240>
 80082f2:	2303      	movs	r3, #3
 80082f4:	e004      	b.n	8008300 <HAL_GPIO_Init+0x240>
 80082f6:	2302      	movs	r3, #2
 80082f8:	e002      	b.n	8008300 <HAL_GPIO_Init+0x240>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e000      	b.n	8008300 <HAL_GPIO_Init+0x240>
 80082fe:	2300      	movs	r3, #0
 8008300:	69fa      	ldr	r2, [r7, #28]
 8008302:	f002 0203 	and.w	r2, r2, #3
 8008306:	0092      	lsls	r2, r2, #2
 8008308:	4093      	lsls	r3, r2
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	4313      	orrs	r3, r2
 800830e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008310:	4935      	ldr	r1, [pc, #212]	@ (80083e8 <HAL_GPIO_Init+0x328>)
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	089b      	lsrs	r3, r3, #2
 8008316:	3302      	adds	r3, #2
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800831e:	4b3d      	ldr	r3, [pc, #244]	@ (8008414 <HAL_GPIO_Init+0x354>)
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	43db      	mvns	r3, r3
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	4013      	ands	r3, r2
 800832c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	4313      	orrs	r3, r2
 8008340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008342:	4a34      	ldr	r2, [pc, #208]	@ (8008414 <HAL_GPIO_Init+0x354>)
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008348:	4b32      	ldr	r3, [pc, #200]	@ (8008414 <HAL_GPIO_Init+0x354>)
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	43db      	mvns	r3, r3
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	4013      	ands	r3, r2
 8008356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	4313      	orrs	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800836c:	4a29      	ldr	r2, [pc, #164]	@ (8008414 <HAL_GPIO_Init+0x354>)
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008372:	4b28      	ldr	r3, [pc, #160]	@ (8008414 <HAL_GPIO_Init+0x354>)
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	43db      	mvns	r3, r3
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	4013      	ands	r3, r2
 8008380:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	4313      	orrs	r3, r2
 8008394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008396:	4a1f      	ldr	r2, [pc, #124]	@ (8008414 <HAL_GPIO_Init+0x354>)
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800839c:	4b1d      	ldr	r3, [pc, #116]	@ (8008414 <HAL_GPIO_Init+0x354>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	43db      	mvns	r3, r3
 80083a6:	69ba      	ldr	r2, [r7, #24]
 80083a8:	4013      	ands	r3, r2
 80083aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	4313      	orrs	r3, r2
 80083be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80083c0:	4a14      	ldr	r2, [pc, #80]	@ (8008414 <HAL_GPIO_Init+0x354>)
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	3301      	adds	r3, #1
 80083ca:	61fb      	str	r3, [r7, #28]
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	2b0f      	cmp	r3, #15
 80083d0:	f67f ae86 	bls.w	80080e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop
 80083d8:	3724      	adds	r7, #36	@ 0x24
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	40023800 	.word	0x40023800
 80083e8:	40013800 	.word	0x40013800
 80083ec:	40020000 	.word	0x40020000
 80083f0:	40020400 	.word	0x40020400
 80083f4:	40020800 	.word	0x40020800
 80083f8:	40020c00 	.word	0x40020c00
 80083fc:	40021000 	.word	0x40021000
 8008400:	40021400 	.word	0x40021400
 8008404:	40021800 	.word	0x40021800
 8008408:	40021c00 	.word	0x40021c00
 800840c:	40022000 	.word	0x40022000
 8008410:	40022400 	.word	0x40022400
 8008414:	40013c00 	.word	0x40013c00

08008418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691a      	ldr	r2, [r3, #16]
 8008428:	887b      	ldrh	r3, [r7, #2]
 800842a:	4013      	ands	r3, r2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008430:	2301      	movs	r3, #1
 8008432:	73fb      	strb	r3, [r7, #15]
 8008434:	e001      	b.n	800843a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	807b      	strh	r3, [r7, #2]
 8008454:	4613      	mov	r3, r2
 8008456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008458:	787b      	ldrb	r3, [r7, #1]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800845e:	887a      	ldrh	r2, [r7, #2]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008464:	e003      	b.n	800846e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008466:	887b      	ldrh	r3, [r7, #2]
 8008468:	041a      	lsls	r2, r3, #16
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	619a      	str	r2, [r3, #24]
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b086      	sub	sp, #24
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f009 f951 	bl	8011738 <USB_GetMode>
 8008496:	4603      	mov	r3, r0
 8008498:	2b01      	cmp	r3, #1
 800849a:	f040 80fb 	bne.w	8008694 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f009 f914 	bl	80116d0 <USB_ReadInterrupts>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 80f1 	beq.w	8008692 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f009 f90b 	bl	80116d0 <USB_ReadInterrupts>
 80084ba:	4603      	mov	r3, r0
 80084bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084c4:	d104      	bne.n	80084d0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80084ce:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f009 f8fb 	bl	80116d0 <USB_ReadInterrupts>
 80084da:	4603      	mov	r3, r0
 80084dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084e4:	d104      	bne.n	80084f0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80084ee:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f009 f8eb 	bl	80116d0 <USB_ReadInterrupts>
 80084fa:	4603      	mov	r3, r0
 80084fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008500:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008504:	d104      	bne.n	8008510 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800850e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4618      	mov	r0, r3
 8008516:	f009 f8db 	bl	80116d0 <USB_ReadInterrupts>
 800851a:	4603      	mov	r3, r0
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b02      	cmp	r3, #2
 8008522:	d103      	bne.n	800852c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2202      	movs	r2, #2
 800852a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4618      	mov	r0, r3
 8008532:	f009 f8cd 	bl	80116d0 <USB_ReadInterrupts>
 8008536:	4603      	mov	r3, r0
 8008538:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800853c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008540:	d120      	bne.n	8008584 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800854a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	d113      	bne.n	8008584 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800855c:	2110      	movs	r1, #16
 800855e:	6938      	ldr	r0, [r7, #16]
 8008560:	f008 fffe 	bl	8011560 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8008564:	6938      	ldr	r0, [r7, #16]
 8008566:	f009 f82d 	bl	80115c4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7a5b      	ldrb	r3, [r3, #9]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d105      	bne.n	800857e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2101      	movs	r1, #1
 8008578:	4618      	mov	r0, r3
 800857a:	f009 f8eb 	bl	8011754 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f00e ffd4 	bl	801752c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4618      	mov	r0, r3
 800858a:	f009 f8a1 	bl	80116d0 <USB_ReadInterrupts>
 800858e:	4603      	mov	r3, r0
 8008590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008598:	d102      	bne.n	80085a0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 fca1 	bl	8009ee2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f009 f893 	bl	80116d0 <USB_ReadInterrupts>
 80085aa:	4603      	mov	r3, r0
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d106      	bne.n	80085c2 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f00e ff9d 	bl	80174f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2208      	movs	r2, #8
 80085c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f009 f882 	bl	80116d0 <USB_ReadInterrupts>
 80085cc:	4603      	mov	r3, r0
 80085ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085d6:	d139      	bne.n	800864c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4618      	mov	r0, r3
 80085de:	f009 f8f6 	bl	80117ce <USB_HC_ReadInterrupt>
 80085e2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80085e4:	2300      	movs	r3, #0
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	e025      	b.n	8008636 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f003 030f 	and.w	r3, r3, #15
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	fa22 f303 	lsr.w	r3, r2, r3
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d018      	beq.n	8008630 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008614:	d106      	bne.n	8008624 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	b2db      	uxtb	r3, r3
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f859 	bl	80086d4 <HCD_HC_IN_IRQHandler>
 8008622:	e005      	b.n	8008630 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 febb 	bl	80093a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	3301      	adds	r3, #1
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	795b      	ldrb	r3, [r3, #5]
 800863a:	461a      	mov	r2, r3
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	4293      	cmp	r3, r2
 8008640:	d3d3      	bcc.n	80085ea <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800864a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4618      	mov	r0, r3
 8008652:	f009 f83d 	bl	80116d0 <USB_ReadInterrupts>
 8008656:	4603      	mov	r3, r0
 8008658:	f003 0310 	and.w	r3, r3, #16
 800865c:	2b10      	cmp	r3, #16
 800865e:	d101      	bne.n	8008664 <HAL_HCD_IRQHandler+0x1ea>
 8008660:	2301      	movs	r3, #1
 8008662:	e000      	b.n	8008666 <HAL_HCD_IRQHandler+0x1ec>
 8008664:	2300      	movs	r3, #0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d014      	beq.n	8008694 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	699a      	ldr	r2, [r3, #24]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f022 0210 	bic.w	r2, r2, #16
 8008678:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f001 fb52 	bl	8009d24 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699a      	ldr	r2, [r3, #24]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0210 	orr.w	r2, r2, #16
 800868e:	619a      	str	r2, [r3, #24]
 8008690:	e000      	b.n	8008694 <HAL_HCD_IRQHandler+0x21a>
      return;
 8008692:	bf00      	nop
    }
  }
}
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_HCD_Stop+0x16>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e00d      	b.n	80086cc <HAL_HCD_Stop+0x32>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4618      	mov	r0, r3
 80086be:	f009 f9b7 	bl	8011a30 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	78fa      	ldrb	r2, [r7, #3]
 80086f0:	4611      	mov	r1, r2
 80086f2:	4618      	mov	r0, r3
 80086f4:	f008 ffff 	bl	80116f6 <USB_ReadChInterrupts>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f003 0304 	and.w	r3, r3, #4
 80086fe:	2b04      	cmp	r3, #4
 8008700:	d11a      	bne.n	8008738 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	4413      	add	r3, r2
 800870a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800870e:	461a      	mov	r2, r3
 8008710:	2304      	movs	r3, #4
 8008712:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008714:	78fa      	ldrb	r2, [r7, #3]
 8008716:	6879      	ldr	r1, [r7, #4]
 8008718:	4613      	mov	r3, r2
 800871a:	011b      	lsls	r3, r3, #4
 800871c:	1a9b      	subs	r3, r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	440b      	add	r3, r1
 8008722:	334d      	adds	r3, #77	@ 0x4d
 8008724:	2207      	movs	r2, #7
 8008726:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	78fa      	ldrb	r2, [r7, #3]
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f009 f85d 	bl	80117f0 <USB_HC_Halt>
 8008736:	e09e      	b.n	8008876 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	78fa      	ldrb	r2, [r7, #3]
 800873e:	4611      	mov	r1, r2
 8008740:	4618      	mov	r0, r3
 8008742:	f008 ffd8 	bl	80116f6 <USB_ReadChInterrupts>
 8008746:	4603      	mov	r3, r0
 8008748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800874c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008750:	d11b      	bne.n	800878a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8008752:	78fb      	ldrb	r3, [r7, #3]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	4413      	add	r3, r2
 800875a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800875e:	461a      	mov	r2, r3
 8008760:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008764:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8008766:	78fa      	ldrb	r2, [r7, #3]
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	4613      	mov	r3, r2
 800876c:	011b      	lsls	r3, r3, #4
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	440b      	add	r3, r1
 8008774:	334d      	adds	r3, #77	@ 0x4d
 8008776:	2208      	movs	r2, #8
 8008778:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f009 f834 	bl	80117f0 <USB_HC_Halt>
 8008788:	e075      	b.n	8008876 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	4611      	mov	r1, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f008 ffaf 	bl	80116f6 <USB_ReadChInterrupts>
 8008798:	4603      	mov	r3, r0
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d11a      	bne.n	80087d8 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80087a2:	78fb      	ldrb	r3, [r7, #3]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087ae:	461a      	mov	r2, r3
 80087b0:	2308      	movs	r3, #8
 80087b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80087b4:	78fa      	ldrb	r2, [r7, #3]
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	4613      	mov	r3, r2
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	1a9b      	subs	r3, r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	440b      	add	r3, r1
 80087c2:	334d      	adds	r3, #77	@ 0x4d
 80087c4:	2206      	movs	r2, #6
 80087c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	78fa      	ldrb	r2, [r7, #3]
 80087ce:	4611      	mov	r1, r2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f009 f80d 	bl	80117f0 <USB_HC_Halt>
 80087d6:	e04e      	b.n	8008876 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	78fa      	ldrb	r2, [r7, #3]
 80087de:	4611      	mov	r1, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f008 ff88 	bl	80116f6 <USB_ReadChInterrupts>
 80087e6:	4603      	mov	r3, r0
 80087e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087f0:	d11b      	bne.n	800882a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80087f2:	78fb      	ldrb	r3, [r7, #3]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087fe:	461a      	mov	r2, r3
 8008800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008804:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008806:	78fa      	ldrb	r2, [r7, #3]
 8008808:	6879      	ldr	r1, [r7, #4]
 800880a:	4613      	mov	r3, r2
 800880c:	011b      	lsls	r3, r3, #4
 800880e:	1a9b      	subs	r3, r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	440b      	add	r3, r1
 8008814:	334d      	adds	r3, #77	@ 0x4d
 8008816:	2209      	movs	r2, #9
 8008818:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	4611      	mov	r1, r2
 8008822:	4618      	mov	r0, r3
 8008824:	f008 ffe4 	bl	80117f0 <USB_HC_Halt>
 8008828:	e025      	b.n	8008876 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	4611      	mov	r1, r2
 8008832:	4618      	mov	r0, r3
 8008834:	f008 ff5f 	bl	80116f6 <USB_ReadChInterrupts>
 8008838:	4603      	mov	r3, r0
 800883a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800883e:	2b80      	cmp	r3, #128	@ 0x80
 8008840:	d119      	bne.n	8008876 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	4413      	add	r3, r2
 800884a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884e:	461a      	mov	r2, r3
 8008850:	2380      	movs	r3, #128	@ 0x80
 8008852:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	4613      	mov	r3, r2
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	1a9b      	subs	r3, r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	440b      	add	r3, r1
 8008862:	334d      	adds	r3, #77	@ 0x4d
 8008864:	2207      	movs	r2, #7
 8008866:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f008 ffbd 	bl	80117f0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	78fa      	ldrb	r2, [r7, #3]
 800887c:	4611      	mov	r1, r2
 800887e:	4618      	mov	r0, r3
 8008880:	f008 ff39 	bl	80116f6 <USB_ReadChInterrupts>
 8008884:	4603      	mov	r3, r0
 8008886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800888a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800888e:	d112      	bne.n	80088b6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f008 ffa9 	bl	80117f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800889e:	78fb      	ldrb	r3, [r7, #3]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088aa:	461a      	mov	r2, r3
 80088ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088b0:	6093      	str	r3, [r2, #8]
 80088b2:	f000 bd75 	b.w	80093a0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f008 ff19 	bl	80116f6 <USB_ReadChInterrupts>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	f040 8128 	bne.w	8008b20 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80088d0:	78fb      	ldrb	r3, [r7, #3]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088dc:	461a      	mov	r2, r3
 80088de:	2320      	movs	r3, #32
 80088e0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80088e2:	78fa      	ldrb	r2, [r7, #3]
 80088e4:	6879      	ldr	r1, [r7, #4]
 80088e6:	4613      	mov	r3, r2
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	440b      	add	r3, r1
 80088f0:	331b      	adds	r3, #27
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d119      	bne.n	800892c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	4613      	mov	r3, r2
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	440b      	add	r3, r1
 8008906:	331b      	adds	r3, #27
 8008908:	2200      	movs	r2, #0
 800890a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	4413      	add	r3, r2
 8008914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	0151      	lsls	r1, r2, #5
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	440a      	add	r2, r1
 8008922:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800892a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	799b      	ldrb	r3, [r3, #6]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01b      	beq.n	800896c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008934:	78fa      	ldrb	r2, [r7, #3]
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	4613      	mov	r3, r2
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	440b      	add	r3, r1
 8008942:	3330      	adds	r3, #48	@ 0x30
 8008944:	6819      	ldr	r1, [r3, #0]
 8008946:	78fb      	ldrb	r3, [r7, #3]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	4413      	add	r3, r2
 800894e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008958:	78fa      	ldrb	r2, [r7, #3]
 800895a:	1ac9      	subs	r1, r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	011b      	lsls	r3, r3, #4
 8008962:	1a9b      	subs	r3, r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4403      	add	r3, r0
 8008968:	3338      	adds	r3, #56	@ 0x38
 800896a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800896c:	78fa      	ldrb	r2, [r7, #3]
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	4613      	mov	r3, r2
 8008972:	011b      	lsls	r3, r3, #4
 8008974:	1a9b      	subs	r3, r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	334d      	adds	r3, #77	@ 0x4d
 800897c:	2201      	movs	r2, #1
 800897e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8008980:	78fa      	ldrb	r2, [r7, #3]
 8008982:	6879      	ldr	r1, [r7, #4]
 8008984:	4613      	mov	r3, r2
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	1a9b      	subs	r3, r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	440b      	add	r3, r1
 800898e:	3344      	adds	r3, #68	@ 0x44
 8008990:	2200      	movs	r2, #0
 8008992:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	4413      	add	r3, r2
 800899c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089a0:	461a      	mov	r2, r3
 80089a2:	2301      	movs	r3, #1
 80089a4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80089a6:	78fa      	ldrb	r2, [r7, #3]
 80089a8:	6879      	ldr	r1, [r7, #4]
 80089aa:	4613      	mov	r3, r2
 80089ac:	011b      	lsls	r3, r3, #4
 80089ae:	1a9b      	subs	r3, r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	440b      	add	r3, r1
 80089b4:	3326      	adds	r3, #38	@ 0x26
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00a      	beq.n	80089d2 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80089bc:	78fa      	ldrb	r2, [r7, #3]
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	4613      	mov	r3, r2
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	440b      	add	r3, r1
 80089ca:	3326      	adds	r3, #38	@ 0x26
 80089cc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d110      	bne.n	80089f4 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	4611      	mov	r1, r2
 80089da:	4618      	mov	r0, r3
 80089dc:	f008 ff08 	bl	80117f0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ec:	461a      	mov	r2, r3
 80089ee:	2310      	movs	r3, #16
 80089f0:	6093      	str	r3, [r2, #8]
 80089f2:	e03d      	b.n	8008a70 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80089f4:	78fa      	ldrb	r2, [r7, #3]
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	4613      	mov	r3, r2
 80089fa:	011b      	lsls	r3, r3, #4
 80089fc:	1a9b      	subs	r3, r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	440b      	add	r3, r1
 8008a02:	3326      	adds	r3, #38	@ 0x26
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d00a      	beq.n	8008a20 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8008a0a:	78fa      	ldrb	r2, [r7, #3]
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	011b      	lsls	r3, r3, #4
 8008a12:	1a9b      	subs	r3, r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	440b      	add	r3, r1
 8008a18:	3326      	adds	r3, #38	@ 0x26
 8008a1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d127      	bne.n	8008a70 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	78fa      	ldrb	r2, [r7, #3]
 8008a30:	0151      	lsls	r1, r2, #5
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	440a      	add	r2, r1
 8008a36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a3e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008a40:	78fa      	ldrb	r2, [r7, #3]
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	4613      	mov	r3, r2
 8008a46:	011b      	lsls	r3, r3, #4
 8008a48:	1a9b      	subs	r3, r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	440b      	add	r3, r1
 8008a4e:	334c      	adds	r3, #76	@ 0x4c
 8008a50:	2201      	movs	r2, #1
 8008a52:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008a54:	78fa      	ldrb	r2, [r7, #3]
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	011b      	lsls	r3, r3, #4
 8008a5c:	1a9b      	subs	r3, r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	440b      	add	r3, r1
 8008a62:	334c      	adds	r3, #76	@ 0x4c
 8008a64:	781a      	ldrb	r2, [r3, #0]
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f00e fd6c 	bl	8017548 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	799b      	ldrb	r3, [r3, #6]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d13b      	bne.n	8008af0 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8008a78:	78fa      	ldrb	r2, [r7, #3]
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	011b      	lsls	r3, r3, #4
 8008a80:	1a9b      	subs	r3, r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	440b      	add	r3, r1
 8008a86:	3338      	adds	r3, #56	@ 0x38
 8008a88:	6819      	ldr	r1, [r3, #0]
 8008a8a:	78fa      	ldrb	r2, [r7, #3]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	011b      	lsls	r3, r3, #4
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4403      	add	r3, r0
 8008a98:	3328      	adds	r3, #40	@ 0x28
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	440b      	add	r3, r1
 8008a9e:	1e59      	subs	r1, r3, #1
 8008aa0:	78fa      	ldrb	r2, [r7, #3]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	011b      	lsls	r3, r3, #4
 8008aa8:	1a9b      	subs	r3, r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4403      	add	r3, r0
 8008aae:	3328      	adds	r3, #40	@ 0x28
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 8470 	beq.w	80093a0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8008ac0:	78fa      	ldrb	r2, [r7, #3]
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	011b      	lsls	r3, r3, #4
 8008ac8:	1a9b      	subs	r3, r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	440b      	add	r3, r1
 8008ace:	333c      	adds	r3, #60	@ 0x3c
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	78fa      	ldrb	r2, [r7, #3]
 8008ad4:	f083 0301 	eor.w	r3, r3, #1
 8008ad8:	b2d8      	uxtb	r0, r3
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	4613      	mov	r3, r2
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	1a9b      	subs	r3, r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	440b      	add	r3, r1
 8008ae6:	333c      	adds	r3, #60	@ 0x3c
 8008ae8:	4602      	mov	r2, r0
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	f000 bc58 	b.w	80093a0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8008af0:	78fa      	ldrb	r2, [r7, #3]
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	4613      	mov	r3, r2
 8008af6:	011b      	lsls	r3, r3, #4
 8008af8:	1a9b      	subs	r3, r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	440b      	add	r3, r1
 8008afe:	333c      	adds	r3, #60	@ 0x3c
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	78fa      	ldrb	r2, [r7, #3]
 8008b04:	f083 0301 	eor.w	r3, r3, #1
 8008b08:	b2d8      	uxtb	r0, r3
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	011b      	lsls	r3, r3, #4
 8008b10:	1a9b      	subs	r3, r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	440b      	add	r3, r1
 8008b16:	333c      	adds	r3, #60	@ 0x3c
 8008b18:	4602      	mov	r2, r0
 8008b1a:	701a      	strb	r2, [r3, #0]
 8008b1c:	f000 bc40 	b.w	80093a0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	78fa      	ldrb	r2, [r7, #3]
 8008b26:	4611      	mov	r1, r2
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f008 fde4 	bl	80116f6 <USB_ReadChInterrupts>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f003 0320 	and.w	r3, r3, #32
 8008b34:	2b20      	cmp	r3, #32
 8008b36:	d131      	bne.n	8008b9c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b44:	461a      	mov	r2, r3
 8008b46:	2320      	movs	r3, #32
 8008b48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8008b4a:	78fa      	ldrb	r2, [r7, #3]
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	1a9b      	subs	r3, r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	440b      	add	r3, r1
 8008b58:	331a      	adds	r3, #26
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	f040 841f 	bne.w	80093a0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8008b62:	78fa      	ldrb	r2, [r7, #3]
 8008b64:	6879      	ldr	r1, [r7, #4]
 8008b66:	4613      	mov	r3, r2
 8008b68:	011b      	lsls	r3, r3, #4
 8008b6a:	1a9b      	subs	r3, r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	440b      	add	r3, r1
 8008b70:	331b      	adds	r3, #27
 8008b72:	2201      	movs	r2, #1
 8008b74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008b76:	78fa      	ldrb	r2, [r7, #3]
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	011b      	lsls	r3, r3, #4
 8008b7e:	1a9b      	subs	r3, r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	334d      	adds	r3, #77	@ 0x4d
 8008b86:	2203      	movs	r2, #3
 8008b88:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	78fa      	ldrb	r2, [r7, #3]
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f008 fe2c 	bl	80117f0 <USB_HC_Halt>
 8008b98:	f000 bc02 	b.w	80093a0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	78fa      	ldrb	r2, [r7, #3]
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f008 fda6 	bl	80116f6 <USB_ReadChInterrupts>
 8008baa:	4603      	mov	r3, r0
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	f040 8305 	bne.w	80091c0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008bb6:	78fb      	ldrb	r3, [r7, #3]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008bc8:	78fa      	ldrb	r2, [r7, #3]
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	011b      	lsls	r3, r3, #4
 8008bd0:	1a9b      	subs	r3, r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	334d      	adds	r3, #77	@ 0x4d
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d114      	bne.n	8008c08 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008bde:	78fa      	ldrb	r2, [r7, #3]
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	4613      	mov	r3, r2
 8008be4:	011b      	lsls	r3, r3, #4
 8008be6:	1a9b      	subs	r3, r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	440b      	add	r3, r1
 8008bec:	334d      	adds	r3, #77	@ 0x4d
 8008bee:	2202      	movs	r2, #2
 8008bf0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008bf2:	78fa      	ldrb	r2, [r7, #3]
 8008bf4:	6879      	ldr	r1, [r7, #4]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	011b      	lsls	r3, r3, #4
 8008bfa:	1a9b      	subs	r3, r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	440b      	add	r3, r1
 8008c00:	334c      	adds	r3, #76	@ 0x4c
 8008c02:	2201      	movs	r2, #1
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	e2cc      	b.n	80091a2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008c08:	78fa      	ldrb	r2, [r7, #3]
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	1a9b      	subs	r3, r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	334d      	adds	r3, #77	@ 0x4d
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b06      	cmp	r3, #6
 8008c1c:	d114      	bne.n	8008c48 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	4613      	mov	r3, r2
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	1a9b      	subs	r3, r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	440b      	add	r3, r1
 8008c2c:	334d      	adds	r3, #77	@ 0x4d
 8008c2e:	2202      	movs	r2, #2
 8008c30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	4613      	mov	r3, r2
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	1a9b      	subs	r3, r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	440b      	add	r3, r1
 8008c40:	334c      	adds	r3, #76	@ 0x4c
 8008c42:	2205      	movs	r2, #5
 8008c44:	701a      	strb	r2, [r3, #0]
 8008c46:	e2ac      	b.n	80091a2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008c48:	78fa      	ldrb	r2, [r7, #3]
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	440b      	add	r3, r1
 8008c56:	334d      	adds	r3, #77	@ 0x4d
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	2b07      	cmp	r3, #7
 8008c5c:	d00b      	beq.n	8008c76 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008c5e:	78fa      	ldrb	r2, [r7, #3]
 8008c60:	6879      	ldr	r1, [r7, #4]
 8008c62:	4613      	mov	r3, r2
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	1a9b      	subs	r3, r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	440b      	add	r3, r1
 8008c6c:	334d      	adds	r3, #77	@ 0x4d
 8008c6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008c70:	2b09      	cmp	r3, #9
 8008c72:	f040 80a6 	bne.w	8008dc2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008c76:	78fa      	ldrb	r2, [r7, #3]
 8008c78:	6879      	ldr	r1, [r7, #4]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	011b      	lsls	r3, r3, #4
 8008c7e:	1a9b      	subs	r3, r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	440b      	add	r3, r1
 8008c84:	334d      	adds	r3, #77	@ 0x4d
 8008c86:	2202      	movs	r2, #2
 8008c88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008c8a:	78fa      	ldrb	r2, [r7, #3]
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	440b      	add	r3, r1
 8008c98:	3344      	adds	r3, #68	@ 0x44
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	1c59      	adds	r1, r3, #1
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	011b      	lsls	r3, r3, #4
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4403      	add	r3, r0
 8008caa:	3344      	adds	r3, #68	@ 0x44
 8008cac:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008cae:	78fa      	ldrb	r2, [r7, #3]
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	1a9b      	subs	r3, r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	440b      	add	r3, r1
 8008cbc:	3344      	adds	r3, #68	@ 0x44
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d943      	bls.n	8008d4c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008cc4:	78fa      	ldrb	r2, [r7, #3]
 8008cc6:	6879      	ldr	r1, [r7, #4]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	1a9b      	subs	r3, r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	440b      	add	r3, r1
 8008cd2:	3344      	adds	r3, #68	@ 0x44
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8008cd8:	78fa      	ldrb	r2, [r7, #3]
 8008cda:	6879      	ldr	r1, [r7, #4]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	011b      	lsls	r3, r3, #4
 8008ce0:	1a9b      	subs	r3, r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	440b      	add	r3, r1
 8008ce6:	331a      	adds	r3, #26
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d123      	bne.n	8008d36 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8008cee:	78fa      	ldrb	r2, [r7, #3]
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	011b      	lsls	r3, r3, #4
 8008cf6:	1a9b      	subs	r3, r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	440b      	add	r3, r1
 8008cfc:	331b      	adds	r3, #27
 8008cfe:	2200      	movs	r2, #0
 8008d00:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008d02:	78fa      	ldrb	r2, [r7, #3]
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	1a9b      	subs	r3, r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	440b      	add	r3, r1
 8008d10:	331c      	adds	r3, #28
 8008d12:	2200      	movs	r2, #0
 8008d14:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	78fa      	ldrb	r2, [r7, #3]
 8008d26:	0151      	lsls	r1, r2, #5
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	440a      	add	r2, r1
 8008d2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d34:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008d36:	78fa      	ldrb	r2, [r7, #3]
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	1a9b      	subs	r3, r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	334c      	adds	r3, #76	@ 0x4c
 8008d46:	2204      	movs	r2, #4
 8008d48:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008d4a:	e229      	b.n	80091a0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008d4c:	78fa      	ldrb	r2, [r7, #3]
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4613      	mov	r3, r2
 8008d52:	011b      	lsls	r3, r3, #4
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	334c      	adds	r3, #76	@ 0x4c
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008d60:	78fa      	ldrb	r2, [r7, #3]
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	4613      	mov	r3, r2
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	1a9b      	subs	r3, r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	3326      	adds	r3, #38	@ 0x26
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00b      	beq.n	8008d8e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008d76:	78fa      	ldrb	r2, [r7, #3]
 8008d78:	6879      	ldr	r1, [r7, #4]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	011b      	lsls	r3, r3, #4
 8008d7e:	1a9b      	subs	r3, r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	440b      	add	r3, r1
 8008d84:	3326      	adds	r3, #38	@ 0x26
 8008d86:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	f040 8209 	bne.w	80091a0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008da4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dac:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dba:	461a      	mov	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008dc0:	e1ee      	b.n	80091a0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008dc2:	78fa      	ldrb	r2, [r7, #3]
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	011b      	lsls	r3, r3, #4
 8008dca:	1a9b      	subs	r3, r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	334d      	adds	r3, #77	@ 0x4d
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b05      	cmp	r3, #5
 8008dd6:	f040 80c8 	bne.w	8008f6a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008dda:	78fa      	ldrb	r2, [r7, #3]
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	4613      	mov	r3, r2
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	1a9b      	subs	r3, r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	440b      	add	r3, r1
 8008de8:	334d      	adds	r3, #77	@ 0x4d
 8008dea:	2202      	movs	r2, #2
 8008dec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008dee:	78fa      	ldrb	r2, [r7, #3]
 8008df0:	6879      	ldr	r1, [r7, #4]
 8008df2:	4613      	mov	r3, r2
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	1a9b      	subs	r3, r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	440b      	add	r3, r1
 8008dfc:	331b      	adds	r3, #27
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	f040 81ce 	bne.w	80091a2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008e06:	78fa      	ldrb	r2, [r7, #3]
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	1a9b      	subs	r3, r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	440b      	add	r3, r1
 8008e14:	3326      	adds	r3, #38	@ 0x26
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d16b      	bne.n	8008ef4 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8008e1c:	78fa      	ldrb	r2, [r7, #3]
 8008e1e:	6879      	ldr	r1, [r7, #4]
 8008e20:	4613      	mov	r3, r2
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	1a9b      	subs	r3, r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	440b      	add	r3, r1
 8008e2a:	3348      	adds	r3, #72	@ 0x48
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	1c59      	adds	r1, r3, #1
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	4613      	mov	r3, r2
 8008e34:	011b      	lsls	r3, r3, #4
 8008e36:	1a9b      	subs	r3, r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4403      	add	r3, r0
 8008e3c:	3348      	adds	r3, #72	@ 0x48
 8008e3e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8008e40:	78fa      	ldrb	r2, [r7, #3]
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	4613      	mov	r3, r2
 8008e46:	011b      	lsls	r3, r3, #4
 8008e48:	1a9b      	subs	r3, r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	440b      	add	r3, r1
 8008e4e:	3348      	adds	r3, #72	@ 0x48
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d943      	bls.n	8008ede <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8008e56:	78fa      	ldrb	r2, [r7, #3]
 8008e58:	6879      	ldr	r1, [r7, #4]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	011b      	lsls	r3, r3, #4
 8008e5e:	1a9b      	subs	r3, r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	3348      	adds	r3, #72	@ 0x48
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8008e6a:	78fa      	ldrb	r2, [r7, #3]
 8008e6c:	6879      	ldr	r1, [r7, #4]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	440b      	add	r3, r1
 8008e78:	331b      	adds	r3, #27
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	4613      	mov	r3, r2
 8008e84:	011b      	lsls	r3, r3, #4
 8008e86:	1a9b      	subs	r3, r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	440b      	add	r3, r1
 8008e8c:	3344      	adds	r3, #68	@ 0x44
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d809      	bhi.n	8008ea8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8008e94:	78fa      	ldrb	r2, [r7, #3]
 8008e96:	6879      	ldr	r1, [r7, #4]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	1a9b      	subs	r3, r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	331c      	adds	r3, #28
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008ea8:	78fb      	ldrb	r3, [r7, #3]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	0151      	lsls	r1, r2, #5
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	440a      	add	r2, r1
 8008ebe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ec6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8008ec8:	78fa      	ldrb	r2, [r7, #3]
 8008eca:	6879      	ldr	r1, [r7, #4]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	011b      	lsls	r3, r3, #4
 8008ed0:	1a9b      	subs	r3, r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	440b      	add	r3, r1
 8008ed6:	334c      	adds	r3, #76	@ 0x4c
 8008ed8:	2204      	movs	r2, #4
 8008eda:	701a      	strb	r2, [r3, #0]
 8008edc:	e014      	b.n	8008f08 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008ede:	78fa      	ldrb	r2, [r7, #3]
 8008ee0:	6879      	ldr	r1, [r7, #4]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	1a9b      	subs	r3, r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	440b      	add	r3, r1
 8008eec:	334c      	adds	r3, #76	@ 0x4c
 8008eee:	2202      	movs	r2, #2
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	e009      	b.n	8008f08 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008ef4:	78fa      	ldrb	r2, [r7, #3]
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	011b      	lsls	r3, r3, #4
 8008efc:	1a9b      	subs	r3, r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	440b      	add	r3, r1
 8008f02:	334c      	adds	r3, #76	@ 0x4c
 8008f04:	2202      	movs	r2, #2
 8008f06:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008f08:	78fa      	ldrb	r2, [r7, #3]
 8008f0a:	6879      	ldr	r1, [r7, #4]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	011b      	lsls	r3, r3, #4
 8008f10:	1a9b      	subs	r3, r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	440b      	add	r3, r1
 8008f16:	3326      	adds	r3, #38	@ 0x26
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00b      	beq.n	8008f36 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008f1e:	78fa      	ldrb	r2, [r7, #3]
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	4613      	mov	r3, r2
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	1a9b      	subs	r3, r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	440b      	add	r3, r1
 8008f2c:	3326      	adds	r3, #38	@ 0x26
 8008f2e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	f040 8136 	bne.w	80091a2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	015a      	lsls	r2, r3, #5
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f4c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f54:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008f56:	78fb      	ldrb	r3, [r7, #3]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f62:	461a      	mov	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	e11b      	b.n	80091a2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	011b      	lsls	r3, r3, #4
 8008f72:	1a9b      	subs	r3, r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	440b      	add	r3, r1
 8008f78:	334d      	adds	r3, #77	@ 0x4d
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	f040 8081 	bne.w	8009084 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f82:	78fa      	ldrb	r2, [r7, #3]
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	4613      	mov	r3, r2
 8008f88:	011b      	lsls	r3, r3, #4
 8008f8a:	1a9b      	subs	r3, r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	440b      	add	r3, r1
 8008f90:	334d      	adds	r3, #77	@ 0x4d
 8008f92:	2202      	movs	r2, #2
 8008f94:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008f96:	78fa      	ldrb	r2, [r7, #3]
 8008f98:	6879      	ldr	r1, [r7, #4]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	440b      	add	r3, r1
 8008fa4:	331b      	adds	r3, #27
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	f040 80fa 	bne.w	80091a2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008fae:	78fa      	ldrb	r2, [r7, #3]
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	1a9b      	subs	r3, r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	334c      	adds	r3, #76	@ 0x4c
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	78fa      	ldrb	r2, [r7, #3]
 8008fd2:	0151      	lsls	r1, r2, #5
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fe0:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	78fa      	ldrb	r2, [r7, #3]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009000:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8009002:	78fb      	ldrb	r3, [r7, #3]
 8009004:	015a      	lsls	r2, r3, #5
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	4413      	add	r3, r2
 800900a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	78fa      	ldrb	r2, [r7, #3]
 8009012:	0151      	lsls	r1, r2, #5
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	440a      	add	r2, r1
 8009018:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800901c:	f023 0320 	bic.w	r3, r3, #32
 8009020:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009022:	78fa      	ldrb	r2, [r7, #3]
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	4613      	mov	r3, r2
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	1a9b      	subs	r3, r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	440b      	add	r3, r1
 8009030:	3326      	adds	r3, #38	@ 0x26
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009038:	78fa      	ldrb	r2, [r7, #3]
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	4613      	mov	r3, r2
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	1a9b      	subs	r3, r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	440b      	add	r3, r1
 8009046:	3326      	adds	r3, #38	@ 0x26
 8009048:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800904a:	2b02      	cmp	r3, #2
 800904c:	f040 80a9 	bne.w	80091a2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	4413      	add	r3, r2
 8009058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009066:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800906e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	4413      	add	r3, r2
 8009078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800907c:	461a      	mov	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	e08e      	b.n	80091a2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009084:	78fa      	ldrb	r2, [r7, #3]
 8009086:	6879      	ldr	r1, [r7, #4]
 8009088:	4613      	mov	r3, r2
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	1a9b      	subs	r3, r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	440b      	add	r3, r1
 8009092:	334d      	adds	r3, #77	@ 0x4d
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b04      	cmp	r3, #4
 8009098:	d143      	bne.n	8009122 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800909a:	78fa      	ldrb	r2, [r7, #3]
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	4613      	mov	r3, r2
 80090a0:	011b      	lsls	r3, r3, #4
 80090a2:	1a9b      	subs	r3, r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	440b      	add	r3, r1
 80090a8:	334d      	adds	r3, #77	@ 0x4d
 80090aa:	2202      	movs	r2, #2
 80090ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	6879      	ldr	r1, [r7, #4]
 80090b2:	4613      	mov	r3, r2
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	1a9b      	subs	r3, r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	334c      	adds	r3, #76	@ 0x4c
 80090be:	2202      	movs	r2, #2
 80090c0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80090c2:	78fa      	ldrb	r2, [r7, #3]
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	4613      	mov	r3, r2
 80090c8:	011b      	lsls	r3, r3, #4
 80090ca:	1a9b      	subs	r3, r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	3326      	adds	r3, #38	@ 0x26
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00a      	beq.n	80090ee <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80090d8:	78fa      	ldrb	r2, [r7, #3]
 80090da:	6879      	ldr	r1, [r7, #4]
 80090dc:	4613      	mov	r3, r2
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	440b      	add	r3, r1
 80090e6:	3326      	adds	r3, #38	@ 0x26
 80090e8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d159      	bne.n	80091a2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80090ee:	78fb      	ldrb	r3, [r7, #3]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009104:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800910c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	4413      	add	r3, r2
 8009116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800911a:	461a      	mov	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	e03f      	b.n	80091a2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8009122:	78fa      	ldrb	r2, [r7, #3]
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	4613      	mov	r3, r2
 8009128:	011b      	lsls	r3, r3, #4
 800912a:	1a9b      	subs	r3, r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	440b      	add	r3, r1
 8009130:	334d      	adds	r3, #77	@ 0x4d
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b08      	cmp	r3, #8
 8009136:	d126      	bne.n	8009186 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009138:	78fa      	ldrb	r2, [r7, #3]
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	4613      	mov	r3, r2
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	1a9b      	subs	r3, r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	440b      	add	r3, r1
 8009146:	334d      	adds	r3, #77	@ 0x4d
 8009148:	2202      	movs	r2, #2
 800914a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800914c:	78fa      	ldrb	r2, [r7, #3]
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	4613      	mov	r3, r2
 8009152:	011b      	lsls	r3, r3, #4
 8009154:	1a9b      	subs	r3, r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	3344      	adds	r3, #68	@ 0x44
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	1c59      	adds	r1, r3, #1
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	4613      	mov	r3, r2
 8009164:	011b      	lsls	r3, r3, #4
 8009166:	1a9b      	subs	r3, r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4403      	add	r3, r0
 800916c:	3344      	adds	r3, #68	@ 0x44
 800916e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8009170:	78fa      	ldrb	r2, [r7, #3]
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4613      	mov	r3, r2
 8009176:	011b      	lsls	r3, r3, #4
 8009178:	1a9b      	subs	r3, r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	440b      	add	r3, r1
 800917e:	334c      	adds	r3, #76	@ 0x4c
 8009180:	2204      	movs	r2, #4
 8009182:	701a      	strb	r2, [r3, #0]
 8009184:	e00d      	b.n	80091a2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8009186:	78fa      	ldrb	r2, [r7, #3]
 8009188:	6879      	ldr	r1, [r7, #4]
 800918a:	4613      	mov	r3, r2
 800918c:	011b      	lsls	r3, r3, #4
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	440b      	add	r3, r1
 8009194:	334d      	adds	r3, #77	@ 0x4d
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b02      	cmp	r3, #2
 800919a:	f000 8100 	beq.w	800939e <HCD_HC_IN_IRQHandler+0xcca>
 800919e:	e000      	b.n	80091a2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80091a0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80091a2:	78fa      	ldrb	r2, [r7, #3]
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	4613      	mov	r3, r2
 80091a8:	011b      	lsls	r3, r3, #4
 80091aa:	1a9b      	subs	r3, r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	440b      	add	r3, r1
 80091b0:	334c      	adds	r3, #76	@ 0x4c
 80091b2:	781a      	ldrb	r2, [r3, #0]
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f00e f9c5 	bl	8017548 <HAL_HCD_HC_NotifyURBChange_Callback>
 80091be:	e0ef      	b.n	80093a0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	78fa      	ldrb	r2, [r7, #3]
 80091c6:	4611      	mov	r1, r2
 80091c8:	4618      	mov	r0, r3
 80091ca:	f008 fa94 	bl	80116f6 <USB_ReadChInterrupts>
 80091ce:	4603      	mov	r3, r0
 80091d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091d4:	2b40      	cmp	r3, #64	@ 0x40
 80091d6:	d12f      	bne.n	8009238 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091e4:	461a      	mov	r2, r3
 80091e6:	2340      	movs	r3, #64	@ 0x40
 80091e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80091ea:	78fa      	ldrb	r2, [r7, #3]
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	4613      	mov	r3, r2
 80091f0:	011b      	lsls	r3, r3, #4
 80091f2:	1a9b      	subs	r3, r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	440b      	add	r3, r1
 80091f8:	334d      	adds	r3, #77	@ 0x4d
 80091fa:	2205      	movs	r2, #5
 80091fc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	4613      	mov	r3, r2
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	1a9b      	subs	r3, r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	331a      	adds	r3, #26
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d109      	bne.n	8009228 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009214:	78fa      	ldrb	r2, [r7, #3]
 8009216:	6879      	ldr	r1, [r7, #4]
 8009218:	4613      	mov	r3, r2
 800921a:	011b      	lsls	r3, r3, #4
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	440b      	add	r3, r1
 8009222:	3344      	adds	r3, #68	@ 0x44
 8009224:	2200      	movs	r2, #0
 8009226:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	78fa      	ldrb	r2, [r7, #3]
 800922e:	4611      	mov	r1, r2
 8009230:	4618      	mov	r0, r3
 8009232:	f008 fadd 	bl	80117f0 <USB_HC_Halt>
 8009236:	e0b3      	b.n	80093a0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	78fa      	ldrb	r2, [r7, #3]
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f008 fa58 	bl	80116f6 <USB_ReadChInterrupts>
 8009246:	4603      	mov	r3, r0
 8009248:	f003 0310 	and.w	r3, r3, #16
 800924c:	2b10      	cmp	r3, #16
 800924e:	f040 80a7 	bne.w	80093a0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8009252:	78fa      	ldrb	r2, [r7, #3]
 8009254:	6879      	ldr	r1, [r7, #4]
 8009256:	4613      	mov	r3, r2
 8009258:	011b      	lsls	r3, r3, #4
 800925a:	1a9b      	subs	r3, r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	440b      	add	r3, r1
 8009260:	3326      	adds	r3, #38	@ 0x26
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b03      	cmp	r3, #3
 8009266:	d11b      	bne.n	80092a0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009268:	78fa      	ldrb	r2, [r7, #3]
 800926a:	6879      	ldr	r1, [r7, #4]
 800926c:	4613      	mov	r3, r2
 800926e:	011b      	lsls	r3, r3, #4
 8009270:	1a9b      	subs	r3, r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	440b      	add	r3, r1
 8009276:	3344      	adds	r3, #68	@ 0x44
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800927c:	78fa      	ldrb	r2, [r7, #3]
 800927e:	6879      	ldr	r1, [r7, #4]
 8009280:	4613      	mov	r3, r2
 8009282:	011b      	lsls	r3, r3, #4
 8009284:	1a9b      	subs	r3, r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	334d      	adds	r3, #77	@ 0x4d
 800928c:	2204      	movs	r2, #4
 800928e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f008 faa9 	bl	80117f0 <USB_HC_Halt>
 800929e:	e03f      	b.n	8009320 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80092a0:	78fa      	ldrb	r2, [r7, #3]
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	4613      	mov	r3, r2
 80092a6:	011b      	lsls	r3, r3, #4
 80092a8:	1a9b      	subs	r3, r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	440b      	add	r3, r1
 80092ae:	3326      	adds	r3, #38	@ 0x26
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	4613      	mov	r3, r2
 80092bc:	011b      	lsls	r3, r3, #4
 80092be:	1a9b      	subs	r3, r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	440b      	add	r3, r1
 80092c4:	3326      	adds	r3, #38	@ 0x26
 80092c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d129      	bne.n	8009320 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80092cc:	78fa      	ldrb	r2, [r7, #3]
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	4613      	mov	r3, r2
 80092d2:	011b      	lsls	r3, r3, #4
 80092d4:	1a9b      	subs	r3, r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	3344      	adds	r3, #68	@ 0x44
 80092dc:	2200      	movs	r2, #0
 80092de:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	799b      	ldrb	r3, [r3, #6]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00a      	beq.n	80092fe <HCD_HC_IN_IRQHandler+0xc2a>
 80092e8:	78fa      	ldrb	r2, [r7, #3]
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	4613      	mov	r3, r2
 80092ee:	011b      	lsls	r3, r3, #4
 80092f0:	1a9b      	subs	r3, r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	440b      	add	r3, r1
 80092f6:	331b      	adds	r3, #27
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d110      	bne.n	8009320 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80092fe:	78fa      	ldrb	r2, [r7, #3]
 8009300:	6879      	ldr	r1, [r7, #4]
 8009302:	4613      	mov	r3, r2
 8009304:	011b      	lsls	r3, r3, #4
 8009306:	1a9b      	subs	r3, r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	440b      	add	r3, r1
 800930c:	334d      	adds	r3, #77	@ 0x4d
 800930e:	2204      	movs	r2, #4
 8009310:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	78fa      	ldrb	r2, [r7, #3]
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f008 fa68 	bl	80117f0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8009320:	78fa      	ldrb	r2, [r7, #3]
 8009322:	6879      	ldr	r1, [r7, #4]
 8009324:	4613      	mov	r3, r2
 8009326:	011b      	lsls	r3, r3, #4
 8009328:	1a9b      	subs	r3, r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	440b      	add	r3, r1
 800932e:	331b      	adds	r3, #27
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d129      	bne.n	800938a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	6879      	ldr	r1, [r7, #4]
 800933a:	4613      	mov	r3, r2
 800933c:	011b      	lsls	r3, r3, #4
 800933e:	1a9b      	subs	r3, r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	440b      	add	r3, r1
 8009344:	331b      	adds	r3, #27
 8009346:	2200      	movs	r2, #0
 8009348:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800934a:	78fb      	ldrb	r3, [r7, #3]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	4413      	add	r3, r2
 8009352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	0151      	lsls	r1, r2, #5
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	440a      	add	r2, r1
 8009360:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009368:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	4413      	add	r3, r2
 8009372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	440a      	add	r2, r1
 8009380:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009384:	f043 0320 	orr.w	r3, r3, #32
 8009388:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	4413      	add	r3, r2
 8009392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009396:	461a      	mov	r2, r3
 8009398:	2310      	movs	r3, #16
 800939a:	6093      	str	r3, [r2, #8]
 800939c:	e000      	b.n	80093a0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800939e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b086      	sub	sp, #24
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	460b      	mov	r3, r1
 80093b0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	78fa      	ldrb	r2, [r7, #3]
 80093c2:	4611      	mov	r1, r2
 80093c4:	4618      	mov	r0, r3
 80093c6:	f008 f996 	bl	80116f6 <USB_ReadChInterrupts>
 80093ca:	4603      	mov	r3, r0
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b04      	cmp	r3, #4
 80093d2:	d11b      	bne.n	800940c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093e0:	461a      	mov	r2, r3
 80093e2:	2304      	movs	r3, #4
 80093e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	6879      	ldr	r1, [r7, #4]
 80093ea:	4613      	mov	r3, r2
 80093ec:	011b      	lsls	r3, r3, #4
 80093ee:	1a9b      	subs	r3, r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	440b      	add	r3, r1
 80093f4:	334d      	adds	r3, #77	@ 0x4d
 80093f6:	2207      	movs	r2, #7
 80093f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	78fa      	ldrb	r2, [r7, #3]
 8009400:	4611      	mov	r1, r2
 8009402:	4618      	mov	r0, r3
 8009404:	f008 f9f4 	bl	80117f0 <USB_HC_Halt>
 8009408:	f000 bc89 	b.w	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	78fa      	ldrb	r2, [r7, #3]
 8009412:	4611      	mov	r1, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f008 f96e 	bl	80116f6 <USB_ReadChInterrupts>
 800941a:	4603      	mov	r3, r0
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b20      	cmp	r3, #32
 8009422:	f040 8082 	bne.w	800952a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009426:	78fb      	ldrb	r3, [r7, #3]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	4413      	add	r3, r2
 800942e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009432:	461a      	mov	r2, r3
 8009434:	2320      	movs	r3, #32
 8009436:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8009438:	78fa      	ldrb	r2, [r7, #3]
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	4613      	mov	r3, r2
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	1a9b      	subs	r3, r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	440b      	add	r3, r1
 8009446:	3319      	adds	r3, #25
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d124      	bne.n	8009498 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800944e:	78fa      	ldrb	r2, [r7, #3]
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	011b      	lsls	r3, r3, #4
 8009456:	1a9b      	subs	r3, r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	3319      	adds	r3, #25
 800945e:	2200      	movs	r2, #0
 8009460:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009462:	78fa      	ldrb	r2, [r7, #3]
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	4613      	mov	r3, r2
 8009468:	011b      	lsls	r3, r3, #4
 800946a:	1a9b      	subs	r3, r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	334c      	adds	r3, #76	@ 0x4c
 8009472:	2202      	movs	r2, #2
 8009474:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8009476:	78fa      	ldrb	r2, [r7, #3]
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	4613      	mov	r3, r2
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	1a9b      	subs	r3, r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	440b      	add	r3, r1
 8009484:	334d      	adds	r3, #77	@ 0x4d
 8009486:	2203      	movs	r2, #3
 8009488:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	78fa      	ldrb	r2, [r7, #3]
 8009490:	4611      	mov	r1, r2
 8009492:	4618      	mov	r0, r3
 8009494:	f008 f9ac 	bl	80117f0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8009498:	78fa      	ldrb	r2, [r7, #3]
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	4613      	mov	r3, r2
 800949e:	011b      	lsls	r3, r3, #4
 80094a0:	1a9b      	subs	r3, r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	440b      	add	r3, r1
 80094a6:	331a      	adds	r3, #26
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	f040 8437 	bne.w	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	4613      	mov	r3, r2
 80094b6:	011b      	lsls	r3, r3, #4
 80094b8:	1a9b      	subs	r3, r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	440b      	add	r3, r1
 80094be:	331b      	adds	r3, #27
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f040 842b 	bne.w	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80094c8:	78fa      	ldrb	r2, [r7, #3]
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	4613      	mov	r3, r2
 80094ce:	011b      	lsls	r3, r3, #4
 80094d0:	1a9b      	subs	r3, r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	440b      	add	r3, r1
 80094d6:	3326      	adds	r3, #38	@ 0x26
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d009      	beq.n	80094f2 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80094de:	78fa      	ldrb	r2, [r7, #3]
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	4613      	mov	r3, r2
 80094e4:	011b      	lsls	r3, r3, #4
 80094e6:	1a9b      	subs	r3, r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	440b      	add	r3, r1
 80094ec:	331b      	adds	r3, #27
 80094ee:	2201      	movs	r2, #1
 80094f0:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80094f2:	78fa      	ldrb	r2, [r7, #3]
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	4613      	mov	r3, r2
 80094f8:	011b      	lsls	r3, r3, #4
 80094fa:	1a9b      	subs	r3, r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	440b      	add	r3, r1
 8009500:	334d      	adds	r3, #77	@ 0x4d
 8009502:	2203      	movs	r2, #3
 8009504:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	78fa      	ldrb	r2, [r7, #3]
 800950c:	4611      	mov	r1, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f008 f96e 	bl	80117f0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8009514:	78fa      	ldrb	r2, [r7, #3]
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	4613      	mov	r3, r2
 800951a:	011b      	lsls	r3, r3, #4
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	440b      	add	r3, r1
 8009522:	3344      	adds	r3, #68	@ 0x44
 8009524:	2200      	movs	r2, #0
 8009526:	601a      	str	r2, [r3, #0]
 8009528:	e3f9      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	78fa      	ldrb	r2, [r7, #3]
 8009530:	4611      	mov	r1, r2
 8009532:	4618      	mov	r0, r3
 8009534:	f008 f8df 	bl	80116f6 <USB_ReadChInterrupts>
 8009538:	4603      	mov	r3, r0
 800953a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800953e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009542:	d111      	bne.n	8009568 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	4413      	add	r3, r2
 800954c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009550:	461a      	mov	r2, r3
 8009552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009556:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	78fa      	ldrb	r2, [r7, #3]
 800955e:	4611      	mov	r1, r2
 8009560:	4618      	mov	r0, r3
 8009562:	f008 f945 	bl	80117f0 <USB_HC_Halt>
 8009566:	e3da      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	78fa      	ldrb	r2, [r7, #3]
 800956e:	4611      	mov	r1, r2
 8009570:	4618      	mov	r0, r3
 8009572:	f008 f8c0 	bl	80116f6 <USB_ReadChInterrupts>
 8009576:	4603      	mov	r3, r0
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b01      	cmp	r3, #1
 800957e:	d168      	bne.n	8009652 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009580:	78fa      	ldrb	r2, [r7, #3]
 8009582:	6879      	ldr	r1, [r7, #4]
 8009584:	4613      	mov	r3, r2
 8009586:	011b      	lsls	r3, r3, #4
 8009588:	1a9b      	subs	r3, r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	440b      	add	r3, r1
 800958e:	3344      	adds	r3, #68	@ 0x44
 8009590:	2200      	movs	r2, #0
 8009592:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	78fa      	ldrb	r2, [r7, #3]
 800959a:	4611      	mov	r1, r2
 800959c:	4618      	mov	r0, r3
 800959e:	f008 f8aa 	bl	80116f6 <USB_ReadChInterrupts>
 80095a2:	4603      	mov	r3, r0
 80095a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a8:	2b40      	cmp	r3, #64	@ 0x40
 80095aa:	d112      	bne.n	80095d2 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80095ac:	78fa      	ldrb	r2, [r7, #3]
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4613      	mov	r3, r2
 80095b2:	011b      	lsls	r3, r3, #4
 80095b4:	1a9b      	subs	r3, r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	3319      	adds	r3, #25
 80095bc:	2201      	movs	r2, #1
 80095be:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095cc:	461a      	mov	r2, r3
 80095ce:	2340      	movs	r3, #64	@ 0x40
 80095d0:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80095d2:	78fa      	ldrb	r2, [r7, #3]
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	4613      	mov	r3, r2
 80095d8:	011b      	lsls	r3, r3, #4
 80095da:	1a9b      	subs	r3, r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	440b      	add	r3, r1
 80095e0:	331b      	adds	r3, #27
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d019      	beq.n	800961c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80095e8:	78fa      	ldrb	r2, [r7, #3]
 80095ea:	6879      	ldr	r1, [r7, #4]
 80095ec:	4613      	mov	r3, r2
 80095ee:	011b      	lsls	r3, r3, #4
 80095f0:	1a9b      	subs	r3, r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	440b      	add	r3, r1
 80095f6:	331b      	adds	r3, #27
 80095f8:	2200      	movs	r2, #0
 80095fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	4413      	add	r3, r2
 8009604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	78fa      	ldrb	r2, [r7, #3]
 800960c:	0151      	lsls	r1, r2, #5
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	440a      	add	r2, r1
 8009612:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800961a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	4413      	add	r3, r2
 8009624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009628:	461a      	mov	r2, r3
 800962a:	2301      	movs	r3, #1
 800962c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800962e:	78fa      	ldrb	r2, [r7, #3]
 8009630:	6879      	ldr	r1, [r7, #4]
 8009632:	4613      	mov	r3, r2
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	1a9b      	subs	r3, r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	440b      	add	r3, r1
 800963c:	334d      	adds	r3, #77	@ 0x4d
 800963e:	2201      	movs	r2, #1
 8009640:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	78fa      	ldrb	r2, [r7, #3]
 8009648:	4611      	mov	r1, r2
 800964a:	4618      	mov	r0, r3
 800964c:	f008 f8d0 	bl	80117f0 <USB_HC_Halt>
 8009650:	e365      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	4611      	mov	r1, r2
 800965a:	4618      	mov	r0, r3
 800965c:	f008 f84b 	bl	80116f6 <USB_ReadChInterrupts>
 8009660:	4603      	mov	r3, r0
 8009662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009666:	2b40      	cmp	r3, #64	@ 0x40
 8009668:	d139      	bne.n	80096de <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800966a:	78fa      	ldrb	r2, [r7, #3]
 800966c:	6879      	ldr	r1, [r7, #4]
 800966e:	4613      	mov	r3, r2
 8009670:	011b      	lsls	r3, r3, #4
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	440b      	add	r3, r1
 8009678:	334d      	adds	r3, #77	@ 0x4d
 800967a:	2205      	movs	r2, #5
 800967c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800967e:	78fa      	ldrb	r2, [r7, #3]
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	4613      	mov	r3, r2
 8009684:	011b      	lsls	r3, r3, #4
 8009686:	1a9b      	subs	r3, r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	331a      	adds	r3, #26
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d109      	bne.n	80096a8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8009694:	78fa      	ldrb	r2, [r7, #3]
 8009696:	6879      	ldr	r1, [r7, #4]
 8009698:	4613      	mov	r3, r2
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	1a9b      	subs	r3, r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	440b      	add	r3, r1
 80096a2:	3319      	adds	r3, #25
 80096a4:	2201      	movs	r2, #1
 80096a6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80096a8:	78fa      	ldrb	r2, [r7, #3]
 80096aa:	6879      	ldr	r1, [r7, #4]
 80096ac:	4613      	mov	r3, r2
 80096ae:	011b      	lsls	r3, r3, #4
 80096b0:	1a9b      	subs	r3, r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	440b      	add	r3, r1
 80096b6:	3344      	adds	r3, #68	@ 0x44
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	78fa      	ldrb	r2, [r7, #3]
 80096c2:	4611      	mov	r1, r2
 80096c4:	4618      	mov	r0, r3
 80096c6:	f008 f893 	bl	80117f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80096ca:	78fb      	ldrb	r3, [r7, #3]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096d6:	461a      	mov	r2, r3
 80096d8:	2340      	movs	r3, #64	@ 0x40
 80096da:	6093      	str	r3, [r2, #8]
 80096dc:	e31f      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	78fa      	ldrb	r2, [r7, #3]
 80096e4:	4611      	mov	r1, r2
 80096e6:	4618      	mov	r0, r3
 80096e8:	f008 f805 	bl	80116f6 <USB_ReadChInterrupts>
 80096ec:	4603      	mov	r3, r0
 80096ee:	f003 0308 	and.w	r3, r3, #8
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	d11a      	bne.n	800972c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80096f6:	78fb      	ldrb	r3, [r7, #3]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009702:	461a      	mov	r2, r3
 8009704:	2308      	movs	r3, #8
 8009706:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8009708:	78fa      	ldrb	r2, [r7, #3]
 800970a:	6879      	ldr	r1, [r7, #4]
 800970c:	4613      	mov	r3, r2
 800970e:	011b      	lsls	r3, r3, #4
 8009710:	1a9b      	subs	r3, r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	440b      	add	r3, r1
 8009716:	334d      	adds	r3, #77	@ 0x4d
 8009718:	2206      	movs	r2, #6
 800971a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	78fa      	ldrb	r2, [r7, #3]
 8009722:	4611      	mov	r1, r2
 8009724:	4618      	mov	r0, r3
 8009726:	f008 f863 	bl	80117f0 <USB_HC_Halt>
 800972a:	e2f8      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	78fa      	ldrb	r2, [r7, #3]
 8009732:	4611      	mov	r1, r2
 8009734:	4618      	mov	r0, r3
 8009736:	f007 ffde 	bl	80116f6 <USB_ReadChInterrupts>
 800973a:	4603      	mov	r3, r0
 800973c:	f003 0310 	and.w	r3, r3, #16
 8009740:	2b10      	cmp	r3, #16
 8009742:	d144      	bne.n	80097ce <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009744:	78fa      	ldrb	r2, [r7, #3]
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	4613      	mov	r3, r2
 800974a:	011b      	lsls	r3, r3, #4
 800974c:	1a9b      	subs	r3, r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	440b      	add	r3, r1
 8009752:	3344      	adds	r3, #68	@ 0x44
 8009754:	2200      	movs	r2, #0
 8009756:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8009758:	78fa      	ldrb	r2, [r7, #3]
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	4613      	mov	r3, r2
 800975e:	011b      	lsls	r3, r3, #4
 8009760:	1a9b      	subs	r3, r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	440b      	add	r3, r1
 8009766:	334d      	adds	r3, #77	@ 0x4d
 8009768:	2204      	movs	r2, #4
 800976a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800976c:	78fa      	ldrb	r2, [r7, #3]
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	4613      	mov	r3, r2
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	1a9b      	subs	r3, r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	440b      	add	r3, r1
 800977a:	3319      	adds	r3, #25
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d114      	bne.n	80097ac <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8009782:	78fa      	ldrb	r2, [r7, #3]
 8009784:	6879      	ldr	r1, [r7, #4]
 8009786:	4613      	mov	r3, r2
 8009788:	011b      	lsls	r3, r3, #4
 800978a:	1a9b      	subs	r3, r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	440b      	add	r3, r1
 8009790:	3318      	adds	r3, #24
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d109      	bne.n	80097ac <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8009798:	78fa      	ldrb	r2, [r7, #3]
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	4613      	mov	r3, r2
 800979e:	011b      	lsls	r3, r3, #4
 80097a0:	1a9b      	subs	r3, r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	440b      	add	r3, r1
 80097a6:	3319      	adds	r3, #25
 80097a8:	2201      	movs	r2, #1
 80097aa:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	78fa      	ldrb	r2, [r7, #3]
 80097b2:	4611      	mov	r1, r2
 80097b4:	4618      	mov	r0, r3
 80097b6:	f008 f81b 	bl	80117f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80097ba:	78fb      	ldrb	r3, [r7, #3]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097c6:	461a      	mov	r2, r3
 80097c8:	2310      	movs	r3, #16
 80097ca:	6093      	str	r3, [r2, #8]
 80097cc:	e2a7      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	78fa      	ldrb	r2, [r7, #3]
 80097d4:	4611      	mov	r1, r2
 80097d6:	4618      	mov	r0, r3
 80097d8:	f007 ff8d 	bl	80116f6 <USB_ReadChInterrupts>
 80097dc:	4603      	mov	r3, r0
 80097de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097e2:	2b80      	cmp	r3, #128	@ 0x80
 80097e4:	f040 8083 	bne.w	80098ee <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	799b      	ldrb	r3, [r3, #6]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d111      	bne.n	8009814 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80097f0:	78fa      	ldrb	r2, [r7, #3]
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	4613      	mov	r3, r2
 80097f6:	011b      	lsls	r3, r3, #4
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	440b      	add	r3, r1
 80097fe:	334d      	adds	r3, #77	@ 0x4d
 8009800:	2207      	movs	r2, #7
 8009802:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	78fa      	ldrb	r2, [r7, #3]
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f007 ffef 	bl	80117f0 <USB_HC_Halt>
 8009812:	e062      	b.n	80098da <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8009814:	78fa      	ldrb	r2, [r7, #3]
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	4613      	mov	r3, r2
 800981a:	011b      	lsls	r3, r3, #4
 800981c:	1a9b      	subs	r3, r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	440b      	add	r3, r1
 8009822:	3344      	adds	r3, #68	@ 0x44
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	1c59      	adds	r1, r3, #1
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	4613      	mov	r3, r2
 800982c:	011b      	lsls	r3, r3, #4
 800982e:	1a9b      	subs	r3, r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4403      	add	r3, r0
 8009834:	3344      	adds	r3, #68	@ 0x44
 8009836:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009838:	78fa      	ldrb	r2, [r7, #3]
 800983a:	6879      	ldr	r1, [r7, #4]
 800983c:	4613      	mov	r3, r2
 800983e:	011b      	lsls	r3, r3, #4
 8009840:	1a9b      	subs	r3, r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	3344      	adds	r3, #68	@ 0x44
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b02      	cmp	r3, #2
 800984c:	d922      	bls.n	8009894 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800984e:	78fa      	ldrb	r2, [r7, #3]
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	4613      	mov	r3, r2
 8009854:	011b      	lsls	r3, r3, #4
 8009856:	1a9b      	subs	r3, r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	440b      	add	r3, r1
 800985c:	3344      	adds	r3, #68	@ 0x44
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	6879      	ldr	r1, [r7, #4]
 8009866:	4613      	mov	r3, r2
 8009868:	011b      	lsls	r3, r3, #4
 800986a:	1a9b      	subs	r3, r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	440b      	add	r3, r1
 8009870:	334c      	adds	r3, #76	@ 0x4c
 8009872:	2204      	movs	r2, #4
 8009874:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009876:	78fa      	ldrb	r2, [r7, #3]
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	4613      	mov	r3, r2
 800987c:	011b      	lsls	r3, r3, #4
 800987e:	1a9b      	subs	r3, r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	440b      	add	r3, r1
 8009884:	334c      	adds	r3, #76	@ 0x4c
 8009886:	781a      	ldrb	r2, [r3, #0]
 8009888:	78fb      	ldrb	r3, [r7, #3]
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f00d fe5b 	bl	8017548 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009892:	e022      	b.n	80098da <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009894:	78fa      	ldrb	r2, [r7, #3]
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	4613      	mov	r3, r2
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	334c      	adds	r3, #76	@ 0x4c
 80098a4:	2202      	movs	r2, #2
 80098a6:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	015a      	lsls	r2, r3, #5
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80098be:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098c6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	015a      	lsls	r2, r3, #5
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	4413      	add	r3, r2
 80098d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098d4:	461a      	mov	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80098da:	78fb      	ldrb	r3, [r7, #3]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098e6:	461a      	mov	r2, r3
 80098e8:	2380      	movs	r3, #128	@ 0x80
 80098ea:	6093      	str	r3, [r2, #8]
 80098ec:	e217      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	78fa      	ldrb	r2, [r7, #3]
 80098f4:	4611      	mov	r1, r2
 80098f6:	4618      	mov	r0, r3
 80098f8:	f007 fefd 	bl	80116f6 <USB_ReadChInterrupts>
 80098fc:	4603      	mov	r3, r0
 80098fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009906:	d11b      	bne.n	8009940 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	4613      	mov	r3, r2
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	1a9b      	subs	r3, r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	440b      	add	r3, r1
 8009916:	334d      	adds	r3, #77	@ 0x4d
 8009918:	2209      	movs	r2, #9
 800991a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	78fa      	ldrb	r2, [r7, #3]
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f007 ff63 	bl	80117f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800992a:	78fb      	ldrb	r3, [r7, #3]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	4413      	add	r3, r2
 8009932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009936:	461a      	mov	r2, r3
 8009938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800993c:	6093      	str	r3, [r2, #8]
 800993e:	e1ee      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	78fa      	ldrb	r2, [r7, #3]
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f007 fed4 	bl	80116f6 <USB_ReadChInterrupts>
 800994e:	4603      	mov	r3, r0
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b02      	cmp	r3, #2
 8009956:	f040 81df 	bne.w	8009d18 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	4413      	add	r3, r2
 8009962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009966:	461a      	mov	r2, r3
 8009968:	2302      	movs	r3, #2
 800996a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800996c:	78fa      	ldrb	r2, [r7, #3]
 800996e:	6879      	ldr	r1, [r7, #4]
 8009970:	4613      	mov	r3, r2
 8009972:	011b      	lsls	r3, r3, #4
 8009974:	1a9b      	subs	r3, r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	440b      	add	r3, r1
 800997a:	334d      	adds	r3, #77	@ 0x4d
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b01      	cmp	r3, #1
 8009980:	f040 8093 	bne.w	8009aaa <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009984:	78fa      	ldrb	r2, [r7, #3]
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	4613      	mov	r3, r2
 800998a:	011b      	lsls	r3, r3, #4
 800998c:	1a9b      	subs	r3, r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	440b      	add	r3, r1
 8009992:	334d      	adds	r3, #77	@ 0x4d
 8009994:	2202      	movs	r2, #2
 8009996:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009998:	78fa      	ldrb	r2, [r7, #3]
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	4613      	mov	r3, r2
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	1a9b      	subs	r3, r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	440b      	add	r3, r1
 80099a6:	334c      	adds	r3, #76	@ 0x4c
 80099a8:	2201      	movs	r2, #1
 80099aa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80099ac:	78fa      	ldrb	r2, [r7, #3]
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	4613      	mov	r3, r2
 80099b2:	011b      	lsls	r3, r3, #4
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	440b      	add	r3, r1
 80099ba:	3326      	adds	r3, #38	@ 0x26
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d00b      	beq.n	80099da <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80099c2:	78fa      	ldrb	r2, [r7, #3]
 80099c4:	6879      	ldr	r1, [r7, #4]
 80099c6:	4613      	mov	r3, r2
 80099c8:	011b      	lsls	r3, r3, #4
 80099ca:	1a9b      	subs	r3, r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	440b      	add	r3, r1
 80099d0:	3326      	adds	r3, #38	@ 0x26
 80099d2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	f040 8190 	bne.w	8009cfa <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	799b      	ldrb	r3, [r3, #6]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d115      	bne.n	8009a0e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80099e2:	78fa      	ldrb	r2, [r7, #3]
 80099e4:	6879      	ldr	r1, [r7, #4]
 80099e6:	4613      	mov	r3, r2
 80099e8:	011b      	lsls	r3, r3, #4
 80099ea:	1a9b      	subs	r3, r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	440b      	add	r3, r1
 80099f0:	333d      	adds	r3, #61	@ 0x3d
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	78fa      	ldrb	r2, [r7, #3]
 80099f6:	f083 0301 	eor.w	r3, r3, #1
 80099fa:	b2d8      	uxtb	r0, r3
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	4613      	mov	r3, r2
 8009a00:	011b      	lsls	r3, r3, #4
 8009a02:	1a9b      	subs	r3, r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	440b      	add	r3, r1
 8009a08:	333d      	adds	r3, #61	@ 0x3d
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	799b      	ldrb	r3, [r3, #6]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	f040 8171 	bne.w	8009cfa <HCD_HC_OUT_IRQHandler+0x954>
 8009a18:	78fa      	ldrb	r2, [r7, #3]
 8009a1a:	6879      	ldr	r1, [r7, #4]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	011b      	lsls	r3, r3, #4
 8009a20:	1a9b      	subs	r3, r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	440b      	add	r3, r1
 8009a26:	3334      	adds	r3, #52	@ 0x34
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 8165 	beq.w	8009cfa <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8009a30:	78fa      	ldrb	r2, [r7, #3]
 8009a32:	6879      	ldr	r1, [r7, #4]
 8009a34:	4613      	mov	r3, r2
 8009a36:	011b      	lsls	r3, r3, #4
 8009a38:	1a9b      	subs	r3, r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	3334      	adds	r3, #52	@ 0x34
 8009a40:	6819      	ldr	r1, [r3, #0]
 8009a42:	78fa      	ldrb	r2, [r7, #3]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	4613      	mov	r3, r2
 8009a48:	011b      	lsls	r3, r3, #4
 8009a4a:	1a9b      	subs	r3, r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4403      	add	r3, r0
 8009a50:	3328      	adds	r3, #40	@ 0x28
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	440b      	add	r3, r1
 8009a56:	1e59      	subs	r1, r3, #1
 8009a58:	78fa      	ldrb	r2, [r7, #3]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	011b      	lsls	r3, r3, #4
 8009a60:	1a9b      	subs	r3, r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4403      	add	r3, r0
 8009a66:	3328      	adds	r3, #40	@ 0x28
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a6e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 813f 	beq.w	8009cfa <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8009a7c:	78fa      	ldrb	r2, [r7, #3]
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	4613      	mov	r3, r2
 8009a82:	011b      	lsls	r3, r3, #4
 8009a84:	1a9b      	subs	r3, r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	440b      	add	r3, r1
 8009a8a:	333d      	adds	r3, #61	@ 0x3d
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	78fa      	ldrb	r2, [r7, #3]
 8009a90:	f083 0301 	eor.w	r3, r3, #1
 8009a94:	b2d8      	uxtb	r0, r3
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	011b      	lsls	r3, r3, #4
 8009a9c:	1a9b      	subs	r3, r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	440b      	add	r3, r1
 8009aa2:	333d      	adds	r3, #61	@ 0x3d
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	701a      	strb	r2, [r3, #0]
 8009aa8:	e127      	b.n	8009cfa <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009aaa:	78fa      	ldrb	r2, [r7, #3]
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	011b      	lsls	r3, r3, #4
 8009ab2:	1a9b      	subs	r3, r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	440b      	add	r3, r1
 8009ab8:	334d      	adds	r3, #77	@ 0x4d
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2b03      	cmp	r3, #3
 8009abe:	d120      	bne.n	8009b02 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009ac0:	78fa      	ldrb	r2, [r7, #3]
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	011b      	lsls	r3, r3, #4
 8009ac8:	1a9b      	subs	r3, r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	440b      	add	r3, r1
 8009ace:	334d      	adds	r3, #77	@ 0x4d
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009ad4:	78fa      	ldrb	r2, [r7, #3]
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	011b      	lsls	r3, r3, #4
 8009adc:	1a9b      	subs	r3, r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	440b      	add	r3, r1
 8009ae2:	331b      	adds	r3, #27
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	f040 8107 	bne.w	8009cfa <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009aec:	78fa      	ldrb	r2, [r7, #3]
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4613      	mov	r3, r2
 8009af2:	011b      	lsls	r3, r3, #4
 8009af4:	1a9b      	subs	r3, r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	440b      	add	r3, r1
 8009afa:	334c      	adds	r3, #76	@ 0x4c
 8009afc:	2202      	movs	r2, #2
 8009afe:	701a      	strb	r2, [r3, #0]
 8009b00:	e0fb      	b.n	8009cfa <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009b02:	78fa      	ldrb	r2, [r7, #3]
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	4613      	mov	r3, r2
 8009b08:	011b      	lsls	r3, r3, #4
 8009b0a:	1a9b      	subs	r3, r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	440b      	add	r3, r1
 8009b10:	334d      	adds	r3, #77	@ 0x4d
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b04      	cmp	r3, #4
 8009b16:	d13a      	bne.n	8009b8e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009b18:	78fa      	ldrb	r2, [r7, #3]
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	011b      	lsls	r3, r3, #4
 8009b20:	1a9b      	subs	r3, r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	440b      	add	r3, r1
 8009b26:	334d      	adds	r3, #77	@ 0x4d
 8009b28:	2202      	movs	r2, #2
 8009b2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009b2c:	78fa      	ldrb	r2, [r7, #3]
 8009b2e:	6879      	ldr	r1, [r7, #4]
 8009b30:	4613      	mov	r3, r2
 8009b32:	011b      	lsls	r3, r3, #4
 8009b34:	1a9b      	subs	r3, r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	440b      	add	r3, r1
 8009b3a:	334c      	adds	r3, #76	@ 0x4c
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009b40:	78fa      	ldrb	r2, [r7, #3]
 8009b42:	6879      	ldr	r1, [r7, #4]
 8009b44:	4613      	mov	r3, r2
 8009b46:	011b      	lsls	r3, r3, #4
 8009b48:	1a9b      	subs	r3, r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	440b      	add	r3, r1
 8009b4e:	331b      	adds	r3, #27
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	f040 80d1 	bne.w	8009cfa <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8009b58:	78fa      	ldrb	r2, [r7, #3]
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	011b      	lsls	r3, r3, #4
 8009b60:	1a9b      	subs	r3, r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	440b      	add	r3, r1
 8009b66:	331b      	adds	r3, #27
 8009b68:	2200      	movs	r2, #0
 8009b6a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009b6c:	78fb      	ldrb	r3, [r7, #3]
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	78fa      	ldrb	r2, [r7, #3]
 8009b7c:	0151      	lsls	r1, r2, #5
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	440a      	add	r2, r1
 8009b82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b8a:	6053      	str	r3, [r2, #4]
 8009b8c:	e0b5      	b.n	8009cfa <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009b8e:	78fa      	ldrb	r2, [r7, #3]
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	4613      	mov	r3, r2
 8009b94:	011b      	lsls	r3, r3, #4
 8009b96:	1a9b      	subs	r3, r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	440b      	add	r3, r1
 8009b9c:	334d      	adds	r3, #77	@ 0x4d
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b05      	cmp	r3, #5
 8009ba2:	d114      	bne.n	8009bce <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009ba4:	78fa      	ldrb	r2, [r7, #3]
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	011b      	lsls	r3, r3, #4
 8009bac:	1a9b      	subs	r3, r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	440b      	add	r3, r1
 8009bb2:	334d      	adds	r3, #77	@ 0x4d
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009bb8:	78fa      	ldrb	r2, [r7, #3]
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	1a9b      	subs	r3, r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	334c      	adds	r3, #76	@ 0x4c
 8009bc8:	2202      	movs	r2, #2
 8009bca:	701a      	strb	r2, [r3, #0]
 8009bcc:	e095      	b.n	8009cfa <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009bce:	78fa      	ldrb	r2, [r7, #3]
 8009bd0:	6879      	ldr	r1, [r7, #4]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	1a9b      	subs	r3, r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	440b      	add	r3, r1
 8009bdc:	334d      	adds	r3, #77	@ 0x4d
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	2b06      	cmp	r3, #6
 8009be2:	d114      	bne.n	8009c0e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009be4:	78fa      	ldrb	r2, [r7, #3]
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	4613      	mov	r3, r2
 8009bea:	011b      	lsls	r3, r3, #4
 8009bec:	1a9b      	subs	r3, r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	440b      	add	r3, r1
 8009bf2:	334d      	adds	r3, #77	@ 0x4d
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009bf8:	78fa      	ldrb	r2, [r7, #3]
 8009bfa:	6879      	ldr	r1, [r7, #4]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	011b      	lsls	r3, r3, #4
 8009c00:	1a9b      	subs	r3, r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	440b      	add	r3, r1
 8009c06:	334c      	adds	r3, #76	@ 0x4c
 8009c08:	2205      	movs	r2, #5
 8009c0a:	701a      	strb	r2, [r3, #0]
 8009c0c:	e075      	b.n	8009cfa <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009c0e:	78fa      	ldrb	r2, [r7, #3]
 8009c10:	6879      	ldr	r1, [r7, #4]
 8009c12:	4613      	mov	r3, r2
 8009c14:	011b      	lsls	r3, r3, #4
 8009c16:	1a9b      	subs	r3, r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	440b      	add	r3, r1
 8009c1c:	334d      	adds	r3, #77	@ 0x4d
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	2b07      	cmp	r3, #7
 8009c22:	d00a      	beq.n	8009c3a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009c24:	78fa      	ldrb	r2, [r7, #3]
 8009c26:	6879      	ldr	r1, [r7, #4]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	1a9b      	subs	r3, r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	440b      	add	r3, r1
 8009c32:	334d      	adds	r3, #77	@ 0x4d
 8009c34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009c36:	2b09      	cmp	r3, #9
 8009c38:	d170      	bne.n	8009d1c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009c3a:	78fa      	ldrb	r2, [r7, #3]
 8009c3c:	6879      	ldr	r1, [r7, #4]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	011b      	lsls	r3, r3, #4
 8009c42:	1a9b      	subs	r3, r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	440b      	add	r3, r1
 8009c48:	334d      	adds	r3, #77	@ 0x4d
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009c4e:	78fa      	ldrb	r2, [r7, #3]
 8009c50:	6879      	ldr	r1, [r7, #4]
 8009c52:	4613      	mov	r3, r2
 8009c54:	011b      	lsls	r3, r3, #4
 8009c56:	1a9b      	subs	r3, r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	440b      	add	r3, r1
 8009c5c:	3344      	adds	r3, #68	@ 0x44
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	1c59      	adds	r1, r3, #1
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	4613      	mov	r3, r2
 8009c66:	011b      	lsls	r3, r3, #4
 8009c68:	1a9b      	subs	r3, r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4403      	add	r3, r0
 8009c6e:	3344      	adds	r3, #68	@ 0x44
 8009c70:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009c72:	78fa      	ldrb	r2, [r7, #3]
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	4613      	mov	r3, r2
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	1a9b      	subs	r3, r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	440b      	add	r3, r1
 8009c80:	3344      	adds	r3, #68	@ 0x44
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d914      	bls.n	8009cb2 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009c88:	78fa      	ldrb	r2, [r7, #3]
 8009c8a:	6879      	ldr	r1, [r7, #4]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	011b      	lsls	r3, r3, #4
 8009c90:	1a9b      	subs	r3, r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	440b      	add	r3, r1
 8009c96:	3344      	adds	r3, #68	@ 0x44
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009c9c:	78fa      	ldrb	r2, [r7, #3]
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	011b      	lsls	r3, r3, #4
 8009ca4:	1a9b      	subs	r3, r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	440b      	add	r3, r1
 8009caa:	334c      	adds	r3, #76	@ 0x4c
 8009cac:	2204      	movs	r2, #4
 8009cae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009cb0:	e022      	b.n	8009cf8 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009cb2:	78fa      	ldrb	r2, [r7, #3]
 8009cb4:	6879      	ldr	r1, [r7, #4]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	1a9b      	subs	r3, r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	440b      	add	r3, r1
 8009cc0:	334c      	adds	r3, #76	@ 0x4c
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009cc6:	78fb      	ldrb	r3, [r7, #3]
 8009cc8:	015a      	lsls	r2, r3, #5
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009cdc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009ce4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009ce6:	78fb      	ldrb	r3, [r7, #3]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009cf8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009cfa:	78fa      	ldrb	r2, [r7, #3]
 8009cfc:	6879      	ldr	r1, [r7, #4]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	011b      	lsls	r3, r3, #4
 8009d02:	1a9b      	subs	r3, r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	440b      	add	r3, r1
 8009d08:	334c      	adds	r3, #76	@ 0x4c
 8009d0a:	781a      	ldrb	r2, [r3, #0]
 8009d0c:	78fb      	ldrb	r3, [r7, #3]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f00d fc19 	bl	8017548 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009d16:	e002      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8009d18:	bf00      	nop
 8009d1a:	e000      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8009d1c:	bf00      	nop
  }
}
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b08a      	sub	sp, #40	@ 0x28
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d34:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6a1b      	ldr	r3, [r3, #32]
 8009d3c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	f003 030f 	and.w	r3, r3, #15
 8009d44:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	0c5b      	lsrs	r3, r3, #17
 8009d4a:	f003 030f 	and.w	r3, r3, #15
 8009d4e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	091b      	lsrs	r3, r3, #4
 8009d54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d58:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d004      	beq.n	8009d6a <HCD_RXQLVL_IRQHandler+0x46>
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	2b05      	cmp	r3, #5
 8009d64:	f000 80b6 	beq.w	8009ed4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009d68:	e0b7      	b.n	8009eda <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 80b3 	beq.w	8009ed8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8009d72:	6879      	ldr	r1, [r7, #4]
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	4613      	mov	r3, r2
 8009d78:	011b      	lsls	r3, r3, #4
 8009d7a:	1a9b      	subs	r3, r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	440b      	add	r3, r1
 8009d80:	332c      	adds	r3, #44	@ 0x2c
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 80a7 	beq.w	8009ed8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	011b      	lsls	r3, r3, #4
 8009d92:	1a9b      	subs	r3, r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	440b      	add	r3, r1
 8009d98:	3338      	adds	r3, #56	@ 0x38
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	18d1      	adds	r1, r2, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	69ba      	ldr	r2, [r7, #24]
 8009da4:	4613      	mov	r3, r2
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	1a9b      	subs	r3, r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4403      	add	r3, r0
 8009dae:	3334      	adds	r3, #52	@ 0x34
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4299      	cmp	r1, r3
 8009db4:	f200 8083 	bhi.w	8009ebe <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	6879      	ldr	r1, [r7, #4]
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	011b      	lsls	r3, r3, #4
 8009dc4:	1a9b      	subs	r3, r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	440b      	add	r3, r1
 8009dca:	332c      	adds	r3, #44	@ 0x2c
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	b292      	uxth	r2, r2
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	f007 fc24 	bl	8011620 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009dd8:	6879      	ldr	r1, [r7, #4]
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	011b      	lsls	r3, r3, #4
 8009de0:	1a9b      	subs	r3, r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	440b      	add	r3, r1
 8009de6:	332c      	adds	r3, #44	@ 0x2c
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	18d1      	adds	r1, r2, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	69ba      	ldr	r2, [r7, #24]
 8009df2:	4613      	mov	r3, r2
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	1a9b      	subs	r3, r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4403      	add	r3, r0
 8009dfc:	332c      	adds	r3, #44	@ 0x2c
 8009dfe:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8009e00:	6879      	ldr	r1, [r7, #4]
 8009e02:	69ba      	ldr	r2, [r7, #24]
 8009e04:	4613      	mov	r3, r2
 8009e06:	011b      	lsls	r3, r3, #4
 8009e08:	1a9b      	subs	r3, r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	3338      	adds	r3, #56	@ 0x38
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	18d1      	adds	r1, r2, r3
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	011b      	lsls	r3, r3, #4
 8009e1e:	1a9b      	subs	r3, r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4403      	add	r3, r0
 8009e24:	3338      	adds	r3, #56	@ 0x38
 8009e26:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	015a      	lsls	r2, r3, #5
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	4413      	add	r3, r2
 8009e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	0cdb      	lsrs	r3, r3, #19
 8009e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e3c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009e3e:	6879      	ldr	r1, [r7, #4]
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	4613      	mov	r3, r2
 8009e44:	011b      	lsls	r3, r3, #4
 8009e46:	1a9b      	subs	r3, r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	440b      	add	r3, r1
 8009e4c:	3328      	adds	r3, #40	@ 0x28
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	461a      	mov	r2, r3
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d13f      	bne.n	8009ed8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d03c      	beq.n	8009ed8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009e74:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009e7c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	015a      	lsls	r2, r3, #5
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	4413      	add	r3, r2
 8009e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	4613      	mov	r3, r2
 8009e96:	011b      	lsls	r3, r3, #4
 8009e98:	1a9b      	subs	r3, r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	440b      	add	r3, r1
 8009e9e:	333c      	adds	r3, #60	@ 0x3c
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	f083 0301 	eor.w	r3, r3, #1
 8009ea6:	b2d8      	uxtb	r0, r3
 8009ea8:	6879      	ldr	r1, [r7, #4]
 8009eaa:	69ba      	ldr	r2, [r7, #24]
 8009eac:	4613      	mov	r3, r2
 8009eae:	011b      	lsls	r3, r3, #4
 8009eb0:	1a9b      	subs	r3, r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	333c      	adds	r3, #60	@ 0x3c
 8009eb8:	4602      	mov	r2, r0
 8009eba:	701a      	strb	r2, [r3, #0]
      break;
 8009ebc:	e00c      	b.n	8009ed8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	69ba      	ldr	r2, [r7, #24]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	011b      	lsls	r3, r3, #4
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	440b      	add	r3, r1
 8009ecc:	334c      	adds	r3, #76	@ 0x4c
 8009ece:	2204      	movs	r2, #4
 8009ed0:	701a      	strb	r2, [r3, #0]
      break;
 8009ed2:	e001      	b.n	8009ed8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8009ed4:	bf00      	nop
 8009ed6:	e000      	b.n	8009eda <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8009ed8:	bf00      	nop
  }
}
 8009eda:	bf00      	nop
 8009edc:	3728      	adds	r7, #40	@ 0x28
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b086      	sub	sp, #24
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009f0e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d10b      	bne.n	8009f32 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d102      	bne.n	8009f2a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f00d faf3 	bl	8017510 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	f043 0302 	orr.w	r3, r3, #2
 8009f30:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f003 0308 	and.w	r3, r3, #8
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	d132      	bne.n	8009fa2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	f043 0308 	orr.w	r3, r3, #8
 8009f42:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d126      	bne.n	8009f9c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	7a5b      	ldrb	r3, [r3, #9]
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d113      	bne.n	8009f7e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8009f5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f60:	d106      	bne.n	8009f70 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2102      	movs	r1, #2
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f007 fbf3 	bl	8011754 <USB_InitFSLSPClkSel>
 8009f6e:	e011      	b.n	8009f94 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2101      	movs	r1, #1
 8009f76:	4618      	mov	r0, r3
 8009f78:	f007 fbec 	bl	8011754 <USB_InitFSLSPClkSel>
 8009f7c:	e00a      	b.n	8009f94 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	79db      	ldrb	r3, [r3, #7]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d106      	bne.n	8009f94 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8009f92:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f00d fae9 	bl	801756c <HAL_HCD_PortEnabled_Callback>
 8009f9a:	e002      	b.n	8009fa2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f00d faf3 	bl	8017588 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f003 0320 	and.w	r3, r3, #32
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	d103      	bne.n	8009fb4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	f043 0320 	orr.w	r3, r3, #32
 8009fb2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009fba:	461a      	mov	r2, r3
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	6013      	str	r3, [r2, #0]
}
 8009fc0:	bf00      	nop
 8009fc2:	3718      	adds	r7, #24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e08b      	b.n	800a0f2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d106      	bne.n	8009ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7fa fae0 	bl	80045b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2224      	movs	r2, #36	@ 0x24
 8009ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f022 0201 	bic.w	r2, r2, #1
 800a00a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a018:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	689a      	ldr	r2, [r3, #8]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a028:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d107      	bne.n	800a042 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	689a      	ldr	r2, [r3, #8]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a03e:	609a      	str	r2, [r3, #8]
 800a040:	e006      	b.n	800a050 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	689a      	ldr	r2, [r3, #8]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a04e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	2b02      	cmp	r3, #2
 800a056:	d108      	bne.n	800a06a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a066:	605a      	str	r2, [r3, #4]
 800a068:	e007      	b.n	800a07a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	685a      	ldr	r2, [r3, #4]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a078:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	6859      	ldr	r1, [r3, #4]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	4b1d      	ldr	r3, [pc, #116]	@ (800a0fc <HAL_I2C_Init+0x134>)
 800a086:	430b      	orrs	r3, r1
 800a088:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68da      	ldr	r2, [r3, #12]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a098:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	691a      	ldr	r2, [r3, #16]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	69d9      	ldr	r1, [r3, #28]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a1a      	ldr	r2, [r3, #32]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f042 0201 	orr.w	r2, r2, #1
 800a0d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2220      	movs	r2, #32
 800a0de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	02008000 	.word	0x02008000

0800a100 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b20      	cmp	r3, #32
 800a114:	d138      	bne.n	800a188 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d101      	bne.n	800a124 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a120:	2302      	movs	r3, #2
 800a122:	e032      	b.n	800a18a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2224      	movs	r2, #36	@ 0x24
 800a130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f022 0201 	bic.w	r2, r2, #1
 800a142:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a152:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6819      	ldr	r1, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	430a      	orrs	r2, r1
 800a162:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f042 0201 	orr.w	r2, r2, #1
 800a172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2220      	movs	r2, #32
 800a178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	e000      	b.n	800a18a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a188:	2302      	movs	r3, #2
  }
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a196:	b480      	push	{r7}
 800a198:	b085      	sub	sp, #20
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b20      	cmp	r3, #32
 800a1aa:	d139      	bne.n	800a220 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d101      	bne.n	800a1ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e033      	b.n	800a222 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2224      	movs	r2, #36	@ 0x24
 800a1c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f022 0201 	bic.w	r2, r2, #1
 800a1d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a1e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	021b      	lsls	r3, r3, #8
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f042 0201 	orr.w	r2, r2, #1
 800a20a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2220      	movs	r2, #32
 800a210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	e000      	b.n	800a222 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a220:	2302      	movs	r3, #2
  }
}
 800a222:	4618      	mov	r0, r3
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b084      	sub	sp, #16
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d101      	bne.n	800a240 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e08f      	b.n	800a360 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d106      	bne.n	800a25a <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7fa fa55 	bl	8004704 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2202      	movs	r2, #2
 800a25e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	699a      	ldr	r2, [r3, #24]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a270:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6999      	ldr	r1, [r3, #24]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a286:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	041b      	lsls	r3, r3, #16
 800a29c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6999      	ldr	r1, [r3, #24]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	69db      	ldr	r3, [r3, #28]
 800a2b0:	041b      	lsls	r3, r3, #16
 800a2b2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a19      	ldr	r1, [r3, #32]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c6:	041b      	lsls	r3, r3, #16
 800a2c8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2dc:	041b      	lsls	r3, r3, #16
 800a2de:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a2f4:	021b      	lsls	r3, r3, #8
 800a2f6:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a2fe:	041b      	lsls	r3, r3, #16
 800a300:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a310:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a324:	431a      	orrs	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f042 0206 	orr.w	r2, r2, #6
 800a33c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	699a      	ldr	r2, [r3, #24]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f042 0201 	orr.w	r2, r2, #1
 800a34c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a376:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a37e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f003 0304 	and.w	r3, r3, #4
 800a386:	2b00      	cmp	r3, #0
 800a388:	d023      	beq.n	800a3d2 <HAL_LTDC_IRQHandler+0x6a>
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	f003 0304 	and.w	r3, r3, #4
 800a390:	2b00      	cmp	r3, #0
 800a392:	d01e      	beq.n	800a3d2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f022 0204 	bic.w	r2, r2, #4
 800a3a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2204      	movs	r2, #4
 800a3aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3b2:	f043 0201 	orr.w	r2, r3, #1
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2204      	movs	r2, #4
 800a3c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f86f 	bl	800a4b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f003 0302 	and.w	r3, r3, #2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d023      	beq.n	800a424 <HAL_LTDC_IRQHandler+0xbc>
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f003 0302 	and.w	r3, r3, #2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d01e      	beq.n	800a424 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f022 0202 	bic.w	r2, r2, #2
 800a3f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a404:	f043 0202 	orr.w	r2, r3, #2
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2204      	movs	r2, #4
 800a412:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f846 	bl	800a4b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d01b      	beq.n	800a466 <HAL_LTDC_IRQHandler+0xfe>
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d016      	beq.n	800a466 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 0201 	bic.w	r2, r2, #1
 800a446:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2201      	movs	r2, #1
 800a44e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f82f 	bl	800a4c4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f003 0308 	and.w	r3, r3, #8
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d01b      	beq.n	800a4a8 <HAL_LTDC_IRQHandler+0x140>
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f003 0308 	and.w	r3, r3, #8
 800a476:	2b00      	cmp	r3, #0
 800a478:	d016      	beq.n	800a4a8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 0208 	bic.w	r2, r2, #8
 800a488:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2208      	movs	r2, #8
 800a490:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f818 	bl	800a4d8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a4a8:	bf00      	nop
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a4ec:	b5b0      	push	{r4, r5, r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d101      	bne.n	800a506 <HAL_LTDC_ConfigLayer+0x1a>
 800a502:	2302      	movs	r3, #2
 800a504:	e02c      	b.n	800a560 <HAL_LTDC_ConfigLayer+0x74>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2202      	movs	r2, #2
 800a512:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2134      	movs	r1, #52	@ 0x34
 800a51c:	fb01 f303 	mul.w	r3, r1, r3
 800a520:	4413      	add	r3, r2
 800a522:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	4614      	mov	r4, r2
 800a52a:	461d      	mov	r5, r3
 800a52c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a52e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a538:	682b      	ldr	r3, [r5, #0]
 800a53a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	68b9      	ldr	r1, [r7, #8]
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 f811 	bl	800a568 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2201      	movs	r2, #1
 800a54c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bdb0      	pop	{r4, r5, r7, pc}

0800a568 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a568:	b480      	push	{r7}
 800a56a:	b089      	sub	sp, #36	@ 0x24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	685a      	ldr	r2, [r3, #4]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	0c1b      	lsrs	r3, r3, #16
 800a580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a584:	4413      	add	r3, r2
 800a586:	041b      	lsls	r3, r3, #16
 800a588:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	01db      	lsls	r3, r3, #7
 800a594:	4413      	add	r3, r2
 800a596:	3384      	adds	r3, #132	@ 0x84
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	6812      	ldr	r2, [r2, #0]
 800a59e:	4611      	mov	r1, r2
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	01d2      	lsls	r2, r2, #7
 800a5a4:	440a      	add	r2, r1
 800a5a6:	3284      	adds	r2, #132	@ 0x84
 800a5a8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a5ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	0c1b      	lsrs	r3, r3, #16
 800a5ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a5be:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a5c0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	01db      	lsls	r3, r3, #7
 800a5cc:	440b      	add	r3, r1
 800a5ce:	3384      	adds	r3, #132	@ 0x84
 800a5d0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a5d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	68da      	ldr	r2, [r3, #12]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a5e6:	4413      	add	r3, r2
 800a5e8:	041b      	lsls	r3, r3, #16
 800a5ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	01db      	lsls	r3, r3, #7
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3384      	adds	r3, #132	@ 0x84
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	6812      	ldr	r2, [r2, #0]
 800a600:	4611      	mov	r1, r2
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	01d2      	lsls	r2, r2, #7
 800a606:	440a      	add	r2, r1
 800a608:	3284      	adds	r2, #132	@ 0x84
 800a60a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a60e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a61e:	4413      	add	r3, r2
 800a620:	1c5a      	adds	r2, r3, #1
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4619      	mov	r1, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	01db      	lsls	r3, r3, #7
 800a62c:	440b      	add	r3, r1
 800a62e:	3384      	adds	r3, #132	@ 0x84
 800a630:	4619      	mov	r1, r3
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	4313      	orrs	r3, r2
 800a636:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	461a      	mov	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	01db      	lsls	r3, r3, #7
 800a642:	4413      	add	r3, r2
 800a644:	3384      	adds	r3, #132	@ 0x84
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	6812      	ldr	r2, [r2, #0]
 800a64c:	4611      	mov	r1, r2
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	01d2      	lsls	r2, r2, #7
 800a652:	440a      	add	r2, r1
 800a654:	3284      	adds	r2, #132	@ 0x84
 800a656:	f023 0307 	bic.w	r3, r3, #7
 800a65a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	461a      	mov	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	01db      	lsls	r3, r3, #7
 800a666:	4413      	add	r3, r2
 800a668:	3384      	adds	r3, #132	@ 0x84
 800a66a:	461a      	mov	r2, r3
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a678:	021b      	lsls	r3, r3, #8
 800a67a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a682:	041b      	lsls	r3, r3, #16
 800a684:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	061b      	lsls	r3, r3, #24
 800a68c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a694:	461a      	mov	r2, r3
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	431a      	orrs	r2, r3
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	431a      	orrs	r2, r3
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	01db      	lsls	r3, r3, #7
 800a6a8:	440b      	add	r3, r1
 800a6aa:	3384      	adds	r3, #132	@ 0x84
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	01db      	lsls	r3, r3, #7
 800a6be:	4413      	add	r3, r2
 800a6c0:	3384      	adds	r3, #132	@ 0x84
 800a6c2:	695b      	ldr	r3, [r3, #20]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	6812      	ldr	r2, [r2, #0]
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	01d2      	lsls	r2, r2, #7
 800a6ce:	440a      	add	r2, r1
 800a6d0:	3284      	adds	r2, #132	@ 0x84
 800a6d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a6d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	01db      	lsls	r3, r3, #7
 800a6e2:	4413      	add	r3, r2
 800a6e4:	3384      	adds	r3, #132	@ 0x84
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	695b      	ldr	r3, [r3, #20]
 800a6ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	01db      	lsls	r3, r3, #7
 800a6f8:	4413      	add	r3, r2
 800a6fa:	3384      	adds	r3, #132	@ 0x84
 800a6fc:	69da      	ldr	r2, [r3, #28]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4619      	mov	r1, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	01db      	lsls	r3, r3, #7
 800a708:	440b      	add	r3, r1
 800a70a:	3384      	adds	r3, #132	@ 0x84
 800a70c:	4619      	mov	r1, r3
 800a70e:	4b4f      	ldr	r3, [pc, #316]	@ (800a84c <LTDC_SetConfig+0x2e4>)
 800a710:	4013      	ands	r3, r2
 800a712:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	69da      	ldr	r2, [r3, #28]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	6a1b      	ldr	r3, [r3, #32]
 800a71c:	68f9      	ldr	r1, [r7, #12]
 800a71e:	6809      	ldr	r1, [r1, #0]
 800a720:	4608      	mov	r0, r1
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	01c9      	lsls	r1, r1, #7
 800a726:	4401      	add	r1, r0
 800a728:	3184      	adds	r1, #132	@ 0x84
 800a72a:	4313      	orrs	r3, r2
 800a72c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	01db      	lsls	r3, r3, #7
 800a738:	4413      	add	r3, r2
 800a73a:	3384      	adds	r3, #132	@ 0x84
 800a73c:	461a      	mov	r2, r3
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a742:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d102      	bne.n	800a752 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800a74c:	2304      	movs	r3, #4
 800a74e:	61fb      	str	r3, [r7, #28]
 800a750:	e01b      	b.n	800a78a <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d102      	bne.n	800a760 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800a75a:	2303      	movs	r3, #3
 800a75c:	61fb      	str	r3, [r7, #28]
 800a75e:	e014      	b.n	800a78a <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	2b04      	cmp	r3, #4
 800a766:	d00b      	beq.n	800a780 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d007      	beq.n	800a780 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a774:	2b03      	cmp	r3, #3
 800a776:	d003      	beq.n	800a780 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a77c:	2b07      	cmp	r3, #7
 800a77e:	d102      	bne.n	800a786 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800a780:	2302      	movs	r3, #2
 800a782:	61fb      	str	r3, [r7, #28]
 800a784:	e001      	b.n	800a78a <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800a786:	2301      	movs	r3, #1
 800a788:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	01db      	lsls	r3, r3, #7
 800a794:	4413      	add	r3, r2
 800a796:	3384      	adds	r3, #132	@ 0x84
 800a798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	6812      	ldr	r2, [r2, #0]
 800a79e:	4611      	mov	r1, r2
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	01d2      	lsls	r2, r2, #7
 800a7a4:	440a      	add	r2, r1
 800a7a6:	3284      	adds	r2, #132	@ 0x84
 800a7a8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a7ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7b2:	69fa      	ldr	r2, [r7, #28]
 800a7b4:	fb02 f303 	mul.w	r3, r2, r3
 800a7b8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	6859      	ldr	r1, [r3, #4]
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	1acb      	subs	r3, r1, r3
 800a7c4:	69f9      	ldr	r1, [r7, #28]
 800a7c6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ca:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a7cc:	68f9      	ldr	r1, [r7, #12]
 800a7ce:	6809      	ldr	r1, [r1, #0]
 800a7d0:	4608      	mov	r0, r1
 800a7d2:	6879      	ldr	r1, [r7, #4]
 800a7d4:	01c9      	lsls	r1, r1, #7
 800a7d6:	4401      	add	r1, r0
 800a7d8:	3184      	adds	r1, #132	@ 0x84
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	01db      	lsls	r3, r3, #7
 800a7e8:	4413      	add	r3, r2
 800a7ea:	3384      	adds	r3, #132	@ 0x84
 800a7ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	01db      	lsls	r3, r3, #7
 800a7f8:	440b      	add	r3, r1
 800a7fa:	3384      	adds	r3, #132	@ 0x84
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4b14      	ldr	r3, [pc, #80]	@ (800a850 <LTDC_SetConfig+0x2e8>)
 800a800:	4013      	ands	r3, r2
 800a802:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	461a      	mov	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	01db      	lsls	r3, r3, #7
 800a80e:	4413      	add	r3, r2
 800a810:	3384      	adds	r3, #132	@ 0x84
 800a812:	461a      	mov	r2, r3
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a818:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	01db      	lsls	r3, r3, #7
 800a824:	4413      	add	r3, r2
 800a826:	3384      	adds	r3, #132	@ 0x84
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	6812      	ldr	r2, [r2, #0]
 800a82e:	4611      	mov	r1, r2
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	01d2      	lsls	r2, r2, #7
 800a834:	440a      	add	r2, r1
 800a836:	3284      	adds	r2, #132	@ 0x84
 800a838:	f043 0301 	orr.w	r3, r3, #1
 800a83c:	6013      	str	r3, [r2, #0]
}
 800a83e:	bf00      	nop
 800a840:	3724      	adds	r7, #36	@ 0x24
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	fffff8f8 	.word	0xfffff8f8
 800a850:	fffff800 	.word	0xfffff800

0800a854 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a854:	b480      	push	{r7}
 800a856:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a858:	4b05      	ldr	r3, [pc, #20]	@ (800a870 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a04      	ldr	r2, [pc, #16]	@ (800a870 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a85e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a862:	6013      	str	r3, [r2, #0]
}
 800a864:	bf00      	nop
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	40007000 	.word	0x40007000

0800a874 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a87e:	4b23      	ldr	r3, [pc, #140]	@ (800a90c <HAL_PWREx_EnableOverDrive+0x98>)
 800a880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a882:	4a22      	ldr	r2, [pc, #136]	@ (800a90c <HAL_PWREx_EnableOverDrive+0x98>)
 800a884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a888:	6413      	str	r3, [r2, #64]	@ 0x40
 800a88a:	4b20      	ldr	r3, [pc, #128]	@ (800a90c <HAL_PWREx_EnableOverDrive+0x98>)
 800a88c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a88e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a896:	4b1e      	ldr	r3, [pc, #120]	@ (800a910 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a1d      	ldr	r2, [pc, #116]	@ (800a910 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a89c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a8a2:	f7fb fd49 	bl	8006338 <HAL_GetTick>
 800a8a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a8a8:	e009      	b.n	800a8be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a8aa:	f7fb fd45 	bl	8006338 <HAL_GetTick>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a8b8:	d901      	bls.n	800a8be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e022      	b.n	800a904 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a8be:	4b14      	ldr	r3, [pc, #80]	@ (800a910 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8ca:	d1ee      	bne.n	800a8aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a8cc:	4b10      	ldr	r3, [pc, #64]	@ (800a910 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a0f      	ldr	r2, [pc, #60]	@ (800a910 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a8d8:	f7fb fd2e 	bl	8006338 <HAL_GetTick>
 800a8dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a8de:	e009      	b.n	800a8f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a8e0:	f7fb fd2a 	bl	8006338 <HAL_GetTick>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a8ee:	d901      	bls.n	800a8f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e007      	b.n	800a904 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a8f4:	4b06      	ldr	r3, [pc, #24]	@ (800a910 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a900:	d1ee      	bne.n	800a8e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	40023800 	.word	0x40023800
 800a910:	40007000 	.word	0x40007000

0800a914 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af02      	add	r7, sp, #8
 800a91a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a91c:	f7fb fd0c 	bl	8006338 <HAL_GetTick>
 800a920:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d101      	bne.n	800a92c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	e067      	b.n	800a9fc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10b      	bne.n	800a950 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f7f9 ffa7 	bl	8004894 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a946:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f85e 	bl	800aa0c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	3b01      	subs	r3, #1
 800a960:	021a      	lsls	r2, r3, #8
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	430a      	orrs	r2, r1
 800a968:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	2120      	movs	r1, #32
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f856 	bl	800aa28 <QSPI_WaitFlagStateUntilTimeout>
 800a97c:	4603      	mov	r3, r0
 800a97e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a980:	7afb      	ldrb	r3, [r7, #11]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d135      	bne.n	800a9f2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	4b1d      	ldr	r3, [pc, #116]	@ (800aa04 <HAL_QSPI_Init+0xf0>)
 800a98e:	4013      	ands	r3, r2
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	6852      	ldr	r2, [r2, #4]
 800a994:	0611      	lsls	r1, r2, #24
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	68d2      	ldr	r2, [r2, #12]
 800a99a:	4311      	orrs	r1, r2
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	69d2      	ldr	r2, [r2, #28]
 800a9a0:	4311      	orrs	r1, r2
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	6a12      	ldr	r2, [r2, #32]
 800a9a6:	4311      	orrs	r1, r2
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	6812      	ldr	r2, [r2, #0]
 800a9ac:	430b      	orrs	r3, r1
 800a9ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	4b14      	ldr	r3, [pc, #80]	@ (800aa08 <HAL_QSPI_Init+0xf4>)
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	6912      	ldr	r2, [r2, #16]
 800a9be:	0411      	lsls	r1, r2, #16
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	6952      	ldr	r2, [r2, #20]
 800a9c4:	4311      	orrs	r1, r2
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	6992      	ldr	r2, [r2, #24]
 800a9ca:	4311      	orrs	r1, r2
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	6812      	ldr	r2, [r2, #0]
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f042 0201 	orr.w	r2, r2, #1
 800a9e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800a9fa:	7afb      	ldrb	r3, [r7, #11]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	00ffff2f 	.word	0x00ffff2f
 800aa08:	ffe0f8fe 	.word	0xffe0f8fe

0800aa0c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	4613      	mov	r3, r2
 800aa36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800aa38:	e01a      	b.n	800aa70 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa40:	d016      	beq.n	800aa70 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa42:	f7fb fc79 	bl	8006338 <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	69ba      	ldr	r2, [r7, #24]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d302      	bcc.n	800aa58 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10b      	bne.n	800aa70 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2204      	movs	r2, #4
 800aa5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa64:	f043 0201 	orr.w	r2, r3, #1
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e00e      	b.n	800aa8e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	4013      	ands	r3, r2
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	bf14      	ite	ne
 800aa7e:	2301      	movne	r3, #1
 800aa80:	2300      	moveq	r3, #0
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	461a      	mov	r2, r3
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d1d6      	bne.n	800aa3a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e291      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f000 8087 	beq.w	800abca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aabc:	4b96      	ldr	r3, [pc, #600]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	f003 030c 	and.w	r3, r3, #12
 800aac4:	2b04      	cmp	r3, #4
 800aac6:	d00c      	beq.n	800aae2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aac8:	4b93      	ldr	r3, [pc, #588]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	f003 030c 	and.w	r3, r3, #12
 800aad0:	2b08      	cmp	r3, #8
 800aad2:	d112      	bne.n	800aafa <HAL_RCC_OscConfig+0x62>
 800aad4:	4b90      	ldr	r3, [pc, #576]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aadc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aae0:	d10b      	bne.n	800aafa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aae2:	4b8d      	ldr	r3, [pc, #564]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d06c      	beq.n	800abc8 <HAL_RCC_OscConfig+0x130>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d168      	bne.n	800abc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e26b      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab02:	d106      	bne.n	800ab12 <HAL_RCC_OscConfig+0x7a>
 800ab04:	4b84      	ldr	r3, [pc, #528]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a83      	ldr	r2, [pc, #524]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	e02e      	b.n	800ab70 <HAL_RCC_OscConfig+0xd8>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10c      	bne.n	800ab34 <HAL_RCC_OscConfig+0x9c>
 800ab1a:	4b7f      	ldr	r3, [pc, #508]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a7e      	ldr	r2, [pc, #504]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	4b7c      	ldr	r3, [pc, #496]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a7b      	ldr	r2, [pc, #492]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab30:	6013      	str	r3, [r2, #0]
 800ab32:	e01d      	b.n	800ab70 <HAL_RCC_OscConfig+0xd8>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab3c:	d10c      	bne.n	800ab58 <HAL_RCC_OscConfig+0xc0>
 800ab3e:	4b76      	ldr	r3, [pc, #472]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a75      	ldr	r2, [pc, #468]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ab48:	6013      	str	r3, [r2, #0]
 800ab4a:	4b73      	ldr	r3, [pc, #460]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a72      	ldr	r2, [pc, #456]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	e00b      	b.n	800ab70 <HAL_RCC_OscConfig+0xd8>
 800ab58:	4b6f      	ldr	r3, [pc, #444]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a6e      	ldr	r2, [pc, #440]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab62:	6013      	str	r3, [r2, #0]
 800ab64:	4b6c      	ldr	r3, [pc, #432]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a6b      	ldr	r2, [pc, #428]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d013      	beq.n	800aba0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab78:	f7fb fbde 	bl	8006338 <HAL_GetTick>
 800ab7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab7e:	e008      	b.n	800ab92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab80:	f7fb fbda 	bl	8006338 <HAL_GetTick>
 800ab84:	4602      	mov	r2, r0
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	2b64      	cmp	r3, #100	@ 0x64
 800ab8c:	d901      	bls.n	800ab92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e21f      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab92:	4b61      	ldr	r3, [pc, #388]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d0f0      	beq.n	800ab80 <HAL_RCC_OscConfig+0xe8>
 800ab9e:	e014      	b.n	800abca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba0:	f7fb fbca 	bl	8006338 <HAL_GetTick>
 800aba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aba6:	e008      	b.n	800abba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aba8:	f7fb fbc6 	bl	8006338 <HAL_GetTick>
 800abac:	4602      	mov	r2, r0
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	2b64      	cmp	r3, #100	@ 0x64
 800abb4:	d901      	bls.n	800abba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800abb6:	2303      	movs	r3, #3
 800abb8:	e20b      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abba:	4b57      	ldr	r3, [pc, #348]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1f0      	bne.n	800aba8 <HAL_RCC_OscConfig+0x110>
 800abc6:	e000      	b.n	800abca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d069      	beq.n	800acaa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800abd6:	4b50      	ldr	r3, [pc, #320]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	f003 030c 	and.w	r3, r3, #12
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00b      	beq.n	800abfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800abe2:	4b4d      	ldr	r3, [pc, #308]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f003 030c 	and.w	r3, r3, #12
 800abea:	2b08      	cmp	r3, #8
 800abec:	d11c      	bne.n	800ac28 <HAL_RCC_OscConfig+0x190>
 800abee:	4b4a      	ldr	r3, [pc, #296]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d116      	bne.n	800ac28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800abfa:	4b47      	ldr	r3, [pc, #284]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 0302 	and.w	r3, r3, #2
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d005      	beq.n	800ac12 <HAL_RCC_OscConfig+0x17a>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d001      	beq.n	800ac12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e1df      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac12:	4b41      	ldr	r3, [pc, #260]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	493d      	ldr	r1, [pc, #244]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ac22:	4313      	orrs	r3, r2
 800ac24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac26:	e040      	b.n	800acaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d023      	beq.n	800ac78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac30:	4b39      	ldr	r3, [pc, #228]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a38      	ldr	r2, [pc, #224]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ac36:	f043 0301 	orr.w	r3, r3, #1
 800ac3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac3c:	f7fb fb7c 	bl	8006338 <HAL_GetTick>
 800ac40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac42:	e008      	b.n	800ac56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac44:	f7fb fb78 	bl	8006338 <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d901      	bls.n	800ac56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e1bd      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac56:	4b30      	ldr	r3, [pc, #192]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d0f0      	beq.n	800ac44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac62:	4b2d      	ldr	r3, [pc, #180]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	00db      	lsls	r3, r3, #3
 800ac70:	4929      	ldr	r1, [pc, #164]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ac72:	4313      	orrs	r3, r2
 800ac74:	600b      	str	r3, [r1, #0]
 800ac76:	e018      	b.n	800acaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac78:	4b27      	ldr	r3, [pc, #156]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a26      	ldr	r2, [pc, #152]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ac7e:	f023 0301 	bic.w	r3, r3, #1
 800ac82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac84:	f7fb fb58 	bl	8006338 <HAL_GetTick>
 800ac88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac8a:	e008      	b.n	800ac9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac8c:	f7fb fb54 	bl	8006338 <HAL_GetTick>
 800ac90:	4602      	mov	r2, r0
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	d901      	bls.n	800ac9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	e199      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac9e:	4b1e      	ldr	r3, [pc, #120]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 0302 	and.w	r3, r3, #2
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1f0      	bne.n	800ac8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 0308 	and.w	r3, r3, #8
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d038      	beq.n	800ad28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d019      	beq.n	800acf2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800acbe:	4b16      	ldr	r3, [pc, #88]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800acc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acc2:	4a15      	ldr	r2, [pc, #84]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800acc4:	f043 0301 	orr.w	r3, r3, #1
 800acc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acca:	f7fb fb35 	bl	8006338 <HAL_GetTick>
 800acce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acd0:	e008      	b.n	800ace4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800acd2:	f7fb fb31 	bl	8006338 <HAL_GetTick>
 800acd6:	4602      	mov	r2, r0
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	1ad3      	subs	r3, r2, r3
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d901      	bls.n	800ace4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ace0:	2303      	movs	r3, #3
 800ace2:	e176      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ace4:	4b0c      	ldr	r3, [pc, #48]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800ace6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ace8:	f003 0302 	and.w	r3, r3, #2
 800acec:	2b00      	cmp	r3, #0
 800acee:	d0f0      	beq.n	800acd2 <HAL_RCC_OscConfig+0x23a>
 800acf0:	e01a      	b.n	800ad28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800acf2:	4b09      	ldr	r3, [pc, #36]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800acf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acf6:	4a08      	ldr	r2, [pc, #32]	@ (800ad18 <HAL_RCC_OscConfig+0x280>)
 800acf8:	f023 0301 	bic.w	r3, r3, #1
 800acfc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acfe:	f7fb fb1b 	bl	8006338 <HAL_GetTick>
 800ad02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad04:	e00a      	b.n	800ad1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad06:	f7fb fb17 	bl	8006338 <HAL_GetTick>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d903      	bls.n	800ad1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ad14:	2303      	movs	r3, #3
 800ad16:	e15c      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
 800ad18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad1c:	4b91      	ldr	r3, [pc, #580]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ad1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad20:	f003 0302 	and.w	r3, r3, #2
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1ee      	bne.n	800ad06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0304 	and.w	r3, r3, #4
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 80a4 	beq.w	800ae7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad36:	4b8b      	ldr	r3, [pc, #556]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ad38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10d      	bne.n	800ad5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad42:	4b88      	ldr	r3, [pc, #544]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ad44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad46:	4a87      	ldr	r2, [pc, #540]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ad48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad4c:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad4e:	4b85      	ldr	r3, [pc, #532]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ad50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad56:	60bb      	str	r3, [r7, #8]
 800ad58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ad5e:	4b82      	ldr	r3, [pc, #520]	@ (800af68 <HAL_RCC_OscConfig+0x4d0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d118      	bne.n	800ad9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800ad6a:	4b7f      	ldr	r3, [pc, #508]	@ (800af68 <HAL_RCC_OscConfig+0x4d0>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a7e      	ldr	r2, [pc, #504]	@ (800af68 <HAL_RCC_OscConfig+0x4d0>)
 800ad70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ad76:	f7fb fadf 	bl	8006338 <HAL_GetTick>
 800ad7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ad7c:	e008      	b.n	800ad90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad7e:	f7fb fadb 	bl	8006338 <HAL_GetTick>
 800ad82:	4602      	mov	r2, r0
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	2b64      	cmp	r3, #100	@ 0x64
 800ad8a:	d901      	bls.n	800ad90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	e120      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ad90:	4b75      	ldr	r3, [pc, #468]	@ (800af68 <HAL_RCC_OscConfig+0x4d0>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d0f0      	beq.n	800ad7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d106      	bne.n	800adb2 <HAL_RCC_OscConfig+0x31a>
 800ada4:	4b6f      	ldr	r3, [pc, #444]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ada6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ada8:	4a6e      	ldr	r2, [pc, #440]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800adaa:	f043 0301 	orr.w	r3, r3, #1
 800adae:	6713      	str	r3, [r2, #112]	@ 0x70
 800adb0:	e02d      	b.n	800ae0e <HAL_RCC_OscConfig+0x376>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d10c      	bne.n	800add4 <HAL_RCC_OscConfig+0x33c>
 800adba:	4b6a      	ldr	r3, [pc, #424]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800adbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adbe:	4a69      	ldr	r2, [pc, #420]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800adc0:	f023 0301 	bic.w	r3, r3, #1
 800adc4:	6713      	str	r3, [r2, #112]	@ 0x70
 800adc6:	4b67      	ldr	r3, [pc, #412]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800adc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adca:	4a66      	ldr	r2, [pc, #408]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800adcc:	f023 0304 	bic.w	r3, r3, #4
 800add0:	6713      	str	r3, [r2, #112]	@ 0x70
 800add2:	e01c      	b.n	800ae0e <HAL_RCC_OscConfig+0x376>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	2b05      	cmp	r3, #5
 800adda:	d10c      	bne.n	800adf6 <HAL_RCC_OscConfig+0x35e>
 800addc:	4b61      	ldr	r3, [pc, #388]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800adde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ade0:	4a60      	ldr	r2, [pc, #384]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ade2:	f043 0304 	orr.w	r3, r3, #4
 800ade6:	6713      	str	r3, [r2, #112]	@ 0x70
 800ade8:	4b5e      	ldr	r3, [pc, #376]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800adea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adec:	4a5d      	ldr	r2, [pc, #372]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800adee:	f043 0301 	orr.w	r3, r3, #1
 800adf2:	6713      	str	r3, [r2, #112]	@ 0x70
 800adf4:	e00b      	b.n	800ae0e <HAL_RCC_OscConfig+0x376>
 800adf6:	4b5b      	ldr	r3, [pc, #364]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800adf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adfa:	4a5a      	ldr	r2, [pc, #360]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800adfc:	f023 0301 	bic.w	r3, r3, #1
 800ae00:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae02:	4b58      	ldr	r3, [pc, #352]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ae04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae06:	4a57      	ldr	r2, [pc, #348]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ae08:	f023 0304 	bic.w	r3, r3, #4
 800ae0c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d015      	beq.n	800ae42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae16:	f7fb fa8f 	bl	8006338 <HAL_GetTick>
 800ae1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae1c:	e00a      	b.n	800ae34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae1e:	f7fb fa8b 	bl	8006338 <HAL_GetTick>
 800ae22:	4602      	mov	r2, r0
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d901      	bls.n	800ae34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800ae30:	2303      	movs	r3, #3
 800ae32:	e0ce      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae34:	4b4b      	ldr	r3, [pc, #300]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ae36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae38:	f003 0302 	and.w	r3, r3, #2
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d0ee      	beq.n	800ae1e <HAL_RCC_OscConfig+0x386>
 800ae40:	e014      	b.n	800ae6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae42:	f7fb fa79 	bl	8006338 <HAL_GetTick>
 800ae46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae48:	e00a      	b.n	800ae60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae4a:	f7fb fa75 	bl	8006338 <HAL_GetTick>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d901      	bls.n	800ae60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e0b8      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae60:	4b40      	ldr	r3, [pc, #256]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ae62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae64:	f003 0302 	and.w	r3, r3, #2
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1ee      	bne.n	800ae4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d105      	bne.n	800ae7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae72:	4b3c      	ldr	r3, [pc, #240]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ae74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae76:	4a3b      	ldr	r2, [pc, #236]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ae78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae7c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 80a4 	beq.w	800afd0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae88:	4b36      	ldr	r3, [pc, #216]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f003 030c 	and.w	r3, r3, #12
 800ae90:	2b08      	cmp	r3, #8
 800ae92:	d06b      	beq.n	800af6c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d149      	bne.n	800af30 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae9c:	4b31      	ldr	r3, [pc, #196]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a30      	ldr	r2, [pc, #192]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800aea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aea8:	f7fb fa46 	bl	8006338 <HAL_GetTick>
 800aeac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aeae:	e008      	b.n	800aec2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeb0:	f7fb fa42 	bl	8006338 <HAL_GetTick>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d901      	bls.n	800aec2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e087      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aec2:	4b28      	ldr	r3, [pc, #160]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1f0      	bne.n	800aeb0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	69da      	ldr	r2, [r3, #28]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	431a      	orrs	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aedc:	019b      	lsls	r3, r3, #6
 800aede:	431a      	orrs	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee4:	085b      	lsrs	r3, r3, #1
 800aee6:	3b01      	subs	r3, #1
 800aee8:	041b      	lsls	r3, r3, #16
 800aeea:	431a      	orrs	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef0:	061b      	lsls	r3, r3, #24
 800aef2:	4313      	orrs	r3, r2
 800aef4:	4a1b      	ldr	r2, [pc, #108]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800aef6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aefa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aefc:	4b19      	ldr	r3, [pc, #100]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a18      	ldr	r2, [pc, #96]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800af02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800af06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af08:	f7fb fa16 	bl	8006338 <HAL_GetTick>
 800af0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af0e:	e008      	b.n	800af22 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af10:	f7fb fa12 	bl	8006338 <HAL_GetTick>
 800af14:	4602      	mov	r2, r0
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d901      	bls.n	800af22 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e057      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af22:	4b10      	ldr	r3, [pc, #64]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d0f0      	beq.n	800af10 <HAL_RCC_OscConfig+0x478>
 800af2e:	e04f      	b.n	800afd0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af30:	4b0c      	ldr	r3, [pc, #48]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a0b      	ldr	r2, [pc, #44]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800af36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af3c:	f7fb f9fc 	bl	8006338 <HAL_GetTick>
 800af40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af42:	e008      	b.n	800af56 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af44:	f7fb f9f8 	bl	8006338 <HAL_GetTick>
 800af48:	4602      	mov	r2, r0
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d901      	bls.n	800af56 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800af52:	2303      	movs	r3, #3
 800af54:	e03d      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af56:	4b03      	ldr	r3, [pc, #12]	@ (800af64 <HAL_RCC_OscConfig+0x4cc>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1f0      	bne.n	800af44 <HAL_RCC_OscConfig+0x4ac>
 800af62:	e035      	b.n	800afd0 <HAL_RCC_OscConfig+0x538>
 800af64:	40023800 	.word	0x40023800
 800af68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800af6c:	4b1b      	ldr	r3, [pc, #108]	@ (800afdc <HAL_RCC_OscConfig+0x544>)
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d028      	beq.n	800afcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af84:	429a      	cmp	r2, r3
 800af86:	d121      	bne.n	800afcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af92:	429a      	cmp	r2, r3
 800af94:	d11a      	bne.n	800afcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800af9c:	4013      	ands	r3, r2
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800afa2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d111      	bne.n	800afcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb2:	085b      	lsrs	r3, r3, #1
 800afb4:	3b01      	subs	r3, #1
 800afb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800afb8:	429a      	cmp	r2, r3
 800afba:	d107      	bne.n	800afcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800afc8:	429a      	cmp	r2, r3
 800afca:	d001      	beq.n	800afd0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e000      	b.n	800afd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	40023800 	.word	0x40023800

0800afe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800afea:	2300      	movs	r3, #0
 800afec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d101      	bne.n	800aff8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e0d0      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aff8:	4b6a      	ldr	r3, [pc, #424]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1c4>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 030f 	and.w	r3, r3, #15
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	429a      	cmp	r2, r3
 800b004:	d910      	bls.n	800b028 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b006:	4b67      	ldr	r3, [pc, #412]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f023 020f 	bic.w	r2, r3, #15
 800b00e:	4965      	ldr	r1, [pc, #404]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	4313      	orrs	r3, r2
 800b014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b016:	4b63      	ldr	r3, [pc, #396]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 030f 	and.w	r3, r3, #15
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d001      	beq.n	800b028 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e0b8      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0302 	and.w	r3, r3, #2
 800b030:	2b00      	cmp	r3, #0
 800b032:	d020      	beq.n	800b076 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0304 	and.w	r3, r3, #4
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d005      	beq.n	800b04c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b040:	4b59      	ldr	r3, [pc, #356]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	4a58      	ldr	r2, [pc, #352]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b046:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b04a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 0308 	and.w	r3, r3, #8
 800b054:	2b00      	cmp	r3, #0
 800b056:	d005      	beq.n	800b064 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b058:	4b53      	ldr	r3, [pc, #332]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	4a52      	ldr	r2, [pc, #328]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b05e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b062:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b064:	4b50      	ldr	r3, [pc, #320]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	494d      	ldr	r1, [pc, #308]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b072:	4313      	orrs	r3, r2
 800b074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d040      	beq.n	800b104 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d107      	bne.n	800b09a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b08a:	4b47      	ldr	r3, [pc, #284]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d115      	bne.n	800b0c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	e07f      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d107      	bne.n	800b0b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0a2:	4b41      	ldr	r3, [pc, #260]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d109      	bne.n	800b0c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e073      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0b2:	4b3d      	ldr	r3, [pc, #244]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 0302 	and.w	r3, r3, #2
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d101      	bne.n	800b0c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e06b      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b0c2:	4b39      	ldr	r3, [pc, #228]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	f023 0203 	bic.w	r2, r3, #3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	4936      	ldr	r1, [pc, #216]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0d4:	f7fb f930 	bl	8006338 <HAL_GetTick>
 800b0d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0da:	e00a      	b.n	800b0f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0dc:	f7fb f92c 	bl	8006338 <HAL_GetTick>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d901      	bls.n	800b0f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e053      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0f2:	4b2d      	ldr	r3, [pc, #180]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f003 020c 	and.w	r2, r3, #12
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	429a      	cmp	r2, r3
 800b102:	d1eb      	bne.n	800b0dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b104:	4b27      	ldr	r3, [pc, #156]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 030f 	and.w	r3, r3, #15
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d210      	bcs.n	800b134 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b112:	4b24      	ldr	r3, [pc, #144]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f023 020f 	bic.w	r2, r3, #15
 800b11a:	4922      	ldr	r1, [pc, #136]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	4313      	orrs	r3, r2
 800b120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b122:	4b20      	ldr	r3, [pc, #128]	@ (800b1a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 030f 	and.w	r3, r3, #15
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d001      	beq.n	800b134 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	e032      	b.n	800b19a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0304 	and.w	r3, r3, #4
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d008      	beq.n	800b152 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b140:	4b19      	ldr	r3, [pc, #100]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	4916      	ldr	r1, [pc, #88]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 0308 	and.w	r3, r3, #8
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d009      	beq.n	800b172 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b15e:	4b12      	ldr	r3, [pc, #72]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	00db      	lsls	r3, r3, #3
 800b16c:	490e      	ldr	r1, [pc, #56]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b16e:	4313      	orrs	r3, r2
 800b170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b172:	f000 f821 	bl	800b1b8 <HAL_RCC_GetSysClockFreq>
 800b176:	4602      	mov	r2, r0
 800b178:	4b0b      	ldr	r3, [pc, #44]	@ (800b1a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	091b      	lsrs	r3, r3, #4
 800b17e:	f003 030f 	and.w	r3, r3, #15
 800b182:	490a      	ldr	r1, [pc, #40]	@ (800b1ac <HAL_RCC_ClockConfig+0x1cc>)
 800b184:	5ccb      	ldrb	r3, [r1, r3]
 800b186:	fa22 f303 	lsr.w	r3, r2, r3
 800b18a:	4a09      	ldr	r2, [pc, #36]	@ (800b1b0 <HAL_RCC_ClockConfig+0x1d0>)
 800b18c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b18e:	4b09      	ldr	r3, [pc, #36]	@ (800b1b4 <HAL_RCC_ClockConfig+0x1d4>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4618      	mov	r0, r3
 800b194:	f7fa f88c 	bl	80052b0 <HAL_InitTick>

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	40023c00 	.word	0x40023c00
 800b1a8:	40023800 	.word	0x40023800
 800b1ac:	0801c128 	.word	0x0801c128
 800b1b0:	2000001c 	.word	0x2000001c
 800b1b4:	2000006c 	.word	0x2000006c

0800b1b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1bc:	b090      	sub	sp, #64	@ 0x40
 800b1be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1d0:	4b59      	ldr	r3, [pc, #356]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x180>)
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	f003 030c 	and.w	r3, r3, #12
 800b1d8:	2b08      	cmp	r3, #8
 800b1da:	d00d      	beq.n	800b1f8 <HAL_RCC_GetSysClockFreq+0x40>
 800b1dc:	2b08      	cmp	r3, #8
 800b1de:	f200 80a1 	bhi.w	800b324 <HAL_RCC_GetSysClockFreq+0x16c>
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d002      	beq.n	800b1ec <HAL_RCC_GetSysClockFreq+0x34>
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	d003      	beq.n	800b1f2 <HAL_RCC_GetSysClockFreq+0x3a>
 800b1ea:	e09b      	b.n	800b324 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b1ec:	4b53      	ldr	r3, [pc, #332]	@ (800b33c <HAL_RCC_GetSysClockFreq+0x184>)
 800b1ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b1f0:	e09b      	b.n	800b32a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b1f2:	4b53      	ldr	r3, [pc, #332]	@ (800b340 <HAL_RCC_GetSysClockFreq+0x188>)
 800b1f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b1f6:	e098      	b.n	800b32a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b1f8:	4b4f      	ldr	r3, [pc, #316]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x180>)
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b200:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b202:	4b4d      	ldr	r3, [pc, #308]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x180>)
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d028      	beq.n	800b260 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b20e:	4b4a      	ldr	r3, [pc, #296]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x180>)
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	099b      	lsrs	r3, r3, #6
 800b214:	2200      	movs	r2, #0
 800b216:	623b      	str	r3, [r7, #32]
 800b218:	627a      	str	r2, [r7, #36]	@ 0x24
 800b21a:	6a3b      	ldr	r3, [r7, #32]
 800b21c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b220:	2100      	movs	r1, #0
 800b222:	4b47      	ldr	r3, [pc, #284]	@ (800b340 <HAL_RCC_GetSysClockFreq+0x188>)
 800b224:	fb03 f201 	mul.w	r2, r3, r1
 800b228:	2300      	movs	r3, #0
 800b22a:	fb00 f303 	mul.w	r3, r0, r3
 800b22e:	4413      	add	r3, r2
 800b230:	4a43      	ldr	r2, [pc, #268]	@ (800b340 <HAL_RCC_GetSysClockFreq+0x188>)
 800b232:	fba0 1202 	umull	r1, r2, r0, r2
 800b236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b238:	460a      	mov	r2, r1
 800b23a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b23c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b23e:	4413      	add	r3, r2
 800b240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b244:	2200      	movs	r2, #0
 800b246:	61bb      	str	r3, [r7, #24]
 800b248:	61fa      	str	r2, [r7, #28]
 800b24a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b24e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b252:	f7f5 f845 	bl	80002e0 <__aeabi_uldivmod>
 800b256:	4602      	mov	r2, r0
 800b258:	460b      	mov	r3, r1
 800b25a:	4613      	mov	r3, r2
 800b25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b25e:	e053      	b.n	800b308 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b260:	4b35      	ldr	r3, [pc, #212]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x180>)
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	099b      	lsrs	r3, r3, #6
 800b266:	2200      	movs	r2, #0
 800b268:	613b      	str	r3, [r7, #16]
 800b26a:	617a      	str	r2, [r7, #20]
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b272:	f04f 0b00 	mov.w	fp, #0
 800b276:	4652      	mov	r2, sl
 800b278:	465b      	mov	r3, fp
 800b27a:	f04f 0000 	mov.w	r0, #0
 800b27e:	f04f 0100 	mov.w	r1, #0
 800b282:	0159      	lsls	r1, r3, #5
 800b284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b288:	0150      	lsls	r0, r2, #5
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	ebb2 080a 	subs.w	r8, r2, sl
 800b292:	eb63 090b 	sbc.w	r9, r3, fp
 800b296:	f04f 0200 	mov.w	r2, #0
 800b29a:	f04f 0300 	mov.w	r3, #0
 800b29e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b2a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b2a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b2aa:	ebb2 0408 	subs.w	r4, r2, r8
 800b2ae:	eb63 0509 	sbc.w	r5, r3, r9
 800b2b2:	f04f 0200 	mov.w	r2, #0
 800b2b6:	f04f 0300 	mov.w	r3, #0
 800b2ba:	00eb      	lsls	r3, r5, #3
 800b2bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b2c0:	00e2      	lsls	r2, r4, #3
 800b2c2:	4614      	mov	r4, r2
 800b2c4:	461d      	mov	r5, r3
 800b2c6:	eb14 030a 	adds.w	r3, r4, sl
 800b2ca:	603b      	str	r3, [r7, #0]
 800b2cc:	eb45 030b 	adc.w	r3, r5, fp
 800b2d0:	607b      	str	r3, [r7, #4]
 800b2d2:	f04f 0200 	mov.w	r2, #0
 800b2d6:	f04f 0300 	mov.w	r3, #0
 800b2da:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b2de:	4629      	mov	r1, r5
 800b2e0:	028b      	lsls	r3, r1, #10
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	028a      	lsls	r2, r1, #10
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	60bb      	str	r3, [r7, #8]
 800b2f6:	60fa      	str	r2, [r7, #12]
 800b2f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2fc:	f7f4 fff0 	bl	80002e0 <__aeabi_uldivmod>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4613      	mov	r3, r2
 800b306:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b308:	4b0b      	ldr	r3, [pc, #44]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x180>)
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	0c1b      	lsrs	r3, r3, #16
 800b30e:	f003 0303 	and.w	r3, r3, #3
 800b312:	3301      	adds	r3, #1
 800b314:	005b      	lsls	r3, r3, #1
 800b316:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800b318:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b320:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b322:	e002      	b.n	800b32a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b324:	4b05      	ldr	r3, [pc, #20]	@ (800b33c <HAL_RCC_GetSysClockFreq+0x184>)
 800b326:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3740      	adds	r7, #64	@ 0x40
 800b330:	46bd      	mov	sp, r7
 800b332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b336:	bf00      	nop
 800b338:	40023800 	.word	0x40023800
 800b33c:	00f42400 	.word	0x00f42400
 800b340:	017d7840 	.word	0x017d7840

0800b344 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b344:	b480      	push	{r7}
 800b346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b348:	4b03      	ldr	r3, [pc, #12]	@ (800b358 <HAL_RCC_GetHCLKFreq+0x14>)
 800b34a:	681b      	ldr	r3, [r3, #0]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	2000001c 	.word	0x2000001c

0800b35c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b360:	f7ff fff0 	bl	800b344 <HAL_RCC_GetHCLKFreq>
 800b364:	4602      	mov	r2, r0
 800b366:	4b05      	ldr	r3, [pc, #20]	@ (800b37c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	0a9b      	lsrs	r3, r3, #10
 800b36c:	f003 0307 	and.w	r3, r3, #7
 800b370:	4903      	ldr	r1, [pc, #12]	@ (800b380 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b372:	5ccb      	ldrb	r3, [r1, r3]
 800b374:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b378:	4618      	mov	r0, r3
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	40023800 	.word	0x40023800
 800b380:	0801c138 	.word	0x0801c138

0800b384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b388:	f7ff ffdc 	bl	800b344 <HAL_RCC_GetHCLKFreq>
 800b38c:	4602      	mov	r2, r0
 800b38e:	4b05      	ldr	r3, [pc, #20]	@ (800b3a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	0b5b      	lsrs	r3, r3, #13
 800b394:	f003 0307 	and.w	r3, r3, #7
 800b398:	4903      	ldr	r1, [pc, #12]	@ (800b3a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b39a:	5ccb      	ldrb	r3, [r1, r3]
 800b39c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	40023800 	.word	0x40023800
 800b3a8:	0801c138 	.word	0x0801c138

0800b3ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	220f      	movs	r2, #15
 800b3ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b3bc:	4b12      	ldr	r3, [pc, #72]	@ (800b408 <HAL_RCC_GetClockConfig+0x5c>)
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	f003 0203 	and.w	r2, r3, #3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b3c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b408 <HAL_RCC_GetClockConfig+0x5c>)
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b408 <HAL_RCC_GetClockConfig+0x5c>)
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b3e0:	4b09      	ldr	r3, [pc, #36]	@ (800b408 <HAL_RCC_GetClockConfig+0x5c>)
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	08db      	lsrs	r3, r3, #3
 800b3e6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b3ee:	4b07      	ldr	r3, [pc, #28]	@ (800b40c <HAL_RCC_GetClockConfig+0x60>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 020f 	and.w	r2, r3, #15
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	601a      	str	r2, [r3, #0]
}
 800b3fa:	bf00      	nop
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	40023800 	.word	0x40023800
 800b40c:	40023c00 	.word	0x40023c00

0800b410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b088      	sub	sp, #32
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b418:	2300      	movs	r3, #0
 800b41a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b420:	2300      	movs	r3, #0
 800b422:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b424:	2300      	movs	r3, #0
 800b426:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 0301 	and.w	r3, r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	d012      	beq.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b438:	4b69      	ldr	r3, [pc, #420]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	4a68      	ldr	r2, [pc, #416]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b43e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b442:	6093      	str	r3, [r2, #8]
 800b444:	4b66      	ldr	r3, [pc, #408]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b446:	689a      	ldr	r2, [r3, #8]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b44c:	4964      	ldr	r1, [pc, #400]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b44e:	4313      	orrs	r3, r2
 800b450:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b456:	2b00      	cmp	r3, #0
 800b458:	d101      	bne.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b45a:	2301      	movs	r3, #1
 800b45c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d017      	beq.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b46a:	4b5d      	ldr	r3, [pc, #372]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b46c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b470:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b478:	4959      	ldr	r1, [pc, #356]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b47a:	4313      	orrs	r3, r2
 800b47c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b484:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b488:	d101      	bne.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b48a:	2301      	movs	r3, #1
 800b48c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b496:	2301      	movs	r3, #1
 800b498:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d017      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b4a6:	4b4e      	ldr	r3, [pc, #312]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b4:	494a      	ldr	r1, [pc, #296]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b4c4:	d101      	bne.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d001      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0320 	and.w	r3, r3, #32
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f000 808b 	beq.w	800b60a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b4f4:	4b3a      	ldr	r3, [pc, #232]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4f8:	4a39      	ldr	r2, [pc, #228]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4fe:	6413      	str	r3, [r2, #64]	@ 0x40
 800b500:	4b37      	ldr	r3, [pc, #220]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b508:	60bb      	str	r3, [r7, #8]
 800b50a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b50c:	4b35      	ldr	r3, [pc, #212]	@ (800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a34      	ldr	r2, [pc, #208]	@ (800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b518:	f7fa ff0e 	bl	8006338 <HAL_GetTick>
 800b51c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b51e:	e008      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b520:	f7fa ff0a 	bl	8006338 <HAL_GetTick>
 800b524:	4602      	mov	r2, r0
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	1ad3      	subs	r3, r2, r3
 800b52a:	2b64      	cmp	r3, #100	@ 0x64
 800b52c:	d901      	bls.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b52e:	2303      	movs	r3, #3
 800b530:	e357      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b532:	4b2c      	ldr	r3, [pc, #176]	@ (800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0f0      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b53e:	4b28      	ldr	r3, [pc, #160]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b546:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d035      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b556:	693a      	ldr	r2, [r7, #16]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d02e      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b55c:	4b20      	ldr	r3, [pc, #128]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b55e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b564:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b566:	4b1e      	ldr	r3, [pc, #120]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b56a:	4a1d      	ldr	r2, [pc, #116]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b56c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b570:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b572:	4b1b      	ldr	r3, [pc, #108]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b576:	4a1a      	ldr	r2, [pc, #104]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b57c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b57e:	4a18      	ldr	r2, [pc, #96]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b584:	4b16      	ldr	r3, [pc, #88]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b588:	f003 0301 	and.w	r3, r3, #1
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d114      	bne.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b590:	f7fa fed2 	bl	8006338 <HAL_GetTick>
 800b594:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b596:	e00a      	b.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b598:	f7fa fece 	bl	8006338 <HAL_GetTick>
 800b59c:	4602      	mov	r2, r0
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d901      	bls.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e319      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b5ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5b2:	f003 0302 	and.w	r3, r3, #2
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d0ee      	beq.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5c6:	d111      	bne.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b5c8:	4b05      	ldr	r3, [pc, #20]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b5d4:	4b04      	ldr	r3, [pc, #16]	@ (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b5d6:	400b      	ands	r3, r1
 800b5d8:	4901      	ldr	r1, [pc, #4]	@ (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	608b      	str	r3, [r1, #8]
 800b5de:	e00b      	b.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b5e0:	40023800 	.word	0x40023800
 800b5e4:	40007000 	.word	0x40007000
 800b5e8:	0ffffcff 	.word	0x0ffffcff
 800b5ec:	4baa      	ldr	r3, [pc, #680]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	4aa9      	ldr	r2, [pc, #676]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b5f2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b5f6:	6093      	str	r3, [r2, #8]
 800b5f8:	4ba7      	ldr	r3, [pc, #668]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b5fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b604:	49a4      	ldr	r1, [pc, #656]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b606:	4313      	orrs	r3, r2
 800b608:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 0310 	and.w	r3, r3, #16
 800b612:	2b00      	cmp	r3, #0
 800b614:	d010      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b616:	4ba0      	ldr	r3, [pc, #640]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b61c:	4a9e      	ldr	r2, [pc, #632]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b61e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b622:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b626:	4b9c      	ldr	r3, [pc, #624]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b628:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b630:	4999      	ldr	r1, [pc, #612]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b632:	4313      	orrs	r3, r2
 800b634:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00a      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b644:	4b94      	ldr	r3, [pc, #592]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b64a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b652:	4991      	ldr	r1, [pc, #580]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b654:	4313      	orrs	r3, r2
 800b656:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00a      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b666:	4b8c      	ldr	r3, [pc, #560]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b66c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b674:	4988      	ldr	r1, [pc, #544]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b676:	4313      	orrs	r3, r2
 800b678:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00a      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b688:	4b83      	ldr	r3, [pc, #524]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b68e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b696:	4980      	ldr	r1, [pc, #512]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b698:	4313      	orrs	r3, r2
 800b69a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b6aa:	4b7b      	ldr	r3, [pc, #492]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6b8:	4977      	ldr	r1, [pc, #476]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00a      	beq.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b6cc:	4b72      	ldr	r3, [pc, #456]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b6ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6d2:	f023 0203 	bic.w	r2, r3, #3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6da:	496f      	ldr	r1, [pc, #444]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00a      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b6ee:	4b6a      	ldr	r3, [pc, #424]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6f4:	f023 020c 	bic.w	r2, r3, #12
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6fc:	4966      	ldr	r1, [pc, #408]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b6fe:	4313      	orrs	r3, r2
 800b700:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00a      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b710:	4b61      	ldr	r3, [pc, #388]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b716:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b71e:	495e      	ldr	r1, [pc, #376]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b720:	4313      	orrs	r3, r2
 800b722:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00a      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b732:	4b59      	ldr	r3, [pc, #356]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b738:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b740:	4955      	ldr	r1, [pc, #340]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b742:	4313      	orrs	r3, r2
 800b744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00a      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b754:	4b50      	ldr	r3, [pc, #320]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b75a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b762:	494d      	ldr	r1, [pc, #308]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b764:	4313      	orrs	r3, r2
 800b766:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00a      	beq.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b776:	4b48      	ldr	r3, [pc, #288]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b77c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b784:	4944      	ldr	r1, [pc, #272]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b786:	4313      	orrs	r3, r2
 800b788:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00a      	beq.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b798:	4b3f      	ldr	r3, [pc, #252]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b79e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7a6:	493c      	ldr	r1, [pc, #240]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00a      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b7ba:	4b37      	ldr	r3, [pc, #220]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7c8:	4933      	ldr	r1, [pc, #204]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00a      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b7dc:	4b2e      	ldr	r3, [pc, #184]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7e2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7ea:	492b      	ldr	r1, [pc, #172]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d011      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b7fe:	4b26      	ldr	r3, [pc, #152]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b804:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b80c:	4922      	ldr	r1, [pc, #136]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b80e:	4313      	orrs	r3, r2
 800b810:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b818:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b81c:	d101      	bne.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b81e:	2301      	movs	r3, #1
 800b820:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 0308 	and.w	r3, r3, #8
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b82e:	2301      	movs	r3, #1
 800b830:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00a      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b83e:	4b16      	ldr	r3, [pc, #88]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b844:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b84c:	4912      	ldr	r1, [pc, #72]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b84e:	4313      	orrs	r3, r2
 800b850:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00b      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b860:	4b0d      	ldr	r3, [pc, #52]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b866:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b870:	4909      	ldr	r1, [pc, #36]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b872:	4313      	orrs	r3, r2
 800b874:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d006      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 80d9 	beq.w	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b88c:	4b02      	ldr	r3, [pc, #8]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a01      	ldr	r2, [pc, #4]	@ (800b898 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b892:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b896:	e001      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b898:	40023800 	.word	0x40023800
 800b89c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b89e:	f7fa fd4b 	bl	8006338 <HAL_GetTick>
 800b8a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b8a4:	e008      	b.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b8a6:	f7fa fd47 	bl	8006338 <HAL_GetTick>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	2b64      	cmp	r3, #100	@ 0x64
 800b8b2:	d901      	bls.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e194      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b8b8:	4b6c      	ldr	r3, [pc, #432]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d1f0      	bne.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f003 0301 	and.w	r3, r3, #1
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d021      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d11d      	bne.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b8d8:	4b64      	ldr	r3, [pc, #400]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8de:	0c1b      	lsrs	r3, r3, #16
 800b8e0:	f003 0303 	and.w	r3, r3, #3
 800b8e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b8e6:	4b61      	ldr	r3, [pc, #388]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8ec:	0e1b      	lsrs	r3, r3, #24
 800b8ee:	f003 030f 	and.w	r3, r3, #15
 800b8f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	019a      	lsls	r2, r3, #6
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	041b      	lsls	r3, r3, #16
 800b8fe:	431a      	orrs	r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	061b      	lsls	r3, r3, #24
 800b904:	431a      	orrs	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	071b      	lsls	r3, r3, #28
 800b90c:	4957      	ldr	r1, [pc, #348]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b90e:	4313      	orrs	r3, r2
 800b910:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d004      	beq.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b928:	d00a      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b932:	2b00      	cmp	r3, #0
 800b934:	d02e      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b93a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b93e:	d129      	bne.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b940:	4b4a      	ldr	r3, [pc, #296]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b946:	0c1b      	lsrs	r3, r3, #16
 800b948:	f003 0303 	and.w	r3, r3, #3
 800b94c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b94e:	4b47      	ldr	r3, [pc, #284]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b954:	0f1b      	lsrs	r3, r3, #28
 800b956:	f003 0307 	and.w	r3, r3, #7
 800b95a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	019a      	lsls	r2, r3, #6
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	041b      	lsls	r3, r3, #16
 800b966:	431a      	orrs	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	061b      	lsls	r3, r3, #24
 800b96e:	431a      	orrs	r2, r3
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	071b      	lsls	r3, r3, #28
 800b974:	493d      	ldr	r1, [pc, #244]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b976:	4313      	orrs	r3, r2
 800b978:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b97c:	4b3b      	ldr	r3, [pc, #236]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b97e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b982:	f023 021f 	bic.w	r2, r3, #31
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b98a:	3b01      	subs	r3, #1
 800b98c:	4937      	ldr	r1, [pc, #220]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d01d      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b9a0:	4b32      	ldr	r3, [pc, #200]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b9a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9a6:	0e1b      	lsrs	r3, r3, #24
 800b9a8:	f003 030f 	and.w	r3, r3, #15
 800b9ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b9ae:	4b2f      	ldr	r3, [pc, #188]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9b4:	0f1b      	lsrs	r3, r3, #28
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	019a      	lsls	r2, r3, #6
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	041b      	lsls	r3, r3, #16
 800b9c8:	431a      	orrs	r2, r3
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	061b      	lsls	r3, r3, #24
 800b9ce:	431a      	orrs	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	071b      	lsls	r3, r3, #28
 800b9d4:	4925      	ldr	r1, [pc, #148]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d011      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	019a      	lsls	r2, r3, #6
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	041b      	lsls	r3, r3, #16
 800b9f4:	431a      	orrs	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	061b      	lsls	r3, r3, #24
 800b9fc:	431a      	orrs	r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	071b      	lsls	r3, r3, #28
 800ba04:	4919      	ldr	r1, [pc, #100]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba06:	4313      	orrs	r3, r2
 800ba08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ba0c:	4b17      	ldr	r3, [pc, #92]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a16      	ldr	r2, [pc, #88]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ba16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba18:	f7fa fc8e 	bl	8006338 <HAL_GetTick>
 800ba1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ba1e:	e008      	b.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ba20:	f7fa fc8a 	bl	8006338 <HAL_GetTick>
 800ba24:	4602      	mov	r2, r0
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	2b64      	cmp	r3, #100	@ 0x64
 800ba2c:	d901      	bls.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	e0d7      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ba32:	4b0e      	ldr	r3, [pc, #56]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d0f0      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	f040 80cd 	bne.w	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ba46:	4b09      	ldr	r3, [pc, #36]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a08      	ldr	r2, [pc, #32]	@ (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba52:	f7fa fc71 	bl	8006338 <HAL_GetTick>
 800ba56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ba58:	e00a      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ba5a:	f7fa fc6d 	bl	8006338 <HAL_GetTick>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	2b64      	cmp	r3, #100	@ 0x64
 800ba66:	d903      	bls.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba68:	2303      	movs	r3, #3
 800ba6a:	e0ba      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ba6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ba70:	4b5e      	ldr	r3, [pc, #376]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba7c:	d0ed      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d003      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d009      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d02e      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d12a      	bne.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800baa6:	4b51      	ldr	r3, [pc, #324]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800baa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800baac:	0c1b      	lsrs	r3, r3, #16
 800baae:	f003 0303 	and.w	r3, r3, #3
 800bab2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bab4:	4b4d      	ldr	r3, [pc, #308]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800baba:	0f1b      	lsrs	r3, r3, #28
 800babc:	f003 0307 	and.w	r3, r3, #7
 800bac0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	695b      	ldr	r3, [r3, #20]
 800bac6:	019a      	lsls	r2, r3, #6
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	041b      	lsls	r3, r3, #16
 800bacc:	431a      	orrs	r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	699b      	ldr	r3, [r3, #24]
 800bad2:	061b      	lsls	r3, r3, #24
 800bad4:	431a      	orrs	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	071b      	lsls	r3, r3, #28
 800bada:	4944      	ldr	r1, [pc, #272]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800badc:	4313      	orrs	r3, r2
 800bade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bae2:	4b42      	ldr	r3, [pc, #264]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bae8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baf0:	3b01      	subs	r3, #1
 800baf2:	021b      	lsls	r3, r3, #8
 800baf4:	493d      	ldr	r1, [pc, #244]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800baf6:	4313      	orrs	r3, r2
 800baf8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d022      	beq.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb10:	d11d      	bne.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bb12:	4b36      	ldr	r3, [pc, #216]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb18:	0e1b      	lsrs	r3, r3, #24
 800bb1a:	f003 030f 	and.w	r3, r3, #15
 800bb1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bb20:	4b32      	ldr	r3, [pc, #200]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb26:	0f1b      	lsrs	r3, r3, #28
 800bb28:	f003 0307 	and.w	r3, r3, #7
 800bb2c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	019a      	lsls	r2, r3, #6
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a1b      	ldr	r3, [r3, #32]
 800bb38:	041b      	lsls	r3, r3, #16
 800bb3a:	431a      	orrs	r2, r3
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	061b      	lsls	r3, r3, #24
 800bb40:	431a      	orrs	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	071b      	lsls	r3, r3, #28
 800bb46:	4929      	ldr	r1, [pc, #164]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f003 0308 	and.w	r3, r3, #8
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d028      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bb5a:	4b24      	ldr	r3, [pc, #144]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb60:	0e1b      	lsrs	r3, r3, #24
 800bb62:	f003 030f 	and.w	r3, r3, #15
 800bb66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bb68:	4b20      	ldr	r3, [pc, #128]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb6e:	0c1b      	lsrs	r3, r3, #16
 800bb70:	f003 0303 	and.w	r3, r3, #3
 800bb74:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	695b      	ldr	r3, [r3, #20]
 800bb7a:	019a      	lsls	r2, r3, #6
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	041b      	lsls	r3, r3, #16
 800bb80:	431a      	orrs	r2, r3
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	061b      	lsls	r3, r3, #24
 800bb86:	431a      	orrs	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	69db      	ldr	r3, [r3, #28]
 800bb8c:	071b      	lsls	r3, r3, #28
 800bb8e:	4917      	ldr	r1, [pc, #92]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb90:	4313      	orrs	r3, r2
 800bb92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bb96:	4b15      	ldr	r3, [pc, #84]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba4:	4911      	ldr	r1, [pc, #68]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bba6:	4313      	orrs	r3, r2
 800bba8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bbac:	4b0f      	ldr	r3, [pc, #60]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a0e      	ldr	r2, [pc, #56]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbb8:	f7fa fbbe 	bl	8006338 <HAL_GetTick>
 800bbbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bbbe:	e008      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bbc0:	f7fa fbba 	bl	8006338 <HAL_GetTick>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	2b64      	cmp	r3, #100	@ 0x64
 800bbcc:	d901      	bls.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	e007      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bbd2:	4b06      	ldr	r3, [pc, #24]	@ (800bbec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbde:	d1ef      	bne.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3720      	adds	r7, #32
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	40023800 	.word	0x40023800

0800bbf0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800bc00:	2300      	movs	r3, #0
 800bc02:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bc0e:	f040 808d 	bne.w	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800bc12:	4b93      	ldr	r3, [pc, #588]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc18:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800bc20:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc28:	d07c      	beq.n	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc30:	d87b      	bhi.n	800bd2a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc3e:	d039      	beq.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800bc40:	e073      	b.n	800bd2a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bc42:	4b87      	ldr	r3, [pc, #540]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d108      	bne.n	800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bc4e:	4b84      	ldr	r3, [pc, #528]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc56:	4a83      	ldr	r2, [pc, #524]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bc58:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc5c:	613b      	str	r3, [r7, #16]
 800bc5e:	e007      	b.n	800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bc60:	4b7f      	ldr	r3, [pc, #508]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc68:	4a7f      	ldr	r2, [pc, #508]	@ (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bc6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc6e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800bc70:	4b7b      	ldr	r3, [pc, #492]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc76:	0e1b      	lsrs	r3, r3, #24
 800bc78:	f003 030f 	and.w	r3, r3, #15
 800bc7c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800bc7e:	4b78      	ldr	r3, [pc, #480]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc84:	099b      	lsrs	r3, r3, #6
 800bc86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8a:	693a      	ldr	r2, [r7, #16]
 800bc8c:	fb03 f202 	mul.w	r2, r3, r2
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc96:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800bc98:	4b71      	ldr	r3, [pc, #452]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc9e:	0a1b      	lsrs	r3, r3, #8
 800bca0:	f003 031f 	and.w	r3, r3, #31
 800bca4:	3301      	adds	r3, #1
 800bca6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcb0:	617b      	str	r3, [r7, #20]
        break;
 800bcb2:	e03b      	b.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bcb4:	4b6a      	ldr	r3, [pc, #424]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d108      	bne.n	800bcd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bcc0:	4b67      	ldr	r3, [pc, #412]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bcc8:	4a66      	ldr	r2, [pc, #408]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bcca:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcce:	613b      	str	r3, [r7, #16]
 800bcd0:	e007      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bcd2:	4b63      	ldr	r3, [pc, #396]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bcda:	4a63      	ldr	r2, [pc, #396]	@ (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bcdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800bce2:	4b5f      	ldr	r3, [pc, #380]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bce8:	0e1b      	lsrs	r3, r3, #24
 800bcea:	f003 030f 	and.w	r3, r3, #15
 800bcee:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800bcf0:	4b5b      	ldr	r3, [pc, #364]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bcf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcf6:	099b      	lsrs	r3, r3, #6
 800bcf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	fb03 f202 	mul.w	r2, r3, r2
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd08:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800bd0a:	4b55      	ldr	r3, [pc, #340]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd10:	f003 031f 	and.w	r3, r3, #31
 800bd14:	3301      	adds	r3, #1
 800bd16:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd20:	617b      	str	r3, [r7, #20]
        break;
 800bd22:	e003      	b.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd24:	4b51      	ldr	r3, [pc, #324]	@ (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bd26:	617b      	str	r3, [r7, #20]
        break;
 800bd28:	e000      	b.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800bd2a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd32:	f040 808d 	bne.w	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800bd36:	4b4a      	ldr	r3, [pc, #296]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd3c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800bd44:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bd4c:	d07c      	beq.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bd54:	d87b      	bhi.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d004      	beq.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd62:	d039      	beq.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800bd64:	e073      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bd66:	4b3e      	ldr	r3, [pc, #248]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d108      	bne.n	800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bd72:	4b3b      	ldr	r3, [pc, #236]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd7a:	4a3a      	ldr	r2, [pc, #232]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bd7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd80:	613b      	str	r3, [r7, #16]
 800bd82:	e007      	b.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bd84:	4b36      	ldr	r3, [pc, #216]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd8c:	4a36      	ldr	r2, [pc, #216]	@ (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bd8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd92:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800bd94:	4b32      	ldr	r3, [pc, #200]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd9a:	0e1b      	lsrs	r3, r3, #24
 800bd9c:	f003 030f 	and.w	r3, r3, #15
 800bda0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800bda2:	4b2f      	ldr	r3, [pc, #188]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bda4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bda8:	099b      	lsrs	r3, r3, #6
 800bdaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	fb03 f202 	mul.w	r2, r3, r2
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdba:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800bdbc:	4b28      	ldr	r3, [pc, #160]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bdc2:	0a1b      	lsrs	r3, r3, #8
 800bdc4:	f003 031f 	and.w	r3, r3, #31
 800bdc8:	3301      	adds	r3, #1
 800bdca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bdcc:	697a      	ldr	r2, [r7, #20]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd4:	617b      	str	r3, [r7, #20]
        break;
 800bdd6:	e03b      	b.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bdd8:	4b21      	ldr	r3, [pc, #132]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d108      	bne.n	800bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bde4:	4b1e      	ldr	r3, [pc, #120]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bdec:	4a1d      	ldr	r2, [pc, #116]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bdee:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf2:	613b      	str	r3, [r7, #16]
 800bdf4:	e007      	b.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bdf6:	4b1a      	ldr	r3, [pc, #104]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bdfe:	4a1a      	ldr	r2, [pc, #104]	@ (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be00:	fbb2 f3f3 	udiv	r3, r2, r3
 800be04:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800be06:	4b16      	ldr	r3, [pc, #88]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be0c:	0e1b      	lsrs	r3, r3, #24
 800be0e:	f003 030f 	and.w	r3, r3, #15
 800be12:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800be14:	4b12      	ldr	r3, [pc, #72]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be1a:	099b      	lsrs	r3, r3, #6
 800be1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be20:	693a      	ldr	r2, [r7, #16]
 800be22:	fb03 f202 	mul.w	r2, r3, r2
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	fbb2 f3f3 	udiv	r3, r2, r3
 800be2c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800be2e:	4b0c      	ldr	r3, [pc, #48]	@ (800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be34:	f003 031f 	and.w	r3, r3, #31
 800be38:	3301      	adds	r3, #1
 800be3a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	fbb2 f3f3 	udiv	r3, r2, r3
 800be44:	617b      	str	r3, [r7, #20]
        break;
 800be46:	e003      	b.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800be48:	4b08      	ldr	r3, [pc, #32]	@ (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800be4a:	617b      	str	r3, [r7, #20]
        break;
 800be4c:	e000      	b.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800be4e:	bf00      	nop
      }
    }
  }

  return frequency;
 800be50:	697b      	ldr	r3, [r7, #20]
}
 800be52:	4618      	mov	r0, r3
 800be54:	371c      	adds	r7, #28
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	40023800 	.word	0x40023800
 800be64:	00f42400 	.word	0x00f42400
 800be68:	017d7840 	.word	0x017d7840
 800be6c:	00bb8000 	.word	0x00bb8000

0800be70 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e071      	b.n	800bf66 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	7f5b      	ldrb	r3, [r3, #29]
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d105      	bne.n	800be98 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7f8 fd8e 	bl	80049b4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2202      	movs	r2, #2
 800be9c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	f003 0310 	and.w	r3, r3, #16
 800bea8:	2b10      	cmp	r3, #16
 800beaa:	d053      	beq.n	800bf54 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	22ca      	movs	r2, #202	@ 0xca
 800beb2:	625a      	str	r2, [r3, #36]	@ 0x24
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2253      	movs	r2, #83	@ 0x53
 800beba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fac7 	bl	800c450 <RTC_EnterInitMode>
 800bec2:	4603      	mov	r3, r0
 800bec4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800bec6:	7bfb      	ldrb	r3, [r7, #15]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d12a      	bne.n	800bf22 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6899      	ldr	r1, [r3, #8]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	4b26      	ldr	r3, [pc, #152]	@ (800bf70 <HAL_RTC_Init+0x100>)
 800bed8:	400b      	ands	r3, r1
 800beda:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6899      	ldr	r1, [r3, #8]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	431a      	orrs	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	695b      	ldr	r3, [r3, #20]
 800bef0:	431a      	orrs	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	430a      	orrs	r2, r1
 800bef8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	68d2      	ldr	r2, [r2, #12]
 800bf02:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6919      	ldr	r1, [r3, #16]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	041a      	lsls	r2, r3, #16
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	430a      	orrs	r2, r1
 800bf16:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fad0 	bl	800c4be <RTC_ExitInitMode>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800bf22:	7bfb      	ldrb	r3, [r7, #15]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d110      	bne.n	800bf4a <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f022 0208 	bic.w	r2, r2, #8
 800bf36:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	699a      	ldr	r2, [r3, #24]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	430a      	orrs	r2, r1
 800bf48:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	22ff      	movs	r2, #255	@ 0xff
 800bf50:	625a      	str	r2, [r3, #36]	@ 0x24
 800bf52:	e001      	b.n	800bf58 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800bf58:	7bfb      	ldrb	r3, [r7, #15]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d102      	bne.n	800bf64 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2201      	movs	r2, #1
 800bf62:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800bf64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	ff8fffbf 	.word	0xff8fffbf

0800bf74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bf74:	b590      	push	{r4, r7, lr}
 800bf76:	b087      	sub	sp, #28
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bf80:	2300      	movs	r3, #0
 800bf82:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	7f1b      	ldrb	r3, [r3, #28]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d101      	bne.n	800bf90 <HAL_RTC_SetTime+0x1c>
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	e085      	b.n	800c09c <HAL_RTC_SetTime+0x128>
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2201      	movs	r2, #1
 800bf94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2202      	movs	r2, #2
 800bf9a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d126      	bne.n	800bff0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d102      	bne.n	800bfb6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f000 faa4 	bl	800c508 <RTC_ByteToBcd2>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	785b      	ldrb	r3, [r3, #1]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f000 fa9d 	bl	800c508 <RTC_ByteToBcd2>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bfd2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	789b      	ldrb	r3, [r3, #2]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 fa95 	bl	800c508 <RTC_ByteToBcd2>
 800bfde:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bfe0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	78db      	ldrb	r3, [r3, #3]
 800bfe8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bfea:	4313      	orrs	r3, r2
 800bfec:	617b      	str	r3, [r7, #20]
 800bfee:	e018      	b.n	800c022 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d102      	bne.n	800c004 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	2200      	movs	r2, #0
 800c002:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	785b      	ldrb	r3, [r3, #1]
 800c00e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c010:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c016:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	78db      	ldrb	r3, [r3, #3]
 800c01c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c01e:	4313      	orrs	r3, r2
 800c020:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	22ca      	movs	r2, #202	@ 0xca
 800c028:	625a      	str	r2, [r3, #36]	@ 0x24
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2253      	movs	r2, #83	@ 0x53
 800c030:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f000 fa0c 	bl	800c450 <RTC_EnterInitMode>
 800c038:	4603      	mov	r3, r0
 800c03a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c03c:	7cfb      	ldrb	r3, [r7, #19]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d11e      	bne.n	800c080 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	6979      	ldr	r1, [r7, #20]
 800c048:	4b16      	ldr	r3, [pc, #88]	@ (800c0a4 <HAL_RTC_SetTime+0x130>)
 800c04a:	400b      	ands	r3, r1
 800c04c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	689a      	ldr	r2, [r3, #8]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c05c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	6899      	ldr	r1, [r3, #8]
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	68da      	ldr	r2, [r3, #12]
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	431a      	orrs	r2, r3
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	430a      	orrs	r2, r1
 800c074:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f000 fa21 	bl	800c4be <RTC_ExitInitMode>
 800c07c:	4603      	mov	r3, r0
 800c07e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c080:	7cfb      	ldrb	r3, [r7, #19]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d102      	bne.n	800c08c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2201      	movs	r2, #1
 800c08a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	22ff      	movs	r2, #255	@ 0xff
 800c092:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	771a      	strb	r2, [r3, #28]

  return status;
 800c09a:	7cfb      	ldrb	r3, [r7, #19]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	371c      	adds	r7, #28
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd90      	pop	{r4, r7, pc}
 800c0a4:	007f7f7f 	.word	0x007f7f7f

0800c0a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c0a8:	b590      	push	{r4, r7, lr}
 800c0aa:	b087      	sub	sp, #28
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	7f1b      	ldrb	r3, [r3, #28]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d101      	bne.n	800c0c4 <HAL_RTC_SetDate+0x1c>
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	e06f      	b.n	800c1a4 <HAL_RTC_SetDate+0xfc>
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10e      	bne.n	800c0f4 <HAL_RTC_SetDate+0x4c>
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	785b      	ldrb	r3, [r3, #1]
 800c0da:	f003 0310 	and.w	r3, r3, #16
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d008      	beq.n	800c0f4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	785b      	ldrb	r3, [r3, #1]
 800c0e6:	f023 0310 	bic.w	r3, r3, #16
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	330a      	adds	r3, #10
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d11c      	bne.n	800c134 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	78db      	ldrb	r3, [r3, #3]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 fa02 	bl	800c508 <RTC_ByteToBcd2>
 800c104:	4603      	mov	r3, r0
 800c106:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	785b      	ldrb	r3, [r3, #1]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f000 f9fb 	bl	800c508 <RTC_ByteToBcd2>
 800c112:	4603      	mov	r3, r0
 800c114:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c116:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	789b      	ldrb	r3, [r3, #2]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f000 f9f3 	bl	800c508 <RTC_ByteToBcd2>
 800c122:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c124:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c12e:	4313      	orrs	r3, r2
 800c130:	617b      	str	r3, [r7, #20]
 800c132:	e00e      	b.n	800c152 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	78db      	ldrb	r3, [r3, #3]
 800c138:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	785b      	ldrb	r3, [r3, #1]
 800c13e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c140:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c146:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c14e:	4313      	orrs	r3, r2
 800c150:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	22ca      	movs	r2, #202	@ 0xca
 800c158:	625a      	str	r2, [r3, #36]	@ 0x24
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2253      	movs	r2, #83	@ 0x53
 800c160:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f000 f974 	bl	800c450 <RTC_EnterInitMode>
 800c168:	4603      	mov	r3, r0
 800c16a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c16c:	7cfb      	ldrb	r3, [r7, #19]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10a      	bne.n	800c188 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	6979      	ldr	r1, [r7, #20]
 800c178:	4b0c      	ldr	r3, [pc, #48]	@ (800c1ac <HAL_RTC_SetDate+0x104>)
 800c17a:	400b      	ands	r3, r1
 800c17c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f000 f99d 	bl	800c4be <RTC_ExitInitMode>
 800c184:	4603      	mov	r3, r0
 800c186:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c188:	7cfb      	ldrb	r3, [r7, #19]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d102      	bne.n	800c194 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2201      	movs	r2, #1
 800c192:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	22ff      	movs	r2, #255	@ 0xff
 800c19a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	771a      	strb	r2, [r3, #28]

  return status;
 800c1a2:	7cfb      	ldrb	r3, [r7, #19]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	371c      	adds	r7, #28
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd90      	pop	{r4, r7, pc}
 800c1ac:	00ffff3f 	.word	0x00ffff3f

0800c1b0 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c1b0:	b590      	push	{r4, r7, lr}
 800c1b2:	b089      	sub	sp, #36	@ 0x24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	7f1b      	ldrb	r3, [r3, #28]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d101      	bne.n	800c1d4 <HAL_RTC_SetAlarm+0x24>
 800c1d0:	2302      	movs	r3, #2
 800c1d2:	e113      	b.n	800c3fc <HAL_RTC_SetAlarm+0x24c>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2202      	movs	r2, #2
 800c1de:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d137      	bne.n	800c256 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d102      	bne.n	800c1fa <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 f982 	bl	800c508 <RTC_ByteToBcd2>
 800c204:	4603      	mov	r3, r0
 800c206:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	785b      	ldrb	r3, [r3, #1]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 f97b 	bl	800c508 <RTC_ByteToBcd2>
 800c212:	4603      	mov	r3, r0
 800c214:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c216:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	789b      	ldrb	r3, [r3, #2]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 f973 	bl	800c508 <RTC_ByteToBcd2>
 800c222:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c224:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	78db      	ldrb	r3, [r3, #3]
 800c22c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c22e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c238:	4618      	mov	r0, r3
 800c23a:	f000 f965 	bl	800c508 <RTC_ByteToBcd2>
 800c23e:	4603      	mov	r3, r0
 800c240:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800c242:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c24a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c250:	4313      	orrs	r3, r2
 800c252:	61fb      	str	r3, [r7, #28]
 800c254:	e023      	b.n	800c29e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c260:	2b00      	cmp	r3, #0
 800c262:	d102      	bne.n	800c26a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	2200      	movs	r2, #0
 800c268:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	785b      	ldrb	r3, [r3, #1]
 800c274:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c276:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c27c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	78db      	ldrb	r3, [r3, #3]
 800c282:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c284:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c28c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800c28e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c294:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c29a:	4313      	orrs	r3, r2
 800c29c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	22ca      	movs	r2, #202	@ 0xca
 800c2b0:	625a      	str	r2, [r3, #36]	@ 0x24
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2253      	movs	r2, #83	@ 0x53
 800c2b8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2c2:	d148      	bne.n	800c356 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	689a      	ldr	r2, [r3, #8]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2d2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	689a      	ldr	r2, [r3, #8]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c2e2:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	b2da      	uxtb	r2, r3
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800c2f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c2f6:	f7fa f81f 	bl	8006338 <HAL_GetTick>
 800c2fa:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c2fc:	e013      	b.n	800c326 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c2fe:	f7fa f81b 	bl	8006338 <HAL_GetTick>
 800c302:	4602      	mov	r2, r0
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	1ad3      	subs	r3, r2, r3
 800c308:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c30c:	d90b      	bls.n	800c326 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	22ff      	movs	r2, #255	@ 0xff
 800c314:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2203      	movs	r2, #3
 800c31a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2200      	movs	r2, #0
 800c320:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c322:	2303      	movs	r3, #3
 800c324:	e06a      	b.n	800c3fc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	f003 0301 	and.w	r3, r3, #1
 800c330:	2b00      	cmp	r3, #0
 800c332:	d0e4      	beq.n	800c2fe <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	69fa      	ldr	r2, [r7, #28]
 800c33a:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	697a      	ldr	r2, [r7, #20]
 800c342:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	689a      	ldr	r2, [r3, #8]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c352:	609a      	str	r2, [r3, #8]
 800c354:	e047      	b.n	800c3e6 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	689a      	ldr	r2, [r3, #8]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800c364:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	689a      	ldr	r2, [r3, #8]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c374:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	b2da      	uxtb	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800c386:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c388:	f7f9 ffd6 	bl	8006338 <HAL_GetTick>
 800c38c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c38e:	e013      	b.n	800c3b8 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c390:	f7f9 ffd2 	bl	8006338 <HAL_GetTick>
 800c394:	4602      	mov	r2, r0
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c39e:	d90b      	bls.n	800c3b8 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	22ff      	movs	r2, #255	@ 0xff
 800c3a6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2203      	movs	r2, #3
 800c3ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c3b4:	2303      	movs	r3, #3
 800c3b6:	e021      	b.n	800c3fc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	f003 0302 	and.w	r3, r3, #2
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d0e4      	beq.n	800c390 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	69fa      	ldr	r2, [r7, #28]
 800c3cc:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	697a      	ldr	r2, [r7, #20]
 800c3d4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	689a      	ldr	r2, [r3, #8]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c3e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	22ff      	movs	r2, #255	@ 0xff
 800c3ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3724      	adds	r7, #36	@ 0x24
 800c400:	46bd      	mov	sp, r7
 800c402:	bd90      	pop	{r4, r7, pc}

0800c404 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c40c:	2300      	movs	r3, #0
 800c40e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a0d      	ldr	r2, [pc, #52]	@ (800c44c <HAL_RTC_WaitForSynchro+0x48>)
 800c416:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c418:	f7f9 ff8e 	bl	8006338 <HAL_GetTick>
 800c41c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c41e:	e009      	b.n	800c434 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c420:	f7f9 ff8a 	bl	8006338 <HAL_GetTick>
 800c424:	4602      	mov	r2, r0
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c42e:	d901      	bls.n	800c434 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c430:	2303      	movs	r3, #3
 800c432:	e007      	b.n	800c444 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	f003 0320 	and.w	r3, r3, #32
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0ee      	beq.n	800c420 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	0001ff5f 	.word	0x0001ff5f

0800c450 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c458:	2300      	movs	r3, #0
 800c45a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d122      	bne.n	800c4b4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68da      	ldr	r2, [r3, #12]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c47c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c47e:	f7f9 ff5b 	bl	8006338 <HAL_GetTick>
 800c482:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c484:	e00c      	b.n	800c4a0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c486:	f7f9 ff57 	bl	8006338 <HAL_GetTick>
 800c48a:	4602      	mov	r2, r0
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c494:	d904      	bls.n	800c4a0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2204      	movs	r2, #4
 800c49a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c49c:	2301      	movs	r3, #1
 800c49e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d102      	bne.n	800c4b4 <RTC_EnterInitMode+0x64>
 800c4ae:	7bfb      	ldrb	r3, [r7, #15]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d1e8      	bne.n	800c486 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b084      	sub	sp, #16
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	68da      	ldr	r2, [r3, #12]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c4d8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	f003 0320 	and.w	r3, r3, #32
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10a      	bne.n	800c4fe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f7ff ff8b 	bl	800c404 <HAL_RTC_WaitForSynchro>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d004      	beq.n	800c4fe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2204      	movs	r2, #4
 800c4f8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c512:	2300      	movs	r3, #0
 800c514:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800c516:	e005      	b.n	800c524 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	3301      	adds	r3, #1
 800c51c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800c51e:	79fb      	ldrb	r3, [r7, #7]
 800c520:	3b0a      	subs	r3, #10
 800c522:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c524:	79fb      	ldrb	r3, [r7, #7]
 800c526:	2b09      	cmp	r3, #9
 800c528:	d8f6      	bhi.n	800c518 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	011b      	lsls	r3, r3, #4
 800c530:	b2da      	uxtb	r2, r3
 800c532:	79fb      	ldrb	r3, [r7, #7]
 800c534:	4313      	orrs	r3, r2
 800c536:	b2db      	uxtb	r3, r3
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3714      	adds	r7, #20
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800c544:	b480      	push	{r7}
 800c546:	b087      	sub	sp, #28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c550:	2300      	movs	r3, #0
 800c552:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	7f1b      	ldrb	r3, [r3, #28]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d101      	bne.n	800c560 <HAL_RTCEx_SetTimeStamp+0x1c>
 800c55c:	2302      	movs	r3, #2
 800c55e:	e050      	b.n	800c602 <HAL_RTCEx_SetTimeStamp+0xbe>
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2201      	movs	r2, #1
 800c564:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2202      	movs	r2, #2
 800c56a:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f022 0206 	bic.w	r2, r2, #6
 800c57a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	430a      	orrs	r2, r1
 800c58a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	689a      	ldr	r2, [r3, #8]
 800c592:	4b1f      	ldr	r3, [pc, #124]	@ (800c610 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800c594:	4013      	ands	r3, r2
 800c596:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800c598:	697a      	ldr	r2, [r7, #20]
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	4313      	orrs	r3, r2
 800c59e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	22ca      	movs	r2, #202	@ 0xca
 800c5a6:	625a      	str	r2, [r3, #36]	@ 0x24
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2253      	movs	r2, #83	@ 0x53
 800c5ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	697a      	ldr	r2, [r7, #20]
 800c5b6:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800c5c8:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	b2da      	uxtb	r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800c5da:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	689a      	ldr	r2, [r3, #8]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5ea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	22ff      	movs	r2, #255	@ 0xff
 800c5f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	371c      	adds	r7, #28
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	fffff7f7 	.word	0xfffff7f7

0800c614 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b088      	sub	sp, #32
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c61c:	2300      	movs	r3, #0
 800c61e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c620:	2300      	movs	r3, #0
 800c622:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c624:	2300      	movs	r3, #0
 800c626:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e156      	b.n	800c8e0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d106      	bne.n	800c64c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7f8 fdc8 	bl	80051dc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2202      	movs	r2, #2
 800c650:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 f95b 	bl	800c910 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d00c      	beq.n	800c67c <HAL_SAI_Init+0x68>
 800c662:	2b02      	cmp	r3, #2
 800c664:	d80d      	bhi.n	800c682 <HAL_SAI_Init+0x6e>
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <HAL_SAI_Init+0x5c>
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d003      	beq.n	800c676 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c66e:	e008      	b.n	800c682 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c670:	2300      	movs	r3, #0
 800c672:	61fb      	str	r3, [r7, #28]
      break;
 800c674:	e006      	b.n	800c684 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c676:	2310      	movs	r3, #16
 800c678:	61fb      	str	r3, [r7, #28]
      break;
 800c67a:	e003      	b.n	800c684 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c67c:	2320      	movs	r3, #32
 800c67e:	61fb      	str	r3, [r7, #28]
      break;
 800c680:	e000      	b.n	800c684 <HAL_SAI_Init+0x70>
      break;
 800c682:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	2b03      	cmp	r3, #3
 800c68a:	d81e      	bhi.n	800c6ca <HAL_SAI_Init+0xb6>
 800c68c:	a201      	add	r2, pc, #4	@ (adr r2, 800c694 <HAL_SAI_Init+0x80>)
 800c68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c692:	bf00      	nop
 800c694:	0800c6a5 	.word	0x0800c6a5
 800c698:	0800c6ab 	.word	0x0800c6ab
 800c69c:	0800c6b3 	.word	0x0800c6b3
 800c6a0:	0800c6bb 	.word	0x0800c6bb
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	617b      	str	r3, [r7, #20]
    }
    break;
 800c6a8:	e010      	b.n	800c6cc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c6aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6ae:	617b      	str	r3, [r7, #20]
    }
    break;
 800c6b0:	e00c      	b.n	800c6cc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c6b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c6b6:	617b      	str	r3, [r7, #20]
    }
    break;
 800c6b8:	e008      	b.n	800c6cc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c6ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c6be:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	f043 0301 	orr.w	r3, r3, #1
 800c6c6:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c6c8:	e000      	b.n	800c6cc <HAL_SAI_Init+0xb8>
    default:
      break;
 800c6ca:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a85      	ldr	r2, [pc, #532]	@ (800c8e8 <HAL_SAI_Init+0x2d4>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d004      	beq.n	800c6e0 <HAL_SAI_Init+0xcc>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a84      	ldr	r2, [pc, #528]	@ (800c8ec <HAL_SAI_Init+0x2d8>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d103      	bne.n	800c6e8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c6e0:	4a83      	ldr	r2, [pc, #524]	@ (800c8f0 <HAL_SAI_Init+0x2dc>)
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	6013      	str	r3, [r2, #0]
 800c6e6:	e002      	b.n	800c6ee <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c6e8:	4a82      	ldr	r2, [pc, #520]	@ (800c8f4 <HAL_SAI_Init+0x2e0>)
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	69db      	ldr	r3, [r3, #28]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d04c      	beq.n	800c790 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a7a      	ldr	r2, [pc, #488]	@ (800c8e8 <HAL_SAI_Init+0x2d4>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d004      	beq.n	800c70e <HAL_SAI_Init+0xfa>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a78      	ldr	r2, [pc, #480]	@ (800c8ec <HAL_SAI_Init+0x2d8>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d104      	bne.n	800c718 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c70e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c712:	f7ff fa6d 	bl	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c716:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a76      	ldr	r2, [pc, #472]	@ (800c8f8 <HAL_SAI_Init+0x2e4>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d004      	beq.n	800c72c <HAL_SAI_Init+0x118>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a75      	ldr	r2, [pc, #468]	@ (800c8fc <HAL_SAI_Init+0x2e8>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d104      	bne.n	800c736 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c72c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c730:	f7ff fa5e 	bl	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c734:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c736:	693a      	ldr	r2, [r7, #16]
 800c738:	4613      	mov	r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4413      	add	r3, r2
 800c73e:	005b      	lsls	r3, r3, #1
 800c740:	461a      	mov	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	69db      	ldr	r3, [r3, #28]
 800c746:	025b      	lsls	r3, r3, #9
 800c748:	fbb2 f3f3 	udiv	r3, r2, r3
 800c74c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	4a6b      	ldr	r2, [pc, #428]	@ (800c900 <HAL_SAI_Init+0x2ec>)
 800c752:	fba2 2303 	umull	r2, r3, r2, r3
 800c756:	08da      	lsrs	r2, r3, #3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c75c:	68f9      	ldr	r1, [r7, #12]
 800c75e:	4b68      	ldr	r3, [pc, #416]	@ (800c900 <HAL_SAI_Init+0x2ec>)
 800c760:	fba3 2301 	umull	r2, r3, r3, r1
 800c764:	08da      	lsrs	r2, r3, #3
 800c766:	4613      	mov	r3, r2
 800c768:	009b      	lsls	r3, r3, #2
 800c76a:	4413      	add	r3, r2
 800c76c:	005b      	lsls	r3, r3, #1
 800c76e:	1aca      	subs	r2, r1, r3
 800c770:	2a08      	cmp	r2, #8
 800c772:	d904      	bls.n	800c77e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6a1b      	ldr	r3, [r3, #32]
 800c778:	1c5a      	adds	r2, r3, #1
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c782:	2b04      	cmp	r3, #4
 800c784:	d104      	bne.n	800c790 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a1b      	ldr	r3, [r3, #32]
 800c78a:	085a      	lsrs	r2, r3, #1
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d003      	beq.n	800c7a0 <HAL_SAI_Init+0x18c>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d109      	bne.n	800c7b4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d101      	bne.n	800c7ac <HAL_SAI_Init+0x198>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	e001      	b.n	800c7b0 <HAL_SAI_Init+0x19c>
 800c7ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7b0:	61bb      	str	r3, [r7, #24]
 800c7b2:	e008      	b.n	800c7c6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d102      	bne.n	800c7c2 <HAL_SAI_Init+0x1ae>
 800c7bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7c0:	e000      	b.n	800c7c4 <HAL_SAI_Init+0x1b0>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6819      	ldr	r1, [r3, #0]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	4b4c      	ldr	r3, [pc, #304]	@ (800c904 <HAL_SAI_Init+0x2f0>)
 800c7d2:	400b      	ands	r3, r1
 800c7d4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	6819      	ldr	r1, [r3, #0]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	685a      	ldr	r2, [r3, #4]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7e4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c7ea:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7f0:	431a      	orrs	r2, r3
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c7fe:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c80a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6a1b      	ldr	r3, [r3, #32]
 800c810:	051b      	lsls	r3, r3, #20
 800c812:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	430a      	orrs	r2, r1
 800c81a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6859      	ldr	r1, [r3, #4]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	4b38      	ldr	r3, [pc, #224]	@ (800c908 <HAL_SAI_Init+0x2f4>)
 800c828:	400b      	ands	r3, r1
 800c82a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	6859      	ldr	r1, [r3, #4]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	699a      	ldr	r2, [r3, #24]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c83a:	431a      	orrs	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c840:	431a      	orrs	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	430a      	orrs	r2, r1
 800c848:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6899      	ldr	r1, [r3, #8]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	4b2d      	ldr	r3, [pc, #180]	@ (800c90c <HAL_SAI_Init+0x2f8>)
 800c856:	400b      	ands	r3, r1
 800c858:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6899      	ldr	r1, [r3, #8]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c864:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c86a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c870:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c876:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c87c:	3b01      	subs	r3, #1
 800c87e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c880:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	430a      	orrs	r2, r1
 800c888:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	68d9      	ldr	r1, [r3, #12]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c898:	400b      	ands	r3, r1
 800c89a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	68d9      	ldr	r1, [r3, #12]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8aa:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8b0:	041b      	lsls	r3, r3, #16
 800c8b2:	431a      	orrs	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	021b      	lsls	r3, r3, #8
 800c8bc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	430a      	orrs	r2, r1
 800c8c4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3720      	adds	r7, #32
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	40015804 	.word	0x40015804
 800c8ec:	40015824 	.word	0x40015824
 800c8f0:	40015800 	.word	0x40015800
 800c8f4:	40015c00 	.word	0x40015c00
 800c8f8:	40015c04 	.word	0x40015c04
 800c8fc:	40015c24 	.word	0x40015c24
 800c900:	cccccccd 	.word	0xcccccccd
 800c904:	ff05c010 	.word	0xff05c010
 800c908:	ffff1ff0 	.word	0xffff1ff0
 800c90c:	fff88000 	.word	0xfff88000

0800c910 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c910:	b480      	push	{r7}
 800c912:	b085      	sub	sp, #20
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c918:	4b17      	ldr	r3, [pc, #92]	@ (800c978 <SAI_Disable+0x68>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a17      	ldr	r2, [pc, #92]	@ (800c97c <SAI_Disable+0x6c>)
 800c91e:	fba2 2303 	umull	r2, r3, r2, r3
 800c922:	0b1b      	lsrs	r3, r3, #12
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c928:	2300      	movs	r3, #0
 800c92a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c93a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	1e5a      	subs	r2, r3, #1
 800c940:	60fa      	str	r2, [r7, #12]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10a      	bne.n	800c95c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c94c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800c956:	2303      	movs	r3, #3
 800c958:	72fb      	strb	r3, [r7, #11]
      break;
 800c95a:	e006      	b.n	800c96a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1e8      	bne.n	800c93c <SAI_Disable+0x2c>

  return status;
 800c96a:	7afb      	ldrb	r3, [r7, #11]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr
 800c978:	2000001c 	.word	0x2000001c
 800c97c:	95cbec1b 	.word	0x95cbec1b

0800c980 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d101      	bne.n	800c992 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	e022      	b.n	800c9d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d105      	bne.n	800c9aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7f8 f833 	bl	8004a10 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2203      	movs	r2, #3
 800c9ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 f814 	bl	800c9e0 <HAL_SD_InitCard>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d001      	beq.n	800c9c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e00a      	b.n	800c9d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c9e0:	b5b0      	push	{r4, r5, r7, lr}
 800c9e2:	b08e      	sub	sp, #56	@ 0x38
 800c9e4:	af04      	add	r7, sp, #16
 800c9e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c9fc:	2376      	movs	r3, #118	@ 0x76
 800c9fe:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681d      	ldr	r5, [r3, #0]
 800ca04:	466c      	mov	r4, sp
 800ca06:	f107 0318 	add.w	r3, r7, #24
 800ca0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ca12:	f107 030c 	add.w	r3, r7, #12
 800ca16:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ca18:	4628      	mov	r0, r5
 800ca1a:	f004 f809 	bl	8010a30 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	685a      	ldr	r2, [r3, #4]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca2c:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f004 f846 	bl	8010ac4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	685a      	ldr	r2, [r3, #4]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ca46:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800ca48:	2002      	movs	r0, #2
 800ca4a:	f7f9 fc81 	bl	8006350 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 ff02 	bl	800d858 <SD_PowerON>
 800ca54:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00b      	beq.n	800ca74 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6a:	431a      	orrs	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	e02e      	b.n	800cad2 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 fe21 	bl	800d6bc <SD_InitCard>
 800ca7a:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00b      	beq.n	800ca9a <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2201      	movs	r2, #1
 800ca86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca90:	431a      	orrs	r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e01b      	b.n	800cad2 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800caa2:	4618      	mov	r0, r3
 800caa4:	f004 f8a0 	bl	8010be8 <SDMMC_CmdBlockLength>
 800caa8:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800caaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00f      	beq.n	800cad0 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a09      	ldr	r2, [pc, #36]	@ (800cadc <HAL_SD_InitCard+0xfc>)
 800cab6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	431a      	orrs	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2201      	movs	r2, #1
 800cac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cacc:	2301      	movs	r3, #1
 800cace:	e000      	b.n	800cad2 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3728      	adds	r7, #40	@ 0x28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bdb0      	pop	{r4, r5, r7, pc}
 800cada:	bf00      	nop
 800cadc:	004005ff 	.word	0x004005ff

0800cae0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b092      	sub	sp, #72	@ 0x48
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
 800caec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800caee:	f7f9 fc23 	bl	8006338 <HAL_GetTick>
 800caf2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d107      	bne.n	800cb12 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb06:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e1bd      	b.n	800ce8e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	f040 81b0 	bne.w	800ce80 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2200      	movs	r2, #0
 800cb24:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cb26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	441a      	add	r2, r3
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d907      	bls.n	800cb44 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb38:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	e1a4      	b.n	800ce8e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2203      	movs	r2, #3
 800cb48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2200      	movs	r2, #0
 800cb52:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d002      	beq.n	800cb62 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb5e:	025b      	lsls	r3, r3, #9
 800cb60:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb62:	f04f 33ff 	mov.w	r3, #4294967295
 800cb66:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	025b      	lsls	r3, r3, #9
 800cb6c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cb6e:	2390      	movs	r3, #144	@ 0x90
 800cb70:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cb72:	2302      	movs	r3, #2
 800cb74:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cb76:	2300      	movs	r3, #0
 800cb78:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f107 0214 	add.w	r2, r7, #20
 800cb86:	4611      	mov	r1, r2
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f004 f801 	bl	8010b90 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d90a      	bls.n	800cbaa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2202      	movs	r2, #2
 800cb98:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cba0:	4618      	mov	r0, r3
 800cba2:	f004 f865 	bl	8010c70 <SDMMC_CmdReadMultiBlock>
 800cba6:	6478      	str	r0, [r7, #68]	@ 0x44
 800cba8:	e009      	b.n	800cbbe <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2201      	movs	r2, #1
 800cbae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f004 f838 	bl	8010c2c <SDMMC_CmdReadSingleBlock>
 800cbbc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d012      	beq.n	800cbea <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a7a      	ldr	r2, [pc, #488]	@ (800cdb4 <HAL_SD_ReadBlocks+0x2d4>)
 800cbca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e151      	b.n	800ce8e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cbee:	e061      	b.n	800ccb4 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d03c      	beq.n	800cc78 <HAL_SD_ReadBlocks+0x198>
 800cbfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d039      	beq.n	800cc78 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cc04:	2300      	movs	r3, #0
 800cc06:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc08:	e033      	b.n	800cc72 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f003 ff3a 	bl	8010a88 <SDMMC_ReadFIFO>
 800cc14:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc18:	b2da      	uxtb	r2, r3
 800cc1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cc1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc20:	3301      	adds	r3, #1
 800cc22:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc26:	3b01      	subs	r3, #1
 800cc28:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cc2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc2c:	0a1b      	lsrs	r3, r3, #8
 800cc2e:	b2da      	uxtb	r2, r3
 800cc30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc32:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cc34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc36:	3301      	adds	r3, #1
 800cc38:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc42:	0c1b      	lsrs	r3, r3, #16
 800cc44:	b2da      	uxtb	r2, r3
 800cc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cc4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc52:	3b01      	subs	r3, #1
 800cc54:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cc56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc58:	0e1b      	lsrs	r3, r3, #24
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc5e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cc60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc62:	3301      	adds	r3, #1
 800cc64:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800cc6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc6e:	3301      	adds	r3, #1
 800cc70:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc74:	2b07      	cmp	r3, #7
 800cc76:	d9c8      	bls.n	800cc0a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cc78:	f7f9 fb5e 	bl	8006338 <HAL_GetTick>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc80:	1ad3      	subs	r3, r2, r3
 800cc82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d902      	bls.n	800cc8e <HAL_SD_ReadBlocks+0x1ae>
 800cc88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d112      	bne.n	800ccb4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a48      	ldr	r2, [pc, #288]	@ (800cdb4 <HAL_SD_ReadBlocks+0x2d4>)
 800cc94:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc9a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2200      	movs	r2, #0
 800ccae:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	e0ec      	b.n	800ce8e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccba:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d096      	beq.n	800cbf0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d022      	beq.n	800cd16 <HAL_SD_ReadBlocks+0x236>
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d91f      	bls.n	800cd16 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccda:	2b03      	cmp	r3, #3
 800ccdc:	d01b      	beq.n	800cd16 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f004 f82a 	bl	8010d3c <SDMMC_CmdStopTransfer>
 800cce8:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ccea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d012      	beq.n	800cd16 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a2f      	ldr	r2, [pc, #188]	@ (800cdb4 <HAL_SD_ReadBlocks+0x2d4>)
 800ccf6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccfe:	431a      	orrs	r2, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2201      	movs	r2, #1
 800cd08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800cd12:	2301      	movs	r3, #1
 800cd14:	e0bb      	b.n	800ce8e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd1c:	f003 0308 	and.w	r3, r3, #8
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d012      	beq.n	800cd4a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a22      	ldr	r2, [pc, #136]	@ (800cdb4 <HAL_SD_ReadBlocks+0x2d4>)
 800cd2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd30:	f043 0208 	orr.w	r2, r3, #8
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	e0a1      	b.n	800ce8e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd50:	f003 0302 	and.w	r3, r3, #2
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d012      	beq.n	800cd7e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a15      	ldr	r2, [pc, #84]	@ (800cdb4 <HAL_SD_ReadBlocks+0x2d4>)
 800cd5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd64:	f043 0202 	orr.w	r2, r3, #2
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2200      	movs	r2, #0
 800cd78:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e087      	b.n	800ce8e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd84:	f003 0320 	and.w	r3, r3, #32
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d064      	beq.n	800ce56 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a08      	ldr	r2, [pc, #32]	@ (800cdb4 <HAL_SD_ReadBlocks+0x2d4>)
 800cd92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd98:	f043 0220 	orr.w	r2, r3, #32
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2201      	movs	r2, #1
 800cda4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e06d      	b.n	800ce8e <HAL_SD_ReadBlocks+0x3ae>
 800cdb2:	bf00      	nop
 800cdb4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f003 fe63 	bl	8010a88 <SDMMC_ReadFIFO>
 800cdc2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800cdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cdcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdce:	3301      	adds	r3, #1
 800cdd0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cdd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdda:	0a1b      	lsrs	r3, r3, #8
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cde2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde4:	3301      	adds	r3, #1
 800cde6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cde8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdea:	3b01      	subs	r3, #1
 800cdec:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf0:	0c1b      	lsrs	r3, r3, #16
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cdf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cdfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce00:	3b01      	subs	r3, #1
 800ce02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ce04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce06:	0e1b      	lsrs	r3, r3, #24
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce0c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ce0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce10:	3301      	adds	r3, #1
 800ce12:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800ce14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce16:	3b01      	subs	r3, #1
 800ce18:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ce1a:	f7f9 fa8d 	bl	8006338 <HAL_GetTick>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d902      	bls.n	800ce30 <HAL_SD_ReadBlocks+0x350>
 800ce2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d112      	bne.n	800ce56 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a18      	ldr	r2, [pc, #96]	@ (800ce98 <HAL_SD_ReadBlocks+0x3b8>)
 800ce36:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce3c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	e01b      	b.n	800ce8e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d002      	beq.n	800ce6a <HAL_SD_ReadBlocks+0x38a>
 800ce64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1a6      	bne.n	800cdb8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f240 523a 	movw	r2, #1338	@ 0x53a
 800ce72:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2201      	movs	r2, #1
 800ce78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	e006      	b.n	800ce8e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce84:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ce8c:	2301      	movs	r3, #1
  }
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3748      	adds	r7, #72	@ 0x48
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	004005ff 	.word	0x004005ff

0800ce9c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b092      	sub	sp, #72	@ 0x48
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
 800cea8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ceaa:	f7f9 fa45 	bl	8006338 <HAL_GetTick>
 800ceae:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d107      	bne.n	800cece <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cec2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	e165      	b.n	800d19a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	f040 8158 	bne.w	800d18c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cee2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	441a      	add	r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d907      	bls.n	800cf00 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cef4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	e14c      	b.n	800d19a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2203      	movs	r2, #3
 800cf04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d002      	beq.n	800cf1e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800cf18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1a:	025b      	lsls	r3, r3, #9
 800cf1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cf1e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf22:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	025b      	lsls	r3, r3, #9
 800cf28:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cf2a:	2390      	movs	r3, #144	@ 0x90
 800cf2c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800cf36:	2301      	movs	r3, #1
 800cf38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f107 0218 	add.w	r2, r7, #24
 800cf42:	4611      	mov	r1, r2
 800cf44:	4618      	mov	r0, r3
 800cf46:	f003 fe23 	bl	8010b90 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d90a      	bls.n	800cf66 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2220      	movs	r2, #32
 800cf54:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f003 fecb 	bl	8010cf8 <SDMMC_CmdWriteMultiBlock>
 800cf62:	6478      	str	r0, [r7, #68]	@ 0x44
 800cf64:	e009      	b.n	800cf7a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2210      	movs	r2, #16
 800cf6a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cf72:	4618      	mov	r0, r3
 800cf74:	f003 fe9e 	bl	8010cb4 <SDMMC_CmdWriteSingleBlock>
 800cf78:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d012      	beq.n	800cfa6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a87      	ldr	r2, [pc, #540]	@ (800d1a4 <HAL_SD_WriteBlocks+0x308>)
 800cf86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e0f9      	b.n	800d19a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cfaa:	e065      	b.n	800d078 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d040      	beq.n	800d03c <HAL_SD_WriteBlocks+0x1a0>
 800cfba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d03d      	beq.n	800d03c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfc4:	e037      	b.n	800d036 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800cfc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cfcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfce:	3301      	adds	r3, #1
 800cfd0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cfd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800cfd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	021a      	lsls	r2, r3, #8
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cfe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cfea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfec:	3b01      	subs	r3, #1
 800cfee:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800cff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	041a      	lsls	r2, r3, #16
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cffe:	3301      	adds	r3, #1
 800d000:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d004:	3b01      	subs	r3, #1
 800d006:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	061a      	lsls	r2, r3, #24
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	4313      	orrs	r3, r2
 800d012:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d016:	3301      	adds	r3, #1
 800d018:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d01a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d01c:	3b01      	subs	r3, #1
 800d01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f107 0214 	add.w	r2, r7, #20
 800d028:	4611      	mov	r1, r2
 800d02a:	4618      	mov	r0, r3
 800d02c:	f003 fd39 	bl	8010aa2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d032:	3301      	adds	r3, #1
 800d034:	643b      	str	r3, [r7, #64]	@ 0x40
 800d036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d038:	2b07      	cmp	r3, #7
 800d03a:	d9c4      	bls.n	800cfc6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d03c:	f7f9 f97c 	bl	8006338 <HAL_GetTick>
 800d040:	4602      	mov	r2, r0
 800d042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d048:	429a      	cmp	r2, r3
 800d04a:	d902      	bls.n	800d052 <HAL_SD_WriteBlocks+0x1b6>
 800d04c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d112      	bne.n	800d078 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a53      	ldr	r2, [pc, #332]	@ (800d1a4 <HAL_SD_WriteBlocks+0x308>)
 800d058:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d05e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d060:	431a      	orrs	r2, r3
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2200      	movs	r2, #0
 800d072:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800d074:	2303      	movs	r3, #3
 800d076:	e090      	b.n	800d19a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d07e:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800d082:	2b00      	cmp	r3, #0
 800d084:	d092      	beq.n	800cfac <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d08c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d090:	2b00      	cmp	r3, #0
 800d092:	d022      	beq.n	800d0da <HAL_SD_WriteBlocks+0x23e>
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	2b01      	cmp	r3, #1
 800d098:	d91f      	bls.n	800d0da <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	d01b      	beq.n	800d0da <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f003 fe48 	bl	8010d3c <SDMMC_CmdStopTransfer>
 800d0ac:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d0ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d012      	beq.n	800d0da <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a3a      	ldr	r2, [pc, #232]	@ (800d1a4 <HAL_SD_WriteBlocks+0x308>)
 800d0ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e05f      	b.n	800d19a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0e0:	f003 0308 	and.w	r3, r3, #8
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d012      	beq.n	800d10e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a2d      	ldr	r2, [pc, #180]	@ (800d1a4 <HAL_SD_WriteBlocks+0x308>)
 800d0ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0f4:	f043 0208 	orr.w	r2, r3, #8
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	e045      	b.n	800d19a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d114:	f003 0302 	and.w	r3, r3, #2
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d012      	beq.n	800d142 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a20      	ldr	r2, [pc, #128]	@ (800d1a4 <HAL_SD_WriteBlocks+0x308>)
 800d122:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d128:	f043 0202 	orr.w	r2, r3, #2
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2201      	movs	r2, #1
 800d134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2200      	movs	r2, #0
 800d13c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	e02b      	b.n	800d19a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d148:	f003 0310 	and.w	r3, r3, #16
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d012      	beq.n	800d176 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4a13      	ldr	r2, [pc, #76]	@ (800d1a4 <HAL_SD_WriteBlocks+0x308>)
 800d156:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d15c:	f043 0210 	orr.w	r2, r3, #16
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2200      	movs	r2, #0
 800d170:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e011      	b.n	800d19a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d17e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800d188:	2300      	movs	r3, #0
 800d18a:	e006      	b.n	800d19a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d190:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d198:	2301      	movs	r3, #1
  }
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3748      	adds	r7, #72	@ 0x48
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	004005ff 	.word	0x004005ff

0800d1a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1b6:	0f9b      	lsrs	r3, r3, #30
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1c2:	0e9b      	lsrs	r3, r3, #26
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	f003 030f 	and.w	r3, r3, #15
 800d1ca:	b2da      	uxtb	r2, r3
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1d4:	0e1b      	lsrs	r3, r3, #24
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	f003 0303 	and.w	r3, r3, #3
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1e6:	0c1b      	lsrs	r3, r3, #16
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1f2:	0a1b      	lsrs	r3, r3, #8
 800d1f4:	b2da      	uxtb	r2, r3
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d208:	0d1b      	lsrs	r3, r3, #20
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d214:	0c1b      	lsrs	r3, r3, #16
 800d216:	b2db      	uxtb	r3, r3
 800d218:	f003 030f 	and.w	r3, r3, #15
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d226:	0bdb      	lsrs	r3, r3, #15
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d238:	0b9b      	lsrs	r3, r3, #14
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	f003 0301 	and.w	r3, r3, #1
 800d240:	b2da      	uxtb	r2, r3
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d24a:	0b5b      	lsrs	r3, r3, #13
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	b2da      	uxtb	r2, r3
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d25c:	0b1b      	lsrs	r3, r3, #12
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	f003 0301 	and.w	r3, r3, #1
 800d264:	b2da      	uxtb	r2, r3
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	2200      	movs	r2, #0
 800d26e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d274:	2b00      	cmp	r3, #0
 800d276:	d163      	bne.n	800d340 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d27c:	009a      	lsls	r2, r3, #2
 800d27e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d282:	4013      	ands	r3, r2
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d288:	0f92      	lsrs	r2, r2, #30
 800d28a:	431a      	orrs	r2, r3
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d294:	0edb      	lsrs	r3, r3, #27
 800d296:	b2db      	uxtb	r3, r3
 800d298:	f003 0307 	and.w	r3, r3, #7
 800d29c:	b2da      	uxtb	r2, r3
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2a6:	0e1b      	lsrs	r3, r3, #24
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	f003 0307 	and.w	r3, r3, #7
 800d2ae:	b2da      	uxtb	r2, r3
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2b8:	0d5b      	lsrs	r3, r3, #21
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	f003 0307 	and.w	r3, r3, #7
 800d2c0:	b2da      	uxtb	r2, r3
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2ca:	0c9b      	lsrs	r3, r3, #18
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	f003 0307 	and.w	r3, r3, #7
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2dc:	0bdb      	lsrs	r3, r3, #15
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	f003 0307 	and.w	r3, r3, #7
 800d2e4:	b2da      	uxtb	r2, r3
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	1c5a      	adds	r2, r3, #1
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	7e1b      	ldrb	r3, [r3, #24]
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	f003 0307 	and.w	r3, r3, #7
 800d2fe:	3302      	adds	r3, #2
 800d300:	2201      	movs	r2, #1
 800d302:	fa02 f303 	lsl.w	r3, r2, r3
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d30a:	fb03 f202 	mul.w	r2, r3, r2
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	7a1b      	ldrb	r3, [r3, #8]
 800d316:	b2db      	uxtb	r3, r3
 800d318:	f003 030f 	and.w	r3, r3, #15
 800d31c:	2201      	movs	r2, #1
 800d31e:	409a      	lsls	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d32c:	0a52      	lsrs	r2, r2, #9
 800d32e:	fb03 f202 	mul.w	r2, r3, r2
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d33c:	661a      	str	r2, [r3, #96]	@ 0x60
 800d33e:	e031      	b.n	800d3a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d344:	2b01      	cmp	r3, #1
 800d346:	d11d      	bne.n	800d384 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d34c:	041b      	lsls	r3, r3, #16
 800d34e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d356:	0c1b      	lsrs	r3, r3, #16
 800d358:	431a      	orrs	r2, r3
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	691b      	ldr	r3, [r3, #16]
 800d362:	3301      	adds	r3, #1
 800d364:	029a      	lsls	r2, r3, #10
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d378:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	661a      	str	r2, [r3, #96]	@ 0x60
 800d382:	e00f      	b.n	800d3a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a58      	ldr	r2, [pc, #352]	@ (800d4ec <HAL_SD_GetCardCSD+0x344>)
 800d38a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d390:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	e09d      	b.n	800d4e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3a8:	0b9b      	lsrs	r3, r3, #14
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	f003 0301 	and.w	r3, r3, #1
 800d3b0:	b2da      	uxtb	r2, r3
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3ba:	09db      	lsrs	r3, r3, #7
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3d2:	b2da      	uxtb	r2, r3
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3dc:	0fdb      	lsrs	r3, r3, #31
 800d3de:	b2da      	uxtb	r2, r3
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3e8:	0f5b      	lsrs	r3, r3, #29
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	f003 0303 	and.w	r3, r3, #3
 800d3f0:	b2da      	uxtb	r2, r3
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3fa:	0e9b      	lsrs	r3, r3, #26
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	f003 0307 	and.w	r3, r3, #7
 800d402:	b2da      	uxtb	r2, r3
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d40c:	0d9b      	lsrs	r3, r3, #22
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	f003 030f 	and.w	r3, r3, #15
 800d414:	b2da      	uxtb	r2, r3
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d41e:	0d5b      	lsrs	r3, r3, #21
 800d420:	b2db      	uxtb	r3, r3
 800d422:	f003 0301 	and.w	r3, r3, #1
 800d426:	b2da      	uxtb	r2, r3
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	2200      	movs	r2, #0
 800d432:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d43a:	0c1b      	lsrs	r3, r3, #16
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	f003 0301 	and.w	r3, r3, #1
 800d442:	b2da      	uxtb	r2, r3
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d44e:	0bdb      	lsrs	r3, r3, #15
 800d450:	b2db      	uxtb	r3, r3
 800d452:	f003 0301 	and.w	r3, r3, #1
 800d456:	b2da      	uxtb	r2, r3
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d462:	0b9b      	lsrs	r3, r3, #14
 800d464:	b2db      	uxtb	r3, r3
 800d466:	f003 0301 	and.w	r3, r3, #1
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d476:	0b5b      	lsrs	r3, r3, #13
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	f003 0301 	and.w	r3, r3, #1
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d48a:	0b1b      	lsrs	r3, r3, #12
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	b2da      	uxtb	r2, r3
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d49e:	0a9b      	lsrs	r3, r3, #10
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	f003 0303 	and.w	r3, r3, #3
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4b2:	0a1b      	lsrs	r3, r3, #8
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	f003 0303 	and.w	r3, r3, #3
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4c6:	085b      	lsrs	r3, r3, #1
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d4de:	2300      	movs	r3, #0
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	004005ff 	.word	0x004005ff

0800d4f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d548:	b5b0      	push	{r4, r5, r7, lr}
 800d54a:	b08e      	sub	sp, #56	@ 0x38
 800d54c:	af04      	add	r7, sp, #16
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2203      	movs	r2, #3
 800d55c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d564:	2b03      	cmp	r3, #3
 800d566:	d02e      	beq.n	800d5c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d56e:	d106      	bne.n	800d57e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d574:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	639a      	str	r2, [r3, #56]	@ 0x38
 800d57c:	e029      	b.n	800d5d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d584:	d10a      	bne.n	800d59c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 fa1c 	bl	800d9c4 <SD_WideBus_Enable>
 800d58c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d592:	6a3b      	ldr	r3, [r7, #32]
 800d594:	431a      	orrs	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	639a      	str	r2, [r3, #56]	@ 0x38
 800d59a:	e01a      	b.n	800d5d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d10a      	bne.n	800d5b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 fa59 	bl	800da5a <SD_WideBus_Disable>
 800d5a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
 800d5b0:	431a      	orrs	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	639a      	str	r2, [r3, #56]	@ 0x38
 800d5b6:	e00c      	b.n	800d5d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5bc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	639a      	str	r2, [r3, #56]	@ 0x38
 800d5c4:	e005      	b.n	800d5d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ca:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00b      	beq.n	800d5f2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a26      	ldr	r2, [pc, #152]	@ (800d678 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d5e0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d5f0:	e01f      	b.n	800d632 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	695b      	ldr	r3, [r3, #20]
 800d60c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	699b      	ldr	r3, [r3, #24]
 800d612:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681d      	ldr	r5, [r3, #0]
 800d618:	466c      	mov	r4, sp
 800d61a:	f107 0314 	add.w	r3, r7, #20
 800d61e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d626:	f107 0308 	add.w	r3, r7, #8
 800d62a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d62c:	4628      	mov	r0, r5
 800d62e:	f003 f9ff 	bl	8010a30 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d63a:	4618      	mov	r0, r3
 800d63c:	f003 fad4 	bl	8010be8 <SDMMC_CmdBlockLength>
 800d640:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d642:	6a3b      	ldr	r3, [r7, #32]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d00c      	beq.n	800d662 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a0a      	ldr	r2, [pc, #40]	@ (800d678 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d64e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d654:	6a3b      	ldr	r3, [r7, #32]
 800d656:	431a      	orrs	r2, r3
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2201      	movs	r2, #1
 800d666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800d66a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3728      	adds	r7, #40	@ 0x28
 800d672:	46bd      	mov	sp, r7
 800d674:	bdb0      	pop	{r4, r5, r7, pc}
 800d676:	bf00      	nop
 800d678:	004005ff 	.word	0x004005ff

0800d67c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b086      	sub	sp, #24
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d684:	2300      	movs	r3, #0
 800d686:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d688:	f107 030c 	add.w	r3, r7, #12
 800d68c:	4619      	mov	r1, r3
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 f970 	bl	800d974 <SD_SendStatus>
 800d694:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d005      	beq.n	800d6a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	431a      	orrs	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	0a5b      	lsrs	r3, r3, #9
 800d6ac:	f003 030f 	and.w	r3, r3, #15
 800d6b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d6b2:	693b      	ldr	r3, [r7, #16]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d6bc:	b5b0      	push	{r4, r5, r7, lr}
 800d6be:	b094      	sub	sp, #80	@ 0x50
 800d6c0:	af04      	add	r7, sp, #16
 800d6c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f003 fa07 	bl	8010ae0 <SDMMC_GetPowerState>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d102      	bne.n	800d6de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d6d8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d6dc:	e0b8      	b.n	800d850 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6e2:	2b03      	cmp	r3, #3
 800d6e4:	d02f      	beq.n	800d746 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f003 fc31 	bl	8010f52 <SDMMC_CmdSendCID>
 800d6f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d001      	beq.n	800d6fc <SD_InitCard+0x40>
    {
      return errorstate;
 800d6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6fa:	e0a9      	b.n	800d850 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2100      	movs	r1, #0
 800d702:	4618      	mov	r0, r3
 800d704:	f003 fa31 	bl	8010b6a <SDMMC_GetResponse>
 800d708:	4602      	mov	r2, r0
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2104      	movs	r1, #4
 800d714:	4618      	mov	r0, r3
 800d716:	f003 fa28 	bl	8010b6a <SDMMC_GetResponse>
 800d71a:	4602      	mov	r2, r0
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2108      	movs	r1, #8
 800d726:	4618      	mov	r0, r3
 800d728:	f003 fa1f 	bl	8010b6a <SDMMC_GetResponse>
 800d72c:	4602      	mov	r2, r0
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	210c      	movs	r1, #12
 800d738:	4618      	mov	r0, r3
 800d73a:	f003 fa16 	bl	8010b6a <SDMMC_GetResponse>
 800d73e:	4602      	mov	r2, r0
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d74a:	2b03      	cmp	r3, #3
 800d74c:	d00d      	beq.n	800d76a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f107 020e 	add.w	r2, r7, #14
 800d756:	4611      	mov	r1, r2
 800d758:	4618      	mov	r0, r3
 800d75a:	f003 fc37 	bl	8010fcc <SDMMC_CmdSetRelAdd>
 800d75e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d762:	2b00      	cmp	r3, #0
 800d764:	d001      	beq.n	800d76a <SD_InitCard+0xae>
    {
      return errorstate;
 800d766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d768:	e072      	b.n	800d850 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d76e:	2b03      	cmp	r3, #3
 800d770:	d036      	beq.n	800d7e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d772:	89fb      	ldrh	r3, [r7, #14]
 800d774:	461a      	mov	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d782:	041b      	lsls	r3, r3, #16
 800d784:	4619      	mov	r1, r3
 800d786:	4610      	mov	r0, r2
 800d788:	f003 fc01 	bl	8010f8e <SDMMC_CmdSendCSD>
 800d78c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d78e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d790:	2b00      	cmp	r3, #0
 800d792:	d001      	beq.n	800d798 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d796:	e05b      	b.n	800d850 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2100      	movs	r1, #0
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f003 f9e3 	bl	8010b6a <SDMMC_GetResponse>
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2104      	movs	r1, #4
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f003 f9da 	bl	8010b6a <SDMMC_GetResponse>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2108      	movs	r1, #8
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f003 f9d1 	bl	8010b6a <SDMMC_GetResponse>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	210c      	movs	r1, #12
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f003 f9c8 	bl	8010b6a <SDMMC_GetResponse>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2104      	movs	r1, #4
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f003 f9bf 	bl	8010b6a <SDMMC_GetResponse>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	0d1a      	lsrs	r2, r3, #20
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d7f4:	f107 0310 	add.w	r3, r7, #16
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f7ff fcd4 	bl	800d1a8 <HAL_SD_GetCardCSD>
 800d800:	4603      	mov	r3, r0
 800d802:	2b00      	cmp	r3, #0
 800d804:	d002      	beq.n	800d80c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d806:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d80a:	e021      	b.n	800d850 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6819      	ldr	r1, [r3, #0]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d814:	041b      	lsls	r3, r3, #16
 800d816:	2200      	movs	r2, #0
 800d818:	461c      	mov	r4, r3
 800d81a:	4615      	mov	r5, r2
 800d81c:	4622      	mov	r2, r4
 800d81e:	462b      	mov	r3, r5
 800d820:	4608      	mov	r0, r1
 800d822:	f003 faad 	bl	8010d80 <SDMMC_CmdSelDesel>
 800d826:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d001      	beq.n	800d832 <SD_InitCard+0x176>
  {
    return errorstate;
 800d82e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d830:	e00e      	b.n	800d850 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681d      	ldr	r5, [r3, #0]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	466c      	mov	r4, sp
 800d83a:	f103 0210 	add.w	r2, r3, #16
 800d83e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d840:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d844:	3304      	adds	r3, #4
 800d846:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d848:	4628      	mov	r0, r5
 800d84a:	f003 f8f1 	bl	8010a30 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3740      	adds	r7, #64	@ 0x40
 800d854:	46bd      	mov	sp, r7
 800d856:	bdb0      	pop	{r4, r5, r7, pc}

0800d858 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b086      	sub	sp, #24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d860:	2300      	movs	r3, #0
 800d862:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d864:	2300      	movs	r3, #0
 800d866:	617b      	str	r3, [r7, #20]
 800d868:	2300      	movs	r3, #0
 800d86a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4618      	mov	r0, r3
 800d872:	f003 faa8 	bl	8010dc6 <SDMMC_CmdGoIdleState>
 800d876:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d001      	beq.n	800d882 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	e072      	b.n	800d968 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4618      	mov	r0, r3
 800d888:	f003 fabb 	bl	8010e02 <SDMMC_CmdOperCond>
 800d88c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00d      	beq.n	800d8b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f003 fa91 	bl	8010dc6 <SDMMC_CmdGoIdleState>
 800d8a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d004      	beq.n	800d8b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	e05b      	b.n	800d968 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d137      	bne.n	800d92e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f003 fabb 	bl	8010e40 <SDMMC_CmdAppCommand>
 800d8ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d02d      	beq.n	800d92e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d8d6:	e047      	b.n	800d968 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2100      	movs	r1, #0
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f003 faae 	bl	8010e40 <SDMMC_CmdAppCommand>
 800d8e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d001      	beq.n	800d8f0 <SD_PowerON+0x98>
    {
      return errorstate;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	e03b      	b.n	800d968 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	491e      	ldr	r1, [pc, #120]	@ (800d970 <SD_PowerON+0x118>)
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f003 fac4 	bl	8010e84 <SDMMC_CmdAppOperCommand>
 800d8fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d002      	beq.n	800d90a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d904:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d908:	e02e      	b.n	800d968 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2100      	movs	r1, #0
 800d910:	4618      	mov	r0, r3
 800d912:	f003 f92a 	bl	8010b6a <SDMMC_GetResponse>
 800d916:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	0fdb      	lsrs	r3, r3, #31
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d101      	bne.n	800d924 <SD_PowerON+0xcc>
 800d920:	2301      	movs	r3, #1
 800d922:	e000      	b.n	800d926 <SD_PowerON+0xce>
 800d924:	2300      	movs	r3, #0
 800d926:	613b      	str	r3, [r7, #16]

    count++;
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	3301      	adds	r3, #1
 800d92c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d934:	4293      	cmp	r3, r2
 800d936:	d802      	bhi.n	800d93e <SD_PowerON+0xe6>
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d0cc      	beq.n	800d8d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d944:	4293      	cmp	r3, r2
 800d946:	d902      	bls.n	800d94e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d948:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d94c:	e00c      	b.n	800d968 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d954:	2b00      	cmp	r3, #0
 800d956:	d003      	beq.n	800d960 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2201      	movs	r2, #1
 800d95c:	645a      	str	r2, [r3, #68]	@ 0x44
 800d95e:	e002      	b.n	800d966 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3718      	adds	r7, #24
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	c1100000 	.word	0xc1100000

0800d974 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d102      	bne.n	800d98a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d984:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d988:	e018      	b.n	800d9bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d992:	041b      	lsls	r3, r3, #16
 800d994:	4619      	mov	r1, r3
 800d996:	4610      	mov	r0, r2
 800d998:	f003 fb39 	bl	801100e <SDMMC_CmdSendStatus>
 800d99c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d001      	beq.n	800d9a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	e009      	b.n	800d9bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2100      	movs	r1, #0
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f003 f8db 	bl	8010b6a <SDMMC_GetResponse>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d9ba:	2300      	movs	r3, #0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	60fb      	str	r3, [r7, #12]
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2100      	movs	r1, #0
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f003 f8c5 	bl	8010b6a <SDMMC_GetResponse>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d9ea:	d102      	bne.n	800d9f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d9ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d9f0:	e02f      	b.n	800da52 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d9f2:	f107 030c 	add.w	r3, r7, #12
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 f879 	bl	800daf0 <SD_FindSCR>
 800d9fe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d001      	beq.n	800da0a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	e023      	b.n	800da52 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800da10:	2b00      	cmp	r3, #0
 800da12:	d01c      	beq.n	800da4e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da1c:	041b      	lsls	r3, r3, #16
 800da1e:	4619      	mov	r1, r3
 800da20:	4610      	mov	r0, r2
 800da22:	f003 fa0d 	bl	8010e40 <SDMMC_CmdAppCommand>
 800da26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d001      	beq.n	800da32 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	e00f      	b.n	800da52 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2102      	movs	r1, #2
 800da38:	4618      	mov	r0, r3
 800da3a:	f003 fa47 	bl	8010ecc <SDMMC_CmdBusWidth>
 800da3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d001      	beq.n	800da4a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	e003      	b.n	800da52 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800da4a:	2300      	movs	r3, #0
 800da4c:	e001      	b.n	800da52 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800da52:	4618      	mov	r0, r3
 800da54:	3718      	adds	r7, #24
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b086      	sub	sp, #24
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800da62:	2300      	movs	r3, #0
 800da64:	60fb      	str	r3, [r7, #12]
 800da66:	2300      	movs	r3, #0
 800da68:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2100      	movs	r1, #0
 800da70:	4618      	mov	r0, r3
 800da72:	f003 f87a 	bl	8010b6a <SDMMC_GetResponse>
 800da76:	4603      	mov	r3, r0
 800da78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da80:	d102      	bne.n	800da88 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800da82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da86:	e02f      	b.n	800dae8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800da88:	f107 030c 	add.w	r3, r7, #12
 800da8c:	4619      	mov	r1, r3
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 f82e 	bl	800daf0 <SD_FindSCR>
 800da94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d001      	beq.n	800daa0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	e023      	b.n	800dae8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d01c      	beq.n	800dae4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dab2:	041b      	lsls	r3, r3, #16
 800dab4:	4619      	mov	r1, r3
 800dab6:	4610      	mov	r0, r2
 800dab8:	f003 f9c2 	bl	8010e40 <SDMMC_CmdAppCommand>
 800dabc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d001      	beq.n	800dac8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	e00f      	b.n	800dae8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2100      	movs	r1, #0
 800dace:	4618      	mov	r0, r3
 800dad0:	f003 f9fc 	bl	8010ecc <SDMMC_CmdBusWidth>
 800dad4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	e003      	b.n	800dae8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dae0:	2300      	movs	r3, #0
 800dae2:	e001      	b.n	800dae8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dae4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3718      	adds	r7, #24
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800daf0:	b590      	push	{r4, r7, lr}
 800daf2:	b08f      	sub	sp, #60	@ 0x3c
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dafa:	f7f8 fc1d 	bl	8006338 <HAL_GetTick>
 800dafe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800db00:	2300      	movs	r3, #0
 800db02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800db04:	2300      	movs	r3, #0
 800db06:	60bb      	str	r3, [r7, #8]
 800db08:	2300      	movs	r3, #0
 800db0a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2108      	movs	r1, #8
 800db16:	4618      	mov	r0, r3
 800db18:	f003 f866 	bl	8010be8 <SDMMC_CmdBlockLength>
 800db1c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800db1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db20:	2b00      	cmp	r3, #0
 800db22:	d001      	beq.n	800db28 <SD_FindSCR+0x38>
  {
    return errorstate;
 800db24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db26:	e0b2      	b.n	800dc8e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db30:	041b      	lsls	r3, r3, #16
 800db32:	4619      	mov	r1, r3
 800db34:	4610      	mov	r0, r2
 800db36:	f003 f983 	bl	8010e40 <SDMMC_CmdAppCommand>
 800db3a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800db3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d001      	beq.n	800db46 <SD_FindSCR+0x56>
  {
    return errorstate;
 800db42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db44:	e0a3      	b.n	800dc8e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db46:	f04f 33ff 	mov.w	r3, #4294967295
 800db4a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800db4c:	2308      	movs	r3, #8
 800db4e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800db50:	2330      	movs	r3, #48	@ 0x30
 800db52:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800db54:	2302      	movs	r3, #2
 800db56:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800db58:	2300      	movs	r3, #0
 800db5a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800db5c:	2301      	movs	r3, #1
 800db5e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f107 0210 	add.w	r2, r7, #16
 800db68:	4611      	mov	r1, r2
 800db6a:	4618      	mov	r0, r3
 800db6c:	f003 f810 	bl	8010b90 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4618      	mov	r0, r3
 800db76:	f003 f9cb 	bl	8010f10 <SDMMC_CmdSendSCR>
 800db7a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800db7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d02a      	beq.n	800dbd8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800db82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db84:	e083      	b.n	800dc8e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800db90:	2b00      	cmp	r3, #0
 800db92:	d00f      	beq.n	800dbb4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6819      	ldr	r1, [r3, #0]
 800db98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	f107 0208 	add.w	r2, r7, #8
 800dba0:	18d4      	adds	r4, r2, r3
 800dba2:	4608      	mov	r0, r1
 800dba4:	f002 ff70 	bl	8010a88 <SDMMC_ReadFIFO>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	6023      	str	r3, [r4, #0]
      index++;
 800dbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbae:	3301      	adds	r3, #1
 800dbb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbb2:	e006      	b.n	800dbc2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d012      	beq.n	800dbe8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800dbc2:	f7f8 fbb9 	bl	8006338 <HAL_GetTick>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbca:	1ad3      	subs	r3, r2, r3
 800dbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd0:	d102      	bne.n	800dbd8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dbd2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dbd6:	e05a      	b.n	800dc8e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbde:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d0cf      	beq.n	800db86 <SD_FindSCR+0x96>
 800dbe6:	e000      	b.n	800dbea <SD_FindSCR+0xfa>
      break;
 800dbe8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbf0:	f003 0308 	and.w	r3, r3, #8
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d005      	beq.n	800dc04 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2208      	movs	r2, #8
 800dbfe:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dc00:	2308      	movs	r3, #8
 800dc02:	e044      	b.n	800dc8e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc0a:	f003 0302 	and.w	r3, r3, #2
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d005      	beq.n	800dc1e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2202      	movs	r2, #2
 800dc18:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc1a:	2302      	movs	r3, #2
 800dc1c:	e037      	b.n	800dc8e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc24:	f003 0320 	and.w	r3, r3, #32
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d005      	beq.n	800dc38 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2220      	movs	r2, #32
 800dc32:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dc34:	2320      	movs	r3, #32
 800dc36:	e02a      	b.n	800dc8e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800dc40:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	061a      	lsls	r2, r3, #24
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	021b      	lsls	r3, r3, #8
 800dc4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc4e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	0a1b      	lsrs	r3, r3, #8
 800dc54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dc58:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	0e1b      	lsrs	r3, r3, #24
 800dc5e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc62:	601a      	str	r2, [r3, #0]
    scr++;
 800dc64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc66:	3304      	adds	r3, #4
 800dc68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	061a      	lsls	r2, r3, #24
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	021b      	lsls	r3, r3, #8
 800dc72:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc76:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	0a1b      	lsrs	r3, r3, #8
 800dc7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dc80:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	0e1b      	lsrs	r3, r3, #24
 800dc86:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc8a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	373c      	adds	r7, #60	@ 0x3c
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd90      	pop	{r4, r7, pc}

0800dc96 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b082      	sub	sp, #8
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
 800dc9e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d101      	bne.n	800dcaa <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e025      	b.n	800dcf6 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d106      	bne.n	800dcc4 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7f7 fa82 	bl	80051c8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	4610      	mov	r0, r2
 800dcd8:	f002 fde4 	bl	80108a4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6818      	ldr	r0, [r3, #0]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	461a      	mov	r2, r3
 800dce6:	6839      	ldr	r1, [r7, #0]
 800dce8:	f002 fe38 	bl	801095c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3708      	adds	r7, #8
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
	...

0800dd00 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d101      	bne.n	800dd12 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e04c      	b.n	800ddac <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d106      	bne.n	800dd2c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7f6 fed4 	bl	8004ad4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2202      	movs	r2, #2
 800dd30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f022 0203 	bic.w	r2, r2, #3
 800dd42:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800dd4c:	68fa      	ldr	r2, [r7, #12]
 800dd4e:	4b19      	ldr	r3, [pc, #100]	@ (800ddb4 <HAL_SPDIFRX_Init+0xb4>)
 800dd50:	4013      	ands	r3, r2
 800dd52:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800dd5c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800dd62:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800dd68:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800dd6e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800dd74:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800dd7a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800dd80:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800dd86:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800dd8c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800dd8e:	68fa      	ldr	r2, [r7, #12]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	fff88407 	.word	0xfff88407

0800ddb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d101      	bne.n	800ddca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e09d      	b.n	800df06 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d108      	bne.n	800dde4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ddda:	d009      	beq.n	800ddf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2200      	movs	r2, #0
 800dde0:	61da      	str	r2, [r3, #28]
 800dde2:	e005      	b.n	800ddf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d106      	bne.n	800de10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7f6 fec6 	bl	8004b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2202      	movs	r2, #2
 800de14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800de26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800de30:	d902      	bls.n	800de38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800de32:	2300      	movs	r3, #0
 800de34:	60fb      	str	r3, [r7, #12]
 800de36:	e002      	b.n	800de3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800de38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800de46:	d007      	beq.n	800de58 <HAL_SPI_Init+0xa0>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800de50:	d002      	beq.n	800de58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800de68:	431a      	orrs	r2, r3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	691b      	ldr	r3, [r3, #16]
 800de6e:	f003 0302 	and.w	r3, r3, #2
 800de72:	431a      	orrs	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	f003 0301 	and.w	r3, r3, #1
 800de7c:	431a      	orrs	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	699b      	ldr	r3, [r3, #24]
 800de82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800de86:	431a      	orrs	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	69db      	ldr	r3, [r3, #28]
 800de8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800de90:	431a      	orrs	r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a1b      	ldr	r3, [r3, #32]
 800de96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de9a:	ea42 0103 	orr.w	r1, r2, r3
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dea2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	430a      	orrs	r2, r1
 800deac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	699b      	ldr	r3, [r3, #24]
 800deb2:	0c1b      	lsrs	r3, r3, #16
 800deb4:	f003 0204 	and.w	r2, r3, #4
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800debc:	f003 0310 	and.w	r3, r3, #16
 800dec0:	431a      	orrs	r2, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dec6:	f003 0308 	and.w	r3, r3, #8
 800deca:	431a      	orrs	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ded4:	ea42 0103 	orr.w	r1, r2, r3
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	430a      	orrs	r2, r1
 800dee4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	69da      	ldr	r2, [r3, #28]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800def4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2200      	movs	r2, #0
 800defa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2201      	movs	r2, #1
 800df00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800df04:	2300      	movs	r3, #0
}
 800df06:	4618      	mov	r0, r3
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b082      	sub	sp, #8
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d101      	bne.n	800df20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800df1c:	2301      	movs	r3, #1
 800df1e:	e049      	b.n	800dfb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df26:	b2db      	uxtb	r3, r3
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d106      	bne.n	800df3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7f6 fe93 	bl	8004c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2202      	movs	r2, #2
 800df3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	3304      	adds	r3, #4
 800df4a:	4619      	mov	r1, r3
 800df4c:	4610      	mov	r0, r2
 800df4e:	f000 fc11 	bl	800e774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2201      	movs	r2, #1
 800df56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2201      	movs	r2, #1
 800df5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2201      	movs	r2, #1
 800df66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2201      	movs	r2, #1
 800df6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2201      	movs	r2, #1
 800df76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2201      	movs	r2, #1
 800df7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2201      	movs	r2, #1
 800df86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2201      	movs	r2, #1
 800df8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2201      	movs	r2, #1
 800df96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2201      	movs	r2, #1
 800df9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2201      	movs	r2, #1
 800dfae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dfb2:	2300      	movs	r3, #0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b085      	sub	sp, #20
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d001      	beq.n	800dfd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	e054      	b.n	800e07e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2202      	movs	r2, #2
 800dfd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	68da      	ldr	r2, [r3, #12]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f042 0201 	orr.w	r2, r2, #1
 800dfea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a26      	ldr	r2, [pc, #152]	@ (800e08c <HAL_TIM_Base_Start_IT+0xd0>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d022      	beq.n	800e03c <HAL_TIM_Base_Start_IT+0x80>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dffe:	d01d      	beq.n	800e03c <HAL_TIM_Base_Start_IT+0x80>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4a22      	ldr	r2, [pc, #136]	@ (800e090 <HAL_TIM_Base_Start_IT+0xd4>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d018      	beq.n	800e03c <HAL_TIM_Base_Start_IT+0x80>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4a21      	ldr	r2, [pc, #132]	@ (800e094 <HAL_TIM_Base_Start_IT+0xd8>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d013      	beq.n	800e03c <HAL_TIM_Base_Start_IT+0x80>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4a1f      	ldr	r2, [pc, #124]	@ (800e098 <HAL_TIM_Base_Start_IT+0xdc>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d00e      	beq.n	800e03c <HAL_TIM_Base_Start_IT+0x80>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4a1e      	ldr	r2, [pc, #120]	@ (800e09c <HAL_TIM_Base_Start_IT+0xe0>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d009      	beq.n	800e03c <HAL_TIM_Base_Start_IT+0x80>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a1c      	ldr	r2, [pc, #112]	@ (800e0a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d004      	beq.n	800e03c <HAL_TIM_Base_Start_IT+0x80>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4a1b      	ldr	r2, [pc, #108]	@ (800e0a4 <HAL_TIM_Base_Start_IT+0xe8>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d115      	bne.n	800e068 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	689a      	ldr	r2, [r3, #8]
 800e042:	4b19      	ldr	r3, [pc, #100]	@ (800e0a8 <HAL_TIM_Base_Start_IT+0xec>)
 800e044:	4013      	ands	r3, r2
 800e046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b06      	cmp	r3, #6
 800e04c:	d015      	beq.n	800e07a <HAL_TIM_Base_Start_IT+0xbe>
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e054:	d011      	beq.n	800e07a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f042 0201 	orr.w	r2, r2, #1
 800e064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e066:	e008      	b.n	800e07a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f042 0201 	orr.w	r2, r2, #1
 800e076:	601a      	str	r2, [r3, #0]
 800e078:	e000      	b.n	800e07c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e07a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3714      	adds	r7, #20
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	40010000 	.word	0x40010000
 800e090:	40000400 	.word	0x40000400
 800e094:	40000800 	.word	0x40000800
 800e098:	40000c00 	.word	0x40000c00
 800e09c:	40010400 	.word	0x40010400
 800e0a0:	40014000 	.word	0x40014000
 800e0a4:	40001800 	.word	0x40001800
 800e0a8:	00010007 	.word	0x00010007

0800e0ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d101      	bne.n	800e0be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e049      	b.n	800e152 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d106      	bne.n	800e0d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7f6 fe32 	bl	8004d3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2202      	movs	r2, #2
 800e0dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4610      	mov	r0, r2
 800e0ec:	f000 fb42 	bl	800e774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2201      	movs	r2, #1
 800e104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2201      	movs	r2, #1
 800e10c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2201      	movs	r2, #1
 800e114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2201      	movs	r2, #1
 800e11c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2201      	movs	r2, #1
 800e12c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2201      	movs	r2, #1
 800e13c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2201      	movs	r2, #1
 800e144:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2201      	movs	r2, #1
 800e14c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3708      	adds	r7, #8
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b084      	sub	sp, #16
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	691b      	ldr	r3, [r3, #16]
 800e170:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	f003 0302 	and.w	r3, r3, #2
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d020      	beq.n	800e1be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f003 0302 	and.w	r3, r3, #2
 800e182:	2b00      	cmp	r3, #0
 800e184:	d01b      	beq.n	800e1be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f06f 0202 	mvn.w	r2, #2
 800e18e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	699b      	ldr	r3, [r3, #24]
 800e19c:	f003 0303 	and.w	r3, r3, #3
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d003      	beq.n	800e1ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 fac7 	bl	800e738 <HAL_TIM_IC_CaptureCallback>
 800e1aa:	e005      	b.n	800e1b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 fab9 	bl	800e724 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 faca 	bl	800e74c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	f003 0304 	and.w	r3, r3, #4
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d020      	beq.n	800e20a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f003 0304 	and.w	r3, r3, #4
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d01b      	beq.n	800e20a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f06f 0204 	mvn.w	r2, #4
 800e1da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2202      	movs	r2, #2
 800e1e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	699b      	ldr	r3, [r3, #24]
 800e1e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d003      	beq.n	800e1f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f000 faa1 	bl	800e738 <HAL_TIM_IC_CaptureCallback>
 800e1f6:	e005      	b.n	800e204 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f000 fa93 	bl	800e724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 faa4 	bl	800e74c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2200      	movs	r2, #0
 800e208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	f003 0308 	and.w	r3, r3, #8
 800e210:	2b00      	cmp	r3, #0
 800e212:	d020      	beq.n	800e256 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f003 0308 	and.w	r3, r3, #8
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d01b      	beq.n	800e256 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f06f 0208 	mvn.w	r2, #8
 800e226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2204      	movs	r2, #4
 800e22c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	69db      	ldr	r3, [r3, #28]
 800e234:	f003 0303 	and.w	r3, r3, #3
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d003      	beq.n	800e244 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f000 fa7b 	bl	800e738 <HAL_TIM_IC_CaptureCallback>
 800e242:	e005      	b.n	800e250 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 fa6d 	bl	800e724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 fa7e 	bl	800e74c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	f003 0310 	and.w	r3, r3, #16
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d020      	beq.n	800e2a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f003 0310 	and.w	r3, r3, #16
 800e266:	2b00      	cmp	r3, #0
 800e268:	d01b      	beq.n	800e2a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f06f 0210 	mvn.w	r2, #16
 800e272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2208      	movs	r2, #8
 800e278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	69db      	ldr	r3, [r3, #28]
 800e280:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e284:	2b00      	cmp	r3, #0
 800e286:	d003      	beq.n	800e290 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 fa55 	bl	800e738 <HAL_TIM_IC_CaptureCallback>
 800e28e:	e005      	b.n	800e29c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 fa47 	bl	800e724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 fa58 	bl	800e74c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	f003 0301 	and.w	r3, r3, #1
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00c      	beq.n	800e2c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f003 0301 	and.w	r3, r3, #1
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d007      	beq.n	800e2c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f06f 0201 	mvn.w	r2, #1
 800e2be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7f5 fed5 	bl	8004070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d104      	bne.n	800e2da <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00c      	beq.n	800e2f4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d007      	beq.n	800e2f4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e2ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 fef4 	bl	800f0dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00c      	beq.n	800e318 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e304:	2b00      	cmp	r3, #0
 800e306:	d007      	beq.n	800e318 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 feec 	bl	800f0f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00c      	beq.n	800e33c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d007      	beq.n	800e33c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fa12 	bl	800e760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	f003 0320 	and.w	r3, r3, #32
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00c      	beq.n	800e360 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f003 0320 	and.w	r3, r3, #32
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d007      	beq.n	800e360 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f06f 0220 	mvn.w	r2, #32
 800e358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 feb4 	bl	800f0c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e360:	bf00      	nop
 800e362:	3710      	adds	r7, #16
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e374:	2300      	movs	r3, #0
 800e376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d101      	bne.n	800e386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e382:	2302      	movs	r3, #2
 800e384:	e0ff      	b.n	800e586 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2201      	movs	r2, #1
 800e38a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2b14      	cmp	r3, #20
 800e392:	f200 80f0 	bhi.w	800e576 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e396:	a201      	add	r2, pc, #4	@ (adr r2, 800e39c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e39c:	0800e3f1 	.word	0x0800e3f1
 800e3a0:	0800e577 	.word	0x0800e577
 800e3a4:	0800e577 	.word	0x0800e577
 800e3a8:	0800e577 	.word	0x0800e577
 800e3ac:	0800e431 	.word	0x0800e431
 800e3b0:	0800e577 	.word	0x0800e577
 800e3b4:	0800e577 	.word	0x0800e577
 800e3b8:	0800e577 	.word	0x0800e577
 800e3bc:	0800e473 	.word	0x0800e473
 800e3c0:	0800e577 	.word	0x0800e577
 800e3c4:	0800e577 	.word	0x0800e577
 800e3c8:	0800e577 	.word	0x0800e577
 800e3cc:	0800e4b3 	.word	0x0800e4b3
 800e3d0:	0800e577 	.word	0x0800e577
 800e3d4:	0800e577 	.word	0x0800e577
 800e3d8:	0800e577 	.word	0x0800e577
 800e3dc:	0800e4f5 	.word	0x0800e4f5
 800e3e0:	0800e577 	.word	0x0800e577
 800e3e4:	0800e577 	.word	0x0800e577
 800e3e8:	0800e577 	.word	0x0800e577
 800e3ec:	0800e535 	.word	0x0800e535
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	68b9      	ldr	r1, [r7, #8]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f000 fa62 	bl	800e8c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	699a      	ldr	r2, [r3, #24]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f042 0208 	orr.w	r2, r2, #8
 800e40a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	699a      	ldr	r2, [r3, #24]
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f022 0204 	bic.w	r2, r2, #4
 800e41a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	6999      	ldr	r1, [r3, #24]
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	691a      	ldr	r2, [r3, #16]
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	430a      	orrs	r2, r1
 800e42c:	619a      	str	r2, [r3, #24]
      break;
 800e42e:	e0a5      	b.n	800e57c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68b9      	ldr	r1, [r7, #8]
 800e436:	4618      	mov	r0, r3
 800e438:	f000 fab4 	bl	800e9a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	699a      	ldr	r2, [r3, #24]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e44a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	699a      	ldr	r2, [r3, #24]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e45a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	6999      	ldr	r1, [r3, #24]
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	691b      	ldr	r3, [r3, #16]
 800e466:	021a      	lsls	r2, r3, #8
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	430a      	orrs	r2, r1
 800e46e:	619a      	str	r2, [r3, #24]
      break;
 800e470:	e084      	b.n	800e57c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	68b9      	ldr	r1, [r7, #8]
 800e478:	4618      	mov	r0, r3
 800e47a:	f000 fb0b 	bl	800ea94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	69da      	ldr	r2, [r3, #28]
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f042 0208 	orr.w	r2, r2, #8
 800e48c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	69da      	ldr	r2, [r3, #28]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f022 0204 	bic.w	r2, r2, #4
 800e49c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	69d9      	ldr	r1, [r3, #28]
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	691a      	ldr	r2, [r3, #16]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	430a      	orrs	r2, r1
 800e4ae:	61da      	str	r2, [r3, #28]
      break;
 800e4b0:	e064      	b.n	800e57c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	68b9      	ldr	r1, [r7, #8]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f000 fb61 	bl	800eb80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	69da      	ldr	r2, [r3, #28]
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e4cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	69da      	ldr	r2, [r3, #28]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e4dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	69d9      	ldr	r1, [r3, #28]
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	691b      	ldr	r3, [r3, #16]
 800e4e8:	021a      	lsls	r2, r3, #8
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	430a      	orrs	r2, r1
 800e4f0:	61da      	str	r2, [r3, #28]
      break;
 800e4f2:	e043      	b.n	800e57c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	68b9      	ldr	r1, [r7, #8]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f000 fb98 	bl	800ec30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f042 0208 	orr.w	r2, r2, #8
 800e50e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f022 0204 	bic.w	r2, r2, #4
 800e51e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	691a      	ldr	r2, [r3, #16]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	430a      	orrs	r2, r1
 800e530:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e532:	e023      	b.n	800e57c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	68b9      	ldr	r1, [r7, #8]
 800e53a:	4618      	mov	r0, r3
 800e53c:	f000 fbca 	bl	800ecd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e54e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e55e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	691b      	ldr	r3, [r3, #16]
 800e56a:	021a      	lsls	r2, r3, #8
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	430a      	orrs	r2, r1
 800e572:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e574:	e002      	b.n	800e57c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e576:	2301      	movs	r3, #1
 800e578:	75fb      	strb	r3, [r7, #23]
      break;
 800e57a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2200      	movs	r2, #0
 800e580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e584:	7dfb      	ldrb	r3, [r7, #23]
}
 800e586:	4618      	mov	r0, r3
 800e588:	3718      	adds	r7, #24
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop

0800e590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e59a:	2300      	movs	r3, #0
 800e59c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	d101      	bne.n	800e5ac <HAL_TIM_ConfigClockSource+0x1c>
 800e5a8:	2302      	movs	r3, #2
 800e5aa:	e0b4      	b.n	800e716 <HAL_TIM_ConfigClockSource+0x186>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2202      	movs	r2, #2
 800e5b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	689b      	ldr	r3, [r3, #8]
 800e5c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e5c4:	68ba      	ldr	r2, [r7, #8]
 800e5c6:	4b56      	ldr	r3, [pc, #344]	@ (800e720 <HAL_TIM_ConfigClockSource+0x190>)
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e5d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5e4:	d03e      	beq.n	800e664 <HAL_TIM_ConfigClockSource+0xd4>
 800e5e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5ea:	f200 8087 	bhi.w	800e6fc <HAL_TIM_ConfigClockSource+0x16c>
 800e5ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5f2:	f000 8086 	beq.w	800e702 <HAL_TIM_ConfigClockSource+0x172>
 800e5f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5fa:	d87f      	bhi.n	800e6fc <HAL_TIM_ConfigClockSource+0x16c>
 800e5fc:	2b70      	cmp	r3, #112	@ 0x70
 800e5fe:	d01a      	beq.n	800e636 <HAL_TIM_ConfigClockSource+0xa6>
 800e600:	2b70      	cmp	r3, #112	@ 0x70
 800e602:	d87b      	bhi.n	800e6fc <HAL_TIM_ConfigClockSource+0x16c>
 800e604:	2b60      	cmp	r3, #96	@ 0x60
 800e606:	d050      	beq.n	800e6aa <HAL_TIM_ConfigClockSource+0x11a>
 800e608:	2b60      	cmp	r3, #96	@ 0x60
 800e60a:	d877      	bhi.n	800e6fc <HAL_TIM_ConfigClockSource+0x16c>
 800e60c:	2b50      	cmp	r3, #80	@ 0x50
 800e60e:	d03c      	beq.n	800e68a <HAL_TIM_ConfigClockSource+0xfa>
 800e610:	2b50      	cmp	r3, #80	@ 0x50
 800e612:	d873      	bhi.n	800e6fc <HAL_TIM_ConfigClockSource+0x16c>
 800e614:	2b40      	cmp	r3, #64	@ 0x40
 800e616:	d058      	beq.n	800e6ca <HAL_TIM_ConfigClockSource+0x13a>
 800e618:	2b40      	cmp	r3, #64	@ 0x40
 800e61a:	d86f      	bhi.n	800e6fc <HAL_TIM_ConfigClockSource+0x16c>
 800e61c:	2b30      	cmp	r3, #48	@ 0x30
 800e61e:	d064      	beq.n	800e6ea <HAL_TIM_ConfigClockSource+0x15a>
 800e620:	2b30      	cmp	r3, #48	@ 0x30
 800e622:	d86b      	bhi.n	800e6fc <HAL_TIM_ConfigClockSource+0x16c>
 800e624:	2b20      	cmp	r3, #32
 800e626:	d060      	beq.n	800e6ea <HAL_TIM_ConfigClockSource+0x15a>
 800e628:	2b20      	cmp	r3, #32
 800e62a:	d867      	bhi.n	800e6fc <HAL_TIM_ConfigClockSource+0x16c>
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d05c      	beq.n	800e6ea <HAL_TIM_ConfigClockSource+0x15a>
 800e630:	2b10      	cmp	r3, #16
 800e632:	d05a      	beq.n	800e6ea <HAL_TIM_ConfigClockSource+0x15a>
 800e634:	e062      	b.n	800e6fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e646:	f000 fc13 	bl	800ee70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e658:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	68ba      	ldr	r2, [r7, #8]
 800e660:	609a      	str	r2, [r3, #8]
      break;
 800e662:	e04f      	b.n	800e704 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e674:	f000 fbfc 	bl	800ee70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	689a      	ldr	r2, [r3, #8]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e686:	609a      	str	r2, [r3, #8]
      break;
 800e688:	e03c      	b.n	800e704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e696:	461a      	mov	r2, r3
 800e698:	f000 fb70 	bl	800ed7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2150      	movs	r1, #80	@ 0x50
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f000 fbc9 	bl	800ee3a <TIM_ITRx_SetConfig>
      break;
 800e6a8:	e02c      	b.n	800e704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	f000 fb8f 	bl	800edda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2160      	movs	r1, #96	@ 0x60
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 fbb9 	bl	800ee3a <TIM_ITRx_SetConfig>
      break;
 800e6c8:	e01c      	b.n	800e704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	f000 fb50 	bl	800ed7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2140      	movs	r1, #64	@ 0x40
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 fba9 	bl	800ee3a <TIM_ITRx_SetConfig>
      break;
 800e6e8:	e00c      	b.n	800e704 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	4610      	mov	r0, r2
 800e6f6:	f000 fba0 	bl	800ee3a <TIM_ITRx_SetConfig>
      break;
 800e6fa:	e003      	b.n	800e704 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	73fb      	strb	r3, [r7, #15]
      break;
 800e700:	e000      	b.n	800e704 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e702:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2201      	movs	r2, #1
 800e708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2200      	movs	r2, #0
 800e710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e714:	7bfb      	ldrb	r3, [r7, #15]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	fffeff88 	.word	0xfffeff88

0800e724 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e754:	bf00      	nop
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e768:	bf00      	nop
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e774:	b480      	push	{r7}
 800e776:	b085      	sub	sp, #20
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4a43      	ldr	r2, [pc, #268]	@ (800e894 <TIM_Base_SetConfig+0x120>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d013      	beq.n	800e7b4 <TIM_Base_SetConfig+0x40>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e792:	d00f      	beq.n	800e7b4 <TIM_Base_SetConfig+0x40>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4a40      	ldr	r2, [pc, #256]	@ (800e898 <TIM_Base_SetConfig+0x124>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d00b      	beq.n	800e7b4 <TIM_Base_SetConfig+0x40>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	4a3f      	ldr	r2, [pc, #252]	@ (800e89c <TIM_Base_SetConfig+0x128>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d007      	beq.n	800e7b4 <TIM_Base_SetConfig+0x40>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	4a3e      	ldr	r2, [pc, #248]	@ (800e8a0 <TIM_Base_SetConfig+0x12c>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d003      	beq.n	800e7b4 <TIM_Base_SetConfig+0x40>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4a3d      	ldr	r2, [pc, #244]	@ (800e8a4 <TIM_Base_SetConfig+0x130>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d108      	bne.n	800e7c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4a32      	ldr	r2, [pc, #200]	@ (800e894 <TIM_Base_SetConfig+0x120>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d02b      	beq.n	800e826 <TIM_Base_SetConfig+0xb2>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7d4:	d027      	beq.n	800e826 <TIM_Base_SetConfig+0xb2>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a2f      	ldr	r2, [pc, #188]	@ (800e898 <TIM_Base_SetConfig+0x124>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d023      	beq.n	800e826 <TIM_Base_SetConfig+0xb2>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a2e      	ldr	r2, [pc, #184]	@ (800e89c <TIM_Base_SetConfig+0x128>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d01f      	beq.n	800e826 <TIM_Base_SetConfig+0xb2>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4a2d      	ldr	r2, [pc, #180]	@ (800e8a0 <TIM_Base_SetConfig+0x12c>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d01b      	beq.n	800e826 <TIM_Base_SetConfig+0xb2>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4a2c      	ldr	r2, [pc, #176]	@ (800e8a4 <TIM_Base_SetConfig+0x130>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d017      	beq.n	800e826 <TIM_Base_SetConfig+0xb2>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	4a2b      	ldr	r2, [pc, #172]	@ (800e8a8 <TIM_Base_SetConfig+0x134>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d013      	beq.n	800e826 <TIM_Base_SetConfig+0xb2>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	4a2a      	ldr	r2, [pc, #168]	@ (800e8ac <TIM_Base_SetConfig+0x138>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d00f      	beq.n	800e826 <TIM_Base_SetConfig+0xb2>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4a29      	ldr	r2, [pc, #164]	@ (800e8b0 <TIM_Base_SetConfig+0x13c>)
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d00b      	beq.n	800e826 <TIM_Base_SetConfig+0xb2>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4a28      	ldr	r2, [pc, #160]	@ (800e8b4 <TIM_Base_SetConfig+0x140>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d007      	beq.n	800e826 <TIM_Base_SetConfig+0xb2>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	4a27      	ldr	r2, [pc, #156]	@ (800e8b8 <TIM_Base_SetConfig+0x144>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d003      	beq.n	800e826 <TIM_Base_SetConfig+0xb2>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4a26      	ldr	r2, [pc, #152]	@ (800e8bc <TIM_Base_SetConfig+0x148>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d108      	bne.n	800e838 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e82c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	4313      	orrs	r3, r2
 800e836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	695b      	ldr	r3, [r3, #20]
 800e842:	4313      	orrs	r3, r2
 800e844:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	689a      	ldr	r2, [r3, #8]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4a0e      	ldr	r2, [pc, #56]	@ (800e894 <TIM_Base_SetConfig+0x120>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d003      	beq.n	800e866 <TIM_Base_SetConfig+0xf2>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4a10      	ldr	r2, [pc, #64]	@ (800e8a4 <TIM_Base_SetConfig+0x130>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d103      	bne.n	800e86e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	691a      	ldr	r2, [r3, #16]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f043 0204 	orr.w	r2, r3, #4
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2201      	movs	r2, #1
 800e87e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	601a      	str	r2, [r3, #0]
}
 800e886:	bf00      	nop
 800e888:	3714      	adds	r7, #20
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop
 800e894:	40010000 	.word	0x40010000
 800e898:	40000400 	.word	0x40000400
 800e89c:	40000800 	.word	0x40000800
 800e8a0:	40000c00 	.word	0x40000c00
 800e8a4:	40010400 	.word	0x40010400
 800e8a8:	40014000 	.word	0x40014000
 800e8ac:	40014400 	.word	0x40014400
 800e8b0:	40014800 	.word	0x40014800
 800e8b4:	40001800 	.word	0x40001800
 800e8b8:	40001c00 	.word	0x40001c00
 800e8bc:	40002000 	.word	0x40002000

0800e8c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6a1b      	ldr	r3, [r3, #32]
 800e8ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6a1b      	ldr	r3, [r3, #32]
 800e8d4:	f023 0201 	bic.w	r2, r3, #1
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	699b      	ldr	r3, [r3, #24]
 800e8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	4b2b      	ldr	r3, [pc, #172]	@ (800e998 <TIM_OC1_SetConfig+0xd8>)
 800e8ec:	4013      	ands	r3, r2
 800e8ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f023 0303 	bic.w	r3, r3, #3
 800e8f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	68fa      	ldr	r2, [r7, #12]
 800e8fe:	4313      	orrs	r3, r2
 800e900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	f023 0302 	bic.w	r3, r3, #2
 800e908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	697a      	ldr	r2, [r7, #20]
 800e910:	4313      	orrs	r3, r2
 800e912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	4a21      	ldr	r2, [pc, #132]	@ (800e99c <TIM_OC1_SetConfig+0xdc>)
 800e918:	4293      	cmp	r3, r2
 800e91a:	d003      	beq.n	800e924 <TIM_OC1_SetConfig+0x64>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	4a20      	ldr	r2, [pc, #128]	@ (800e9a0 <TIM_OC1_SetConfig+0xe0>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d10c      	bne.n	800e93e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	f023 0308 	bic.w	r3, r3, #8
 800e92a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	697a      	ldr	r2, [r7, #20]
 800e932:	4313      	orrs	r3, r2
 800e934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	f023 0304 	bic.w	r3, r3, #4
 800e93c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4a16      	ldr	r2, [pc, #88]	@ (800e99c <TIM_OC1_SetConfig+0xdc>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d003      	beq.n	800e94e <TIM_OC1_SetConfig+0x8e>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4a15      	ldr	r2, [pc, #84]	@ (800e9a0 <TIM_OC1_SetConfig+0xe0>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d111      	bne.n	800e972 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e95c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	695b      	ldr	r3, [r3, #20]
 800e962:	693a      	ldr	r2, [r7, #16]
 800e964:	4313      	orrs	r3, r2
 800e966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	699b      	ldr	r3, [r3, #24]
 800e96c:	693a      	ldr	r2, [r7, #16]
 800e96e:	4313      	orrs	r3, r2
 800e970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	693a      	ldr	r2, [r7, #16]
 800e976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	685a      	ldr	r2, [r3, #4]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	697a      	ldr	r2, [r7, #20]
 800e98a:	621a      	str	r2, [r3, #32]
}
 800e98c:	bf00      	nop
 800e98e:	371c      	adds	r7, #28
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr
 800e998:	fffeff8f 	.word	0xfffeff8f
 800e99c:	40010000 	.word	0x40010000
 800e9a0:	40010400 	.word	0x40010400

0800e9a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b087      	sub	sp, #28
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6a1b      	ldr	r3, [r3, #32]
 800e9b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6a1b      	ldr	r3, [r3, #32]
 800e9b8:	f023 0210 	bic.w	r2, r3, #16
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	699b      	ldr	r3, [r3, #24]
 800e9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e9cc:	68fa      	ldr	r2, [r7, #12]
 800e9ce:	4b2e      	ldr	r3, [pc, #184]	@ (800ea88 <TIM_OC2_SetConfig+0xe4>)
 800e9d0:	4013      	ands	r3, r2
 800e9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	021b      	lsls	r3, r3, #8
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	4313      	orrs	r3, r2
 800e9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	f023 0320 	bic.w	r3, r3, #32
 800e9ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	689b      	ldr	r3, [r3, #8]
 800e9f4:	011b      	lsls	r3, r3, #4
 800e9f6:	697a      	ldr	r2, [r7, #20]
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	4a23      	ldr	r2, [pc, #140]	@ (800ea8c <TIM_OC2_SetConfig+0xe8>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d003      	beq.n	800ea0c <TIM_OC2_SetConfig+0x68>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	4a22      	ldr	r2, [pc, #136]	@ (800ea90 <TIM_OC2_SetConfig+0xec>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d10d      	bne.n	800ea28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	011b      	lsls	r3, r3, #4
 800ea1a:	697a      	ldr	r2, [r7, #20]
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4a18      	ldr	r2, [pc, #96]	@ (800ea8c <TIM_OC2_SetConfig+0xe8>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d003      	beq.n	800ea38 <TIM_OC2_SetConfig+0x94>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	4a17      	ldr	r2, [pc, #92]	@ (800ea90 <TIM_OC2_SetConfig+0xec>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d113      	bne.n	800ea60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ea3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ea46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	695b      	ldr	r3, [r3, #20]
 800ea4c:	009b      	lsls	r3, r3, #2
 800ea4e:	693a      	ldr	r2, [r7, #16]
 800ea50:	4313      	orrs	r3, r2
 800ea52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	699b      	ldr	r3, [r3, #24]
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	693a      	ldr	r2, [r7, #16]
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	693a      	ldr	r2, [r7, #16]
 800ea64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	685a      	ldr	r2, [r3, #4]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	697a      	ldr	r2, [r7, #20]
 800ea78:	621a      	str	r2, [r3, #32]
}
 800ea7a:	bf00      	nop
 800ea7c:	371c      	adds	r7, #28
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea84:	4770      	bx	lr
 800ea86:	bf00      	nop
 800ea88:	feff8fff 	.word	0xfeff8fff
 800ea8c:	40010000 	.word	0x40010000
 800ea90:	40010400 	.word	0x40010400

0800ea94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b087      	sub	sp, #28
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a1b      	ldr	r3, [r3, #32]
 800eaa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6a1b      	ldr	r3, [r3, #32]
 800eaa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	69db      	ldr	r3, [r3, #28]
 800eaba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	4b2d      	ldr	r3, [pc, #180]	@ (800eb74 <TIM_OC3_SetConfig+0xe0>)
 800eac0:	4013      	ands	r3, r2
 800eac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f023 0303 	bic.w	r3, r3, #3
 800eaca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	4313      	orrs	r3, r2
 800ead4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eadc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	021b      	lsls	r3, r3, #8
 800eae4:	697a      	ldr	r2, [r7, #20]
 800eae6:	4313      	orrs	r3, r2
 800eae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	4a22      	ldr	r2, [pc, #136]	@ (800eb78 <TIM_OC3_SetConfig+0xe4>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d003      	beq.n	800eafa <TIM_OC3_SetConfig+0x66>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	4a21      	ldr	r2, [pc, #132]	@ (800eb7c <TIM_OC3_SetConfig+0xe8>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d10d      	bne.n	800eb16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	021b      	lsls	r3, r3, #8
 800eb08:	697a      	ldr	r2, [r7, #20]
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eb14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4a17      	ldr	r2, [pc, #92]	@ (800eb78 <TIM_OC3_SetConfig+0xe4>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d003      	beq.n	800eb26 <TIM_OC3_SetConfig+0x92>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4a16      	ldr	r2, [pc, #88]	@ (800eb7c <TIM_OC3_SetConfig+0xe8>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d113      	bne.n	800eb4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eb34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	695b      	ldr	r3, [r3, #20]
 800eb3a:	011b      	lsls	r3, r3, #4
 800eb3c:	693a      	ldr	r2, [r7, #16]
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	699b      	ldr	r3, [r3, #24]
 800eb46:	011b      	lsls	r3, r3, #4
 800eb48:	693a      	ldr	r2, [r7, #16]
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	693a      	ldr	r2, [r7, #16]
 800eb52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	685a      	ldr	r2, [r3, #4]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	697a      	ldr	r2, [r7, #20]
 800eb66:	621a      	str	r2, [r3, #32]
}
 800eb68:	bf00      	nop
 800eb6a:	371c      	adds	r7, #28
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr
 800eb74:	fffeff8f 	.word	0xfffeff8f
 800eb78:	40010000 	.word	0x40010000
 800eb7c:	40010400 	.word	0x40010400

0800eb80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b087      	sub	sp, #28
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6a1b      	ldr	r3, [r3, #32]
 800eb8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6a1b      	ldr	r3, [r3, #32]
 800eb94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	69db      	ldr	r3, [r3, #28]
 800eba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	4b1e      	ldr	r3, [pc, #120]	@ (800ec24 <TIM_OC4_SetConfig+0xa4>)
 800ebac:	4013      	ands	r3, r2
 800ebae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ebb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	021b      	lsls	r3, r3, #8
 800ebbe:	68fa      	ldr	r2, [r7, #12]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ebca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	031b      	lsls	r3, r3, #12
 800ebd2:	693a      	ldr	r2, [r7, #16]
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	4a13      	ldr	r2, [pc, #76]	@ (800ec28 <TIM_OC4_SetConfig+0xa8>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d003      	beq.n	800ebe8 <TIM_OC4_SetConfig+0x68>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4a12      	ldr	r2, [pc, #72]	@ (800ec2c <TIM_OC4_SetConfig+0xac>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d109      	bne.n	800ebfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ebee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	695b      	ldr	r3, [r3, #20]
 800ebf4:	019b      	lsls	r3, r3, #6
 800ebf6:	697a      	ldr	r2, [r7, #20]
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	697a      	ldr	r2, [r7, #20]
 800ec00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	685a      	ldr	r2, [r3, #4]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	693a      	ldr	r2, [r7, #16]
 800ec14:	621a      	str	r2, [r3, #32]
}
 800ec16:	bf00      	nop
 800ec18:	371c      	adds	r7, #28
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr
 800ec22:	bf00      	nop
 800ec24:	feff8fff 	.word	0xfeff8fff
 800ec28:	40010000 	.word	0x40010000
 800ec2c:	40010400 	.word	0x40010400

0800ec30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b087      	sub	sp, #28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6a1b      	ldr	r3, [r3, #32]
 800ec3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6a1b      	ldr	r3, [r3, #32]
 800ec44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ec58:	68fa      	ldr	r2, [r7, #12]
 800ec5a:	4b1b      	ldr	r3, [pc, #108]	@ (800ecc8 <TIM_OC5_SetConfig+0x98>)
 800ec5c:	4013      	ands	r3, r2
 800ec5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	4313      	orrs	r3, r2
 800ec68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ec70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	041b      	lsls	r3, r3, #16
 800ec78:	693a      	ldr	r2, [r7, #16]
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	4a12      	ldr	r2, [pc, #72]	@ (800eccc <TIM_OC5_SetConfig+0x9c>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d003      	beq.n	800ec8e <TIM_OC5_SetConfig+0x5e>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	4a11      	ldr	r2, [pc, #68]	@ (800ecd0 <TIM_OC5_SetConfig+0xa0>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d109      	bne.n	800eca2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ec94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	695b      	ldr	r3, [r3, #20]
 800ec9a:	021b      	lsls	r3, r3, #8
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	697a      	ldr	r2, [r7, #20]
 800eca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	68fa      	ldr	r2, [r7, #12]
 800ecac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	685a      	ldr	r2, [r3, #4]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	693a      	ldr	r2, [r7, #16]
 800ecba:	621a      	str	r2, [r3, #32]
}
 800ecbc:	bf00      	nop
 800ecbe:	371c      	adds	r7, #28
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr
 800ecc8:	fffeff8f 	.word	0xfffeff8f
 800eccc:	40010000 	.word	0x40010000
 800ecd0:	40010400 	.word	0x40010400

0800ecd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b087      	sub	sp, #28
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6a1b      	ldr	r3, [r3, #32]
 800ece2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6a1b      	ldr	r3, [r3, #32]
 800ece8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ecfc:	68fa      	ldr	r2, [r7, #12]
 800ecfe:	4b1c      	ldr	r3, [pc, #112]	@ (800ed70 <TIM_OC6_SetConfig+0x9c>)
 800ed00:	4013      	ands	r3, r2
 800ed02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	021b      	lsls	r3, r3, #8
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ed16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	051b      	lsls	r3, r3, #20
 800ed1e:	693a      	ldr	r2, [r7, #16]
 800ed20:	4313      	orrs	r3, r2
 800ed22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4a13      	ldr	r2, [pc, #76]	@ (800ed74 <TIM_OC6_SetConfig+0xa0>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d003      	beq.n	800ed34 <TIM_OC6_SetConfig+0x60>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4a12      	ldr	r2, [pc, #72]	@ (800ed78 <TIM_OC6_SetConfig+0xa4>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d109      	bne.n	800ed48 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ed3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	695b      	ldr	r3, [r3, #20]
 800ed40:	029b      	lsls	r3, r3, #10
 800ed42:	697a      	ldr	r2, [r7, #20]
 800ed44:	4313      	orrs	r3, r2
 800ed46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	697a      	ldr	r2, [r7, #20]
 800ed4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	68fa      	ldr	r2, [r7, #12]
 800ed52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	685a      	ldr	r2, [r3, #4]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	693a      	ldr	r2, [r7, #16]
 800ed60:	621a      	str	r2, [r3, #32]
}
 800ed62:	bf00      	nop
 800ed64:	371c      	adds	r7, #28
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop
 800ed70:	feff8fff 	.word	0xfeff8fff
 800ed74:	40010000 	.word	0x40010000
 800ed78:	40010400 	.word	0x40010400

0800ed7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b087      	sub	sp, #28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6a1b      	ldr	r3, [r3, #32]
 800ed8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	6a1b      	ldr	r3, [r3, #32]
 800ed92:	f023 0201 	bic.w	r2, r3, #1
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	699b      	ldr	r3, [r3, #24]
 800ed9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800eda6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	011b      	lsls	r3, r3, #4
 800edac:	693a      	ldr	r2, [r7, #16]
 800edae:	4313      	orrs	r3, r2
 800edb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	f023 030a 	bic.w	r3, r3, #10
 800edb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800edba:	697a      	ldr	r2, [r7, #20]
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	4313      	orrs	r3, r2
 800edc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	693a      	ldr	r2, [r7, #16]
 800edc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	697a      	ldr	r2, [r7, #20]
 800edcc:	621a      	str	r2, [r3, #32]
}
 800edce:	bf00      	nop
 800edd0:	371c      	adds	r7, #28
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr

0800edda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800edda:	b480      	push	{r7}
 800eddc:	b087      	sub	sp, #28
 800edde:	af00      	add	r7, sp, #0
 800ede0:	60f8      	str	r0, [r7, #12]
 800ede2:	60b9      	str	r1, [r7, #8]
 800ede4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6a1b      	ldr	r3, [r3, #32]
 800edea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6a1b      	ldr	r3, [r3, #32]
 800edf0:	f023 0210 	bic.w	r2, r3, #16
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	031b      	lsls	r3, r3, #12
 800ee0a:	693a      	ldr	r2, [r7, #16]
 800ee0c:	4313      	orrs	r3, r2
 800ee0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ee16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	011b      	lsls	r3, r3, #4
 800ee1c:	697a      	ldr	r2, [r7, #20]
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	693a      	ldr	r2, [r7, #16]
 800ee26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	621a      	str	r2, [r3, #32]
}
 800ee2e:	bf00      	nop
 800ee30:	371c      	adds	r7, #28
 800ee32:	46bd      	mov	sp, r7
 800ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee38:	4770      	bx	lr

0800ee3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ee3a:	b480      	push	{r7}
 800ee3c:	b085      	sub	sp, #20
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
 800ee42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ee52:	683a      	ldr	r2, [r7, #0]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	4313      	orrs	r3, r2
 800ee58:	f043 0307 	orr.w	r3, r3, #7
 800ee5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	68fa      	ldr	r2, [r7, #12]
 800ee62:	609a      	str	r2, [r3, #8]
}
 800ee64:	bf00      	nop
 800ee66:	3714      	adds	r7, #20
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr

0800ee70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b087      	sub	sp, #28
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	607a      	str	r2, [r7, #4]
 800ee7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ee8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	021a      	lsls	r2, r3, #8
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	431a      	orrs	r2, r3
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	4313      	orrs	r3, r2
 800ee98:	697a      	ldr	r2, [r7, #20]
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	697a      	ldr	r2, [r7, #20]
 800eea2:	609a      	str	r2, [r3, #8]
}
 800eea4:	bf00      	nop
 800eea6:	371c      	adds	r7, #28
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr

0800eeb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b085      	sub	sp, #20
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d101      	bne.n	800eec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eec4:	2302      	movs	r3, #2
 800eec6:	e06d      	b.n	800efa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2202      	movs	r2, #2
 800eed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a30      	ldr	r2, [pc, #192]	@ (800efb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d004      	beq.n	800eefc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4a2f      	ldr	r2, [pc, #188]	@ (800efb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d108      	bne.n	800ef0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ef02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	68fa      	ldr	r2, [r7, #12]
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	4313      	orrs	r3, r2
 800ef1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	68fa      	ldr	r2, [r7, #12]
 800ef26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a20      	ldr	r2, [pc, #128]	@ (800efb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d022      	beq.n	800ef78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef3a:	d01d      	beq.n	800ef78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a1d      	ldr	r2, [pc, #116]	@ (800efb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d018      	beq.n	800ef78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4a1c      	ldr	r2, [pc, #112]	@ (800efbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d013      	beq.n	800ef78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a1a      	ldr	r2, [pc, #104]	@ (800efc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d00e      	beq.n	800ef78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a15      	ldr	r2, [pc, #84]	@ (800efb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d009      	beq.n	800ef78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a16      	ldr	r2, [pc, #88]	@ (800efc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d004      	beq.n	800ef78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a15      	ldr	r2, [pc, #84]	@ (800efc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d10c      	bne.n	800ef92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ef7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	689b      	ldr	r3, [r3, #8]
 800ef84:	68ba      	ldr	r2, [r7, #8]
 800ef86:	4313      	orrs	r3, r2
 800ef88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2201      	movs	r2, #1
 800ef96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800efa2:	2300      	movs	r3, #0
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3714      	adds	r7, #20
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr
 800efb0:	40010000 	.word	0x40010000
 800efb4:	40010400 	.word	0x40010400
 800efb8:	40000400 	.word	0x40000400
 800efbc:	40000800 	.word	0x40000800
 800efc0:	40000c00 	.word	0x40000c00
 800efc4:	40014000 	.word	0x40014000
 800efc8:	40001800 	.word	0x40001800

0800efcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800efcc:	b480      	push	{r7}
 800efce:	b085      	sub	sp, #20
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800efd6:	2300      	movs	r3, #0
 800efd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d101      	bne.n	800efe8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800efe4:	2302      	movs	r3, #2
 800efe6:	e065      	b.n	800f0b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2201      	movs	r2, #1
 800efec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	68db      	ldr	r3, [r3, #12]
 800effa:	4313      	orrs	r3, r2
 800effc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	4313      	orrs	r3, r2
 800f00a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	4313      	orrs	r3, r2
 800f018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4313      	orrs	r3, r2
 800f026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	691b      	ldr	r3, [r3, #16]
 800f032:	4313      	orrs	r3, r2
 800f034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	695b      	ldr	r3, [r3, #20]
 800f040:	4313      	orrs	r3, r2
 800f042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f04e:	4313      	orrs	r3, r2
 800f050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	699b      	ldr	r3, [r3, #24]
 800f05c:	041b      	lsls	r3, r3, #16
 800f05e:	4313      	orrs	r3, r2
 800f060:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4a16      	ldr	r2, [pc, #88]	@ (800f0c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d004      	beq.n	800f076 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4a14      	ldr	r2, [pc, #80]	@ (800f0c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d115      	bne.n	800f0a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f080:	051b      	lsls	r3, r3, #20
 800f082:	4313      	orrs	r3, r2
 800f084:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	69db      	ldr	r3, [r3, #28]
 800f090:	4313      	orrs	r3, r2
 800f092:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	6a1b      	ldr	r3, [r3, #32]
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	68fa      	ldr	r2, [r7, #12]
 800f0a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f0b2:	2300      	movs	r3, #0
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3714      	adds	r7, #20
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr
 800f0c0:	40010000 	.word	0x40010000
 800f0c4:	40010400 	.word	0x40010400

0800f0c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f0d0:	bf00      	nop
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f0e4:	bf00      	nop
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f0f8:	bf00      	nop
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr

0800f104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b082      	sub	sp, #8
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d101      	bne.n	800f116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f112:	2301      	movs	r3, #1
 800f114:	e040      	b.n	800f198 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d106      	bne.n	800f12c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f7f5 fef6 	bl	8004f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2224      	movs	r2, #36	@ 0x24
 800f130:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f022 0201 	bic.w	r2, r2, #1
 800f140:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f146:	2b00      	cmp	r3, #0
 800f148:	d002      	beq.n	800f150 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f000 ffb6 	bl	80100bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fd4f 	bl	800fbf4 <UART_SetConfig>
 800f156:	4603      	mov	r3, r0
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d101      	bne.n	800f160 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800f15c:	2301      	movs	r3, #1
 800f15e:	e01b      	b.n	800f198 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	685a      	ldr	r2, [r3, #4]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f16e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	689a      	ldr	r2, [r3, #8]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f17e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f042 0201 	orr.w	r2, r2, #1
 800f18e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f001 f835 	bl	8010200 <UART_CheckIdleState>
 800f196:	4603      	mov	r3, r0
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3708      	adds	r7, #8
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b08a      	sub	sp, #40	@ 0x28
 800f1a4:	af02      	add	r7, sp, #8
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	603b      	str	r3, [r7, #0]
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f1b4:	2b20      	cmp	r3, #32
 800f1b6:	d177      	bne.n	800f2a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d002      	beq.n	800f1c4 <HAL_UART_Transmit+0x24>
 800f1be:	88fb      	ldrh	r3, [r7, #6]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d101      	bne.n	800f1c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	e070      	b.n	800f2aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2221      	movs	r2, #33	@ 0x21
 800f1d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f1d6:	f7f7 f8af 	bl	8006338 <HAL_GetTick>
 800f1da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	88fa      	ldrh	r2, [r7, #6]
 800f1e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	88fa      	ldrh	r2, [r7, #6]
 800f1e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	689b      	ldr	r3, [r3, #8]
 800f1f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f1f4:	d108      	bne.n	800f208 <HAL_UART_Transmit+0x68>
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	691b      	ldr	r3, [r3, #16]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d104      	bne.n	800f208 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f1fe:	2300      	movs	r3, #0
 800f200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	61bb      	str	r3, [r7, #24]
 800f206:	e003      	b.n	800f210 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f20c:	2300      	movs	r3, #0
 800f20e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f210:	e02f      	b.n	800f272 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	9300      	str	r3, [sp, #0]
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	2200      	movs	r2, #0
 800f21a:	2180      	movs	r1, #128	@ 0x80
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f001 f846 	bl	80102ae <UART_WaitOnFlagUntilTimeout>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d004      	beq.n	800f232 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2220      	movs	r2, #32
 800f22c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f22e:	2303      	movs	r3, #3
 800f230:	e03b      	b.n	800f2aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800f232:	69fb      	ldr	r3, [r7, #28]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d10b      	bne.n	800f250 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	881b      	ldrh	r3, [r3, #0]
 800f23c:	461a      	mov	r2, r3
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f246:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f248:	69bb      	ldr	r3, [r7, #24]
 800f24a:	3302      	adds	r3, #2
 800f24c:	61bb      	str	r3, [r7, #24]
 800f24e:	e007      	b.n	800f260 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	781a      	ldrb	r2, [r3, #0]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	3301      	adds	r3, #1
 800f25e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f266:	b29b      	uxth	r3, r3
 800f268:	3b01      	subs	r3, #1
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f278:	b29b      	uxth	r3, r3
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1c9      	bne.n	800f212 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	2200      	movs	r2, #0
 800f286:	2140      	movs	r1, #64	@ 0x40
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f001 f810 	bl	80102ae <UART_WaitOnFlagUntilTimeout>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d004      	beq.n	800f29e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2220      	movs	r2, #32
 800f298:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800f29a:	2303      	movs	r3, #3
 800f29c:	e005      	b.n	800f2aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2220      	movs	r2, #32
 800f2a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	e000      	b.n	800f2aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800f2a8:	2302      	movs	r3, #2
  }
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3720      	adds	r7, #32
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}

0800f2b2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2b2:	b580      	push	{r7, lr}
 800f2b4:	b08a      	sub	sp, #40	@ 0x28
 800f2b6:	af02      	add	r7, sp, #8
 800f2b8:	60f8      	str	r0, [r7, #12]
 800f2ba:	60b9      	str	r1, [r7, #8]
 800f2bc:	603b      	str	r3, [r7, #0]
 800f2be:	4613      	mov	r3, r2
 800f2c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2c8:	2b20      	cmp	r3, #32
 800f2ca:	f040 80b5 	bne.w	800f438 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d002      	beq.n	800f2da <HAL_UART_Receive+0x28>
 800f2d4:	88fb      	ldrh	r3, [r7, #6]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d101      	bne.n	800f2de <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	e0ad      	b.n	800f43a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2222      	movs	r2, #34	@ 0x22
 800f2ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f2f4:	f7f7 f820 	bl	8006338 <HAL_GetTick>
 800f2f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	88fa      	ldrh	r2, [r7, #6]
 800f2fe:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	88fa      	ldrh	r2, [r7, #6]
 800f306:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f312:	d10e      	bne.n	800f332 <HAL_UART_Receive+0x80>
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	691b      	ldr	r3, [r3, #16]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d105      	bne.n	800f328 <HAL_UART_Receive+0x76>
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f322:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f326:	e02d      	b.n	800f384 <HAL_UART_Receive+0xd2>
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	22ff      	movs	r2, #255	@ 0xff
 800f32c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f330:	e028      	b.n	800f384 <HAL_UART_Receive+0xd2>
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	689b      	ldr	r3, [r3, #8]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d10d      	bne.n	800f356 <HAL_UART_Receive+0xa4>
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	691b      	ldr	r3, [r3, #16]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d104      	bne.n	800f34c <HAL_UART_Receive+0x9a>
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	22ff      	movs	r2, #255	@ 0xff
 800f346:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f34a:	e01b      	b.n	800f384 <HAL_UART_Receive+0xd2>
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	227f      	movs	r2, #127	@ 0x7f
 800f350:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f354:	e016      	b.n	800f384 <HAL_UART_Receive+0xd2>
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f35e:	d10d      	bne.n	800f37c <HAL_UART_Receive+0xca>
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	691b      	ldr	r3, [r3, #16]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d104      	bne.n	800f372 <HAL_UART_Receive+0xc0>
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	227f      	movs	r2, #127	@ 0x7f
 800f36c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f370:	e008      	b.n	800f384 <HAL_UART_Receive+0xd2>
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	223f      	movs	r2, #63	@ 0x3f
 800f376:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f37a:	e003      	b.n	800f384 <HAL_UART_Receive+0xd2>
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2200      	movs	r2, #0
 800f380:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f38a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	689b      	ldr	r3, [r3, #8]
 800f390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f394:	d108      	bne.n	800f3a8 <HAL_UART_Receive+0xf6>
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	691b      	ldr	r3, [r3, #16]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d104      	bne.n	800f3a8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	61bb      	str	r3, [r7, #24]
 800f3a6:	e003      	b.n	800f3b0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f3b0:	e036      	b.n	800f420 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	9300      	str	r3, [sp, #0]
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	2120      	movs	r1, #32
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f000 ff76 	bl	80102ae <UART_WaitOnFlagUntilTimeout>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d005      	beq.n	800f3d4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2220      	movs	r2, #32
 800f3cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800f3d0:	2303      	movs	r3, #3
 800f3d2:	e032      	b.n	800f43a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f3d4:	69fb      	ldr	r3, [r7, #28]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d10c      	bne.n	800f3f4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	8a7b      	ldrh	r3, [r7, #18]
 800f3e4:	4013      	ands	r3, r2
 800f3e6:	b29a      	uxth	r2, r3
 800f3e8:	69bb      	ldr	r3, [r7, #24]
 800f3ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	3302      	adds	r3, #2
 800f3f0:	61bb      	str	r3, [r7, #24]
 800f3f2:	e00c      	b.n	800f40e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3fa:	b2da      	uxtb	r2, r3
 800f3fc:	8a7b      	ldrh	r3, [r7, #18]
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	4013      	ands	r3, r2
 800f402:	b2da      	uxtb	r2, r3
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	3301      	adds	r3, #1
 800f40c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f414:	b29b      	uxth	r3, r3
 800f416:	3b01      	subs	r3, #1
 800f418:	b29a      	uxth	r2, r3
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f426:	b29b      	uxth	r3, r3
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d1c2      	bne.n	800f3b2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2220      	movs	r2, #32
 800f430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800f434:	2300      	movs	r3, #0
 800f436:	e000      	b.n	800f43a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f438:	2302      	movs	r3, #2
  }
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3720      	adds	r7, #32
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b08a      	sub	sp, #40	@ 0x28
 800f446:	af00      	add	r7, sp, #0
 800f448:	60f8      	str	r0, [r7, #12]
 800f44a:	60b9      	str	r1, [r7, #8]
 800f44c:	4613      	mov	r3, r2
 800f44e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f456:	2b20      	cmp	r3, #32
 800f458:	d132      	bne.n	800f4c0 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d002      	beq.n	800f466 <HAL_UART_Receive_DMA+0x24>
 800f460:	88fb      	ldrh	r3, [r7, #6]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d101      	bne.n	800f46a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	e02b      	b.n	800f4c2 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2200      	movs	r2, #0
 800f46e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d018      	beq.n	800f4b0 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	e853 3f00 	ldrex	r3, [r3]
 800f48a:	613b      	str	r3, [r7, #16]
   return(result);
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f492:	627b      	str	r3, [r7, #36]	@ 0x24
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	461a      	mov	r2, r3
 800f49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f49c:	623b      	str	r3, [r7, #32]
 800f49e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a0:	69f9      	ldr	r1, [r7, #28]
 800f4a2:	6a3a      	ldr	r2, [r7, #32]
 800f4a4:	e841 2300 	strex	r3, r2, [r1]
 800f4a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d1e6      	bne.n	800f47e <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f4b0:	88fb      	ldrh	r3, [r7, #6]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	68b9      	ldr	r1, [r7, #8]
 800f4b6:	68f8      	ldr	r0, [r7, #12]
 800f4b8:	f000 ff66 	bl	8010388 <UART_Start_Receive_DMA>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	e000      	b.n	800f4c2 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f4c0:	2302      	movs	r3, #2
  }
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3728      	adds	r7, #40	@ 0x28
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}

0800f4ca <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f4ca:	b580      	push	{r7, lr}
 800f4cc:	b090      	sub	sp, #64	@ 0x40
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f4de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4ea:	2b80      	cmp	r3, #128	@ 0x80
 800f4ec:	d139      	bne.n	800f562 <HAL_UART_DMAStop+0x98>
 800f4ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4f0:	2b21      	cmp	r3, #33	@ 0x21
 800f4f2:	d136      	bne.n	800f562 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	3308      	adds	r3, #8
 800f4fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4fc:	6a3b      	ldr	r3, [r7, #32]
 800f4fe:	e853 3f00 	ldrex	r3, [r3]
 800f502:	61fb      	str	r3, [r7, #28]
   return(result);
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f50a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	3308      	adds	r3, #8
 800f512:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f514:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f516:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f518:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f51a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f51c:	e841 2300 	strex	r3, r2, [r1]
 800f520:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f524:	2b00      	cmp	r3, #0
 800f526:	d1e5      	bne.n	800f4f4 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d015      	beq.n	800f55c <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f534:	4618      	mov	r0, r3
 800f536:	f7f7 fd81 	bl	800703c <HAL_DMA_Abort>
 800f53a:	4603      	mov	r3, r0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00d      	beq.n	800f55c <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f544:	4618      	mov	r0, r3
 800f546:	f7f7 ff95 	bl	8007474 <HAL_DMA_GetError>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b20      	cmp	r3, #32
 800f54e:	d105      	bne.n	800f55c <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2210      	movs	r2, #16
 800f554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f558:	2303      	movs	r3, #3
 800f55a:	e044      	b.n	800f5e6 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f000 ffb3 	bl	80104c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	689b      	ldr	r3, [r3, #8]
 800f568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f56c:	2b40      	cmp	r3, #64	@ 0x40
 800f56e:	d139      	bne.n	800f5e4 <HAL_UART_DMAStop+0x11a>
 800f570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f572:	2b22      	cmp	r3, #34	@ 0x22
 800f574:	d136      	bne.n	800f5e4 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	3308      	adds	r3, #8
 800f57c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	e853 3f00 	ldrex	r3, [r3]
 800f584:	60bb      	str	r3, [r7, #8]
   return(result);
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f58c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	3308      	adds	r3, #8
 800f594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f596:	61ba      	str	r2, [r7, #24]
 800f598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f59a:	6979      	ldr	r1, [r7, #20]
 800f59c:	69ba      	ldr	r2, [r7, #24]
 800f59e:	e841 2300 	strex	r3, r2, [r1]
 800f5a2:	613b      	str	r3, [r7, #16]
   return(result);
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d1e5      	bne.n	800f576 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d015      	beq.n	800f5de <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7f7 fd40 	bl	800703c <HAL_DMA_Abort>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d00d      	beq.n	800f5de <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7f7 ff54 	bl	8007474 <HAL_DMA_GetError>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b20      	cmp	r3, #32
 800f5d0:	d105      	bne.n	800f5de <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2210      	movs	r2, #16
 800f5d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f5da:	2303      	movs	r3, #3
 800f5dc:	e003      	b.n	800f5e6 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f000 ff98 	bl	8010514 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f5e4:	2300      	movs	r3, #0
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3740      	adds	r7, #64	@ 0x40
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
	...

0800f5f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b0ba      	sub	sp, #232	@ 0xe8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	69db      	ldr	r3, [r3, #28]
 800f5fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	689b      	ldr	r3, [r3, #8]
 800f612:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f616:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f61a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f61e:	4013      	ands	r3, r2
 800f620:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d115      	bne.n	800f658 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f62c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f630:	f003 0320 	and.w	r3, r3, #32
 800f634:	2b00      	cmp	r3, #0
 800f636:	d00f      	beq.n	800f658 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f63c:	f003 0320 	and.w	r3, r3, #32
 800f640:	2b00      	cmp	r3, #0
 800f642:	d009      	beq.n	800f658 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f648:	2b00      	cmp	r3, #0
 800f64a:	f000 82b1 	beq.w	800fbb0 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	4798      	blx	r3
      }
      return;
 800f656:	e2ab      	b.n	800fbb0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	f000 8117 	beq.w	800f890 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f666:	f003 0301 	and.w	r3, r3, #1
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d106      	bne.n	800f67c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f66e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f672:	4b85      	ldr	r3, [pc, #532]	@ (800f888 <HAL_UART_IRQHandler+0x298>)
 800f674:	4013      	ands	r3, r2
 800f676:	2b00      	cmp	r3, #0
 800f678:	f000 810a 	beq.w	800f890 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f67c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f680:	f003 0301 	and.w	r3, r3, #1
 800f684:	2b00      	cmp	r3, #0
 800f686:	d011      	beq.n	800f6ac <HAL_UART_IRQHandler+0xbc>
 800f688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f68c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f690:	2b00      	cmp	r3, #0
 800f692:	d00b      	beq.n	800f6ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2201      	movs	r2, #1
 800f69a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6a2:	f043 0201 	orr.w	r2, r3, #1
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6b0:	f003 0302 	and.w	r3, r3, #2
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d011      	beq.n	800f6dc <HAL_UART_IRQHandler+0xec>
 800f6b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6bc:	f003 0301 	and.w	r3, r3, #1
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d00b      	beq.n	800f6dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2202      	movs	r2, #2
 800f6ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6d2:	f043 0204 	orr.w	r2, r3, #4
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6e0:	f003 0304 	and.w	r3, r3, #4
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d011      	beq.n	800f70c <HAL_UART_IRQHandler+0x11c>
 800f6e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6ec:	f003 0301 	and.w	r3, r3, #1
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00b      	beq.n	800f70c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2204      	movs	r2, #4
 800f6fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f702:	f043 0202 	orr.w	r2, r3, #2
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f710:	f003 0308 	and.w	r3, r3, #8
 800f714:	2b00      	cmp	r3, #0
 800f716:	d017      	beq.n	800f748 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f71c:	f003 0320 	and.w	r3, r3, #32
 800f720:	2b00      	cmp	r3, #0
 800f722:	d105      	bne.n	800f730 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f728:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00b      	beq.n	800f748 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2208      	movs	r2, #8
 800f736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f73e:	f043 0208 	orr.w	r2, r3, #8
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f74c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f750:	2b00      	cmp	r3, #0
 800f752:	d012      	beq.n	800f77a <HAL_UART_IRQHandler+0x18a>
 800f754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f758:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00c      	beq.n	800f77a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f770:	f043 0220 	orr.w	r2, r3, #32
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f780:	2b00      	cmp	r3, #0
 800f782:	f000 8217 	beq.w	800fbb4 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f78a:	f003 0320 	and.w	r3, r3, #32
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d00d      	beq.n	800f7ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f796:	f003 0320 	and.w	r3, r3, #32
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d007      	beq.n	800f7ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d003      	beq.n	800f7ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f7b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7c2:	2b40      	cmp	r3, #64	@ 0x40
 800f7c4:	d005      	beq.n	800f7d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f7c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f7ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d04f      	beq.n	800f872 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fe9e 	bl	8010514 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	689b      	ldr	r3, [r3, #8]
 800f7de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7e2:	2b40      	cmp	r3, #64	@ 0x40
 800f7e4:	d141      	bne.n	800f86a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	3308      	adds	r3, #8
 800f7ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f7f4:	e853 3f00 	ldrex	r3, [r3]
 800f7f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f7fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f804:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	3308      	adds	r3, #8
 800f80e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f812:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f81a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f81e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f822:	e841 2300 	strex	r3, r2, [r1]
 800f826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f82a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1d9      	bne.n	800f7e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f836:	2b00      	cmp	r3, #0
 800f838:	d013      	beq.n	800f862 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f83e:	4a13      	ldr	r2, [pc, #76]	@ (800f88c <HAL_UART_IRQHandler+0x29c>)
 800f840:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f846:	4618      	mov	r0, r3
 800f848:	f7f7 fc68 	bl	800711c <HAL_DMA_Abort_IT>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d017      	beq.n	800f882 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f85c:	4610      	mov	r0, r2
 800f85e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f860:	e00f      	b.n	800f882 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f7f6 fbf6 	bl	8006054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f868:	e00b      	b.n	800f882 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f7f6 fbf2 	bl	8006054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f870:	e007      	b.n	800f882 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f7f6 fbee 	bl	8006054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800f880:	e198      	b.n	800fbb4 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f882:	bf00      	nop
    return;
 800f884:	e196      	b.n	800fbb4 <HAL_UART_IRQHandler+0x5c4>
 800f886:	bf00      	nop
 800f888:	04000120 	.word	0x04000120
 800f88c:	0801082b 	.word	0x0801082b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f894:	2b01      	cmp	r3, #1
 800f896:	f040 8166 	bne.w	800fb66 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f89a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f89e:	f003 0310 	and.w	r3, r3, #16
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f000 815f 	beq.w	800fb66 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f8a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8ac:	f003 0310 	and.w	r3, r3, #16
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f000 8158 	beq.w	800fb66 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2210      	movs	r2, #16
 800f8bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	689b      	ldr	r3, [r3, #8]
 800f8c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8c8:	2b40      	cmp	r3, #64	@ 0x40
 800f8ca:	f040 80d0 	bne.w	800fa6e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	685b      	ldr	r3, [r3, #4]
 800f8d6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f8da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f000 80ab 	beq.w	800fa3a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f8ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	f080 80a3 	bcs.w	800fa3a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f8fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f902:	69db      	ldr	r3, [r3, #28]
 800f904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f908:	f000 8086 	beq.w	800fa18 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f914:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f918:	e853 3f00 	ldrex	r3, [r3]
 800f91c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f920:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f928:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	461a      	mov	r2, r3
 800f932:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f936:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f93a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f93e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f942:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f946:	e841 2300 	strex	r3, r2, [r1]
 800f94a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f94e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f952:	2b00      	cmp	r3, #0
 800f954:	d1da      	bne.n	800f90c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	3308      	adds	r3, #8
 800f95c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f95e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f960:	e853 3f00 	ldrex	r3, [r3]
 800f964:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f966:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f968:	f023 0301 	bic.w	r3, r3, #1
 800f96c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	3308      	adds	r3, #8
 800f976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f97a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f97e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f980:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f982:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f986:	e841 2300 	strex	r3, r2, [r1]
 800f98a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f98c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d1e1      	bne.n	800f956 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	3308      	adds	r3, #8
 800f998:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f99a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f99c:	e853 3f00 	ldrex	r3, [r3]
 800f9a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f9a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	3308      	adds	r3, #8
 800f9b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f9b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f9b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f9bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f9be:	e841 2300 	strex	r3, r2, [r1]
 800f9c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f9c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d1e3      	bne.n	800f992 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2220      	movs	r2, #32
 800f9ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9e0:	e853 3f00 	ldrex	r3, [r3]
 800f9e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f9e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9e8:	f023 0310 	bic.w	r3, r3, #16
 800f9ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f9fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f9fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fa00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fa02:	e841 2300 	strex	r3, r2, [r1]
 800fa06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fa08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d1e4      	bne.n	800f9d8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7f7 fb12 	bl	800703c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2202      	movs	r2, #2
 800fa1c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	1ad3      	subs	r3, r2, r3
 800fa2e:	b29b      	uxth	r3, r3
 800fa30:	4619      	mov	r1, r3
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 f8d2 	bl	800fbdc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fa38:	e0be      	b.n	800fbb8 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fa40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fa44:	429a      	cmp	r2, r3
 800fa46:	f040 80b7 	bne.w	800fbb8 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa4e:	69db      	ldr	r3, [r3, #28]
 800fa50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa54:	f040 80b0 	bne.w	800fbb8 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2202      	movs	r2, #2
 800fa5c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fa64:	4619      	mov	r1, r3
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 f8b8 	bl	800fbdc <HAL_UARTEx_RxEventCallback>
      return;
 800fa6c:	e0a4      	b.n	800fbb8 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	1ad3      	subs	r3, r2, r3
 800fa7e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f000 8096 	beq.w	800fbbc <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800fa90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	f000 8091 	beq.w	800fbbc <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa2:	e853 3f00 	ldrex	r3, [r3]
 800faa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800faa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800faae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	461a      	mov	r2, r3
 800fab8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fabc:	647b      	str	r3, [r7, #68]	@ 0x44
 800fabe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fac0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fac4:	e841 2300 	strex	r3, r2, [r1]
 800fac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800faca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800facc:	2b00      	cmp	r3, #0
 800face:	d1e4      	bne.n	800fa9a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	3308      	adds	r3, #8
 800fad6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fada:	e853 3f00 	ldrex	r3, [r3]
 800fade:	623b      	str	r3, [r7, #32]
   return(result);
 800fae0:	6a3b      	ldr	r3, [r7, #32]
 800fae2:	f023 0301 	bic.w	r3, r3, #1
 800fae6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	3308      	adds	r3, #8
 800faf0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800faf4:	633a      	str	r2, [r7, #48]	@ 0x30
 800faf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fafa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fafc:	e841 2300 	strex	r3, r2, [r1]
 800fb00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d1e3      	bne.n	800fad0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2220      	movs	r2, #32
 800fb0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	e853 3f00 	ldrex	r3, [r3]
 800fb28:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f023 0310 	bic.w	r3, r3, #16
 800fb30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	461a      	mov	r2, r3
 800fb3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fb3e:	61fb      	str	r3, [r7, #28]
 800fb40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb42:	69b9      	ldr	r1, [r7, #24]
 800fb44:	69fa      	ldr	r2, [r7, #28]
 800fb46:	e841 2300 	strex	r3, r2, [r1]
 800fb4a:	617b      	str	r3, [r7, #20]
   return(result);
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1e4      	bne.n	800fb1c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2202      	movs	r2, #2
 800fb56:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fb58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 f83c 	bl	800fbdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fb64:	e02a      	b.n	800fbbc <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800fb66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d00e      	beq.n	800fb90 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fb72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d008      	beq.n	800fb90 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d01c      	beq.n	800fbc0 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	4798      	blx	r3
    }
    return;
 800fb8e:	e017      	b.n	800fbc0 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fb90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d012      	beq.n	800fbc2 <HAL_UART_IRQHandler+0x5d2>
 800fb9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d00c      	beq.n	800fbc2 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 fe50 	bl	801084e <UART_EndTransmit_IT>
    return;
 800fbae:	e008      	b.n	800fbc2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800fbb0:	bf00      	nop
 800fbb2:	e006      	b.n	800fbc2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800fbb4:	bf00      	nop
 800fbb6:	e004      	b.n	800fbc2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800fbb8:	bf00      	nop
 800fbba:	e002      	b.n	800fbc2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800fbbc:	bf00      	nop
 800fbbe:	e000      	b.n	800fbc2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800fbc0:	bf00      	nop
  }

}
 800fbc2:	37e8      	adds	r7, #232	@ 0xe8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b083      	sub	sp, #12
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fbd0:	bf00      	nop
 800fbd2:	370c      	adds	r7, #12
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr

0800fbdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fbe8:	bf00      	nop
 800fbea:	370c      	adds	r7, #12
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b088      	sub	sp, #32
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	689a      	ldr	r2, [r3, #8]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	691b      	ldr	r3, [r3, #16]
 800fc08:	431a      	orrs	r2, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	695b      	ldr	r3, [r3, #20]
 800fc0e:	431a      	orrs	r2, r3
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	69db      	ldr	r3, [r3, #28]
 800fc14:	4313      	orrs	r3, r2
 800fc16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	681a      	ldr	r2, [r3, #0]
 800fc1e:	4ba6      	ldr	r3, [pc, #664]	@ (800feb8 <UART_SetConfig+0x2c4>)
 800fc20:	4013      	ands	r3, r2
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	6812      	ldr	r2, [r2, #0]
 800fc26:	6979      	ldr	r1, [r7, #20]
 800fc28:	430b      	orrs	r3, r1
 800fc2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	685b      	ldr	r3, [r3, #4]
 800fc32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	68da      	ldr	r2, [r3, #12]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	430a      	orrs	r2, r1
 800fc40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	699b      	ldr	r3, [r3, #24]
 800fc46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6a1b      	ldr	r3, [r3, #32]
 800fc4c:	697a      	ldr	r2, [r7, #20]
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	697a      	ldr	r2, [r7, #20]
 800fc62:	430a      	orrs	r2, r1
 800fc64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4a94      	ldr	r2, [pc, #592]	@ (800febc <UART_SetConfig+0x2c8>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d120      	bne.n	800fcb2 <UART_SetConfig+0xbe>
 800fc70:	4b93      	ldr	r3, [pc, #588]	@ (800fec0 <UART_SetConfig+0x2cc>)
 800fc72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc76:	f003 0303 	and.w	r3, r3, #3
 800fc7a:	2b03      	cmp	r3, #3
 800fc7c:	d816      	bhi.n	800fcac <UART_SetConfig+0xb8>
 800fc7e:	a201      	add	r2, pc, #4	@ (adr r2, 800fc84 <UART_SetConfig+0x90>)
 800fc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc84:	0800fc95 	.word	0x0800fc95
 800fc88:	0800fca1 	.word	0x0800fca1
 800fc8c:	0800fc9b 	.word	0x0800fc9b
 800fc90:	0800fca7 	.word	0x0800fca7
 800fc94:	2301      	movs	r3, #1
 800fc96:	77fb      	strb	r3, [r7, #31]
 800fc98:	e150      	b.n	800ff3c <UART_SetConfig+0x348>
 800fc9a:	2302      	movs	r3, #2
 800fc9c:	77fb      	strb	r3, [r7, #31]
 800fc9e:	e14d      	b.n	800ff3c <UART_SetConfig+0x348>
 800fca0:	2304      	movs	r3, #4
 800fca2:	77fb      	strb	r3, [r7, #31]
 800fca4:	e14a      	b.n	800ff3c <UART_SetConfig+0x348>
 800fca6:	2308      	movs	r3, #8
 800fca8:	77fb      	strb	r3, [r7, #31]
 800fcaa:	e147      	b.n	800ff3c <UART_SetConfig+0x348>
 800fcac:	2310      	movs	r3, #16
 800fcae:	77fb      	strb	r3, [r7, #31]
 800fcb0:	e144      	b.n	800ff3c <UART_SetConfig+0x348>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	4a83      	ldr	r2, [pc, #524]	@ (800fec4 <UART_SetConfig+0x2d0>)
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d132      	bne.n	800fd22 <UART_SetConfig+0x12e>
 800fcbc:	4b80      	ldr	r3, [pc, #512]	@ (800fec0 <UART_SetConfig+0x2cc>)
 800fcbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcc2:	f003 030c 	and.w	r3, r3, #12
 800fcc6:	2b0c      	cmp	r3, #12
 800fcc8:	d828      	bhi.n	800fd1c <UART_SetConfig+0x128>
 800fcca:	a201      	add	r2, pc, #4	@ (adr r2, 800fcd0 <UART_SetConfig+0xdc>)
 800fccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcd0:	0800fd05 	.word	0x0800fd05
 800fcd4:	0800fd1d 	.word	0x0800fd1d
 800fcd8:	0800fd1d 	.word	0x0800fd1d
 800fcdc:	0800fd1d 	.word	0x0800fd1d
 800fce0:	0800fd11 	.word	0x0800fd11
 800fce4:	0800fd1d 	.word	0x0800fd1d
 800fce8:	0800fd1d 	.word	0x0800fd1d
 800fcec:	0800fd1d 	.word	0x0800fd1d
 800fcf0:	0800fd0b 	.word	0x0800fd0b
 800fcf4:	0800fd1d 	.word	0x0800fd1d
 800fcf8:	0800fd1d 	.word	0x0800fd1d
 800fcfc:	0800fd1d 	.word	0x0800fd1d
 800fd00:	0800fd17 	.word	0x0800fd17
 800fd04:	2300      	movs	r3, #0
 800fd06:	77fb      	strb	r3, [r7, #31]
 800fd08:	e118      	b.n	800ff3c <UART_SetConfig+0x348>
 800fd0a:	2302      	movs	r3, #2
 800fd0c:	77fb      	strb	r3, [r7, #31]
 800fd0e:	e115      	b.n	800ff3c <UART_SetConfig+0x348>
 800fd10:	2304      	movs	r3, #4
 800fd12:	77fb      	strb	r3, [r7, #31]
 800fd14:	e112      	b.n	800ff3c <UART_SetConfig+0x348>
 800fd16:	2308      	movs	r3, #8
 800fd18:	77fb      	strb	r3, [r7, #31]
 800fd1a:	e10f      	b.n	800ff3c <UART_SetConfig+0x348>
 800fd1c:	2310      	movs	r3, #16
 800fd1e:	77fb      	strb	r3, [r7, #31]
 800fd20:	e10c      	b.n	800ff3c <UART_SetConfig+0x348>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	4a68      	ldr	r2, [pc, #416]	@ (800fec8 <UART_SetConfig+0x2d4>)
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d120      	bne.n	800fd6e <UART_SetConfig+0x17a>
 800fd2c:	4b64      	ldr	r3, [pc, #400]	@ (800fec0 <UART_SetConfig+0x2cc>)
 800fd2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd32:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fd36:	2b30      	cmp	r3, #48	@ 0x30
 800fd38:	d013      	beq.n	800fd62 <UART_SetConfig+0x16e>
 800fd3a:	2b30      	cmp	r3, #48	@ 0x30
 800fd3c:	d814      	bhi.n	800fd68 <UART_SetConfig+0x174>
 800fd3e:	2b20      	cmp	r3, #32
 800fd40:	d009      	beq.n	800fd56 <UART_SetConfig+0x162>
 800fd42:	2b20      	cmp	r3, #32
 800fd44:	d810      	bhi.n	800fd68 <UART_SetConfig+0x174>
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d002      	beq.n	800fd50 <UART_SetConfig+0x15c>
 800fd4a:	2b10      	cmp	r3, #16
 800fd4c:	d006      	beq.n	800fd5c <UART_SetConfig+0x168>
 800fd4e:	e00b      	b.n	800fd68 <UART_SetConfig+0x174>
 800fd50:	2300      	movs	r3, #0
 800fd52:	77fb      	strb	r3, [r7, #31]
 800fd54:	e0f2      	b.n	800ff3c <UART_SetConfig+0x348>
 800fd56:	2302      	movs	r3, #2
 800fd58:	77fb      	strb	r3, [r7, #31]
 800fd5a:	e0ef      	b.n	800ff3c <UART_SetConfig+0x348>
 800fd5c:	2304      	movs	r3, #4
 800fd5e:	77fb      	strb	r3, [r7, #31]
 800fd60:	e0ec      	b.n	800ff3c <UART_SetConfig+0x348>
 800fd62:	2308      	movs	r3, #8
 800fd64:	77fb      	strb	r3, [r7, #31]
 800fd66:	e0e9      	b.n	800ff3c <UART_SetConfig+0x348>
 800fd68:	2310      	movs	r3, #16
 800fd6a:	77fb      	strb	r3, [r7, #31]
 800fd6c:	e0e6      	b.n	800ff3c <UART_SetConfig+0x348>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4a56      	ldr	r2, [pc, #344]	@ (800fecc <UART_SetConfig+0x2d8>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d120      	bne.n	800fdba <UART_SetConfig+0x1c6>
 800fd78:	4b51      	ldr	r3, [pc, #324]	@ (800fec0 <UART_SetConfig+0x2cc>)
 800fd7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800fd82:	2bc0      	cmp	r3, #192	@ 0xc0
 800fd84:	d013      	beq.n	800fdae <UART_SetConfig+0x1ba>
 800fd86:	2bc0      	cmp	r3, #192	@ 0xc0
 800fd88:	d814      	bhi.n	800fdb4 <UART_SetConfig+0x1c0>
 800fd8a:	2b80      	cmp	r3, #128	@ 0x80
 800fd8c:	d009      	beq.n	800fda2 <UART_SetConfig+0x1ae>
 800fd8e:	2b80      	cmp	r3, #128	@ 0x80
 800fd90:	d810      	bhi.n	800fdb4 <UART_SetConfig+0x1c0>
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d002      	beq.n	800fd9c <UART_SetConfig+0x1a8>
 800fd96:	2b40      	cmp	r3, #64	@ 0x40
 800fd98:	d006      	beq.n	800fda8 <UART_SetConfig+0x1b4>
 800fd9a:	e00b      	b.n	800fdb4 <UART_SetConfig+0x1c0>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	77fb      	strb	r3, [r7, #31]
 800fda0:	e0cc      	b.n	800ff3c <UART_SetConfig+0x348>
 800fda2:	2302      	movs	r3, #2
 800fda4:	77fb      	strb	r3, [r7, #31]
 800fda6:	e0c9      	b.n	800ff3c <UART_SetConfig+0x348>
 800fda8:	2304      	movs	r3, #4
 800fdaa:	77fb      	strb	r3, [r7, #31]
 800fdac:	e0c6      	b.n	800ff3c <UART_SetConfig+0x348>
 800fdae:	2308      	movs	r3, #8
 800fdb0:	77fb      	strb	r3, [r7, #31]
 800fdb2:	e0c3      	b.n	800ff3c <UART_SetConfig+0x348>
 800fdb4:	2310      	movs	r3, #16
 800fdb6:	77fb      	strb	r3, [r7, #31]
 800fdb8:	e0c0      	b.n	800ff3c <UART_SetConfig+0x348>
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	4a44      	ldr	r2, [pc, #272]	@ (800fed0 <UART_SetConfig+0x2dc>)
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d125      	bne.n	800fe10 <UART_SetConfig+0x21c>
 800fdc4:	4b3e      	ldr	r3, [pc, #248]	@ (800fec0 <UART_SetConfig+0x2cc>)
 800fdc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fdce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fdd2:	d017      	beq.n	800fe04 <UART_SetConfig+0x210>
 800fdd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fdd8:	d817      	bhi.n	800fe0a <UART_SetConfig+0x216>
 800fdda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fdde:	d00b      	beq.n	800fdf8 <UART_SetConfig+0x204>
 800fde0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fde4:	d811      	bhi.n	800fe0a <UART_SetConfig+0x216>
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d003      	beq.n	800fdf2 <UART_SetConfig+0x1fe>
 800fdea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fdee:	d006      	beq.n	800fdfe <UART_SetConfig+0x20a>
 800fdf0:	e00b      	b.n	800fe0a <UART_SetConfig+0x216>
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	77fb      	strb	r3, [r7, #31]
 800fdf6:	e0a1      	b.n	800ff3c <UART_SetConfig+0x348>
 800fdf8:	2302      	movs	r3, #2
 800fdfa:	77fb      	strb	r3, [r7, #31]
 800fdfc:	e09e      	b.n	800ff3c <UART_SetConfig+0x348>
 800fdfe:	2304      	movs	r3, #4
 800fe00:	77fb      	strb	r3, [r7, #31]
 800fe02:	e09b      	b.n	800ff3c <UART_SetConfig+0x348>
 800fe04:	2308      	movs	r3, #8
 800fe06:	77fb      	strb	r3, [r7, #31]
 800fe08:	e098      	b.n	800ff3c <UART_SetConfig+0x348>
 800fe0a:	2310      	movs	r3, #16
 800fe0c:	77fb      	strb	r3, [r7, #31]
 800fe0e:	e095      	b.n	800ff3c <UART_SetConfig+0x348>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	4a2f      	ldr	r2, [pc, #188]	@ (800fed4 <UART_SetConfig+0x2e0>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d125      	bne.n	800fe66 <UART_SetConfig+0x272>
 800fe1a:	4b29      	ldr	r3, [pc, #164]	@ (800fec0 <UART_SetConfig+0x2cc>)
 800fe1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800fe24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fe28:	d017      	beq.n	800fe5a <UART_SetConfig+0x266>
 800fe2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fe2e:	d817      	bhi.n	800fe60 <UART_SetConfig+0x26c>
 800fe30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fe34:	d00b      	beq.n	800fe4e <UART_SetConfig+0x25a>
 800fe36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fe3a:	d811      	bhi.n	800fe60 <UART_SetConfig+0x26c>
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d003      	beq.n	800fe48 <UART_SetConfig+0x254>
 800fe40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fe44:	d006      	beq.n	800fe54 <UART_SetConfig+0x260>
 800fe46:	e00b      	b.n	800fe60 <UART_SetConfig+0x26c>
 800fe48:	2301      	movs	r3, #1
 800fe4a:	77fb      	strb	r3, [r7, #31]
 800fe4c:	e076      	b.n	800ff3c <UART_SetConfig+0x348>
 800fe4e:	2302      	movs	r3, #2
 800fe50:	77fb      	strb	r3, [r7, #31]
 800fe52:	e073      	b.n	800ff3c <UART_SetConfig+0x348>
 800fe54:	2304      	movs	r3, #4
 800fe56:	77fb      	strb	r3, [r7, #31]
 800fe58:	e070      	b.n	800ff3c <UART_SetConfig+0x348>
 800fe5a:	2308      	movs	r3, #8
 800fe5c:	77fb      	strb	r3, [r7, #31]
 800fe5e:	e06d      	b.n	800ff3c <UART_SetConfig+0x348>
 800fe60:	2310      	movs	r3, #16
 800fe62:	77fb      	strb	r3, [r7, #31]
 800fe64:	e06a      	b.n	800ff3c <UART_SetConfig+0x348>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4a1b      	ldr	r2, [pc, #108]	@ (800fed8 <UART_SetConfig+0x2e4>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d138      	bne.n	800fee2 <UART_SetConfig+0x2ee>
 800fe70:	4b13      	ldr	r3, [pc, #76]	@ (800fec0 <UART_SetConfig+0x2cc>)
 800fe72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800fe7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fe7e:	d017      	beq.n	800feb0 <UART_SetConfig+0x2bc>
 800fe80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fe84:	d82a      	bhi.n	800fedc <UART_SetConfig+0x2e8>
 800fe86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fe8a:	d00b      	beq.n	800fea4 <UART_SetConfig+0x2b0>
 800fe8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fe90:	d824      	bhi.n	800fedc <UART_SetConfig+0x2e8>
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d003      	beq.n	800fe9e <UART_SetConfig+0x2aa>
 800fe96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe9a:	d006      	beq.n	800feaa <UART_SetConfig+0x2b6>
 800fe9c:	e01e      	b.n	800fedc <UART_SetConfig+0x2e8>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	77fb      	strb	r3, [r7, #31]
 800fea2:	e04b      	b.n	800ff3c <UART_SetConfig+0x348>
 800fea4:	2302      	movs	r3, #2
 800fea6:	77fb      	strb	r3, [r7, #31]
 800fea8:	e048      	b.n	800ff3c <UART_SetConfig+0x348>
 800feaa:	2304      	movs	r3, #4
 800feac:	77fb      	strb	r3, [r7, #31]
 800feae:	e045      	b.n	800ff3c <UART_SetConfig+0x348>
 800feb0:	2308      	movs	r3, #8
 800feb2:	77fb      	strb	r3, [r7, #31]
 800feb4:	e042      	b.n	800ff3c <UART_SetConfig+0x348>
 800feb6:	bf00      	nop
 800feb8:	efff69f3 	.word	0xefff69f3
 800febc:	40011000 	.word	0x40011000
 800fec0:	40023800 	.word	0x40023800
 800fec4:	40004400 	.word	0x40004400
 800fec8:	40004800 	.word	0x40004800
 800fecc:	40004c00 	.word	0x40004c00
 800fed0:	40005000 	.word	0x40005000
 800fed4:	40011400 	.word	0x40011400
 800fed8:	40007800 	.word	0x40007800
 800fedc:	2310      	movs	r3, #16
 800fede:	77fb      	strb	r3, [r7, #31]
 800fee0:	e02c      	b.n	800ff3c <UART_SetConfig+0x348>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4a72      	ldr	r2, [pc, #456]	@ (80100b0 <UART_SetConfig+0x4bc>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d125      	bne.n	800ff38 <UART_SetConfig+0x344>
 800feec:	4b71      	ldr	r3, [pc, #452]	@ (80100b4 <UART_SetConfig+0x4c0>)
 800feee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fef2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800fef6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800fefa:	d017      	beq.n	800ff2c <UART_SetConfig+0x338>
 800fefc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ff00:	d817      	bhi.n	800ff32 <UART_SetConfig+0x33e>
 800ff02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff06:	d00b      	beq.n	800ff20 <UART_SetConfig+0x32c>
 800ff08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff0c:	d811      	bhi.n	800ff32 <UART_SetConfig+0x33e>
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d003      	beq.n	800ff1a <UART_SetConfig+0x326>
 800ff12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ff16:	d006      	beq.n	800ff26 <UART_SetConfig+0x332>
 800ff18:	e00b      	b.n	800ff32 <UART_SetConfig+0x33e>
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	77fb      	strb	r3, [r7, #31]
 800ff1e:	e00d      	b.n	800ff3c <UART_SetConfig+0x348>
 800ff20:	2302      	movs	r3, #2
 800ff22:	77fb      	strb	r3, [r7, #31]
 800ff24:	e00a      	b.n	800ff3c <UART_SetConfig+0x348>
 800ff26:	2304      	movs	r3, #4
 800ff28:	77fb      	strb	r3, [r7, #31]
 800ff2a:	e007      	b.n	800ff3c <UART_SetConfig+0x348>
 800ff2c:	2308      	movs	r3, #8
 800ff2e:	77fb      	strb	r3, [r7, #31]
 800ff30:	e004      	b.n	800ff3c <UART_SetConfig+0x348>
 800ff32:	2310      	movs	r3, #16
 800ff34:	77fb      	strb	r3, [r7, #31]
 800ff36:	e001      	b.n	800ff3c <UART_SetConfig+0x348>
 800ff38:	2310      	movs	r3, #16
 800ff3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	69db      	ldr	r3, [r3, #28]
 800ff40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff44:	d15b      	bne.n	800fffe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ff46:	7ffb      	ldrb	r3, [r7, #31]
 800ff48:	2b08      	cmp	r3, #8
 800ff4a:	d828      	bhi.n	800ff9e <UART_SetConfig+0x3aa>
 800ff4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ff54 <UART_SetConfig+0x360>)
 800ff4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff52:	bf00      	nop
 800ff54:	0800ff79 	.word	0x0800ff79
 800ff58:	0800ff81 	.word	0x0800ff81
 800ff5c:	0800ff89 	.word	0x0800ff89
 800ff60:	0800ff9f 	.word	0x0800ff9f
 800ff64:	0800ff8f 	.word	0x0800ff8f
 800ff68:	0800ff9f 	.word	0x0800ff9f
 800ff6c:	0800ff9f 	.word	0x0800ff9f
 800ff70:	0800ff9f 	.word	0x0800ff9f
 800ff74:	0800ff97 	.word	0x0800ff97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff78:	f7fb f9f0 	bl	800b35c <HAL_RCC_GetPCLK1Freq>
 800ff7c:	61b8      	str	r0, [r7, #24]
        break;
 800ff7e:	e013      	b.n	800ffa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff80:	f7fb fa00 	bl	800b384 <HAL_RCC_GetPCLK2Freq>
 800ff84:	61b8      	str	r0, [r7, #24]
        break;
 800ff86:	e00f      	b.n	800ffa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ff88:	4b4b      	ldr	r3, [pc, #300]	@ (80100b8 <UART_SetConfig+0x4c4>)
 800ff8a:	61bb      	str	r3, [r7, #24]
        break;
 800ff8c:	e00c      	b.n	800ffa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ff8e:	f7fb f913 	bl	800b1b8 <HAL_RCC_GetSysClockFreq>
 800ff92:	61b8      	str	r0, [r7, #24]
        break;
 800ff94:	e008      	b.n	800ffa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff9a:	61bb      	str	r3, [r7, #24]
        break;
 800ff9c:	e004      	b.n	800ffa8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	77bb      	strb	r3, [r7, #30]
        break;
 800ffa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ffa8:	69bb      	ldr	r3, [r7, #24]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d074      	beq.n	8010098 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ffae:	69bb      	ldr	r3, [r7, #24]
 800ffb0:	005a      	lsls	r2, r3, #1
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	085b      	lsrs	r3, r3, #1
 800ffb8:	441a      	add	r2, r3
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	2b0f      	cmp	r3, #15
 800ffc8:	d916      	bls.n	800fff8 <UART_SetConfig+0x404>
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ffd0:	d212      	bcs.n	800fff8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	f023 030f 	bic.w	r3, r3, #15
 800ffda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	085b      	lsrs	r3, r3, #1
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	f003 0307 	and.w	r3, r3, #7
 800ffe6:	b29a      	uxth	r2, r3
 800ffe8:	89fb      	ldrh	r3, [r7, #14]
 800ffea:	4313      	orrs	r3, r2
 800ffec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	89fa      	ldrh	r2, [r7, #14]
 800fff4:	60da      	str	r2, [r3, #12]
 800fff6:	e04f      	b.n	8010098 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fff8:	2301      	movs	r3, #1
 800fffa:	77bb      	strb	r3, [r7, #30]
 800fffc:	e04c      	b.n	8010098 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fffe:	7ffb      	ldrb	r3, [r7, #31]
 8010000:	2b08      	cmp	r3, #8
 8010002:	d828      	bhi.n	8010056 <UART_SetConfig+0x462>
 8010004:	a201      	add	r2, pc, #4	@ (adr r2, 801000c <UART_SetConfig+0x418>)
 8010006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801000a:	bf00      	nop
 801000c:	08010031 	.word	0x08010031
 8010010:	08010039 	.word	0x08010039
 8010014:	08010041 	.word	0x08010041
 8010018:	08010057 	.word	0x08010057
 801001c:	08010047 	.word	0x08010047
 8010020:	08010057 	.word	0x08010057
 8010024:	08010057 	.word	0x08010057
 8010028:	08010057 	.word	0x08010057
 801002c:	0801004f 	.word	0x0801004f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010030:	f7fb f994 	bl	800b35c <HAL_RCC_GetPCLK1Freq>
 8010034:	61b8      	str	r0, [r7, #24]
        break;
 8010036:	e013      	b.n	8010060 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010038:	f7fb f9a4 	bl	800b384 <HAL_RCC_GetPCLK2Freq>
 801003c:	61b8      	str	r0, [r7, #24]
        break;
 801003e:	e00f      	b.n	8010060 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010040:	4b1d      	ldr	r3, [pc, #116]	@ (80100b8 <UART_SetConfig+0x4c4>)
 8010042:	61bb      	str	r3, [r7, #24]
        break;
 8010044:	e00c      	b.n	8010060 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010046:	f7fb f8b7 	bl	800b1b8 <HAL_RCC_GetSysClockFreq>
 801004a:	61b8      	str	r0, [r7, #24]
        break;
 801004c:	e008      	b.n	8010060 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801004e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010052:	61bb      	str	r3, [r7, #24]
        break;
 8010054:	e004      	b.n	8010060 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8010056:	2300      	movs	r3, #0
 8010058:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801005a:	2301      	movs	r3, #1
 801005c:	77bb      	strb	r3, [r7, #30]
        break;
 801005e:	bf00      	nop
    }

    if (pclk != 0U)
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d018      	beq.n	8010098 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	085a      	lsrs	r2, r3, #1
 801006c:	69bb      	ldr	r3, [r7, #24]
 801006e:	441a      	add	r2, r3
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	fbb2 f3f3 	udiv	r3, r2, r3
 8010078:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	2b0f      	cmp	r3, #15
 801007e:	d909      	bls.n	8010094 <UART_SetConfig+0x4a0>
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010086:	d205      	bcs.n	8010094 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	b29a      	uxth	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	60da      	str	r2, [r3, #12]
 8010092:	e001      	b.n	8010098 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010094:	2301      	movs	r3, #1
 8010096:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80100a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3720      	adds	r7, #32
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	40007c00 	.word	0x40007c00
 80100b4:	40023800 	.word	0x40023800
 80100b8:	00f42400 	.word	0x00f42400

080100bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80100bc:	b480      	push	{r7}
 80100be:	b083      	sub	sp, #12
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100c8:	f003 0308 	and.w	r3, r3, #8
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d00a      	beq.n	80100e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	430a      	orrs	r2, r1
 80100e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ea:	f003 0301 	and.w	r3, r3, #1
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d00a      	beq.n	8010108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	430a      	orrs	r2, r1
 8010106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801010c:	f003 0302 	and.w	r3, r3, #2
 8010110:	2b00      	cmp	r3, #0
 8010112:	d00a      	beq.n	801012a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	430a      	orrs	r2, r1
 8010128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801012e:	f003 0304 	and.w	r3, r3, #4
 8010132:	2b00      	cmp	r3, #0
 8010134:	d00a      	beq.n	801014c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	430a      	orrs	r2, r1
 801014a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010150:	f003 0310 	and.w	r3, r3, #16
 8010154:	2b00      	cmp	r3, #0
 8010156:	d00a      	beq.n	801016e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	689b      	ldr	r3, [r3, #8]
 801015e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	430a      	orrs	r2, r1
 801016c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010172:	f003 0320 	and.w	r3, r3, #32
 8010176:	2b00      	cmp	r3, #0
 8010178:	d00a      	beq.n	8010190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	689b      	ldr	r3, [r3, #8]
 8010180:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	430a      	orrs	r2, r1
 801018e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010198:	2b00      	cmp	r3, #0
 801019a:	d01a      	beq.n	80101d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	430a      	orrs	r2, r1
 80101b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80101ba:	d10a      	bne.n	80101d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	430a      	orrs	r2, r1
 80101d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00a      	beq.n	80101f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	430a      	orrs	r2, r1
 80101f2:	605a      	str	r2, [r3, #4]
  }
}
 80101f4:	bf00      	nop
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b08c      	sub	sp, #48	@ 0x30
 8010204:	af02      	add	r7, sp, #8
 8010206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2200      	movs	r2, #0
 801020c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010210:	f7f6 f892 	bl	8006338 <HAL_GetTick>
 8010214:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f003 0308 	and.w	r3, r3, #8
 8010220:	2b08      	cmp	r3, #8
 8010222:	d12e      	bne.n	8010282 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010224:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010228:	9300      	str	r3, [sp, #0]
 801022a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801022c:	2200      	movs	r2, #0
 801022e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 f83b 	bl	80102ae <UART_WaitOnFlagUntilTimeout>
 8010238:	4603      	mov	r3, r0
 801023a:	2b00      	cmp	r3, #0
 801023c:	d021      	beq.n	8010282 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	e853 3f00 	ldrex	r3, [r3]
 801024a:	60fb      	str	r3, [r7, #12]
   return(result);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010252:	623b      	str	r3, [r7, #32]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	461a      	mov	r2, r3
 801025a:	6a3b      	ldr	r3, [r7, #32]
 801025c:	61fb      	str	r3, [r7, #28]
 801025e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010260:	69b9      	ldr	r1, [r7, #24]
 8010262:	69fa      	ldr	r2, [r7, #28]
 8010264:	e841 2300 	strex	r3, r2, [r1]
 8010268:	617b      	str	r3, [r7, #20]
   return(result);
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d1e6      	bne.n	801023e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2220      	movs	r2, #32
 8010274:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2200      	movs	r2, #0
 801027a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801027e:	2303      	movs	r3, #3
 8010280:	e011      	b.n	80102a6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2220      	movs	r2, #32
 8010286:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2220      	movs	r2, #32
 801028c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2200      	movs	r2, #0
 801029a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2200      	movs	r2, #0
 80102a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80102a4:	2300      	movs	r3, #0
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3728      	adds	r7, #40	@ 0x28
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}

080102ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80102ae:	b580      	push	{r7, lr}
 80102b0:	b084      	sub	sp, #16
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	60f8      	str	r0, [r7, #12]
 80102b6:	60b9      	str	r1, [r7, #8]
 80102b8:	603b      	str	r3, [r7, #0]
 80102ba:	4613      	mov	r3, r2
 80102bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102be:	e04f      	b.n	8010360 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80102c0:	69bb      	ldr	r3, [r7, #24]
 80102c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c6:	d04b      	beq.n	8010360 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80102c8:	f7f6 f836 	bl	8006338 <HAL_GetTick>
 80102cc:	4602      	mov	r2, r0
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	1ad3      	subs	r3, r2, r3
 80102d2:	69ba      	ldr	r2, [r7, #24]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d302      	bcc.n	80102de <UART_WaitOnFlagUntilTimeout+0x30>
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d101      	bne.n	80102e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80102de:	2303      	movs	r3, #3
 80102e0:	e04e      	b.n	8010380 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f003 0304 	and.w	r3, r3, #4
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d037      	beq.n	8010360 <UART_WaitOnFlagUntilTimeout+0xb2>
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	2b80      	cmp	r3, #128	@ 0x80
 80102f4:	d034      	beq.n	8010360 <UART_WaitOnFlagUntilTimeout+0xb2>
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	2b40      	cmp	r3, #64	@ 0x40
 80102fa:	d031      	beq.n	8010360 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	69db      	ldr	r3, [r3, #28]
 8010302:	f003 0308 	and.w	r3, r3, #8
 8010306:	2b08      	cmp	r3, #8
 8010308:	d110      	bne.n	801032c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2208      	movs	r2, #8
 8010310:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010312:	68f8      	ldr	r0, [r7, #12]
 8010314:	f000 f8fe 	bl	8010514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2208      	movs	r2, #8
 801031c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2200      	movs	r2, #0
 8010324:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8010328:	2301      	movs	r3, #1
 801032a:	e029      	b.n	8010380 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	69db      	ldr	r3, [r3, #28]
 8010332:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010336:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801033a:	d111      	bne.n	8010360 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010344:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010346:	68f8      	ldr	r0, [r7, #12]
 8010348:	f000 f8e4 	bl	8010514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2220      	movs	r2, #32
 8010350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2200      	movs	r2, #0
 8010358:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801035c:	2303      	movs	r3, #3
 801035e:	e00f      	b.n	8010380 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	69da      	ldr	r2, [r3, #28]
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	4013      	ands	r3, r2
 801036a:	68ba      	ldr	r2, [r7, #8]
 801036c:	429a      	cmp	r2, r3
 801036e:	bf0c      	ite	eq
 8010370:	2301      	moveq	r3, #1
 8010372:	2300      	movne	r3, #0
 8010374:	b2db      	uxtb	r3, r3
 8010376:	461a      	mov	r2, r3
 8010378:	79fb      	ldrb	r3, [r7, #7]
 801037a:	429a      	cmp	r2, r3
 801037c:	d0a0      	beq.n	80102c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801037e:	2300      	movs	r3, #0
}
 8010380:	4618      	mov	r0, r3
 8010382:	3710      	adds	r7, #16
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b096      	sub	sp, #88	@ 0x58
 801038c:	af00      	add	r7, sp, #0
 801038e:	60f8      	str	r0, [r7, #12]
 8010390:	60b9      	str	r1, [r7, #8]
 8010392:	4613      	mov	r3, r2
 8010394:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	68ba      	ldr	r2, [r7, #8]
 801039a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	88fa      	ldrh	r2, [r7, #6]
 80103a0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2200      	movs	r2, #0
 80103a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2222      	movs	r2, #34	@ 0x22
 80103b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d028      	beq.n	801040e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103c0:	4a3e      	ldr	r2, [pc, #248]	@ (80104bc <UART_Start_Receive_DMA+0x134>)
 80103c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103c8:	4a3d      	ldr	r2, [pc, #244]	@ (80104c0 <UART_Start_Receive_DMA+0x138>)
 80103ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103d0:	4a3c      	ldr	r2, [pc, #240]	@ (80104c4 <UART_Start_Receive_DMA+0x13c>)
 80103d2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103d8:	2200      	movs	r2, #0
 80103da:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	3324      	adds	r3, #36	@ 0x24
 80103e6:	4619      	mov	r1, r3
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103ec:	461a      	mov	r2, r3
 80103ee:	88fb      	ldrh	r3, [r7, #6]
 80103f0:	f7f6 fdc4 	bl	8006f7c <HAL_DMA_Start_IT>
 80103f4:	4603      	mov	r3, r0
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d009      	beq.n	801040e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2210      	movs	r2, #16
 80103fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2220      	movs	r2, #32
 8010406:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 801040a:	2301      	movs	r3, #1
 801040c:	e051      	b.n	80104b2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	691b      	ldr	r3, [r3, #16]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d018      	beq.n	8010448 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801041c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801041e:	e853 3f00 	ldrex	r3, [r3]
 8010422:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801042a:	657b      	str	r3, [r7, #84]	@ 0x54
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	461a      	mov	r2, r3
 8010432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010436:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010438:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801043a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801043c:	e841 2300 	strex	r3, r2, [r1]
 8010440:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010444:	2b00      	cmp	r3, #0
 8010446:	d1e6      	bne.n	8010416 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	3308      	adds	r3, #8
 801044e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010452:	e853 3f00 	ldrex	r3, [r3]
 8010456:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801045a:	f043 0301 	orr.w	r3, r3, #1
 801045e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	3308      	adds	r3, #8
 8010466:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010468:	637a      	str	r2, [r7, #52]	@ 0x34
 801046a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801046c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801046e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010470:	e841 2300 	strex	r3, r2, [r1]
 8010474:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010478:	2b00      	cmp	r3, #0
 801047a:	d1e5      	bne.n	8010448 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	3308      	adds	r3, #8
 8010482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	e853 3f00 	ldrex	r3, [r3]
 801048a:	613b      	str	r3, [r7, #16]
   return(result);
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	3308      	adds	r3, #8
 801049a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801049c:	623a      	str	r2, [r7, #32]
 801049e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a0:	69f9      	ldr	r1, [r7, #28]
 80104a2:	6a3a      	ldr	r2, [r7, #32]
 80104a4:	e841 2300 	strex	r3, r2, [r1]
 80104a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d1e5      	bne.n	801047c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80104b0:	2300      	movs	r3, #0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3758      	adds	r7, #88	@ 0x58
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	080105dd 	.word	0x080105dd
 80104c0:	0801073b 	.word	0x0801073b
 80104c4:	080107ad 	.word	0x080107ad

080104c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b089      	sub	sp, #36	@ 0x24
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	e853 3f00 	ldrex	r3, [r3]
 80104dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80104e4:	61fb      	str	r3, [r7, #28]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	461a      	mov	r2, r3
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	61bb      	str	r3, [r7, #24]
 80104f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104f2:	6979      	ldr	r1, [r7, #20]
 80104f4:	69ba      	ldr	r2, [r7, #24]
 80104f6:	e841 2300 	strex	r3, r2, [r1]
 80104fa:	613b      	str	r3, [r7, #16]
   return(result);
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d1e6      	bne.n	80104d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2220      	movs	r2, #32
 8010506:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8010508:	bf00      	nop
 801050a:	3724      	adds	r7, #36	@ 0x24
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr

08010514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010514:	b480      	push	{r7}
 8010516:	b095      	sub	sp, #84	@ 0x54
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010524:	e853 3f00 	ldrex	r3, [r3]
 8010528:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801052a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801052c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	461a      	mov	r2, r3
 8010538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801053a:	643b      	str	r3, [r7, #64]	@ 0x40
 801053c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801053e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010540:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010542:	e841 2300 	strex	r3, r2, [r1]
 8010546:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1e6      	bne.n	801051c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	3308      	adds	r3, #8
 8010554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010556:	6a3b      	ldr	r3, [r7, #32]
 8010558:	e853 3f00 	ldrex	r3, [r3]
 801055c:	61fb      	str	r3, [r7, #28]
   return(result);
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	f023 0301 	bic.w	r3, r3, #1
 8010564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	3308      	adds	r3, #8
 801056c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801056e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010570:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010572:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010576:	e841 2300 	strex	r3, r2, [r1]
 801057a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801057c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1e5      	bne.n	801054e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010586:	2b01      	cmp	r3, #1
 8010588:	d118      	bne.n	80105bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	e853 3f00 	ldrex	r3, [r3]
 8010596:	60bb      	str	r3, [r7, #8]
   return(result);
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	f023 0310 	bic.w	r3, r3, #16
 801059e:	647b      	str	r3, [r7, #68]	@ 0x44
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	461a      	mov	r2, r3
 80105a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105a8:	61bb      	str	r3, [r7, #24]
 80105aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ac:	6979      	ldr	r1, [r7, #20]
 80105ae:	69ba      	ldr	r2, [r7, #24]
 80105b0:	e841 2300 	strex	r3, r2, [r1]
 80105b4:	613b      	str	r3, [r7, #16]
   return(result);
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d1e6      	bne.n	801058a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2220      	movs	r2, #32
 80105c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2200      	movs	r2, #0
 80105ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80105d0:	bf00      	nop
 80105d2:	3754      	adds	r7, #84	@ 0x54
 80105d4:	46bd      	mov	sp, r7
 80105d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105da:	4770      	bx	lr

080105dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b09c      	sub	sp, #112	@ 0x70
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105e8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	69db      	ldr	r3, [r3, #28]
 80105ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80105f2:	d071      	beq.n	80106d8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80105f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80105f6:	2200      	movs	r2, #0
 80105f8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010604:	e853 3f00 	ldrex	r3, [r3]
 8010608:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801060a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801060c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010610:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	461a      	mov	r2, r3
 8010618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801061a:	657b      	str	r3, [r7, #84]	@ 0x54
 801061c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010620:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010622:	e841 2300 	strex	r3, r2, [r1]
 8010626:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801062a:	2b00      	cmp	r3, #0
 801062c:	d1e6      	bne.n	80105fc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801062e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	3308      	adds	r3, #8
 8010634:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010638:	e853 3f00 	ldrex	r3, [r3]
 801063c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801063e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010640:	f023 0301 	bic.w	r3, r3, #1
 8010644:	667b      	str	r3, [r7, #100]	@ 0x64
 8010646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	3308      	adds	r3, #8
 801064c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801064e:	643a      	str	r2, [r7, #64]	@ 0x40
 8010650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010652:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010654:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010656:	e841 2300 	strex	r3, r2, [r1]
 801065a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801065c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801065e:	2b00      	cmp	r3, #0
 8010660:	d1e5      	bne.n	801062e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	3308      	adds	r3, #8
 8010668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801066a:	6a3b      	ldr	r3, [r7, #32]
 801066c:	e853 3f00 	ldrex	r3, [r3]
 8010670:	61fb      	str	r3, [r7, #28]
   return(result);
 8010672:	69fb      	ldr	r3, [r7, #28]
 8010674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010678:	663b      	str	r3, [r7, #96]	@ 0x60
 801067a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	3308      	adds	r3, #8
 8010680:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010682:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010684:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010686:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801068a:	e841 2300 	strex	r3, r2, [r1]
 801068e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010692:	2b00      	cmp	r3, #0
 8010694:	d1e5      	bne.n	8010662 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010698:	2220      	movs	r2, #32
 801069a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801069e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106a2:	2b01      	cmp	r3, #1
 80106a4:	d118      	bne.n	80106d8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	e853 3f00 	ldrex	r3, [r3]
 80106b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	f023 0310 	bic.w	r3, r3, #16
 80106ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80106bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	461a      	mov	r2, r3
 80106c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80106c4:	61bb      	str	r3, [r7, #24]
 80106c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c8:	6979      	ldr	r1, [r7, #20]
 80106ca:	69ba      	ldr	r2, [r7, #24]
 80106cc:	e841 2300 	strex	r3, r2, [r1]
 80106d0:	613b      	str	r3, [r7, #16]
   return(result);
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1e6      	bne.n	80106a6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80106d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106da:	2200      	movs	r2, #0
 80106dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	d122      	bne.n	801072c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 80106e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106e8:	2200      	movs	r2, #0
 80106ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	685b      	ldr	r3, [r3, #4]
 80106f4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 80106f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80106fe:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8010702:	429a      	cmp	r2, r3
 8010704:	d204      	bcs.n	8010710 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8010706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010708:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 801070c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010712:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801071c:	b29b      	uxth	r3, r3
 801071e:	1ad3      	subs	r3, r2, r3
 8010720:	b29b      	uxth	r3, r3
 8010722:	4619      	mov	r1, r3
 8010724:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010726:	f7ff fa59 	bl	800fbdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801072a:	e002      	b.n	8010732 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 801072c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801072e:	f7f5 fc57 	bl	8005fe0 <HAL_UART_RxCpltCallback>
}
 8010732:	bf00      	nop
 8010734:	3770      	adds	r7, #112	@ 0x70
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}

0801073a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801073a:	b580      	push	{r7, lr}
 801073c:	b084      	sub	sp, #16
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010746:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2201      	movs	r2, #1
 801074c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010752:	2b01      	cmp	r3, #1
 8010754:	d123      	bne.n	801079e <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801075c:	085b      	lsrs	r3, r3, #1
 801075e:	b29a      	uxth	r2, r3
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010774:	897a      	ldrh	r2, [r7, #10]
 8010776:	429a      	cmp	r2, r3
 8010778:	d803      	bhi.n	8010782 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	897a      	ldrh	r2, [r7, #10]
 801077e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801078e:	b29b      	uxth	r3, r3
 8010790:	1ad3      	subs	r3, r2, r3
 8010792:	b29b      	uxth	r3, r3
 8010794:	4619      	mov	r1, r3
 8010796:	68f8      	ldr	r0, [r7, #12]
 8010798:	f7ff fa20 	bl	800fbdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801079c:	e002      	b.n	80107a4 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f7f5 fc42 	bl	8006028 <HAL_UART_RxHalfCpltCallback>
}
 80107a4:	bf00      	nop
 80107a6:	3710      	adds	r7, #16
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b086      	sub	sp, #24
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80107c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	689b      	ldr	r3, [r3, #8]
 80107ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107d2:	2b80      	cmp	r3, #128	@ 0x80
 80107d4:	d109      	bne.n	80107ea <UART_DMAError+0x3e>
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	2b21      	cmp	r3, #33	@ 0x21
 80107da:	d106      	bne.n	80107ea <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	2200      	movs	r2, #0
 80107e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80107e4:	6978      	ldr	r0, [r7, #20]
 80107e6:	f7ff fe6f 	bl	80104c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	689b      	ldr	r3, [r3, #8]
 80107f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107f4:	2b40      	cmp	r3, #64	@ 0x40
 80107f6:	d109      	bne.n	801080c <UART_DMAError+0x60>
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2b22      	cmp	r3, #34	@ 0x22
 80107fc:	d106      	bne.n	801080c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	2200      	movs	r2, #0
 8010802:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8010806:	6978      	ldr	r0, [r7, #20]
 8010808:	f7ff fe84 	bl	8010514 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010812:	f043 0210 	orr.w	r2, r3, #16
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801081c:	6978      	ldr	r0, [r7, #20]
 801081e:	f7f5 fc19 	bl	8006054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010822:	bf00      	nop
 8010824:	3718      	adds	r7, #24
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}

0801082a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801082a:	b580      	push	{r7, lr}
 801082c:	b084      	sub	sp, #16
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010836:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2200      	movs	r2, #0
 801083c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f7f5 fc07 	bl	8006054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010846:	bf00      	nop
 8010848:	3710      	adds	r7, #16
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}

0801084e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801084e:	b580      	push	{r7, lr}
 8010850:	b088      	sub	sp, #32
 8010852:	af00      	add	r7, sp, #0
 8010854:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	e853 3f00 	ldrex	r3, [r3]
 8010862:	60bb      	str	r3, [r7, #8]
   return(result);
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801086a:	61fb      	str	r3, [r7, #28]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	461a      	mov	r2, r3
 8010872:	69fb      	ldr	r3, [r7, #28]
 8010874:	61bb      	str	r3, [r7, #24]
 8010876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010878:	6979      	ldr	r1, [r7, #20]
 801087a:	69ba      	ldr	r2, [r7, #24]
 801087c:	e841 2300 	strex	r3, r2, [r1]
 8010880:	613b      	str	r3, [r7, #16]
   return(result);
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d1e6      	bne.n	8010856 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2220      	movs	r2, #32
 801088c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2200      	movs	r2, #0
 8010892:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f7ff f997 	bl	800fbc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801089a:	bf00      	nop
 801089c:	3720      	adds	r7, #32
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
	...

080108a4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d121      	bne.n	80108fa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	4b27      	ldr	r3, [pc, #156]	@ (8010958 <FMC_SDRAM_Init+0xb4>)
 80108bc:	4013      	ands	r3, r2
 80108be:	683a      	ldr	r2, [r7, #0]
 80108c0:	6851      	ldr	r1, [r2, #4]
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	6892      	ldr	r2, [r2, #8]
 80108c6:	4311      	orrs	r1, r2
 80108c8:	683a      	ldr	r2, [r7, #0]
 80108ca:	68d2      	ldr	r2, [r2, #12]
 80108cc:	4311      	orrs	r1, r2
 80108ce:	683a      	ldr	r2, [r7, #0]
 80108d0:	6912      	ldr	r2, [r2, #16]
 80108d2:	4311      	orrs	r1, r2
 80108d4:	683a      	ldr	r2, [r7, #0]
 80108d6:	6952      	ldr	r2, [r2, #20]
 80108d8:	4311      	orrs	r1, r2
 80108da:	683a      	ldr	r2, [r7, #0]
 80108dc:	6992      	ldr	r2, [r2, #24]
 80108de:	4311      	orrs	r1, r2
 80108e0:	683a      	ldr	r2, [r7, #0]
 80108e2:	69d2      	ldr	r2, [r2, #28]
 80108e4:	4311      	orrs	r1, r2
 80108e6:	683a      	ldr	r2, [r7, #0]
 80108e8:	6a12      	ldr	r2, [r2, #32]
 80108ea:	4311      	orrs	r1, r2
 80108ec:	683a      	ldr	r2, [r7, #0]
 80108ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80108f0:	430a      	orrs	r2, r1
 80108f2:	431a      	orrs	r2, r3
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	601a      	str	r2, [r3, #0]
 80108f8:	e026      	b.n	8010948 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	69d9      	ldr	r1, [r3, #28]
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	6a1b      	ldr	r3, [r3, #32]
 801090a:	4319      	orrs	r1, r3
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010910:	430b      	orrs	r3, r1
 8010912:	431a      	orrs	r2, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	685a      	ldr	r2, [r3, #4]
 801091c:	4b0e      	ldr	r3, [pc, #56]	@ (8010958 <FMC_SDRAM_Init+0xb4>)
 801091e:	4013      	ands	r3, r2
 8010920:	683a      	ldr	r2, [r7, #0]
 8010922:	6851      	ldr	r1, [r2, #4]
 8010924:	683a      	ldr	r2, [r7, #0]
 8010926:	6892      	ldr	r2, [r2, #8]
 8010928:	4311      	orrs	r1, r2
 801092a:	683a      	ldr	r2, [r7, #0]
 801092c:	68d2      	ldr	r2, [r2, #12]
 801092e:	4311      	orrs	r1, r2
 8010930:	683a      	ldr	r2, [r7, #0]
 8010932:	6912      	ldr	r2, [r2, #16]
 8010934:	4311      	orrs	r1, r2
 8010936:	683a      	ldr	r2, [r7, #0]
 8010938:	6952      	ldr	r2, [r2, #20]
 801093a:	4311      	orrs	r1, r2
 801093c:	683a      	ldr	r2, [r7, #0]
 801093e:	6992      	ldr	r2, [r2, #24]
 8010940:	430a      	orrs	r2, r1
 8010942:	431a      	orrs	r2, r3
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010948:	2300      	movs	r3, #0
}
 801094a:	4618      	mov	r0, r3
 801094c:	370c      	adds	r7, #12
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr
 8010956:	bf00      	nop
 8010958:	ffff8000 	.word	0xffff8000

0801095c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801095c:	b480      	push	{r7}
 801095e:	b085      	sub	sp, #20
 8010960:	af00      	add	r7, sp, #0
 8010962:	60f8      	str	r0, [r7, #12]
 8010964:	60b9      	str	r1, [r7, #8]
 8010966:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d128      	bne.n	80109c0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	689b      	ldr	r3, [r3, #8]
 8010972:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	1e59      	subs	r1, r3, #1
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	3b01      	subs	r3, #1
 8010982:	011b      	lsls	r3, r3, #4
 8010984:	4319      	orrs	r1, r3
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	689b      	ldr	r3, [r3, #8]
 801098a:	3b01      	subs	r3, #1
 801098c:	021b      	lsls	r3, r3, #8
 801098e:	4319      	orrs	r1, r3
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	68db      	ldr	r3, [r3, #12]
 8010994:	3b01      	subs	r3, #1
 8010996:	031b      	lsls	r3, r3, #12
 8010998:	4319      	orrs	r1, r3
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	691b      	ldr	r3, [r3, #16]
 801099e:	3b01      	subs	r3, #1
 80109a0:	041b      	lsls	r3, r3, #16
 80109a2:	4319      	orrs	r1, r3
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	695b      	ldr	r3, [r3, #20]
 80109a8:	3b01      	subs	r3, #1
 80109aa:	051b      	lsls	r3, r3, #20
 80109ac:	4319      	orrs	r1, r3
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	699b      	ldr	r3, [r3, #24]
 80109b2:	3b01      	subs	r3, #1
 80109b4:	061b      	lsls	r3, r3, #24
 80109b6:	430b      	orrs	r3, r1
 80109b8:	431a      	orrs	r2, r3
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	609a      	str	r2, [r3, #8]
 80109be:	e02d      	b.n	8010a1c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	689a      	ldr	r2, [r3, #8]
 80109c4:	4b19      	ldr	r3, [pc, #100]	@ (8010a2c <FMC_SDRAM_Timing_Init+0xd0>)
 80109c6:	4013      	ands	r3, r2
 80109c8:	68ba      	ldr	r2, [r7, #8]
 80109ca:	68d2      	ldr	r2, [r2, #12]
 80109cc:	3a01      	subs	r2, #1
 80109ce:	0311      	lsls	r1, r2, #12
 80109d0:	68ba      	ldr	r2, [r7, #8]
 80109d2:	6952      	ldr	r2, [r2, #20]
 80109d4:	3a01      	subs	r2, #1
 80109d6:	0512      	lsls	r2, r2, #20
 80109d8:	430a      	orrs	r2, r1
 80109da:	431a      	orrs	r2, r3
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	68db      	ldr	r3, [r3, #12]
 80109e4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	1e59      	subs	r1, r3, #1
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	3b01      	subs	r3, #1
 80109f4:	011b      	lsls	r3, r3, #4
 80109f6:	4319      	orrs	r1, r3
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	689b      	ldr	r3, [r3, #8]
 80109fc:	3b01      	subs	r3, #1
 80109fe:	021b      	lsls	r3, r3, #8
 8010a00:	4319      	orrs	r1, r3
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	691b      	ldr	r3, [r3, #16]
 8010a06:	3b01      	subs	r3, #1
 8010a08:	041b      	lsls	r3, r3, #16
 8010a0a:	4319      	orrs	r1, r3
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	699b      	ldr	r3, [r3, #24]
 8010a10:	3b01      	subs	r3, #1
 8010a12:	061b      	lsls	r3, r3, #24
 8010a14:	430b      	orrs	r3, r1
 8010a16:	431a      	orrs	r2, r3
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8010a1c:	2300      	movs	r3, #0
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3714      	adds	r7, #20
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr
 8010a2a:	bf00      	nop
 8010a2c:	ff0f0fff 	.word	0xff0f0fff

08010a30 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010a30:	b084      	sub	sp, #16
 8010a32:	b480      	push	{r7}
 8010a34:	b085      	sub	sp, #20
 8010a36:	af00      	add	r7, sp, #0
 8010a38:	6078      	str	r0, [r7, #4]
 8010a3a:	f107 001c 	add.w	r0, r7, #28
 8010a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010a42:	2300      	movs	r3, #0
 8010a44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010a46:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010a48:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010a4a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8010a4e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8010a52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8010a56:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8010a5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	685a      	ldr	r2, [r3, #4]
 8010a66:	4b07      	ldr	r3, [pc, #28]	@ (8010a84 <SDMMC_Init+0x54>)
 8010a68:	4013      	ands	r3, r2
 8010a6a:	68fa      	ldr	r2, [r7, #12]
 8010a6c:	431a      	orrs	r2, r3
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010a72:	2300      	movs	r3, #0
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3714      	adds	r7, #20
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	b004      	add	sp, #16
 8010a80:	4770      	bx	lr
 8010a82:	bf00      	nop
 8010a84:	ffff8100 	.word	0xffff8100

08010a88 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	370c      	adds	r7, #12
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa0:	4770      	bx	lr

08010aa2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8010aa2:	b480      	push	{r7}
 8010aa4:	b083      	sub	sp, #12
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
 8010aaa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	681a      	ldr	r2, [r3, #0]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010ab6:	2300      	movs	r3, #0
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	370c      	adds	r7, #12
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010ac4:	b480      	push	{r7}
 8010ac6:	b083      	sub	sp, #12
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2203      	movs	r2, #3
 8010ad0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010ad2:	2300      	movs	r3, #0
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	370c      	adds	r7, #12
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr

08010ae0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010ae0:	b480      	push	{r7}
 8010ae2:	b083      	sub	sp, #12
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f003 0303 	and.w	r3, r3, #3
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	370c      	adds	r7, #12
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr

08010afc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b085      	sub	sp, #20
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010b06:	2300      	movs	r3, #0
 8010b08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	681a      	ldr	r2, [r3, #0]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010b1a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010b20:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010b26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010b28:	68fa      	ldr	r2, [r7, #12]
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	68da      	ldr	r2, [r3, #12]
 8010b32:	4b06      	ldr	r3, [pc, #24]	@ (8010b4c <SDMMC_SendCommand+0x50>)
 8010b34:	4013      	ands	r3, r2
 8010b36:	68fa      	ldr	r2, [r7, #12]
 8010b38:	431a      	orrs	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010b3e:	2300      	movs	r3, #0
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3714      	adds	r7, #20
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr
 8010b4c:	fffff000 	.word	0xfffff000

08010b50 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010b50:	b480      	push	{r7}
 8010b52:	b083      	sub	sp, #12
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	691b      	ldr	r3, [r3, #16]
 8010b5c:	b2db      	uxtb	r3, r3
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	370c      	adds	r7, #12
 8010b62:	46bd      	mov	sp, r7
 8010b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b68:	4770      	bx	lr

08010b6a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010b6a:	b480      	push	{r7}
 8010b6c:	b085      	sub	sp, #20
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	6078      	str	r0, [r7, #4]
 8010b72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	3314      	adds	r3, #20
 8010b78:	461a      	mov	r2, r3
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	681b      	ldr	r3, [r3, #0]
}  
 8010b84:	4618      	mov	r0, r3
 8010b86:	3714      	adds	r7, #20
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8e:	4770      	bx	lr

08010b90 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010b90:	b480      	push	{r7}
 8010b92:	b085      	sub	sp, #20
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	685a      	ldr	r2, [r3, #4]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010bb6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010bbc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010bc2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010bc4:	68fa      	ldr	r2, [r7, #12]
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bce:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	431a      	orrs	r2, r3
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010bda:	2300      	movs	r3, #0

}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3714      	adds	r7, #20
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b088      	sub	sp, #32
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010bf6:	2310      	movs	r3, #16
 8010bf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bfa:	2340      	movs	r3, #64	@ 0x40
 8010bfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c08:	f107 0308 	add.w	r3, r7, #8
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f7ff ff74 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c18:	2110      	movs	r1, #16
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f000 fa1a 	bl	8011054 <SDMMC_GetCmdResp1>
 8010c20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c22:	69fb      	ldr	r3, [r7, #28]
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3720      	adds	r7, #32
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}

08010c2c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b088      	sub	sp, #32
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010c3a:	2311      	movs	r3, #17
 8010c3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c3e:	2340      	movs	r3, #64	@ 0x40
 8010c40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c42:	2300      	movs	r3, #0
 8010c44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c4c:	f107 0308 	add.w	r3, r7, #8
 8010c50:	4619      	mov	r1, r3
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f7ff ff52 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c5c:	2111      	movs	r1, #17
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f000 f9f8 	bl	8011054 <SDMMC_GetCmdResp1>
 8010c64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c66:	69fb      	ldr	r3, [r7, #28]
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3720      	adds	r7, #32
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b088      	sub	sp, #32
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010c7e:	2312      	movs	r3, #18
 8010c80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c82:	2340      	movs	r3, #64	@ 0x40
 8010c84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c86:	2300      	movs	r3, #0
 8010c88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c90:	f107 0308 	add.w	r3, r7, #8
 8010c94:	4619      	mov	r1, r3
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f7ff ff30 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ca0:	2112      	movs	r1, #18
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f000 f9d6 	bl	8011054 <SDMMC_GetCmdResp1>
 8010ca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010caa:	69fb      	ldr	r3, [r7, #28]
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3720      	adds	r7, #32
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}

08010cb4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b088      	sub	sp, #32
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010cc2:	2318      	movs	r3, #24
 8010cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cc6:	2340      	movs	r3, #64	@ 0x40
 8010cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010cd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cd4:	f107 0308 	add.w	r3, r7, #8
 8010cd8:	4619      	mov	r1, r3
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f7ff ff0e 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ce4:	2118      	movs	r1, #24
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 f9b4 	bl	8011054 <SDMMC_GetCmdResp1>
 8010cec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cee:	69fb      	ldr	r3, [r7, #28]
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3720      	adds	r7, #32
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}

08010cf8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b088      	sub	sp, #32
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010d06:	2319      	movs	r3, #25
 8010d08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d0a:	2340      	movs	r3, #64	@ 0x40
 8010d0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d18:	f107 0308 	add.w	r3, r7, #8
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f7ff feec 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d28:	2119      	movs	r1, #25
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f000 f992 	bl	8011054 <SDMMC_GetCmdResp1>
 8010d30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d32:	69fb      	ldr	r3, [r7, #28]
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3720      	adds	r7, #32
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b088      	sub	sp, #32
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010d44:	2300      	movs	r3, #0
 8010d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010d48:	230c      	movs	r3, #12
 8010d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d4c:	2340      	movs	r3, #64	@ 0x40
 8010d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d50:	2300      	movs	r3, #0
 8010d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d5a:	f107 0308 	add.w	r3, r7, #8
 8010d5e:	4619      	mov	r1, r3
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f7ff fecb 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010d66:	4a05      	ldr	r2, [pc, #20]	@ (8010d7c <SDMMC_CmdStopTransfer+0x40>)
 8010d68:	210c      	movs	r1, #12
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 f972 	bl	8011054 <SDMMC_GetCmdResp1>
 8010d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d72:	69fb      	ldr	r3, [r7, #28]
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3720      	adds	r7, #32
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	05f5e100 	.word	0x05f5e100

08010d80 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b08a      	sub	sp, #40	@ 0x28
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010d90:	2307      	movs	r3, #7
 8010d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d94:	2340      	movs	r3, #64	@ 0x40
 8010d96:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010da0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010da2:	f107 0310 	add.w	r3, r7, #16
 8010da6:	4619      	mov	r1, r3
 8010da8:	68f8      	ldr	r0, [r7, #12]
 8010daa:	f7ff fea7 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010db2:	2107      	movs	r1, #7
 8010db4:	68f8      	ldr	r0, [r7, #12]
 8010db6:	f000 f94d 	bl	8011054 <SDMMC_GetCmdResp1>
 8010dba:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8010dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3728      	adds	r7, #40	@ 0x28
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010dc6:	b580      	push	{r7, lr}
 8010dc8:	b088      	sub	sp, #32
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010de2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010de4:	f107 0308 	add.w	r3, r7, #8
 8010de8:	4619      	mov	r1, r3
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f7ff fe86 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 fb67 	bl	80114c4 <SDMMC_GetCmdError>
 8010df6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010df8:	69fb      	ldr	r3, [r7, #28]
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3720      	adds	r7, #32
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}

08010e02 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010e02:	b580      	push	{r7, lr}
 8010e04:	b088      	sub	sp, #32
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010e0a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010e0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010e10:	2308      	movs	r3, #8
 8010e12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e14:	2340      	movs	r3, #64	@ 0x40
 8010e16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e22:	f107 0308 	add.w	r3, r7, #8
 8010e26:	4619      	mov	r1, r3
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f7ff fe67 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f000 fafa 	bl	8011428 <SDMMC_GetCmdResp7>
 8010e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e36:	69fb      	ldr	r3, [r7, #28]
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3720      	adds	r7, #32
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b088      	sub	sp, #32
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010e4e:	2337      	movs	r3, #55	@ 0x37
 8010e50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e52:	2340      	movs	r3, #64	@ 0x40
 8010e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e56:	2300      	movs	r3, #0
 8010e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e60:	f107 0308 	add.w	r3, r7, #8
 8010e64:	4619      	mov	r1, r3
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f7ff fe48 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e70:	2137      	movs	r1, #55	@ 0x37
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f000 f8ee 	bl	8011054 <SDMMC_GetCmdResp1>
 8010e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e7a:	69fb      	ldr	r3, [r7, #28]
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3720      	adds	r7, #32
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b088      	sub	sp, #32
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010e8e:	683a      	ldr	r2, [r7, #0]
 8010e90:	4b0d      	ldr	r3, [pc, #52]	@ (8010ec8 <SDMMC_CmdAppOperCommand+0x44>)
 8010e92:	4313      	orrs	r3, r2
 8010e94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010e96:	2329      	movs	r3, #41	@ 0x29
 8010e98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e9a:	2340      	movs	r3, #64	@ 0x40
 8010e9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ea6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ea8:	f107 0308 	add.w	r3, r7, #8
 8010eac:	4619      	mov	r1, r3
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f7ff fe24 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 fa03 	bl	80112c0 <SDMMC_GetCmdResp3>
 8010eba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ebc:	69fb      	ldr	r3, [r7, #28]
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3720      	adds	r7, #32
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}
 8010ec6:	bf00      	nop
 8010ec8:	80100000 	.word	0x80100000

08010ecc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b088      	sub	sp, #32
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010eda:	2306      	movs	r3, #6
 8010edc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ede:	2340      	movs	r3, #64	@ 0x40
 8010ee0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010eea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010eec:	f107 0308 	add.w	r3, r7, #8
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f7ff fe02 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010efc:	2106      	movs	r1, #6
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 f8a8 	bl	8011054 <SDMMC_GetCmdResp1>
 8010f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f06:	69fb      	ldr	r3, [r7, #28]
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3720      	adds	r7, #32
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b088      	sub	sp, #32
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010f1c:	2333      	movs	r3, #51	@ 0x33
 8010f1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f20:	2340      	movs	r3, #64	@ 0x40
 8010f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f24:	2300      	movs	r3, #0
 8010f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f2e:	f107 0308 	add.w	r3, r7, #8
 8010f32:	4619      	mov	r1, r3
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f7ff fde1 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f3e:	2133      	movs	r1, #51	@ 0x33
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f000 f887 	bl	8011054 <SDMMC_GetCmdResp1>
 8010f46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f48:	69fb      	ldr	r3, [r7, #28]
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3720      	adds	r7, #32
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}

08010f52 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010f52:	b580      	push	{r7, lr}
 8010f54:	b088      	sub	sp, #32
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010f5e:	2302      	movs	r3, #2
 8010f60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010f62:	23c0      	movs	r3, #192	@ 0xc0
 8010f64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f66:	2300      	movs	r3, #0
 8010f68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f70:	f107 0308 	add.w	r3, r7, #8
 8010f74:	4619      	mov	r1, r3
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f7ff fdc0 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f000 f957 	bl	8011230 <SDMMC_GetCmdResp2>
 8010f82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f84:	69fb      	ldr	r3, [r7, #28]
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3720      	adds	r7, #32
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}

08010f8e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010f8e:	b580      	push	{r7, lr}
 8010f90:	b088      	sub	sp, #32
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	6078      	str	r0, [r7, #4]
 8010f96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010f9c:	2309      	movs	r3, #9
 8010f9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010fa0:	23c0      	movs	r3, #192	@ 0xc0
 8010fa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010fac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fae:	f107 0308 	add.w	r3, r7, #8
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f7ff fda1 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f000 f938 	bl	8011230 <SDMMC_GetCmdResp2>
 8010fc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fc2:	69fb      	ldr	r3, [r7, #28]
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3720      	adds	r7, #32
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b088      	sub	sp, #32
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010fda:	2303      	movs	r3, #3
 8010fdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010fde:	2340      	movs	r3, #64	@ 0x40
 8010fe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010fea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fec:	f107 0308 	add.w	r3, r7, #8
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f7ff fd82 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010ff8:	683a      	ldr	r2, [r7, #0]
 8010ffa:	2103      	movs	r1, #3
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f000 f99d 	bl	801133c <SDMMC_GetCmdResp6>
 8011002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011004:	69fb      	ldr	r3, [r7, #28]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3720      	adds	r7, #32
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}

0801100e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801100e:	b580      	push	{r7, lr}
 8011010:	b088      	sub	sp, #32
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
 8011016:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801101c:	230d      	movs	r3, #13
 801101e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011020:	2340      	movs	r3, #64	@ 0x40
 8011022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011024:	2300      	movs	r3, #0
 8011026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011028:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801102c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801102e:	f107 0308 	add.w	r3, r7, #8
 8011032:	4619      	mov	r1, r3
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f7ff fd61 	bl	8010afc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801103a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801103e:	210d      	movs	r1, #13
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 f807 	bl	8011054 <SDMMC_GetCmdResp1>
 8011046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011048:	69fb      	ldr	r3, [r7, #28]
}
 801104a:	4618      	mov	r0, r3
 801104c:	3720      	adds	r7, #32
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
	...

08011054 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b088      	sub	sp, #32
 8011058:	af00      	add	r7, sp, #0
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	460b      	mov	r3, r1
 801105e:	607a      	str	r2, [r7, #4]
 8011060:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011062:	4b70      	ldr	r3, [pc, #448]	@ (8011224 <SDMMC_GetCmdResp1+0x1d0>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	4a70      	ldr	r2, [pc, #448]	@ (8011228 <SDMMC_GetCmdResp1+0x1d4>)
 8011068:	fba2 2303 	umull	r2, r3, r2, r3
 801106c:	0a5a      	lsrs	r2, r3, #9
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	fb02 f303 	mul.w	r3, r2, r3
 8011074:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011076:	69fb      	ldr	r3, [r7, #28]
 8011078:	1e5a      	subs	r2, r3, #1
 801107a:	61fa      	str	r2, [r7, #28]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d102      	bne.n	8011086 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011080:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011084:	e0c9      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801108a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801108c:	69bb      	ldr	r3, [r7, #24]
 801108e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011092:	2b00      	cmp	r3, #0
 8011094:	d0ef      	beq.n	8011076 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011096:	69bb      	ldr	r3, [r7, #24]
 8011098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801109c:	2b00      	cmp	r3, #0
 801109e:	d1ea      	bne.n	8011076 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110a4:	f003 0304 	and.w	r3, r3, #4
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d004      	beq.n	80110b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2204      	movs	r2, #4
 80110b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110b2:	2304      	movs	r3, #4
 80110b4:	e0b1      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110ba:	f003 0301 	and.w	r3, r3, #1
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d004      	beq.n	80110cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	2201      	movs	r2, #1
 80110c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110c8:	2301      	movs	r3, #1
 80110ca:	e0a6      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	22c5      	movs	r2, #197	@ 0xc5
 80110d0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80110d2:	68f8      	ldr	r0, [r7, #12]
 80110d4:	f7ff fd3c 	bl	8010b50 <SDMMC_GetCommandResponse>
 80110d8:	4603      	mov	r3, r0
 80110da:	461a      	mov	r2, r3
 80110dc:	7afb      	ldrb	r3, [r7, #11]
 80110de:	4293      	cmp	r3, r2
 80110e0:	d001      	beq.n	80110e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110e2:	2301      	movs	r3, #1
 80110e4:	e099      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80110e6:	2100      	movs	r1, #0
 80110e8:	68f8      	ldr	r0, [r7, #12]
 80110ea:	f7ff fd3e 	bl	8010b6a <SDMMC_GetResponse>
 80110ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80110f0:	697a      	ldr	r2, [r7, #20]
 80110f2:	4b4e      	ldr	r3, [pc, #312]	@ (801122c <SDMMC_GetCmdResp1+0x1d8>)
 80110f4:	4013      	ands	r3, r2
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d101      	bne.n	80110fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80110fa:	2300      	movs	r3, #0
 80110fc:	e08d      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	2b00      	cmp	r3, #0
 8011102:	da02      	bge.n	801110a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011104:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011108:	e087      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011110:	2b00      	cmp	r3, #0
 8011112:	d001      	beq.n	8011118 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011114:	2340      	movs	r3, #64	@ 0x40
 8011116:	e080      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801111e:	2b00      	cmp	r3, #0
 8011120:	d001      	beq.n	8011126 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011122:	2380      	movs	r3, #128	@ 0x80
 8011124:	e079      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801112c:	2b00      	cmp	r3, #0
 801112e:	d002      	beq.n	8011136 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011130:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011134:	e071      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801113c:	2b00      	cmp	r3, #0
 801113e:	d002      	beq.n	8011146 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011140:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011144:	e069      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801114c:	2b00      	cmp	r3, #0
 801114e:	d002      	beq.n	8011156 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011150:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011154:	e061      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801115c:	2b00      	cmp	r3, #0
 801115e:	d002      	beq.n	8011166 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011160:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011164:	e059      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801116c:	2b00      	cmp	r3, #0
 801116e:	d002      	beq.n	8011176 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011174:	e051      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801117c:	2b00      	cmp	r3, #0
 801117e:	d002      	beq.n	8011186 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011180:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011184:	e049      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801118c:	2b00      	cmp	r3, #0
 801118e:	d002      	beq.n	8011196 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011190:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011194:	e041      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801119c:	2b00      	cmp	r3, #0
 801119e:	d002      	beq.n	80111a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80111a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80111a4:	e039      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d002      	beq.n	80111b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80111b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80111b4:	e031      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d002      	beq.n	80111c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80111c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80111c4:	e029      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d002      	beq.n	80111d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80111d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80111d4:	e021      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d002      	beq.n	80111e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80111e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80111e4:	e019      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d002      	beq.n	80111f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80111f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80111f4:	e011      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d002      	beq.n	8011206 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011200:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011204:	e009      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	f003 0308 	and.w	r3, r3, #8
 801120c:	2b00      	cmp	r3, #0
 801120e:	d002      	beq.n	8011216 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011210:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8011214:	e001      	b.n	801121a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011216:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801121a:	4618      	mov	r0, r3
 801121c:	3720      	adds	r7, #32
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
 8011222:	bf00      	nop
 8011224:	2000001c 	.word	0x2000001c
 8011228:	10624dd3 	.word	0x10624dd3
 801122c:	fdffe008 	.word	0xfdffe008

08011230 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011230:	b480      	push	{r7}
 8011232:	b085      	sub	sp, #20
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011238:	4b1f      	ldr	r3, [pc, #124]	@ (80112b8 <SDMMC_GetCmdResp2+0x88>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	4a1f      	ldr	r2, [pc, #124]	@ (80112bc <SDMMC_GetCmdResp2+0x8c>)
 801123e:	fba2 2303 	umull	r2, r3, r2, r3
 8011242:	0a5b      	lsrs	r3, r3, #9
 8011244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011248:	fb02 f303 	mul.w	r3, r2, r3
 801124c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	1e5a      	subs	r2, r3, #1
 8011252:	60fa      	str	r2, [r7, #12]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d102      	bne.n	801125e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011258:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801125c:	e026      	b.n	80112ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011262:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801126a:	2b00      	cmp	r3, #0
 801126c:	d0ef      	beq.n	801124e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011274:	2b00      	cmp	r3, #0
 8011276:	d1ea      	bne.n	801124e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801127c:	f003 0304 	and.w	r3, r3, #4
 8011280:	2b00      	cmp	r3, #0
 8011282:	d004      	beq.n	801128e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2204      	movs	r2, #4
 8011288:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801128a:	2304      	movs	r3, #4
 801128c:	e00e      	b.n	80112ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011292:	f003 0301 	and.w	r3, r3, #1
 8011296:	2b00      	cmp	r3, #0
 8011298:	d004      	beq.n	80112a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2201      	movs	r2, #1
 801129e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112a0:	2301      	movs	r3, #1
 80112a2:	e003      	b.n	80112ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	22c5      	movs	r2, #197	@ 0xc5
 80112a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80112aa:	2300      	movs	r3, #0
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3714      	adds	r7, #20
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr
 80112b8:	2000001c 	.word	0x2000001c
 80112bc:	10624dd3 	.word	0x10624dd3

080112c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b085      	sub	sp, #20
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80112c8:	4b1a      	ldr	r3, [pc, #104]	@ (8011334 <SDMMC_GetCmdResp3+0x74>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	4a1a      	ldr	r2, [pc, #104]	@ (8011338 <SDMMC_GetCmdResp3+0x78>)
 80112ce:	fba2 2303 	umull	r2, r3, r2, r3
 80112d2:	0a5b      	lsrs	r3, r3, #9
 80112d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80112d8:	fb02 f303 	mul.w	r3, r2, r3
 80112dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	1e5a      	subs	r2, r3, #1
 80112e2:	60fa      	str	r2, [r7, #12]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d102      	bne.n	80112ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80112e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80112ec:	e01b      	b.n	8011326 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d0ef      	beq.n	80112de <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011304:	2b00      	cmp	r3, #0
 8011306:	d1ea      	bne.n	80112de <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801130c:	f003 0304 	and.w	r3, r3, #4
 8011310:	2b00      	cmp	r3, #0
 8011312:	d004      	beq.n	801131e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2204      	movs	r2, #4
 8011318:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801131a:	2304      	movs	r3, #4
 801131c:	e003      	b.n	8011326 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	22c5      	movs	r2, #197	@ 0xc5
 8011322:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011324:	2300      	movs	r3, #0
}
 8011326:	4618      	mov	r0, r3
 8011328:	3714      	adds	r7, #20
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop
 8011334:	2000001c 	.word	0x2000001c
 8011338:	10624dd3 	.word	0x10624dd3

0801133c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b088      	sub	sp, #32
 8011340:	af00      	add	r7, sp, #0
 8011342:	60f8      	str	r0, [r7, #12]
 8011344:	460b      	mov	r3, r1
 8011346:	607a      	str	r2, [r7, #4]
 8011348:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801134a:	4b35      	ldr	r3, [pc, #212]	@ (8011420 <SDMMC_GetCmdResp6+0xe4>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	4a35      	ldr	r2, [pc, #212]	@ (8011424 <SDMMC_GetCmdResp6+0xe8>)
 8011350:	fba2 2303 	umull	r2, r3, r2, r3
 8011354:	0a5b      	lsrs	r3, r3, #9
 8011356:	f241 3288 	movw	r2, #5000	@ 0x1388
 801135a:	fb02 f303 	mul.w	r3, r2, r3
 801135e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011360:	69fb      	ldr	r3, [r7, #28]
 8011362:	1e5a      	subs	r2, r3, #1
 8011364:	61fa      	str	r2, [r7, #28]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d102      	bne.n	8011370 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801136a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801136e:	e052      	b.n	8011416 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011374:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801137c:	2b00      	cmp	r3, #0
 801137e:	d0ef      	beq.n	8011360 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011380:	69bb      	ldr	r3, [r7, #24]
 8011382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011386:	2b00      	cmp	r3, #0
 8011388:	d1ea      	bne.n	8011360 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801138e:	f003 0304 	and.w	r3, r3, #4
 8011392:	2b00      	cmp	r3, #0
 8011394:	d004      	beq.n	80113a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2204      	movs	r2, #4
 801139a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801139c:	2304      	movs	r3, #4
 801139e:	e03a      	b.n	8011416 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113a4:	f003 0301 	and.w	r3, r3, #1
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d004      	beq.n	80113b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2201      	movs	r2, #1
 80113b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80113b2:	2301      	movs	r3, #1
 80113b4:	e02f      	b.n	8011416 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80113b6:	68f8      	ldr	r0, [r7, #12]
 80113b8:	f7ff fbca 	bl	8010b50 <SDMMC_GetCommandResponse>
 80113bc:	4603      	mov	r3, r0
 80113be:	461a      	mov	r2, r3
 80113c0:	7afb      	ldrb	r3, [r7, #11]
 80113c2:	4293      	cmp	r3, r2
 80113c4:	d001      	beq.n	80113ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80113c6:	2301      	movs	r3, #1
 80113c8:	e025      	b.n	8011416 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	22c5      	movs	r2, #197	@ 0xc5
 80113ce:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80113d0:	2100      	movs	r1, #0
 80113d2:	68f8      	ldr	r0, [r7, #12]
 80113d4:	f7ff fbc9 	bl	8010b6a <SDMMC_GetResponse>
 80113d8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d106      	bne.n	80113f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	0c1b      	lsrs	r3, r3, #16
 80113e8:	b29a      	uxth	r2, r3
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80113ee:	2300      	movs	r3, #0
 80113f0:	e011      	b.n	8011416 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d002      	beq.n	8011402 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80113fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011400:	e009      	b.n	8011416 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011408:	2b00      	cmp	r3, #0
 801140a:	d002      	beq.n	8011412 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801140c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011410:	e001      	b.n	8011416 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011412:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8011416:	4618      	mov	r0, r3
 8011418:	3720      	adds	r7, #32
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}
 801141e:	bf00      	nop
 8011420:	2000001c 	.word	0x2000001c
 8011424:	10624dd3 	.word	0x10624dd3

08011428 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011428:	b480      	push	{r7}
 801142a:	b085      	sub	sp, #20
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011430:	4b22      	ldr	r3, [pc, #136]	@ (80114bc <SDMMC_GetCmdResp7+0x94>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	4a22      	ldr	r2, [pc, #136]	@ (80114c0 <SDMMC_GetCmdResp7+0x98>)
 8011436:	fba2 2303 	umull	r2, r3, r2, r3
 801143a:	0a5b      	lsrs	r3, r3, #9
 801143c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011440:	fb02 f303 	mul.w	r3, r2, r3
 8011444:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	1e5a      	subs	r2, r3, #1
 801144a:	60fa      	str	r2, [r7, #12]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d102      	bne.n	8011456 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011450:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011454:	e02c      	b.n	80114b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801145a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011462:	2b00      	cmp	r3, #0
 8011464:	d0ef      	beq.n	8011446 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801146c:	2b00      	cmp	r3, #0
 801146e:	d1ea      	bne.n	8011446 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011474:	f003 0304 	and.w	r3, r3, #4
 8011478:	2b00      	cmp	r3, #0
 801147a:	d004      	beq.n	8011486 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2204      	movs	r2, #4
 8011480:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011482:	2304      	movs	r3, #4
 8011484:	e014      	b.n	80114b0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801148a:	f003 0301 	and.w	r3, r3, #1
 801148e:	2b00      	cmp	r3, #0
 8011490:	d004      	beq.n	801149c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2201      	movs	r2, #1
 8011496:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011498:	2301      	movs	r3, #1
 801149a:	e009      	b.n	80114b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d002      	beq.n	80114ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2240      	movs	r2, #64	@ 0x40
 80114ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80114ae:	2300      	movs	r3, #0
  
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3714      	adds	r7, #20
 80114b4:	46bd      	mov	sp, r7
 80114b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ba:	4770      	bx	lr
 80114bc:	2000001c 	.word	0x2000001c
 80114c0:	10624dd3 	.word	0x10624dd3

080114c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80114c4:	b480      	push	{r7}
 80114c6:	b085      	sub	sp, #20
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80114cc:	4b11      	ldr	r3, [pc, #68]	@ (8011514 <SDMMC_GetCmdError+0x50>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4a11      	ldr	r2, [pc, #68]	@ (8011518 <SDMMC_GetCmdError+0x54>)
 80114d2:	fba2 2303 	umull	r2, r3, r2, r3
 80114d6:	0a5b      	lsrs	r3, r3, #9
 80114d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80114dc:	fb02 f303 	mul.w	r3, r2, r3
 80114e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	1e5a      	subs	r2, r3, #1
 80114e6:	60fa      	str	r2, [r7, #12]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d102      	bne.n	80114f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80114ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80114f0:	e009      	b.n	8011506 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d0f1      	beq.n	80114e2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	22c5      	movs	r2, #197	@ 0xc5
 8011502:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8011504:	2300      	movs	r3, #0
}
 8011506:	4618      	mov	r0, r3
 8011508:	3714      	adds	r7, #20
 801150a:	46bd      	mov	sp, r7
 801150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011510:	4770      	bx	lr
 8011512:	bf00      	nop
 8011514:	2000001c 	.word	0x2000001c
 8011518:	10624dd3 	.word	0x10624dd3

0801151c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801151c:	b480      	push	{r7}
 801151e:	b083      	sub	sp, #12
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	689b      	ldr	r3, [r3, #8]
 8011528:	f043 0201 	orr.w	r2, r3, #1
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011530:	2300      	movs	r3, #0
}
 8011532:	4618      	mov	r0, r3
 8011534:	370c      	adds	r7, #12
 8011536:	46bd      	mov	sp, r7
 8011538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153c:	4770      	bx	lr

0801153e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801153e:	b480      	push	{r7}
 8011540:	b083      	sub	sp, #12
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	689b      	ldr	r3, [r3, #8]
 801154a:	f023 0201 	bic.w	r2, r3, #1
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011552:	2300      	movs	r3, #0
}
 8011554:	4618      	mov	r0, r3
 8011556:	370c      	adds	r7, #12
 8011558:	46bd      	mov	sp, r7
 801155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155e:	4770      	bx	lr

08011560 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011560:	b480      	push	{r7}
 8011562:	b085      	sub	sp, #20
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801156a:	2300      	movs	r3, #0
 801156c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	3301      	adds	r3, #1
 8011572:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801157a:	d901      	bls.n	8011580 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801157c:	2303      	movs	r3, #3
 801157e:	e01b      	b.n	80115b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	691b      	ldr	r3, [r3, #16]
 8011584:	2b00      	cmp	r3, #0
 8011586:	daf2      	bge.n	801156e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011588:	2300      	movs	r3, #0
 801158a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	019b      	lsls	r3, r3, #6
 8011590:	f043 0220 	orr.w	r2, r3, #32
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	3301      	adds	r3, #1
 801159c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80115a4:	d901      	bls.n	80115aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80115a6:	2303      	movs	r3, #3
 80115a8:	e006      	b.n	80115b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	691b      	ldr	r3, [r3, #16]
 80115ae:	f003 0320 	and.w	r3, r3, #32
 80115b2:	2b20      	cmp	r3, #32
 80115b4:	d0f0      	beq.n	8011598 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80115b6:	2300      	movs	r3, #0
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3714      	adds	r7, #20
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80115c4:	b480      	push	{r7}
 80115c6:	b085      	sub	sp, #20
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80115cc:	2300      	movs	r3, #0
 80115ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	3301      	adds	r3, #1
 80115d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80115dc:	d901      	bls.n	80115e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80115de:	2303      	movs	r3, #3
 80115e0:	e018      	b.n	8011614 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	691b      	ldr	r3, [r3, #16]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	daf2      	bge.n	80115d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80115ea:	2300      	movs	r3, #0
 80115ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2210      	movs	r2, #16
 80115f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	3301      	adds	r3, #1
 80115f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011600:	d901      	bls.n	8011606 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011602:	2303      	movs	r3, #3
 8011604:	e006      	b.n	8011614 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	691b      	ldr	r3, [r3, #16]
 801160a:	f003 0310 	and.w	r3, r3, #16
 801160e:	2b10      	cmp	r3, #16
 8011610:	d0f0      	beq.n	80115f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011612:	2300      	movs	r3, #0
}
 8011614:	4618      	mov	r0, r3
 8011616:	3714      	adds	r7, #20
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr

08011620 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011620:	b480      	push	{r7}
 8011622:	b08b      	sub	sp, #44	@ 0x2c
 8011624:	af00      	add	r7, sp, #0
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	60b9      	str	r1, [r7, #8]
 801162a:	4613      	mov	r3, r2
 801162c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011636:	88fb      	ldrh	r3, [r7, #6]
 8011638:	089b      	lsrs	r3, r3, #2
 801163a:	b29b      	uxth	r3, r3
 801163c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801163e:	88fb      	ldrh	r3, [r7, #6]
 8011640:	f003 0303 	and.w	r3, r3, #3
 8011644:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011646:	2300      	movs	r3, #0
 8011648:	623b      	str	r3, [r7, #32]
 801164a:	e014      	b.n	8011676 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801164c:	69bb      	ldr	r3, [r7, #24]
 801164e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011652:	681a      	ldr	r2, [r3, #0]
 8011654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011656:	601a      	str	r2, [r3, #0]
    pDest++;
 8011658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801165a:	3301      	adds	r3, #1
 801165c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801165e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011660:	3301      	adds	r3, #1
 8011662:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011666:	3301      	adds	r3, #1
 8011668:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801166c:	3301      	adds	r3, #1
 801166e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011670:	6a3b      	ldr	r3, [r7, #32]
 8011672:	3301      	adds	r3, #1
 8011674:	623b      	str	r3, [r7, #32]
 8011676:	6a3a      	ldr	r2, [r7, #32]
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	429a      	cmp	r2, r3
 801167c:	d3e6      	bcc.n	801164c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801167e:	8bfb      	ldrh	r3, [r7, #30]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d01e      	beq.n	80116c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011684:	2300      	movs	r3, #0
 8011686:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011688:	69bb      	ldr	r3, [r7, #24]
 801168a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801168e:	461a      	mov	r2, r3
 8011690:	f107 0310 	add.w	r3, r7, #16
 8011694:	6812      	ldr	r2, [r2, #0]
 8011696:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011698:	693a      	ldr	r2, [r7, #16]
 801169a:	6a3b      	ldr	r3, [r7, #32]
 801169c:	b2db      	uxtb	r3, r3
 801169e:	00db      	lsls	r3, r3, #3
 80116a0:	fa22 f303 	lsr.w	r3, r2, r3
 80116a4:	b2da      	uxtb	r2, r3
 80116a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116a8:	701a      	strb	r2, [r3, #0]
      i++;
 80116aa:	6a3b      	ldr	r3, [r7, #32]
 80116ac:	3301      	adds	r3, #1
 80116ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80116b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b2:	3301      	adds	r3, #1
 80116b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80116b6:	8bfb      	ldrh	r3, [r7, #30]
 80116b8:	3b01      	subs	r3, #1
 80116ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80116bc:	8bfb      	ldrh	r3, [r7, #30]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d1ea      	bne.n	8011698 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80116c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	372c      	adds	r7, #44	@ 0x2c
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr

080116d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b085      	sub	sp, #20
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	695b      	ldr	r3, [r3, #20]
 80116dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	699b      	ldr	r3, [r3, #24]
 80116e2:	68fa      	ldr	r2, [r7, #12]
 80116e4:	4013      	ands	r3, r2
 80116e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80116e8:	68fb      	ldr	r3, [r7, #12]
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3714      	adds	r7, #20
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr

080116f6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80116f6:	b480      	push	{r7}
 80116f8:	b085      	sub	sp, #20
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
 80116fe:	460b      	mov	r3, r1
 8011700:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8011706:	78fb      	ldrb	r3, [r7, #3]
 8011708:	015a      	lsls	r2, r3, #5
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	4413      	add	r3, r2
 801170e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011712:	689b      	ldr	r3, [r3, #8]
 8011714:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8011716:	78fb      	ldrb	r3, [r7, #3]
 8011718:	015a      	lsls	r2, r3, #5
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	4413      	add	r3, r2
 801171e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011722:	68db      	ldr	r3, [r3, #12]
 8011724:	68ba      	ldr	r2, [r7, #8]
 8011726:	4013      	ands	r3, r2
 8011728:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801172a:	68bb      	ldr	r3, [r7, #8]
}
 801172c:	4618      	mov	r0, r3
 801172e:	3714      	adds	r7, #20
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr

08011738 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011738:	b480      	push	{r7}
 801173a:	b083      	sub	sp, #12
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	695b      	ldr	r3, [r3, #20]
 8011744:	f003 0301 	and.w	r3, r3, #1
}
 8011748:	4618      	mov	r0, r3
 801174a:	370c      	adds	r7, #12
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr

08011754 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8011754:	b480      	push	{r7}
 8011756:	b085      	sub	sp, #20
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	460b      	mov	r3, r1
 801175e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	68fa      	ldr	r2, [r7, #12]
 801176e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011772:	f023 0303 	bic.w	r3, r3, #3
 8011776:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	78fb      	ldrb	r3, [r7, #3]
 8011782:	f003 0303 	and.w	r3, r3, #3
 8011786:	68f9      	ldr	r1, [r7, #12]
 8011788:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 801178c:	4313      	orrs	r3, r2
 801178e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011790:	78fb      	ldrb	r3, [r7, #3]
 8011792:	2b01      	cmp	r3, #1
 8011794:	d107      	bne.n	80117a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801179c:	461a      	mov	r2, r3
 801179e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80117a2:	6053      	str	r3, [r2, #4]
 80117a4:	e00c      	b.n	80117c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80117a6:	78fb      	ldrb	r3, [r7, #3]
 80117a8:	2b02      	cmp	r3, #2
 80117aa:	d107      	bne.n	80117bc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80117b2:	461a      	mov	r2, r3
 80117b4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80117b8:	6053      	str	r3, [r2, #4]
 80117ba:	e001      	b.n	80117c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80117bc:	2301      	movs	r3, #1
 80117be:	e000      	b.n	80117c2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80117c0:	2300      	movs	r3, #0
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3714      	adds	r7, #20
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr

080117ce <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80117ce:	b480      	push	{r7}
 80117d0:	b085      	sub	sp, #20
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80117e0:	695b      	ldr	r3, [r3, #20]
 80117e2:	b29b      	uxth	r3, r3
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3714      	adds	r7, #20
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr

080117f0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b089      	sub	sp, #36	@ 0x24
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	460b      	mov	r3, r1
 80117fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8011800:	78fb      	ldrb	r3, [r7, #3]
 8011802:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8011804:	2300      	movs	r3, #0
 8011806:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8011808:	69bb      	ldr	r3, [r7, #24]
 801180a:	015a      	lsls	r2, r3, #5
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	4413      	add	r3, r2
 8011810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	0c9b      	lsrs	r3, r3, #18
 8011818:	f003 0303 	and.w	r3, r3, #3
 801181c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 801181e:	69bb      	ldr	r3, [r7, #24]
 8011820:	015a      	lsls	r2, r3, #5
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	4413      	add	r3, r2
 8011826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	0fdb      	lsrs	r3, r3, #31
 801182e:	f003 0301 	and.w	r3, r3, #1
 8011832:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8011834:	69bb      	ldr	r3, [r7, #24]
 8011836:	015a      	lsls	r2, r3, #5
 8011838:	69fb      	ldr	r3, [r7, #28]
 801183a:	4413      	add	r3, r2
 801183c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	0fdb      	lsrs	r3, r3, #31
 8011844:	f003 0301 	and.w	r3, r3, #1
 8011848:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	689b      	ldr	r3, [r3, #8]
 801184e:	f003 0320 	and.w	r3, r3, #32
 8011852:	2b20      	cmp	r3, #32
 8011854:	d10d      	bne.n	8011872 <USB_HC_Halt+0x82>
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d10a      	bne.n	8011872 <USB_HC_Halt+0x82>
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d005      	beq.n	801186e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	2b01      	cmp	r3, #1
 8011866:	d002      	beq.n	801186e <USB_HC_Halt+0x7e>
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	2b03      	cmp	r3, #3
 801186c:	d101      	bne.n	8011872 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 801186e:	2300      	movs	r3, #0
 8011870:	e0d8      	b.n	8011a24 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d002      	beq.n	801187e <USB_HC_Halt+0x8e>
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	2b02      	cmp	r3, #2
 801187c:	d173      	bne.n	8011966 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801187e:	69bb      	ldr	r3, [r7, #24]
 8011880:	015a      	lsls	r2, r3, #5
 8011882:	69fb      	ldr	r3, [r7, #28]
 8011884:	4413      	add	r3, r2
 8011886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	69ba      	ldr	r2, [r7, #24]
 801188e:	0151      	lsls	r1, r2, #5
 8011890:	69fa      	ldr	r2, [r7, #28]
 8011892:	440a      	add	r2, r1
 8011894:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011898:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801189c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	689b      	ldr	r3, [r3, #8]
 80118a2:	f003 0320 	and.w	r3, r3, #32
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d14a      	bne.n	8011940 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d133      	bne.n	801191e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80118b6:	69bb      	ldr	r3, [r7, #24]
 80118b8:	015a      	lsls	r2, r3, #5
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	4413      	add	r3, r2
 80118be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	69ba      	ldr	r2, [r7, #24]
 80118c6:	0151      	lsls	r1, r2, #5
 80118c8:	69fa      	ldr	r2, [r7, #28]
 80118ca:	440a      	add	r2, r1
 80118cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80118d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80118d4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80118d6:	69bb      	ldr	r3, [r7, #24]
 80118d8:	015a      	lsls	r2, r3, #5
 80118da:	69fb      	ldr	r3, [r7, #28]
 80118dc:	4413      	add	r3, r2
 80118de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	69ba      	ldr	r2, [r7, #24]
 80118e6:	0151      	lsls	r1, r2, #5
 80118e8:	69fa      	ldr	r2, [r7, #28]
 80118ea:	440a      	add	r2, r1
 80118ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80118f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80118f4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	3301      	adds	r3, #1
 80118fa:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011902:	d82e      	bhi.n	8011962 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011904:	69bb      	ldr	r3, [r7, #24]
 8011906:	015a      	lsls	r2, r3, #5
 8011908:	69fb      	ldr	r3, [r7, #28]
 801190a:	4413      	add	r3, r2
 801190c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011916:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801191a:	d0ec      	beq.n	80118f6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801191c:	e081      	b.n	8011a22 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801191e:	69bb      	ldr	r3, [r7, #24]
 8011920:	015a      	lsls	r2, r3, #5
 8011922:	69fb      	ldr	r3, [r7, #28]
 8011924:	4413      	add	r3, r2
 8011926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	69ba      	ldr	r2, [r7, #24]
 801192e:	0151      	lsls	r1, r2, #5
 8011930:	69fa      	ldr	r2, [r7, #28]
 8011932:	440a      	add	r2, r1
 8011934:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011938:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801193c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801193e:	e070      	b.n	8011a22 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011940:	69bb      	ldr	r3, [r7, #24]
 8011942:	015a      	lsls	r2, r3, #5
 8011944:	69fb      	ldr	r3, [r7, #28]
 8011946:	4413      	add	r3, r2
 8011948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	69ba      	ldr	r2, [r7, #24]
 8011950:	0151      	lsls	r1, r2, #5
 8011952:	69fa      	ldr	r2, [r7, #28]
 8011954:	440a      	add	r2, r1
 8011956:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801195a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801195e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011960:	e05f      	b.n	8011a22 <USB_HC_Halt+0x232>
            break;
 8011962:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011964:	e05d      	b.n	8011a22 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011966:	69bb      	ldr	r3, [r7, #24]
 8011968:	015a      	lsls	r2, r3, #5
 801196a:	69fb      	ldr	r3, [r7, #28]
 801196c:	4413      	add	r3, r2
 801196e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	69ba      	ldr	r2, [r7, #24]
 8011976:	0151      	lsls	r1, r2, #5
 8011978:	69fa      	ldr	r2, [r7, #28]
 801197a:	440a      	add	r2, r1
 801197c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011980:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011984:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8011986:	69fb      	ldr	r3, [r7, #28]
 8011988:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801198c:	691b      	ldr	r3, [r3, #16]
 801198e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011992:	2b00      	cmp	r3, #0
 8011994:	d133      	bne.n	80119fe <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011996:	69bb      	ldr	r3, [r7, #24]
 8011998:	015a      	lsls	r2, r3, #5
 801199a:	69fb      	ldr	r3, [r7, #28]
 801199c:	4413      	add	r3, r2
 801199e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	69ba      	ldr	r2, [r7, #24]
 80119a6:	0151      	lsls	r1, r2, #5
 80119a8:	69fa      	ldr	r2, [r7, #28]
 80119aa:	440a      	add	r2, r1
 80119ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80119b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80119b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	015a      	lsls	r2, r3, #5
 80119ba:	69fb      	ldr	r3, [r7, #28]
 80119bc:	4413      	add	r3, r2
 80119be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	69ba      	ldr	r2, [r7, #24]
 80119c6:	0151      	lsls	r1, r2, #5
 80119c8:	69fa      	ldr	r2, [r7, #28]
 80119ca:	440a      	add	r2, r1
 80119cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80119d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80119d4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	3301      	adds	r3, #1
 80119da:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80119e2:	d81d      	bhi.n	8011a20 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80119e4:	69bb      	ldr	r3, [r7, #24]
 80119e6:	015a      	lsls	r2, r3, #5
 80119e8:	69fb      	ldr	r3, [r7, #28]
 80119ea:	4413      	add	r3, r2
 80119ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80119f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80119fa:	d0ec      	beq.n	80119d6 <USB_HC_Halt+0x1e6>
 80119fc:	e011      	b.n	8011a22 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	015a      	lsls	r2, r3, #5
 8011a02:	69fb      	ldr	r3, [r7, #28]
 8011a04:	4413      	add	r3, r2
 8011a06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	69ba      	ldr	r2, [r7, #24]
 8011a0e:	0151      	lsls	r1, r2, #5
 8011a10:	69fa      	ldr	r2, [r7, #28]
 8011a12:	440a      	add	r2, r1
 8011a14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011a1c:	6013      	str	r3, [r2, #0]
 8011a1e:	e000      	b.n	8011a22 <USB_HC_Halt+0x232>
          break;
 8011a20:	bf00      	nop
    }
  }

  return HAL_OK;
 8011a22:	2300      	movs	r3, #0
}
 8011a24:	4618      	mov	r0, r3
 8011a26:	3724      	adds	r7, #36	@ 0x24
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr

08011a30 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b088      	sub	sp, #32
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8011a40:	2300      	movs	r3, #0
 8011a42:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f7ff fd7a 	bl	801153e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011a4a:	2110      	movs	r1, #16
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f7ff fd87 	bl	8011560 <USB_FlushTxFifo>
 8011a52:	4603      	mov	r3, r0
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d001      	beq.n	8011a5c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8011a58:	2301      	movs	r3, #1
 8011a5a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f7ff fdb1 	bl	80115c4 <USB_FlushRxFifo>
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d001      	beq.n	8011a6c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8011a68:	2301      	movs	r3, #1
 8011a6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	61bb      	str	r3, [r7, #24]
 8011a70:	e01f      	b.n	8011ab2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8011a72:	69bb      	ldr	r3, [r7, #24]
 8011a74:	015a      	lsls	r2, r3, #5
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	4413      	add	r3, r2
 8011a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011a88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011a90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011a98:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011a9a:	69bb      	ldr	r3, [r7, #24]
 8011a9c:	015a      	lsls	r2, r3, #5
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8011aac:	69bb      	ldr	r3, [r7, #24]
 8011aae:	3301      	adds	r3, #1
 8011ab0:	61bb      	str	r3, [r7, #24]
 8011ab2:	69bb      	ldr	r3, [r7, #24]
 8011ab4:	2b0f      	cmp	r3, #15
 8011ab6:	d9dc      	bls.n	8011a72 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8011ab8:	2300      	movs	r3, #0
 8011aba:	61bb      	str	r3, [r7, #24]
 8011abc:	e034      	b.n	8011b28 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	015a      	lsls	r2, r3, #5
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	4413      	add	r3, r2
 8011ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011ad4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011adc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011ae4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011ae6:	69bb      	ldr	r3, [r7, #24]
 8011ae8:	015a      	lsls	r2, r3, #5
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	4413      	add	r3, r2
 8011aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011af2:	461a      	mov	r2, r3
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	3301      	adds	r3, #1
 8011afc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011b04:	d80c      	bhi.n	8011b20 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	015a      	lsls	r2, r3, #5
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	4413      	add	r3, r2
 8011b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011b1c:	d0ec      	beq.n	8011af8 <USB_StopHost+0xc8>
 8011b1e:	e000      	b.n	8011b22 <USB_StopHost+0xf2>
        break;
 8011b20:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	3301      	adds	r3, #1
 8011b26:	61bb      	str	r3, [r7, #24]
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	2b0f      	cmp	r3, #15
 8011b2c:	d9c7      	bls.n	8011abe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b34:	461a      	mov	r2, r3
 8011b36:	f04f 33ff 	mov.w	r3, #4294967295
 8011b3a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8011b42:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f7ff fce9 	bl	801151c <USB_EnableGlobalInt>

  return ret;
 8011b4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3720      	adds	r7, #32
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011b58:	4904      	ldr	r1, [pc, #16]	@ (8011b6c <MX_FATFS_Init+0x18>)
 8011b5a:	4805      	ldr	r0, [pc, #20]	@ (8011b70 <MX_FATFS_Init+0x1c>)
 8011b5c:	f003 f91e 	bl	8014d9c <FATFS_LinkDriver>
 8011b60:	4603      	mov	r3, r0
 8011b62:	461a      	mov	r2, r3
 8011b64:	4b03      	ldr	r3, [pc, #12]	@ (8011b74 <MX_FATFS_Init+0x20>)
 8011b66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011b68:	bf00      	nop
 8011b6a:	bd80      	pop	{r7, pc}
 8011b6c:	200026d4 	.word	0x200026d4
 8011b70:	0801c148 	.word	0x0801c148
 8011b74:	200026d0 	.word	0x200026d0

08011b78 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011b7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	46bd      	mov	sp, r7
 8011b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b86:	4770      	bx	lr

08011b88 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011b92:	f000 f879 	bl	8011c88 <BSP_SD_IsDetected>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b01      	cmp	r3, #1
 8011b9a:	d001      	beq.n	8011ba0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011b9c:	2302      	movs	r3, #2
 8011b9e:	e012      	b.n	8011bc6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011ba0:	480b      	ldr	r0, [pc, #44]	@ (8011bd0 <BSP_SD_Init+0x48>)
 8011ba2:	f7fa feed 	bl	800c980 <HAL_SD_Init>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011baa:	79fb      	ldrb	r3, [r7, #7]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d109      	bne.n	8011bc4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011bb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011bb4:	4806      	ldr	r0, [pc, #24]	@ (8011bd0 <BSP_SD_Init+0x48>)
 8011bb6:	f7fb fcc7 	bl	800d548 <HAL_SD_ConfigWideBusOperation>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d001      	beq.n	8011bc4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011bc4:	79fb      	ldrb	r3, [r7, #7]
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3708      	adds	r7, #8
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	bf00      	nop
 8011bd0:	20001d90 	.word	0x20001d90

08011bd4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b088      	sub	sp, #32
 8011bd8:	af02      	add	r7, sp, #8
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	60b9      	str	r1, [r7, #8]
 8011bde:	607a      	str	r2, [r7, #4]
 8011be0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011be2:	2300      	movs	r3, #0
 8011be4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	9300      	str	r3, [sp, #0]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	68ba      	ldr	r2, [r7, #8]
 8011bee:	68f9      	ldr	r1, [r7, #12]
 8011bf0:	4806      	ldr	r0, [pc, #24]	@ (8011c0c <BSP_SD_ReadBlocks+0x38>)
 8011bf2:	f7fa ff75 	bl	800cae0 <HAL_SD_ReadBlocks>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d001      	beq.n	8011c00 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3718      	adds	r7, #24
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}
 8011c0a:	bf00      	nop
 8011c0c:	20001d90 	.word	0x20001d90

08011c10 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b088      	sub	sp, #32
 8011c14:	af02      	add	r7, sp, #8
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	607a      	str	r2, [r7, #4]
 8011c1c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	9300      	str	r3, [sp, #0]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	68ba      	ldr	r2, [r7, #8]
 8011c2a:	68f9      	ldr	r1, [r7, #12]
 8011c2c:	4806      	ldr	r0, [pc, #24]	@ (8011c48 <BSP_SD_WriteBlocks+0x38>)
 8011c2e:	f7fb f935 	bl	800ce9c <HAL_SD_WriteBlocks>
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d001      	beq.n	8011c3c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011c38:	2301      	movs	r3, #1
 8011c3a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3718      	adds	r7, #24
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	20001d90 	.word	0x20001d90

08011c4c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011c50:	4805      	ldr	r0, [pc, #20]	@ (8011c68 <BSP_SD_GetCardState+0x1c>)
 8011c52:	f7fb fd13 	bl	800d67c <HAL_SD_GetCardState>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b04      	cmp	r3, #4
 8011c5a:	bf14      	ite	ne
 8011c5c:	2301      	movne	r3, #1
 8011c5e:	2300      	moveq	r3, #0
 8011c60:	b2db      	uxtb	r3, r3
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	bf00      	nop
 8011c68:	20001d90 	.word	0x20001d90

08011c6c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011c74:	6879      	ldr	r1, [r7, #4]
 8011c76:	4803      	ldr	r0, [pc, #12]	@ (8011c84 <BSP_SD_GetCardInfo+0x18>)
 8011c78:	f7fb fc3a 	bl	800d4f0 <HAL_SD_GetCardInfo>
}
 8011c7c:	bf00      	nop
 8011c7e:	3708      	adds	r7, #8
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}
 8011c84:	20001d90 	.word	0x20001d90

08011c88 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011c8e:	2301      	movs	r3, #1
 8011c90:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011c92:	f000 f80b 	bl	8011cac <BSP_PlatformIsDetected>
 8011c96:	4603      	mov	r3, r0
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d101      	bne.n	8011ca0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011ca0:	79fb      	ldrb	r3, [r7, #7]
 8011ca2:	b2db      	uxtb	r3, r3
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3708      	adds	r7, #8
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}

08011cac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011cb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011cba:	4806      	ldr	r0, [pc, #24]	@ (8011cd4 <BSP_PlatformIsDetected+0x28>)
 8011cbc:	f7f6 fbac 	bl	8008418 <HAL_GPIO_ReadPin>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d001      	beq.n	8011cca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011cca:	79fb      	ldrb	r3, [r7, #7]
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3708      	adds	r7, #8
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	40020800 	.word	0x40020800

08011cd8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b087      	sub	sp, #28
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8011cea:	2320      	movs	r3, #32
 8011cec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011cee:	f3bf 8f4f 	dsb	sy
}
 8011cf2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8011cf4:	e00b      	b.n	8011d0e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8011cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8011d2c <SCB_InvalidateDCache_by_Addr+0x54>)
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	693a      	ldr	r2, [r7, #16]
 8011d02:	4413      	add	r3, r2
 8011d04:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8011d06:	697a      	ldr	r2, [r7, #20]
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	1ad3      	subs	r3, r2, r3
 8011d0c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	dcf0      	bgt.n	8011cf6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011d14:	f3bf 8f4f 	dsb	sy
}
 8011d18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011d1a:	f3bf 8f6f 	isb	sy
}
 8011d1e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011d20:	bf00      	nop
 8011d22:	371c      	adds	r7, #28
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr
 8011d2c:	e000ed00 	.word	0xe000ed00

08011d30 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011d30:	b480      	push	{r7}
 8011d32:	b087      	sub	sp, #28
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8011d42:	2320      	movs	r3, #32
 8011d44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011d46:	f3bf 8f4f 	dsb	sy
}
 8011d4a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8011d4c:	e00b      	b.n	8011d66 <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8011d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8011d84 <SCB_CleanDCache_by_Addr+0x54>)
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	693a      	ldr	r2, [r7, #16]
 8011d5a:	4413      	add	r3, r2
 8011d5c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8011d5e:	697a      	ldr	r2, [r7, #20]
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	1ad3      	subs	r3, r2, r3
 8011d64:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	dcf0      	bgt.n	8011d4e <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011d6c:	f3bf 8f4f 	dsb	sy
}
 8011d70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011d72:	f3bf 8f6f 	isb	sy
}
 8011d76:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011d78:	bf00      	nop
 8011d7a:	371c      	adds	r7, #28
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d82:	4770      	bx	lr
 8011d84:	e000ed00 	.word	0xe000ed00

08011d88 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b084      	sub	sp, #16
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011d90:	f003 f850 	bl	8014e34 <osKernelSysTick>
 8011d94:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8011d96:	e006      	b.n	8011da6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011d98:	f7ff ff58 	bl	8011c4c <BSP_SD_GetCardState>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d101      	bne.n	8011da6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011da2:	2300      	movs	r3, #0
 8011da4:	e009      	b.n	8011dba <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8011da6:	f003 f845 	bl	8014e34 <osKernelSysTick>
 8011daa:	4602      	mov	r2, r0
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d8f0      	bhi.n	8011d98 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
	...

08011dc4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	4603      	mov	r3, r0
 8011dcc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011dce:	4b0b      	ldr	r3, [pc, #44]	@ (8011dfc <SD_CheckStatus+0x38>)
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011dd4:	f7ff ff3a 	bl	8011c4c <BSP_SD_GetCardState>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d107      	bne.n	8011dee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011dde:	4b07      	ldr	r3, [pc, #28]	@ (8011dfc <SD_CheckStatus+0x38>)
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	f023 0301 	bic.w	r3, r3, #1
 8011de8:	b2da      	uxtb	r2, r3
 8011dea:	4b04      	ldr	r3, [pc, #16]	@ (8011dfc <SD_CheckStatus+0x38>)
 8011dec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011dee:	4b03      	ldr	r3, [pc, #12]	@ (8011dfc <SD_CheckStatus+0x38>)
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	b2db      	uxtb	r3, r3
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3708      	adds	r7, #8
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	20000071 	.word	0x20000071

08011e00 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011e00:	b590      	push	{r4, r7, lr}
 8011e02:	b087      	sub	sp, #28
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	4603      	mov	r3, r0
 8011e08:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8011e80 <SD_initialize+0x80>)
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8011e10:	f003 f804 	bl	8014e1c <osKernelRunning>
 8011e14:	4603      	mov	r3, r0
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d02b      	beq.n	8011e72 <SD_initialize+0x72>
    {
      Stat = SD_CheckStatus(lun);
    }

#else
    Stat = SD_CheckStatus(lun);
 8011e1a:	79fb      	ldrb	r3, [r7, #7]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7ff ffd1 	bl	8011dc4 <SD_CheckStatus>
 8011e22:	4603      	mov	r3, r0
 8011e24:	461a      	mov	r2, r3
 8011e26:	4b16      	ldr	r3, [pc, #88]	@ (8011e80 <SD_initialize+0x80>)
 8011e28:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8011e2a:	4b15      	ldr	r3, [pc, #84]	@ (8011e80 <SD_initialize+0x80>)
 8011e2c:	781b      	ldrb	r3, [r3, #0]
 8011e2e:	b2db      	uxtb	r3, r3
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	d01e      	beq.n	8011e72 <SD_initialize+0x72>
    {
      if (SDQueueID == NULL)
 8011e34:	4b13      	ldr	r3, [pc, #76]	@ (8011e84 <SD_initialize+0x84>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d10e      	bne.n	8011e5a <SD_initialize+0x5a>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8011e3c:	4b12      	ldr	r3, [pc, #72]	@ (8011e88 <SD_initialize+0x88>)
 8011e3e:	f107 0408 	add.w	r4, r7, #8
 8011e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8011e48:	f107 0308 	add.w	r3, r7, #8
 8011e4c:	2100      	movs	r1, #0
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f003 f860 	bl	8014f14 <osMessageCreate>
 8011e54:	4603      	mov	r3, r0
 8011e56:	4a0b      	ldr	r2, [pc, #44]	@ (8011e84 <SD_initialize+0x84>)
 8011e58:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8011e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8011e84 <SD_initialize+0x84>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d107      	bne.n	8011e72 <SD_initialize+0x72>
      {
        Stat |= STA_NOINIT;
 8011e62:	4b07      	ldr	r3, [pc, #28]	@ (8011e80 <SD_initialize+0x80>)
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	f043 0301 	orr.w	r3, r3, #1
 8011e6c:	b2da      	uxtb	r2, r3
 8011e6e:	4b04      	ldr	r3, [pc, #16]	@ (8011e80 <SD_initialize+0x80>)
 8011e70:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8011e72:	4b03      	ldr	r3, [pc, #12]	@ (8011e80 <SD_initialize+0x80>)
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	b2db      	uxtb	r3, r3
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	371c      	adds	r7, #28
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd90      	pop	{r4, r7, pc}
 8011e80:	20000071 	.word	0x20000071
 8011e84:	20002b20 	.word	0x20002b20
 8011e88:	0801c0cc 	.word	0x0801c0cc

08011e8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b082      	sub	sp, #8
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	4603      	mov	r3, r0
 8011e94:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011e96:	79fb      	ldrb	r3, [r7, #7]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7ff ff93 	bl	8011dc4 <SD_CheckStatus>
 8011e9e:	4603      	mov	r3, r0
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3708      	adds	r7, #8
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}

08011ea8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b08a      	sub	sp, #40	@ 0x28
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	60b9      	str	r1, [r7, #8]
 8011eb0:	607a      	str	r2, [r7, #4]
 8011eb2:	603b      	str	r3, [r7, #0]
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8011eb8:	2301      	movs	r3, #1
 8011eba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011ebe:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011ec2:	f7ff ff61 	bl	8011d88 <SD_CheckStatusWithTimeout>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	da02      	bge.n	8011ed2 <SD_read+0x2a>
  {
    return res;
 8011ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011ed0:	e051      	b.n	8011f76 <SD_read+0xce>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	f003 0303 	and.w	r3, r3, #3
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d111      	bne.n	8011f00 <SD_read+0x58>
  {
#endif
    /* Use polling mode instead of DMA to avoid callback issues */
    ret = BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT);
 8011edc:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011ee0:	683a      	ldr	r2, [r7, #0]
 8011ee2:	6879      	ldr	r1, [r7, #4]
 8011ee4:	68b8      	ldr	r0, [r7, #8]
 8011ee6:	f7ff fe75 	bl	8011bd4 <BSP_SD_ReadBlocks>
 8011eea:	4603      	mov	r3, r0
 8011eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ret == MSD_OK) {
 8011ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d13c      	bne.n	8011f72 <SD_read+0xca>
      /* Polling mode - no need for message queue */
      res = RES_OK;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011efe:	e038      	b.n	8011f72 <SD_read+0xca>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++)
 8011f00:	2300      	movs	r3, #0
 8011f02:	623b      	str	r3, [r7, #32]
 8011f04:	e024      	b.n	8011f50 <SD_read+0xa8>
      {
        ret = BSP_SD_ReadBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 8011f06:	6879      	ldr	r1, [r7, #4]
 8011f08:	1c4b      	adds	r3, r1, #1
 8011f0a:	607b      	str	r3, [r7, #4]
 8011f0c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011f10:	2201      	movs	r2, #1
 8011f12:	481b      	ldr	r0, [pc, #108]	@ (8011f80 <SD_read+0xd8>)
 8011f14:	f7ff fe5e 	bl	8011bd4 <BSP_SD_ReadBlocks>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret == MSD_OK )
 8011f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d119      	bne.n	8011f5a <SD_read+0xb2>
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
          /*
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8011f26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011f2a:	4815      	ldr	r0, [pc, #84]	@ (8011f80 <SD_read+0xd8>)
 8011f2c:	f7ff fed4 	bl	8011cd8 <SCB_InvalidateDCache_by_Addr>
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	4a13      	ldr	r2, [pc, #76]	@ (8011f80 <SD_read+0xd8>)
 8011f34:	4618      	mov	r0, r3
 8011f36:	4611      	mov	r1, r2
 8011f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	f005 fe94 	bl	8017c6a <memcpy>
          buff += BLOCKSIZE;
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8011f48:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8011f4a:	6a3b      	ldr	r3, [r7, #32]
 8011f4c:	3301      	adds	r3, #1
 8011f4e:	623b      	str	r3, [r7, #32]
 8011f50:	6a3b      	ldr	r3, [r7, #32]
 8011f52:	683a      	ldr	r2, [r7, #0]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d8d6      	bhi.n	8011f06 <SD_read+0x5e>
 8011f58:	e000      	b.n	8011f5c <SD_read+0xb4>
        }
        else
        {
          break;
 8011f5a:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 8011f5c:	6a3b      	ldr	r3, [r7, #32]
 8011f5e:	683a      	ldr	r2, [r7, #0]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d106      	bne.n	8011f72 <SD_read+0xca>
 8011f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d102      	bne.n	8011f72 <SD_read+0xca>
        res = RES_OK;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }
#endif
  return res;
 8011f72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3728      	adds	r7, #40	@ 0x28
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}
 8011f7e:	bf00      	nop
 8011f80:	20002920 	.word	0x20002920

08011f84 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b08c      	sub	sp, #48	@ 0x30
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	60b9      	str	r1, [r7, #8]
 8011f8c:	607a      	str	r2, [r7, #4]
 8011f8e:	603b      	str	r3, [r7, #0]
 8011f90:	4603      	mov	r3, r0
 8011f92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011f94:	2301      	movs	r3, #1
 8011f96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011f9a:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011f9e:	f7ff fef3 	bl	8011d88 <SD_CheckStatusWithTimeout>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	da02      	bge.n	8011fae <SD_write+0x2a>
  {
    return res;
 8011fa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011fac:	e082      	b.n	80120b4 <SD_write+0x130>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	f003 0303 	and.w	r3, r3, #3
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d17b      	bne.n	80120b0 <SD_write+0x12c>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	f023 031f 	bic.w	r3, r3, #31
 8011fbe:	623b      	str	r3, [r7, #32]
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8011fc0:	6a38      	ldr	r0, [r7, #32]
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	025a      	lsls	r2, r3, #9
 8011fc6:	68b9      	ldr	r1, [r7, #8]
 8011fc8:	6a3b      	ldr	r3, [r7, #32]
 8011fca:	1acb      	subs	r3, r1, r3
 8011fcc:	4413      	add	r3, r2
 8011fce:	4619      	mov	r1, r3
 8011fd0:	f7ff feae 	bl	8011d30 <SCB_CleanDCache_by_Addr>
#endif

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011fd4:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011fd8:	683a      	ldr	r2, [r7, #0]
 8011fda:	6879      	ldr	r1, [r7, #4]
 8011fdc:	68b8      	ldr	r0, [r7, #8]
 8011fde:	f7ff fe17 	bl	8011c10 <BSP_SD_WriteBlocks>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d103      	bne.n	8011ff0 <SD_write+0x6c>
                        (uint32_t) (sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
    /* Polling mode - no need for message queue */
    res = RES_OK;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011fee:	e05f      	b.n	80120b0 <SD_write+0x12c>

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
    /*
     * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
     */
     SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8011ff0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011ff4:	4831      	ldr	r0, [pc, #196]	@ (80120bc <SD_write+0x138>)
 8011ff6:	f7ff fe6f 	bl	8011cd8 <SCB_InvalidateDCache_by_Addr>
#endif
      for (i = 0; i < count; i++)
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ffe:	e045      	b.n	801208c <SD_write+0x108>
      {
        memcpy((void *)scratch, buff, BLOCKSIZE);
 8012000:	4a2e      	ldr	r2, [pc, #184]	@ (80120bc <SD_write+0x138>)
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	4610      	mov	r0, r2
 8012006:	4619      	mov	r1, r3
 8012008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801200c:	461a      	mov	r2, r3
 801200e:	f005 fe2c 	bl	8017c6a <memcpy>
        buff += BLOCKSIZE;
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012018:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 801201a:	6879      	ldr	r1, [r7, #4]
 801201c:	1c4b      	adds	r3, r1, #1
 801201e:	607b      	str	r3, [r7, #4]
 8012020:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012024:	2201      	movs	r2, #1
 8012026:	4825      	ldr	r0, [pc, #148]	@ (80120bc <SD_write+0x138>)
 8012028:	f7ff fdf2 	bl	8011c10 <BSP_SD_WriteBlocks>
 801202c:	4603      	mov	r3, r0
 801202e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (ret == MSD_OK )
 8012030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012032:	2b00      	cmp	r3, #0
 8012034:	d12f      	bne.n	8012096 <SD_write+0x112>
        {
          /* Polling mode - operation already completed */
#if (osCMSIS < 0x20000U)
          /* wait for a message from the queue or a timeout */
          event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012036:	4b22      	ldr	r3, [pc, #136]	@ (80120c0 <SD_write+0x13c>)
 8012038:	6819      	ldr	r1, [r3, #0]
 801203a:	f107 0310 	add.w	r3, r7, #16
 801203e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8012042:	4618      	mov	r0, r3
 8012044:	f002 ffce 	bl	8014fe4 <osMessageGet>

          if (event.status == osEventMessage)
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	2b10      	cmp	r3, #16
 801204c:	d11b      	bne.n	8012086 <SD_write+0x102>
          {
            if (event.value.v == READ_CPLT_MSG)
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	2b01      	cmp	r3, #1
 8012052:	d118      	bne.n	8012086 <SD_write+0x102>
            {
              timer = osKernelSysTick();
 8012054:	f002 feee 	bl	8014e34 <osKernelSysTick>
 8012058:	61f8      	str	r0, [r7, #28]
              /* block until SDIO IP is ready or a timeout occur */
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 801205a:	e006      	b.n	801206a <SD_write+0xe6>
                /* block until SDIO IP is ready or a timeout occur */
                ret = MSD_ERROR;
                while(osKernelGetTickCount() - timer < SD_TIMEOUT)
#endif
                {
                  ret = BSP_SD_GetCardState();
 801205c:	f7ff fdf6 	bl	8011c4c <BSP_SD_GetCardState>
 8012060:	4603      	mov	r3, r0
 8012062:	62bb      	str	r3, [r7, #40]	@ 0x28

                  if (ret == MSD_OK)
 8012064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012066:	2b00      	cmp	r3, #0
 8012068:	d009      	beq.n	801207e <SD_write+0xfa>
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 801206a:	f002 fee3 	bl	8014e34 <osKernelSysTick>
 801206e:	4602      	mov	r2, r0
 8012070:	69fb      	ldr	r3, [r7, #28]
 8012072:	1ad3      	subs	r3, r2, r3
 8012074:	f247 522f 	movw	r2, #29999	@ 0x752f
 8012078:	4293      	cmp	r3, r2
 801207a:	d9ef      	bls.n	801205c <SD_write+0xd8>
 801207c:	e000      	b.n	8012080 <SD_write+0xfc>
                  {
                    break;
 801207e:	bf00      	nop
                  }
                }

                if (ret != MSD_OK)
 8012080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012082:	2b00      	cmp	r3, #0
 8012084:	d109      	bne.n	801209a <SD_write+0x116>
      for (i = 0; i < count; i++)
 8012086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012088:	3301      	adds	r3, #1
 801208a:	627b      	str	r3, [r7, #36]	@ 0x24
 801208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801208e:	683a      	ldr	r2, [r7, #0]
 8012090:	429a      	cmp	r2, r3
 8012092:	d8b5      	bhi.n	8012000 <SD_write+0x7c>
 8012094:	e002      	b.n	801209c <SD_write+0x118>
          }
#endif
        }
        else
        {
          break;
 8012096:	bf00      	nop
 8012098:	e000      	b.n	801209c <SD_write+0x118>
                  break;
 801209a:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 801209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801209e:	683a      	ldr	r2, [r7, #0]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d105      	bne.n	80120b0 <SD_write+0x12c>
 80120a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d102      	bne.n	80120b0 <SD_write+0x12c>
        res = RES_OK;
 80120aa:	2300      	movs	r3, #0
 80120ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

  }
#endif

  return res;
 80120b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3730      	adds	r7, #48	@ 0x30
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}
 80120bc:	20002920 	.word	0x20002920
 80120c0:	20002b20 	.word	0x20002b20

080120c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b08c      	sub	sp, #48	@ 0x30
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	4603      	mov	r3, r0
 80120cc:	603a      	str	r2, [r7, #0]
 80120ce:	71fb      	strb	r3, [r7, #7]
 80120d0:	460b      	mov	r3, r1
 80120d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80120d4:	2301      	movs	r3, #1
 80120d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80120da:	4b25      	ldr	r3, [pc, #148]	@ (8012170 <SD_ioctl+0xac>)
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	b2db      	uxtb	r3, r3
 80120e0:	f003 0301 	and.w	r3, r3, #1
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d001      	beq.n	80120ec <SD_ioctl+0x28>
 80120e8:	2303      	movs	r3, #3
 80120ea:	e03c      	b.n	8012166 <SD_ioctl+0xa2>

  switch (cmd)
 80120ec:	79bb      	ldrb	r3, [r7, #6]
 80120ee:	2b03      	cmp	r3, #3
 80120f0:	d834      	bhi.n	801215c <SD_ioctl+0x98>
 80120f2:	a201      	add	r2, pc, #4	@ (adr r2, 80120f8 <SD_ioctl+0x34>)
 80120f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120f8:	08012109 	.word	0x08012109
 80120fc:	08012111 	.word	0x08012111
 8012100:	08012129 	.word	0x08012129
 8012104:	08012143 	.word	0x08012143
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012108:	2300      	movs	r3, #0
 801210a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801210e:	e028      	b.n	8012162 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012110:	f107 030c 	add.w	r3, r7, #12
 8012114:	4618      	mov	r0, r3
 8012116:	f7ff fda9 	bl	8011c6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801211a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012120:	2300      	movs	r3, #0
 8012122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012126:	e01c      	b.n	8012162 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012128:	f107 030c 	add.w	r3, r7, #12
 801212c:	4618      	mov	r0, r3
 801212e:	f7ff fd9d 	bl	8011c6c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012134:	b29a      	uxth	r2, r3
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801213a:	2300      	movs	r3, #0
 801213c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012140:	e00f      	b.n	8012162 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012142:	f107 030c 	add.w	r3, r7, #12
 8012146:	4618      	mov	r0, r3
 8012148:	f7ff fd90 	bl	8011c6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801214c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801214e:	0a5a      	lsrs	r2, r3, #9
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012154:	2300      	movs	r3, #0
 8012156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801215a:	e002      	b.n	8012162 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801215c:	2304      	movs	r3, #4
 801215e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8012162:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012166:	4618      	mov	r0, r3
 8012168:	3730      	adds	r7, #48	@ 0x30
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	20000071 	.word	0x20000071

08012174 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b082      	sub	sp, #8
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012182:	1c5a      	adds	r2, r3, #1
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f000 f804 	bl	8012198 <USBH_HandleSof>
}
 8012190:	bf00      	nop
 8012192:	3708      	adds	r7, #8
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	781b      	ldrb	r3, [r3, #0]
 80121a4:	b2db      	uxtb	r3, r3
 80121a6:	2b0b      	cmp	r3, #11
 80121a8:	d10a      	bne.n	80121c0 <USBH_HandleSof+0x28>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d005      	beq.n	80121c0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80121ba:	699b      	ldr	r3, [r3, #24]
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	4798      	blx	r3
  }
}
 80121c0:	bf00      	nop
 80121c2:	3708      	adds	r7, #8
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2201      	movs	r2, #1
 80121d4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80121d8:	2300      	movs	r3, #0
 80121da:	2200      	movs	r2, #0
 80121dc:	2101      	movs	r1, #1
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f000 f85b 	bl	801229a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 80121e4:	bf00      	nop
}
 80121e6:	3708      	adds	r7, #8
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}

080121ec <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80121ec:	b480      	push	{r7}
 80121ee:	b083      	sub	sp, #12
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2200      	movs	r2, #0
 80121f8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2201      	movs	r2, #1
 8012200:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8012204:	bf00      	nop
}
 8012206:	370c      	adds	r7, #12
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr

08012210 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b082      	sub	sp, #8
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2201      	movs	r2, #1
 801221c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2200      	movs	r2, #0
 8012224:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2200      	movs	r2, #0
 801222c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012230:	2300      	movs	r3, #0
 8012232:	2200      	movs	r2, #0
 8012234:	2101      	movs	r1, #1
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f000 f82f 	bl	801229a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 801223c:	2300      	movs	r3, #0
}
 801223e:	4618      	mov	r0, r3
 8012240:	3708      	adds	r7, #8
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}

08012246 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8012246:	b580      	push	{r7, lr}
 8012248:	b082      	sub	sp, #8
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2201      	movs	r2, #1
 8012252:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2200      	movs	r2, #0
 801225a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2200      	movs	r2, #0
 8012262:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f005 f99c 	bl	80175a4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	791b      	ldrb	r3, [r3, #4]
 8012270:	4619      	mov	r1, r3
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f000 f847 	bl	8012306 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	795b      	ldrb	r3, [r3, #5]
 801227c:	4619      	mov	r1, r3
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f000 f841 	bl	8012306 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012284:	2300      	movs	r3, #0
 8012286:	2200      	movs	r2, #0
 8012288:	2101      	movs	r1, #1
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f000 f805 	bl	801229a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012290:	2300      	movs	r3, #0
}
 8012292:	4618      	mov	r0, r3
 8012294:	3708      	adds	r7, #8
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}

0801229a <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 801229a:	b580      	push	{r7, lr}
 801229c:	b086      	sub	sp, #24
 801229e:	af00      	add	r7, sp, #0
 80122a0:	60f8      	str	r0, [r7, #12]
 80122a2:	607a      	str	r2, [r7, #4]
 80122a4:	603b      	str	r3, [r7, #0]
 80122a6:	460b      	mov	r3, r1
 80122a8:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 80122aa:	7afa      	ldrb	r2, [r7, #11]
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 80122b8:	4618      	mov	r0, r3
 80122ba:	f002 ff07 	bl	80150cc <osMessageWaiting>
 80122be:	4603      	mov	r3, r0
 80122c0:	f1c3 0310 	rsb	r3, r3, #16
 80122c4:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d009      	beq.n	80122e0 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80122d8:	687a      	ldr	r2, [r7, #4]
 80122da:	4619      	mov	r1, r3
 80122dc:	f002 fe42 	bl	8014f64 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 80122e0:	bf00      	nop
 80122e2:	3718      	adds	r7, #24
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80122f0:	2300      	movs	r3, #0
 80122f2:	2200      	movs	r2, #0
 80122f4:	2101      	movs	r1, #1
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f7ff ffcf 	bl	801229a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3708      	adds	r7, #8
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8012306:	b480      	push	{r7}
 8012308:	b083      	sub	sp, #12
 801230a:	af00      	add	r7, sp, #0
 801230c:	6078      	str	r0, [r7, #4]
 801230e:	460b      	mov	r3, r1
 8012310:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8012312:	78fb      	ldrb	r3, [r7, #3]
 8012314:	2b0f      	cmp	r3, #15
 8012316:	d80d      	bhi.n	8012334 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8012318:	78fb      	ldrb	r3, [r7, #3]
 801231a:	687a      	ldr	r2, [r7, #4]
 801231c:	33e0      	adds	r3, #224	@ 0xe0
 801231e:	009b      	lsls	r3, r3, #2
 8012320:	4413      	add	r3, r2
 8012322:	685a      	ldr	r2, [r3, #4]
 8012324:	78fb      	ldrb	r3, [r7, #3]
 8012326:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801232a:	6879      	ldr	r1, [r7, #4]
 801232c:	33e0      	adds	r3, #224	@ 0xe0
 801232e:	009b      	lsls	r3, r3, #2
 8012330:	440b      	add	r3, r1
 8012332:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8012334:	2300      	movs	r3, #0
}
 8012336:	4618      	mov	r0, r3
 8012338:	370c      	adds	r7, #12
 801233a:	46bd      	mov	sp, r7
 801233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012340:	4770      	bx	lr
	...

08012344 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b084      	sub	sp, #16
 8012348:	af00      	add	r7, sp, #0
 801234a:	4603      	mov	r3, r0
 801234c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801234e:	79fb      	ldrb	r3, [r7, #7]
 8012350:	4a08      	ldr	r2, [pc, #32]	@ (8012374 <disk_status+0x30>)
 8012352:	009b      	lsls	r3, r3, #2
 8012354:	4413      	add	r3, r2
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	79fa      	ldrb	r2, [r7, #7]
 801235c:	4905      	ldr	r1, [pc, #20]	@ (8012374 <disk_status+0x30>)
 801235e:	440a      	add	r2, r1
 8012360:	7a12      	ldrb	r2, [r2, #8]
 8012362:	4610      	mov	r0, r2
 8012364:	4798      	blx	r3
 8012366:	4603      	mov	r3, r0
 8012368:	73fb      	strb	r3, [r7, #15]
  return stat;
 801236a:	7bfb      	ldrb	r3, [r7, #15]
}
 801236c:	4618      	mov	r0, r3
 801236e:	3710      	adds	r7, #16
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}
 8012374:	20002b2c 	.word	0x20002b2c

08012378 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	4603      	mov	r3, r0
 8012380:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012382:	2300      	movs	r3, #0
 8012384:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012386:	79fb      	ldrb	r3, [r7, #7]
 8012388:	4a0d      	ldr	r2, [pc, #52]	@ (80123c0 <disk_initialize+0x48>)
 801238a:	5cd3      	ldrb	r3, [r2, r3]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d111      	bne.n	80123b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012390:	79fb      	ldrb	r3, [r7, #7]
 8012392:	4a0b      	ldr	r2, [pc, #44]	@ (80123c0 <disk_initialize+0x48>)
 8012394:	2101      	movs	r1, #1
 8012396:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012398:	79fb      	ldrb	r3, [r7, #7]
 801239a:	4a09      	ldr	r2, [pc, #36]	@ (80123c0 <disk_initialize+0x48>)
 801239c:	009b      	lsls	r3, r3, #2
 801239e:	4413      	add	r3, r2
 80123a0:	685b      	ldr	r3, [r3, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	79fa      	ldrb	r2, [r7, #7]
 80123a6:	4906      	ldr	r1, [pc, #24]	@ (80123c0 <disk_initialize+0x48>)
 80123a8:	440a      	add	r2, r1
 80123aa:	7a12      	ldrb	r2, [r2, #8]
 80123ac:	4610      	mov	r0, r2
 80123ae:	4798      	blx	r3
 80123b0:	4603      	mov	r3, r0
 80123b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80123b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3710      	adds	r7, #16
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	20002b2c 	.word	0x20002b2c

080123c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80123c4:	b590      	push	{r4, r7, lr}
 80123c6:	b087      	sub	sp, #28
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	60b9      	str	r1, [r7, #8]
 80123cc:	607a      	str	r2, [r7, #4]
 80123ce:	603b      	str	r3, [r7, #0]
 80123d0:	4603      	mov	r3, r0
 80123d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80123d4:	7bfb      	ldrb	r3, [r7, #15]
 80123d6:	4a0a      	ldr	r2, [pc, #40]	@ (8012400 <disk_read+0x3c>)
 80123d8:	009b      	lsls	r3, r3, #2
 80123da:	4413      	add	r3, r2
 80123dc:	685b      	ldr	r3, [r3, #4]
 80123de:	689c      	ldr	r4, [r3, #8]
 80123e0:	7bfb      	ldrb	r3, [r7, #15]
 80123e2:	4a07      	ldr	r2, [pc, #28]	@ (8012400 <disk_read+0x3c>)
 80123e4:	4413      	add	r3, r2
 80123e6:	7a18      	ldrb	r0, [r3, #8]
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	687a      	ldr	r2, [r7, #4]
 80123ec:	68b9      	ldr	r1, [r7, #8]
 80123ee:	47a0      	blx	r4
 80123f0:	4603      	mov	r3, r0
 80123f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80123f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	371c      	adds	r7, #28
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd90      	pop	{r4, r7, pc}
 80123fe:	bf00      	nop
 8012400:	20002b2c 	.word	0x20002b2c

08012404 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012404:	b590      	push	{r4, r7, lr}
 8012406:	b087      	sub	sp, #28
 8012408:	af00      	add	r7, sp, #0
 801240a:	60b9      	str	r1, [r7, #8]
 801240c:	607a      	str	r2, [r7, #4]
 801240e:	603b      	str	r3, [r7, #0]
 8012410:	4603      	mov	r3, r0
 8012412:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012414:	7bfb      	ldrb	r3, [r7, #15]
 8012416:	4a0a      	ldr	r2, [pc, #40]	@ (8012440 <disk_write+0x3c>)
 8012418:	009b      	lsls	r3, r3, #2
 801241a:	4413      	add	r3, r2
 801241c:	685b      	ldr	r3, [r3, #4]
 801241e:	68dc      	ldr	r4, [r3, #12]
 8012420:	7bfb      	ldrb	r3, [r7, #15]
 8012422:	4a07      	ldr	r2, [pc, #28]	@ (8012440 <disk_write+0x3c>)
 8012424:	4413      	add	r3, r2
 8012426:	7a18      	ldrb	r0, [r3, #8]
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	687a      	ldr	r2, [r7, #4]
 801242c:	68b9      	ldr	r1, [r7, #8]
 801242e:	47a0      	blx	r4
 8012430:	4603      	mov	r3, r0
 8012432:	75fb      	strb	r3, [r7, #23]
  return res;
 8012434:	7dfb      	ldrb	r3, [r7, #23]
}
 8012436:	4618      	mov	r0, r3
 8012438:	371c      	adds	r7, #28
 801243a:	46bd      	mov	sp, r7
 801243c:	bd90      	pop	{r4, r7, pc}
 801243e:	bf00      	nop
 8012440:	20002b2c 	.word	0x20002b2c

08012444 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b084      	sub	sp, #16
 8012448:	af00      	add	r7, sp, #0
 801244a:	4603      	mov	r3, r0
 801244c:	603a      	str	r2, [r7, #0]
 801244e:	71fb      	strb	r3, [r7, #7]
 8012450:	460b      	mov	r3, r1
 8012452:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012454:	79fb      	ldrb	r3, [r7, #7]
 8012456:	4a09      	ldr	r2, [pc, #36]	@ (801247c <disk_ioctl+0x38>)
 8012458:	009b      	lsls	r3, r3, #2
 801245a:	4413      	add	r3, r2
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	691b      	ldr	r3, [r3, #16]
 8012460:	79fa      	ldrb	r2, [r7, #7]
 8012462:	4906      	ldr	r1, [pc, #24]	@ (801247c <disk_ioctl+0x38>)
 8012464:	440a      	add	r2, r1
 8012466:	7a10      	ldrb	r0, [r2, #8]
 8012468:	79b9      	ldrb	r1, [r7, #6]
 801246a:	683a      	ldr	r2, [r7, #0]
 801246c:	4798      	blx	r3
 801246e:	4603      	mov	r3, r0
 8012470:	73fb      	strb	r3, [r7, #15]
  return res;
 8012472:	7bfb      	ldrb	r3, [r7, #15]
}
 8012474:	4618      	mov	r0, r3
 8012476:	3710      	adds	r7, #16
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}
 801247c:	20002b2c 	.word	0x20002b2c

08012480 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012480:	b480      	push	{r7}
 8012482:	b085      	sub	sp, #20
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	3301      	adds	r3, #1
 801248c:	781b      	ldrb	r3, [r3, #0]
 801248e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012490:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012494:	021b      	lsls	r3, r3, #8
 8012496:	b21a      	sxth	r2, r3
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	b21b      	sxth	r3, r3
 801249e:	4313      	orrs	r3, r2
 80124a0:	b21b      	sxth	r3, r3
 80124a2:	81fb      	strh	r3, [r7, #14]
	return rv;
 80124a4:	89fb      	ldrh	r3, [r7, #14]
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3714      	adds	r7, #20
 80124aa:	46bd      	mov	sp, r7
 80124ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b0:	4770      	bx	lr

080124b2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80124b2:	b480      	push	{r7}
 80124b4:	b085      	sub	sp, #20
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	3303      	adds	r3, #3
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	021b      	lsls	r3, r3, #8
 80124c6:	687a      	ldr	r2, [r7, #4]
 80124c8:	3202      	adds	r2, #2
 80124ca:	7812      	ldrb	r2, [r2, #0]
 80124cc:	4313      	orrs	r3, r2
 80124ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	021b      	lsls	r3, r3, #8
 80124d4:	687a      	ldr	r2, [r7, #4]
 80124d6:	3201      	adds	r2, #1
 80124d8:	7812      	ldrb	r2, [r2, #0]
 80124da:	4313      	orrs	r3, r2
 80124dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	021b      	lsls	r3, r3, #8
 80124e2:	687a      	ldr	r2, [r7, #4]
 80124e4:	7812      	ldrb	r2, [r2, #0]
 80124e6:	4313      	orrs	r3, r2
 80124e8:	60fb      	str	r3, [r7, #12]
	return rv;
 80124ea:	68fb      	ldr	r3, [r7, #12]
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	3714      	adds	r7, #20
 80124f0:	46bd      	mov	sp, r7
 80124f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f6:	4770      	bx	lr

080124f8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80124f8:	b480      	push	{r7}
 80124fa:	b083      	sub	sp, #12
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	460b      	mov	r3, r1
 8012502:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	1c5a      	adds	r2, r3, #1
 8012508:	607a      	str	r2, [r7, #4]
 801250a:	887a      	ldrh	r2, [r7, #2]
 801250c:	b2d2      	uxtb	r2, r2
 801250e:	701a      	strb	r2, [r3, #0]
 8012510:	887b      	ldrh	r3, [r7, #2]
 8012512:	0a1b      	lsrs	r3, r3, #8
 8012514:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	1c5a      	adds	r2, r3, #1
 801251a:	607a      	str	r2, [r7, #4]
 801251c:	887a      	ldrh	r2, [r7, #2]
 801251e:	b2d2      	uxtb	r2, r2
 8012520:	701a      	strb	r2, [r3, #0]
}
 8012522:	bf00      	nop
 8012524:	370c      	adds	r7, #12
 8012526:	46bd      	mov	sp, r7
 8012528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252c:	4770      	bx	lr

0801252e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801252e:	b480      	push	{r7}
 8012530:	b083      	sub	sp, #12
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
 8012536:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	1c5a      	adds	r2, r3, #1
 801253c:	607a      	str	r2, [r7, #4]
 801253e:	683a      	ldr	r2, [r7, #0]
 8012540:	b2d2      	uxtb	r2, r2
 8012542:	701a      	strb	r2, [r3, #0]
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	0a1b      	lsrs	r3, r3, #8
 8012548:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	1c5a      	adds	r2, r3, #1
 801254e:	607a      	str	r2, [r7, #4]
 8012550:	683a      	ldr	r2, [r7, #0]
 8012552:	b2d2      	uxtb	r2, r2
 8012554:	701a      	strb	r2, [r3, #0]
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	0a1b      	lsrs	r3, r3, #8
 801255a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	1c5a      	adds	r2, r3, #1
 8012560:	607a      	str	r2, [r7, #4]
 8012562:	683a      	ldr	r2, [r7, #0]
 8012564:	b2d2      	uxtb	r2, r2
 8012566:	701a      	strb	r2, [r3, #0]
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	0a1b      	lsrs	r3, r3, #8
 801256c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	1c5a      	adds	r2, r3, #1
 8012572:	607a      	str	r2, [r7, #4]
 8012574:	683a      	ldr	r2, [r7, #0]
 8012576:	b2d2      	uxtb	r2, r2
 8012578:	701a      	strb	r2, [r3, #0]
}
 801257a:	bf00      	nop
 801257c:	370c      	adds	r7, #12
 801257e:	46bd      	mov	sp, r7
 8012580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012584:	4770      	bx	lr

08012586 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012586:	b480      	push	{r7}
 8012588:	b087      	sub	sp, #28
 801258a:	af00      	add	r7, sp, #0
 801258c:	60f8      	str	r0, [r7, #12]
 801258e:	60b9      	str	r1, [r7, #8]
 8012590:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012596:	68bb      	ldr	r3, [r7, #8]
 8012598:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d00d      	beq.n	80125bc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80125a0:	693a      	ldr	r2, [r7, #16]
 80125a2:	1c53      	adds	r3, r2, #1
 80125a4:	613b      	str	r3, [r7, #16]
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	1c59      	adds	r1, r3, #1
 80125aa:	6179      	str	r1, [r7, #20]
 80125ac:	7812      	ldrb	r2, [r2, #0]
 80125ae:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	3b01      	subs	r3, #1
 80125b4:	607b      	str	r3, [r7, #4]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d1f1      	bne.n	80125a0 <mem_cpy+0x1a>
	}
}
 80125bc:	bf00      	nop
 80125be:	371c      	adds	r7, #28
 80125c0:	46bd      	mov	sp, r7
 80125c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c6:	4770      	bx	lr

080125c8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80125c8:	b480      	push	{r7}
 80125ca:	b087      	sub	sp, #28
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	1c5a      	adds	r2, r3, #1
 80125dc:	617a      	str	r2, [r7, #20]
 80125de:	68ba      	ldr	r2, [r7, #8]
 80125e0:	b2d2      	uxtb	r2, r2
 80125e2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	3b01      	subs	r3, #1
 80125e8:	607b      	str	r3, [r7, #4]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d1f3      	bne.n	80125d8 <mem_set+0x10>
}
 80125f0:	bf00      	nop
 80125f2:	bf00      	nop
 80125f4:	371c      	adds	r7, #28
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr

080125fe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80125fe:	b480      	push	{r7}
 8012600:	b089      	sub	sp, #36	@ 0x24
 8012602:	af00      	add	r7, sp, #0
 8012604:	60f8      	str	r0, [r7, #12]
 8012606:	60b9      	str	r1, [r7, #8]
 8012608:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	61fb      	str	r3, [r7, #28]
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012612:	2300      	movs	r3, #0
 8012614:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012616:	69fb      	ldr	r3, [r7, #28]
 8012618:	1c5a      	adds	r2, r3, #1
 801261a:	61fa      	str	r2, [r7, #28]
 801261c:	781b      	ldrb	r3, [r3, #0]
 801261e:	4619      	mov	r1, r3
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	1c5a      	adds	r2, r3, #1
 8012624:	61ba      	str	r2, [r7, #24]
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	1acb      	subs	r3, r1, r3
 801262a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	3b01      	subs	r3, #1
 8012630:	607b      	str	r3, [r7, #4]
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d002      	beq.n	801263e <mem_cmp+0x40>
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d0eb      	beq.n	8012616 <mem_cmp+0x18>

	return r;
 801263e:	697b      	ldr	r3, [r7, #20]
}
 8012640:	4618      	mov	r0, r3
 8012642:	3724      	adds	r7, #36	@ 0x24
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr

0801264c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801264c:	b480      	push	{r7}
 801264e:	b083      	sub	sp, #12
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012656:	e002      	b.n	801265e <chk_chr+0x12>
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	3301      	adds	r3, #1
 801265c:	607b      	str	r3, [r7, #4]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d005      	beq.n	8012672 <chk_chr+0x26>
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	781b      	ldrb	r3, [r3, #0]
 801266a:	461a      	mov	r2, r3
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	4293      	cmp	r3, r2
 8012670:	d1f2      	bne.n	8012658 <chk_chr+0xc>
	return *str;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	781b      	ldrb	r3, [r3, #0]
}
 8012676:	4618      	mov	r0, r3
 8012678:	370c      	adds	r7, #12
 801267a:	46bd      	mov	sp, r7
 801267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012680:	4770      	bx	lr

08012682 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012682:	b580      	push	{r7, lr}
 8012684:	b086      	sub	sp, #24
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801268a:	2300      	movs	r3, #0
 801268c:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	78db      	ldrb	r3, [r3, #3]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d034      	beq.n	8012700 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801269a:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	7858      	ldrb	r0, [r3, #1]
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80126a6:	2301      	movs	r3, #1
 80126a8:	697a      	ldr	r2, [r7, #20]
 80126aa:	f7ff feab 	bl	8012404 <disk_write>
 80126ae:	4603      	mov	r3, r0
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d002      	beq.n	80126ba <sync_window+0x38>
			res = FR_DISK_ERR;
 80126b4:	2301      	movs	r3, #1
 80126b6:	73fb      	strb	r3, [r7, #15]
 80126b8:	e022      	b.n	8012700 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2200      	movs	r2, #0
 80126be:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6a1b      	ldr	r3, [r3, #32]
 80126c4:	697a      	ldr	r2, [r7, #20]
 80126c6:	1ad2      	subs	r2, r2, r3
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	699b      	ldr	r3, [r3, #24]
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d217      	bcs.n	8012700 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	789b      	ldrb	r3, [r3, #2]
 80126d4:	613b      	str	r3, [r7, #16]
 80126d6:	e010      	b.n	80126fa <sync_window+0x78>
					wsect += fs->fsize;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	699b      	ldr	r3, [r3, #24]
 80126dc:	697a      	ldr	r2, [r7, #20]
 80126de:	4413      	add	r3, r2
 80126e0:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	7858      	ldrb	r0, [r3, #1]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80126ec:	2301      	movs	r3, #1
 80126ee:	697a      	ldr	r2, [r7, #20]
 80126f0:	f7ff fe88 	bl	8012404 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	3b01      	subs	r3, #1
 80126f8:	613b      	str	r3, [r7, #16]
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	2b01      	cmp	r3, #1
 80126fe:	d8eb      	bhi.n	80126d8 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012700:	7bfb      	ldrb	r3, [r7, #15]
}
 8012702:	4618      	mov	r0, r3
 8012704:	3718      	adds	r7, #24
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801270a:	b580      	push	{r7, lr}
 801270c:	b084      	sub	sp, #16
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
 8012712:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012714:	2300      	movs	r3, #0
 8012716:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801271c:	683a      	ldr	r2, [r7, #0]
 801271e:	429a      	cmp	r2, r3
 8012720:	d01b      	beq.n	801275a <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f7ff ffad 	bl	8012682 <sync_window>
 8012728:	4603      	mov	r3, r0
 801272a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801272c:	7bfb      	ldrb	r3, [r7, #15]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d113      	bne.n	801275a <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	7858      	ldrb	r0, [r3, #1]
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801273c:	2301      	movs	r3, #1
 801273e:	683a      	ldr	r2, [r7, #0]
 8012740:	f7ff fe40 	bl	80123c4 <disk_read>
 8012744:	4603      	mov	r3, r0
 8012746:	2b00      	cmp	r3, #0
 8012748:	d004      	beq.n	8012754 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801274a:	f04f 33ff 	mov.w	r3, #4294967295
 801274e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012750:	2301      	movs	r3, #1
 8012752:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	683a      	ldr	r2, [r7, #0]
 8012758:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801275a:	7bfb      	ldrb	r3, [r7, #15]
}
 801275c:	4618      	mov	r0, r3
 801275e:	3710      	adds	r7, #16
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b084      	sub	sp, #16
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f7ff ff88 	bl	8012682 <sync_window>
 8012772:	4603      	mov	r3, r0
 8012774:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012776:	7bfb      	ldrb	r3, [r7, #15]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d158      	bne.n	801282e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	2b03      	cmp	r3, #3
 8012782:	d148      	bne.n	8012816 <sync_fs+0xb2>
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	791b      	ldrb	r3, [r3, #4]
 8012788:	2b01      	cmp	r3, #1
 801278a:	d144      	bne.n	8012816 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	3330      	adds	r3, #48	@ 0x30
 8012790:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012794:	2100      	movs	r1, #0
 8012796:	4618      	mov	r0, r3
 8012798:	f7ff ff16 	bl	80125c8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	3330      	adds	r3, #48	@ 0x30
 80127a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80127a4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7ff fea5 	bl	80124f8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	3330      	adds	r3, #48	@ 0x30
 80127b2:	4921      	ldr	r1, [pc, #132]	@ (8012838 <sync_fs+0xd4>)
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7ff feba 	bl	801252e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	3330      	adds	r3, #48	@ 0x30
 80127be:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80127c2:	491e      	ldr	r1, [pc, #120]	@ (801283c <sync_fs+0xd8>)
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7ff feb2 	bl	801252e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	3330      	adds	r3, #48	@ 0x30
 80127ce:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	691b      	ldr	r3, [r3, #16]
 80127d6:	4619      	mov	r1, r3
 80127d8:	4610      	mov	r0, r2
 80127da:	f7ff fea8 	bl	801252e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	3330      	adds	r3, #48	@ 0x30
 80127e2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	68db      	ldr	r3, [r3, #12]
 80127ea:	4619      	mov	r1, r3
 80127ec:	4610      	mov	r0, r2
 80127ee:	f7ff fe9e 	bl	801252e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	69db      	ldr	r3, [r3, #28]
 80127f6:	1c5a      	adds	r2, r3, #1
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	7858      	ldrb	r0, [r3, #1]
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801280a:	2301      	movs	r3, #1
 801280c:	f7ff fdfa 	bl	8012404 <disk_write>
			fs->fsi_flag = 0;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2200      	movs	r2, #0
 8012814:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	785b      	ldrb	r3, [r3, #1]
 801281a:	2200      	movs	r2, #0
 801281c:	2100      	movs	r1, #0
 801281e:	4618      	mov	r0, r3
 8012820:	f7ff fe10 	bl	8012444 <disk_ioctl>
 8012824:	4603      	mov	r3, r0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d001      	beq.n	801282e <sync_fs+0xca>
 801282a:	2301      	movs	r3, #1
 801282c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012830:	4618      	mov	r0, r3
 8012832:	3710      	adds	r7, #16
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}
 8012838:	41615252 	.word	0x41615252
 801283c:	61417272 	.word	0x61417272

08012840 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012840:	b480      	push	{r7}
 8012842:	b083      	sub	sp, #12
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	3b02      	subs	r3, #2
 801284e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	695b      	ldr	r3, [r3, #20]
 8012854:	3b02      	subs	r3, #2
 8012856:	683a      	ldr	r2, [r7, #0]
 8012858:	429a      	cmp	r2, r3
 801285a:	d301      	bcc.n	8012860 <clust2sect+0x20>
 801285c:	2300      	movs	r3, #0
 801285e:	e008      	b.n	8012872 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	895b      	ldrh	r3, [r3, #10]
 8012864:	461a      	mov	r2, r3
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	fb03 f202 	mul.w	r2, r3, r2
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012870:	4413      	add	r3, r2
}
 8012872:	4618      	mov	r0, r3
 8012874:	370c      	adds	r7, #12
 8012876:	46bd      	mov	sp, r7
 8012878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287c:	4770      	bx	lr

0801287e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801287e:	b580      	push	{r7, lr}
 8012880:	b086      	sub	sp, #24
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
 8012886:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	2b01      	cmp	r3, #1
 8012892:	d904      	bls.n	801289e <get_fat+0x20>
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	695b      	ldr	r3, [r3, #20]
 8012898:	683a      	ldr	r2, [r7, #0]
 801289a:	429a      	cmp	r2, r3
 801289c:	d302      	bcc.n	80128a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 801289e:	2301      	movs	r3, #1
 80128a0:	617b      	str	r3, [r7, #20]
 80128a2:	e08e      	b.n	80129c2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80128a4:	f04f 33ff 	mov.w	r3, #4294967295
 80128a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80128aa:	693b      	ldr	r3, [r7, #16]
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	2b03      	cmp	r3, #3
 80128b0:	d061      	beq.n	8012976 <get_fat+0xf8>
 80128b2:	2b03      	cmp	r3, #3
 80128b4:	dc7b      	bgt.n	80129ae <get_fat+0x130>
 80128b6:	2b01      	cmp	r3, #1
 80128b8:	d002      	beq.n	80128c0 <get_fat+0x42>
 80128ba:	2b02      	cmp	r3, #2
 80128bc:	d041      	beq.n	8012942 <get_fat+0xc4>
 80128be:	e076      	b.n	80129ae <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	60fb      	str	r3, [r7, #12]
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	085b      	lsrs	r3, r3, #1
 80128c8:	68fa      	ldr	r2, [r7, #12]
 80128ca:	4413      	add	r3, r2
 80128cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80128ce:	693b      	ldr	r3, [r7, #16]
 80128d0:	6a1a      	ldr	r2, [r3, #32]
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	0a5b      	lsrs	r3, r3, #9
 80128d6:	4413      	add	r3, r2
 80128d8:	4619      	mov	r1, r3
 80128da:	6938      	ldr	r0, [r7, #16]
 80128dc:	f7ff ff15 	bl	801270a <move_window>
 80128e0:	4603      	mov	r3, r0
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d166      	bne.n	80129b4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	1c5a      	adds	r2, r3, #1
 80128ea:	60fa      	str	r2, [r7, #12]
 80128ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128f0:	693a      	ldr	r2, [r7, #16]
 80128f2:	4413      	add	r3, r2
 80128f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80128f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	6a1a      	ldr	r2, [r3, #32]
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	0a5b      	lsrs	r3, r3, #9
 8012902:	4413      	add	r3, r2
 8012904:	4619      	mov	r1, r3
 8012906:	6938      	ldr	r0, [r7, #16]
 8012908:	f7ff feff 	bl	801270a <move_window>
 801290c:	4603      	mov	r3, r0
 801290e:	2b00      	cmp	r3, #0
 8012910:	d152      	bne.n	80129b8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012918:	693a      	ldr	r2, [r7, #16]
 801291a:	4413      	add	r3, r2
 801291c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012920:	021b      	lsls	r3, r3, #8
 8012922:	68ba      	ldr	r2, [r7, #8]
 8012924:	4313      	orrs	r3, r2
 8012926:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	f003 0301 	and.w	r3, r3, #1
 801292e:	2b00      	cmp	r3, #0
 8012930:	d002      	beq.n	8012938 <get_fat+0xba>
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	091b      	lsrs	r3, r3, #4
 8012936:	e002      	b.n	801293e <get_fat+0xc0>
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801293e:	617b      	str	r3, [r7, #20]
			break;
 8012940:	e03f      	b.n	80129c2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	6a1a      	ldr	r2, [r3, #32]
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	0a1b      	lsrs	r3, r3, #8
 801294a:	4413      	add	r3, r2
 801294c:	4619      	mov	r1, r3
 801294e:	6938      	ldr	r0, [r7, #16]
 8012950:	f7ff fedb 	bl	801270a <move_window>
 8012954:	4603      	mov	r3, r0
 8012956:	2b00      	cmp	r3, #0
 8012958:	d130      	bne.n	80129bc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	005b      	lsls	r3, r3, #1
 8012964:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012968:	4413      	add	r3, r2
 801296a:	4618      	mov	r0, r3
 801296c:	f7ff fd88 	bl	8012480 <ld_word>
 8012970:	4603      	mov	r3, r0
 8012972:	617b      	str	r3, [r7, #20]
			break;
 8012974:	e025      	b.n	80129c2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	6a1a      	ldr	r2, [r3, #32]
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	09db      	lsrs	r3, r3, #7
 801297e:	4413      	add	r3, r2
 8012980:	4619      	mov	r1, r3
 8012982:	6938      	ldr	r0, [r7, #16]
 8012984:	f7ff fec1 	bl	801270a <move_window>
 8012988:	4603      	mov	r3, r0
 801298a:	2b00      	cmp	r3, #0
 801298c:	d118      	bne.n	80129c0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	009b      	lsls	r3, r3, #2
 8012998:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801299c:	4413      	add	r3, r2
 801299e:	4618      	mov	r0, r3
 80129a0:	f7ff fd87 	bl	80124b2 <ld_dword>
 80129a4:	4603      	mov	r3, r0
 80129a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80129aa:	617b      	str	r3, [r7, #20]
			break;
 80129ac:	e009      	b.n	80129c2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80129ae:	2301      	movs	r3, #1
 80129b0:	617b      	str	r3, [r7, #20]
 80129b2:	e006      	b.n	80129c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80129b4:	bf00      	nop
 80129b6:	e004      	b.n	80129c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80129b8:	bf00      	nop
 80129ba:	e002      	b.n	80129c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80129bc:	bf00      	nop
 80129be:	e000      	b.n	80129c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80129c0:	bf00      	nop
		}
	}

	return val;
 80129c2:	697b      	ldr	r3, [r7, #20]
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3718      	adds	r7, #24
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}

080129cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80129cc:	b590      	push	{r4, r7, lr}
 80129ce:	b089      	sub	sp, #36	@ 0x24
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	60f8      	str	r0, [r7, #12]
 80129d4:	60b9      	str	r1, [r7, #8]
 80129d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80129d8:	2302      	movs	r3, #2
 80129da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	2b01      	cmp	r3, #1
 80129e0:	f240 80d9 	bls.w	8012b96 <put_fat+0x1ca>
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	695b      	ldr	r3, [r3, #20]
 80129e8:	68ba      	ldr	r2, [r7, #8]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	f080 80d3 	bcs.w	8012b96 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	2b03      	cmp	r3, #3
 80129f6:	f000 8096 	beq.w	8012b26 <put_fat+0x15a>
 80129fa:	2b03      	cmp	r3, #3
 80129fc:	f300 80cb 	bgt.w	8012b96 <put_fat+0x1ca>
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	d002      	beq.n	8012a0a <put_fat+0x3e>
 8012a04:	2b02      	cmp	r3, #2
 8012a06:	d06e      	beq.n	8012ae6 <put_fat+0x11a>
 8012a08:	e0c5      	b.n	8012b96 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	61bb      	str	r3, [r7, #24]
 8012a0e:	69bb      	ldr	r3, [r7, #24]
 8012a10:	085b      	lsrs	r3, r3, #1
 8012a12:	69ba      	ldr	r2, [r7, #24]
 8012a14:	4413      	add	r3, r2
 8012a16:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	6a1a      	ldr	r2, [r3, #32]
 8012a1c:	69bb      	ldr	r3, [r7, #24]
 8012a1e:	0a5b      	lsrs	r3, r3, #9
 8012a20:	4413      	add	r3, r2
 8012a22:	4619      	mov	r1, r3
 8012a24:	68f8      	ldr	r0, [r7, #12]
 8012a26:	f7ff fe70 	bl	801270a <move_window>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012a2e:	7ffb      	ldrb	r3, [r7, #31]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f040 80a9 	bne.w	8012b88 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012a3c:	69bb      	ldr	r3, [r7, #24]
 8012a3e:	1c59      	adds	r1, r3, #1
 8012a40:	61b9      	str	r1, [r7, #24]
 8012a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a46:	4413      	add	r3, r2
 8012a48:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	f003 0301 	and.w	r3, r3, #1
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d00d      	beq.n	8012a70 <put_fat+0xa4>
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	b25b      	sxtb	r3, r3
 8012a5a:	f003 030f 	and.w	r3, r3, #15
 8012a5e:	b25a      	sxtb	r2, r3
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	b25b      	sxtb	r3, r3
 8012a64:	011b      	lsls	r3, r3, #4
 8012a66:	b25b      	sxtb	r3, r3
 8012a68:	4313      	orrs	r3, r2
 8012a6a:	b25b      	sxtb	r3, r3
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	e001      	b.n	8012a74 <put_fat+0xa8>
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	697a      	ldr	r2, [r7, #20]
 8012a76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	2201      	movs	r2, #1
 8012a7c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	6a1a      	ldr	r2, [r3, #32]
 8012a82:	69bb      	ldr	r3, [r7, #24]
 8012a84:	0a5b      	lsrs	r3, r3, #9
 8012a86:	4413      	add	r3, r2
 8012a88:	4619      	mov	r1, r3
 8012a8a:	68f8      	ldr	r0, [r7, #12]
 8012a8c:	f7ff fe3d 	bl	801270a <move_window>
 8012a90:	4603      	mov	r3, r0
 8012a92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012a94:	7ffb      	ldrb	r3, [r7, #31]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d178      	bne.n	8012b8c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012aa0:	69bb      	ldr	r3, [r7, #24]
 8012aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012aa6:	4413      	add	r3, r2
 8012aa8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	f003 0301 	and.w	r3, r3, #1
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d003      	beq.n	8012abc <put_fat+0xf0>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	091b      	lsrs	r3, r3, #4
 8012ab8:	b2db      	uxtb	r3, r3
 8012aba:	e00e      	b.n	8012ada <put_fat+0x10e>
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	b25b      	sxtb	r3, r3
 8012ac2:	f023 030f 	bic.w	r3, r3, #15
 8012ac6:	b25a      	sxtb	r2, r3
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	0a1b      	lsrs	r3, r3, #8
 8012acc:	b25b      	sxtb	r3, r3
 8012ace:	f003 030f 	and.w	r3, r3, #15
 8012ad2:	b25b      	sxtb	r3, r3
 8012ad4:	4313      	orrs	r3, r2
 8012ad6:	b25b      	sxtb	r3, r3
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	697a      	ldr	r2, [r7, #20]
 8012adc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	2201      	movs	r2, #1
 8012ae2:	70da      	strb	r2, [r3, #3]
			break;
 8012ae4:	e057      	b.n	8012b96 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	6a1a      	ldr	r2, [r3, #32]
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	0a1b      	lsrs	r3, r3, #8
 8012aee:	4413      	add	r3, r2
 8012af0:	4619      	mov	r1, r3
 8012af2:	68f8      	ldr	r0, [r7, #12]
 8012af4:	f7ff fe09 	bl	801270a <move_window>
 8012af8:	4603      	mov	r3, r0
 8012afa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012afc:	7ffb      	ldrb	r3, [r7, #31]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d146      	bne.n	8012b90 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	005b      	lsls	r3, r3, #1
 8012b0c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012b10:	4413      	add	r3, r2
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	b292      	uxth	r2, r2
 8012b16:	4611      	mov	r1, r2
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7ff fced 	bl	80124f8 <st_word>
			fs->wflag = 1;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2201      	movs	r2, #1
 8012b22:	70da      	strb	r2, [r3, #3]
			break;
 8012b24:	e037      	b.n	8012b96 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	6a1a      	ldr	r2, [r3, #32]
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	09db      	lsrs	r3, r3, #7
 8012b2e:	4413      	add	r3, r2
 8012b30:	4619      	mov	r1, r3
 8012b32:	68f8      	ldr	r0, [r7, #12]
 8012b34:	f7ff fde9 	bl	801270a <move_window>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012b3c:	7ffb      	ldrb	r3, [r7, #31]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d128      	bne.n	8012b94 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	009b      	lsls	r3, r3, #2
 8012b52:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012b56:	4413      	add	r3, r2
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7ff fcaa 	bl	80124b2 <ld_dword>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012b64:	4323      	orrs	r3, r4
 8012b66:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	009b      	lsls	r3, r3, #2
 8012b72:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012b76:	4413      	add	r3, r2
 8012b78:	6879      	ldr	r1, [r7, #4]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7ff fcd7 	bl	801252e <st_dword>
			fs->wflag = 1;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2201      	movs	r2, #1
 8012b84:	70da      	strb	r2, [r3, #3]
			break;
 8012b86:	e006      	b.n	8012b96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012b88:	bf00      	nop
 8012b8a:	e004      	b.n	8012b96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012b8c:	bf00      	nop
 8012b8e:	e002      	b.n	8012b96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012b90:	bf00      	nop
 8012b92:	e000      	b.n	8012b96 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012b94:	bf00      	nop
		}
	}
	return res;
 8012b96:	7ffb      	ldrb	r3, [r7, #31]
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3724      	adds	r7, #36	@ 0x24
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd90      	pop	{r4, r7, pc}

08012ba0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b088      	sub	sp, #32
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	60f8      	str	r0, [r7, #12]
 8012ba8:	60b9      	str	r1, [r7, #8]
 8012baa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012bac:	2300      	movs	r3, #0
 8012bae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	2b01      	cmp	r3, #1
 8012bba:	d904      	bls.n	8012bc6 <remove_chain+0x26>
 8012bbc:	69bb      	ldr	r3, [r7, #24]
 8012bbe:	695b      	ldr	r3, [r3, #20]
 8012bc0:	68ba      	ldr	r2, [r7, #8]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d301      	bcc.n	8012bca <remove_chain+0x2a>
 8012bc6:	2302      	movs	r3, #2
 8012bc8:	e04b      	b.n	8012c62 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d00c      	beq.n	8012bea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8012bd4:	6879      	ldr	r1, [r7, #4]
 8012bd6:	69b8      	ldr	r0, [r7, #24]
 8012bd8:	f7ff fef8 	bl	80129cc <put_fat>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012be0:	7ffb      	ldrb	r3, [r7, #31]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d001      	beq.n	8012bea <remove_chain+0x4a>
 8012be6:	7ffb      	ldrb	r3, [r7, #31]
 8012be8:	e03b      	b.n	8012c62 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012bea:	68b9      	ldr	r1, [r7, #8]
 8012bec:	68f8      	ldr	r0, [r7, #12]
 8012bee:	f7ff fe46 	bl	801287e <get_fat>
 8012bf2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d031      	beq.n	8012c5e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d101      	bne.n	8012c04 <remove_chain+0x64>
 8012c00:	2302      	movs	r3, #2
 8012c02:	e02e      	b.n	8012c62 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c0a:	d101      	bne.n	8012c10 <remove_chain+0x70>
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	e028      	b.n	8012c62 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012c10:	2200      	movs	r2, #0
 8012c12:	68b9      	ldr	r1, [r7, #8]
 8012c14:	69b8      	ldr	r0, [r7, #24]
 8012c16:	f7ff fed9 	bl	80129cc <put_fat>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012c1e:	7ffb      	ldrb	r3, [r7, #31]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d001      	beq.n	8012c28 <remove_chain+0x88>
 8012c24:	7ffb      	ldrb	r3, [r7, #31]
 8012c26:	e01c      	b.n	8012c62 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	691a      	ldr	r2, [r3, #16]
 8012c2c:	69bb      	ldr	r3, [r7, #24]
 8012c2e:	695b      	ldr	r3, [r3, #20]
 8012c30:	3b02      	subs	r3, #2
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d20b      	bcs.n	8012c4e <remove_chain+0xae>
			fs->free_clst++;
 8012c36:	69bb      	ldr	r3, [r7, #24]
 8012c38:	691b      	ldr	r3, [r3, #16]
 8012c3a:	1c5a      	adds	r2, r3, #1
 8012c3c:	69bb      	ldr	r3, [r7, #24]
 8012c3e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012c40:	69bb      	ldr	r3, [r7, #24]
 8012c42:	791b      	ldrb	r3, [r3, #4]
 8012c44:	f043 0301 	orr.w	r3, r3, #1
 8012c48:	b2da      	uxtb	r2, r3
 8012c4a:	69bb      	ldr	r3, [r7, #24]
 8012c4c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012c4e:	697b      	ldr	r3, [r7, #20]
 8012c50:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012c52:	69bb      	ldr	r3, [r7, #24]
 8012c54:	695b      	ldr	r3, [r3, #20]
 8012c56:	68ba      	ldr	r2, [r7, #8]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d3c6      	bcc.n	8012bea <remove_chain+0x4a>
 8012c5c:	e000      	b.n	8012c60 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012c5e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012c60:	2300      	movs	r3, #0
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3720      	adds	r7, #32
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}

08012c6a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012c6a:	b580      	push	{r7, lr}
 8012c6c:	b088      	sub	sp, #32
 8012c6e:	af00      	add	r7, sp, #0
 8012c70:	6078      	str	r0, [r7, #4]
 8012c72:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d10d      	bne.n	8012c9c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	68db      	ldr	r3, [r3, #12]
 8012c84:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012c86:	69bb      	ldr	r3, [r7, #24]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d004      	beq.n	8012c96 <create_chain+0x2c>
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	695b      	ldr	r3, [r3, #20]
 8012c90:	69ba      	ldr	r2, [r7, #24]
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d31b      	bcc.n	8012cce <create_chain+0x64>
 8012c96:	2301      	movs	r3, #1
 8012c98:	61bb      	str	r3, [r7, #24]
 8012c9a:	e018      	b.n	8012cce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012c9c:	6839      	ldr	r1, [r7, #0]
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f7ff fded 	bl	801287e <get_fat>
 8012ca4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	2b01      	cmp	r3, #1
 8012caa:	d801      	bhi.n	8012cb0 <create_chain+0x46>
 8012cac:	2301      	movs	r3, #1
 8012cae:	e070      	b.n	8012d92 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cb6:	d101      	bne.n	8012cbc <create_chain+0x52>
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	e06a      	b.n	8012d92 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	695b      	ldr	r3, [r3, #20]
 8012cc0:	68fa      	ldr	r2, [r7, #12]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d201      	bcs.n	8012cca <create_chain+0x60>
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	e063      	b.n	8012d92 <create_chain+0x128>
		scl = clst;
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012cce:	69bb      	ldr	r3, [r7, #24]
 8012cd0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012cd2:	69fb      	ldr	r3, [r7, #28]
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	695b      	ldr	r3, [r3, #20]
 8012cdc:	69fa      	ldr	r2, [r7, #28]
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d307      	bcc.n	8012cf2 <create_chain+0x88>
				ncl = 2;
 8012ce2:	2302      	movs	r3, #2
 8012ce4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012ce6:	69fa      	ldr	r2, [r7, #28]
 8012ce8:	69bb      	ldr	r3, [r7, #24]
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d901      	bls.n	8012cf2 <create_chain+0x88>
 8012cee:	2300      	movs	r3, #0
 8012cf0:	e04f      	b.n	8012d92 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012cf2:	69f9      	ldr	r1, [r7, #28]
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	f7ff fdc2 	bl	801287e <get_fat>
 8012cfa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d00e      	beq.n	8012d20 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	d003      	beq.n	8012d10 <create_chain+0xa6>
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d0e:	d101      	bne.n	8012d14 <create_chain+0xaa>
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	e03e      	b.n	8012d92 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012d14:	69fa      	ldr	r2, [r7, #28]
 8012d16:	69bb      	ldr	r3, [r7, #24]
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	d1da      	bne.n	8012cd2 <create_chain+0x68>
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	e038      	b.n	8012d92 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012d20:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012d22:	f04f 32ff 	mov.w	r2, #4294967295
 8012d26:	69f9      	ldr	r1, [r7, #28]
 8012d28:	6938      	ldr	r0, [r7, #16]
 8012d2a:	f7ff fe4f 	bl	80129cc <put_fat>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012d32:	7dfb      	ldrb	r3, [r7, #23]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d109      	bne.n	8012d4c <create_chain+0xe2>
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d006      	beq.n	8012d4c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012d3e:	69fa      	ldr	r2, [r7, #28]
 8012d40:	6839      	ldr	r1, [r7, #0]
 8012d42:	6938      	ldr	r0, [r7, #16]
 8012d44:	f7ff fe42 	bl	80129cc <put_fat>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012d4c:	7dfb      	ldrb	r3, [r7, #23]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d116      	bne.n	8012d80 <create_chain+0x116>
		fs->last_clst = ncl;
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	69fa      	ldr	r2, [r7, #28]
 8012d56:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	691a      	ldr	r2, [r3, #16]
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	695b      	ldr	r3, [r3, #20]
 8012d60:	3b02      	subs	r3, #2
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d804      	bhi.n	8012d70 <create_chain+0x106>
 8012d66:	693b      	ldr	r3, [r7, #16]
 8012d68:	691b      	ldr	r3, [r3, #16]
 8012d6a:	1e5a      	subs	r2, r3, #1
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	791b      	ldrb	r3, [r3, #4]
 8012d74:	f043 0301 	orr.w	r3, r3, #1
 8012d78:	b2da      	uxtb	r2, r3
 8012d7a:	693b      	ldr	r3, [r7, #16]
 8012d7c:	711a      	strb	r2, [r3, #4]
 8012d7e:	e007      	b.n	8012d90 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012d80:	7dfb      	ldrb	r3, [r7, #23]
 8012d82:	2b01      	cmp	r3, #1
 8012d84:	d102      	bne.n	8012d8c <create_chain+0x122>
 8012d86:	f04f 33ff 	mov.w	r3, #4294967295
 8012d8a:	e000      	b.n	8012d8e <create_chain+0x124>
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012d90:	69fb      	ldr	r3, [r7, #28]
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3720      	adds	r7, #32
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}

08012d9a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012d9a:	b480      	push	{r7}
 8012d9c:	b087      	sub	sp, #28
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	6078      	str	r0, [r7, #4]
 8012da2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012dae:	3304      	adds	r3, #4
 8012db0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	0a5b      	lsrs	r3, r3, #9
 8012db6:	68fa      	ldr	r2, [r7, #12]
 8012db8:	8952      	ldrh	r2, [r2, #10]
 8012dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8012dbe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012dc0:	693b      	ldr	r3, [r7, #16]
 8012dc2:	1d1a      	adds	r2, r3, #4
 8012dc4:	613a      	str	r2, [r7, #16]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012dca:	68bb      	ldr	r3, [r7, #8]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d101      	bne.n	8012dd4 <clmt_clust+0x3a>
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	e010      	b.n	8012df6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012dd4:	697a      	ldr	r2, [r7, #20]
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d307      	bcc.n	8012dec <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012ddc:	697a      	ldr	r2, [r7, #20]
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	1ad3      	subs	r3, r2, r3
 8012de2:	617b      	str	r3, [r7, #20]
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	3304      	adds	r3, #4
 8012de8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012dea:	e7e9      	b.n	8012dc0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012dec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	681a      	ldr	r2, [r3, #0]
 8012df2:	697b      	ldr	r3, [r7, #20]
 8012df4:	4413      	add	r3, r2
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	371c      	adds	r7, #28
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e00:	4770      	bx	lr

08012e02 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012e02:	b580      	push	{r7, lr}
 8012e04:	b086      	sub	sp, #24
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
 8012e0a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012e18:	d204      	bcs.n	8012e24 <dir_sdi+0x22>
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	f003 031f 	and.w	r3, r3, #31
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d001      	beq.n	8012e28 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012e24:	2302      	movs	r3, #2
 8012e26:	e063      	b.n	8012ef0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	683a      	ldr	r2, [r7, #0]
 8012e2c:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	689b      	ldr	r3, [r3, #8]
 8012e32:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d106      	bne.n	8012e48 <dir_sdi+0x46>
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	2b02      	cmp	r3, #2
 8012e40:	d902      	bls.n	8012e48 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012e42:	693b      	ldr	r3, [r7, #16]
 8012e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e46:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012e48:	697b      	ldr	r3, [r7, #20]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d10c      	bne.n	8012e68 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	095b      	lsrs	r3, r3, #5
 8012e52:	693a      	ldr	r2, [r7, #16]
 8012e54:	8912      	ldrh	r2, [r2, #8]
 8012e56:	4293      	cmp	r3, r2
 8012e58:	d301      	bcc.n	8012e5e <dir_sdi+0x5c>
 8012e5a:	2302      	movs	r3, #2
 8012e5c:	e048      	b.n	8012ef0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	619a      	str	r2, [r3, #24]
 8012e66:	e029      	b.n	8012ebc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	895b      	ldrh	r3, [r3, #10]
 8012e6c:	025b      	lsls	r3, r3, #9
 8012e6e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012e70:	e019      	b.n	8012ea6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	6979      	ldr	r1, [r7, #20]
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7ff fd01 	bl	801287e <get_fat>
 8012e7c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e84:	d101      	bne.n	8012e8a <dir_sdi+0x88>
 8012e86:	2301      	movs	r3, #1
 8012e88:	e032      	b.n	8012ef0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012e8a:	697b      	ldr	r3, [r7, #20]
 8012e8c:	2b01      	cmp	r3, #1
 8012e8e:	d904      	bls.n	8012e9a <dir_sdi+0x98>
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	695b      	ldr	r3, [r3, #20]
 8012e94:	697a      	ldr	r2, [r7, #20]
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d301      	bcc.n	8012e9e <dir_sdi+0x9c>
 8012e9a:	2302      	movs	r3, #2
 8012e9c:	e028      	b.n	8012ef0 <dir_sdi+0xee>
			ofs -= csz;
 8012e9e:	683a      	ldr	r2, [r7, #0]
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	1ad3      	subs	r3, r2, r3
 8012ea4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012ea6:	683a      	ldr	r2, [r7, #0]
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d2e1      	bcs.n	8012e72 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012eae:	6979      	ldr	r1, [r7, #20]
 8012eb0:	6938      	ldr	r0, [r7, #16]
 8012eb2:	f7ff fcc5 	bl	8012840 <clust2sect>
 8012eb6:	4602      	mov	r2, r0
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	697a      	ldr	r2, [r7, #20]
 8012ec0:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	699b      	ldr	r3, [r3, #24]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d101      	bne.n	8012ece <dir_sdi+0xcc>
 8012eca:	2302      	movs	r3, #2
 8012ecc:	e010      	b.n	8012ef0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	699a      	ldr	r2, [r3, #24]
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	0a5b      	lsrs	r3, r3, #9
 8012ed6:	441a      	add	r2, r3
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ee8:	441a      	add	r2, r3
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8012eee:	2300      	movs	r3, #0
}
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	3718      	adds	r7, #24
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b086      	sub	sp, #24
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	691b      	ldr	r3, [r3, #16]
 8012f0c:	3320      	adds	r3, #32
 8012f0e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	699b      	ldr	r3, [r3, #24]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d003      	beq.n	8012f20 <dir_next+0x28>
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012f1e:	d301      	bcc.n	8012f24 <dir_next+0x2c>
 8012f20:	2304      	movs	r3, #4
 8012f22:	e0aa      	b.n	801307a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	f040 8098 	bne.w	8013060 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	699b      	ldr	r3, [r3, #24]
 8012f34:	1c5a      	adds	r2, r3, #1
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	695b      	ldr	r3, [r3, #20]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d10b      	bne.n	8012f5a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	095b      	lsrs	r3, r3, #5
 8012f46:	68fa      	ldr	r2, [r7, #12]
 8012f48:	8912      	ldrh	r2, [r2, #8]
 8012f4a:	4293      	cmp	r3, r2
 8012f4c:	f0c0 8088 	bcc.w	8013060 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2200      	movs	r2, #0
 8012f54:	619a      	str	r2, [r3, #24]
 8012f56:	2304      	movs	r3, #4
 8012f58:	e08f      	b.n	801307a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	0a5b      	lsrs	r3, r3, #9
 8012f5e:	68fa      	ldr	r2, [r7, #12]
 8012f60:	8952      	ldrh	r2, [r2, #10]
 8012f62:	3a01      	subs	r2, #1
 8012f64:	4013      	ands	r3, r2
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d17a      	bne.n	8013060 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012f6a:	687a      	ldr	r2, [r7, #4]
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	695b      	ldr	r3, [r3, #20]
 8012f70:	4619      	mov	r1, r3
 8012f72:	4610      	mov	r0, r2
 8012f74:	f7ff fc83 	bl	801287e <get_fat>
 8012f78:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d801      	bhi.n	8012f84 <dir_next+0x8c>
 8012f80:	2302      	movs	r3, #2
 8012f82:	e07a      	b.n	801307a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f8a:	d101      	bne.n	8012f90 <dir_next+0x98>
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	e074      	b.n	801307a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	695b      	ldr	r3, [r3, #20]
 8012f94:	697a      	ldr	r2, [r7, #20]
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d358      	bcc.n	801304c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d104      	bne.n	8012faa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	619a      	str	r2, [r3, #24]
 8012fa6:	2304      	movs	r3, #4
 8012fa8:	e067      	b.n	801307a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	695b      	ldr	r3, [r3, #20]
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	4610      	mov	r0, r2
 8012fb4:	f7ff fe59 	bl	8012c6a <create_chain>
 8012fb8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d101      	bne.n	8012fc4 <dir_next+0xcc>
 8012fc0:	2307      	movs	r3, #7
 8012fc2:	e05a      	b.n	801307a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	2b01      	cmp	r3, #1
 8012fc8:	d101      	bne.n	8012fce <dir_next+0xd6>
 8012fca:	2302      	movs	r3, #2
 8012fcc:	e055      	b.n	801307a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fd4:	d101      	bne.n	8012fda <dir_next+0xe2>
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	e04f      	b.n	801307a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012fda:	68f8      	ldr	r0, [r7, #12]
 8012fdc:	f7ff fb51 	bl	8012682 <sync_window>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d001      	beq.n	8012fea <dir_next+0xf2>
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	e047      	b.n	801307a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	3330      	adds	r3, #48	@ 0x30
 8012fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ff2:	2100      	movs	r1, #0
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7ff fae7 	bl	80125c8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	613b      	str	r3, [r7, #16]
 8012ffe:	6979      	ldr	r1, [r7, #20]
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	f7ff fc1d 	bl	8012840 <clust2sect>
 8013006:	4602      	mov	r2, r0
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801300c:	e012      	b.n	8013034 <dir_next+0x13c>
						fs->wflag = 1;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	2201      	movs	r2, #1
 8013012:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013014:	68f8      	ldr	r0, [r7, #12]
 8013016:	f7ff fb34 	bl	8012682 <sync_window>
 801301a:	4603      	mov	r3, r0
 801301c:	2b00      	cmp	r3, #0
 801301e:	d001      	beq.n	8013024 <dir_next+0x12c>
 8013020:	2301      	movs	r3, #1
 8013022:	e02a      	b.n	801307a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	3301      	adds	r3, #1
 8013028:	613b      	str	r3, [r7, #16]
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801302e:	1c5a      	adds	r2, r3, #1
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	895b      	ldrh	r3, [r3, #10]
 8013038:	461a      	mov	r2, r3
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	4293      	cmp	r3, r2
 801303e:	d3e6      	bcc.n	801300e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	1ad2      	subs	r2, r2, r3
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	697a      	ldr	r2, [r7, #20]
 8013050:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8013052:	6979      	ldr	r1, [r7, #20]
 8013054:	68f8      	ldr	r0, [r7, #12]
 8013056:	f7ff fbf3 	bl	8012840 <clust2sect>
 801305a:	4602      	mov	r2, r0
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	68ba      	ldr	r2, [r7, #8]
 8013064:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013072:	441a      	add	r2, r3
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8013078:	2300      	movs	r3, #0
}
 801307a:	4618      	mov	r0, r3
 801307c:	3718      	adds	r7, #24
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}

08013082 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013082:	b580      	push	{r7, lr}
 8013084:	b086      	sub	sp, #24
 8013086:	af00      	add	r7, sp, #0
 8013088:	6078      	str	r0, [r7, #4]
 801308a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013092:	2100      	movs	r1, #0
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	f7ff feb4 	bl	8012e02 <dir_sdi>
 801309a:	4603      	mov	r3, r0
 801309c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801309e:	7dfb      	ldrb	r3, [r7, #23]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d12b      	bne.n	80130fc <dir_alloc+0x7a>
		n = 0;
 80130a4:	2300      	movs	r3, #0
 80130a6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	699b      	ldr	r3, [r3, #24]
 80130ac:	4619      	mov	r1, r3
 80130ae:	68f8      	ldr	r0, [r7, #12]
 80130b0:	f7ff fb2b 	bl	801270a <move_window>
 80130b4:	4603      	mov	r3, r0
 80130b6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80130b8:	7dfb      	ldrb	r3, [r7, #23]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d11d      	bne.n	80130fa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	69db      	ldr	r3, [r3, #28]
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	2be5      	cmp	r3, #229	@ 0xe5
 80130c6:	d004      	beq.n	80130d2 <dir_alloc+0x50>
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	69db      	ldr	r3, [r3, #28]
 80130cc:	781b      	ldrb	r3, [r3, #0]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d107      	bne.n	80130e2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	3301      	adds	r3, #1
 80130d6:	613b      	str	r3, [r7, #16]
 80130d8:	693a      	ldr	r2, [r7, #16]
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	429a      	cmp	r2, r3
 80130de:	d102      	bne.n	80130e6 <dir_alloc+0x64>
 80130e0:	e00c      	b.n	80130fc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80130e2:	2300      	movs	r3, #0
 80130e4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80130e6:	2101      	movs	r1, #1
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f7ff ff05 	bl	8012ef8 <dir_next>
 80130ee:	4603      	mov	r3, r0
 80130f0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80130f2:	7dfb      	ldrb	r3, [r7, #23]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d0d7      	beq.n	80130a8 <dir_alloc+0x26>
 80130f8:	e000      	b.n	80130fc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80130fa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80130fc:	7dfb      	ldrb	r3, [r7, #23]
 80130fe:	2b04      	cmp	r3, #4
 8013100:	d101      	bne.n	8013106 <dir_alloc+0x84>
 8013102:	2307      	movs	r3, #7
 8013104:	75fb      	strb	r3, [r7, #23]
	return res;
 8013106:	7dfb      	ldrb	r3, [r7, #23]
}
 8013108:	4618      	mov	r0, r3
 801310a:	3718      	adds	r7, #24
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}

08013110 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b084      	sub	sp, #16
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	331a      	adds	r3, #26
 801311e:	4618      	mov	r0, r3
 8013120:	f7ff f9ae 	bl	8012480 <ld_word>
 8013124:	4603      	mov	r3, r0
 8013126:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	2b03      	cmp	r3, #3
 801312e:	d109      	bne.n	8013144 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	3314      	adds	r3, #20
 8013134:	4618      	mov	r0, r3
 8013136:	f7ff f9a3 	bl	8012480 <ld_word>
 801313a:	4603      	mov	r3, r0
 801313c:	041b      	lsls	r3, r3, #16
 801313e:	68fa      	ldr	r2, [r7, #12]
 8013140:	4313      	orrs	r3, r2
 8013142:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013144:	68fb      	ldr	r3, [r7, #12]
}
 8013146:	4618      	mov	r0, r3
 8013148:	3710      	adds	r7, #16
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}

0801314e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801314e:	b580      	push	{r7, lr}
 8013150:	b084      	sub	sp, #16
 8013152:	af00      	add	r7, sp, #0
 8013154:	60f8      	str	r0, [r7, #12]
 8013156:	60b9      	str	r1, [r7, #8]
 8013158:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	331a      	adds	r3, #26
 801315e:	687a      	ldr	r2, [r7, #4]
 8013160:	b292      	uxth	r2, r2
 8013162:	4611      	mov	r1, r2
 8013164:	4618      	mov	r0, r3
 8013166:	f7ff f9c7 	bl	80124f8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	2b03      	cmp	r3, #3
 8013170:	d109      	bne.n	8013186 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	f103 0214 	add.w	r2, r3, #20
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	0c1b      	lsrs	r3, r3, #16
 801317c:	b29b      	uxth	r3, r3
 801317e:	4619      	mov	r1, r3
 8013180:	4610      	mov	r0, r2
 8013182:	f7ff f9b9 	bl	80124f8 <st_word>
	}
}
 8013186:	bf00      	nop
 8013188:	3710      	adds	r7, #16
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}

0801318e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801318e:	b580      	push	{r7, lr}
 8013190:	b086      	sub	sp, #24
 8013192:	af00      	add	r7, sp, #0
 8013194:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801319c:	2100      	movs	r1, #0
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f7ff fe2f 	bl	8012e02 <dir_sdi>
 80131a4:	4603      	mov	r3, r0
 80131a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80131a8:	7dfb      	ldrb	r3, [r7, #23]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d001      	beq.n	80131b2 <dir_find+0x24>
 80131ae:	7dfb      	ldrb	r3, [r7, #23]
 80131b0:	e03e      	b.n	8013230 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	699b      	ldr	r3, [r3, #24]
 80131b6:	4619      	mov	r1, r3
 80131b8:	6938      	ldr	r0, [r7, #16]
 80131ba:	f7ff faa6 	bl	801270a <move_window>
 80131be:	4603      	mov	r3, r0
 80131c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80131c2:	7dfb      	ldrb	r3, [r7, #23]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d12f      	bne.n	8013228 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	69db      	ldr	r3, [r3, #28]
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80131d0:	7bfb      	ldrb	r3, [r7, #15]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d102      	bne.n	80131dc <dir_find+0x4e>
 80131d6:	2304      	movs	r3, #4
 80131d8:	75fb      	strb	r3, [r7, #23]
 80131da:	e028      	b.n	801322e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	69db      	ldr	r3, [r3, #28]
 80131e0:	330b      	adds	r3, #11
 80131e2:	781b      	ldrb	r3, [r3, #0]
 80131e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80131e8:	b2da      	uxtb	r2, r3
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	69db      	ldr	r3, [r3, #28]
 80131f2:	330b      	adds	r3, #11
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	f003 0308 	and.w	r3, r3, #8
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d10a      	bne.n	8013214 <dir_find+0x86>
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	69d8      	ldr	r0, [r3, #28]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	3320      	adds	r3, #32
 8013206:	220b      	movs	r2, #11
 8013208:	4619      	mov	r1, r3
 801320a:	f7ff f9f8 	bl	80125fe <mem_cmp>
 801320e:	4603      	mov	r3, r0
 8013210:	2b00      	cmp	r3, #0
 8013212:	d00b      	beq.n	801322c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013214:	2100      	movs	r1, #0
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f7ff fe6e 	bl	8012ef8 <dir_next>
 801321c:	4603      	mov	r3, r0
 801321e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013220:	7dfb      	ldrb	r3, [r7, #23]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d0c5      	beq.n	80131b2 <dir_find+0x24>
 8013226:	e002      	b.n	801322e <dir_find+0xa0>
		if (res != FR_OK) break;
 8013228:	bf00      	nop
 801322a:	e000      	b.n	801322e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801322c:	bf00      	nop

	return res;
 801322e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013230:	4618      	mov	r0, r3
 8013232:	3718      	adds	r7, #24
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b084      	sub	sp, #16
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013246:	2101      	movs	r1, #1
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f7ff ff1a 	bl	8013082 <dir_alloc>
 801324e:	4603      	mov	r3, r0
 8013250:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013252:	7bfb      	ldrb	r3, [r7, #15]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d11c      	bne.n	8013292 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	699b      	ldr	r3, [r3, #24]
 801325c:	4619      	mov	r1, r3
 801325e:	68b8      	ldr	r0, [r7, #8]
 8013260:	f7ff fa53 	bl	801270a <move_window>
 8013264:	4603      	mov	r3, r0
 8013266:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013268:	7bfb      	ldrb	r3, [r7, #15]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d111      	bne.n	8013292 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	69db      	ldr	r3, [r3, #28]
 8013272:	2220      	movs	r2, #32
 8013274:	2100      	movs	r1, #0
 8013276:	4618      	mov	r0, r3
 8013278:	f7ff f9a6 	bl	80125c8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	69d8      	ldr	r0, [r3, #28]
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	3320      	adds	r3, #32
 8013284:	220b      	movs	r2, #11
 8013286:	4619      	mov	r1, r3
 8013288:	f7ff f97d 	bl	8012586 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	2201      	movs	r2, #1
 8013290:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013292:	7bfb      	ldrb	r3, [r7, #15]
}
 8013294:	4618      	mov	r0, r3
 8013296:	3710      	adds	r7, #16
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}

0801329c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b088      	sub	sp, #32
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	60fb      	str	r3, [r7, #12]
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	3320      	adds	r3, #32
 80132b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80132b2:	220b      	movs	r2, #11
 80132b4:	2120      	movs	r1, #32
 80132b6:	68b8      	ldr	r0, [r7, #8]
 80132b8:	f7ff f986 	bl	80125c8 <mem_set>
	si = i = 0; ni = 8;
 80132bc:	2300      	movs	r3, #0
 80132be:	613b      	str	r3, [r7, #16]
 80132c0:	693b      	ldr	r3, [r7, #16]
 80132c2:	61fb      	str	r3, [r7, #28]
 80132c4:	2308      	movs	r3, #8
 80132c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80132c8:	69fb      	ldr	r3, [r7, #28]
 80132ca:	1c5a      	adds	r2, r3, #1
 80132cc:	61fa      	str	r2, [r7, #28]
 80132ce:	68fa      	ldr	r2, [r7, #12]
 80132d0:	4413      	add	r3, r2
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80132d6:	7efb      	ldrb	r3, [r7, #27]
 80132d8:	2b20      	cmp	r3, #32
 80132da:	d94e      	bls.n	801337a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80132dc:	7efb      	ldrb	r3, [r7, #27]
 80132de:	2b2f      	cmp	r3, #47	@ 0x2f
 80132e0:	d006      	beq.n	80132f0 <create_name+0x54>
 80132e2:	7efb      	ldrb	r3, [r7, #27]
 80132e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80132e6:	d110      	bne.n	801330a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80132e8:	e002      	b.n	80132f0 <create_name+0x54>
 80132ea:	69fb      	ldr	r3, [r7, #28]
 80132ec:	3301      	adds	r3, #1
 80132ee:	61fb      	str	r3, [r7, #28]
 80132f0:	68fa      	ldr	r2, [r7, #12]
 80132f2:	69fb      	ldr	r3, [r7, #28]
 80132f4:	4413      	add	r3, r2
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80132fa:	d0f6      	beq.n	80132ea <create_name+0x4e>
 80132fc:	68fa      	ldr	r2, [r7, #12]
 80132fe:	69fb      	ldr	r3, [r7, #28]
 8013300:	4413      	add	r3, r2
 8013302:	781b      	ldrb	r3, [r3, #0]
 8013304:	2b5c      	cmp	r3, #92	@ 0x5c
 8013306:	d0f0      	beq.n	80132ea <create_name+0x4e>
			break;
 8013308:	e038      	b.n	801337c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801330a:	7efb      	ldrb	r3, [r7, #27]
 801330c:	2b2e      	cmp	r3, #46	@ 0x2e
 801330e:	d003      	beq.n	8013318 <create_name+0x7c>
 8013310:	693a      	ldr	r2, [r7, #16]
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	429a      	cmp	r2, r3
 8013316:	d30c      	bcc.n	8013332 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	2b0b      	cmp	r3, #11
 801331c:	d002      	beq.n	8013324 <create_name+0x88>
 801331e:	7efb      	ldrb	r3, [r7, #27]
 8013320:	2b2e      	cmp	r3, #46	@ 0x2e
 8013322:	d001      	beq.n	8013328 <create_name+0x8c>
 8013324:	2306      	movs	r3, #6
 8013326:	e044      	b.n	80133b2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013328:	2308      	movs	r3, #8
 801332a:	613b      	str	r3, [r7, #16]
 801332c:	230b      	movs	r3, #11
 801332e:	617b      	str	r3, [r7, #20]
			continue;
 8013330:	e022      	b.n	8013378 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013332:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013336:	2b00      	cmp	r3, #0
 8013338:	da04      	bge.n	8013344 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801333a:	7efb      	ldrb	r3, [r7, #27]
 801333c:	3b80      	subs	r3, #128	@ 0x80
 801333e:	4a1f      	ldr	r2, [pc, #124]	@ (80133bc <create_name+0x120>)
 8013340:	5cd3      	ldrb	r3, [r2, r3]
 8013342:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013344:	7efb      	ldrb	r3, [r7, #27]
 8013346:	4619      	mov	r1, r3
 8013348:	481d      	ldr	r0, [pc, #116]	@ (80133c0 <create_name+0x124>)
 801334a:	f7ff f97f 	bl	801264c <chk_chr>
 801334e:	4603      	mov	r3, r0
 8013350:	2b00      	cmp	r3, #0
 8013352:	d001      	beq.n	8013358 <create_name+0xbc>
 8013354:	2306      	movs	r3, #6
 8013356:	e02c      	b.n	80133b2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013358:	7efb      	ldrb	r3, [r7, #27]
 801335a:	2b60      	cmp	r3, #96	@ 0x60
 801335c:	d905      	bls.n	801336a <create_name+0xce>
 801335e:	7efb      	ldrb	r3, [r7, #27]
 8013360:	2b7a      	cmp	r3, #122	@ 0x7a
 8013362:	d802      	bhi.n	801336a <create_name+0xce>
 8013364:	7efb      	ldrb	r3, [r7, #27]
 8013366:	3b20      	subs	r3, #32
 8013368:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801336a:	693b      	ldr	r3, [r7, #16]
 801336c:	1c5a      	adds	r2, r3, #1
 801336e:	613a      	str	r2, [r7, #16]
 8013370:	68ba      	ldr	r2, [r7, #8]
 8013372:	4413      	add	r3, r2
 8013374:	7efa      	ldrb	r2, [r7, #27]
 8013376:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013378:	e7a6      	b.n	80132c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801337a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801337c:	68fa      	ldr	r2, [r7, #12]
 801337e:	69fb      	ldr	r3, [r7, #28]
 8013380:	441a      	add	r2, r3
 8013382:	683b      	ldr	r3, [r7, #0]
 8013384:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d101      	bne.n	8013390 <create_name+0xf4>
 801338c:	2306      	movs	r3, #6
 801338e:	e010      	b.n	80133b2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	781b      	ldrb	r3, [r3, #0]
 8013394:	2be5      	cmp	r3, #229	@ 0xe5
 8013396:	d102      	bne.n	801339e <create_name+0x102>
 8013398:	68bb      	ldr	r3, [r7, #8]
 801339a:	2205      	movs	r2, #5
 801339c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801339e:	7efb      	ldrb	r3, [r7, #27]
 80133a0:	2b20      	cmp	r3, #32
 80133a2:	d801      	bhi.n	80133a8 <create_name+0x10c>
 80133a4:	2204      	movs	r2, #4
 80133a6:	e000      	b.n	80133aa <create_name+0x10e>
 80133a8:	2200      	movs	r2, #0
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	330b      	adds	r3, #11
 80133ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80133b0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3720      	adds	r7, #32
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	bf00      	nop
 80133bc:	0801c15c 	.word	0x0801c15c
 80133c0:	0801c0dc 	.word	0x0801c0dc

080133c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b086      	sub	sp, #24
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80133d2:	693b      	ldr	r3, [r7, #16]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80133d8:	e002      	b.n	80133e0 <follow_path+0x1c>
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	3301      	adds	r3, #1
 80133de:	603b      	str	r3, [r7, #0]
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80133e6:	d0f8      	beq.n	80133da <follow_path+0x16>
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	781b      	ldrb	r3, [r3, #0]
 80133ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80133ee:	d0f4      	beq.n	80133da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	2200      	movs	r2, #0
 80133f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	2b1f      	cmp	r3, #31
 80133fc:	d80a      	bhi.n	8013414 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2280      	movs	r2, #128	@ 0x80
 8013402:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8013406:	2100      	movs	r1, #0
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f7ff fcfa 	bl	8012e02 <dir_sdi>
 801340e:	4603      	mov	r3, r0
 8013410:	75fb      	strb	r3, [r7, #23]
 8013412:	e043      	b.n	801349c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013414:	463b      	mov	r3, r7
 8013416:	4619      	mov	r1, r3
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f7ff ff3f 	bl	801329c <create_name>
 801341e:	4603      	mov	r3, r0
 8013420:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013422:	7dfb      	ldrb	r3, [r7, #23]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d134      	bne.n	8013492 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013428:	6878      	ldr	r0, [r7, #4]
 801342a:	f7ff feb0 	bl	801318e <dir_find>
 801342e:	4603      	mov	r3, r0
 8013430:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8013438:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801343a:	7dfb      	ldrb	r3, [r7, #23]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d00a      	beq.n	8013456 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013440:	7dfb      	ldrb	r3, [r7, #23]
 8013442:	2b04      	cmp	r3, #4
 8013444:	d127      	bne.n	8013496 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013446:	7afb      	ldrb	r3, [r7, #11]
 8013448:	f003 0304 	and.w	r3, r3, #4
 801344c:	2b00      	cmp	r3, #0
 801344e:	d122      	bne.n	8013496 <follow_path+0xd2>
 8013450:	2305      	movs	r3, #5
 8013452:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013454:	e01f      	b.n	8013496 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013456:	7afb      	ldrb	r3, [r7, #11]
 8013458:	f003 0304 	and.w	r3, r3, #4
 801345c:	2b00      	cmp	r3, #0
 801345e:	d11c      	bne.n	801349a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013460:	693b      	ldr	r3, [r7, #16]
 8013462:	799b      	ldrb	r3, [r3, #6]
 8013464:	f003 0310 	and.w	r3, r3, #16
 8013468:	2b00      	cmp	r3, #0
 801346a:	d102      	bne.n	8013472 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801346c:	2305      	movs	r3, #5
 801346e:	75fb      	strb	r3, [r7, #23]
 8013470:	e014      	b.n	801349c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	691b      	ldr	r3, [r3, #16]
 801347c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013480:	4413      	add	r3, r2
 8013482:	4619      	mov	r1, r3
 8013484:	68f8      	ldr	r0, [r7, #12]
 8013486:	f7ff fe43 	bl	8013110 <ld_clust>
 801348a:	4602      	mov	r2, r0
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013490:	e7c0      	b.n	8013414 <follow_path+0x50>
			if (res != FR_OK) break;
 8013492:	bf00      	nop
 8013494:	e002      	b.n	801349c <follow_path+0xd8>
				break;
 8013496:	bf00      	nop
 8013498:	e000      	b.n	801349c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801349a:	bf00      	nop
			}
		}
	}

	return res;
 801349c:	7dfb      	ldrb	r3, [r7, #23]
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3718      	adds	r7, #24
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}

080134a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80134a6:	b480      	push	{r7}
 80134a8:	b087      	sub	sp, #28
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80134ae:	f04f 33ff 	mov.w	r3, #4294967295
 80134b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d031      	beq.n	8013520 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	617b      	str	r3, [r7, #20]
 80134c2:	e002      	b.n	80134ca <get_ldnumber+0x24>
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	3301      	adds	r3, #1
 80134c8:	617b      	str	r3, [r7, #20]
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	2b20      	cmp	r3, #32
 80134d0:	d903      	bls.n	80134da <get_ldnumber+0x34>
 80134d2:	697b      	ldr	r3, [r7, #20]
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	2b3a      	cmp	r3, #58	@ 0x3a
 80134d8:	d1f4      	bne.n	80134c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80134da:	697b      	ldr	r3, [r7, #20]
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	2b3a      	cmp	r3, #58	@ 0x3a
 80134e0:	d11c      	bne.n	801351c <get_ldnumber+0x76>
			tp = *path;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	1c5a      	adds	r2, r3, #1
 80134ec:	60fa      	str	r2, [r7, #12]
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	3b30      	subs	r3, #48	@ 0x30
 80134f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	2b09      	cmp	r3, #9
 80134f8:	d80e      	bhi.n	8013518 <get_ldnumber+0x72>
 80134fa:	68fa      	ldr	r2, [r7, #12]
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	429a      	cmp	r2, r3
 8013500:	d10a      	bne.n	8013518 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d107      	bne.n	8013518 <get_ldnumber+0x72>
					vol = (int)i;
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	3301      	adds	r3, #1
 8013510:	617b      	str	r3, [r7, #20]
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	697a      	ldr	r2, [r7, #20]
 8013516:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	e002      	b.n	8013522 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801351c:	2300      	movs	r3, #0
 801351e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013520:	693b      	ldr	r3, [r7, #16]
}
 8013522:	4618      	mov	r0, r3
 8013524:	371c      	adds	r7, #28
 8013526:	46bd      	mov	sp, r7
 8013528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352c:	4770      	bx	lr
	...

08013530 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b082      	sub	sp, #8
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	2200      	movs	r2, #0
 801353e:	70da      	strb	r2, [r3, #3]
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f04f 32ff 	mov.w	r2, #4294967295
 8013546:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013548:	6839      	ldr	r1, [r7, #0]
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f7ff f8dd 	bl	801270a <move_window>
 8013550:	4603      	mov	r3, r0
 8013552:	2b00      	cmp	r3, #0
 8013554:	d001      	beq.n	801355a <check_fs+0x2a>
 8013556:	2304      	movs	r3, #4
 8013558:	e038      	b.n	80135cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	3330      	adds	r3, #48	@ 0x30
 801355e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013562:	4618      	mov	r0, r3
 8013564:	f7fe ff8c 	bl	8012480 <ld_word>
 8013568:	4603      	mov	r3, r0
 801356a:	461a      	mov	r2, r3
 801356c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013570:	429a      	cmp	r2, r3
 8013572:	d001      	beq.n	8013578 <check_fs+0x48>
 8013574:	2303      	movs	r3, #3
 8013576:	e029      	b.n	80135cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801357e:	2be9      	cmp	r3, #233	@ 0xe9
 8013580:	d009      	beq.n	8013596 <check_fs+0x66>
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013588:	2beb      	cmp	r3, #235	@ 0xeb
 801358a:	d11e      	bne.n	80135ca <check_fs+0x9a>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8013592:	2b90      	cmp	r3, #144	@ 0x90
 8013594:	d119      	bne.n	80135ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	3330      	adds	r3, #48	@ 0x30
 801359a:	3336      	adds	r3, #54	@ 0x36
 801359c:	4618      	mov	r0, r3
 801359e:	f7fe ff88 	bl	80124b2 <ld_dword>
 80135a2:	4603      	mov	r3, r0
 80135a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80135a8:	4a0a      	ldr	r2, [pc, #40]	@ (80135d4 <check_fs+0xa4>)
 80135aa:	4293      	cmp	r3, r2
 80135ac:	d101      	bne.n	80135b2 <check_fs+0x82>
 80135ae:	2300      	movs	r3, #0
 80135b0:	e00c      	b.n	80135cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	3330      	adds	r3, #48	@ 0x30
 80135b6:	3352      	adds	r3, #82	@ 0x52
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7fe ff7a 	bl	80124b2 <ld_dword>
 80135be:	4603      	mov	r3, r0
 80135c0:	4a05      	ldr	r2, [pc, #20]	@ (80135d8 <check_fs+0xa8>)
 80135c2:	4293      	cmp	r3, r2
 80135c4:	d101      	bne.n	80135ca <check_fs+0x9a>
 80135c6:	2300      	movs	r3, #0
 80135c8:	e000      	b.n	80135cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80135ca:	2302      	movs	r3, #2
}
 80135cc:	4618      	mov	r0, r3
 80135ce:	3708      	adds	r7, #8
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}
 80135d4:	00544146 	.word	0x00544146
 80135d8:	33544146 	.word	0x33544146

080135dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b096      	sub	sp, #88	@ 0x58
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	4613      	mov	r3, r2
 80135e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	2200      	movs	r2, #0
 80135ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80135f0:	68f8      	ldr	r0, [r7, #12]
 80135f2:	f7ff ff58 	bl	80134a6 <get_ldnumber>
 80135f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80135f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	da01      	bge.n	8013602 <find_volume+0x26>
 80135fe:	230b      	movs	r3, #11
 8013600:	e22a      	b.n	8013a58 <find_volume+0x47c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013602:	4aa1      	ldr	r2, [pc, #644]	@ (8013888 <find_volume+0x2ac>)
 8013604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801360a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801360c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801360e:	2b00      	cmp	r3, #0
 8013610:	d101      	bne.n	8013616 <find_volume+0x3a>
 8013612:	230c      	movs	r3, #12
 8013614:	e220      	b.n	8013a58 <find_volume+0x47c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801361a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801361c:	79fb      	ldrb	r3, [r7, #7]
 801361e:	f023 0301 	bic.w	r3, r3, #1
 8013622:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013626:	781b      	ldrb	r3, [r3, #0]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d01a      	beq.n	8013662 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801362c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801362e:	785b      	ldrb	r3, [r3, #1]
 8013630:	4618      	mov	r0, r3
 8013632:	f7fe fe87 	bl	8012344 <disk_status>
 8013636:	4603      	mov	r3, r0
 8013638:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801363c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013640:	f003 0301 	and.w	r3, r3, #1
 8013644:	2b00      	cmp	r3, #0
 8013646:	d10c      	bne.n	8013662 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013648:	79fb      	ldrb	r3, [r7, #7]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d007      	beq.n	801365e <find_volume+0x82>
 801364e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013652:	f003 0304 	and.w	r3, r3, #4
 8013656:	2b00      	cmp	r3, #0
 8013658:	d001      	beq.n	801365e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801365a:	230a      	movs	r3, #10
 801365c:	e1fc      	b.n	8013a58 <find_volume+0x47c>
			}
			return FR_OK;				/* The file system object is valid */
 801365e:	2300      	movs	r3, #0
 8013660:	e1fa      	b.n	8013a58 <find_volume+0x47c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013664:	2200      	movs	r2, #0
 8013666:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801366a:	b2da      	uxtb	r2, r3
 801366c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801366e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013672:	785b      	ldrb	r3, [r3, #1]
 8013674:	4618      	mov	r0, r3
 8013676:	f7fe fe7f 	bl	8012378 <disk_initialize>
 801367a:	4603      	mov	r3, r0
 801367c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013680:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013684:	f003 0301 	and.w	r3, r3, #1
 8013688:	2b00      	cmp	r3, #0
 801368a:	d001      	beq.n	8013690 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801368c:	2303      	movs	r3, #3
 801368e:	e1e3      	b.n	8013a58 <find_volume+0x47c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013690:	79fb      	ldrb	r3, [r7, #7]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d007      	beq.n	80136a6 <find_volume+0xca>
 8013696:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801369a:	f003 0304 	and.w	r3, r3, #4
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d001      	beq.n	80136a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80136a2:	230a      	movs	r3, #10
 80136a4:	e1d8      	b.n	8013a58 <find_volume+0x47c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80136a6:	2300      	movs	r3, #0
 80136a8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80136aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80136ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80136ae:	f7ff ff3f 	bl	8013530 <check_fs>
 80136b2:	4603      	mov	r3, r0
 80136b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80136b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80136bc:	2b02      	cmp	r3, #2
 80136be:	d149      	bne.n	8013754 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80136c0:	2300      	movs	r3, #0
 80136c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80136c4:	e01e      	b.n	8013704 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80136c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80136cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136ce:	011b      	lsls	r3, r3, #4
 80136d0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80136d4:	4413      	add	r3, r2
 80136d6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80136d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136da:	3304      	adds	r3, #4
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d006      	beq.n	80136f0 <find_volume+0x114>
 80136e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e4:	3308      	adds	r3, #8
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7fe fee3 	bl	80124b2 <ld_dword>
 80136ec:	4602      	mov	r2, r0
 80136ee:	e000      	b.n	80136f2 <find_volume+0x116>
 80136f0:	2200      	movs	r2, #0
 80136f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136f4:	009b      	lsls	r3, r3, #2
 80136f6:	3358      	adds	r3, #88	@ 0x58
 80136f8:	443b      	add	r3, r7
 80136fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80136fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013700:	3301      	adds	r3, #1
 8013702:	643b      	str	r3, [r7, #64]	@ 0x40
 8013704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013706:	2b03      	cmp	r3, #3
 8013708:	d9dd      	bls.n	80136c6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801370a:	2300      	movs	r3, #0
 801370c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801370e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013710:	2b00      	cmp	r3, #0
 8013712:	d002      	beq.n	801371a <find_volume+0x13e>
 8013714:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013716:	3b01      	subs	r3, #1
 8013718:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801371a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801371c:	009b      	lsls	r3, r3, #2
 801371e:	3358      	adds	r3, #88	@ 0x58
 8013720:	443b      	add	r3, r7
 8013722:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013726:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801372a:	2b00      	cmp	r3, #0
 801372c:	d005      	beq.n	801373a <find_volume+0x15e>
 801372e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013730:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013732:	f7ff fefd 	bl	8013530 <check_fs>
 8013736:	4603      	mov	r3, r0
 8013738:	e000      	b.n	801373c <find_volume+0x160>
 801373a:	2303      	movs	r3, #3
 801373c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013740:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013744:	2b01      	cmp	r3, #1
 8013746:	d905      	bls.n	8013754 <find_volume+0x178>
 8013748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801374a:	3301      	adds	r3, #1
 801374c:	643b      	str	r3, [r7, #64]	@ 0x40
 801374e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013750:	2b03      	cmp	r3, #3
 8013752:	d9e2      	bls.n	801371a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013754:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013758:	2b04      	cmp	r3, #4
 801375a:	d101      	bne.n	8013760 <find_volume+0x184>
 801375c:	2301      	movs	r3, #1
 801375e:	e17b      	b.n	8013a58 <find_volume+0x47c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013760:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013764:	2b01      	cmp	r3, #1
 8013766:	d901      	bls.n	801376c <find_volume+0x190>
 8013768:	230d      	movs	r3, #13
 801376a:	e175      	b.n	8013a58 <find_volume+0x47c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801376c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801376e:	3330      	adds	r3, #48	@ 0x30
 8013770:	330b      	adds	r3, #11
 8013772:	4618      	mov	r0, r3
 8013774:	f7fe fe84 	bl	8012480 <ld_word>
 8013778:	4603      	mov	r3, r0
 801377a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801377e:	d001      	beq.n	8013784 <find_volume+0x1a8>
 8013780:	230d      	movs	r3, #13
 8013782:	e169      	b.n	8013a58 <find_volume+0x47c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013786:	3330      	adds	r3, #48	@ 0x30
 8013788:	3316      	adds	r3, #22
 801378a:	4618      	mov	r0, r3
 801378c:	f7fe fe78 	bl	8012480 <ld_word>
 8013790:	4603      	mov	r3, r0
 8013792:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013796:	2b00      	cmp	r3, #0
 8013798:	d106      	bne.n	80137a8 <find_volume+0x1cc>
 801379a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801379c:	3330      	adds	r3, #48	@ 0x30
 801379e:	3324      	adds	r3, #36	@ 0x24
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7fe fe86 	bl	80124b2 <ld_dword>
 80137a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80137a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80137ac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80137ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137b0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80137b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80137b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ba:	789b      	ldrb	r3, [r3, #2]
 80137bc:	2b01      	cmp	r3, #1
 80137be:	d005      	beq.n	80137cc <find_volume+0x1f0>
 80137c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137c2:	789b      	ldrb	r3, [r3, #2]
 80137c4:	2b02      	cmp	r3, #2
 80137c6:	d001      	beq.n	80137cc <find_volume+0x1f0>
 80137c8:	230d      	movs	r3, #13
 80137ca:	e145      	b.n	8013a58 <find_volume+0x47c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80137cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ce:	789b      	ldrb	r3, [r3, #2]
 80137d0:	461a      	mov	r2, r3
 80137d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137d4:	fb02 f303 	mul.w	r3, r2, r3
 80137d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80137da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80137e0:	461a      	mov	r2, r3
 80137e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80137e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e8:	895b      	ldrh	r3, [r3, #10]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d008      	beq.n	8013800 <find_volume+0x224>
 80137ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137f0:	895b      	ldrh	r3, [r3, #10]
 80137f2:	461a      	mov	r2, r3
 80137f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137f6:	895b      	ldrh	r3, [r3, #10]
 80137f8:	3b01      	subs	r3, #1
 80137fa:	4013      	ands	r3, r2
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d001      	beq.n	8013804 <find_volume+0x228>
 8013800:	230d      	movs	r3, #13
 8013802:	e129      	b.n	8013a58 <find_volume+0x47c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013806:	3330      	adds	r3, #48	@ 0x30
 8013808:	3311      	adds	r3, #17
 801380a:	4618      	mov	r0, r3
 801380c:	f7fe fe38 	bl	8012480 <ld_word>
 8013810:	4603      	mov	r3, r0
 8013812:	461a      	mov	r2, r3
 8013814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013816:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801381a:	891b      	ldrh	r3, [r3, #8]
 801381c:	f003 030f 	and.w	r3, r3, #15
 8013820:	b29b      	uxth	r3, r3
 8013822:	2b00      	cmp	r3, #0
 8013824:	d001      	beq.n	801382a <find_volume+0x24e>
 8013826:	230d      	movs	r3, #13
 8013828:	e116      	b.n	8013a58 <find_volume+0x47c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801382a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801382c:	3330      	adds	r3, #48	@ 0x30
 801382e:	3313      	adds	r3, #19
 8013830:	4618      	mov	r0, r3
 8013832:	f7fe fe25 	bl	8012480 <ld_word>
 8013836:	4603      	mov	r3, r0
 8013838:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801383a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801383c:	2b00      	cmp	r3, #0
 801383e:	d106      	bne.n	801384e <find_volume+0x272>
 8013840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013842:	3330      	adds	r3, #48	@ 0x30
 8013844:	3320      	adds	r3, #32
 8013846:	4618      	mov	r0, r3
 8013848:	f7fe fe33 	bl	80124b2 <ld_dword>
 801384c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801384e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013850:	3330      	adds	r3, #48	@ 0x30
 8013852:	330e      	adds	r3, #14
 8013854:	4618      	mov	r0, r3
 8013856:	f7fe fe13 	bl	8012480 <ld_word>
 801385a:	4603      	mov	r3, r0
 801385c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801385e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013860:	2b00      	cmp	r3, #0
 8013862:	d101      	bne.n	8013868 <find_volume+0x28c>
 8013864:	230d      	movs	r3, #13
 8013866:	e0f7      	b.n	8013a58 <find_volume+0x47c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013868:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801386a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801386c:	4413      	add	r3, r2
 801386e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013870:	8912      	ldrh	r2, [r2, #8]
 8013872:	0912      	lsrs	r2, r2, #4
 8013874:	b292      	uxth	r2, r2
 8013876:	4413      	add	r3, r2
 8013878:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801387a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801387e:	429a      	cmp	r2, r3
 8013880:	d204      	bcs.n	801388c <find_volume+0x2b0>
 8013882:	230d      	movs	r3, #13
 8013884:	e0e8      	b.n	8013a58 <find_volume+0x47c>
 8013886:	bf00      	nop
 8013888:	20002b24 	.word	0x20002b24
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801388c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013890:	1ad3      	subs	r3, r2, r3
 8013892:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013894:	8952      	ldrh	r2, [r2, #10]
 8013896:	fbb3 f3f2 	udiv	r3, r3, r2
 801389a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d101      	bne.n	80138a6 <find_volume+0x2ca>
 80138a2:	230d      	movs	r3, #13
 80138a4:	e0d8      	b.n	8013a58 <find_volume+0x47c>
		fmt = FS_FAT32;
 80138a6:	2303      	movs	r3, #3
 80138a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80138ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d802      	bhi.n	80138bc <find_volume+0x2e0>
 80138b6:	2302      	movs	r3, #2
 80138b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80138bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138be:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80138c2:	4293      	cmp	r3, r2
 80138c4:	d802      	bhi.n	80138cc <find_volume+0x2f0>
 80138c6:	2301      	movs	r3, #1
 80138c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80138cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ce:	1c9a      	adds	r2, r3, #2
 80138d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80138d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80138d8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80138da:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80138dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138de:	441a      	add	r2, r3
 80138e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138e2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80138e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80138e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e8:	441a      	add	r2, r3
 80138ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ec:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80138ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80138f2:	2b03      	cmp	r3, #3
 80138f4:	d11e      	bne.n	8013934 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80138f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f8:	3330      	adds	r3, #48	@ 0x30
 80138fa:	332a      	adds	r3, #42	@ 0x2a
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7fe fdbf 	bl	8012480 <ld_word>
 8013902:	4603      	mov	r3, r0
 8013904:	2b00      	cmp	r3, #0
 8013906:	d001      	beq.n	801390c <find_volume+0x330>
 8013908:	230d      	movs	r3, #13
 801390a:	e0a5      	b.n	8013a58 <find_volume+0x47c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801390e:	891b      	ldrh	r3, [r3, #8]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d001      	beq.n	8013918 <find_volume+0x33c>
 8013914:	230d      	movs	r3, #13
 8013916:	e09f      	b.n	8013a58 <find_volume+0x47c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801391a:	3330      	adds	r3, #48	@ 0x30
 801391c:	332c      	adds	r3, #44	@ 0x2c
 801391e:	4618      	mov	r0, r3
 8013920:	f7fe fdc7 	bl	80124b2 <ld_dword>
 8013924:	4602      	mov	r2, r0
 8013926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013928:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801392a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801392c:	695b      	ldr	r3, [r3, #20]
 801392e:	009b      	lsls	r3, r3, #2
 8013930:	647b      	str	r3, [r7, #68]	@ 0x44
 8013932:	e01f      	b.n	8013974 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013936:	891b      	ldrh	r3, [r3, #8]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d101      	bne.n	8013940 <find_volume+0x364>
 801393c:	230d      	movs	r3, #13
 801393e:	e08b      	b.n	8013a58 <find_volume+0x47c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013942:	6a1a      	ldr	r2, [r3, #32]
 8013944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013946:	441a      	add	r2, r3
 8013948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801394a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801394c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013950:	2b02      	cmp	r3, #2
 8013952:	d103      	bne.n	801395c <find_volume+0x380>
 8013954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013956:	695b      	ldr	r3, [r3, #20]
 8013958:	005b      	lsls	r3, r3, #1
 801395a:	e00a      	b.n	8013972 <find_volume+0x396>
 801395c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801395e:	695a      	ldr	r2, [r3, #20]
 8013960:	4613      	mov	r3, r2
 8013962:	005b      	lsls	r3, r3, #1
 8013964:	4413      	add	r3, r2
 8013966:	085a      	lsrs	r2, r3, #1
 8013968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801396a:	695b      	ldr	r3, [r3, #20]
 801396c:	f003 0301 	and.w	r3, r3, #1
 8013970:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013972:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013976:	699a      	ldr	r2, [r3, #24]
 8013978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801397a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801397e:	0a5b      	lsrs	r3, r3, #9
 8013980:	429a      	cmp	r2, r3
 8013982:	d201      	bcs.n	8013988 <find_volume+0x3ac>
 8013984:	230d      	movs	r3, #13
 8013986:	e067      	b.n	8013a58 <find_volume+0x47c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801398a:	f04f 32ff 	mov.w	r2, #4294967295
 801398e:	611a      	str	r2, [r3, #16]
 8013990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013992:	691a      	ldr	r2, [r3, #16]
 8013994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013996:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801399a:	2280      	movs	r2, #128	@ 0x80
 801399c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801399e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80139a2:	2b03      	cmp	r3, #3
 80139a4:	d149      	bne.n	8013a3a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80139a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139a8:	3330      	adds	r3, #48	@ 0x30
 80139aa:	3330      	adds	r3, #48	@ 0x30
 80139ac:	4618      	mov	r0, r3
 80139ae:	f7fe fd67 	bl	8012480 <ld_word>
 80139b2:	4603      	mov	r3, r0
 80139b4:	2b01      	cmp	r3, #1
 80139b6:	d140      	bne.n	8013a3a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80139b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139ba:	3301      	adds	r3, #1
 80139bc:	4619      	mov	r1, r3
 80139be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80139c0:	f7fe fea3 	bl	801270a <move_window>
 80139c4:	4603      	mov	r3, r0
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d137      	bne.n	8013a3a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80139ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139cc:	2200      	movs	r2, #0
 80139ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80139d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139d2:	3330      	adds	r3, #48	@ 0x30
 80139d4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80139d8:	4618      	mov	r0, r3
 80139da:	f7fe fd51 	bl	8012480 <ld_word>
 80139de:	4603      	mov	r3, r0
 80139e0:	461a      	mov	r2, r3
 80139e2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d127      	bne.n	8013a3a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80139ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ec:	3330      	adds	r3, #48	@ 0x30
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7fe fd5f 	bl	80124b2 <ld_dword>
 80139f4:	4603      	mov	r3, r0
 80139f6:	4a1a      	ldr	r2, [pc, #104]	@ (8013a60 <find_volume+0x484>)
 80139f8:	4293      	cmp	r3, r2
 80139fa:	d11e      	bne.n	8013a3a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80139fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139fe:	3330      	adds	r3, #48	@ 0x30
 8013a00:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7fe fd54 	bl	80124b2 <ld_dword>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	4a15      	ldr	r2, [pc, #84]	@ (8013a64 <find_volume+0x488>)
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	d113      	bne.n	8013a3a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a14:	3330      	adds	r3, #48	@ 0x30
 8013a16:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7fe fd49 	bl	80124b2 <ld_dword>
 8013a20:	4602      	mov	r2, r0
 8013a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a24:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a28:	3330      	adds	r3, #48	@ 0x30
 8013a2a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7fe fd3f 	bl	80124b2 <ld_dword>
 8013a34:	4602      	mov	r2, r0
 8013a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a38:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a3c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013a40:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013a42:	4b09      	ldr	r3, [pc, #36]	@ (8013a68 <find_volume+0x48c>)
 8013a44:	881b      	ldrh	r3, [r3, #0]
 8013a46:	3301      	adds	r3, #1
 8013a48:	b29a      	uxth	r2, r3
 8013a4a:	4b07      	ldr	r3, [pc, #28]	@ (8013a68 <find_volume+0x48c>)
 8013a4c:	801a      	strh	r2, [r3, #0]
 8013a4e:	4b06      	ldr	r3, [pc, #24]	@ (8013a68 <find_volume+0x48c>)
 8013a50:	881a      	ldrh	r2, [r3, #0]
 8013a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a54:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8013a56:	2300      	movs	r3, #0
}
 8013a58:	4618      	mov	r0, r3
 8013a5a:	3758      	adds	r7, #88	@ 0x58
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bd80      	pop	{r7, pc}
 8013a60:	41615252 	.word	0x41615252
 8013a64:	61417272 	.word	0x61417272
 8013a68:	20002b28 	.word	0x20002b28

08013a6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b084      	sub	sp, #16
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013a76:	2309      	movs	r3, #9
 8013a78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d01c      	beq.n	8013aba <validate+0x4e>
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d018      	beq.n	8013aba <validate+0x4e>
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	781b      	ldrb	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d013      	beq.n	8013aba <validate+0x4e>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	889a      	ldrh	r2, [r3, #4]
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	88db      	ldrh	r3, [r3, #6]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d10c      	bne.n	8013aba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	785b      	ldrb	r3, [r3, #1]
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7fe fc4c 	bl	8012344 <disk_status>
 8013aac:	4603      	mov	r3, r0
 8013aae:	f003 0301 	and.w	r3, r3, #1
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d101      	bne.n	8013aba <validate+0x4e>
			res = FR_OK;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013aba:	7bfb      	ldrb	r3, [r7, #15]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d102      	bne.n	8013ac6 <validate+0x5a>
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	e000      	b.n	8013ac8 <validate+0x5c>
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	683a      	ldr	r2, [r7, #0]
 8013aca:	6013      	str	r3, [r2, #0]
	return res;
 8013acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3710      	adds	r7, #16
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}
	...

08013ad8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b088      	sub	sp, #32
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	60f8      	str	r0, [r7, #12]
 8013ae0:	60b9      	str	r1, [r7, #8]
 8013ae2:	4613      	mov	r3, r2
 8013ae4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013aea:	f107 0310 	add.w	r3, r7, #16
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7ff fcd9 	bl	80134a6 <get_ldnumber>
 8013af4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	da01      	bge.n	8013b00 <f_mount+0x28>
 8013afc:	230b      	movs	r3, #11
 8013afe:	e028      	b.n	8013b52 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013b00:	4a16      	ldr	r2, [pc, #88]	@ (8013b5c <f_mount+0x84>)
 8013b02:	69fb      	ldr	r3, [r7, #28]
 8013b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013b0a:	69bb      	ldr	r3, [r7, #24]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d002      	beq.n	8013b16 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013b10:	69bb      	ldr	r3, [r7, #24]
 8013b12:	2200      	movs	r2, #0
 8013b14:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d002      	beq.n	8013b22 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	2200      	movs	r2, #0
 8013b20:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013b22:	68fa      	ldr	r2, [r7, #12]
 8013b24:	490d      	ldr	r1, [pc, #52]	@ (8013b5c <f_mount+0x84>)
 8013b26:	69fb      	ldr	r3, [r7, #28]
 8013b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d002      	beq.n	8013b38 <f_mount+0x60>
 8013b32:	79fb      	ldrb	r3, [r7, #7]
 8013b34:	2b01      	cmp	r3, #1
 8013b36:	d001      	beq.n	8013b3c <f_mount+0x64>
 8013b38:	2300      	movs	r3, #0
 8013b3a:	e00a      	b.n	8013b52 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013b3c:	f107 010c 	add.w	r1, r7, #12
 8013b40:	f107 0308 	add.w	r3, r7, #8
 8013b44:	2200      	movs	r2, #0
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7ff fd48 	bl	80135dc <find_volume>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	3720      	adds	r7, #32
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}
 8013b5a:	bf00      	nop
 8013b5c:	20002b24 	.word	0x20002b24

08013b60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b098      	sub	sp, #96	@ 0x60
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	60f8      	str	r0, [r7, #12]
 8013b68:	60b9      	str	r1, [r7, #8]
 8013b6a:	4613      	mov	r3, r2
 8013b6c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d101      	bne.n	8013b78 <f_open+0x18>
 8013b74:	2309      	movs	r3, #9
 8013b76:	e17a      	b.n	8013e6e <f_open+0x30e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013b78:	79fb      	ldrb	r3, [r7, #7]
 8013b7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013b7e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013b80:	79fa      	ldrb	r2, [r7, #7]
 8013b82:	f107 0114 	add.w	r1, r7, #20
 8013b86:	f107 0308 	add.w	r3, r7, #8
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7ff fd26 	bl	80135dc <find_volume>
 8013b90:	4603      	mov	r3, r0
 8013b92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8013b96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	f040 815e 	bne.w	8013e5c <f_open+0x2fc>
		dj.obj.fs = fs;
 8013ba0:	697b      	ldr	r3, [r7, #20]
 8013ba2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013ba4:	68ba      	ldr	r2, [r7, #8]
 8013ba6:	f107 0318 	add.w	r3, r7, #24
 8013baa:	4611      	mov	r1, r2
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7ff fc09 	bl	80133c4 <follow_path>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013bb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d107      	bne.n	8013bd0 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013bc0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013bc4:	b25b      	sxtb	r3, r3
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	da02      	bge.n	8013bd0 <f_open+0x70>
				res = FR_INVALID_NAME;
 8013bca:	2306      	movs	r3, #6
 8013bcc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013bd0:	79fb      	ldrb	r3, [r7, #7]
 8013bd2:	f003 031c 	and.w	r3, r3, #28
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d078      	beq.n	8013ccc <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8013bda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d010      	beq.n	8013c04 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013be2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013be6:	2b04      	cmp	r3, #4
 8013be8:	d107      	bne.n	8013bfa <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8013bea:	f107 0318 	add.w	r3, r7, #24
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f7ff fb22 	bl	8013238 <dir_register>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013bfa:	79fb      	ldrb	r3, [r7, #7]
 8013bfc:	f043 0308 	orr.w	r3, r3, #8
 8013c00:	71fb      	strb	r3, [r7, #7]
 8013c02:	e010      	b.n	8013c26 <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013c04:	7fbb      	ldrb	r3, [r7, #30]
 8013c06:	f003 0311 	and.w	r3, r3, #17
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d003      	beq.n	8013c16 <f_open+0xb6>
					res = FR_DENIED;
 8013c0e:	2307      	movs	r3, #7
 8013c10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013c14:	e007      	b.n	8013c26 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013c16:	79fb      	ldrb	r3, [r7, #7]
 8013c18:	f003 0304 	and.w	r3, r3, #4
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d002      	beq.n	8013c26 <f_open+0xc6>
 8013c20:	2308      	movs	r3, #8
 8013c22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013c26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d168      	bne.n	8013d00 <f_open+0x1a0>
 8013c2e:	79fb      	ldrb	r3, [r7, #7]
 8013c30:	f003 0308 	and.w	r3, r3, #8
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d063      	beq.n	8013d00 <f_open+0x1a0>
				dw = GET_FATTIME();
 8013c38:	f7fd ff9e 	bl	8011b78 <get_fattime>
 8013c3c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c40:	330e      	adds	r3, #14
 8013c42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7fe fc72 	bl	801252e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c4c:	3316      	adds	r3, #22
 8013c4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7fe fc6c 	bl	801252e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c58:	330b      	adds	r3, #11
 8013c5a:	2220      	movs	r2, #32
 8013c5c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013c62:	4611      	mov	r1, r2
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7ff fa53 	bl	8013110 <ld_clust>
 8013c6a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013c70:	2200      	movs	r2, #0
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7ff fa6b 	bl	801314e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c7a:	331c      	adds	r3, #28
 8013c7c:	2100      	movs	r1, #0
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7fe fc55 	bl	801252e <st_dword>
					fs->wflag = 1;
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	2201      	movs	r2, #1
 8013c88:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d037      	beq.n	8013d00 <f_open+0x1a0>
						dw = fs->winsect;
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c94:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013c96:	f107 0318 	add.w	r3, r7, #24
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7fe ff7e 	bl	8012ba0 <remove_chain>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8013caa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d126      	bne.n	8013d00 <f_open+0x1a0>
							res = move_window(fs, dw);
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7fe fd27 	bl	801270a <move_window>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013cc6:	3a01      	subs	r2, #1
 8013cc8:	60da      	str	r2, [r3, #12]
 8013cca:	e019      	b.n	8013d00 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013ccc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d115      	bne.n	8013d00 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013cd4:	7fbb      	ldrb	r3, [r7, #30]
 8013cd6:	f003 0310 	and.w	r3, r3, #16
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d003      	beq.n	8013ce6 <f_open+0x186>
					res = FR_NO_FILE;
 8013cde:	2304      	movs	r3, #4
 8013ce0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013ce4:	e00c      	b.n	8013d00 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013ce6:	79fb      	ldrb	r3, [r7, #7]
 8013ce8:	f003 0302 	and.w	r3, r3, #2
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d007      	beq.n	8013d00 <f_open+0x1a0>
 8013cf0:	7fbb      	ldrb	r3, [r7, #30]
 8013cf2:	f003 0301 	and.w	r3, r3, #1
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d002      	beq.n	8013d00 <f_open+0x1a0>
						res = FR_DENIED;
 8013cfa:	2307      	movs	r3, #7
 8013cfc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013d00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d10f      	bne.n	8013d28 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013d08:	79fb      	ldrb	r3, [r7, #7]
 8013d0a:	f003 0308 	and.w	r3, r3, #8
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d003      	beq.n	8013d1a <f_open+0x1ba>
				mode |= FA_MODIFIED;
 8013d12:	79fb      	ldrb	r3, [r7, #7]
 8013d14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d18:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013d1a:	697b      	ldr	r3, [r7, #20]
 8013d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8013d22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013d28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	f040 8095 	bne.w	8013e5c <f_open+0x2fc>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013d36:	4611      	mov	r1, r2
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7ff f9e9 	bl	8013110 <ld_clust>
 8013d3e:	4602      	mov	r2, r0
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d46:	331c      	adds	r3, #28
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fe fbb2 	bl	80124b2 <ld_dword>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	2200      	movs	r2, #0
 8013d58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013d5a:	697a      	ldr	r2, [r7, #20]
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	88da      	ldrh	r2, [r3, #6]
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	79fa      	ldrb	r2, [r7, #7]
 8013d6c:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	2200      	movs	r2, #0
 8013d72:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2200      	movs	r2, #0
 8013d78:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	332c      	adds	r3, #44	@ 0x2c
 8013d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013d88:	2100      	movs	r1, #0
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7fe fc1c 	bl	80125c8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013d90:	79fb      	ldrb	r3, [r7, #7]
 8013d92:	f003 0320 	and.w	r3, r3, #32
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d060      	beq.n	8013e5c <f_open+0x2fc>
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	68db      	ldr	r3, [r3, #12]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d05c      	beq.n	8013e5c <f_open+0x2fc>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	68da      	ldr	r2, [r3, #12]
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	895b      	ldrh	r3, [r3, #10]
 8013dae:	025b      	lsls	r3, r3, #9
 8013db0:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	689b      	ldr	r3, [r3, #8]
 8013db6:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8013dbe:	e016      	b.n	8013dee <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7fe fd5a 	bl	801287e <get_fat>
 8013dca:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013dcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dce:	2b01      	cmp	r3, #1
 8013dd0:	d802      	bhi.n	8013dd8 <f_open+0x278>
 8013dd2:	2302      	movs	r3, #2
 8013dd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013dd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dde:	d102      	bne.n	8013de6 <f_open+0x286>
 8013de0:	2301      	movs	r3, #1
 8013de2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013de6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013dea:	1ad3      	subs	r3, r2, r3
 8013dec:	657b      	str	r3, [r7, #84]	@ 0x54
 8013dee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d103      	bne.n	8013dfe <f_open+0x29e>
 8013df6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d8e0      	bhi.n	8013dc0 <f_open+0x260>
				}
				fp->clust = clst;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013e02:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013e04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d127      	bne.n	8013e5c <f_open+0x2fc>
 8013e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d022      	beq.n	8013e5c <f_open+0x2fc>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7fe fd10 	bl	8012840 <clust2sect>
 8013e20:	6478      	str	r0, [r7, #68]	@ 0x44
 8013e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d103      	bne.n	8013e30 <f_open+0x2d0>
						res = FR_INT_ERR;
 8013e28:	2302      	movs	r3, #2
 8013e2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013e2e:	e015      	b.n	8013e5c <f_open+0x2fc>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e32:	0a5a      	lsrs	r2, r3, #9
 8013e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e36:	441a      	add	r2, r3
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013e3c:	697b      	ldr	r3, [r7, #20]
 8013e3e:	7858      	ldrb	r0, [r3, #1]
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	69da      	ldr	r2, [r3, #28]
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	f7fe faba 	bl	80123c4 <disk_read>
 8013e50:	4603      	mov	r3, r0
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d002      	beq.n	8013e5c <f_open+0x2fc>
 8013e56:	2301      	movs	r3, #1
 8013e58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013e5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d002      	beq.n	8013e6a <f_open+0x30a>
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	2200      	movs	r2, #0
 8013e68:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013e6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3760      	adds	r7, #96	@ 0x60
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}

08013e76 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013e76:	b580      	push	{r7, lr}
 8013e78:	b08c      	sub	sp, #48	@ 0x30
 8013e7a:	af00      	add	r7, sp, #0
 8013e7c:	60f8      	str	r0, [r7, #12]
 8013e7e:	60b9      	str	r1, [r7, #8]
 8013e80:	607a      	str	r2, [r7, #4]
 8013e82:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f107 0210 	add.w	r2, r7, #16
 8013e94:	4611      	mov	r1, r2
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7ff fde8 	bl	8013a6c <validate>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d107      	bne.n	8013eba <f_write+0x44>
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	7c5b      	ldrb	r3, [r3, #17]
 8013eae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d002      	beq.n	8013ec0 <f_write+0x4a>
 8013eba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013ebe:	e14b      	b.n	8014158 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	7c1b      	ldrb	r3, [r3, #16]
 8013ec4:	f003 0302 	and.w	r3, r3, #2
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d101      	bne.n	8013ed0 <f_write+0x5a>
 8013ecc:	2307      	movs	r3, #7
 8013ece:	e143      	b.n	8014158 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	695a      	ldr	r2, [r3, #20]
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	441a      	add	r2, r3
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	695b      	ldr	r3, [r3, #20]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	f080 812d 	bcs.w	801413c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	695b      	ldr	r3, [r3, #20]
 8013ee6:	43db      	mvns	r3, r3
 8013ee8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013eea:	e127      	b.n	801413c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	695b      	ldr	r3, [r3, #20]
 8013ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	f040 80e3 	bne.w	80140c0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	695b      	ldr	r3, [r3, #20]
 8013efe:	0a5b      	lsrs	r3, r3, #9
 8013f00:	693a      	ldr	r2, [r7, #16]
 8013f02:	8952      	ldrh	r2, [r2, #10]
 8013f04:	3a01      	subs	r2, #1
 8013f06:	4013      	ands	r3, r2
 8013f08:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013f0a:	69bb      	ldr	r3, [r7, #24]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d143      	bne.n	8013f98 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	695b      	ldr	r3, [r3, #20]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d10c      	bne.n	8013f32 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	689b      	ldr	r3, [r3, #8]
 8013f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d11a      	bne.n	8013f5a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	2100      	movs	r1, #0
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7fe fe9e 	bl	8012c6a <create_chain>
 8013f2e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013f30:	e013      	b.n	8013f5a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d007      	beq.n	8013f4a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	695b      	ldr	r3, [r3, #20]
 8013f3e:	4619      	mov	r1, r3
 8013f40:	68f8      	ldr	r0, [r7, #12]
 8013f42:	f7fe ff2a 	bl	8012d9a <clmt_clust>
 8013f46:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013f48:	e007      	b.n	8013f5a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013f4a:	68fa      	ldr	r2, [r7, #12]
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	699b      	ldr	r3, [r3, #24]
 8013f50:	4619      	mov	r1, r3
 8013f52:	4610      	mov	r0, r2
 8013f54:	f7fe fe89 	bl	8012c6a <create_chain>
 8013f58:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	f000 80f2 	beq.w	8014146 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f64:	2b01      	cmp	r3, #1
 8013f66:	d104      	bne.n	8013f72 <f_write+0xfc>
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	2202      	movs	r2, #2
 8013f6c:	745a      	strb	r2, [r3, #17]
 8013f6e:	2302      	movs	r3, #2
 8013f70:	e0f2      	b.n	8014158 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f78:	d104      	bne.n	8013f84 <f_write+0x10e>
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	2201      	movs	r2, #1
 8013f7e:	745a      	strb	r2, [r3, #17]
 8013f80:	2301      	movs	r3, #1
 8013f82:	e0e9      	b.n	8014158 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f88:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	689b      	ldr	r3, [r3, #8]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d102      	bne.n	8013f98 <f_write+0x122>
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f96:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	7c1b      	ldrb	r3, [r3, #16]
 8013f9c:	b25b      	sxtb	r3, r3
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	da18      	bge.n	8013fd4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013fa2:	693b      	ldr	r3, [r7, #16]
 8013fa4:	7858      	ldrb	r0, [r3, #1]
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	69da      	ldr	r2, [r3, #28]
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	f7fe fa27 	bl	8012404 <disk_write>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d004      	beq.n	8013fc6 <f_write+0x150>
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	745a      	strb	r2, [r3, #17]
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	e0c8      	b.n	8014158 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	7c1b      	ldrb	r3, [r3, #16]
 8013fca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fce:	b2da      	uxtb	r2, r3
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013fd4:	693a      	ldr	r2, [r7, #16]
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	699b      	ldr	r3, [r3, #24]
 8013fda:	4619      	mov	r1, r3
 8013fdc:	4610      	mov	r0, r2
 8013fde:	f7fe fc2f 	bl	8012840 <clust2sect>
 8013fe2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013fe4:	697b      	ldr	r3, [r7, #20]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d104      	bne.n	8013ff4 <f_write+0x17e>
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2202      	movs	r2, #2
 8013fee:	745a      	strb	r2, [r3, #17]
 8013ff0:	2302      	movs	r3, #2
 8013ff2:	e0b1      	b.n	8014158 <f_write+0x2e2>
			sect += csect;
 8013ff4:	697a      	ldr	r2, [r7, #20]
 8013ff6:	69bb      	ldr	r3, [r7, #24]
 8013ff8:	4413      	add	r3, r2
 8013ffa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	0a5b      	lsrs	r3, r3, #9
 8014000:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014002:	6a3b      	ldr	r3, [r7, #32]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d03c      	beq.n	8014082 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014008:	69ba      	ldr	r2, [r7, #24]
 801400a:	6a3b      	ldr	r3, [r7, #32]
 801400c:	4413      	add	r3, r2
 801400e:	693a      	ldr	r2, [r7, #16]
 8014010:	8952      	ldrh	r2, [r2, #10]
 8014012:	4293      	cmp	r3, r2
 8014014:	d905      	bls.n	8014022 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	895b      	ldrh	r3, [r3, #10]
 801401a:	461a      	mov	r2, r3
 801401c:	69bb      	ldr	r3, [r7, #24]
 801401e:	1ad3      	subs	r3, r2, r3
 8014020:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014022:	693b      	ldr	r3, [r7, #16]
 8014024:	7858      	ldrb	r0, [r3, #1]
 8014026:	6a3b      	ldr	r3, [r7, #32]
 8014028:	697a      	ldr	r2, [r7, #20]
 801402a:	69f9      	ldr	r1, [r7, #28]
 801402c:	f7fe f9ea 	bl	8012404 <disk_write>
 8014030:	4603      	mov	r3, r0
 8014032:	2b00      	cmp	r3, #0
 8014034:	d004      	beq.n	8014040 <f_write+0x1ca>
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	2201      	movs	r2, #1
 801403a:	745a      	strb	r2, [r3, #17]
 801403c:	2301      	movs	r3, #1
 801403e:	e08b      	b.n	8014158 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	69da      	ldr	r2, [r3, #28]
 8014044:	697b      	ldr	r3, [r7, #20]
 8014046:	1ad3      	subs	r3, r2, r3
 8014048:	6a3a      	ldr	r2, [r7, #32]
 801404a:	429a      	cmp	r2, r3
 801404c:	d915      	bls.n	801407a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	69da      	ldr	r2, [r3, #28]
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	1ad3      	subs	r3, r2, r3
 801405c:	025b      	lsls	r3, r3, #9
 801405e:	69fa      	ldr	r2, [r7, #28]
 8014060:	4413      	add	r3, r2
 8014062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014066:	4619      	mov	r1, r3
 8014068:	f7fe fa8d 	bl	8012586 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	7c1b      	ldrb	r3, [r3, #16]
 8014070:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014074:	b2da      	uxtb	r2, r3
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801407a:	6a3b      	ldr	r3, [r7, #32]
 801407c:	025b      	lsls	r3, r3, #9
 801407e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8014080:	e03f      	b.n	8014102 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	69db      	ldr	r3, [r3, #28]
 8014086:	697a      	ldr	r2, [r7, #20]
 8014088:	429a      	cmp	r2, r3
 801408a:	d016      	beq.n	80140ba <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	695a      	ldr	r2, [r3, #20]
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014094:	429a      	cmp	r2, r3
 8014096:	d210      	bcs.n	80140ba <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014098:	693b      	ldr	r3, [r7, #16]
 801409a:	7858      	ldrb	r0, [r3, #1]
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80140a2:	2301      	movs	r3, #1
 80140a4:	697a      	ldr	r2, [r7, #20]
 80140a6:	f7fe f98d 	bl	80123c4 <disk_read>
 80140aa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d004      	beq.n	80140ba <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	2201      	movs	r2, #1
 80140b4:	745a      	strb	r2, [r3, #17]
 80140b6:	2301      	movs	r3, #1
 80140b8:	e04e      	b.n	8014158 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	697a      	ldr	r2, [r7, #20]
 80140be:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	695b      	ldr	r3, [r3, #20]
 80140c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140c8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80140cc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80140ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d901      	bls.n	80140da <f_write+0x264>
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	695b      	ldr	r3, [r3, #20]
 80140e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140e8:	4413      	add	r3, r2
 80140ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80140ec:	69f9      	ldr	r1, [r7, #28]
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7fe fa49 	bl	8012586 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	7c1b      	ldrb	r3, [r3, #16]
 80140f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80140fc:	b2da      	uxtb	r2, r3
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014102:	69fa      	ldr	r2, [r7, #28]
 8014104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014106:	4413      	add	r3, r2
 8014108:	61fb      	str	r3, [r7, #28]
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	695a      	ldr	r2, [r3, #20]
 801410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014110:	441a      	add	r2, r3
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	615a      	str	r2, [r3, #20]
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	68da      	ldr	r2, [r3, #12]
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	695b      	ldr	r3, [r3, #20]
 801411e:	429a      	cmp	r2, r3
 8014120:	bf38      	it	cc
 8014122:	461a      	movcc	r2, r3
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	60da      	str	r2, [r3, #12]
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	681a      	ldr	r2, [r3, #0]
 801412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801412e:	441a      	add	r2, r3
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	601a      	str	r2, [r3, #0]
 8014134:	687a      	ldr	r2, [r7, #4]
 8014136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014138:	1ad3      	subs	r3, r2, r3
 801413a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2b00      	cmp	r3, #0
 8014140:	f47f aed4 	bne.w	8013eec <f_write+0x76>
 8014144:	e000      	b.n	8014148 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014146:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	7c1b      	ldrb	r3, [r3, #16]
 801414c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014150:	b2da      	uxtb	r2, r3
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8014156:	2300      	movs	r3, #0
}
 8014158:	4618      	mov	r0, r3
 801415a:	3730      	adds	r7, #48	@ 0x30
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}

08014160 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b086      	sub	sp, #24
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f107 0208 	add.w	r2, r7, #8
 801416e:	4611      	mov	r1, r2
 8014170:	4618      	mov	r0, r3
 8014172:	f7ff fc7b 	bl	8013a6c <validate>
 8014176:	4603      	mov	r3, r0
 8014178:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801417a:	7dfb      	ldrb	r3, [r7, #23]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d168      	bne.n	8014252 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	7c1b      	ldrb	r3, [r3, #16]
 8014184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014188:	2b00      	cmp	r3, #0
 801418a:	d062      	beq.n	8014252 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	7c1b      	ldrb	r3, [r3, #16]
 8014190:	b25b      	sxtb	r3, r3
 8014192:	2b00      	cmp	r3, #0
 8014194:	da15      	bge.n	80141c2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014196:	68bb      	ldr	r3, [r7, #8]
 8014198:	7858      	ldrb	r0, [r3, #1]
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	69da      	ldr	r2, [r3, #28]
 80141a4:	2301      	movs	r3, #1
 80141a6:	f7fe f92d 	bl	8012404 <disk_write>
 80141aa:	4603      	mov	r3, r0
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d001      	beq.n	80141b4 <f_sync+0x54>
 80141b0:	2301      	movs	r3, #1
 80141b2:	e04f      	b.n	8014254 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	7c1b      	ldrb	r3, [r3, #16]
 80141b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141bc:	b2da      	uxtb	r2, r3
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80141c2:	f7fd fcd9 	bl	8011b78 <get_fattime>
 80141c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80141c8:	68ba      	ldr	r2, [r7, #8]
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	6a1b      	ldr	r3, [r3, #32]
 80141ce:	4619      	mov	r1, r3
 80141d0:	4610      	mov	r0, r2
 80141d2:	f7fe fa9a 	bl	801270a <move_window>
 80141d6:	4603      	mov	r3, r0
 80141d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80141da:	7dfb      	ldrb	r3, [r7, #23]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d138      	bne.n	8014252 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	330b      	adds	r3, #11
 80141ea:	781a      	ldrb	r2, [r3, #0]
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	330b      	adds	r3, #11
 80141f0:	f042 0220 	orr.w	r2, r2, #32
 80141f4:	b2d2      	uxtb	r2, r2
 80141f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	6818      	ldr	r0, [r3, #0]
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	689b      	ldr	r3, [r3, #8]
 8014200:	461a      	mov	r2, r3
 8014202:	68f9      	ldr	r1, [r7, #12]
 8014204:	f7fe ffa3 	bl	801314e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	f103 021c 	add.w	r2, r3, #28
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	68db      	ldr	r3, [r3, #12]
 8014212:	4619      	mov	r1, r3
 8014214:	4610      	mov	r0, r2
 8014216:	f7fe f98a 	bl	801252e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	3316      	adds	r3, #22
 801421e:	6939      	ldr	r1, [r7, #16]
 8014220:	4618      	mov	r0, r3
 8014222:	f7fe f984 	bl	801252e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	3312      	adds	r3, #18
 801422a:	2100      	movs	r1, #0
 801422c:	4618      	mov	r0, r3
 801422e:	f7fe f963 	bl	80124f8 <st_word>
					fs->wflag = 1;
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	2201      	movs	r2, #1
 8014236:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	4618      	mov	r0, r3
 801423c:	f7fe fa92 	bl	8012764 <sync_fs>
 8014240:	4603      	mov	r3, r0
 8014242:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	7c1b      	ldrb	r3, [r3, #16]
 8014248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801424c:	b2da      	uxtb	r2, r3
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014252:	7dfb      	ldrb	r3, [r7, #23]
}
 8014254:	4618      	mov	r0, r3
 8014256:	3718      	adds	r7, #24
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}

0801425c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b084      	sub	sp, #16
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f7ff ff7b 	bl	8014160 <f_sync>
 801426a:	4603      	mov	r3, r0
 801426c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801426e:	7bfb      	ldrb	r3, [r7, #15]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d10e      	bne.n	8014292 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f107 0208 	add.w	r2, r7, #8
 801427a:	4611      	mov	r1, r2
 801427c:	4618      	mov	r0, r3
 801427e:	f7ff fbf5 	bl	8013a6c <validate>
 8014282:	4603      	mov	r3, r0
 8014284:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014286:	7bfb      	ldrb	r3, [r7, #15]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d102      	bne.n	8014292 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2200      	movs	r2, #0
 8014290:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014292:	7bfb      	ldrb	r3, [r7, #15]
}
 8014294:	4618      	mov	r0, r3
 8014296:	3710      	adds	r7, #16
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}

0801429c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b096      	sub	sp, #88	@ 0x58
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80142a4:	f107 010c 	add.w	r1, r7, #12
 80142a8:	1d3b      	adds	r3, r7, #4
 80142aa:	2202      	movs	r2, #2
 80142ac:	4618      	mov	r0, r3
 80142ae:	f7ff f995 	bl	80135dc <find_volume>
 80142b2:	4603      	mov	r3, r0
 80142b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80142bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	f040 80ec 	bne.w	801449e <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80142c6:	687a      	ldr	r2, [r7, #4]
 80142c8:	f107 0310 	add.w	r3, r7, #16
 80142cc:	4611      	mov	r1, r2
 80142ce:	4618      	mov	r0, r3
 80142d0:	f7ff f878 	bl	80133c4 <follow_path>
 80142d4:	4603      	mov	r3, r0
 80142d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80142da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d102      	bne.n	80142e8 <f_mkdir+0x4c>
 80142e2:	2308      	movs	r3, #8
 80142e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80142e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80142ec:	2b04      	cmp	r3, #4
 80142ee:	f040 80d6 	bne.w	801449e <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80142f2:	f107 0310 	add.w	r3, r7, #16
 80142f6:	2100      	movs	r1, #0
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7fe fcb6 	bl	8012c6a <create_chain>
 80142fe:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	895b      	ldrh	r3, [r3, #10]
 8014304:	025b      	lsls	r3, r3, #9
 8014306:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8014308:	2300      	movs	r3, #0
 801430a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801430e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014310:	2b00      	cmp	r3, #0
 8014312:	d102      	bne.n	801431a <f_mkdir+0x7e>
 8014314:	2307      	movs	r3, #7
 8014316:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801431a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801431c:	2b01      	cmp	r3, #1
 801431e:	d102      	bne.n	8014326 <f_mkdir+0x8a>
 8014320:	2302      	movs	r3, #2
 8014322:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014328:	f1b3 3fff 	cmp.w	r3, #4294967295
 801432c:	d102      	bne.n	8014334 <f_mkdir+0x98>
 801432e:	2301      	movs	r3, #1
 8014330:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014334:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014338:	2b00      	cmp	r3, #0
 801433a:	d106      	bne.n	801434a <f_mkdir+0xae>
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	4618      	mov	r0, r3
 8014340:	f7fe f99f 	bl	8012682 <sync_window>
 8014344:	4603      	mov	r3, r0
 8014346:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 801434a:	f7fd fc15 	bl	8011b78 <get_fattime>
 801434e:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014350:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014354:	2b00      	cmp	r3, #0
 8014356:	d16a      	bne.n	801442e <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801435c:	4618      	mov	r0, r3
 801435e:	f7fe fa6f 	bl	8012840 <clust2sect>
 8014362:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	3330      	adds	r3, #48	@ 0x30
 8014368:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 801436a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801436e:	2100      	movs	r1, #0
 8014370:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014372:	f7fe f929 	bl	80125c8 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014376:	220b      	movs	r2, #11
 8014378:	2120      	movs	r1, #32
 801437a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801437c:	f7fe f924 	bl	80125c8 <mem_set>
					dir[DIR_Name] = '.';
 8014380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014382:	222e      	movs	r2, #46	@ 0x2e
 8014384:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014388:	330b      	adds	r3, #11
 801438a:	2210      	movs	r2, #16
 801438c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801438e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014390:	3316      	adds	r3, #22
 8014392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014394:	4618      	mov	r0, r3
 8014396:	f7fe f8ca 	bl	801252e <st_dword>
					st_clust(fs, dir, dcl);
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801439e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7fe fed4 	bl	801314e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80143a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143a8:	3320      	adds	r3, #32
 80143aa:	2220      	movs	r2, #32
 80143ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7fe f8e9 	bl	8012586 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80143b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143b6:	3321      	adds	r3, #33	@ 0x21
 80143b8:	222e      	movs	r2, #46	@ 0x2e
 80143ba:	701a      	strb	r2, [r3, #0]
 80143bc:	69bb      	ldr	r3, [r7, #24]
 80143be:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	781b      	ldrb	r3, [r3, #0]
 80143c4:	2b03      	cmp	r3, #3
 80143c6:	d106      	bne.n	80143d6 <f_mkdir+0x13a>
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d101      	bne.n	80143d6 <f_mkdir+0x13a>
 80143d2:	2300      	movs	r3, #0
 80143d4:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80143d6:	68f8      	ldr	r0, [r7, #12]
 80143d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143da:	3320      	adds	r3, #32
 80143dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80143de:	4619      	mov	r1, r3
 80143e0:	f7fe feb5 	bl	801314e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	895b      	ldrh	r3, [r3, #10]
 80143e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80143ea:	e01b      	b.n	8014424 <f_mkdir+0x188>
					fs->winsect = dsc++;
 80143ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143ee:	1c5a      	adds	r2, r3, #1
 80143f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80143f2:	68fa      	ldr	r2, [r7, #12]
 80143f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	2201      	movs	r2, #1
 80143fa:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	4618      	mov	r0, r3
 8014400:	f7fe f93f 	bl	8012682 <sync_window>
 8014404:	4603      	mov	r3, r0
 8014406:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 801440a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801440e:	2b00      	cmp	r3, #0
 8014410:	d10c      	bne.n	801442c <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8014412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014416:	2100      	movs	r1, #0
 8014418:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801441a:	f7fe f8d5 	bl	80125c8 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801441e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014420:	3b01      	subs	r3, #1
 8014422:	653b      	str	r3, [r7, #80]	@ 0x50
 8014424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014426:	2b00      	cmp	r3, #0
 8014428:	d1e0      	bne.n	80143ec <f_mkdir+0x150>
 801442a:	e000      	b.n	801442e <f_mkdir+0x192>
					if (res != FR_OK) break;
 801442c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801442e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014432:	2b00      	cmp	r3, #0
 8014434:	d107      	bne.n	8014446 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014436:	f107 0310 	add.w	r3, r7, #16
 801443a:	4618      	mov	r0, r3
 801443c:	f7fe fefc 	bl	8013238 <dir_register>
 8014440:	4603      	mov	r3, r0
 8014442:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8014446:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801444a:	2b00      	cmp	r3, #0
 801444c:	d120      	bne.n	8014490 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801444e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014450:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014454:	3316      	adds	r3, #22
 8014456:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014458:	4618      	mov	r0, r3
 801445a:	f7fe f868 	bl	801252e <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014462:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014464:	4618      	mov	r0, r3
 8014466:	f7fe fe72 	bl	801314e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801446a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801446c:	330b      	adds	r3, #11
 801446e:	2210      	movs	r2, #16
 8014470:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	2201      	movs	r2, #1
 8014476:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014478:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801447c:	2b00      	cmp	r3, #0
 801447e:	d10e      	bne.n	801449e <f_mkdir+0x202>
					res = sync_fs(fs);
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	4618      	mov	r0, r3
 8014484:	f7fe f96e 	bl	8012764 <sync_fs>
 8014488:	4603      	mov	r3, r0
 801448a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 801448e:	e006      	b.n	801449e <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014490:	f107 0310 	add.w	r3, r7, #16
 8014494:	2200      	movs	r2, #0
 8014496:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014498:	4618      	mov	r0, r3
 801449a:	f7fe fb81 	bl	8012ba0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801449e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3758      	adds	r7, #88	@ 0x58
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
	...

080144ac <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80144ac:	b590      	push	{r4, r7, lr}
 80144ae:	b09d      	sub	sp, #116	@ 0x74
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	60f8      	str	r0, [r7, #12]
 80144b4:	607a      	str	r2, [r7, #4]
 80144b6:	603b      	str	r3, [r7, #0]
 80144b8:	460b      	mov	r3, r1
 80144ba:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80144bc:	2301      	movs	r3, #1
 80144be:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80144c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80144c4:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80144c6:	f107 030c 	add.w	r3, r7, #12
 80144ca:	4618      	mov	r0, r3
 80144cc:	f7fe ffeb 	bl	80134a6 <get_ldnumber>
 80144d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80144d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	da02      	bge.n	80144de <f_mkfs+0x32>
 80144d8:	230b      	movs	r3, #11
 80144da:	f000 bc0d 	b.w	8014cf8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80144de:	4a94      	ldr	r2, [pc, #592]	@ (8014730 <f_mkfs+0x284>)
 80144e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d005      	beq.n	80144f6 <f_mkfs+0x4a>
 80144ea:	4a91      	ldr	r2, [pc, #580]	@ (8014730 <f_mkfs+0x284>)
 80144ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144f2:	2200      	movs	r2, #0
 80144f4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80144f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144f8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80144fc:	2300      	movs	r3, #0
 80144fe:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8014502:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014506:	4618      	mov	r0, r3
 8014508:	f7fd ff36 	bl	8012378 <disk_initialize>
 801450c:	4603      	mov	r3, r0
 801450e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8014512:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8014516:	f003 0301 	and.w	r3, r3, #1
 801451a:	2b00      	cmp	r3, #0
 801451c:	d001      	beq.n	8014522 <f_mkfs+0x76>
 801451e:	2303      	movs	r3, #3
 8014520:	e3ea      	b.n	8014cf8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8014522:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8014526:	f003 0304 	and.w	r3, r3, #4
 801452a:	2b00      	cmp	r3, #0
 801452c:	d001      	beq.n	8014532 <f_mkfs+0x86>
 801452e:	230a      	movs	r3, #10
 8014530:	e3e2      	b.n	8014cf8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8014532:	f107 0214 	add.w	r2, r7, #20
 8014536:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801453a:	2103      	movs	r1, #3
 801453c:	4618      	mov	r0, r3
 801453e:	f7fd ff81 	bl	8012444 <disk_ioctl>
 8014542:	4603      	mov	r3, r0
 8014544:	2b00      	cmp	r3, #0
 8014546:	d10c      	bne.n	8014562 <f_mkfs+0xb6>
 8014548:	697b      	ldr	r3, [r7, #20]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d009      	beq.n	8014562 <f_mkfs+0xb6>
 801454e:	697b      	ldr	r3, [r7, #20]
 8014550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014554:	d805      	bhi.n	8014562 <f_mkfs+0xb6>
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	1e5a      	subs	r2, r3, #1
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	4013      	ands	r3, r2
 801455e:	2b00      	cmp	r3, #0
 8014560:	d001      	beq.n	8014566 <f_mkfs+0xba>
 8014562:	2301      	movs	r3, #1
 8014564:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8014566:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801456a:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d003      	beq.n	801457a <f_mkfs+0xce>
 8014572:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014574:	687a      	ldr	r2, [r7, #4]
 8014576:	429a      	cmp	r2, r3
 8014578:	d309      	bcc.n	801458e <f_mkfs+0xe2>
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014580:	d805      	bhi.n	801458e <f_mkfs+0xe2>
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	1e5a      	subs	r2, r3, #1
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	4013      	ands	r3, r2
 801458a:	2b00      	cmp	r3, #0
 801458c:	d001      	beq.n	8014592 <f_mkfs+0xe6>
 801458e:	2313      	movs	r3, #19
 8014590:	e3b2      	b.n	8014cf8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8014592:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	fbb2 f3f3 	udiv	r3, r2, r3
 801459a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80145a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80145a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80145a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80145aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80145ac:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80145ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145b0:	fb02 f303 	mul.w	r3, r2, r3
 80145b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80145b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d101      	bne.n	80145c0 <f_mkfs+0x114>
 80145bc:	230e      	movs	r3, #14
 80145be:	e39b      	b.n	8014cf8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80145c0:	f107 0210 	add.w	r2, r7, #16
 80145c4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80145c8:	2101      	movs	r1, #1
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7fd ff3a 	bl	8012444 <disk_ioctl>
 80145d0:	4603      	mov	r3, r0
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d001      	beq.n	80145da <f_mkfs+0x12e>
 80145d6:	2301      	movs	r3, #1
 80145d8:	e38e      	b.n	8014cf8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80145da:	7afb      	ldrb	r3, [r7, #11]
 80145dc:	f003 0308 	and.w	r3, r3, #8
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d001      	beq.n	80145e8 <f_mkfs+0x13c>
 80145e4:	2300      	movs	r3, #0
 80145e6:	e000      	b.n	80145ea <f_mkfs+0x13e>
 80145e8:	233f      	movs	r3, #63	@ 0x3f
 80145ea:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d901      	bls.n	80145f8 <f_mkfs+0x14c>
 80145f4:	230e      	movs	r3, #14
 80145f6:	e37f      	b.n	8014cf8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80145f8:	693a      	ldr	r2, [r7, #16]
 80145fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145fc:	1ad3      	subs	r3, r2, r3
 80145fe:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	2b7f      	cmp	r3, #127	@ 0x7f
 8014604:	d801      	bhi.n	801460a <f_mkfs+0x15e>
 8014606:	230e      	movs	r3, #14
 8014608:	e376      	b.n	8014cf8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2b80      	cmp	r3, #128	@ 0x80
 801460e:	d901      	bls.n	8014614 <f_mkfs+0x168>
 8014610:	2313      	movs	r3, #19
 8014612:	e371      	b.n	8014cf8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8014614:	7afb      	ldrb	r3, [r7, #11]
 8014616:	f003 0302 	and.w	r3, r3, #2
 801461a:	2b00      	cmp	r3, #0
 801461c:	d00d      	beq.n	801463a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 801461e:	7afb      	ldrb	r3, [r7, #11]
 8014620:	f003 0307 	and.w	r3, r3, #7
 8014624:	2b02      	cmp	r3, #2
 8014626:	d004      	beq.n	8014632 <f_mkfs+0x186>
 8014628:	7afb      	ldrb	r3, [r7, #11]
 801462a:	f003 0301 	and.w	r3, r3, #1
 801462e:	2b00      	cmp	r3, #0
 8014630:	d103      	bne.n	801463a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8014632:	2303      	movs	r3, #3
 8014634:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8014638:	e009      	b.n	801464e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 801463a:	7afb      	ldrb	r3, [r7, #11]
 801463c:	f003 0301 	and.w	r3, r3, #1
 8014640:	2b00      	cmp	r3, #0
 8014642:	d101      	bne.n	8014648 <f_mkfs+0x19c>
 8014644:	2313      	movs	r3, #19
 8014646:	e357      	b.n	8014cf8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8014648:	2302      	movs	r3, #2
 801464a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8014652:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014656:	2b03      	cmp	r3, #3
 8014658:	d13c      	bne.n	80146d4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 801465a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801465c:	2b00      	cmp	r3, #0
 801465e:	d11b      	bne.n	8014698 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8014660:	693b      	ldr	r3, [r7, #16]
 8014662:	0c5b      	lsrs	r3, r3, #17
 8014664:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014666:	2300      	movs	r3, #0
 8014668:	64bb      	str	r3, [r7, #72]	@ 0x48
 801466a:	2301      	movs	r3, #1
 801466c:	653b      	str	r3, [r7, #80]	@ 0x50
 801466e:	e005      	b.n	801467c <f_mkfs+0x1d0>
 8014670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014672:	3301      	adds	r3, #1
 8014674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014678:	005b      	lsls	r3, r3, #1
 801467a:	653b      	str	r3, [r7, #80]	@ 0x50
 801467c:	4a2d      	ldr	r2, [pc, #180]	@ (8014734 <f_mkfs+0x288>)
 801467e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d007      	beq.n	8014698 <f_mkfs+0x1ec>
 8014688:	4a2a      	ldr	r2, [pc, #168]	@ (8014734 <f_mkfs+0x288>)
 801468a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801468c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014690:	461a      	mov	r2, r3
 8014692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014694:	4293      	cmp	r3, r2
 8014696:	d2eb      	bcs.n	8014670 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8014698:	693a      	ldr	r2, [r7, #16]
 801469a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80146a0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80146a2:	6a3b      	ldr	r3, [r7, #32]
 80146a4:	3302      	adds	r3, #2
 80146a6:	009a      	lsls	r2, r3, #2
 80146a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80146aa:	4413      	add	r3, r2
 80146ac:	1e5a      	subs	r2, r3, #1
 80146ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80146b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80146b4:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80146b6:	2320      	movs	r3, #32
 80146b8:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 80146ba:	2300      	movs	r3, #0
 80146bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80146be:	6a3b      	ldr	r3, [r7, #32]
 80146c0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80146c4:	4293      	cmp	r3, r2
 80146c6:	d903      	bls.n	80146d0 <f_mkfs+0x224>
 80146c8:	6a3b      	ldr	r3, [r7, #32]
 80146ca:	4a1b      	ldr	r2, [pc, #108]	@ (8014738 <f_mkfs+0x28c>)
 80146cc:	4293      	cmp	r3, r2
 80146ce:	d952      	bls.n	8014776 <f_mkfs+0x2ca>
 80146d0:	230e      	movs	r3, #14
 80146d2:	e311      	b.n	8014cf8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80146d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d11b      	bne.n	8014712 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80146da:	693b      	ldr	r3, [r7, #16]
 80146dc:	0b1b      	lsrs	r3, r3, #12
 80146de:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80146e0:	2300      	movs	r3, #0
 80146e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80146e4:	2301      	movs	r3, #1
 80146e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80146e8:	e005      	b.n	80146f6 <f_mkfs+0x24a>
 80146ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80146ec:	3301      	adds	r3, #1
 80146ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80146f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146f2:	005b      	lsls	r3, r3, #1
 80146f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80146f6:	4a11      	ldr	r2, [pc, #68]	@ (801473c <f_mkfs+0x290>)
 80146f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80146fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d007      	beq.n	8014712 <f_mkfs+0x266>
 8014702:	4a0e      	ldr	r2, [pc, #56]	@ (801473c <f_mkfs+0x290>)
 8014704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801470a:	461a      	mov	r2, r3
 801470c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801470e:	4293      	cmp	r3, r2
 8014710:	d2eb      	bcs.n	80146ea <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8014712:	693a      	ldr	r2, [r7, #16]
 8014714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014716:	fbb2 f3f3 	udiv	r3, r2, r3
 801471a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 801471c:	6a3b      	ldr	r3, [r7, #32]
 801471e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014722:	4293      	cmp	r3, r2
 8014724:	d90c      	bls.n	8014740 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8014726:	6a3b      	ldr	r3, [r7, #32]
 8014728:	3302      	adds	r3, #2
 801472a:	005b      	lsls	r3, r3, #1
 801472c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801472e:	e012      	b.n	8014756 <f_mkfs+0x2aa>
 8014730:	20002b24 	.word	0x20002b24
 8014734:	0801c1dc 	.word	0x0801c1dc
 8014738:	0ffffff5 	.word	0x0ffffff5
 801473c:	0801c1ec 	.word	0x0801c1ec
				} else {
					fmt = FS_FAT12;
 8014740:	2301      	movs	r3, #1
 8014742:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8014746:	6a3a      	ldr	r2, [r7, #32]
 8014748:	4613      	mov	r3, r2
 801474a:	005b      	lsls	r3, r3, #1
 801474c:	4413      	add	r3, r2
 801474e:	3301      	adds	r3, #1
 8014750:	085b      	lsrs	r3, r3, #1
 8014752:	3303      	adds	r3, #3
 8014754:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8014756:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801475a:	4413      	add	r3, r2
 801475c:	1e5a      	subs	r2, r3, #1
 801475e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014760:	fbb2 f3f3 	udiv	r3, r2, r3
 8014764:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8014766:	2301      	movs	r3, #1
 8014768:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801476a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801476c:	015a      	lsls	r2, r3, #5
 801476e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014770:	fbb2 f3f3 	udiv	r3, r2, r3
 8014774:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8014776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801477a:	4413      	add	r3, r2
 801477c:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 801477e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014780:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014782:	fb03 f202 	mul.w	r2, r3, r2
 8014786:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014788:	4413      	add	r3, r2
 801478a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801478c:	4413      	add	r3, r2
 801478e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8014790:	697a      	ldr	r2, [r7, #20]
 8014792:	69fb      	ldr	r3, [r7, #28]
 8014794:	4413      	add	r3, r2
 8014796:	1e5a      	subs	r2, r3, #1
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	425b      	negs	r3, r3
 801479c:	401a      	ands	r2, r3
 801479e:	69fb      	ldr	r3, [r7, #28]
 80147a0:	1ad3      	subs	r3, r2, r3
 80147a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80147a4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80147a8:	2b03      	cmp	r3, #3
 80147aa:	d108      	bne.n	80147be <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80147ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80147ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147b0:	4413      	add	r3, r2
 80147b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80147b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80147b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147b8:	4413      	add	r3, r2
 80147ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80147bc:	e006      	b.n	80147cc <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80147be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80147c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80147c6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80147c8:	4413      	add	r3, r2
 80147ca:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80147cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147ce:	011a      	lsls	r2, r3, #4
 80147d0:	69fb      	ldr	r3, [r7, #28]
 80147d2:	441a      	add	r2, r3
 80147d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147d6:	1ad2      	subs	r2, r2, r3
 80147d8:	693b      	ldr	r3, [r7, #16]
 80147da:	429a      	cmp	r2, r3
 80147dc:	d901      	bls.n	80147e2 <f_mkfs+0x336>
 80147de:	230e      	movs	r3, #14
 80147e0:	e28a      	b.n	8014cf8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80147e2:	693a      	ldr	r2, [r7, #16]
 80147e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147e6:	1ad2      	subs	r2, r2, r3
 80147e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80147ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80147ec:	fb01 f303 	mul.w	r3, r1, r3
 80147f0:	1ad2      	subs	r2, r2, r3
 80147f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80147f4:	1ad2      	subs	r2, r2, r3
 80147f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80147fc:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80147fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014802:	2b03      	cmp	r3, #3
 8014804:	d10f      	bne.n	8014826 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8014806:	6a3b      	ldr	r3, [r7, #32]
 8014808:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801480c:	4293      	cmp	r3, r2
 801480e:	d80a      	bhi.n	8014826 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d105      	bne.n	8014822 <f_mkfs+0x376>
 8014816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014818:	085b      	lsrs	r3, r3, #1
 801481a:	607b      	str	r3, [r7, #4]
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d144      	bne.n	80148ac <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8014822:	230e      	movs	r3, #14
 8014824:	e268      	b.n	8014cf8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8014826:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801482a:	2b02      	cmp	r3, #2
 801482c:	d133      	bne.n	8014896 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801482e:	6a3b      	ldr	r3, [r7, #32]
 8014830:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014834:	4293      	cmp	r3, r2
 8014836:	d91e      	bls.n	8014876 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d107      	bne.n	801484e <f_mkfs+0x3a2>
 801483e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014840:	005b      	lsls	r3, r3, #1
 8014842:	2b40      	cmp	r3, #64	@ 0x40
 8014844:	d803      	bhi.n	801484e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8014846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014848:	005b      	lsls	r3, r3, #1
 801484a:	607b      	str	r3, [r7, #4]
 801484c:	e033      	b.n	80148b6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801484e:	7afb      	ldrb	r3, [r7, #11]
 8014850:	f003 0302 	and.w	r3, r3, #2
 8014854:	2b00      	cmp	r3, #0
 8014856:	d003      	beq.n	8014860 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8014858:	2303      	movs	r3, #3
 801485a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801485e:	e02a      	b.n	80148b6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d105      	bne.n	8014872 <f_mkfs+0x3c6>
 8014866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014868:	005b      	lsls	r3, r3, #1
 801486a:	607b      	str	r3, [r7, #4]
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	2b80      	cmp	r3, #128	@ 0x80
 8014870:	d91e      	bls.n	80148b0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8014872:	230e      	movs	r3, #14
 8014874:	e240      	b.n	8014cf8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8014876:	6a3b      	ldr	r3, [r7, #32]
 8014878:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801487c:	4293      	cmp	r3, r2
 801487e:	d80a      	bhi.n	8014896 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d105      	bne.n	8014892 <f_mkfs+0x3e6>
 8014886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014888:	005b      	lsls	r3, r3, #1
 801488a:	607b      	str	r3, [r7, #4]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	2b80      	cmp	r3, #128	@ 0x80
 8014890:	d910      	bls.n	80148b4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8014892:	230e      	movs	r3, #14
 8014894:	e230      	b.n	8014cf8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8014896:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801489a:	2b01      	cmp	r3, #1
 801489c:	d10c      	bne.n	80148b8 <f_mkfs+0x40c>
 801489e:	6a3b      	ldr	r3, [r7, #32]
 80148a0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80148a4:	4293      	cmp	r3, r2
 80148a6:	d907      	bls.n	80148b8 <f_mkfs+0x40c>
 80148a8:	230e      	movs	r3, #14
 80148aa:	e225      	b.n	8014cf8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80148ac:	bf00      	nop
 80148ae:	e6ce      	b.n	801464e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80148b0:	bf00      	nop
 80148b2:	e6cc      	b.n	801464e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80148b4:	bf00      	nop
			pau = au;
 80148b6:	e6ca      	b.n	801464e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80148b8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80148ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80148bc:	461a      	mov	r2, r3
 80148be:	2100      	movs	r1, #0
 80148c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80148c2:	f7fd fe81 	bl	80125c8 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80148c6:	220b      	movs	r2, #11
 80148c8:	49b2      	ldr	r1, [pc, #712]	@ (8014b94 <f_mkfs+0x6e8>)
 80148ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80148cc:	f7fd fe5b 	bl	8012586 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80148d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148d2:	330b      	adds	r3, #11
 80148d4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80148d6:	4611      	mov	r1, r2
 80148d8:	4618      	mov	r0, r3
 80148da:	f7fd fe0d 	bl	80124f8 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80148de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148e0:	330d      	adds	r3, #13
 80148e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80148e4:	b2d2      	uxtb	r2, r2
 80148e6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80148e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148ea:	330e      	adds	r3, #14
 80148ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80148ee:	b292      	uxth	r2, r2
 80148f0:	4611      	mov	r1, r2
 80148f2:	4618      	mov	r0, r3
 80148f4:	f7fd fe00 	bl	80124f8 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80148f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148fa:	3310      	adds	r3, #16
 80148fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80148fe:	b2d2      	uxtb	r2, r2
 8014900:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8014902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014904:	f103 0211 	add.w	r2, r3, #17
 8014908:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801490c:	2b03      	cmp	r3, #3
 801490e:	d002      	beq.n	8014916 <f_mkfs+0x46a>
 8014910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014912:	b29b      	uxth	r3, r3
 8014914:	e000      	b.n	8014918 <f_mkfs+0x46c>
 8014916:	2300      	movs	r3, #0
 8014918:	4619      	mov	r1, r3
 801491a:	4610      	mov	r0, r2
 801491c:	f7fd fdec 	bl	80124f8 <st_word>
		if (sz_vol < 0x10000) {
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014926:	d208      	bcs.n	801493a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8014928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801492a:	3313      	adds	r3, #19
 801492c:	693a      	ldr	r2, [r7, #16]
 801492e:	b292      	uxth	r2, r2
 8014930:	4611      	mov	r1, r2
 8014932:	4618      	mov	r0, r3
 8014934:	f7fd fde0 	bl	80124f8 <st_word>
 8014938:	e006      	b.n	8014948 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801493c:	3320      	adds	r3, #32
 801493e:	693a      	ldr	r2, [r7, #16]
 8014940:	4611      	mov	r1, r2
 8014942:	4618      	mov	r0, r3
 8014944:	f7fd fdf3 	bl	801252e <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8014948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801494a:	3315      	adds	r3, #21
 801494c:	22f8      	movs	r2, #248	@ 0xf8
 801494e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8014950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014952:	3318      	adds	r3, #24
 8014954:	213f      	movs	r1, #63	@ 0x3f
 8014956:	4618      	mov	r0, r3
 8014958:	f7fd fdce 	bl	80124f8 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 801495c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801495e:	331a      	adds	r3, #26
 8014960:	21ff      	movs	r1, #255	@ 0xff
 8014962:	4618      	mov	r0, r3
 8014964:	f7fd fdc8 	bl	80124f8 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8014968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801496a:	331c      	adds	r3, #28
 801496c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801496e:	4618      	mov	r0, r3
 8014970:	f7fd fddd 	bl	801252e <st_dword>
		if (fmt == FS_FAT32) {
 8014974:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014978:	2b03      	cmp	r3, #3
 801497a:	d131      	bne.n	80149e0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 801497c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801497e:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8014982:	f7fd f8f9 	bl	8011b78 <get_fattime>
 8014986:	4603      	mov	r3, r0
 8014988:	4619      	mov	r1, r3
 801498a:	4620      	mov	r0, r4
 801498c:	f7fd fdcf 	bl	801252e <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8014990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014992:	3324      	adds	r3, #36	@ 0x24
 8014994:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014996:	4618      	mov	r0, r3
 8014998:	f7fd fdc9 	bl	801252e <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 801499c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801499e:	332c      	adds	r3, #44	@ 0x2c
 80149a0:	2102      	movs	r1, #2
 80149a2:	4618      	mov	r0, r3
 80149a4:	f7fd fdc3 	bl	801252e <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80149a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149aa:	3330      	adds	r3, #48	@ 0x30
 80149ac:	2101      	movs	r1, #1
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7fd fda2 	bl	80124f8 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80149b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149b6:	3332      	adds	r3, #50	@ 0x32
 80149b8:	2106      	movs	r1, #6
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7fd fd9c 	bl	80124f8 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80149c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149c2:	3340      	adds	r3, #64	@ 0x40
 80149c4:	2280      	movs	r2, #128	@ 0x80
 80149c6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80149c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149ca:	3342      	adds	r3, #66	@ 0x42
 80149cc:	2229      	movs	r2, #41	@ 0x29
 80149ce:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80149d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149d2:	3347      	adds	r3, #71	@ 0x47
 80149d4:	2213      	movs	r2, #19
 80149d6:	4970      	ldr	r1, [pc, #448]	@ (8014b98 <f_mkfs+0x6ec>)
 80149d8:	4618      	mov	r0, r3
 80149da:	f7fd fdd4 	bl	8012586 <mem_cpy>
 80149de:	e020      	b.n	8014a22 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80149e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149e2:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 80149e6:	f7fd f8c7 	bl	8011b78 <get_fattime>
 80149ea:	4603      	mov	r3, r0
 80149ec:	4619      	mov	r1, r3
 80149ee:	4620      	mov	r0, r4
 80149f0:	f7fd fd9d 	bl	801252e <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80149f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149f6:	3316      	adds	r3, #22
 80149f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80149fa:	b292      	uxth	r2, r2
 80149fc:	4611      	mov	r1, r2
 80149fe:	4618      	mov	r0, r3
 8014a00:	f7fd fd7a 	bl	80124f8 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8014a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a06:	3324      	adds	r3, #36	@ 0x24
 8014a08:	2280      	movs	r2, #128	@ 0x80
 8014a0a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8014a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a0e:	3326      	adds	r3, #38	@ 0x26
 8014a10:	2229      	movs	r2, #41	@ 0x29
 8014a12:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8014a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a16:	332b      	adds	r3, #43	@ 0x2b
 8014a18:	2213      	movs	r2, #19
 8014a1a:	4960      	ldr	r1, [pc, #384]	@ (8014b9c <f_mkfs+0x6f0>)
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f7fd fdb2 	bl	8012586 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8014a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a24:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014a28:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7fd fd63 	bl	80124f8 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8014a32:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014a36:	2301      	movs	r3, #1
 8014a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014a3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014a3c:	f7fd fce2 	bl	8012404 <disk_write>
 8014a40:	4603      	mov	r3, r0
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d001      	beq.n	8014a4a <f_mkfs+0x59e>
 8014a46:	2301      	movs	r3, #1
 8014a48:	e156      	b.n	8014cf8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8014a4a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014a4e:	2b03      	cmp	r3, #3
 8014a50:	d140      	bne.n	8014ad4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8014a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a54:	1d9a      	adds	r2, r3, #6
 8014a56:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014a5e:	f7fd fcd1 	bl	8012404 <disk_write>
			mem_set(buf, 0, ss);
 8014a62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014a64:	461a      	mov	r2, r3
 8014a66:	2100      	movs	r1, #0
 8014a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a6a:	f7fd fdad 	bl	80125c8 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8014a6e:	494c      	ldr	r1, [pc, #304]	@ (8014ba0 <f_mkfs+0x6f4>)
 8014a70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a72:	f7fd fd5c 	bl	801252e <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8014a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a78:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014a7c:	4949      	ldr	r1, [pc, #292]	@ (8014ba4 <f_mkfs+0x6f8>)
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7fd fd55 	bl	801252e <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8014a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a86:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8014a8a:	6a3b      	ldr	r3, [r7, #32]
 8014a8c:	3b01      	subs	r3, #1
 8014a8e:	4619      	mov	r1, r3
 8014a90:	4610      	mov	r0, r2
 8014a92:	f7fd fd4c 	bl	801252e <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8014a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a98:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8014a9c:	2102      	movs	r1, #2
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f7fd fd45 	bl	801252e <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8014aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aa6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014aaa:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7fd fd22 	bl	80124f8 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8014ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ab6:	1dda      	adds	r2, r3, #7
 8014ab8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014abc:	2301      	movs	r3, #1
 8014abe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014ac0:	f7fd fca0 	bl	8012404 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8014ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ac6:	1c5a      	adds	r2, r3, #1
 8014ac8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014acc:	2301      	movs	r3, #1
 8014ace:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014ad0:	f7fd fc98 	bl	8012404 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8014ad4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ad6:	2100      	movs	r1, #0
 8014ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014ada:	f7fd fd75 	bl	80125c8 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8014ade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014ae0:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014ae6:	e04b      	b.n	8014b80 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8014ae8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014aec:	2b03      	cmp	r3, #3
 8014aee:	d113      	bne.n	8014b18 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8014af0:	f06f 0107 	mvn.w	r1, #7
 8014af4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014af6:	f7fd fd1a 	bl	801252e <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8014afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014afc:	3304      	adds	r3, #4
 8014afe:	f04f 31ff 	mov.w	r1, #4294967295
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fd fd13 	bl	801252e <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8014b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b0a:	3308      	adds	r3, #8
 8014b0c:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7fd fd0c 	bl	801252e <st_dword>
 8014b16:	e00b      	b.n	8014b30 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8014b18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014b1c:	2b01      	cmp	r3, #1
 8014b1e:	d101      	bne.n	8014b24 <f_mkfs+0x678>
 8014b20:	4b21      	ldr	r3, [pc, #132]	@ (8014ba8 <f_mkfs+0x6fc>)
 8014b22:	e001      	b.n	8014b28 <f_mkfs+0x67c>
 8014b24:	f06f 0307 	mvn.w	r3, #7
 8014b28:	4619      	mov	r1, r3
 8014b2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014b2c:	f7fd fcff 	bl	801252e <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8014b30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014b32:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8014b34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b38:	4293      	cmp	r3, r2
 8014b3a:	bf28      	it	cs
 8014b3c:	4613      	movcs	r3, r2
 8014b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014b40:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014b44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b46:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014b48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014b4a:	f7fd fc5b 	bl	8012404 <disk_write>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d001      	beq.n	8014b58 <f_mkfs+0x6ac>
 8014b54:	2301      	movs	r3, #1
 8014b56:	e0cf      	b.n	8014cf8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8014b58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014b5a:	461a      	mov	r2, r3
 8014b5c:	2100      	movs	r1, #0
 8014b5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014b60:	f7fd fd32 	bl	80125c8 <mem_set>
				sect += n; nsect -= n;
 8014b64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014b66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b68:	4413      	add	r3, r2
 8014b6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8014b6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b70:	1ad3      	subs	r3, r2, r3
 8014b72:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8014b74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d1dc      	bne.n	8014b34 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014b80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014b84:	429a      	cmp	r2, r3
 8014b86:	d3af      	bcc.n	8014ae8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8014b88:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014b8c:	2b03      	cmp	r3, #3
 8014b8e:	d10d      	bne.n	8014bac <f_mkfs+0x700>
 8014b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b92:	e00c      	b.n	8014bae <f_mkfs+0x702>
 8014b94:	0801c0ec 	.word	0x0801c0ec
 8014b98:	0801c0f8 	.word	0x0801c0f8
 8014b9c:	0801c10c 	.word	0x0801c10c
 8014ba0:	41615252 	.word	0x41615252
 8014ba4:	61417272 	.word	0x61417272
 8014ba8:	00fffff8 	.word	0x00fffff8
 8014bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014bae:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8014bb0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	bf28      	it	cs
 8014bb8:	4613      	movcs	r3, r2
 8014bba:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014bbc:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014bc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bc2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014bc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014bc6:	f7fd fc1d 	bl	8012404 <disk_write>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d001      	beq.n	8014bd4 <f_mkfs+0x728>
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	e091      	b.n	8014cf8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8014bd4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014bd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bd8:	4413      	add	r3, r2
 8014bda:	667b      	str	r3, [r7, #100]	@ 0x64
 8014bdc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014be0:	1ad3      	subs	r3, r2, r3
 8014be2:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8014be4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d1e2      	bne.n	8014bb0 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8014bea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014bee:	2b03      	cmp	r3, #3
 8014bf0:	d103      	bne.n	8014bfa <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8014bf2:	230c      	movs	r3, #12
 8014bf4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014bf8:	e010      	b.n	8014c1c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8014bfa:	693b      	ldr	r3, [r7, #16]
 8014bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014c00:	d303      	bcc.n	8014c0a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8014c02:	2306      	movs	r3, #6
 8014c04:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014c08:	e008      	b.n	8014c1c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8014c0a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014c0e:	2b02      	cmp	r3, #2
 8014c10:	d101      	bne.n	8014c16 <f_mkfs+0x76a>
 8014c12:	2304      	movs	r3, #4
 8014c14:	e000      	b.n	8014c18 <f_mkfs+0x76c>
 8014c16:	2301      	movs	r3, #1
 8014c18:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8014c1c:	7afb      	ldrb	r3, [r7, #11]
 8014c1e:	f003 0308 	and.w	r3, r3, #8
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d15b      	bne.n	8014cde <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8014c26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014c28:	461a      	mov	r2, r3
 8014c2a:	2100      	movs	r1, #0
 8014c2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c2e:	f7fd fccb 	bl	80125c8 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8014c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c34:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014c38:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f7fd fc5b 	bl	80124f8 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8014c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c44:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8014c48:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8014c4a:	69bb      	ldr	r3, [r7, #24]
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8014c50:	69bb      	ldr	r3, [r7, #24]
 8014c52:	3301      	adds	r3, #1
 8014c54:	2201      	movs	r2, #1
 8014c56:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8014c58:	69bb      	ldr	r3, [r7, #24]
 8014c5a:	3302      	adds	r3, #2
 8014c5c:	2201      	movs	r2, #1
 8014c5e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8014c60:	69bb      	ldr	r3, [r7, #24]
 8014c62:	3303      	adds	r3, #3
 8014c64:	2200      	movs	r2, #0
 8014c66:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8014c68:	69bb      	ldr	r3, [r7, #24]
 8014c6a:	3304      	adds	r3, #4
 8014c6c:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8014c70:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8014c72:	693a      	ldr	r2, [r7, #16]
 8014c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c76:	441a      	add	r2, r3
 8014c78:	4b21      	ldr	r3, [pc, #132]	@ (8014d00 <f_mkfs+0x854>)
 8014c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8014c7e:	1ad2      	subs	r2, r2, r3
 8014c80:	0852      	lsrs	r2, r2, #1
 8014c82:	4413      	add	r3, r2
 8014c84:	0b5b      	lsrs	r3, r3, #13
 8014c86:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8014c88:	69bb      	ldr	r3, [r7, #24]
 8014c8a:	3305      	adds	r3, #5
 8014c8c:	22fe      	movs	r2, #254	@ 0xfe
 8014c8e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8014c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c92:	089b      	lsrs	r3, r3, #2
 8014c94:	b2da      	uxtb	r2, r3
 8014c96:	69bb      	ldr	r3, [r7, #24]
 8014c98:	3306      	adds	r3, #6
 8014c9a:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8014c9e:	b2d2      	uxtb	r2, r2
 8014ca0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8014ca2:	69bb      	ldr	r3, [r7, #24]
 8014ca4:	3307      	adds	r3, #7
 8014ca6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014ca8:	b2d2      	uxtb	r2, r2
 8014caa:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8014cac:	69bb      	ldr	r3, [r7, #24]
 8014cae:	3308      	adds	r3, #8
 8014cb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7fd fc3b 	bl	801252e <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8014cb8:	69bb      	ldr	r3, [r7, #24]
 8014cba:	330c      	adds	r3, #12
 8014cbc:	693a      	ldr	r2, [r7, #16]
 8014cbe:	4611      	mov	r1, r2
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7fd fc34 	bl	801252e <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8014cc6:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014cca:	2301      	movs	r3, #1
 8014ccc:	2200      	movs	r2, #0
 8014cce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014cd0:	f7fd fb98 	bl	8012404 <disk_write>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d001      	beq.n	8014cde <f_mkfs+0x832>
 8014cda:	2301      	movs	r3, #1
 8014cdc:	e00c      	b.n	8014cf8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8014cde:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	2100      	movs	r1, #0
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f7fd fbac 	bl	8012444 <disk_ioctl>
 8014cec:	4603      	mov	r3, r0
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d001      	beq.n	8014cf6 <f_mkfs+0x84a>
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	e000      	b.n	8014cf8 <f_mkfs+0x84c>

	return FR_OK;
 8014cf6:	2300      	movs	r3, #0
}
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	3774      	adds	r7, #116	@ 0x74
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd90      	pop	{r4, r7, pc}
 8014d00:	0515565b 	.word	0x0515565b

08014d04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014d04:	b480      	push	{r7}
 8014d06:	b087      	sub	sp, #28
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	60f8      	str	r0, [r7, #12]
 8014d0c:	60b9      	str	r1, [r7, #8]
 8014d0e:	4613      	mov	r3, r2
 8014d10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014d12:	2301      	movs	r3, #1
 8014d14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014d16:	2300      	movs	r3, #0
 8014d18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8014d98 <FATFS_LinkDriverEx+0x94>)
 8014d1c:	7a5b      	ldrb	r3, [r3, #9]
 8014d1e:	b2db      	uxtb	r3, r3
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d131      	bne.n	8014d88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014d24:	4b1c      	ldr	r3, [pc, #112]	@ (8014d98 <FATFS_LinkDriverEx+0x94>)
 8014d26:	7a5b      	ldrb	r3, [r3, #9]
 8014d28:	b2db      	uxtb	r3, r3
 8014d2a:	461a      	mov	r2, r3
 8014d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8014d98 <FATFS_LinkDriverEx+0x94>)
 8014d2e:	2100      	movs	r1, #0
 8014d30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014d32:	4b19      	ldr	r3, [pc, #100]	@ (8014d98 <FATFS_LinkDriverEx+0x94>)
 8014d34:	7a5b      	ldrb	r3, [r3, #9]
 8014d36:	b2db      	uxtb	r3, r3
 8014d38:	4a17      	ldr	r2, [pc, #92]	@ (8014d98 <FATFS_LinkDriverEx+0x94>)
 8014d3a:	009b      	lsls	r3, r3, #2
 8014d3c:	4413      	add	r3, r2
 8014d3e:	68fa      	ldr	r2, [r7, #12]
 8014d40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014d42:	4b15      	ldr	r3, [pc, #84]	@ (8014d98 <FATFS_LinkDriverEx+0x94>)
 8014d44:	7a5b      	ldrb	r3, [r3, #9]
 8014d46:	b2db      	uxtb	r3, r3
 8014d48:	461a      	mov	r2, r3
 8014d4a:	4b13      	ldr	r3, [pc, #76]	@ (8014d98 <FATFS_LinkDriverEx+0x94>)
 8014d4c:	4413      	add	r3, r2
 8014d4e:	79fa      	ldrb	r2, [r7, #7]
 8014d50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014d52:	4b11      	ldr	r3, [pc, #68]	@ (8014d98 <FATFS_LinkDriverEx+0x94>)
 8014d54:	7a5b      	ldrb	r3, [r3, #9]
 8014d56:	b2db      	uxtb	r3, r3
 8014d58:	1c5a      	adds	r2, r3, #1
 8014d5a:	b2d1      	uxtb	r1, r2
 8014d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8014d98 <FATFS_LinkDriverEx+0x94>)
 8014d5e:	7251      	strb	r1, [r2, #9]
 8014d60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014d62:	7dbb      	ldrb	r3, [r7, #22]
 8014d64:	3330      	adds	r3, #48	@ 0x30
 8014d66:	b2da      	uxtb	r2, r3
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014d6c:	68bb      	ldr	r3, [r7, #8]
 8014d6e:	3301      	adds	r3, #1
 8014d70:	223a      	movs	r2, #58	@ 0x3a
 8014d72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014d74:	68bb      	ldr	r3, [r7, #8]
 8014d76:	3302      	adds	r3, #2
 8014d78:	222f      	movs	r2, #47	@ 0x2f
 8014d7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	3303      	adds	r3, #3
 8014d80:	2200      	movs	r2, #0
 8014d82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014d84:	2300      	movs	r3, #0
 8014d86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	371c      	adds	r7, #28
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d94:	4770      	bx	lr
 8014d96:	bf00      	nop
 8014d98:	20002b2c 	.word	0x20002b2c

08014d9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014da6:	2200      	movs	r2, #0
 8014da8:	6839      	ldr	r1, [r7, #0]
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f7ff ffaa 	bl	8014d04 <FATFS_LinkDriverEx>
 8014db0:	4603      	mov	r3, r0
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3708      	adds	r7, #8
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}

08014dba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014dba:	b480      	push	{r7}
 8014dbc:	b085      	sub	sp, #20
 8014dbe:	af00      	add	r7, sp, #0
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014dc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014dcc:	2b84      	cmp	r3, #132	@ 0x84
 8014dce:	d005      	beq.n	8014ddc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014dd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	4413      	add	r3, r2
 8014dd8:	3303      	adds	r3, #3
 8014dda:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	3714      	adds	r7, #20
 8014de2:	46bd      	mov	sp, r7
 8014de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de8:	4770      	bx	lr

08014dea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014dea:	b480      	push	{r7}
 8014dec:	b083      	sub	sp, #12
 8014dee:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014df0:	f3ef 8305 	mrs	r3, IPSR
 8014df4:	607b      	str	r3, [r7, #4]
  return(result);
 8014df6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	bf14      	ite	ne
 8014dfc:	2301      	movne	r3, #1
 8014dfe:	2300      	moveq	r3, #0
 8014e00:	b2db      	uxtb	r3, r3
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	370c      	adds	r7, #12
 8014e06:	46bd      	mov	sp, r7
 8014e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0c:	4770      	bx	lr

08014e0e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014e0e:	b580      	push	{r7, lr}
 8014e10:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014e12:	f001 f9cd 	bl	80161b0 <vTaskStartScheduler>
  
  return osOK;
 8014e16:	2300      	movs	r3, #0
}
 8014e18:	4618      	mov	r0, r3
 8014e1a:	bd80      	pop	{r7, pc}

08014e1c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014e20:	f001 fe2e 	bl	8016a80 <xTaskGetSchedulerState>
 8014e24:	4603      	mov	r3, r0
 8014e26:	2b01      	cmp	r3, #1
 8014e28:	d101      	bne.n	8014e2e <osKernelRunning+0x12>
    return 0;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	e000      	b.n	8014e30 <osKernelRunning+0x14>
  else
    return 1;
 8014e2e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	bd80      	pop	{r7, pc}

08014e34 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014e38:	f7ff ffd7 	bl	8014dea <inHandlerMode>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d003      	beq.n	8014e4a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014e42:	f001 fad9 	bl	80163f8 <xTaskGetTickCountFromISR>
 8014e46:	4603      	mov	r3, r0
 8014e48:	e002      	b.n	8014e50 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8014e4a:	f001 fac5 	bl	80163d8 <xTaskGetTickCount>
 8014e4e:	4603      	mov	r3, r0
  }
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e56:	b089      	sub	sp, #36	@ 0x24
 8014e58:	af04      	add	r7, sp, #16
 8014e5a:	6078      	str	r0, [r7, #4]
 8014e5c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	695b      	ldr	r3, [r3, #20]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d020      	beq.n	8014ea8 <osThreadCreate+0x54>
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	699b      	ldr	r3, [r3, #24]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d01c      	beq.n	8014ea8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	685c      	ldr	r4, [r3, #4]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	691e      	ldr	r6, [r3, #16]
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014e80:	4618      	mov	r0, r3
 8014e82:	f7ff ff9a 	bl	8014dba <makeFreeRtosPriority>
 8014e86:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	695b      	ldr	r3, [r3, #20]
 8014e8c:	687a      	ldr	r2, [r7, #4]
 8014e8e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014e90:	9202      	str	r2, [sp, #8]
 8014e92:	9301      	str	r3, [sp, #4]
 8014e94:	9100      	str	r1, [sp, #0]
 8014e96:	683b      	ldr	r3, [r7, #0]
 8014e98:	4632      	mov	r2, r6
 8014e9a:	4629      	mov	r1, r5
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	f000 ffa5 	bl	8015dec <xTaskCreateStatic>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	60fb      	str	r3, [r7, #12]
 8014ea6:	e01c      	b.n	8014ee2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	685c      	ldr	r4, [r3, #4]
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014eb4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f7ff ff7c 	bl	8014dba <makeFreeRtosPriority>
 8014ec2:	4602      	mov	r2, r0
 8014ec4:	f107 030c 	add.w	r3, r7, #12
 8014ec8:	9301      	str	r3, [sp, #4]
 8014eca:	9200      	str	r2, [sp, #0]
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	4632      	mov	r2, r6
 8014ed0:	4629      	mov	r1, r5
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	f000 fff0 	bl	8015eb8 <xTaskCreate>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	2b01      	cmp	r3, #1
 8014edc:	d001      	beq.n	8014ee2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	e000      	b.n	8014ee4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
}
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	3714      	adds	r7, #20
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014eec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b084      	sub	sp, #16
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d001      	beq.n	8014f02 <osDelay+0x16>
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	e000      	b.n	8014f04 <osDelay+0x18>
 8014f02:	2301      	movs	r3, #1
 8014f04:	4618      	mov	r0, r3
 8014f06:	f001 f91b 	bl	8016140 <vTaskDelay>
  
  return osOK;
 8014f0a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	3710      	adds	r7, #16
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}

08014f14 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014f14:	b590      	push	{r4, r7, lr}
 8014f16:	b085      	sub	sp, #20
 8014f18:	af02      	add	r7, sp, #8
 8014f1a:	6078      	str	r0, [r7, #4]
 8014f1c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	689b      	ldr	r3, [r3, #8]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d011      	beq.n	8014f4a <osMessageCreate+0x36>
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	68db      	ldr	r3, [r3, #12]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d00d      	beq.n	8014f4a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6818      	ldr	r0, [r3, #0]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	6859      	ldr	r1, [r3, #4]
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	689a      	ldr	r2, [r3, #8]
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	68db      	ldr	r3, [r3, #12]
 8014f3e:	2400      	movs	r4, #0
 8014f40:	9400      	str	r4, [sp, #0]
 8014f42:	f000 f9f9 	bl	8015338 <xQueueGenericCreateStatic>
 8014f46:	4603      	mov	r3, r0
 8014f48:	e008      	b.n	8014f5c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6818      	ldr	r0, [r3, #0]
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	685b      	ldr	r3, [r3, #4]
 8014f52:	2200      	movs	r2, #0
 8014f54:	4619      	mov	r1, r3
 8014f56:	f000 fa76 	bl	8015446 <xQueueGenericCreate>
 8014f5a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	370c      	adds	r7, #12
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd90      	pop	{r4, r7, pc}

08014f64 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b086      	sub	sp, #24
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014f70:	2300      	movs	r3, #0
 8014f72:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d101      	bne.n	8014f82 <osMessagePut+0x1e>
    ticks = 1;
 8014f7e:	2301      	movs	r3, #1
 8014f80:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8014f82:	f7ff ff32 	bl	8014dea <inHandlerMode>
 8014f86:	4603      	mov	r3, r0
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d018      	beq.n	8014fbe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014f8c:	f107 0210 	add.w	r2, r7, #16
 8014f90:	f107 0108 	add.w	r1, r7, #8
 8014f94:	2300      	movs	r3, #0
 8014f96:	68f8      	ldr	r0, [r7, #12]
 8014f98:	f000 fbc2 	bl	8015720 <xQueueGenericSendFromISR>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d001      	beq.n	8014fa6 <osMessagePut+0x42>
      return osErrorOS;
 8014fa2:	23ff      	movs	r3, #255	@ 0xff
 8014fa4:	e018      	b.n	8014fd8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014fa6:	693b      	ldr	r3, [r7, #16]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d014      	beq.n	8014fd6 <osMessagePut+0x72>
 8014fac:	4b0c      	ldr	r3, [pc, #48]	@ (8014fe0 <osMessagePut+0x7c>)
 8014fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014fb2:	601a      	str	r2, [r3, #0]
 8014fb4:	f3bf 8f4f 	dsb	sy
 8014fb8:	f3bf 8f6f 	isb	sy
 8014fbc:	e00b      	b.n	8014fd6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014fbe:	f107 0108 	add.w	r1, r7, #8
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	697a      	ldr	r2, [r7, #20]
 8014fc6:	68f8      	ldr	r0, [r7, #12]
 8014fc8:	f000 faa0 	bl	801550c <xQueueGenericSend>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	2b01      	cmp	r3, #1
 8014fd0:	d001      	beq.n	8014fd6 <osMessagePut+0x72>
      return osErrorOS;
 8014fd2:	23ff      	movs	r3, #255	@ 0xff
 8014fd4:	e000      	b.n	8014fd8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014fd6:	2300      	movs	r3, #0
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3718      	adds	r7, #24
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}
 8014fe0:	e000ed04 	.word	0xe000ed04

08014fe4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014fe4:	b590      	push	{r4, r7, lr}
 8014fe6:	b08b      	sub	sp, #44	@ 0x2c
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	60f8      	str	r0, [r7, #12]
 8014fec:	60b9      	str	r1, [r7, #8]
 8014fee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d10a      	bne.n	8015014 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8014ffe:	2380      	movs	r3, #128	@ 0x80
 8015000:	617b      	str	r3, [r7, #20]
    return event;
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	461c      	mov	r4, r3
 8015006:	f107 0314 	add.w	r3, r7, #20
 801500a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801500e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015012:	e054      	b.n	80150be <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8015014:	2300      	movs	r3, #0
 8015016:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8015018:	2300      	movs	r3, #0
 801501a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015022:	d103      	bne.n	801502c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8015024:	f04f 33ff 	mov.w	r3, #4294967295
 8015028:	627b      	str	r3, [r7, #36]	@ 0x24
 801502a:	e009      	b.n	8015040 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d006      	beq.n	8015040 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8015036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015038:	2b00      	cmp	r3, #0
 801503a:	d101      	bne.n	8015040 <osMessageGet+0x5c>
      ticks = 1;
 801503c:	2301      	movs	r3, #1
 801503e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8015040:	f7ff fed3 	bl	8014dea <inHandlerMode>
 8015044:	4603      	mov	r3, r0
 8015046:	2b00      	cmp	r3, #0
 8015048:	d01c      	beq.n	8015084 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801504a:	f107 0220 	add.w	r2, r7, #32
 801504e:	f107 0314 	add.w	r3, r7, #20
 8015052:	3304      	adds	r3, #4
 8015054:	4619      	mov	r1, r3
 8015056:	68b8      	ldr	r0, [r7, #8]
 8015058:	f000 fcee 	bl	8015a38 <xQueueReceiveFromISR>
 801505c:	4603      	mov	r3, r0
 801505e:	2b01      	cmp	r3, #1
 8015060:	d102      	bne.n	8015068 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8015062:	2310      	movs	r3, #16
 8015064:	617b      	str	r3, [r7, #20]
 8015066:	e001      	b.n	801506c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8015068:	2300      	movs	r3, #0
 801506a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801506c:	6a3b      	ldr	r3, [r7, #32]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d01d      	beq.n	80150ae <osMessageGet+0xca>
 8015072:	4b15      	ldr	r3, [pc, #84]	@ (80150c8 <osMessageGet+0xe4>)
 8015074:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015078:	601a      	str	r2, [r3, #0]
 801507a:	f3bf 8f4f 	dsb	sy
 801507e:	f3bf 8f6f 	isb	sy
 8015082:	e014      	b.n	80150ae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8015084:	f107 0314 	add.w	r3, r7, #20
 8015088:	3304      	adds	r3, #4
 801508a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801508c:	4619      	mov	r1, r3
 801508e:	68b8      	ldr	r0, [r7, #8]
 8015090:	f000 fbea 	bl	8015868 <xQueueReceive>
 8015094:	4603      	mov	r3, r0
 8015096:	2b01      	cmp	r3, #1
 8015098:	d102      	bne.n	80150a0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801509a:	2310      	movs	r3, #16
 801509c:	617b      	str	r3, [r7, #20]
 801509e:	e006      	b.n	80150ae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80150a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d101      	bne.n	80150aa <osMessageGet+0xc6>
 80150a6:	2300      	movs	r3, #0
 80150a8:	e000      	b.n	80150ac <osMessageGet+0xc8>
 80150aa:	2340      	movs	r3, #64	@ 0x40
 80150ac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	461c      	mov	r4, r3
 80150b2:	f107 0314 	add.w	r3, r7, #20
 80150b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80150ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80150be:	68f8      	ldr	r0, [r7, #12]
 80150c0:	372c      	adds	r7, #44	@ 0x2c
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd90      	pop	{r4, r7, pc}
 80150c6:	bf00      	nop
 80150c8:	e000ed04 	.word	0xe000ed04

080150cc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80150d4:	f7ff fe89 	bl	8014dea <inHandlerMode>
 80150d8:	4603      	mov	r3, r0
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d004      	beq.n	80150e8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80150de:	6878      	ldr	r0, [r7, #4]
 80150e0:	f000 fd53 	bl	8015b8a <uxQueueMessagesWaitingFromISR>
 80150e4:	4603      	mov	r3, r0
 80150e6:	e003      	b.n	80150f0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80150e8:	6878      	ldr	r0, [r7, #4]
 80150ea:	f000 fd2d 	bl	8015b48 <uxQueueMessagesWaiting>
 80150ee:	4603      	mov	r3, r0
  }
}
 80150f0:	4618      	mov	r0, r3
 80150f2:	3708      	adds	r7, #8
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}

080150f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80150f8:	b480      	push	{r7}
 80150fa:	b083      	sub	sp, #12
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f103 0208 	add.w	r2, r3, #8
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f04f 32ff 	mov.w	r2, #4294967295
 8015110:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f103 0208 	add.w	r2, r3, #8
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f103 0208 	add.w	r2, r3, #8
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2200      	movs	r2, #0
 801512a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801512c:	bf00      	nop
 801512e:	370c      	adds	r7, #12
 8015130:	46bd      	mov	sp, r7
 8015132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015136:	4770      	bx	lr

08015138 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015138:	b480      	push	{r7}
 801513a:	b083      	sub	sp, #12
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2200      	movs	r2, #0
 8015144:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015146:	bf00      	nop
 8015148:	370c      	adds	r7, #12
 801514a:	46bd      	mov	sp, r7
 801514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015150:	4770      	bx	lr

08015152 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015152:	b480      	push	{r7}
 8015154:	b085      	sub	sp, #20
 8015156:	af00      	add	r7, sp, #0
 8015158:	6078      	str	r0, [r7, #4]
 801515a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	685b      	ldr	r3, [r3, #4]
 8015160:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	68fa      	ldr	r2, [r7, #12]
 8015166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	689a      	ldr	r2, [r3, #8]
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	689b      	ldr	r3, [r3, #8]
 8015174:	683a      	ldr	r2, [r7, #0]
 8015176:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	683a      	ldr	r2, [r7, #0]
 801517c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	687a      	ldr	r2, [r7, #4]
 8015182:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	1c5a      	adds	r2, r3, #1
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	601a      	str	r2, [r3, #0]
}
 801518e:	bf00      	nop
 8015190:	3714      	adds	r7, #20
 8015192:	46bd      	mov	sp, r7
 8015194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015198:	4770      	bx	lr

0801519a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801519a:	b480      	push	{r7}
 801519c:	b085      	sub	sp, #20
 801519e:	af00      	add	r7, sp, #0
 80151a0:	6078      	str	r0, [r7, #4]
 80151a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151b0:	d103      	bne.n	80151ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	691b      	ldr	r3, [r3, #16]
 80151b6:	60fb      	str	r3, [r7, #12]
 80151b8:	e00c      	b.n	80151d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	3308      	adds	r3, #8
 80151be:	60fb      	str	r3, [r7, #12]
 80151c0:	e002      	b.n	80151c8 <vListInsert+0x2e>
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	685b      	ldr	r3, [r3, #4]
 80151c6:	60fb      	str	r3, [r7, #12]
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	685b      	ldr	r3, [r3, #4]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	68ba      	ldr	r2, [r7, #8]
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d2f6      	bcs.n	80151c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	685a      	ldr	r2, [r3, #4]
 80151d8:	683b      	ldr	r3, [r7, #0]
 80151da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	685b      	ldr	r3, [r3, #4]
 80151e0:	683a      	ldr	r2, [r7, #0]
 80151e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	68fa      	ldr	r2, [r7, #12]
 80151e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	683a      	ldr	r2, [r7, #0]
 80151ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80151f0:	683b      	ldr	r3, [r7, #0]
 80151f2:	687a      	ldr	r2, [r7, #4]
 80151f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	1c5a      	adds	r2, r3, #1
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	601a      	str	r2, [r3, #0]
}
 8015200:	bf00      	nop
 8015202:	3714      	adds	r7, #20
 8015204:	46bd      	mov	sp, r7
 8015206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520a:	4770      	bx	lr

0801520c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801520c:	b480      	push	{r7}
 801520e:	b085      	sub	sp, #20
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	691b      	ldr	r3, [r3, #16]
 8015218:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	685b      	ldr	r3, [r3, #4]
 801521e:	687a      	ldr	r2, [r7, #4]
 8015220:	6892      	ldr	r2, [r2, #8]
 8015222:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	689b      	ldr	r3, [r3, #8]
 8015228:	687a      	ldr	r2, [r7, #4]
 801522a:	6852      	ldr	r2, [r2, #4]
 801522c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	687a      	ldr	r2, [r7, #4]
 8015234:	429a      	cmp	r2, r3
 8015236:	d103      	bne.n	8015240 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	689a      	ldr	r2, [r3, #8]
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2200      	movs	r2, #0
 8015244:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	1e5a      	subs	r2, r3, #1
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	681b      	ldr	r3, [r3, #0]
}
 8015254:	4618      	mov	r0, r3
 8015256:	3714      	adds	r7, #20
 8015258:	46bd      	mov	sp, r7
 801525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525e:	4770      	bx	lr

08015260 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b084      	sub	sp, #16
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
 8015268:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d10d      	bne.n	8015290 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015278:	b672      	cpsid	i
 801527a:	f383 8811 	msr	BASEPRI, r3
 801527e:	f3bf 8f6f 	isb	sy
 8015282:	f3bf 8f4f 	dsb	sy
 8015286:	b662      	cpsie	i
 8015288:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801528a:	bf00      	nop
 801528c:	bf00      	nop
 801528e:	e7fd      	b.n	801528c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8015290:	f001 fe14 	bl	8016ebc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	681a      	ldr	r2, [r3, #0]
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801529c:	68f9      	ldr	r1, [r7, #12]
 801529e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80152a0:	fb01 f303 	mul.w	r3, r1, r3
 80152a4:	441a      	add	r2, r3
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	2200      	movs	r2, #0
 80152ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	681a      	ldr	r2, [r3, #0]
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	681a      	ldr	r2, [r3, #0]
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152c0:	3b01      	subs	r3, #1
 80152c2:	68f9      	ldr	r1, [r7, #12]
 80152c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80152c6:	fb01 f303 	mul.w	r3, r1, r3
 80152ca:	441a      	add	r2, r3
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	22ff      	movs	r2, #255	@ 0xff
 80152d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	22ff      	movs	r2, #255	@ 0xff
 80152dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d114      	bne.n	8015310 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	691b      	ldr	r3, [r3, #16]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d01a      	beq.n	8015324 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	3310      	adds	r3, #16
 80152f2:	4618      	mov	r0, r3
 80152f4:	f001 f9fa 	bl	80166ec <xTaskRemoveFromEventList>
 80152f8:	4603      	mov	r3, r0
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d012      	beq.n	8015324 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80152fe:	4b0d      	ldr	r3, [pc, #52]	@ (8015334 <xQueueGenericReset+0xd4>)
 8015300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015304:	601a      	str	r2, [r3, #0]
 8015306:	f3bf 8f4f 	dsb	sy
 801530a:	f3bf 8f6f 	isb	sy
 801530e:	e009      	b.n	8015324 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	3310      	adds	r3, #16
 8015314:	4618      	mov	r0, r3
 8015316:	f7ff feef 	bl	80150f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	3324      	adds	r3, #36	@ 0x24
 801531e:	4618      	mov	r0, r3
 8015320:	f7ff feea 	bl	80150f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015324:	f001 fe00 	bl	8016f28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015328:	2301      	movs	r3, #1
}
 801532a:	4618      	mov	r0, r3
 801532c:	3710      	adds	r7, #16
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}
 8015332:	bf00      	nop
 8015334:	e000ed04 	.word	0xe000ed04

08015338 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015338:	b580      	push	{r7, lr}
 801533a:	b08e      	sub	sp, #56	@ 0x38
 801533c:	af02      	add	r7, sp, #8
 801533e:	60f8      	str	r0, [r7, #12]
 8015340:	60b9      	str	r1, [r7, #8]
 8015342:	607a      	str	r2, [r7, #4]
 8015344:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d10d      	bne.n	8015368 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 801534c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015350:	b672      	cpsid	i
 8015352:	f383 8811 	msr	BASEPRI, r3
 8015356:	f3bf 8f6f 	isb	sy
 801535a:	f3bf 8f4f 	dsb	sy
 801535e:	b662      	cpsie	i
 8015360:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8015362:	bf00      	nop
 8015364:	bf00      	nop
 8015366:	e7fd      	b.n	8015364 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d10d      	bne.n	801538a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 801536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015372:	b672      	cpsid	i
 8015374:	f383 8811 	msr	BASEPRI, r3
 8015378:	f3bf 8f6f 	isb	sy
 801537c:	f3bf 8f4f 	dsb	sy
 8015380:	b662      	cpsie	i
 8015382:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015384:	bf00      	nop
 8015386:	bf00      	nop
 8015388:	e7fd      	b.n	8015386 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d002      	beq.n	8015396 <xQueueGenericCreateStatic+0x5e>
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d001      	beq.n	801539a <xQueueGenericCreateStatic+0x62>
 8015396:	2301      	movs	r3, #1
 8015398:	e000      	b.n	801539c <xQueueGenericCreateStatic+0x64>
 801539a:	2300      	movs	r3, #0
 801539c:	2b00      	cmp	r3, #0
 801539e:	d10d      	bne.n	80153bc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80153a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153a4:	b672      	cpsid	i
 80153a6:	f383 8811 	msr	BASEPRI, r3
 80153aa:	f3bf 8f6f 	isb	sy
 80153ae:	f3bf 8f4f 	dsb	sy
 80153b2:	b662      	cpsie	i
 80153b4:	623b      	str	r3, [r7, #32]
}
 80153b6:	bf00      	nop
 80153b8:	bf00      	nop
 80153ba:	e7fd      	b.n	80153b8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d102      	bne.n	80153c8 <xQueueGenericCreateStatic+0x90>
 80153c2:	68bb      	ldr	r3, [r7, #8]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d101      	bne.n	80153cc <xQueueGenericCreateStatic+0x94>
 80153c8:	2301      	movs	r3, #1
 80153ca:	e000      	b.n	80153ce <xQueueGenericCreateStatic+0x96>
 80153cc:	2300      	movs	r3, #0
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d10d      	bne.n	80153ee <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80153d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153d6:	b672      	cpsid	i
 80153d8:	f383 8811 	msr	BASEPRI, r3
 80153dc:	f3bf 8f6f 	isb	sy
 80153e0:	f3bf 8f4f 	dsb	sy
 80153e4:	b662      	cpsie	i
 80153e6:	61fb      	str	r3, [r7, #28]
}
 80153e8:	bf00      	nop
 80153ea:	bf00      	nop
 80153ec:	e7fd      	b.n	80153ea <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80153ee:	2348      	movs	r3, #72	@ 0x48
 80153f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80153f2:	697b      	ldr	r3, [r7, #20]
 80153f4:	2b48      	cmp	r3, #72	@ 0x48
 80153f6:	d00d      	beq.n	8015414 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80153f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153fc:	b672      	cpsid	i
 80153fe:	f383 8811 	msr	BASEPRI, r3
 8015402:	f3bf 8f6f 	isb	sy
 8015406:	f3bf 8f4f 	dsb	sy
 801540a:	b662      	cpsie	i
 801540c:	61bb      	str	r3, [r7, #24]
}
 801540e:	bf00      	nop
 8015410:	bf00      	nop
 8015412:	e7fd      	b.n	8015410 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015414:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015416:	683b      	ldr	r3, [r7, #0]
 8015418:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801541a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801541c:	2b00      	cmp	r3, #0
 801541e:	d00d      	beq.n	801543c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015422:	2201      	movs	r2, #1
 8015424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015428:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801542c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801542e:	9300      	str	r3, [sp, #0]
 8015430:	4613      	mov	r3, r2
 8015432:	687a      	ldr	r2, [r7, #4]
 8015434:	68b9      	ldr	r1, [r7, #8]
 8015436:	68f8      	ldr	r0, [r7, #12]
 8015438:	f000 f848 	bl	80154cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801543c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801543e:	4618      	mov	r0, r3
 8015440:	3730      	adds	r7, #48	@ 0x30
 8015442:	46bd      	mov	sp, r7
 8015444:	bd80      	pop	{r7, pc}

08015446 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015446:	b580      	push	{r7, lr}
 8015448:	b08a      	sub	sp, #40	@ 0x28
 801544a:	af02      	add	r7, sp, #8
 801544c:	60f8      	str	r0, [r7, #12]
 801544e:	60b9      	str	r1, [r7, #8]
 8015450:	4613      	mov	r3, r2
 8015452:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d10d      	bne.n	8015476 <xQueueGenericCreate+0x30>
	__asm volatile
 801545a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801545e:	b672      	cpsid	i
 8015460:	f383 8811 	msr	BASEPRI, r3
 8015464:	f3bf 8f6f 	isb	sy
 8015468:	f3bf 8f4f 	dsb	sy
 801546c:	b662      	cpsie	i
 801546e:	613b      	str	r3, [r7, #16]
}
 8015470:	bf00      	nop
 8015472:	bf00      	nop
 8015474:	e7fd      	b.n	8015472 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d102      	bne.n	8015482 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801547c:	2300      	movs	r3, #0
 801547e:	61fb      	str	r3, [r7, #28]
 8015480:	e004      	b.n	801548c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	68ba      	ldr	r2, [r7, #8]
 8015486:	fb02 f303 	mul.w	r3, r2, r3
 801548a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	3348      	adds	r3, #72	@ 0x48
 8015490:	4618      	mov	r0, r3
 8015492:	f001 fe41 	bl	8017118 <pvPortMalloc>
 8015496:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015498:	69bb      	ldr	r3, [r7, #24]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d011      	beq.n	80154c2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801549e:	69bb      	ldr	r3, [r7, #24]
 80154a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80154a2:	697b      	ldr	r3, [r7, #20]
 80154a4:	3348      	adds	r3, #72	@ 0x48
 80154a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80154a8:	69bb      	ldr	r3, [r7, #24]
 80154aa:	2200      	movs	r2, #0
 80154ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80154b0:	79fa      	ldrb	r2, [r7, #7]
 80154b2:	69bb      	ldr	r3, [r7, #24]
 80154b4:	9300      	str	r3, [sp, #0]
 80154b6:	4613      	mov	r3, r2
 80154b8:	697a      	ldr	r2, [r7, #20]
 80154ba:	68b9      	ldr	r1, [r7, #8]
 80154bc:	68f8      	ldr	r0, [r7, #12]
 80154be:	f000 f805 	bl	80154cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80154c2:	69bb      	ldr	r3, [r7, #24]
	}
 80154c4:	4618      	mov	r0, r3
 80154c6:	3720      	adds	r7, #32
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b084      	sub	sp, #16
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	60f8      	str	r0, [r7, #12]
 80154d4:	60b9      	str	r1, [r7, #8]
 80154d6:	607a      	str	r2, [r7, #4]
 80154d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80154da:	68bb      	ldr	r3, [r7, #8]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d103      	bne.n	80154e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80154e0:	69bb      	ldr	r3, [r7, #24]
 80154e2:	69ba      	ldr	r2, [r7, #24]
 80154e4:	601a      	str	r2, [r3, #0]
 80154e6:	e002      	b.n	80154ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80154e8:	69bb      	ldr	r3, [r7, #24]
 80154ea:	687a      	ldr	r2, [r7, #4]
 80154ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80154ee:	69bb      	ldr	r3, [r7, #24]
 80154f0:	68fa      	ldr	r2, [r7, #12]
 80154f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80154f4:	69bb      	ldr	r3, [r7, #24]
 80154f6:	68ba      	ldr	r2, [r7, #8]
 80154f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80154fa:	2101      	movs	r1, #1
 80154fc:	69b8      	ldr	r0, [r7, #24]
 80154fe:	f7ff feaf 	bl	8015260 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015502:	bf00      	nop
 8015504:	3710      	adds	r7, #16
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}
	...

0801550c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b08e      	sub	sp, #56	@ 0x38
 8015510:	af00      	add	r7, sp, #0
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	607a      	str	r2, [r7, #4]
 8015518:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801551a:	2300      	movs	r3, #0
 801551c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015524:	2b00      	cmp	r3, #0
 8015526:	d10d      	bne.n	8015544 <xQueueGenericSend+0x38>
	__asm volatile
 8015528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801552c:	b672      	cpsid	i
 801552e:	f383 8811 	msr	BASEPRI, r3
 8015532:	f3bf 8f6f 	isb	sy
 8015536:	f3bf 8f4f 	dsb	sy
 801553a:	b662      	cpsie	i
 801553c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801553e:	bf00      	nop
 8015540:	bf00      	nop
 8015542:	e7fd      	b.n	8015540 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d103      	bne.n	8015552 <xQueueGenericSend+0x46>
 801554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801554e:	2b00      	cmp	r3, #0
 8015550:	d101      	bne.n	8015556 <xQueueGenericSend+0x4a>
 8015552:	2301      	movs	r3, #1
 8015554:	e000      	b.n	8015558 <xQueueGenericSend+0x4c>
 8015556:	2300      	movs	r3, #0
 8015558:	2b00      	cmp	r3, #0
 801555a:	d10d      	bne.n	8015578 <xQueueGenericSend+0x6c>
	__asm volatile
 801555c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015560:	b672      	cpsid	i
 8015562:	f383 8811 	msr	BASEPRI, r3
 8015566:	f3bf 8f6f 	isb	sy
 801556a:	f3bf 8f4f 	dsb	sy
 801556e:	b662      	cpsie	i
 8015570:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015572:	bf00      	nop
 8015574:	bf00      	nop
 8015576:	e7fd      	b.n	8015574 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	2b02      	cmp	r3, #2
 801557c:	d103      	bne.n	8015586 <xQueueGenericSend+0x7a>
 801557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015582:	2b01      	cmp	r3, #1
 8015584:	d101      	bne.n	801558a <xQueueGenericSend+0x7e>
 8015586:	2301      	movs	r3, #1
 8015588:	e000      	b.n	801558c <xQueueGenericSend+0x80>
 801558a:	2300      	movs	r3, #0
 801558c:	2b00      	cmp	r3, #0
 801558e:	d10d      	bne.n	80155ac <xQueueGenericSend+0xa0>
	__asm volatile
 8015590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015594:	b672      	cpsid	i
 8015596:	f383 8811 	msr	BASEPRI, r3
 801559a:	f3bf 8f6f 	isb	sy
 801559e:	f3bf 8f4f 	dsb	sy
 80155a2:	b662      	cpsie	i
 80155a4:	623b      	str	r3, [r7, #32]
}
 80155a6:	bf00      	nop
 80155a8:	bf00      	nop
 80155aa:	e7fd      	b.n	80155a8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80155ac:	f001 fa68 	bl	8016a80 <xTaskGetSchedulerState>
 80155b0:	4603      	mov	r3, r0
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d102      	bne.n	80155bc <xQueueGenericSend+0xb0>
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d101      	bne.n	80155c0 <xQueueGenericSend+0xb4>
 80155bc:	2301      	movs	r3, #1
 80155be:	e000      	b.n	80155c2 <xQueueGenericSend+0xb6>
 80155c0:	2300      	movs	r3, #0
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d10d      	bne.n	80155e2 <xQueueGenericSend+0xd6>
	__asm volatile
 80155c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155ca:	b672      	cpsid	i
 80155cc:	f383 8811 	msr	BASEPRI, r3
 80155d0:	f3bf 8f6f 	isb	sy
 80155d4:	f3bf 8f4f 	dsb	sy
 80155d8:	b662      	cpsie	i
 80155da:	61fb      	str	r3, [r7, #28]
}
 80155dc:	bf00      	nop
 80155de:	bf00      	nop
 80155e0:	e7fd      	b.n	80155de <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80155e2:	f001 fc6b 	bl	8016ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80155e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80155ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d302      	bcc.n	80155f8 <xQueueGenericSend+0xec>
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	2b02      	cmp	r3, #2
 80155f6:	d129      	bne.n	801564c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80155f8:	683a      	ldr	r2, [r7, #0]
 80155fa:	68b9      	ldr	r1, [r7, #8]
 80155fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80155fe:	f000 fae5 	bl	8015bcc <prvCopyDataToQueue>
 8015602:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015608:	2b00      	cmp	r3, #0
 801560a:	d010      	beq.n	801562e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801560e:	3324      	adds	r3, #36	@ 0x24
 8015610:	4618      	mov	r0, r3
 8015612:	f001 f86b 	bl	80166ec <xTaskRemoveFromEventList>
 8015616:	4603      	mov	r3, r0
 8015618:	2b00      	cmp	r3, #0
 801561a:	d013      	beq.n	8015644 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801561c:	4b3f      	ldr	r3, [pc, #252]	@ (801571c <xQueueGenericSend+0x210>)
 801561e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015622:	601a      	str	r2, [r3, #0]
 8015624:	f3bf 8f4f 	dsb	sy
 8015628:	f3bf 8f6f 	isb	sy
 801562c:	e00a      	b.n	8015644 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801562e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015630:	2b00      	cmp	r3, #0
 8015632:	d007      	beq.n	8015644 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015634:	4b39      	ldr	r3, [pc, #228]	@ (801571c <xQueueGenericSend+0x210>)
 8015636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801563a:	601a      	str	r2, [r3, #0]
 801563c:	f3bf 8f4f 	dsb	sy
 8015640:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015644:	f001 fc70 	bl	8016f28 <vPortExitCritical>
				return pdPASS;
 8015648:	2301      	movs	r3, #1
 801564a:	e063      	b.n	8015714 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d103      	bne.n	801565a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015652:	f001 fc69 	bl	8016f28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015656:	2300      	movs	r3, #0
 8015658:	e05c      	b.n	8015714 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801565c:	2b00      	cmp	r3, #0
 801565e:	d106      	bne.n	801566e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015660:	f107 0314 	add.w	r3, r7, #20
 8015664:	4618      	mov	r0, r3
 8015666:	f001 f8a7 	bl	80167b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801566a:	2301      	movs	r3, #1
 801566c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801566e:	f001 fc5b 	bl	8016f28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015672:	f000 fe03 	bl	801627c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015676:	f001 fc21 	bl	8016ebc <vPortEnterCritical>
 801567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801567c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015680:	b25b      	sxtb	r3, r3
 8015682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015686:	d103      	bne.n	8015690 <xQueueGenericSend+0x184>
 8015688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801568a:	2200      	movs	r2, #0
 801568c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015692:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015696:	b25b      	sxtb	r3, r3
 8015698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801569c:	d103      	bne.n	80156a6 <xQueueGenericSend+0x19a>
 801569e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156a0:	2200      	movs	r2, #0
 80156a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80156a6:	f001 fc3f 	bl	8016f28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80156aa:	1d3a      	adds	r2, r7, #4
 80156ac:	f107 0314 	add.w	r3, r7, #20
 80156b0:	4611      	mov	r1, r2
 80156b2:	4618      	mov	r0, r3
 80156b4:	f001 f896 	bl	80167e4 <xTaskCheckForTimeOut>
 80156b8:	4603      	mov	r3, r0
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d124      	bne.n	8015708 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80156be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156c0:	f000 fb7c 	bl	8015dbc <prvIsQueueFull>
 80156c4:	4603      	mov	r3, r0
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d018      	beq.n	80156fc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80156ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156cc:	3310      	adds	r3, #16
 80156ce:	687a      	ldr	r2, [r7, #4]
 80156d0:	4611      	mov	r1, r2
 80156d2:	4618      	mov	r0, r3
 80156d4:	f000 ffe2 	bl	801669c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80156d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156da:	f000 fb07 	bl	8015cec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80156de:	f000 fddb 	bl	8016298 <xTaskResumeAll>
 80156e2:	4603      	mov	r3, r0
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	f47f af7c 	bne.w	80155e2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80156ea:	4b0c      	ldr	r3, [pc, #48]	@ (801571c <xQueueGenericSend+0x210>)
 80156ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80156f0:	601a      	str	r2, [r3, #0]
 80156f2:	f3bf 8f4f 	dsb	sy
 80156f6:	f3bf 8f6f 	isb	sy
 80156fa:	e772      	b.n	80155e2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80156fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156fe:	f000 faf5 	bl	8015cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015702:	f000 fdc9 	bl	8016298 <xTaskResumeAll>
 8015706:	e76c      	b.n	80155e2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015708:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801570a:	f000 faef 	bl	8015cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801570e:	f000 fdc3 	bl	8016298 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015712:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015714:	4618      	mov	r0, r3
 8015716:	3738      	adds	r7, #56	@ 0x38
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}
 801571c:	e000ed04 	.word	0xe000ed04

08015720 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b08e      	sub	sp, #56	@ 0x38
 8015724:	af00      	add	r7, sp, #0
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	60b9      	str	r1, [r7, #8]
 801572a:	607a      	str	r2, [r7, #4]
 801572c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015734:	2b00      	cmp	r3, #0
 8015736:	d10d      	bne.n	8015754 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8015738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801573c:	b672      	cpsid	i
 801573e:	f383 8811 	msr	BASEPRI, r3
 8015742:	f3bf 8f6f 	isb	sy
 8015746:	f3bf 8f4f 	dsb	sy
 801574a:	b662      	cpsie	i
 801574c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801574e:	bf00      	nop
 8015750:	bf00      	nop
 8015752:	e7fd      	b.n	8015750 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015754:	68bb      	ldr	r3, [r7, #8]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d103      	bne.n	8015762 <xQueueGenericSendFromISR+0x42>
 801575a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801575e:	2b00      	cmp	r3, #0
 8015760:	d101      	bne.n	8015766 <xQueueGenericSendFromISR+0x46>
 8015762:	2301      	movs	r3, #1
 8015764:	e000      	b.n	8015768 <xQueueGenericSendFromISR+0x48>
 8015766:	2300      	movs	r3, #0
 8015768:	2b00      	cmp	r3, #0
 801576a:	d10d      	bne.n	8015788 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 801576c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015770:	b672      	cpsid	i
 8015772:	f383 8811 	msr	BASEPRI, r3
 8015776:	f3bf 8f6f 	isb	sy
 801577a:	f3bf 8f4f 	dsb	sy
 801577e:	b662      	cpsie	i
 8015780:	623b      	str	r3, [r7, #32]
}
 8015782:	bf00      	nop
 8015784:	bf00      	nop
 8015786:	e7fd      	b.n	8015784 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015788:	683b      	ldr	r3, [r7, #0]
 801578a:	2b02      	cmp	r3, #2
 801578c:	d103      	bne.n	8015796 <xQueueGenericSendFromISR+0x76>
 801578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015792:	2b01      	cmp	r3, #1
 8015794:	d101      	bne.n	801579a <xQueueGenericSendFromISR+0x7a>
 8015796:	2301      	movs	r3, #1
 8015798:	e000      	b.n	801579c <xQueueGenericSendFromISR+0x7c>
 801579a:	2300      	movs	r3, #0
 801579c:	2b00      	cmp	r3, #0
 801579e:	d10d      	bne.n	80157bc <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80157a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157a4:	b672      	cpsid	i
 80157a6:	f383 8811 	msr	BASEPRI, r3
 80157aa:	f3bf 8f6f 	isb	sy
 80157ae:	f3bf 8f4f 	dsb	sy
 80157b2:	b662      	cpsie	i
 80157b4:	61fb      	str	r3, [r7, #28]
}
 80157b6:	bf00      	nop
 80157b8:	bf00      	nop
 80157ba:	e7fd      	b.n	80157b8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80157bc:	f001 fc66 	bl	801708c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80157c0:	f3ef 8211 	mrs	r2, BASEPRI
 80157c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157c8:	b672      	cpsid	i
 80157ca:	f383 8811 	msr	BASEPRI, r3
 80157ce:	f3bf 8f6f 	isb	sy
 80157d2:	f3bf 8f4f 	dsb	sy
 80157d6:	b662      	cpsie	i
 80157d8:	61ba      	str	r2, [r7, #24]
 80157da:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80157dc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80157de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80157e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80157e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80157e8:	429a      	cmp	r2, r3
 80157ea:	d302      	bcc.n	80157f2 <xQueueGenericSendFromISR+0xd2>
 80157ec:	683b      	ldr	r3, [r7, #0]
 80157ee:	2b02      	cmp	r3, #2
 80157f0:	d12c      	bne.n	801584c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80157f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80157f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80157fc:	683a      	ldr	r2, [r7, #0]
 80157fe:	68b9      	ldr	r1, [r7, #8]
 8015800:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015802:	f000 f9e3 	bl	8015bcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015806:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801580e:	d112      	bne.n	8015836 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015814:	2b00      	cmp	r3, #0
 8015816:	d016      	beq.n	8015846 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801581a:	3324      	adds	r3, #36	@ 0x24
 801581c:	4618      	mov	r0, r3
 801581e:	f000 ff65 	bl	80166ec <xTaskRemoveFromEventList>
 8015822:	4603      	mov	r3, r0
 8015824:	2b00      	cmp	r3, #0
 8015826:	d00e      	beq.n	8015846 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d00b      	beq.n	8015846 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	2201      	movs	r2, #1
 8015832:	601a      	str	r2, [r3, #0]
 8015834:	e007      	b.n	8015846 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015836:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801583a:	3301      	adds	r3, #1
 801583c:	b2db      	uxtb	r3, r3
 801583e:	b25a      	sxtb	r2, r3
 8015840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8015846:	2301      	movs	r3, #1
 8015848:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801584a:	e001      	b.n	8015850 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801584c:	2300      	movs	r3, #0
 801584e:	637b      	str	r3, [r7, #52]	@ 0x34
 8015850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015852:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015854:	693b      	ldr	r3, [r7, #16]
 8015856:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801585a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801585c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801585e:	4618      	mov	r0, r3
 8015860:	3738      	adds	r7, #56	@ 0x38
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}
	...

08015868 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b08c      	sub	sp, #48	@ 0x30
 801586c:	af00      	add	r7, sp, #0
 801586e:	60f8      	str	r0, [r7, #12]
 8015870:	60b9      	str	r1, [r7, #8]
 8015872:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015874:	2300      	movs	r3, #0
 8015876:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801587c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801587e:	2b00      	cmp	r3, #0
 8015880:	d10d      	bne.n	801589e <xQueueReceive+0x36>
	__asm volatile
 8015882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015886:	b672      	cpsid	i
 8015888:	f383 8811 	msr	BASEPRI, r3
 801588c:	f3bf 8f6f 	isb	sy
 8015890:	f3bf 8f4f 	dsb	sy
 8015894:	b662      	cpsie	i
 8015896:	623b      	str	r3, [r7, #32]
}
 8015898:	bf00      	nop
 801589a:	bf00      	nop
 801589c:	e7fd      	b.n	801589a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d103      	bne.n	80158ac <xQueueReceive+0x44>
 80158a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d101      	bne.n	80158b0 <xQueueReceive+0x48>
 80158ac:	2301      	movs	r3, #1
 80158ae:	e000      	b.n	80158b2 <xQueueReceive+0x4a>
 80158b0:	2300      	movs	r3, #0
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d10d      	bne.n	80158d2 <xQueueReceive+0x6a>
	__asm volatile
 80158b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158ba:	b672      	cpsid	i
 80158bc:	f383 8811 	msr	BASEPRI, r3
 80158c0:	f3bf 8f6f 	isb	sy
 80158c4:	f3bf 8f4f 	dsb	sy
 80158c8:	b662      	cpsie	i
 80158ca:	61fb      	str	r3, [r7, #28]
}
 80158cc:	bf00      	nop
 80158ce:	bf00      	nop
 80158d0:	e7fd      	b.n	80158ce <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80158d2:	f001 f8d5 	bl	8016a80 <xTaskGetSchedulerState>
 80158d6:	4603      	mov	r3, r0
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d102      	bne.n	80158e2 <xQueueReceive+0x7a>
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d101      	bne.n	80158e6 <xQueueReceive+0x7e>
 80158e2:	2301      	movs	r3, #1
 80158e4:	e000      	b.n	80158e8 <xQueueReceive+0x80>
 80158e6:	2300      	movs	r3, #0
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d10d      	bne.n	8015908 <xQueueReceive+0xa0>
	__asm volatile
 80158ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158f0:	b672      	cpsid	i
 80158f2:	f383 8811 	msr	BASEPRI, r3
 80158f6:	f3bf 8f6f 	isb	sy
 80158fa:	f3bf 8f4f 	dsb	sy
 80158fe:	b662      	cpsie	i
 8015900:	61bb      	str	r3, [r7, #24]
}
 8015902:	bf00      	nop
 8015904:	bf00      	nop
 8015906:	e7fd      	b.n	8015904 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015908:	f001 fad8 	bl	8016ebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801590c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015910:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015914:	2b00      	cmp	r3, #0
 8015916:	d01f      	beq.n	8015958 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015918:	68b9      	ldr	r1, [r7, #8]
 801591a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801591c:	f000 f9c0 	bl	8015ca0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015922:	1e5a      	subs	r2, r3, #1
 8015924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015926:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801592a:	691b      	ldr	r3, [r3, #16]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d00f      	beq.n	8015950 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015932:	3310      	adds	r3, #16
 8015934:	4618      	mov	r0, r3
 8015936:	f000 fed9 	bl	80166ec <xTaskRemoveFromEventList>
 801593a:	4603      	mov	r3, r0
 801593c:	2b00      	cmp	r3, #0
 801593e:	d007      	beq.n	8015950 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015940:	4b3c      	ldr	r3, [pc, #240]	@ (8015a34 <xQueueReceive+0x1cc>)
 8015942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015946:	601a      	str	r2, [r3, #0]
 8015948:	f3bf 8f4f 	dsb	sy
 801594c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015950:	f001 faea 	bl	8016f28 <vPortExitCritical>
				return pdPASS;
 8015954:	2301      	movs	r3, #1
 8015956:	e069      	b.n	8015a2c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d103      	bne.n	8015966 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801595e:	f001 fae3 	bl	8016f28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015962:	2300      	movs	r3, #0
 8015964:	e062      	b.n	8015a2c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015968:	2b00      	cmp	r3, #0
 801596a:	d106      	bne.n	801597a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801596c:	f107 0310 	add.w	r3, r7, #16
 8015970:	4618      	mov	r0, r3
 8015972:	f000 ff21 	bl	80167b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015976:	2301      	movs	r3, #1
 8015978:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801597a:	f001 fad5 	bl	8016f28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801597e:	f000 fc7d 	bl	801627c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015982:	f001 fa9b 	bl	8016ebc <vPortEnterCritical>
 8015986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801598c:	b25b      	sxtb	r3, r3
 801598e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015992:	d103      	bne.n	801599c <xQueueReceive+0x134>
 8015994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015996:	2200      	movs	r2, #0
 8015998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801599e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80159a2:	b25b      	sxtb	r3, r3
 80159a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159a8:	d103      	bne.n	80159b2 <xQueueReceive+0x14a>
 80159aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159ac:	2200      	movs	r2, #0
 80159ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80159b2:	f001 fab9 	bl	8016f28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80159b6:	1d3a      	adds	r2, r7, #4
 80159b8:	f107 0310 	add.w	r3, r7, #16
 80159bc:	4611      	mov	r1, r2
 80159be:	4618      	mov	r0, r3
 80159c0:	f000 ff10 	bl	80167e4 <xTaskCheckForTimeOut>
 80159c4:	4603      	mov	r3, r0
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d123      	bne.n	8015a12 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80159ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80159cc:	f000 f9e0 	bl	8015d90 <prvIsQueueEmpty>
 80159d0:	4603      	mov	r3, r0
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d017      	beq.n	8015a06 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80159d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159d8:	3324      	adds	r3, #36	@ 0x24
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	4611      	mov	r1, r2
 80159de:	4618      	mov	r0, r3
 80159e0:	f000 fe5c 	bl	801669c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80159e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80159e6:	f000 f981 	bl	8015cec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80159ea:	f000 fc55 	bl	8016298 <xTaskResumeAll>
 80159ee:	4603      	mov	r3, r0
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d189      	bne.n	8015908 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80159f4:	4b0f      	ldr	r3, [pc, #60]	@ (8015a34 <xQueueReceive+0x1cc>)
 80159f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80159fa:	601a      	str	r2, [r3, #0]
 80159fc:	f3bf 8f4f 	dsb	sy
 8015a00:	f3bf 8f6f 	isb	sy
 8015a04:	e780      	b.n	8015908 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015a06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a08:	f000 f970 	bl	8015cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015a0c:	f000 fc44 	bl	8016298 <xTaskResumeAll>
 8015a10:	e77a      	b.n	8015908 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a14:	f000 f96a 	bl	8015cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015a18:	f000 fc3e 	bl	8016298 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015a1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a1e:	f000 f9b7 	bl	8015d90 <prvIsQueueEmpty>
 8015a22:	4603      	mov	r3, r0
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	f43f af6f 	beq.w	8015908 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015a2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	3730      	adds	r7, #48	@ 0x30
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	e000ed04 	.word	0xe000ed04

08015a38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b08e      	sub	sp, #56	@ 0x38
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	60f8      	str	r0, [r7, #12]
 8015a40:	60b9      	str	r1, [r7, #8]
 8015a42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d10d      	bne.n	8015a6a <xQueueReceiveFromISR+0x32>
	__asm volatile
 8015a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a52:	b672      	cpsid	i
 8015a54:	f383 8811 	msr	BASEPRI, r3
 8015a58:	f3bf 8f6f 	isb	sy
 8015a5c:	f3bf 8f4f 	dsb	sy
 8015a60:	b662      	cpsie	i
 8015a62:	623b      	str	r3, [r7, #32]
}
 8015a64:	bf00      	nop
 8015a66:	bf00      	nop
 8015a68:	e7fd      	b.n	8015a66 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015a6a:	68bb      	ldr	r3, [r7, #8]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d103      	bne.n	8015a78 <xQueueReceiveFromISR+0x40>
 8015a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d101      	bne.n	8015a7c <xQueueReceiveFromISR+0x44>
 8015a78:	2301      	movs	r3, #1
 8015a7a:	e000      	b.n	8015a7e <xQueueReceiveFromISR+0x46>
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d10d      	bne.n	8015a9e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8015a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a86:	b672      	cpsid	i
 8015a88:	f383 8811 	msr	BASEPRI, r3
 8015a8c:	f3bf 8f6f 	isb	sy
 8015a90:	f3bf 8f4f 	dsb	sy
 8015a94:	b662      	cpsie	i
 8015a96:	61fb      	str	r3, [r7, #28]
}
 8015a98:	bf00      	nop
 8015a9a:	bf00      	nop
 8015a9c:	e7fd      	b.n	8015a9a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015a9e:	f001 faf5 	bl	801708c <vPortValidateInterruptPriority>
	__asm volatile
 8015aa2:	f3ef 8211 	mrs	r2, BASEPRI
 8015aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015aaa:	b672      	cpsid	i
 8015aac:	f383 8811 	msr	BASEPRI, r3
 8015ab0:	f3bf 8f6f 	isb	sy
 8015ab4:	f3bf 8f4f 	dsb	sy
 8015ab8:	b662      	cpsie	i
 8015aba:	61ba      	str	r2, [r7, #24]
 8015abc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015abe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d02f      	beq.n	8015b2e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015ad8:	68b9      	ldr	r1, [r7, #8]
 8015ada:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015adc:	f000 f8e0 	bl	8015ca0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ae2:	1e5a      	subs	r2, r3, #1
 8015ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ae6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015ae8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015af0:	d112      	bne.n	8015b18 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015af4:	691b      	ldr	r3, [r3, #16]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d016      	beq.n	8015b28 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015afc:	3310      	adds	r3, #16
 8015afe:	4618      	mov	r0, r3
 8015b00:	f000 fdf4 	bl	80166ec <xTaskRemoveFromEventList>
 8015b04:	4603      	mov	r3, r0
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d00e      	beq.n	8015b28 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d00b      	beq.n	8015b28 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	2201      	movs	r2, #1
 8015b14:	601a      	str	r2, [r3, #0]
 8015b16:	e007      	b.n	8015b28 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b1c:	3301      	adds	r3, #1
 8015b1e:	b2db      	uxtb	r3, r3
 8015b20:	b25a      	sxtb	r2, r3
 8015b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8015b28:	2301      	movs	r3, #1
 8015b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8015b2c:	e001      	b.n	8015b32 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8015b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015b36:	693b      	ldr	r3, [r7, #16]
 8015b38:	f383 8811 	msr	BASEPRI, r3
}
 8015b3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015b40:	4618      	mov	r0, r3
 8015b42:	3738      	adds	r7, #56	@ 0x38
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd80      	pop	{r7, pc}

08015b48 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b084      	sub	sp, #16
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d10d      	bne.n	8015b72 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8015b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b5a:	b672      	cpsid	i
 8015b5c:	f383 8811 	msr	BASEPRI, r3
 8015b60:	f3bf 8f6f 	isb	sy
 8015b64:	f3bf 8f4f 	dsb	sy
 8015b68:	b662      	cpsie	i
 8015b6a:	60bb      	str	r3, [r7, #8]
}
 8015b6c:	bf00      	nop
 8015b6e:	bf00      	nop
 8015b70:	e7fd      	b.n	8015b6e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8015b72:	f001 f9a3 	bl	8016ebc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b7a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015b7c:	f001 f9d4 	bl	8016f28 <vPortExitCritical>

	return uxReturn;
 8015b80:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015b82:	4618      	mov	r0, r3
 8015b84:	3710      	adds	r7, #16
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}

08015b8a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8015b8a:	b480      	push	{r7}
 8015b8c:	b087      	sub	sp, #28
 8015b8e:	af00      	add	r7, sp, #0
 8015b90:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d10d      	bne.n	8015bb8 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8015b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ba0:	b672      	cpsid	i
 8015ba2:	f383 8811 	msr	BASEPRI, r3
 8015ba6:	f3bf 8f6f 	isb	sy
 8015baa:	f3bf 8f4f 	dsb	sy
 8015bae:	b662      	cpsie	i
 8015bb0:	60fb      	str	r3, [r7, #12]
}
 8015bb2:	bf00      	nop
 8015bb4:	bf00      	nop
 8015bb6:	e7fd      	b.n	8015bb4 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015bbc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8015bbe:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	371c      	adds	r7, #28
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bca:	4770      	bx	lr

08015bcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b086      	sub	sp, #24
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	60f8      	str	r0, [r7, #12]
 8015bd4:	60b9      	str	r1, [r7, #8]
 8015bd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015be0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d10d      	bne.n	8015c06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d14d      	bne.n	8015c8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	689b      	ldr	r3, [r3, #8]
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f000 ff60 	bl	8016abc <xTaskPriorityDisinherit>
 8015bfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	2200      	movs	r2, #0
 8015c02:	609a      	str	r2, [r3, #8]
 8015c04:	e043      	b.n	8015c8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d119      	bne.n	8015c40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	6858      	ldr	r0, [r3, #4]
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c14:	461a      	mov	r2, r3
 8015c16:	68b9      	ldr	r1, [r7, #8]
 8015c18:	f002 f827 	bl	8017c6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	685a      	ldr	r2, [r3, #4]
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c24:	441a      	add	r2, r3
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	685a      	ldr	r2, [r3, #4]
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	689b      	ldr	r3, [r3, #8]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d32b      	bcc.n	8015c8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	681a      	ldr	r2, [r3, #0]
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	605a      	str	r2, [r3, #4]
 8015c3e:	e026      	b.n	8015c8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	68d8      	ldr	r0, [r3, #12]
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c48:	461a      	mov	r2, r3
 8015c4a:	68b9      	ldr	r1, [r7, #8]
 8015c4c:	f002 f80d 	bl	8017c6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	68da      	ldr	r2, [r3, #12]
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c58:	425b      	negs	r3, r3
 8015c5a:	441a      	add	r2, r3
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	68da      	ldr	r2, [r3, #12]
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d207      	bcs.n	8015c7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	689a      	ldr	r2, [r3, #8]
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c74:	425b      	negs	r3, r3
 8015c76:	441a      	add	r2, r3
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	2b02      	cmp	r3, #2
 8015c80:	d105      	bne.n	8015c8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015c82:	693b      	ldr	r3, [r7, #16]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d002      	beq.n	8015c8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015c88:	693b      	ldr	r3, [r7, #16]
 8015c8a:	3b01      	subs	r3, #1
 8015c8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015c8e:	693b      	ldr	r3, [r7, #16]
 8015c90:	1c5a      	adds	r2, r3, #1
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015c96:	697b      	ldr	r3, [r7, #20]
}
 8015c98:	4618      	mov	r0, r3
 8015c9a:	3718      	adds	r7, #24
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	bd80      	pop	{r7, pc}

08015ca0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b082      	sub	sp, #8
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
 8015ca8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d018      	beq.n	8015ce4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	68da      	ldr	r2, [r3, #12]
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015cba:	441a      	add	r2, r3
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	68da      	ldr	r2, [r3, #12]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	689b      	ldr	r3, [r3, #8]
 8015cc8:	429a      	cmp	r2, r3
 8015cca:	d303      	bcc.n	8015cd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681a      	ldr	r2, [r3, #0]
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	68d9      	ldr	r1, [r3, #12]
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015cdc:	461a      	mov	r2, r3
 8015cde:	6838      	ldr	r0, [r7, #0]
 8015ce0:	f001 ffc3 	bl	8017c6a <memcpy>
	}
}
 8015ce4:	bf00      	nop
 8015ce6:	3708      	adds	r7, #8
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}

08015cec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b084      	sub	sp, #16
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015cf4:	f001 f8e2 	bl	8016ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015cfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015d00:	e011      	b.n	8015d26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d012      	beq.n	8015d30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	3324      	adds	r3, #36	@ 0x24
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f000 fcec 	bl	80166ec <xTaskRemoveFromEventList>
 8015d14:	4603      	mov	r3, r0
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d001      	beq.n	8015d1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015d1a:	f000 fdcb 	bl	80168b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015d1e:	7bfb      	ldrb	r3, [r7, #15]
 8015d20:	3b01      	subs	r3, #1
 8015d22:	b2db      	uxtb	r3, r3
 8015d24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	dce9      	bgt.n	8015d02 <prvUnlockQueue+0x16>
 8015d2e:	e000      	b.n	8015d32 <prvUnlockQueue+0x46>
					break;
 8015d30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	22ff      	movs	r2, #255	@ 0xff
 8015d36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015d3a:	f001 f8f5 	bl	8016f28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015d3e:	f001 f8bd 	bl	8016ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015d48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015d4a:	e011      	b.n	8015d70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	691b      	ldr	r3, [r3, #16]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d012      	beq.n	8015d7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	3310      	adds	r3, #16
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f000 fcc7 	bl	80166ec <xTaskRemoveFromEventList>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d001      	beq.n	8015d68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015d64:	f000 fda6 	bl	80168b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015d68:	7bbb      	ldrb	r3, [r7, #14]
 8015d6a:	3b01      	subs	r3, #1
 8015d6c:	b2db      	uxtb	r3, r3
 8015d6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015d70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	dce9      	bgt.n	8015d4c <prvUnlockQueue+0x60>
 8015d78:	e000      	b.n	8015d7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015d7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	22ff      	movs	r2, #255	@ 0xff
 8015d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015d84:	f001 f8d0 	bl	8016f28 <vPortExitCritical>
}
 8015d88:	bf00      	nop
 8015d8a:	3710      	adds	r7, #16
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b084      	sub	sp, #16
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015d98:	f001 f890 	bl	8016ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d102      	bne.n	8015daa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015da4:	2301      	movs	r3, #1
 8015da6:	60fb      	str	r3, [r7, #12]
 8015da8:	e001      	b.n	8015dae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015daa:	2300      	movs	r3, #0
 8015dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015dae:	f001 f8bb 	bl	8016f28 <vPortExitCritical>

	return xReturn;
 8015db2:	68fb      	ldr	r3, [r7, #12]
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	3710      	adds	r7, #16
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}

08015dbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b084      	sub	sp, #16
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015dc4:	f001 f87a 	bl	8016ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d102      	bne.n	8015dda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015dd4:	2301      	movs	r3, #1
 8015dd6:	60fb      	str	r3, [r7, #12]
 8015dd8:	e001      	b.n	8015dde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015dde:	f001 f8a3 	bl	8016f28 <vPortExitCritical>

	return xReturn;
 8015de2:	68fb      	ldr	r3, [r7, #12]
}
 8015de4:	4618      	mov	r0, r3
 8015de6:	3710      	adds	r7, #16
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}

08015dec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b08e      	sub	sp, #56	@ 0x38
 8015df0:	af04      	add	r7, sp, #16
 8015df2:	60f8      	str	r0, [r7, #12]
 8015df4:	60b9      	str	r1, [r7, #8]
 8015df6:	607a      	str	r2, [r7, #4]
 8015df8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d10d      	bne.n	8015e1c <xTaskCreateStatic+0x30>
	__asm volatile
 8015e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e04:	b672      	cpsid	i
 8015e06:	f383 8811 	msr	BASEPRI, r3
 8015e0a:	f3bf 8f6f 	isb	sy
 8015e0e:	f3bf 8f4f 	dsb	sy
 8015e12:	b662      	cpsie	i
 8015e14:	623b      	str	r3, [r7, #32]
}
 8015e16:	bf00      	nop
 8015e18:	bf00      	nop
 8015e1a:	e7fd      	b.n	8015e18 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8015e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d10d      	bne.n	8015e3e <xTaskCreateStatic+0x52>
	__asm volatile
 8015e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e26:	b672      	cpsid	i
 8015e28:	f383 8811 	msr	BASEPRI, r3
 8015e2c:	f3bf 8f6f 	isb	sy
 8015e30:	f3bf 8f4f 	dsb	sy
 8015e34:	b662      	cpsie	i
 8015e36:	61fb      	str	r3, [r7, #28]
}
 8015e38:	bf00      	nop
 8015e3a:	bf00      	nop
 8015e3c:	e7fd      	b.n	8015e3a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015e3e:	2358      	movs	r3, #88	@ 0x58
 8015e40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015e42:	693b      	ldr	r3, [r7, #16]
 8015e44:	2b58      	cmp	r3, #88	@ 0x58
 8015e46:	d00d      	beq.n	8015e64 <xTaskCreateStatic+0x78>
	__asm volatile
 8015e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e4c:	b672      	cpsid	i
 8015e4e:	f383 8811 	msr	BASEPRI, r3
 8015e52:	f3bf 8f6f 	isb	sy
 8015e56:	f3bf 8f4f 	dsb	sy
 8015e5a:	b662      	cpsie	i
 8015e5c:	61bb      	str	r3, [r7, #24]
}
 8015e5e:	bf00      	nop
 8015e60:	bf00      	nop
 8015e62:	e7fd      	b.n	8015e60 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015e64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d01e      	beq.n	8015eaa <xTaskCreateStatic+0xbe>
 8015e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d01b      	beq.n	8015eaa <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015e7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e7e:	2202      	movs	r2, #2
 8015e80:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015e84:	2300      	movs	r3, #0
 8015e86:	9303      	str	r3, [sp, #12]
 8015e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e8a:	9302      	str	r3, [sp, #8]
 8015e8c:	f107 0314 	add.w	r3, r7, #20
 8015e90:	9301      	str	r3, [sp, #4]
 8015e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e94:	9300      	str	r3, [sp, #0]
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	687a      	ldr	r2, [r7, #4]
 8015e9a:	68b9      	ldr	r1, [r7, #8]
 8015e9c:	68f8      	ldr	r0, [r7, #12]
 8015e9e:	f000 f850 	bl	8015f42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015ea2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015ea4:	f000 f8e2 	bl	801606c <prvAddNewTaskToReadyList>
 8015ea8:	e001      	b.n	8015eae <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8015eaa:	2300      	movs	r3, #0
 8015eac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015eae:	697b      	ldr	r3, [r7, #20]
	}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	3728      	adds	r7, #40	@ 0x28
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}

08015eb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b08c      	sub	sp, #48	@ 0x30
 8015ebc:	af04      	add	r7, sp, #16
 8015ebe:	60f8      	str	r0, [r7, #12]
 8015ec0:	60b9      	str	r1, [r7, #8]
 8015ec2:	603b      	str	r3, [r7, #0]
 8015ec4:	4613      	mov	r3, r2
 8015ec6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015ec8:	88fb      	ldrh	r3, [r7, #6]
 8015eca:	009b      	lsls	r3, r3, #2
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f001 f923 	bl	8017118 <pvPortMalloc>
 8015ed2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d00e      	beq.n	8015ef8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015eda:	2058      	movs	r0, #88	@ 0x58
 8015edc:	f001 f91c 	bl	8017118 <pvPortMalloc>
 8015ee0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015ee2:	69fb      	ldr	r3, [r7, #28]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d003      	beq.n	8015ef0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	697a      	ldr	r2, [r7, #20]
 8015eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8015eee:	e005      	b.n	8015efc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015ef0:	6978      	ldr	r0, [r7, #20]
 8015ef2:	f001 f9e3 	bl	80172bc <vPortFree>
 8015ef6:	e001      	b.n	8015efc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015ef8:	2300      	movs	r3, #0
 8015efa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015efc:	69fb      	ldr	r3, [r7, #28]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d017      	beq.n	8015f32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015f02:	69fb      	ldr	r3, [r7, #28]
 8015f04:	2200      	movs	r2, #0
 8015f06:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015f0a:	88fa      	ldrh	r2, [r7, #6]
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	9303      	str	r3, [sp, #12]
 8015f10:	69fb      	ldr	r3, [r7, #28]
 8015f12:	9302      	str	r3, [sp, #8]
 8015f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f16:	9301      	str	r3, [sp, #4]
 8015f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f1a:	9300      	str	r3, [sp, #0]
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	68b9      	ldr	r1, [r7, #8]
 8015f20:	68f8      	ldr	r0, [r7, #12]
 8015f22:	f000 f80e 	bl	8015f42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015f26:	69f8      	ldr	r0, [r7, #28]
 8015f28:	f000 f8a0 	bl	801606c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015f2c:	2301      	movs	r3, #1
 8015f2e:	61bb      	str	r3, [r7, #24]
 8015f30:	e002      	b.n	8015f38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015f32:	f04f 33ff 	mov.w	r3, #4294967295
 8015f36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015f38:	69bb      	ldr	r3, [r7, #24]
	}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3720      	adds	r7, #32
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}

08015f42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015f42:	b580      	push	{r7, lr}
 8015f44:	b088      	sub	sp, #32
 8015f46:	af00      	add	r7, sp, #0
 8015f48:	60f8      	str	r0, [r7, #12]
 8015f4a:	60b9      	str	r1, [r7, #8]
 8015f4c:	607a      	str	r2, [r7, #4]
 8015f4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	009b      	lsls	r3, r3, #2
 8015f58:	461a      	mov	r2, r3
 8015f5a:	21a5      	movs	r1, #165	@ 0xa5
 8015f5c:	f001 fdc4 	bl	8017ae8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015f64:	6879      	ldr	r1, [r7, #4]
 8015f66:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015f6a:	440b      	add	r3, r1
 8015f6c:	009b      	lsls	r3, r3, #2
 8015f6e:	4413      	add	r3, r2
 8015f70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015f72:	69bb      	ldr	r3, [r7, #24]
 8015f74:	f023 0307 	bic.w	r3, r3, #7
 8015f78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015f7a:	69bb      	ldr	r3, [r7, #24]
 8015f7c:	f003 0307 	and.w	r3, r3, #7
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d00d      	beq.n	8015fa0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8015f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f88:	b672      	cpsid	i
 8015f8a:	f383 8811 	msr	BASEPRI, r3
 8015f8e:	f3bf 8f6f 	isb	sy
 8015f92:	f3bf 8f4f 	dsb	sy
 8015f96:	b662      	cpsie	i
 8015f98:	617b      	str	r3, [r7, #20]
}
 8015f9a:	bf00      	nop
 8015f9c:	bf00      	nop
 8015f9e:	e7fd      	b.n	8015f9c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015fa0:	68bb      	ldr	r3, [r7, #8]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d01f      	beq.n	8015fe6 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	61fb      	str	r3, [r7, #28]
 8015faa:	e012      	b.n	8015fd2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015fac:	68ba      	ldr	r2, [r7, #8]
 8015fae:	69fb      	ldr	r3, [r7, #28]
 8015fb0:	4413      	add	r3, r2
 8015fb2:	7819      	ldrb	r1, [r3, #0]
 8015fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015fb6:	69fb      	ldr	r3, [r7, #28]
 8015fb8:	4413      	add	r3, r2
 8015fba:	3334      	adds	r3, #52	@ 0x34
 8015fbc:	460a      	mov	r2, r1
 8015fbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015fc0:	68ba      	ldr	r2, [r7, #8]
 8015fc2:	69fb      	ldr	r3, [r7, #28]
 8015fc4:	4413      	add	r3, r2
 8015fc6:	781b      	ldrb	r3, [r3, #0]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d006      	beq.n	8015fda <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015fcc:	69fb      	ldr	r3, [r7, #28]
 8015fce:	3301      	adds	r3, #1
 8015fd0:	61fb      	str	r3, [r7, #28]
 8015fd2:	69fb      	ldr	r3, [r7, #28]
 8015fd4:	2b0f      	cmp	r3, #15
 8015fd6:	d9e9      	bls.n	8015fac <prvInitialiseNewTask+0x6a>
 8015fd8:	e000      	b.n	8015fdc <prvInitialiseNewTask+0x9a>
			{
				break;
 8015fda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fde:	2200      	movs	r2, #0
 8015fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015fe4:	e003      	b.n	8015fee <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fe8:	2200      	movs	r2, #0
 8015fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ff0:	2b06      	cmp	r3, #6
 8015ff2:	d901      	bls.n	8015ff8 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015ff4:	2306      	movs	r3, #6
 8015ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016000:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016002:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016006:	2200      	movs	r2, #0
 8016008:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801600c:	3304      	adds	r3, #4
 801600e:	4618      	mov	r0, r3
 8016010:	f7ff f892 	bl	8015138 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016016:	3318      	adds	r3, #24
 8016018:	4618      	mov	r0, r3
 801601a:	f7ff f88d 	bl	8015138 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801601e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016022:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016026:	f1c3 0207 	rsb	r2, r3, #7
 801602a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801602c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016032:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8016034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016036:	2200      	movs	r2, #0
 8016038:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801603c:	2200      	movs	r2, #0
 801603e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016042:	2200      	movs	r2, #0
 8016044:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016048:	683a      	ldr	r2, [r7, #0]
 801604a:	68f9      	ldr	r1, [r7, #12]
 801604c:	69b8      	ldr	r0, [r7, #24]
 801604e:	f000 fe27 	bl	8016ca0 <pxPortInitialiseStack>
 8016052:	4602      	mov	r2, r0
 8016054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016056:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801605a:	2b00      	cmp	r3, #0
 801605c:	d002      	beq.n	8016064 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801605e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016062:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016064:	bf00      	nop
 8016066:	3720      	adds	r7, #32
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}

0801606c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b082      	sub	sp, #8
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016074:	f000 ff22 	bl	8016ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016078:	4b2a      	ldr	r3, [pc, #168]	@ (8016124 <prvAddNewTaskToReadyList+0xb8>)
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	3301      	adds	r3, #1
 801607e:	4a29      	ldr	r2, [pc, #164]	@ (8016124 <prvAddNewTaskToReadyList+0xb8>)
 8016080:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016082:	4b29      	ldr	r3, [pc, #164]	@ (8016128 <prvAddNewTaskToReadyList+0xbc>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d109      	bne.n	801609e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801608a:	4a27      	ldr	r2, [pc, #156]	@ (8016128 <prvAddNewTaskToReadyList+0xbc>)
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016090:	4b24      	ldr	r3, [pc, #144]	@ (8016124 <prvAddNewTaskToReadyList+0xb8>)
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	2b01      	cmp	r3, #1
 8016096:	d110      	bne.n	80160ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016098:	f000 fc32 	bl	8016900 <prvInitialiseTaskLists>
 801609c:	e00d      	b.n	80160ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801609e:	4b23      	ldr	r3, [pc, #140]	@ (801612c <prvAddNewTaskToReadyList+0xc0>)
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d109      	bne.n	80160ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80160a6:	4b20      	ldr	r3, [pc, #128]	@ (8016128 <prvAddNewTaskToReadyList+0xbc>)
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160b0:	429a      	cmp	r2, r3
 80160b2:	d802      	bhi.n	80160ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80160b4:	4a1c      	ldr	r2, [pc, #112]	@ (8016128 <prvAddNewTaskToReadyList+0xbc>)
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80160ba:	4b1d      	ldr	r3, [pc, #116]	@ (8016130 <prvAddNewTaskToReadyList+0xc4>)
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	3301      	adds	r3, #1
 80160c0:	4a1b      	ldr	r2, [pc, #108]	@ (8016130 <prvAddNewTaskToReadyList+0xc4>)
 80160c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160c8:	2201      	movs	r2, #1
 80160ca:	409a      	lsls	r2, r3
 80160cc:	4b19      	ldr	r3, [pc, #100]	@ (8016134 <prvAddNewTaskToReadyList+0xc8>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	4313      	orrs	r3, r2
 80160d2:	4a18      	ldr	r2, [pc, #96]	@ (8016134 <prvAddNewTaskToReadyList+0xc8>)
 80160d4:	6013      	str	r3, [r2, #0]
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160da:	4613      	mov	r3, r2
 80160dc:	009b      	lsls	r3, r3, #2
 80160de:	4413      	add	r3, r2
 80160e0:	009b      	lsls	r3, r3, #2
 80160e2:	4a15      	ldr	r2, [pc, #84]	@ (8016138 <prvAddNewTaskToReadyList+0xcc>)
 80160e4:	441a      	add	r2, r3
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	3304      	adds	r3, #4
 80160ea:	4619      	mov	r1, r3
 80160ec:	4610      	mov	r0, r2
 80160ee:	f7ff f830 	bl	8015152 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80160f2:	f000 ff19 	bl	8016f28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80160f6:	4b0d      	ldr	r3, [pc, #52]	@ (801612c <prvAddNewTaskToReadyList+0xc0>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d00e      	beq.n	801611c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80160fe:	4b0a      	ldr	r3, [pc, #40]	@ (8016128 <prvAddNewTaskToReadyList+0xbc>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016108:	429a      	cmp	r2, r3
 801610a:	d207      	bcs.n	801611c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801610c:	4b0b      	ldr	r3, [pc, #44]	@ (801613c <prvAddNewTaskToReadyList+0xd0>)
 801610e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016112:	601a      	str	r2, [r3, #0]
 8016114:	f3bf 8f4f 	dsb	sy
 8016118:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801611c:	bf00      	nop
 801611e:	3708      	adds	r7, #8
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}
 8016124:	20002c38 	.word	0x20002c38
 8016128:	20002b38 	.word	0x20002b38
 801612c:	20002c44 	.word	0x20002c44
 8016130:	20002c54 	.word	0x20002c54
 8016134:	20002c40 	.word	0x20002c40
 8016138:	20002b3c 	.word	0x20002b3c
 801613c:	e000ed04 	.word	0xe000ed04

08016140 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016148:	2300      	movs	r3, #0
 801614a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d01a      	beq.n	8016188 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016152:	4b15      	ldr	r3, [pc, #84]	@ (80161a8 <vTaskDelay+0x68>)
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d00d      	beq.n	8016176 <vTaskDelay+0x36>
	__asm volatile
 801615a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801615e:	b672      	cpsid	i
 8016160:	f383 8811 	msr	BASEPRI, r3
 8016164:	f3bf 8f6f 	isb	sy
 8016168:	f3bf 8f4f 	dsb	sy
 801616c:	b662      	cpsie	i
 801616e:	60bb      	str	r3, [r7, #8]
}
 8016170:	bf00      	nop
 8016172:	bf00      	nop
 8016174:	e7fd      	b.n	8016172 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8016176:	f000 f881 	bl	801627c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801617a:	2100      	movs	r1, #0
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f000 fd29 	bl	8016bd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016182:	f000 f889 	bl	8016298 <xTaskResumeAll>
 8016186:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d107      	bne.n	801619e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 801618e:	4b07      	ldr	r3, [pc, #28]	@ (80161ac <vTaskDelay+0x6c>)
 8016190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016194:	601a      	str	r2, [r3, #0]
 8016196:	f3bf 8f4f 	dsb	sy
 801619a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801619e:	bf00      	nop
 80161a0:	3710      	adds	r7, #16
 80161a2:	46bd      	mov	sp, r7
 80161a4:	bd80      	pop	{r7, pc}
 80161a6:	bf00      	nop
 80161a8:	20002c60 	.word	0x20002c60
 80161ac:	e000ed04 	.word	0xe000ed04

080161b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b08a      	sub	sp, #40	@ 0x28
 80161b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80161b6:	2300      	movs	r3, #0
 80161b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80161ba:	2300      	movs	r3, #0
 80161bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80161be:	463a      	mov	r2, r7
 80161c0:	1d39      	adds	r1, r7, #4
 80161c2:	f107 0308 	add.w	r3, r7, #8
 80161c6:	4618      	mov	r0, r3
 80161c8:	f7eb ff58 	bl	800207c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80161cc:	6839      	ldr	r1, [r7, #0]
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	68ba      	ldr	r2, [r7, #8]
 80161d2:	9202      	str	r2, [sp, #8]
 80161d4:	9301      	str	r3, [sp, #4]
 80161d6:	2300      	movs	r3, #0
 80161d8:	9300      	str	r3, [sp, #0]
 80161da:	2300      	movs	r3, #0
 80161dc:	460a      	mov	r2, r1
 80161de:	4921      	ldr	r1, [pc, #132]	@ (8016264 <vTaskStartScheduler+0xb4>)
 80161e0:	4821      	ldr	r0, [pc, #132]	@ (8016268 <vTaskStartScheduler+0xb8>)
 80161e2:	f7ff fe03 	bl	8015dec <xTaskCreateStatic>
 80161e6:	4603      	mov	r3, r0
 80161e8:	4a20      	ldr	r2, [pc, #128]	@ (801626c <vTaskStartScheduler+0xbc>)
 80161ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80161ec:	4b1f      	ldr	r3, [pc, #124]	@ (801626c <vTaskStartScheduler+0xbc>)
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d002      	beq.n	80161fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80161f4:	2301      	movs	r3, #1
 80161f6:	617b      	str	r3, [r7, #20]
 80161f8:	e001      	b.n	80161fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80161fa:	2300      	movs	r3, #0
 80161fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80161fe:	697b      	ldr	r3, [r7, #20]
 8016200:	2b01      	cmp	r3, #1
 8016202:	d118      	bne.n	8016236 <vTaskStartScheduler+0x86>
	__asm volatile
 8016204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016208:	b672      	cpsid	i
 801620a:	f383 8811 	msr	BASEPRI, r3
 801620e:	f3bf 8f6f 	isb	sy
 8016212:	f3bf 8f4f 	dsb	sy
 8016216:	b662      	cpsie	i
 8016218:	613b      	str	r3, [r7, #16]
}
 801621a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801621c:	4b14      	ldr	r3, [pc, #80]	@ (8016270 <vTaskStartScheduler+0xc0>)
 801621e:	f04f 32ff 	mov.w	r2, #4294967295
 8016222:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016224:	4b13      	ldr	r3, [pc, #76]	@ (8016274 <vTaskStartScheduler+0xc4>)
 8016226:	2201      	movs	r2, #1
 8016228:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801622a:	4b13      	ldr	r3, [pc, #76]	@ (8016278 <vTaskStartScheduler+0xc8>)
 801622c:	2200      	movs	r2, #0
 801622e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016230:	f000 fdc6 	bl	8016dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016234:	e011      	b.n	801625a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016236:	697b      	ldr	r3, [r7, #20]
 8016238:	f1b3 3fff 	cmp.w	r3, #4294967295
 801623c:	d10d      	bne.n	801625a <vTaskStartScheduler+0xaa>
	__asm volatile
 801623e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016242:	b672      	cpsid	i
 8016244:	f383 8811 	msr	BASEPRI, r3
 8016248:	f3bf 8f6f 	isb	sy
 801624c:	f3bf 8f4f 	dsb	sy
 8016250:	b662      	cpsie	i
 8016252:	60fb      	str	r3, [r7, #12]
}
 8016254:	bf00      	nop
 8016256:	bf00      	nop
 8016258:	e7fd      	b.n	8016256 <vTaskStartScheduler+0xa6>
}
 801625a:	bf00      	nop
 801625c:	3718      	adds	r7, #24
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}
 8016262:	bf00      	nop
 8016264:	0801c120 	.word	0x0801c120
 8016268:	080168cd 	.word	0x080168cd
 801626c:	20002c5c 	.word	0x20002c5c
 8016270:	20002c58 	.word	0x20002c58
 8016274:	20002c44 	.word	0x20002c44
 8016278:	20002c3c 	.word	0x20002c3c

0801627c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801627c:	b480      	push	{r7}
 801627e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016280:	4b04      	ldr	r3, [pc, #16]	@ (8016294 <vTaskSuspendAll+0x18>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	3301      	adds	r3, #1
 8016286:	4a03      	ldr	r2, [pc, #12]	@ (8016294 <vTaskSuspendAll+0x18>)
 8016288:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801628a:	bf00      	nop
 801628c:	46bd      	mov	sp, r7
 801628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016292:	4770      	bx	lr
 8016294:	20002c60 	.word	0x20002c60

08016298 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b084      	sub	sp, #16
 801629c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801629e:	2300      	movs	r3, #0
 80162a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80162a2:	2300      	movs	r3, #0
 80162a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80162a6:	4b43      	ldr	r3, [pc, #268]	@ (80163b4 <xTaskResumeAll+0x11c>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d10d      	bne.n	80162ca <xTaskResumeAll+0x32>
	__asm volatile
 80162ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162b2:	b672      	cpsid	i
 80162b4:	f383 8811 	msr	BASEPRI, r3
 80162b8:	f3bf 8f6f 	isb	sy
 80162bc:	f3bf 8f4f 	dsb	sy
 80162c0:	b662      	cpsie	i
 80162c2:	603b      	str	r3, [r7, #0]
}
 80162c4:	bf00      	nop
 80162c6:	bf00      	nop
 80162c8:	e7fd      	b.n	80162c6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80162ca:	f000 fdf7 	bl	8016ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80162ce:	4b39      	ldr	r3, [pc, #228]	@ (80163b4 <xTaskResumeAll+0x11c>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	3b01      	subs	r3, #1
 80162d4:	4a37      	ldr	r2, [pc, #220]	@ (80163b4 <xTaskResumeAll+0x11c>)
 80162d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80162d8:	4b36      	ldr	r3, [pc, #216]	@ (80163b4 <xTaskResumeAll+0x11c>)
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d161      	bne.n	80163a4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80162e0:	4b35      	ldr	r3, [pc, #212]	@ (80163b8 <xTaskResumeAll+0x120>)
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d05d      	beq.n	80163a4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80162e8:	e02e      	b.n	8016348 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162ea:	4b34      	ldr	r3, [pc, #208]	@ (80163bc <xTaskResumeAll+0x124>)
 80162ec:	68db      	ldr	r3, [r3, #12]
 80162ee:	68db      	ldr	r3, [r3, #12]
 80162f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	3318      	adds	r3, #24
 80162f6:	4618      	mov	r0, r3
 80162f8:	f7fe ff88 	bl	801520c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	3304      	adds	r3, #4
 8016300:	4618      	mov	r0, r3
 8016302:	f7fe ff83 	bl	801520c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801630a:	2201      	movs	r2, #1
 801630c:	409a      	lsls	r2, r3
 801630e:	4b2c      	ldr	r3, [pc, #176]	@ (80163c0 <xTaskResumeAll+0x128>)
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	4313      	orrs	r3, r2
 8016314:	4a2a      	ldr	r2, [pc, #168]	@ (80163c0 <xTaskResumeAll+0x128>)
 8016316:	6013      	str	r3, [r2, #0]
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801631c:	4613      	mov	r3, r2
 801631e:	009b      	lsls	r3, r3, #2
 8016320:	4413      	add	r3, r2
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	4a27      	ldr	r2, [pc, #156]	@ (80163c4 <xTaskResumeAll+0x12c>)
 8016326:	441a      	add	r2, r3
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	3304      	adds	r3, #4
 801632c:	4619      	mov	r1, r3
 801632e:	4610      	mov	r0, r2
 8016330:	f7fe ff0f 	bl	8015152 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016338:	4b23      	ldr	r3, [pc, #140]	@ (80163c8 <xTaskResumeAll+0x130>)
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801633e:	429a      	cmp	r2, r3
 8016340:	d302      	bcc.n	8016348 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8016342:	4b22      	ldr	r3, [pc, #136]	@ (80163cc <xTaskResumeAll+0x134>)
 8016344:	2201      	movs	r2, #1
 8016346:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016348:	4b1c      	ldr	r3, [pc, #112]	@ (80163bc <xTaskResumeAll+0x124>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d1cc      	bne.n	80162ea <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d001      	beq.n	801635a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016356:	f000 fb73 	bl	8016a40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801635a:	4b1d      	ldr	r3, [pc, #116]	@ (80163d0 <xTaskResumeAll+0x138>)
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d010      	beq.n	8016388 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016366:	f000 f859 	bl	801641c <xTaskIncrementTick>
 801636a:	4603      	mov	r3, r0
 801636c:	2b00      	cmp	r3, #0
 801636e:	d002      	beq.n	8016376 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8016370:	4b16      	ldr	r3, [pc, #88]	@ (80163cc <xTaskResumeAll+0x134>)
 8016372:	2201      	movs	r2, #1
 8016374:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	3b01      	subs	r3, #1
 801637a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d1f1      	bne.n	8016366 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8016382:	4b13      	ldr	r3, [pc, #76]	@ (80163d0 <xTaskResumeAll+0x138>)
 8016384:	2200      	movs	r2, #0
 8016386:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016388:	4b10      	ldr	r3, [pc, #64]	@ (80163cc <xTaskResumeAll+0x134>)
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d009      	beq.n	80163a4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016390:	2301      	movs	r3, #1
 8016392:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016394:	4b0f      	ldr	r3, [pc, #60]	@ (80163d4 <xTaskResumeAll+0x13c>)
 8016396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801639a:	601a      	str	r2, [r3, #0]
 801639c:	f3bf 8f4f 	dsb	sy
 80163a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80163a4:	f000 fdc0 	bl	8016f28 <vPortExitCritical>

	return xAlreadyYielded;
 80163a8:	68bb      	ldr	r3, [r7, #8]
}
 80163aa:	4618      	mov	r0, r3
 80163ac:	3710      	adds	r7, #16
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}
 80163b2:	bf00      	nop
 80163b4:	20002c60 	.word	0x20002c60
 80163b8:	20002c38 	.word	0x20002c38
 80163bc:	20002bf8 	.word	0x20002bf8
 80163c0:	20002c40 	.word	0x20002c40
 80163c4:	20002b3c 	.word	0x20002b3c
 80163c8:	20002b38 	.word	0x20002b38
 80163cc:	20002c4c 	.word	0x20002c4c
 80163d0:	20002c48 	.word	0x20002c48
 80163d4:	e000ed04 	.word	0xe000ed04

080163d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80163d8:	b480      	push	{r7}
 80163da:	b083      	sub	sp, #12
 80163dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80163de:	4b05      	ldr	r3, [pc, #20]	@ (80163f4 <xTaskGetTickCount+0x1c>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80163e4:	687b      	ldr	r3, [r7, #4]
}
 80163e6:	4618      	mov	r0, r3
 80163e8:	370c      	adds	r7, #12
 80163ea:	46bd      	mov	sp, r7
 80163ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f0:	4770      	bx	lr
 80163f2:	bf00      	nop
 80163f4:	20002c3c 	.word	0x20002c3c

080163f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b082      	sub	sp, #8
 80163fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80163fe:	f000 fe45 	bl	801708c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016402:	2300      	movs	r3, #0
 8016404:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016406:	4b04      	ldr	r3, [pc, #16]	@ (8016418 <xTaskGetTickCountFromISR+0x20>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801640c:	683b      	ldr	r3, [r7, #0]
}
 801640e:	4618      	mov	r0, r3
 8016410:	3708      	adds	r7, #8
 8016412:	46bd      	mov	sp, r7
 8016414:	bd80      	pop	{r7, pc}
 8016416:	bf00      	nop
 8016418:	20002c3c 	.word	0x20002c3c

0801641c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b086      	sub	sp, #24
 8016420:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016422:	2300      	movs	r3, #0
 8016424:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016426:	4b50      	ldr	r3, [pc, #320]	@ (8016568 <xTaskIncrementTick+0x14c>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	2b00      	cmp	r3, #0
 801642c:	f040 808b 	bne.w	8016546 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016430:	4b4e      	ldr	r3, [pc, #312]	@ (801656c <xTaskIncrementTick+0x150>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	3301      	adds	r3, #1
 8016436:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016438:	4a4c      	ldr	r2, [pc, #304]	@ (801656c <xTaskIncrementTick+0x150>)
 801643a:	693b      	ldr	r3, [r7, #16]
 801643c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d123      	bne.n	801648c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8016444:	4b4a      	ldr	r3, [pc, #296]	@ (8016570 <xTaskIncrementTick+0x154>)
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d00d      	beq.n	801646a <xTaskIncrementTick+0x4e>
	__asm volatile
 801644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016452:	b672      	cpsid	i
 8016454:	f383 8811 	msr	BASEPRI, r3
 8016458:	f3bf 8f6f 	isb	sy
 801645c:	f3bf 8f4f 	dsb	sy
 8016460:	b662      	cpsie	i
 8016462:	603b      	str	r3, [r7, #0]
}
 8016464:	bf00      	nop
 8016466:	bf00      	nop
 8016468:	e7fd      	b.n	8016466 <xTaskIncrementTick+0x4a>
 801646a:	4b41      	ldr	r3, [pc, #260]	@ (8016570 <xTaskIncrementTick+0x154>)
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	60fb      	str	r3, [r7, #12]
 8016470:	4b40      	ldr	r3, [pc, #256]	@ (8016574 <xTaskIncrementTick+0x158>)
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	4a3e      	ldr	r2, [pc, #248]	@ (8016570 <xTaskIncrementTick+0x154>)
 8016476:	6013      	str	r3, [r2, #0]
 8016478:	4a3e      	ldr	r2, [pc, #248]	@ (8016574 <xTaskIncrementTick+0x158>)
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	6013      	str	r3, [r2, #0]
 801647e:	4b3e      	ldr	r3, [pc, #248]	@ (8016578 <xTaskIncrementTick+0x15c>)
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	3301      	adds	r3, #1
 8016484:	4a3c      	ldr	r2, [pc, #240]	@ (8016578 <xTaskIncrementTick+0x15c>)
 8016486:	6013      	str	r3, [r2, #0]
 8016488:	f000 fada 	bl	8016a40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801648c:	4b3b      	ldr	r3, [pc, #236]	@ (801657c <xTaskIncrementTick+0x160>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	693a      	ldr	r2, [r7, #16]
 8016492:	429a      	cmp	r2, r3
 8016494:	d348      	bcc.n	8016528 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016496:	4b36      	ldr	r3, [pc, #216]	@ (8016570 <xTaskIncrementTick+0x154>)
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d104      	bne.n	80164aa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80164a0:	4b36      	ldr	r3, [pc, #216]	@ (801657c <xTaskIncrementTick+0x160>)
 80164a2:	f04f 32ff 	mov.w	r2, #4294967295
 80164a6:	601a      	str	r2, [r3, #0]
					break;
 80164a8:	e03e      	b.n	8016528 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164aa:	4b31      	ldr	r3, [pc, #196]	@ (8016570 <xTaskIncrementTick+0x154>)
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	68db      	ldr	r3, [r3, #12]
 80164b0:	68db      	ldr	r3, [r3, #12]
 80164b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	685b      	ldr	r3, [r3, #4]
 80164b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80164ba:	693a      	ldr	r2, [r7, #16]
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	429a      	cmp	r2, r3
 80164c0:	d203      	bcs.n	80164ca <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80164c2:	4a2e      	ldr	r2, [pc, #184]	@ (801657c <xTaskIncrementTick+0x160>)
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80164c8:	e02e      	b.n	8016528 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80164ca:	68bb      	ldr	r3, [r7, #8]
 80164cc:	3304      	adds	r3, #4
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7fe fe9c 	bl	801520c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d004      	beq.n	80164e6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80164dc:	68bb      	ldr	r3, [r7, #8]
 80164de:	3318      	adds	r3, #24
 80164e0:	4618      	mov	r0, r3
 80164e2:	f7fe fe93 	bl	801520c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80164e6:	68bb      	ldr	r3, [r7, #8]
 80164e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164ea:	2201      	movs	r2, #1
 80164ec:	409a      	lsls	r2, r3
 80164ee:	4b24      	ldr	r3, [pc, #144]	@ (8016580 <xTaskIncrementTick+0x164>)
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	4313      	orrs	r3, r2
 80164f4:	4a22      	ldr	r2, [pc, #136]	@ (8016580 <xTaskIncrementTick+0x164>)
 80164f6:	6013      	str	r3, [r2, #0]
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164fc:	4613      	mov	r3, r2
 80164fe:	009b      	lsls	r3, r3, #2
 8016500:	4413      	add	r3, r2
 8016502:	009b      	lsls	r3, r3, #2
 8016504:	4a1f      	ldr	r2, [pc, #124]	@ (8016584 <xTaskIncrementTick+0x168>)
 8016506:	441a      	add	r2, r3
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	3304      	adds	r3, #4
 801650c:	4619      	mov	r1, r3
 801650e:	4610      	mov	r0, r2
 8016510:	f7fe fe1f 	bl	8015152 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016514:	68bb      	ldr	r3, [r7, #8]
 8016516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016518:	4b1b      	ldr	r3, [pc, #108]	@ (8016588 <xTaskIncrementTick+0x16c>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801651e:	429a      	cmp	r2, r3
 8016520:	d3b9      	bcc.n	8016496 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8016522:	2301      	movs	r3, #1
 8016524:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016526:	e7b6      	b.n	8016496 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016528:	4b17      	ldr	r3, [pc, #92]	@ (8016588 <xTaskIncrementTick+0x16c>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801652e:	4915      	ldr	r1, [pc, #84]	@ (8016584 <xTaskIncrementTick+0x168>)
 8016530:	4613      	mov	r3, r2
 8016532:	009b      	lsls	r3, r3, #2
 8016534:	4413      	add	r3, r2
 8016536:	009b      	lsls	r3, r3, #2
 8016538:	440b      	add	r3, r1
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	2b01      	cmp	r3, #1
 801653e:	d907      	bls.n	8016550 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8016540:	2301      	movs	r3, #1
 8016542:	617b      	str	r3, [r7, #20]
 8016544:	e004      	b.n	8016550 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016546:	4b11      	ldr	r3, [pc, #68]	@ (801658c <xTaskIncrementTick+0x170>)
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	3301      	adds	r3, #1
 801654c:	4a0f      	ldr	r2, [pc, #60]	@ (801658c <xTaskIncrementTick+0x170>)
 801654e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016550:	4b0f      	ldr	r3, [pc, #60]	@ (8016590 <xTaskIncrementTick+0x174>)
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d001      	beq.n	801655c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8016558:	2301      	movs	r3, #1
 801655a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801655c:	697b      	ldr	r3, [r7, #20]
}
 801655e:	4618      	mov	r0, r3
 8016560:	3718      	adds	r7, #24
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}
 8016566:	bf00      	nop
 8016568:	20002c60 	.word	0x20002c60
 801656c:	20002c3c 	.word	0x20002c3c
 8016570:	20002bf0 	.word	0x20002bf0
 8016574:	20002bf4 	.word	0x20002bf4
 8016578:	20002c50 	.word	0x20002c50
 801657c:	20002c58 	.word	0x20002c58
 8016580:	20002c40 	.word	0x20002c40
 8016584:	20002b3c 	.word	0x20002b3c
 8016588:	20002b38 	.word	0x20002b38
 801658c:	20002c48 	.word	0x20002c48
 8016590:	20002c4c 	.word	0x20002c4c

08016594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b088      	sub	sp, #32
 8016598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801659a:	4b3b      	ldr	r3, [pc, #236]	@ (8016688 <vTaskSwitchContext+0xf4>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d003      	beq.n	80165aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80165a2:	4b3a      	ldr	r3, [pc, #232]	@ (801668c <vTaskSwitchContext+0xf8>)
 80165a4:	2201      	movs	r2, #1
 80165a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80165a8:	e069      	b.n	801667e <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80165aa:	4b38      	ldr	r3, [pc, #224]	@ (801668c <vTaskSwitchContext+0xf8>)
 80165ac:	2200      	movs	r2, #0
 80165ae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80165b0:	4b37      	ldr	r3, [pc, #220]	@ (8016690 <vTaskSwitchContext+0xfc>)
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165b6:	61fb      	str	r3, [r7, #28]
 80165b8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80165bc:	61bb      	str	r3, [r7, #24]
 80165be:	69fb      	ldr	r3, [r7, #28]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	69ba      	ldr	r2, [r7, #24]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	d111      	bne.n	80165ec <vTaskSwitchContext+0x58>
 80165c8:	69fb      	ldr	r3, [r7, #28]
 80165ca:	3304      	adds	r3, #4
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	69ba      	ldr	r2, [r7, #24]
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d10b      	bne.n	80165ec <vTaskSwitchContext+0x58>
 80165d4:	69fb      	ldr	r3, [r7, #28]
 80165d6:	3308      	adds	r3, #8
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	69ba      	ldr	r2, [r7, #24]
 80165dc:	429a      	cmp	r2, r3
 80165de:	d105      	bne.n	80165ec <vTaskSwitchContext+0x58>
 80165e0:	69fb      	ldr	r3, [r7, #28]
 80165e2:	330c      	adds	r3, #12
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	69ba      	ldr	r2, [r7, #24]
 80165e8:	429a      	cmp	r2, r3
 80165ea:	d008      	beq.n	80165fe <vTaskSwitchContext+0x6a>
 80165ec:	4b28      	ldr	r3, [pc, #160]	@ (8016690 <vTaskSwitchContext+0xfc>)
 80165ee:	681a      	ldr	r2, [r3, #0]
 80165f0:	4b27      	ldr	r3, [pc, #156]	@ (8016690 <vTaskSwitchContext+0xfc>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	3334      	adds	r3, #52	@ 0x34
 80165f6:	4619      	mov	r1, r3
 80165f8:	4610      	mov	r0, r2
 80165fa:	f7eb fd2c 	bl	8002056 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165fe:	4b25      	ldr	r3, [pc, #148]	@ (8016694 <vTaskSwitchContext+0x100>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	fab3 f383 	clz	r3, r3
 801660a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801660c:	7afb      	ldrb	r3, [r7, #11]
 801660e:	f1c3 031f 	rsb	r3, r3, #31
 8016612:	617b      	str	r3, [r7, #20]
 8016614:	4920      	ldr	r1, [pc, #128]	@ (8016698 <vTaskSwitchContext+0x104>)
 8016616:	697a      	ldr	r2, [r7, #20]
 8016618:	4613      	mov	r3, r2
 801661a:	009b      	lsls	r3, r3, #2
 801661c:	4413      	add	r3, r2
 801661e:	009b      	lsls	r3, r3, #2
 8016620:	440b      	add	r3, r1
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d10d      	bne.n	8016644 <vTaskSwitchContext+0xb0>
	__asm volatile
 8016628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801662c:	b672      	cpsid	i
 801662e:	f383 8811 	msr	BASEPRI, r3
 8016632:	f3bf 8f6f 	isb	sy
 8016636:	f3bf 8f4f 	dsb	sy
 801663a:	b662      	cpsie	i
 801663c:	607b      	str	r3, [r7, #4]
}
 801663e:	bf00      	nop
 8016640:	bf00      	nop
 8016642:	e7fd      	b.n	8016640 <vTaskSwitchContext+0xac>
 8016644:	697a      	ldr	r2, [r7, #20]
 8016646:	4613      	mov	r3, r2
 8016648:	009b      	lsls	r3, r3, #2
 801664a:	4413      	add	r3, r2
 801664c:	009b      	lsls	r3, r3, #2
 801664e:	4a12      	ldr	r2, [pc, #72]	@ (8016698 <vTaskSwitchContext+0x104>)
 8016650:	4413      	add	r3, r2
 8016652:	613b      	str	r3, [r7, #16]
 8016654:	693b      	ldr	r3, [r7, #16]
 8016656:	685b      	ldr	r3, [r3, #4]
 8016658:	685a      	ldr	r2, [r3, #4]
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	605a      	str	r2, [r3, #4]
 801665e:	693b      	ldr	r3, [r7, #16]
 8016660:	685a      	ldr	r2, [r3, #4]
 8016662:	693b      	ldr	r3, [r7, #16]
 8016664:	3308      	adds	r3, #8
 8016666:	429a      	cmp	r2, r3
 8016668:	d104      	bne.n	8016674 <vTaskSwitchContext+0xe0>
 801666a:	693b      	ldr	r3, [r7, #16]
 801666c:	685b      	ldr	r3, [r3, #4]
 801666e:	685a      	ldr	r2, [r3, #4]
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	605a      	str	r2, [r3, #4]
 8016674:	693b      	ldr	r3, [r7, #16]
 8016676:	685b      	ldr	r3, [r3, #4]
 8016678:	68db      	ldr	r3, [r3, #12]
 801667a:	4a05      	ldr	r2, [pc, #20]	@ (8016690 <vTaskSwitchContext+0xfc>)
 801667c:	6013      	str	r3, [r2, #0]
}
 801667e:	bf00      	nop
 8016680:	3720      	adds	r7, #32
 8016682:	46bd      	mov	sp, r7
 8016684:	bd80      	pop	{r7, pc}
 8016686:	bf00      	nop
 8016688:	20002c60 	.word	0x20002c60
 801668c:	20002c4c 	.word	0x20002c4c
 8016690:	20002b38 	.word	0x20002b38
 8016694:	20002c40 	.word	0x20002c40
 8016698:	20002b3c 	.word	0x20002b3c

0801669c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b084      	sub	sp, #16
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d10d      	bne.n	80166c8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80166ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166b0:	b672      	cpsid	i
 80166b2:	f383 8811 	msr	BASEPRI, r3
 80166b6:	f3bf 8f6f 	isb	sy
 80166ba:	f3bf 8f4f 	dsb	sy
 80166be:	b662      	cpsie	i
 80166c0:	60fb      	str	r3, [r7, #12]
}
 80166c2:	bf00      	nop
 80166c4:	bf00      	nop
 80166c6:	e7fd      	b.n	80166c4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80166c8:	4b07      	ldr	r3, [pc, #28]	@ (80166e8 <vTaskPlaceOnEventList+0x4c>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	3318      	adds	r3, #24
 80166ce:	4619      	mov	r1, r3
 80166d0:	6878      	ldr	r0, [r7, #4]
 80166d2:	f7fe fd62 	bl	801519a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80166d6:	2101      	movs	r1, #1
 80166d8:	6838      	ldr	r0, [r7, #0]
 80166da:	f000 fa7b 	bl	8016bd4 <prvAddCurrentTaskToDelayedList>
}
 80166de:	bf00      	nop
 80166e0:	3710      	adds	r7, #16
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}
 80166e6:	bf00      	nop
 80166e8:	20002b38 	.word	0x20002b38

080166ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b086      	sub	sp, #24
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	68db      	ldr	r3, [r3, #12]
 80166f8:	68db      	ldr	r3, [r3, #12]
 80166fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80166fc:	693b      	ldr	r3, [r7, #16]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d10d      	bne.n	801671e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8016702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016706:	b672      	cpsid	i
 8016708:	f383 8811 	msr	BASEPRI, r3
 801670c:	f3bf 8f6f 	isb	sy
 8016710:	f3bf 8f4f 	dsb	sy
 8016714:	b662      	cpsie	i
 8016716:	60fb      	str	r3, [r7, #12]
}
 8016718:	bf00      	nop
 801671a:	bf00      	nop
 801671c:	e7fd      	b.n	801671a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801671e:	693b      	ldr	r3, [r7, #16]
 8016720:	3318      	adds	r3, #24
 8016722:	4618      	mov	r0, r3
 8016724:	f7fe fd72 	bl	801520c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016728:	4b1d      	ldr	r3, [pc, #116]	@ (80167a0 <xTaskRemoveFromEventList+0xb4>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d11c      	bne.n	801676a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016730:	693b      	ldr	r3, [r7, #16]
 8016732:	3304      	adds	r3, #4
 8016734:	4618      	mov	r0, r3
 8016736:	f7fe fd69 	bl	801520c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801673a:	693b      	ldr	r3, [r7, #16]
 801673c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801673e:	2201      	movs	r2, #1
 8016740:	409a      	lsls	r2, r3
 8016742:	4b18      	ldr	r3, [pc, #96]	@ (80167a4 <xTaskRemoveFromEventList+0xb8>)
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	4313      	orrs	r3, r2
 8016748:	4a16      	ldr	r2, [pc, #88]	@ (80167a4 <xTaskRemoveFromEventList+0xb8>)
 801674a:	6013      	str	r3, [r2, #0]
 801674c:	693b      	ldr	r3, [r7, #16]
 801674e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016750:	4613      	mov	r3, r2
 8016752:	009b      	lsls	r3, r3, #2
 8016754:	4413      	add	r3, r2
 8016756:	009b      	lsls	r3, r3, #2
 8016758:	4a13      	ldr	r2, [pc, #76]	@ (80167a8 <xTaskRemoveFromEventList+0xbc>)
 801675a:	441a      	add	r2, r3
 801675c:	693b      	ldr	r3, [r7, #16]
 801675e:	3304      	adds	r3, #4
 8016760:	4619      	mov	r1, r3
 8016762:	4610      	mov	r0, r2
 8016764:	f7fe fcf5 	bl	8015152 <vListInsertEnd>
 8016768:	e005      	b.n	8016776 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801676a:	693b      	ldr	r3, [r7, #16]
 801676c:	3318      	adds	r3, #24
 801676e:	4619      	mov	r1, r3
 8016770:	480e      	ldr	r0, [pc, #56]	@ (80167ac <xTaskRemoveFromEventList+0xc0>)
 8016772:	f7fe fcee 	bl	8015152 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016776:	693b      	ldr	r3, [r7, #16]
 8016778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801677a:	4b0d      	ldr	r3, [pc, #52]	@ (80167b0 <xTaskRemoveFromEventList+0xc4>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016780:	429a      	cmp	r2, r3
 8016782:	d905      	bls.n	8016790 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016784:	2301      	movs	r3, #1
 8016786:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016788:	4b0a      	ldr	r3, [pc, #40]	@ (80167b4 <xTaskRemoveFromEventList+0xc8>)
 801678a:	2201      	movs	r2, #1
 801678c:	601a      	str	r2, [r3, #0]
 801678e:	e001      	b.n	8016794 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8016790:	2300      	movs	r3, #0
 8016792:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016794:	697b      	ldr	r3, [r7, #20]
}
 8016796:	4618      	mov	r0, r3
 8016798:	3718      	adds	r7, #24
 801679a:	46bd      	mov	sp, r7
 801679c:	bd80      	pop	{r7, pc}
 801679e:	bf00      	nop
 80167a0:	20002c60 	.word	0x20002c60
 80167a4:	20002c40 	.word	0x20002c40
 80167a8:	20002b3c 	.word	0x20002b3c
 80167ac:	20002bf8 	.word	0x20002bf8
 80167b0:	20002b38 	.word	0x20002b38
 80167b4:	20002c4c 	.word	0x20002c4c

080167b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80167b8:	b480      	push	{r7}
 80167ba:	b083      	sub	sp, #12
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80167c0:	4b06      	ldr	r3, [pc, #24]	@ (80167dc <vTaskInternalSetTimeOutState+0x24>)
 80167c2:	681a      	ldr	r2, [r3, #0]
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80167c8:	4b05      	ldr	r3, [pc, #20]	@ (80167e0 <vTaskInternalSetTimeOutState+0x28>)
 80167ca:	681a      	ldr	r2, [r3, #0]
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	605a      	str	r2, [r3, #4]
}
 80167d0:	bf00      	nop
 80167d2:	370c      	adds	r7, #12
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr
 80167dc:	20002c50 	.word	0x20002c50
 80167e0:	20002c3c 	.word	0x20002c3c

080167e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b088      	sub	sp, #32
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
 80167ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d10d      	bne.n	8016810 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80167f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167f8:	b672      	cpsid	i
 80167fa:	f383 8811 	msr	BASEPRI, r3
 80167fe:	f3bf 8f6f 	isb	sy
 8016802:	f3bf 8f4f 	dsb	sy
 8016806:	b662      	cpsie	i
 8016808:	613b      	str	r3, [r7, #16]
}
 801680a:	bf00      	nop
 801680c:	bf00      	nop
 801680e:	e7fd      	b.n	801680c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8016810:	683b      	ldr	r3, [r7, #0]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d10d      	bne.n	8016832 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8016816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801681a:	b672      	cpsid	i
 801681c:	f383 8811 	msr	BASEPRI, r3
 8016820:	f3bf 8f6f 	isb	sy
 8016824:	f3bf 8f4f 	dsb	sy
 8016828:	b662      	cpsie	i
 801682a:	60fb      	str	r3, [r7, #12]
}
 801682c:	bf00      	nop
 801682e:	bf00      	nop
 8016830:	e7fd      	b.n	801682e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8016832:	f000 fb43 	bl	8016ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016836:	4b1d      	ldr	r3, [pc, #116]	@ (80168ac <xTaskCheckForTimeOut+0xc8>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	685b      	ldr	r3, [r3, #4]
 8016840:	69ba      	ldr	r2, [r7, #24]
 8016842:	1ad3      	subs	r3, r2, r3
 8016844:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801684e:	d102      	bne.n	8016856 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016850:	2300      	movs	r3, #0
 8016852:	61fb      	str	r3, [r7, #28]
 8016854:	e023      	b.n	801689e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	681a      	ldr	r2, [r3, #0]
 801685a:	4b15      	ldr	r3, [pc, #84]	@ (80168b0 <xTaskCheckForTimeOut+0xcc>)
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	429a      	cmp	r2, r3
 8016860:	d007      	beq.n	8016872 <xTaskCheckForTimeOut+0x8e>
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	685b      	ldr	r3, [r3, #4]
 8016866:	69ba      	ldr	r2, [r7, #24]
 8016868:	429a      	cmp	r2, r3
 801686a:	d302      	bcc.n	8016872 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801686c:	2301      	movs	r3, #1
 801686e:	61fb      	str	r3, [r7, #28]
 8016870:	e015      	b.n	801689e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	697a      	ldr	r2, [r7, #20]
 8016878:	429a      	cmp	r2, r3
 801687a:	d20b      	bcs.n	8016894 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	681a      	ldr	r2, [r3, #0]
 8016880:	697b      	ldr	r3, [r7, #20]
 8016882:	1ad2      	subs	r2, r2, r3
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016888:	6878      	ldr	r0, [r7, #4]
 801688a:	f7ff ff95 	bl	80167b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801688e:	2300      	movs	r3, #0
 8016890:	61fb      	str	r3, [r7, #28]
 8016892:	e004      	b.n	801689e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8016894:	683b      	ldr	r3, [r7, #0]
 8016896:	2200      	movs	r2, #0
 8016898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801689a:	2301      	movs	r3, #1
 801689c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801689e:	f000 fb43 	bl	8016f28 <vPortExitCritical>

	return xReturn;
 80168a2:	69fb      	ldr	r3, [r7, #28]
}
 80168a4:	4618      	mov	r0, r3
 80168a6:	3720      	adds	r7, #32
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}
 80168ac:	20002c3c 	.word	0x20002c3c
 80168b0:	20002c50 	.word	0x20002c50

080168b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80168b4:	b480      	push	{r7}
 80168b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80168b8:	4b03      	ldr	r3, [pc, #12]	@ (80168c8 <vTaskMissedYield+0x14>)
 80168ba:	2201      	movs	r2, #1
 80168bc:	601a      	str	r2, [r3, #0]
}
 80168be:	bf00      	nop
 80168c0:	46bd      	mov	sp, r7
 80168c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c6:	4770      	bx	lr
 80168c8:	20002c4c 	.word	0x20002c4c

080168cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b082      	sub	sp, #8
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80168d4:	f000 f854 	bl	8016980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80168d8:	4b07      	ldr	r3, [pc, #28]	@ (80168f8 <prvIdleTask+0x2c>)
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	2b01      	cmp	r3, #1
 80168de:	d907      	bls.n	80168f0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80168e0:	4b06      	ldr	r3, [pc, #24]	@ (80168fc <prvIdleTask+0x30>)
 80168e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80168e6:	601a      	str	r2, [r3, #0]
 80168e8:	f3bf 8f4f 	dsb	sy
 80168ec:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80168f0:	f7eb fbaa 	bl	8002048 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80168f4:	e7ee      	b.n	80168d4 <prvIdleTask+0x8>
 80168f6:	bf00      	nop
 80168f8:	20002b3c 	.word	0x20002b3c
 80168fc:	e000ed04 	.word	0xe000ed04

08016900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b082      	sub	sp, #8
 8016904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016906:	2300      	movs	r3, #0
 8016908:	607b      	str	r3, [r7, #4]
 801690a:	e00c      	b.n	8016926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801690c:	687a      	ldr	r2, [r7, #4]
 801690e:	4613      	mov	r3, r2
 8016910:	009b      	lsls	r3, r3, #2
 8016912:	4413      	add	r3, r2
 8016914:	009b      	lsls	r3, r3, #2
 8016916:	4a12      	ldr	r2, [pc, #72]	@ (8016960 <prvInitialiseTaskLists+0x60>)
 8016918:	4413      	add	r3, r2
 801691a:	4618      	mov	r0, r3
 801691c:	f7fe fbec 	bl	80150f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	3301      	adds	r3, #1
 8016924:	607b      	str	r3, [r7, #4]
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2b06      	cmp	r3, #6
 801692a:	d9ef      	bls.n	801690c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801692c:	480d      	ldr	r0, [pc, #52]	@ (8016964 <prvInitialiseTaskLists+0x64>)
 801692e:	f7fe fbe3 	bl	80150f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016932:	480d      	ldr	r0, [pc, #52]	@ (8016968 <prvInitialiseTaskLists+0x68>)
 8016934:	f7fe fbe0 	bl	80150f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016938:	480c      	ldr	r0, [pc, #48]	@ (801696c <prvInitialiseTaskLists+0x6c>)
 801693a:	f7fe fbdd 	bl	80150f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801693e:	480c      	ldr	r0, [pc, #48]	@ (8016970 <prvInitialiseTaskLists+0x70>)
 8016940:	f7fe fbda 	bl	80150f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016944:	480b      	ldr	r0, [pc, #44]	@ (8016974 <prvInitialiseTaskLists+0x74>)
 8016946:	f7fe fbd7 	bl	80150f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801694a:	4b0b      	ldr	r3, [pc, #44]	@ (8016978 <prvInitialiseTaskLists+0x78>)
 801694c:	4a05      	ldr	r2, [pc, #20]	@ (8016964 <prvInitialiseTaskLists+0x64>)
 801694e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016950:	4b0a      	ldr	r3, [pc, #40]	@ (801697c <prvInitialiseTaskLists+0x7c>)
 8016952:	4a05      	ldr	r2, [pc, #20]	@ (8016968 <prvInitialiseTaskLists+0x68>)
 8016954:	601a      	str	r2, [r3, #0]
}
 8016956:	bf00      	nop
 8016958:	3708      	adds	r7, #8
 801695a:	46bd      	mov	sp, r7
 801695c:	bd80      	pop	{r7, pc}
 801695e:	bf00      	nop
 8016960:	20002b3c 	.word	0x20002b3c
 8016964:	20002bc8 	.word	0x20002bc8
 8016968:	20002bdc 	.word	0x20002bdc
 801696c:	20002bf8 	.word	0x20002bf8
 8016970:	20002c0c 	.word	0x20002c0c
 8016974:	20002c24 	.word	0x20002c24
 8016978:	20002bf0 	.word	0x20002bf0
 801697c:	20002bf4 	.word	0x20002bf4

08016980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016986:	e019      	b.n	80169bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016988:	f000 fa98 	bl	8016ebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801698c:	4b10      	ldr	r3, [pc, #64]	@ (80169d0 <prvCheckTasksWaitingTermination+0x50>)
 801698e:	68db      	ldr	r3, [r3, #12]
 8016990:	68db      	ldr	r3, [r3, #12]
 8016992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	3304      	adds	r3, #4
 8016998:	4618      	mov	r0, r3
 801699a:	f7fe fc37 	bl	801520c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801699e:	4b0d      	ldr	r3, [pc, #52]	@ (80169d4 <prvCheckTasksWaitingTermination+0x54>)
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	3b01      	subs	r3, #1
 80169a4:	4a0b      	ldr	r2, [pc, #44]	@ (80169d4 <prvCheckTasksWaitingTermination+0x54>)
 80169a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80169a8:	4b0b      	ldr	r3, [pc, #44]	@ (80169d8 <prvCheckTasksWaitingTermination+0x58>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	3b01      	subs	r3, #1
 80169ae:	4a0a      	ldr	r2, [pc, #40]	@ (80169d8 <prvCheckTasksWaitingTermination+0x58>)
 80169b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80169b2:	f000 fab9 	bl	8016f28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	f000 f810 	bl	80169dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80169bc:	4b06      	ldr	r3, [pc, #24]	@ (80169d8 <prvCheckTasksWaitingTermination+0x58>)
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d1e1      	bne.n	8016988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80169c4:	bf00      	nop
 80169c6:	bf00      	nop
 80169c8:	3708      	adds	r7, #8
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	20002c0c 	.word	0x20002c0c
 80169d4:	20002c38 	.word	0x20002c38
 80169d8:	20002c20 	.word	0x20002c20

080169dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b084      	sub	sp, #16
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d108      	bne.n	8016a00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80169f2:	4618      	mov	r0, r3
 80169f4:	f000 fc62 	bl	80172bc <vPortFree>
				vPortFree( pxTCB );
 80169f8:	6878      	ldr	r0, [r7, #4]
 80169fa:	f000 fc5f 	bl	80172bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80169fe:	e01b      	b.n	8016a38 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016a06:	2b01      	cmp	r3, #1
 8016a08:	d103      	bne.n	8016a12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f000 fc56 	bl	80172bc <vPortFree>
	}
 8016a10:	e012      	b.n	8016a38 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016a18:	2b02      	cmp	r3, #2
 8016a1a:	d00d      	beq.n	8016a38 <prvDeleteTCB+0x5c>
	__asm volatile
 8016a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a20:	b672      	cpsid	i
 8016a22:	f383 8811 	msr	BASEPRI, r3
 8016a26:	f3bf 8f6f 	isb	sy
 8016a2a:	f3bf 8f4f 	dsb	sy
 8016a2e:	b662      	cpsie	i
 8016a30:	60fb      	str	r3, [r7, #12]
}
 8016a32:	bf00      	nop
 8016a34:	bf00      	nop
 8016a36:	e7fd      	b.n	8016a34 <prvDeleteTCB+0x58>
	}
 8016a38:	bf00      	nop
 8016a3a:	3710      	adds	r7, #16
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}

08016a40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016a40:	b480      	push	{r7}
 8016a42:	b083      	sub	sp, #12
 8016a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016a46:	4b0c      	ldr	r3, [pc, #48]	@ (8016a78 <prvResetNextTaskUnblockTime+0x38>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d104      	bne.n	8016a5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016a50:	4b0a      	ldr	r3, [pc, #40]	@ (8016a7c <prvResetNextTaskUnblockTime+0x3c>)
 8016a52:	f04f 32ff 	mov.w	r2, #4294967295
 8016a56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016a58:	e008      	b.n	8016a6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a5a:	4b07      	ldr	r3, [pc, #28]	@ (8016a78 <prvResetNextTaskUnblockTime+0x38>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	68db      	ldr	r3, [r3, #12]
 8016a60:	68db      	ldr	r3, [r3, #12]
 8016a62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	685b      	ldr	r3, [r3, #4]
 8016a68:	4a04      	ldr	r2, [pc, #16]	@ (8016a7c <prvResetNextTaskUnblockTime+0x3c>)
 8016a6a:	6013      	str	r3, [r2, #0]
}
 8016a6c:	bf00      	nop
 8016a6e:	370c      	adds	r7, #12
 8016a70:	46bd      	mov	sp, r7
 8016a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a76:	4770      	bx	lr
 8016a78:	20002bf0 	.word	0x20002bf0
 8016a7c:	20002c58 	.word	0x20002c58

08016a80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016a80:	b480      	push	{r7}
 8016a82:	b083      	sub	sp, #12
 8016a84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016a86:	4b0b      	ldr	r3, [pc, #44]	@ (8016ab4 <xTaskGetSchedulerState+0x34>)
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d102      	bne.n	8016a94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016a8e:	2301      	movs	r3, #1
 8016a90:	607b      	str	r3, [r7, #4]
 8016a92:	e008      	b.n	8016aa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a94:	4b08      	ldr	r3, [pc, #32]	@ (8016ab8 <xTaskGetSchedulerState+0x38>)
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d102      	bne.n	8016aa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016a9c:	2302      	movs	r3, #2
 8016a9e:	607b      	str	r3, [r7, #4]
 8016aa0:	e001      	b.n	8016aa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016aa6:	687b      	ldr	r3, [r7, #4]
	}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	370c      	adds	r7, #12
 8016aac:	46bd      	mov	sp, r7
 8016aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab2:	4770      	bx	lr
 8016ab4:	20002c44 	.word	0x20002c44
 8016ab8:	20002c60 	.word	0x20002c60

08016abc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b086      	sub	sp, #24
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016ac8:	2300      	movs	r3, #0
 8016aca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d074      	beq.n	8016bbc <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8016bc8 <xTaskPriorityDisinherit+0x10c>)
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	693a      	ldr	r2, [r7, #16]
 8016ad8:	429a      	cmp	r2, r3
 8016ada:	d00d      	beq.n	8016af8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8016adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ae0:	b672      	cpsid	i
 8016ae2:	f383 8811 	msr	BASEPRI, r3
 8016ae6:	f3bf 8f6f 	isb	sy
 8016aea:	f3bf 8f4f 	dsb	sy
 8016aee:	b662      	cpsie	i
 8016af0:	60fb      	str	r3, [r7, #12]
}
 8016af2:	bf00      	nop
 8016af4:	bf00      	nop
 8016af6:	e7fd      	b.n	8016af4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d10d      	bne.n	8016b1c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8016b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b04:	b672      	cpsid	i
 8016b06:	f383 8811 	msr	BASEPRI, r3
 8016b0a:	f3bf 8f6f 	isb	sy
 8016b0e:	f3bf 8f4f 	dsb	sy
 8016b12:	b662      	cpsie	i
 8016b14:	60bb      	str	r3, [r7, #8]
}
 8016b16:	bf00      	nop
 8016b18:	bf00      	nop
 8016b1a:	e7fd      	b.n	8016b18 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8016b1c:	693b      	ldr	r3, [r7, #16]
 8016b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016b20:	1e5a      	subs	r2, r3, #1
 8016b22:	693b      	ldr	r3, [r7, #16]
 8016b24:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016b26:	693b      	ldr	r3, [r7, #16]
 8016b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b2a:	693b      	ldr	r3, [r7, #16]
 8016b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b2e:	429a      	cmp	r2, r3
 8016b30:	d044      	beq.n	8016bbc <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d140      	bne.n	8016bbc <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016b3a:	693b      	ldr	r3, [r7, #16]
 8016b3c:	3304      	adds	r3, #4
 8016b3e:	4618      	mov	r0, r3
 8016b40:	f7fe fb64 	bl	801520c <uxListRemove>
 8016b44:	4603      	mov	r3, r0
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d115      	bne.n	8016b76 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016b4a:	693b      	ldr	r3, [r7, #16]
 8016b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b4e:	491f      	ldr	r1, [pc, #124]	@ (8016bcc <xTaskPriorityDisinherit+0x110>)
 8016b50:	4613      	mov	r3, r2
 8016b52:	009b      	lsls	r3, r3, #2
 8016b54:	4413      	add	r3, r2
 8016b56:	009b      	lsls	r3, r3, #2
 8016b58:	440b      	add	r3, r1
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d10a      	bne.n	8016b76 <xTaskPriorityDisinherit+0xba>
 8016b60:	693b      	ldr	r3, [r7, #16]
 8016b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b64:	2201      	movs	r2, #1
 8016b66:	fa02 f303 	lsl.w	r3, r2, r3
 8016b6a:	43da      	mvns	r2, r3
 8016b6c:	4b18      	ldr	r3, [pc, #96]	@ (8016bd0 <xTaskPriorityDisinherit+0x114>)
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	4013      	ands	r3, r2
 8016b72:	4a17      	ldr	r2, [pc, #92]	@ (8016bd0 <xTaskPriorityDisinherit+0x114>)
 8016b74:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016b76:	693b      	ldr	r3, [r7, #16]
 8016b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b7e:	693b      	ldr	r3, [r7, #16]
 8016b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b82:	f1c3 0207 	rsb	r2, r3, #7
 8016b86:	693b      	ldr	r3, [r7, #16]
 8016b88:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b8e:	2201      	movs	r2, #1
 8016b90:	409a      	lsls	r2, r3
 8016b92:	4b0f      	ldr	r3, [pc, #60]	@ (8016bd0 <xTaskPriorityDisinherit+0x114>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	4313      	orrs	r3, r2
 8016b98:	4a0d      	ldr	r2, [pc, #52]	@ (8016bd0 <xTaskPriorityDisinherit+0x114>)
 8016b9a:	6013      	str	r3, [r2, #0]
 8016b9c:	693b      	ldr	r3, [r7, #16]
 8016b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016ba0:	4613      	mov	r3, r2
 8016ba2:	009b      	lsls	r3, r3, #2
 8016ba4:	4413      	add	r3, r2
 8016ba6:	009b      	lsls	r3, r3, #2
 8016ba8:	4a08      	ldr	r2, [pc, #32]	@ (8016bcc <xTaskPriorityDisinherit+0x110>)
 8016baa:	441a      	add	r2, r3
 8016bac:	693b      	ldr	r3, [r7, #16]
 8016bae:	3304      	adds	r3, #4
 8016bb0:	4619      	mov	r1, r3
 8016bb2:	4610      	mov	r0, r2
 8016bb4:	f7fe facd 	bl	8015152 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016bb8:	2301      	movs	r3, #1
 8016bba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016bbc:	697b      	ldr	r3, [r7, #20]
	}
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	3718      	adds	r7, #24
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}
 8016bc6:	bf00      	nop
 8016bc8:	20002b38 	.word	0x20002b38
 8016bcc:	20002b3c 	.word	0x20002b3c
 8016bd0:	20002c40 	.word	0x20002c40

08016bd4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b084      	sub	sp, #16
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
 8016bdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016bde:	4b29      	ldr	r3, [pc, #164]	@ (8016c84 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016be4:	4b28      	ldr	r3, [pc, #160]	@ (8016c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	3304      	adds	r3, #4
 8016bea:	4618      	mov	r0, r3
 8016bec:	f7fe fb0e 	bl	801520c <uxListRemove>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d10b      	bne.n	8016c0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016bf6:	4b24      	ldr	r3, [pc, #144]	@ (8016c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016bfc:	2201      	movs	r2, #1
 8016bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8016c02:	43da      	mvns	r2, r3
 8016c04:	4b21      	ldr	r3, [pc, #132]	@ (8016c8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	4013      	ands	r3, r2
 8016c0a:	4a20      	ldr	r2, [pc, #128]	@ (8016c8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8016c0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c14:	d10a      	bne.n	8016c2c <prvAddCurrentTaskToDelayedList+0x58>
 8016c16:	683b      	ldr	r3, [r7, #0]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d007      	beq.n	8016c2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8016c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	3304      	adds	r3, #4
 8016c22:	4619      	mov	r1, r3
 8016c24:	481a      	ldr	r0, [pc, #104]	@ (8016c90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016c26:	f7fe fa94 	bl	8015152 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016c2a:	e026      	b.n	8016c7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016c2c:	68fa      	ldr	r2, [r7, #12]
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	4413      	add	r3, r2
 8016c32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016c34:	4b14      	ldr	r3, [pc, #80]	@ (8016c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	68ba      	ldr	r2, [r7, #8]
 8016c3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016c3c:	68ba      	ldr	r2, [r7, #8]
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	429a      	cmp	r2, r3
 8016c42:	d209      	bcs.n	8016c58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016c44:	4b13      	ldr	r3, [pc, #76]	@ (8016c94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016c46:	681a      	ldr	r2, [r3, #0]
 8016c48:	4b0f      	ldr	r3, [pc, #60]	@ (8016c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	3304      	adds	r3, #4
 8016c4e:	4619      	mov	r1, r3
 8016c50:	4610      	mov	r0, r2
 8016c52:	f7fe faa2 	bl	801519a <vListInsert>
}
 8016c56:	e010      	b.n	8016c7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016c58:	4b0f      	ldr	r3, [pc, #60]	@ (8016c98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016c5a:	681a      	ldr	r2, [r3, #0]
 8016c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8016c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	3304      	adds	r3, #4
 8016c62:	4619      	mov	r1, r3
 8016c64:	4610      	mov	r0, r2
 8016c66:	f7fe fa98 	bl	801519a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8016c9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	68ba      	ldr	r2, [r7, #8]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	d202      	bcs.n	8016c7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016c74:	4a09      	ldr	r2, [pc, #36]	@ (8016c9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016c76:	68bb      	ldr	r3, [r7, #8]
 8016c78:	6013      	str	r3, [r2, #0]
}
 8016c7a:	bf00      	nop
 8016c7c:	3710      	adds	r7, #16
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	bd80      	pop	{r7, pc}
 8016c82:	bf00      	nop
 8016c84:	20002c3c 	.word	0x20002c3c
 8016c88:	20002b38 	.word	0x20002b38
 8016c8c:	20002c40 	.word	0x20002c40
 8016c90:	20002c24 	.word	0x20002c24
 8016c94:	20002bf4 	.word	0x20002bf4
 8016c98:	20002bf0 	.word	0x20002bf0
 8016c9c:	20002c58 	.word	0x20002c58

08016ca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b085      	sub	sp, #20
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	60f8      	str	r0, [r7, #12]
 8016ca8:	60b9      	str	r1, [r7, #8]
 8016caa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	3b04      	subs	r3, #4
 8016cb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	3b04      	subs	r3, #4
 8016cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016cc0:	68bb      	ldr	r3, [r7, #8]
 8016cc2:	f023 0201 	bic.w	r2, r3, #1
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	3b04      	subs	r3, #4
 8016cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8016d04 <pxPortInitialiseStack+0x64>)
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	3b14      	subs	r3, #20
 8016cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016cdc:	687a      	ldr	r2, [r7, #4]
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	3b04      	subs	r3, #4
 8016ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	f06f 0202 	mvn.w	r2, #2
 8016cee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	3b20      	subs	r3, #32
 8016cf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016cf6:	68fb      	ldr	r3, [r7, #12]
}
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	3714      	adds	r7, #20
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d02:	4770      	bx	lr
 8016d04:	08016d09 	.word	0x08016d09

08016d08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016d08:	b480      	push	{r7}
 8016d0a:	b085      	sub	sp, #20
 8016d0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016d0e:	2300      	movs	r3, #0
 8016d10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016d12:	4b15      	ldr	r3, [pc, #84]	@ (8016d68 <prvTaskExitError+0x60>)
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d1a:	d00d      	beq.n	8016d38 <prvTaskExitError+0x30>
	__asm volatile
 8016d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d20:	b672      	cpsid	i
 8016d22:	f383 8811 	msr	BASEPRI, r3
 8016d26:	f3bf 8f6f 	isb	sy
 8016d2a:	f3bf 8f4f 	dsb	sy
 8016d2e:	b662      	cpsie	i
 8016d30:	60fb      	str	r3, [r7, #12]
}
 8016d32:	bf00      	nop
 8016d34:	bf00      	nop
 8016d36:	e7fd      	b.n	8016d34 <prvTaskExitError+0x2c>
	__asm volatile
 8016d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d3c:	b672      	cpsid	i
 8016d3e:	f383 8811 	msr	BASEPRI, r3
 8016d42:	f3bf 8f6f 	isb	sy
 8016d46:	f3bf 8f4f 	dsb	sy
 8016d4a:	b662      	cpsie	i
 8016d4c:	60bb      	str	r3, [r7, #8]
}
 8016d4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016d50:	bf00      	nop
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d0fc      	beq.n	8016d52 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016d58:	bf00      	nop
 8016d5a:	bf00      	nop
 8016d5c:	3714      	adds	r7, #20
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d64:	4770      	bx	lr
 8016d66:	bf00      	nop
 8016d68:	20000074 	.word	0x20000074
 8016d6c:	00000000 	.word	0x00000000

08016d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016d70:	4b07      	ldr	r3, [pc, #28]	@ (8016d90 <pxCurrentTCBConst2>)
 8016d72:	6819      	ldr	r1, [r3, #0]
 8016d74:	6808      	ldr	r0, [r1, #0]
 8016d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d7a:	f380 8809 	msr	PSP, r0
 8016d7e:	f3bf 8f6f 	isb	sy
 8016d82:	f04f 0000 	mov.w	r0, #0
 8016d86:	f380 8811 	msr	BASEPRI, r0
 8016d8a:	4770      	bx	lr
 8016d8c:	f3af 8000 	nop.w

08016d90 <pxCurrentTCBConst2>:
 8016d90:	20002b38 	.word	0x20002b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016d94:	bf00      	nop
 8016d96:	bf00      	nop

08016d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016d98:	4808      	ldr	r0, [pc, #32]	@ (8016dbc <prvPortStartFirstTask+0x24>)
 8016d9a:	6800      	ldr	r0, [r0, #0]
 8016d9c:	6800      	ldr	r0, [r0, #0]
 8016d9e:	f380 8808 	msr	MSP, r0
 8016da2:	f04f 0000 	mov.w	r0, #0
 8016da6:	f380 8814 	msr	CONTROL, r0
 8016daa:	b662      	cpsie	i
 8016dac:	b661      	cpsie	f
 8016dae:	f3bf 8f4f 	dsb	sy
 8016db2:	f3bf 8f6f 	isb	sy
 8016db6:	df00      	svc	0
 8016db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016dba:	bf00      	nop
 8016dbc:	e000ed08 	.word	0xe000ed08

08016dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b084      	sub	sp, #16
 8016dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016dc6:	4b37      	ldr	r3, [pc, #220]	@ (8016ea4 <xPortStartScheduler+0xe4>)
 8016dc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	781b      	ldrb	r3, [r3, #0]
 8016dce:	b2db      	uxtb	r3, r3
 8016dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	22ff      	movs	r2, #255	@ 0xff
 8016dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	781b      	ldrb	r3, [r3, #0]
 8016ddc:	b2db      	uxtb	r3, r3
 8016dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016de0:	78fb      	ldrb	r3, [r7, #3]
 8016de2:	b2db      	uxtb	r3, r3
 8016de4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016de8:	b2da      	uxtb	r2, r3
 8016dea:	4b2f      	ldr	r3, [pc, #188]	@ (8016ea8 <xPortStartScheduler+0xe8>)
 8016dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016dee:	4b2f      	ldr	r3, [pc, #188]	@ (8016eac <xPortStartScheduler+0xec>)
 8016df0:	2207      	movs	r2, #7
 8016df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016df4:	e009      	b.n	8016e0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016df6:	4b2d      	ldr	r3, [pc, #180]	@ (8016eac <xPortStartScheduler+0xec>)
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	3b01      	subs	r3, #1
 8016dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8016eac <xPortStartScheduler+0xec>)
 8016dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016e00:	78fb      	ldrb	r3, [r7, #3]
 8016e02:	b2db      	uxtb	r3, r3
 8016e04:	005b      	lsls	r3, r3, #1
 8016e06:	b2db      	uxtb	r3, r3
 8016e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016e0a:	78fb      	ldrb	r3, [r7, #3]
 8016e0c:	b2db      	uxtb	r3, r3
 8016e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016e12:	2b80      	cmp	r3, #128	@ 0x80
 8016e14:	d0ef      	beq.n	8016df6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016e16:	4b25      	ldr	r3, [pc, #148]	@ (8016eac <xPortStartScheduler+0xec>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	f1c3 0307 	rsb	r3, r3, #7
 8016e1e:	2b04      	cmp	r3, #4
 8016e20:	d00d      	beq.n	8016e3e <xPortStartScheduler+0x7e>
	__asm volatile
 8016e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e26:	b672      	cpsid	i
 8016e28:	f383 8811 	msr	BASEPRI, r3
 8016e2c:	f3bf 8f6f 	isb	sy
 8016e30:	f3bf 8f4f 	dsb	sy
 8016e34:	b662      	cpsie	i
 8016e36:	60bb      	str	r3, [r7, #8]
}
 8016e38:	bf00      	nop
 8016e3a:	bf00      	nop
 8016e3c:	e7fd      	b.n	8016e3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8016eac <xPortStartScheduler+0xec>)
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	021b      	lsls	r3, r3, #8
 8016e44:	4a19      	ldr	r2, [pc, #100]	@ (8016eac <xPortStartScheduler+0xec>)
 8016e46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016e48:	4b18      	ldr	r3, [pc, #96]	@ (8016eac <xPortStartScheduler+0xec>)
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016e50:	4a16      	ldr	r2, [pc, #88]	@ (8016eac <xPortStartScheduler+0xec>)
 8016e52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	b2da      	uxtb	r2, r3
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016e5c:	4b14      	ldr	r3, [pc, #80]	@ (8016eb0 <xPortStartScheduler+0xf0>)
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	4a13      	ldr	r2, [pc, #76]	@ (8016eb0 <xPortStartScheduler+0xf0>)
 8016e62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016e66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016e68:	4b11      	ldr	r3, [pc, #68]	@ (8016eb0 <xPortStartScheduler+0xf0>)
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	4a10      	ldr	r2, [pc, #64]	@ (8016eb0 <xPortStartScheduler+0xf0>)
 8016e6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016e72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016e74:	f000 f8dc 	bl	8017030 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016e78:	4b0e      	ldr	r3, [pc, #56]	@ (8016eb4 <xPortStartScheduler+0xf4>)
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016e7e:	f000 f8fb 	bl	8017078 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016e82:	4b0d      	ldr	r3, [pc, #52]	@ (8016eb8 <xPortStartScheduler+0xf8>)
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	4a0c      	ldr	r2, [pc, #48]	@ (8016eb8 <xPortStartScheduler+0xf8>)
 8016e88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8016e8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016e8e:	f7ff ff83 	bl	8016d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016e92:	f7ff fb7f 	bl	8016594 <vTaskSwitchContext>
	prvTaskExitError();
 8016e96:	f7ff ff37 	bl	8016d08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016e9a:	2300      	movs	r3, #0
}
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	3710      	adds	r7, #16
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}
 8016ea4:	e000e400 	.word	0xe000e400
 8016ea8:	20002c64 	.word	0x20002c64
 8016eac:	20002c68 	.word	0x20002c68
 8016eb0:	e000ed20 	.word	0xe000ed20
 8016eb4:	20000074 	.word	0x20000074
 8016eb8:	e000ef34 	.word	0xe000ef34

08016ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016ebc:	b480      	push	{r7}
 8016ebe:	b083      	sub	sp, #12
 8016ec0:	af00      	add	r7, sp, #0
	__asm volatile
 8016ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ec6:	b672      	cpsid	i
 8016ec8:	f383 8811 	msr	BASEPRI, r3
 8016ecc:	f3bf 8f6f 	isb	sy
 8016ed0:	f3bf 8f4f 	dsb	sy
 8016ed4:	b662      	cpsie	i
 8016ed6:	607b      	str	r3, [r7, #4]
}
 8016ed8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016eda:	4b11      	ldr	r3, [pc, #68]	@ (8016f20 <vPortEnterCritical+0x64>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	3301      	adds	r3, #1
 8016ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8016f20 <vPortEnterCritical+0x64>)
 8016ee2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8016f20 <vPortEnterCritical+0x64>)
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	2b01      	cmp	r3, #1
 8016eea:	d112      	bne.n	8016f12 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016eec:	4b0d      	ldr	r3, [pc, #52]	@ (8016f24 <vPortEnterCritical+0x68>)
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	b2db      	uxtb	r3, r3
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d00d      	beq.n	8016f12 <vPortEnterCritical+0x56>
	__asm volatile
 8016ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016efa:	b672      	cpsid	i
 8016efc:	f383 8811 	msr	BASEPRI, r3
 8016f00:	f3bf 8f6f 	isb	sy
 8016f04:	f3bf 8f4f 	dsb	sy
 8016f08:	b662      	cpsie	i
 8016f0a:	603b      	str	r3, [r7, #0]
}
 8016f0c:	bf00      	nop
 8016f0e:	bf00      	nop
 8016f10:	e7fd      	b.n	8016f0e <vPortEnterCritical+0x52>
	}
}
 8016f12:	bf00      	nop
 8016f14:	370c      	adds	r7, #12
 8016f16:	46bd      	mov	sp, r7
 8016f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1c:	4770      	bx	lr
 8016f1e:	bf00      	nop
 8016f20:	20000074 	.word	0x20000074
 8016f24:	e000ed04 	.word	0xe000ed04

08016f28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016f28:	b480      	push	{r7}
 8016f2a:	b083      	sub	sp, #12
 8016f2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016f2e:	4b13      	ldr	r3, [pc, #76]	@ (8016f7c <vPortExitCritical+0x54>)
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d10d      	bne.n	8016f52 <vPortExitCritical+0x2a>
	__asm volatile
 8016f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f3a:	b672      	cpsid	i
 8016f3c:	f383 8811 	msr	BASEPRI, r3
 8016f40:	f3bf 8f6f 	isb	sy
 8016f44:	f3bf 8f4f 	dsb	sy
 8016f48:	b662      	cpsie	i
 8016f4a:	607b      	str	r3, [r7, #4]
}
 8016f4c:	bf00      	nop
 8016f4e:	bf00      	nop
 8016f50:	e7fd      	b.n	8016f4e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8016f52:	4b0a      	ldr	r3, [pc, #40]	@ (8016f7c <vPortExitCritical+0x54>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	3b01      	subs	r3, #1
 8016f58:	4a08      	ldr	r2, [pc, #32]	@ (8016f7c <vPortExitCritical+0x54>)
 8016f5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016f5c:	4b07      	ldr	r3, [pc, #28]	@ (8016f7c <vPortExitCritical+0x54>)
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d105      	bne.n	8016f70 <vPortExitCritical+0x48>
 8016f64:	2300      	movs	r3, #0
 8016f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	f383 8811 	msr	BASEPRI, r3
}
 8016f6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016f70:	bf00      	nop
 8016f72:	370c      	adds	r7, #12
 8016f74:	46bd      	mov	sp, r7
 8016f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f7a:	4770      	bx	lr
 8016f7c:	20000074 	.word	0x20000074

08016f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016f80:	f3ef 8009 	mrs	r0, PSP
 8016f84:	f3bf 8f6f 	isb	sy
 8016f88:	4b15      	ldr	r3, [pc, #84]	@ (8016fe0 <pxCurrentTCBConst>)
 8016f8a:	681a      	ldr	r2, [r3, #0]
 8016f8c:	f01e 0f10 	tst.w	lr, #16
 8016f90:	bf08      	it	eq
 8016f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f9a:	6010      	str	r0, [r2, #0]
 8016f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016fa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016fa4:	b672      	cpsid	i
 8016fa6:	f380 8811 	msr	BASEPRI, r0
 8016faa:	f3bf 8f4f 	dsb	sy
 8016fae:	f3bf 8f6f 	isb	sy
 8016fb2:	b662      	cpsie	i
 8016fb4:	f7ff faee 	bl	8016594 <vTaskSwitchContext>
 8016fb8:	f04f 0000 	mov.w	r0, #0
 8016fbc:	f380 8811 	msr	BASEPRI, r0
 8016fc0:	bc09      	pop	{r0, r3}
 8016fc2:	6819      	ldr	r1, [r3, #0]
 8016fc4:	6808      	ldr	r0, [r1, #0]
 8016fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fca:	f01e 0f10 	tst.w	lr, #16
 8016fce:	bf08      	it	eq
 8016fd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016fd4:	f380 8809 	msr	PSP, r0
 8016fd8:	f3bf 8f6f 	isb	sy
 8016fdc:	4770      	bx	lr
 8016fde:	bf00      	nop

08016fe0 <pxCurrentTCBConst>:
 8016fe0:	20002b38 	.word	0x20002b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016fe4:	bf00      	nop
 8016fe6:	bf00      	nop

08016fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	b082      	sub	sp, #8
 8016fec:	af00      	add	r7, sp, #0
	__asm volatile
 8016fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ff2:	b672      	cpsid	i
 8016ff4:	f383 8811 	msr	BASEPRI, r3
 8016ff8:	f3bf 8f6f 	isb	sy
 8016ffc:	f3bf 8f4f 	dsb	sy
 8017000:	b662      	cpsie	i
 8017002:	607b      	str	r3, [r7, #4]
}
 8017004:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017006:	f7ff fa09 	bl	801641c <xTaskIncrementTick>
 801700a:	4603      	mov	r3, r0
 801700c:	2b00      	cmp	r3, #0
 801700e:	d003      	beq.n	8017018 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017010:	4b06      	ldr	r3, [pc, #24]	@ (801702c <SysTick_Handler+0x44>)
 8017012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017016:	601a      	str	r2, [r3, #0]
 8017018:	2300      	movs	r3, #0
 801701a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	f383 8811 	msr	BASEPRI, r3
}
 8017022:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017024:	bf00      	nop
 8017026:	3708      	adds	r7, #8
 8017028:	46bd      	mov	sp, r7
 801702a:	bd80      	pop	{r7, pc}
 801702c:	e000ed04 	.word	0xe000ed04

08017030 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017030:	b480      	push	{r7}
 8017032:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017034:	4b0b      	ldr	r3, [pc, #44]	@ (8017064 <vPortSetupTimerInterrupt+0x34>)
 8017036:	2200      	movs	r2, #0
 8017038:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801703a:	4b0b      	ldr	r3, [pc, #44]	@ (8017068 <vPortSetupTimerInterrupt+0x38>)
 801703c:	2200      	movs	r2, #0
 801703e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017040:	4b0a      	ldr	r3, [pc, #40]	@ (801706c <vPortSetupTimerInterrupt+0x3c>)
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	4a0a      	ldr	r2, [pc, #40]	@ (8017070 <vPortSetupTimerInterrupt+0x40>)
 8017046:	fba2 2303 	umull	r2, r3, r2, r3
 801704a:	099b      	lsrs	r3, r3, #6
 801704c:	4a09      	ldr	r2, [pc, #36]	@ (8017074 <vPortSetupTimerInterrupt+0x44>)
 801704e:	3b01      	subs	r3, #1
 8017050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017052:	4b04      	ldr	r3, [pc, #16]	@ (8017064 <vPortSetupTimerInterrupt+0x34>)
 8017054:	2207      	movs	r2, #7
 8017056:	601a      	str	r2, [r3, #0]
}
 8017058:	bf00      	nop
 801705a:	46bd      	mov	sp, r7
 801705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017060:	4770      	bx	lr
 8017062:	bf00      	nop
 8017064:	e000e010 	.word	0xe000e010
 8017068:	e000e018 	.word	0xe000e018
 801706c:	2000001c 	.word	0x2000001c
 8017070:	10624dd3 	.word	0x10624dd3
 8017074:	e000e014 	.word	0xe000e014

08017078 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017078:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8017088 <vPortEnableVFP+0x10>
 801707c:	6801      	ldr	r1, [r0, #0]
 801707e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8017082:	6001      	str	r1, [r0, #0]
 8017084:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017086:	bf00      	nop
 8017088:	e000ed88 	.word	0xe000ed88

0801708c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801708c:	b480      	push	{r7}
 801708e:	b085      	sub	sp, #20
 8017090:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017092:	f3ef 8305 	mrs	r3, IPSR
 8017096:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	2b0f      	cmp	r3, #15
 801709c:	d917      	bls.n	80170ce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801709e:	4a1a      	ldr	r2, [pc, #104]	@ (8017108 <vPortValidateInterruptPriority+0x7c>)
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	4413      	add	r3, r2
 80170a4:	781b      	ldrb	r3, [r3, #0]
 80170a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80170a8:	4b18      	ldr	r3, [pc, #96]	@ (801710c <vPortValidateInterruptPriority+0x80>)
 80170aa:	781b      	ldrb	r3, [r3, #0]
 80170ac:	7afa      	ldrb	r2, [r7, #11]
 80170ae:	429a      	cmp	r2, r3
 80170b0:	d20d      	bcs.n	80170ce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80170b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170b6:	b672      	cpsid	i
 80170b8:	f383 8811 	msr	BASEPRI, r3
 80170bc:	f3bf 8f6f 	isb	sy
 80170c0:	f3bf 8f4f 	dsb	sy
 80170c4:	b662      	cpsie	i
 80170c6:	607b      	str	r3, [r7, #4]
}
 80170c8:	bf00      	nop
 80170ca:	bf00      	nop
 80170cc:	e7fd      	b.n	80170ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80170ce:	4b10      	ldr	r3, [pc, #64]	@ (8017110 <vPortValidateInterruptPriority+0x84>)
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80170d6:	4b0f      	ldr	r3, [pc, #60]	@ (8017114 <vPortValidateInterruptPriority+0x88>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	429a      	cmp	r2, r3
 80170dc:	d90d      	bls.n	80170fa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80170de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170e2:	b672      	cpsid	i
 80170e4:	f383 8811 	msr	BASEPRI, r3
 80170e8:	f3bf 8f6f 	isb	sy
 80170ec:	f3bf 8f4f 	dsb	sy
 80170f0:	b662      	cpsie	i
 80170f2:	603b      	str	r3, [r7, #0]
}
 80170f4:	bf00      	nop
 80170f6:	bf00      	nop
 80170f8:	e7fd      	b.n	80170f6 <vPortValidateInterruptPriority+0x6a>
	}
 80170fa:	bf00      	nop
 80170fc:	3714      	adds	r7, #20
 80170fe:	46bd      	mov	sp, r7
 8017100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017104:	4770      	bx	lr
 8017106:	bf00      	nop
 8017108:	e000e3f0 	.word	0xe000e3f0
 801710c:	20002c64 	.word	0x20002c64
 8017110:	e000ed0c 	.word	0xe000ed0c
 8017114:	20002c68 	.word	0x20002c68

08017118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b08a      	sub	sp, #40	@ 0x28
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017120:	2300      	movs	r3, #0
 8017122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017124:	f7ff f8aa 	bl	801627c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017128:	4b5f      	ldr	r3, [pc, #380]	@ (80172a8 <pvPortMalloc+0x190>)
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d101      	bne.n	8017134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017130:	f000 f924 	bl	801737c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017134:	4b5d      	ldr	r3, [pc, #372]	@ (80172ac <pvPortMalloc+0x194>)
 8017136:	681a      	ldr	r2, [r3, #0]
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	4013      	ands	r3, r2
 801713c:	2b00      	cmp	r3, #0
 801713e:	f040 8094 	bne.w	801726a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d020      	beq.n	801718a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8017148:	2208      	movs	r2, #8
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	4413      	add	r3, r2
 801714e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f003 0307 	and.w	r3, r3, #7
 8017156:	2b00      	cmp	r3, #0
 8017158:	d017      	beq.n	801718a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f023 0307 	bic.w	r3, r3, #7
 8017160:	3308      	adds	r3, #8
 8017162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	f003 0307 	and.w	r3, r3, #7
 801716a:	2b00      	cmp	r3, #0
 801716c:	d00d      	beq.n	801718a <pvPortMalloc+0x72>
	__asm volatile
 801716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017172:	b672      	cpsid	i
 8017174:	f383 8811 	msr	BASEPRI, r3
 8017178:	f3bf 8f6f 	isb	sy
 801717c:	f3bf 8f4f 	dsb	sy
 8017180:	b662      	cpsie	i
 8017182:	617b      	str	r3, [r7, #20]
}
 8017184:	bf00      	nop
 8017186:	bf00      	nop
 8017188:	e7fd      	b.n	8017186 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d06c      	beq.n	801726a <pvPortMalloc+0x152>
 8017190:	4b47      	ldr	r3, [pc, #284]	@ (80172b0 <pvPortMalloc+0x198>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	687a      	ldr	r2, [r7, #4]
 8017196:	429a      	cmp	r2, r3
 8017198:	d867      	bhi.n	801726a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801719a:	4b46      	ldr	r3, [pc, #280]	@ (80172b4 <pvPortMalloc+0x19c>)
 801719c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801719e:	4b45      	ldr	r3, [pc, #276]	@ (80172b4 <pvPortMalloc+0x19c>)
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80171a4:	e004      	b.n	80171b0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80171a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80171aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80171b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171b2:	685b      	ldr	r3, [r3, #4]
 80171b4:	687a      	ldr	r2, [r7, #4]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d903      	bls.n	80171c2 <pvPortMalloc+0xaa>
 80171ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d1f1      	bne.n	80171a6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80171c2:	4b39      	ldr	r3, [pc, #228]	@ (80172a8 <pvPortMalloc+0x190>)
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80171c8:	429a      	cmp	r2, r3
 80171ca:	d04e      	beq.n	801726a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80171cc:	6a3b      	ldr	r3, [r7, #32]
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	2208      	movs	r2, #8
 80171d2:	4413      	add	r3, r2
 80171d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80171d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171d8:	681a      	ldr	r2, [r3, #0]
 80171da:	6a3b      	ldr	r3, [r7, #32]
 80171dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80171de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171e0:	685a      	ldr	r2, [r3, #4]
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	1ad2      	subs	r2, r2, r3
 80171e6:	2308      	movs	r3, #8
 80171e8:	005b      	lsls	r3, r3, #1
 80171ea:	429a      	cmp	r2, r3
 80171ec:	d922      	bls.n	8017234 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80171ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	4413      	add	r3, r2
 80171f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80171f6:	69bb      	ldr	r3, [r7, #24]
 80171f8:	f003 0307 	and.w	r3, r3, #7
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d00d      	beq.n	801721c <pvPortMalloc+0x104>
	__asm volatile
 8017200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017204:	b672      	cpsid	i
 8017206:	f383 8811 	msr	BASEPRI, r3
 801720a:	f3bf 8f6f 	isb	sy
 801720e:	f3bf 8f4f 	dsb	sy
 8017212:	b662      	cpsie	i
 8017214:	613b      	str	r3, [r7, #16]
}
 8017216:	bf00      	nop
 8017218:	bf00      	nop
 801721a:	e7fd      	b.n	8017218 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801721e:	685a      	ldr	r2, [r3, #4]
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	1ad2      	subs	r2, r2, r3
 8017224:	69bb      	ldr	r3, [r7, #24]
 8017226:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801722a:	687a      	ldr	r2, [r7, #4]
 801722c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801722e:	69b8      	ldr	r0, [r7, #24]
 8017230:	f000 f906 	bl	8017440 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017234:	4b1e      	ldr	r3, [pc, #120]	@ (80172b0 <pvPortMalloc+0x198>)
 8017236:	681a      	ldr	r2, [r3, #0]
 8017238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801723a:	685b      	ldr	r3, [r3, #4]
 801723c:	1ad3      	subs	r3, r2, r3
 801723e:	4a1c      	ldr	r2, [pc, #112]	@ (80172b0 <pvPortMalloc+0x198>)
 8017240:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017242:	4b1b      	ldr	r3, [pc, #108]	@ (80172b0 <pvPortMalloc+0x198>)
 8017244:	681a      	ldr	r2, [r3, #0]
 8017246:	4b1c      	ldr	r3, [pc, #112]	@ (80172b8 <pvPortMalloc+0x1a0>)
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	429a      	cmp	r2, r3
 801724c:	d203      	bcs.n	8017256 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801724e:	4b18      	ldr	r3, [pc, #96]	@ (80172b0 <pvPortMalloc+0x198>)
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	4a19      	ldr	r2, [pc, #100]	@ (80172b8 <pvPortMalloc+0x1a0>)
 8017254:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017258:	685a      	ldr	r2, [r3, #4]
 801725a:	4b14      	ldr	r3, [pc, #80]	@ (80172ac <pvPortMalloc+0x194>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	431a      	orrs	r2, r3
 8017260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017262:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017266:	2200      	movs	r2, #0
 8017268:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801726a:	f7ff f815 	bl	8016298 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801726e:	69fb      	ldr	r3, [r7, #28]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d101      	bne.n	8017278 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8017274:	f7ea fefa 	bl	800206c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017278:	69fb      	ldr	r3, [r7, #28]
 801727a:	f003 0307 	and.w	r3, r3, #7
 801727e:	2b00      	cmp	r3, #0
 8017280:	d00d      	beq.n	801729e <pvPortMalloc+0x186>
	__asm volatile
 8017282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017286:	b672      	cpsid	i
 8017288:	f383 8811 	msr	BASEPRI, r3
 801728c:	f3bf 8f6f 	isb	sy
 8017290:	f3bf 8f4f 	dsb	sy
 8017294:	b662      	cpsie	i
 8017296:	60fb      	str	r3, [r7, #12]
}
 8017298:	bf00      	nop
 801729a:	bf00      	nop
 801729c:	e7fd      	b.n	801729a <pvPortMalloc+0x182>
	return pvReturn;
 801729e:	69fb      	ldr	r3, [r7, #28]
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3728      	adds	r7, #40	@ 0x28
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}
 80172a8:	20012c74 	.word	0x20012c74
 80172ac:	20012c80 	.word	0x20012c80
 80172b0:	20012c78 	.word	0x20012c78
 80172b4:	20012c6c 	.word	0x20012c6c
 80172b8:	20012c7c 	.word	0x20012c7c

080172bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b086      	sub	sp, #24
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d04e      	beq.n	801736c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80172ce:	2308      	movs	r3, #8
 80172d0:	425b      	negs	r3, r3
 80172d2:	697a      	ldr	r2, [r7, #20]
 80172d4:	4413      	add	r3, r2
 80172d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80172d8:	697b      	ldr	r3, [r7, #20]
 80172da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80172dc:	693b      	ldr	r3, [r7, #16]
 80172de:	685a      	ldr	r2, [r3, #4]
 80172e0:	4b24      	ldr	r3, [pc, #144]	@ (8017374 <vPortFree+0xb8>)
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	4013      	ands	r3, r2
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d10d      	bne.n	8017306 <vPortFree+0x4a>
	__asm volatile
 80172ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172ee:	b672      	cpsid	i
 80172f0:	f383 8811 	msr	BASEPRI, r3
 80172f4:	f3bf 8f6f 	isb	sy
 80172f8:	f3bf 8f4f 	dsb	sy
 80172fc:	b662      	cpsie	i
 80172fe:	60fb      	str	r3, [r7, #12]
}
 8017300:	bf00      	nop
 8017302:	bf00      	nop
 8017304:	e7fd      	b.n	8017302 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017306:	693b      	ldr	r3, [r7, #16]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d00d      	beq.n	801732a <vPortFree+0x6e>
	__asm volatile
 801730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017312:	b672      	cpsid	i
 8017314:	f383 8811 	msr	BASEPRI, r3
 8017318:	f3bf 8f6f 	isb	sy
 801731c:	f3bf 8f4f 	dsb	sy
 8017320:	b662      	cpsie	i
 8017322:	60bb      	str	r3, [r7, #8]
}
 8017324:	bf00      	nop
 8017326:	bf00      	nop
 8017328:	e7fd      	b.n	8017326 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801732a:	693b      	ldr	r3, [r7, #16]
 801732c:	685a      	ldr	r2, [r3, #4]
 801732e:	4b11      	ldr	r3, [pc, #68]	@ (8017374 <vPortFree+0xb8>)
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	4013      	ands	r3, r2
 8017334:	2b00      	cmp	r3, #0
 8017336:	d019      	beq.n	801736c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017338:	693b      	ldr	r3, [r7, #16]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d115      	bne.n	801736c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017340:	693b      	ldr	r3, [r7, #16]
 8017342:	685a      	ldr	r2, [r3, #4]
 8017344:	4b0b      	ldr	r3, [pc, #44]	@ (8017374 <vPortFree+0xb8>)
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	43db      	mvns	r3, r3
 801734a:	401a      	ands	r2, r3
 801734c:	693b      	ldr	r3, [r7, #16]
 801734e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017350:	f7fe ff94 	bl	801627c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017354:	693b      	ldr	r3, [r7, #16]
 8017356:	685a      	ldr	r2, [r3, #4]
 8017358:	4b07      	ldr	r3, [pc, #28]	@ (8017378 <vPortFree+0xbc>)
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	4413      	add	r3, r2
 801735e:	4a06      	ldr	r2, [pc, #24]	@ (8017378 <vPortFree+0xbc>)
 8017360:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017362:	6938      	ldr	r0, [r7, #16]
 8017364:	f000 f86c 	bl	8017440 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8017368:	f7fe ff96 	bl	8016298 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801736c:	bf00      	nop
 801736e:	3718      	adds	r7, #24
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}
 8017374:	20012c80 	.word	0x20012c80
 8017378:	20012c78 	.word	0x20012c78

0801737c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801737c:	b480      	push	{r7}
 801737e:	b085      	sub	sp, #20
 8017380:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017382:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017386:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017388:	4b27      	ldr	r3, [pc, #156]	@ (8017428 <prvHeapInit+0xac>)
 801738a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	f003 0307 	and.w	r3, r3, #7
 8017392:	2b00      	cmp	r3, #0
 8017394:	d00c      	beq.n	80173b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	3307      	adds	r3, #7
 801739a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	f023 0307 	bic.w	r3, r3, #7
 80173a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80173a4:	68ba      	ldr	r2, [r7, #8]
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	1ad3      	subs	r3, r2, r3
 80173aa:	4a1f      	ldr	r2, [pc, #124]	@ (8017428 <prvHeapInit+0xac>)
 80173ac:	4413      	add	r3, r2
 80173ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80173b4:	4a1d      	ldr	r2, [pc, #116]	@ (801742c <prvHeapInit+0xb0>)
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80173ba:	4b1c      	ldr	r3, [pc, #112]	@ (801742c <prvHeapInit+0xb0>)
 80173bc:	2200      	movs	r2, #0
 80173be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	68ba      	ldr	r2, [r7, #8]
 80173c4:	4413      	add	r3, r2
 80173c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80173c8:	2208      	movs	r2, #8
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	1a9b      	subs	r3, r3, r2
 80173ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	f023 0307 	bic.w	r3, r3, #7
 80173d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	4a15      	ldr	r2, [pc, #84]	@ (8017430 <prvHeapInit+0xb4>)
 80173dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80173de:	4b14      	ldr	r3, [pc, #80]	@ (8017430 <prvHeapInit+0xb4>)
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	2200      	movs	r2, #0
 80173e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80173e6:	4b12      	ldr	r3, [pc, #72]	@ (8017430 <prvHeapInit+0xb4>)
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	2200      	movs	r2, #0
 80173ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	68fa      	ldr	r2, [r7, #12]
 80173f6:	1ad2      	subs	r2, r2, r3
 80173f8:	683b      	ldr	r3, [r7, #0]
 80173fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80173fc:	4b0c      	ldr	r3, [pc, #48]	@ (8017430 <prvHeapInit+0xb4>)
 80173fe:	681a      	ldr	r2, [r3, #0]
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017404:	683b      	ldr	r3, [r7, #0]
 8017406:	685b      	ldr	r3, [r3, #4]
 8017408:	4a0a      	ldr	r2, [pc, #40]	@ (8017434 <prvHeapInit+0xb8>)
 801740a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801740c:	683b      	ldr	r3, [r7, #0]
 801740e:	685b      	ldr	r3, [r3, #4]
 8017410:	4a09      	ldr	r2, [pc, #36]	@ (8017438 <prvHeapInit+0xbc>)
 8017412:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017414:	4b09      	ldr	r3, [pc, #36]	@ (801743c <prvHeapInit+0xc0>)
 8017416:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801741a:	601a      	str	r2, [r3, #0]
}
 801741c:	bf00      	nop
 801741e:	3714      	adds	r7, #20
 8017420:	46bd      	mov	sp, r7
 8017422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017426:	4770      	bx	lr
 8017428:	20002c6c 	.word	0x20002c6c
 801742c:	20012c6c 	.word	0x20012c6c
 8017430:	20012c74 	.word	0x20012c74
 8017434:	20012c7c 	.word	0x20012c7c
 8017438:	20012c78 	.word	0x20012c78
 801743c:	20012c80 	.word	0x20012c80

08017440 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017440:	b480      	push	{r7}
 8017442:	b085      	sub	sp, #20
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017448:	4b28      	ldr	r3, [pc, #160]	@ (80174ec <prvInsertBlockIntoFreeList+0xac>)
 801744a:	60fb      	str	r3, [r7, #12]
 801744c:	e002      	b.n	8017454 <prvInsertBlockIntoFreeList+0x14>
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	60fb      	str	r3, [r7, #12]
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	687a      	ldr	r2, [r7, #4]
 801745a:	429a      	cmp	r2, r3
 801745c:	d8f7      	bhi.n	801744e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	685b      	ldr	r3, [r3, #4]
 8017466:	68ba      	ldr	r2, [r7, #8]
 8017468:	4413      	add	r3, r2
 801746a:	687a      	ldr	r2, [r7, #4]
 801746c:	429a      	cmp	r2, r3
 801746e:	d108      	bne.n	8017482 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	685a      	ldr	r2, [r3, #4]
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	685b      	ldr	r3, [r3, #4]
 8017478:	441a      	add	r2, r3
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	685b      	ldr	r3, [r3, #4]
 801748a:	68ba      	ldr	r2, [r7, #8]
 801748c:	441a      	add	r2, r3
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	429a      	cmp	r2, r3
 8017494:	d118      	bne.n	80174c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	681a      	ldr	r2, [r3, #0]
 801749a:	4b15      	ldr	r3, [pc, #84]	@ (80174f0 <prvInsertBlockIntoFreeList+0xb0>)
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	429a      	cmp	r2, r3
 80174a0:	d00d      	beq.n	80174be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	685a      	ldr	r2, [r3, #4]
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	685b      	ldr	r3, [r3, #4]
 80174ac:	441a      	add	r2, r3
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	681a      	ldr	r2, [r3, #0]
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	601a      	str	r2, [r3, #0]
 80174bc:	e008      	b.n	80174d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80174be:	4b0c      	ldr	r3, [pc, #48]	@ (80174f0 <prvInsertBlockIntoFreeList+0xb0>)
 80174c0:	681a      	ldr	r2, [r3, #0]
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	601a      	str	r2, [r3, #0]
 80174c6:	e003      	b.n	80174d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	681a      	ldr	r2, [r3, #0]
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80174d0:	68fa      	ldr	r2, [r7, #12]
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	429a      	cmp	r2, r3
 80174d6:	d002      	beq.n	80174de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	687a      	ldr	r2, [r7, #4]
 80174dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80174de:	bf00      	nop
 80174e0:	3714      	adds	r7, #20
 80174e2:	46bd      	mov	sp, r7
 80174e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e8:	4770      	bx	lr
 80174ea:	bf00      	nop
 80174ec:	20012c6c 	.word	0x20012c6c
 80174f0:	20012c74 	.word	0x20012c74

080174f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b082      	sub	sp, #8
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017502:	4618      	mov	r0, r3
 8017504:	f7fa fe36 	bl	8012174 <USBH_LL_IncTimer>
}
 8017508:	bf00      	nop
 801750a:	3708      	adds	r7, #8
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}

08017510 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b082      	sub	sp, #8
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801751e:	4618      	mov	r0, r3
 8017520:	f7fa fe76 	bl	8012210 <USBH_LL_Connect>
}
 8017524:	bf00      	nop
 8017526:	3708      	adds	r7, #8
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}

0801752c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b082      	sub	sp, #8
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801753a:	4618      	mov	r0, r3
 801753c:	f7fa fe83 	bl	8012246 <USBH_LL_Disconnect>
}
 8017540:	bf00      	nop
 8017542:	3708      	adds	r7, #8
 8017544:	46bd      	mov	sp, r7
 8017546:	bd80      	pop	{r7, pc}

08017548 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8017548:	b580      	push	{r7, lr}
 801754a:	b082      	sub	sp, #8
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
 8017550:	460b      	mov	r3, r1
 8017552:	70fb      	strb	r3, [r7, #3]
 8017554:	4613      	mov	r3, r2
 8017556:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801755e:	4618      	mov	r0, r3
 8017560:	f7fa fec2 	bl	80122e8 <USBH_LL_NotifyURBChange>
#endif
}
 8017564:	bf00      	nop
 8017566:	3708      	adds	r7, #8
 8017568:	46bd      	mov	sp, r7
 801756a:	bd80      	pop	{r7, pc}

0801756c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b082      	sub	sp, #8
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801757a:	4618      	mov	r0, r3
 801757c:	f7fa fe24 	bl	80121c8 <USBH_LL_PortEnabled>
}
 8017580:	bf00      	nop
 8017582:	3708      	adds	r7, #8
 8017584:	46bd      	mov	sp, r7
 8017586:	bd80      	pop	{r7, pc}

08017588 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b082      	sub	sp, #8
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017596:	4618      	mov	r0, r3
 8017598:	f7fa fe28 	bl	80121ec <USBH_LL_PortDisabled>
}
 801759c:	bf00      	nop
 801759e:	3708      	adds	r7, #8
 80175a0:	46bd      	mov	sp, r7
 80175a2:	bd80      	pop	{r7, pc}

080175a4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b084      	sub	sp, #16
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175ac:	2300      	movs	r3, #0
 80175ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80175b0:	2300      	movs	r3, #0
 80175b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80175ba:	4618      	mov	r0, r3
 80175bc:	f7f1 f86d 	bl	800869a <HAL_HCD_Stop>
 80175c0:	4603      	mov	r3, r0
 80175c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80175c4:	7bfb      	ldrb	r3, [r7, #15]
 80175c6:	4618      	mov	r0, r3
 80175c8:	f000 f808 	bl	80175dc <USBH_Get_USB_Status>
 80175cc:	4603      	mov	r3, r0
 80175ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80175d2:	4618      	mov	r0, r3
 80175d4:	3710      	adds	r7, #16
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}
	...

080175dc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80175dc:	b480      	push	{r7}
 80175de:	b085      	sub	sp, #20
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	4603      	mov	r3, r0
 80175e4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80175e6:	2300      	movs	r3, #0
 80175e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80175ea:	79fb      	ldrb	r3, [r7, #7]
 80175ec:	2b03      	cmp	r3, #3
 80175ee:	d817      	bhi.n	8017620 <USBH_Get_USB_Status+0x44>
 80175f0:	a201      	add	r2, pc, #4	@ (adr r2, 80175f8 <USBH_Get_USB_Status+0x1c>)
 80175f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175f6:	bf00      	nop
 80175f8:	08017609 	.word	0x08017609
 80175fc:	0801760f 	.word	0x0801760f
 8017600:	08017615 	.word	0x08017615
 8017604:	0801761b 	.word	0x0801761b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8017608:	2300      	movs	r3, #0
 801760a:	73fb      	strb	r3, [r7, #15]
    break;
 801760c:	e00b      	b.n	8017626 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801760e:	2302      	movs	r3, #2
 8017610:	73fb      	strb	r3, [r7, #15]
    break;
 8017612:	e008      	b.n	8017626 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8017614:	2301      	movs	r3, #1
 8017616:	73fb      	strb	r3, [r7, #15]
    break;
 8017618:	e005      	b.n	8017626 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801761a:	2302      	movs	r3, #2
 801761c:	73fb      	strb	r3, [r7, #15]
    break;
 801761e:	e002      	b.n	8017626 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8017620:	2302      	movs	r3, #2
 8017622:	73fb      	strb	r3, [r7, #15]
    break;
 8017624:	bf00      	nop
  }
  return usb_status;
 8017626:	7bfb      	ldrb	r3, [r7, #15]
}
 8017628:	4618      	mov	r0, r3
 801762a:	3714      	adds	r7, #20
 801762c:	46bd      	mov	sp, r7
 801762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017632:	4770      	bx	lr

08017634 <sbrk_aligned>:
 8017634:	b570      	push	{r4, r5, r6, lr}
 8017636:	4e0f      	ldr	r6, [pc, #60]	@ (8017674 <sbrk_aligned+0x40>)
 8017638:	460c      	mov	r4, r1
 801763a:	6831      	ldr	r1, [r6, #0]
 801763c:	4605      	mov	r5, r0
 801763e:	b911      	cbnz	r1, 8017646 <sbrk_aligned+0x12>
 8017640:	f000 fac4 	bl	8017bcc <_sbrk_r>
 8017644:	6030      	str	r0, [r6, #0]
 8017646:	4621      	mov	r1, r4
 8017648:	4628      	mov	r0, r5
 801764a:	f000 fabf 	bl	8017bcc <_sbrk_r>
 801764e:	1c43      	adds	r3, r0, #1
 8017650:	d103      	bne.n	801765a <sbrk_aligned+0x26>
 8017652:	f04f 34ff 	mov.w	r4, #4294967295
 8017656:	4620      	mov	r0, r4
 8017658:	bd70      	pop	{r4, r5, r6, pc}
 801765a:	1cc4      	adds	r4, r0, #3
 801765c:	f024 0403 	bic.w	r4, r4, #3
 8017660:	42a0      	cmp	r0, r4
 8017662:	d0f8      	beq.n	8017656 <sbrk_aligned+0x22>
 8017664:	1a21      	subs	r1, r4, r0
 8017666:	4628      	mov	r0, r5
 8017668:	f000 fab0 	bl	8017bcc <_sbrk_r>
 801766c:	3001      	adds	r0, #1
 801766e:	d1f2      	bne.n	8017656 <sbrk_aligned+0x22>
 8017670:	e7ef      	b.n	8017652 <sbrk_aligned+0x1e>
 8017672:	bf00      	nop
 8017674:	20013064 	.word	0x20013064

08017678 <_malloc_r>:
 8017678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801767c:	1ccd      	adds	r5, r1, #3
 801767e:	f025 0503 	bic.w	r5, r5, #3
 8017682:	3508      	adds	r5, #8
 8017684:	2d0c      	cmp	r5, #12
 8017686:	bf38      	it	cc
 8017688:	250c      	movcc	r5, #12
 801768a:	2d00      	cmp	r5, #0
 801768c:	4606      	mov	r6, r0
 801768e:	db01      	blt.n	8017694 <_malloc_r+0x1c>
 8017690:	42a9      	cmp	r1, r5
 8017692:	d904      	bls.n	801769e <_malloc_r+0x26>
 8017694:	230c      	movs	r3, #12
 8017696:	6033      	str	r3, [r6, #0]
 8017698:	2000      	movs	r0, #0
 801769a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801769e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017774 <_malloc_r+0xfc>
 80176a2:	f000 f869 	bl	8017778 <__malloc_lock>
 80176a6:	f8d8 3000 	ldr.w	r3, [r8]
 80176aa:	461c      	mov	r4, r3
 80176ac:	bb44      	cbnz	r4, 8017700 <_malloc_r+0x88>
 80176ae:	4629      	mov	r1, r5
 80176b0:	4630      	mov	r0, r6
 80176b2:	f7ff ffbf 	bl	8017634 <sbrk_aligned>
 80176b6:	1c43      	adds	r3, r0, #1
 80176b8:	4604      	mov	r4, r0
 80176ba:	d158      	bne.n	801776e <_malloc_r+0xf6>
 80176bc:	f8d8 4000 	ldr.w	r4, [r8]
 80176c0:	4627      	mov	r7, r4
 80176c2:	2f00      	cmp	r7, #0
 80176c4:	d143      	bne.n	801774e <_malloc_r+0xd6>
 80176c6:	2c00      	cmp	r4, #0
 80176c8:	d04b      	beq.n	8017762 <_malloc_r+0xea>
 80176ca:	6823      	ldr	r3, [r4, #0]
 80176cc:	4639      	mov	r1, r7
 80176ce:	4630      	mov	r0, r6
 80176d0:	eb04 0903 	add.w	r9, r4, r3
 80176d4:	f000 fa7a 	bl	8017bcc <_sbrk_r>
 80176d8:	4581      	cmp	r9, r0
 80176da:	d142      	bne.n	8017762 <_malloc_r+0xea>
 80176dc:	6821      	ldr	r1, [r4, #0]
 80176de:	1a6d      	subs	r5, r5, r1
 80176e0:	4629      	mov	r1, r5
 80176e2:	4630      	mov	r0, r6
 80176e4:	f7ff ffa6 	bl	8017634 <sbrk_aligned>
 80176e8:	3001      	adds	r0, #1
 80176ea:	d03a      	beq.n	8017762 <_malloc_r+0xea>
 80176ec:	6823      	ldr	r3, [r4, #0]
 80176ee:	442b      	add	r3, r5
 80176f0:	6023      	str	r3, [r4, #0]
 80176f2:	f8d8 3000 	ldr.w	r3, [r8]
 80176f6:	685a      	ldr	r2, [r3, #4]
 80176f8:	bb62      	cbnz	r2, 8017754 <_malloc_r+0xdc>
 80176fa:	f8c8 7000 	str.w	r7, [r8]
 80176fe:	e00f      	b.n	8017720 <_malloc_r+0xa8>
 8017700:	6822      	ldr	r2, [r4, #0]
 8017702:	1b52      	subs	r2, r2, r5
 8017704:	d420      	bmi.n	8017748 <_malloc_r+0xd0>
 8017706:	2a0b      	cmp	r2, #11
 8017708:	d917      	bls.n	801773a <_malloc_r+0xc2>
 801770a:	1961      	adds	r1, r4, r5
 801770c:	42a3      	cmp	r3, r4
 801770e:	6025      	str	r5, [r4, #0]
 8017710:	bf18      	it	ne
 8017712:	6059      	strne	r1, [r3, #4]
 8017714:	6863      	ldr	r3, [r4, #4]
 8017716:	bf08      	it	eq
 8017718:	f8c8 1000 	streq.w	r1, [r8]
 801771c:	5162      	str	r2, [r4, r5]
 801771e:	604b      	str	r3, [r1, #4]
 8017720:	4630      	mov	r0, r6
 8017722:	f000 f82f 	bl	8017784 <__malloc_unlock>
 8017726:	f104 000b 	add.w	r0, r4, #11
 801772a:	1d23      	adds	r3, r4, #4
 801772c:	f020 0007 	bic.w	r0, r0, #7
 8017730:	1ac2      	subs	r2, r0, r3
 8017732:	bf1c      	itt	ne
 8017734:	1a1b      	subne	r3, r3, r0
 8017736:	50a3      	strne	r3, [r4, r2]
 8017738:	e7af      	b.n	801769a <_malloc_r+0x22>
 801773a:	6862      	ldr	r2, [r4, #4]
 801773c:	42a3      	cmp	r3, r4
 801773e:	bf0c      	ite	eq
 8017740:	f8c8 2000 	streq.w	r2, [r8]
 8017744:	605a      	strne	r2, [r3, #4]
 8017746:	e7eb      	b.n	8017720 <_malloc_r+0xa8>
 8017748:	4623      	mov	r3, r4
 801774a:	6864      	ldr	r4, [r4, #4]
 801774c:	e7ae      	b.n	80176ac <_malloc_r+0x34>
 801774e:	463c      	mov	r4, r7
 8017750:	687f      	ldr	r7, [r7, #4]
 8017752:	e7b6      	b.n	80176c2 <_malloc_r+0x4a>
 8017754:	461a      	mov	r2, r3
 8017756:	685b      	ldr	r3, [r3, #4]
 8017758:	42a3      	cmp	r3, r4
 801775a:	d1fb      	bne.n	8017754 <_malloc_r+0xdc>
 801775c:	2300      	movs	r3, #0
 801775e:	6053      	str	r3, [r2, #4]
 8017760:	e7de      	b.n	8017720 <_malloc_r+0xa8>
 8017762:	230c      	movs	r3, #12
 8017764:	6033      	str	r3, [r6, #0]
 8017766:	4630      	mov	r0, r6
 8017768:	f000 f80c 	bl	8017784 <__malloc_unlock>
 801776c:	e794      	b.n	8017698 <_malloc_r+0x20>
 801776e:	6005      	str	r5, [r0, #0]
 8017770:	e7d6      	b.n	8017720 <_malloc_r+0xa8>
 8017772:	bf00      	nop
 8017774:	20013068 	.word	0x20013068

08017778 <__malloc_lock>:
 8017778:	4801      	ldr	r0, [pc, #4]	@ (8017780 <__malloc_lock+0x8>)
 801777a:	f000 ba74 	b.w	8017c66 <__retarget_lock_acquire_recursive>
 801777e:	bf00      	nop
 8017780:	200131ac 	.word	0x200131ac

08017784 <__malloc_unlock>:
 8017784:	4801      	ldr	r0, [pc, #4]	@ (801778c <__malloc_unlock+0x8>)
 8017786:	f000 ba6f 	b.w	8017c68 <__retarget_lock_release_recursive>
 801778a:	bf00      	nop
 801778c:	200131ac 	.word	0x200131ac

08017790 <std>:
 8017790:	2300      	movs	r3, #0
 8017792:	b510      	push	{r4, lr}
 8017794:	4604      	mov	r4, r0
 8017796:	e9c0 3300 	strd	r3, r3, [r0]
 801779a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801779e:	6083      	str	r3, [r0, #8]
 80177a0:	8181      	strh	r1, [r0, #12]
 80177a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80177a4:	81c2      	strh	r2, [r0, #14]
 80177a6:	6183      	str	r3, [r0, #24]
 80177a8:	4619      	mov	r1, r3
 80177aa:	2208      	movs	r2, #8
 80177ac:	305c      	adds	r0, #92	@ 0x5c
 80177ae:	f000 f99b 	bl	8017ae8 <memset>
 80177b2:	4b0d      	ldr	r3, [pc, #52]	@ (80177e8 <std+0x58>)
 80177b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80177b6:	4b0d      	ldr	r3, [pc, #52]	@ (80177ec <std+0x5c>)
 80177b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80177ba:	4b0d      	ldr	r3, [pc, #52]	@ (80177f0 <std+0x60>)
 80177bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80177be:	4b0d      	ldr	r3, [pc, #52]	@ (80177f4 <std+0x64>)
 80177c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80177c2:	4b0d      	ldr	r3, [pc, #52]	@ (80177f8 <std+0x68>)
 80177c4:	6224      	str	r4, [r4, #32]
 80177c6:	429c      	cmp	r4, r3
 80177c8:	d006      	beq.n	80177d8 <std+0x48>
 80177ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80177ce:	4294      	cmp	r4, r2
 80177d0:	d002      	beq.n	80177d8 <std+0x48>
 80177d2:	33d0      	adds	r3, #208	@ 0xd0
 80177d4:	429c      	cmp	r4, r3
 80177d6:	d105      	bne.n	80177e4 <std+0x54>
 80177d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80177dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177e0:	f000 ba40 	b.w	8017c64 <__retarget_lock_init_recursive>
 80177e4:	bd10      	pop	{r4, pc}
 80177e6:	bf00      	nop
 80177e8:	080179e9 	.word	0x080179e9
 80177ec:	08017a0b 	.word	0x08017a0b
 80177f0:	08017a43 	.word	0x08017a43
 80177f4:	08017a67 	.word	0x08017a67
 80177f8:	2001306c 	.word	0x2001306c

080177fc <stdio_exit_handler>:
 80177fc:	4a02      	ldr	r2, [pc, #8]	@ (8017808 <stdio_exit_handler+0xc>)
 80177fe:	4903      	ldr	r1, [pc, #12]	@ (801780c <stdio_exit_handler+0x10>)
 8017800:	4803      	ldr	r0, [pc, #12]	@ (8017810 <stdio_exit_handler+0x14>)
 8017802:	f000 b869 	b.w	80178d8 <_fwalk_sglue>
 8017806:	bf00      	nop
 8017808:	20000078 	.word	0x20000078
 801780c:	08018671 	.word	0x08018671
 8017810:	20000088 	.word	0x20000088

08017814 <cleanup_stdio>:
 8017814:	6841      	ldr	r1, [r0, #4]
 8017816:	4b0c      	ldr	r3, [pc, #48]	@ (8017848 <cleanup_stdio+0x34>)
 8017818:	4299      	cmp	r1, r3
 801781a:	b510      	push	{r4, lr}
 801781c:	4604      	mov	r4, r0
 801781e:	d001      	beq.n	8017824 <cleanup_stdio+0x10>
 8017820:	f000 ff26 	bl	8018670 <_fflush_r>
 8017824:	68a1      	ldr	r1, [r4, #8]
 8017826:	4b09      	ldr	r3, [pc, #36]	@ (801784c <cleanup_stdio+0x38>)
 8017828:	4299      	cmp	r1, r3
 801782a:	d002      	beq.n	8017832 <cleanup_stdio+0x1e>
 801782c:	4620      	mov	r0, r4
 801782e:	f000 ff1f 	bl	8018670 <_fflush_r>
 8017832:	68e1      	ldr	r1, [r4, #12]
 8017834:	4b06      	ldr	r3, [pc, #24]	@ (8017850 <cleanup_stdio+0x3c>)
 8017836:	4299      	cmp	r1, r3
 8017838:	d004      	beq.n	8017844 <cleanup_stdio+0x30>
 801783a:	4620      	mov	r0, r4
 801783c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017840:	f000 bf16 	b.w	8018670 <_fflush_r>
 8017844:	bd10      	pop	{r4, pc}
 8017846:	bf00      	nop
 8017848:	2001306c 	.word	0x2001306c
 801784c:	200130d4 	.word	0x200130d4
 8017850:	2001313c 	.word	0x2001313c

08017854 <global_stdio_init.part.0>:
 8017854:	b510      	push	{r4, lr}
 8017856:	4b0b      	ldr	r3, [pc, #44]	@ (8017884 <global_stdio_init.part.0+0x30>)
 8017858:	4c0b      	ldr	r4, [pc, #44]	@ (8017888 <global_stdio_init.part.0+0x34>)
 801785a:	4a0c      	ldr	r2, [pc, #48]	@ (801788c <global_stdio_init.part.0+0x38>)
 801785c:	601a      	str	r2, [r3, #0]
 801785e:	4620      	mov	r0, r4
 8017860:	2200      	movs	r2, #0
 8017862:	2104      	movs	r1, #4
 8017864:	f7ff ff94 	bl	8017790 <std>
 8017868:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801786c:	2201      	movs	r2, #1
 801786e:	2109      	movs	r1, #9
 8017870:	f7ff ff8e 	bl	8017790 <std>
 8017874:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017878:	2202      	movs	r2, #2
 801787a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801787e:	2112      	movs	r1, #18
 8017880:	f7ff bf86 	b.w	8017790 <std>
 8017884:	200131a4 	.word	0x200131a4
 8017888:	2001306c 	.word	0x2001306c
 801788c:	080177fd 	.word	0x080177fd

08017890 <__sfp_lock_acquire>:
 8017890:	4801      	ldr	r0, [pc, #4]	@ (8017898 <__sfp_lock_acquire+0x8>)
 8017892:	f000 b9e8 	b.w	8017c66 <__retarget_lock_acquire_recursive>
 8017896:	bf00      	nop
 8017898:	200131ad 	.word	0x200131ad

0801789c <__sfp_lock_release>:
 801789c:	4801      	ldr	r0, [pc, #4]	@ (80178a4 <__sfp_lock_release+0x8>)
 801789e:	f000 b9e3 	b.w	8017c68 <__retarget_lock_release_recursive>
 80178a2:	bf00      	nop
 80178a4:	200131ad 	.word	0x200131ad

080178a8 <__sinit>:
 80178a8:	b510      	push	{r4, lr}
 80178aa:	4604      	mov	r4, r0
 80178ac:	f7ff fff0 	bl	8017890 <__sfp_lock_acquire>
 80178b0:	6a23      	ldr	r3, [r4, #32]
 80178b2:	b11b      	cbz	r3, 80178bc <__sinit+0x14>
 80178b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178b8:	f7ff bff0 	b.w	801789c <__sfp_lock_release>
 80178bc:	4b04      	ldr	r3, [pc, #16]	@ (80178d0 <__sinit+0x28>)
 80178be:	6223      	str	r3, [r4, #32]
 80178c0:	4b04      	ldr	r3, [pc, #16]	@ (80178d4 <__sinit+0x2c>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d1f5      	bne.n	80178b4 <__sinit+0xc>
 80178c8:	f7ff ffc4 	bl	8017854 <global_stdio_init.part.0>
 80178cc:	e7f2      	b.n	80178b4 <__sinit+0xc>
 80178ce:	bf00      	nop
 80178d0:	08017815 	.word	0x08017815
 80178d4:	200131a4 	.word	0x200131a4

080178d8 <_fwalk_sglue>:
 80178d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178dc:	4607      	mov	r7, r0
 80178de:	4688      	mov	r8, r1
 80178e0:	4614      	mov	r4, r2
 80178e2:	2600      	movs	r6, #0
 80178e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80178e8:	f1b9 0901 	subs.w	r9, r9, #1
 80178ec:	d505      	bpl.n	80178fa <_fwalk_sglue+0x22>
 80178ee:	6824      	ldr	r4, [r4, #0]
 80178f0:	2c00      	cmp	r4, #0
 80178f2:	d1f7      	bne.n	80178e4 <_fwalk_sglue+0xc>
 80178f4:	4630      	mov	r0, r6
 80178f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178fa:	89ab      	ldrh	r3, [r5, #12]
 80178fc:	2b01      	cmp	r3, #1
 80178fe:	d907      	bls.n	8017910 <_fwalk_sglue+0x38>
 8017900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017904:	3301      	adds	r3, #1
 8017906:	d003      	beq.n	8017910 <_fwalk_sglue+0x38>
 8017908:	4629      	mov	r1, r5
 801790a:	4638      	mov	r0, r7
 801790c:	47c0      	blx	r8
 801790e:	4306      	orrs	r6, r0
 8017910:	3568      	adds	r5, #104	@ 0x68
 8017912:	e7e9      	b.n	80178e8 <_fwalk_sglue+0x10>

08017914 <iprintf>:
 8017914:	b40f      	push	{r0, r1, r2, r3}
 8017916:	b507      	push	{r0, r1, r2, lr}
 8017918:	4906      	ldr	r1, [pc, #24]	@ (8017934 <iprintf+0x20>)
 801791a:	ab04      	add	r3, sp, #16
 801791c:	6808      	ldr	r0, [r1, #0]
 801791e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017922:	6881      	ldr	r1, [r0, #8]
 8017924:	9301      	str	r3, [sp, #4]
 8017926:	f000 fb7b 	bl	8018020 <_vfiprintf_r>
 801792a:	b003      	add	sp, #12
 801792c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017930:	b004      	add	sp, #16
 8017932:	4770      	bx	lr
 8017934:	20000084 	.word	0x20000084

08017938 <sniprintf>:
 8017938:	b40c      	push	{r2, r3}
 801793a:	b530      	push	{r4, r5, lr}
 801793c:	4b18      	ldr	r3, [pc, #96]	@ (80179a0 <sniprintf+0x68>)
 801793e:	1e0c      	subs	r4, r1, #0
 8017940:	681d      	ldr	r5, [r3, #0]
 8017942:	b09d      	sub	sp, #116	@ 0x74
 8017944:	da08      	bge.n	8017958 <sniprintf+0x20>
 8017946:	238b      	movs	r3, #139	@ 0x8b
 8017948:	602b      	str	r3, [r5, #0]
 801794a:	f04f 30ff 	mov.w	r0, #4294967295
 801794e:	b01d      	add	sp, #116	@ 0x74
 8017950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017954:	b002      	add	sp, #8
 8017956:	4770      	bx	lr
 8017958:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801795c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017960:	f04f 0300 	mov.w	r3, #0
 8017964:	931b      	str	r3, [sp, #108]	@ 0x6c
 8017966:	bf14      	ite	ne
 8017968:	f104 33ff 	addne.w	r3, r4, #4294967295
 801796c:	4623      	moveq	r3, r4
 801796e:	9304      	str	r3, [sp, #16]
 8017970:	9307      	str	r3, [sp, #28]
 8017972:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017976:	9002      	str	r0, [sp, #8]
 8017978:	9006      	str	r0, [sp, #24]
 801797a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801797e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017980:	ab21      	add	r3, sp, #132	@ 0x84
 8017982:	a902      	add	r1, sp, #8
 8017984:	4628      	mov	r0, r5
 8017986:	9301      	str	r3, [sp, #4]
 8017988:	f000 fa24 	bl	8017dd4 <_svfiprintf_r>
 801798c:	1c43      	adds	r3, r0, #1
 801798e:	bfbc      	itt	lt
 8017990:	238b      	movlt	r3, #139	@ 0x8b
 8017992:	602b      	strlt	r3, [r5, #0]
 8017994:	2c00      	cmp	r4, #0
 8017996:	d0da      	beq.n	801794e <sniprintf+0x16>
 8017998:	9b02      	ldr	r3, [sp, #8]
 801799a:	2200      	movs	r2, #0
 801799c:	701a      	strb	r2, [r3, #0]
 801799e:	e7d6      	b.n	801794e <sniprintf+0x16>
 80179a0:	20000084 	.word	0x20000084

080179a4 <siprintf>:
 80179a4:	b40e      	push	{r1, r2, r3}
 80179a6:	b510      	push	{r4, lr}
 80179a8:	b09d      	sub	sp, #116	@ 0x74
 80179aa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80179ac:	9002      	str	r0, [sp, #8]
 80179ae:	9006      	str	r0, [sp, #24]
 80179b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80179b4:	480a      	ldr	r0, [pc, #40]	@ (80179e0 <siprintf+0x3c>)
 80179b6:	9107      	str	r1, [sp, #28]
 80179b8:	9104      	str	r1, [sp, #16]
 80179ba:	490a      	ldr	r1, [pc, #40]	@ (80179e4 <siprintf+0x40>)
 80179bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80179c0:	9105      	str	r1, [sp, #20]
 80179c2:	2400      	movs	r4, #0
 80179c4:	a902      	add	r1, sp, #8
 80179c6:	6800      	ldr	r0, [r0, #0]
 80179c8:	9301      	str	r3, [sp, #4]
 80179ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80179cc:	f000 fa02 	bl	8017dd4 <_svfiprintf_r>
 80179d0:	9b02      	ldr	r3, [sp, #8]
 80179d2:	701c      	strb	r4, [r3, #0]
 80179d4:	b01d      	add	sp, #116	@ 0x74
 80179d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179da:	b003      	add	sp, #12
 80179dc:	4770      	bx	lr
 80179de:	bf00      	nop
 80179e0:	20000084 	.word	0x20000084
 80179e4:	ffff0208 	.word	0xffff0208

080179e8 <__sread>:
 80179e8:	b510      	push	{r4, lr}
 80179ea:	460c      	mov	r4, r1
 80179ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179f0:	f000 f8da 	bl	8017ba8 <_read_r>
 80179f4:	2800      	cmp	r0, #0
 80179f6:	bfab      	itete	ge
 80179f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80179fa:	89a3      	ldrhlt	r3, [r4, #12]
 80179fc:	181b      	addge	r3, r3, r0
 80179fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017a02:	bfac      	ite	ge
 8017a04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017a06:	81a3      	strhlt	r3, [r4, #12]
 8017a08:	bd10      	pop	{r4, pc}

08017a0a <__swrite>:
 8017a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a0e:	461f      	mov	r7, r3
 8017a10:	898b      	ldrh	r3, [r1, #12]
 8017a12:	05db      	lsls	r3, r3, #23
 8017a14:	4605      	mov	r5, r0
 8017a16:	460c      	mov	r4, r1
 8017a18:	4616      	mov	r6, r2
 8017a1a:	d505      	bpl.n	8017a28 <__swrite+0x1e>
 8017a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a20:	2302      	movs	r3, #2
 8017a22:	2200      	movs	r2, #0
 8017a24:	f000 f8ae 	bl	8017b84 <_lseek_r>
 8017a28:	89a3      	ldrh	r3, [r4, #12]
 8017a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017a32:	81a3      	strh	r3, [r4, #12]
 8017a34:	4632      	mov	r2, r6
 8017a36:	463b      	mov	r3, r7
 8017a38:	4628      	mov	r0, r5
 8017a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a3e:	f000 b8d5 	b.w	8017bec <_write_r>

08017a42 <__sseek>:
 8017a42:	b510      	push	{r4, lr}
 8017a44:	460c      	mov	r4, r1
 8017a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a4a:	f000 f89b 	bl	8017b84 <_lseek_r>
 8017a4e:	1c43      	adds	r3, r0, #1
 8017a50:	89a3      	ldrh	r3, [r4, #12]
 8017a52:	bf15      	itete	ne
 8017a54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017a56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017a5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017a5e:	81a3      	strheq	r3, [r4, #12]
 8017a60:	bf18      	it	ne
 8017a62:	81a3      	strhne	r3, [r4, #12]
 8017a64:	bd10      	pop	{r4, pc}

08017a66 <__sclose>:
 8017a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a6a:	f000 b87b 	b.w	8017b64 <_close_r>

08017a6e <_vsniprintf_r>:
 8017a6e:	b530      	push	{r4, r5, lr}
 8017a70:	4614      	mov	r4, r2
 8017a72:	2c00      	cmp	r4, #0
 8017a74:	b09b      	sub	sp, #108	@ 0x6c
 8017a76:	4605      	mov	r5, r0
 8017a78:	461a      	mov	r2, r3
 8017a7a:	da05      	bge.n	8017a88 <_vsniprintf_r+0x1a>
 8017a7c:	238b      	movs	r3, #139	@ 0x8b
 8017a7e:	6003      	str	r3, [r0, #0]
 8017a80:	f04f 30ff 	mov.w	r0, #4294967295
 8017a84:	b01b      	add	sp, #108	@ 0x6c
 8017a86:	bd30      	pop	{r4, r5, pc}
 8017a88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017a8c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017a90:	f04f 0300 	mov.w	r3, #0
 8017a94:	9319      	str	r3, [sp, #100]	@ 0x64
 8017a96:	bf14      	ite	ne
 8017a98:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017a9c:	4623      	moveq	r3, r4
 8017a9e:	9302      	str	r3, [sp, #8]
 8017aa0:	9305      	str	r3, [sp, #20]
 8017aa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017aa6:	9100      	str	r1, [sp, #0]
 8017aa8:	9104      	str	r1, [sp, #16]
 8017aaa:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017aae:	4669      	mov	r1, sp
 8017ab0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017ab2:	f000 f98f 	bl	8017dd4 <_svfiprintf_r>
 8017ab6:	1c43      	adds	r3, r0, #1
 8017ab8:	bfbc      	itt	lt
 8017aba:	238b      	movlt	r3, #139	@ 0x8b
 8017abc:	602b      	strlt	r3, [r5, #0]
 8017abe:	2c00      	cmp	r4, #0
 8017ac0:	d0e0      	beq.n	8017a84 <_vsniprintf_r+0x16>
 8017ac2:	9b00      	ldr	r3, [sp, #0]
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	701a      	strb	r2, [r3, #0]
 8017ac8:	e7dc      	b.n	8017a84 <_vsniprintf_r+0x16>
	...

08017acc <vsniprintf>:
 8017acc:	b507      	push	{r0, r1, r2, lr}
 8017ace:	9300      	str	r3, [sp, #0]
 8017ad0:	4613      	mov	r3, r2
 8017ad2:	460a      	mov	r2, r1
 8017ad4:	4601      	mov	r1, r0
 8017ad6:	4803      	ldr	r0, [pc, #12]	@ (8017ae4 <vsniprintf+0x18>)
 8017ad8:	6800      	ldr	r0, [r0, #0]
 8017ada:	f7ff ffc8 	bl	8017a6e <_vsniprintf_r>
 8017ade:	b003      	add	sp, #12
 8017ae0:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ae4:	20000084 	.word	0x20000084

08017ae8 <memset>:
 8017ae8:	4402      	add	r2, r0
 8017aea:	4603      	mov	r3, r0
 8017aec:	4293      	cmp	r3, r2
 8017aee:	d100      	bne.n	8017af2 <memset+0xa>
 8017af0:	4770      	bx	lr
 8017af2:	f803 1b01 	strb.w	r1, [r3], #1
 8017af6:	e7f9      	b.n	8017aec <memset+0x4>

08017af8 <strchr>:
 8017af8:	b2c9      	uxtb	r1, r1
 8017afa:	4603      	mov	r3, r0
 8017afc:	4618      	mov	r0, r3
 8017afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b02:	b112      	cbz	r2, 8017b0a <strchr+0x12>
 8017b04:	428a      	cmp	r2, r1
 8017b06:	d1f9      	bne.n	8017afc <strchr+0x4>
 8017b08:	4770      	bx	lr
 8017b0a:	2900      	cmp	r1, #0
 8017b0c:	bf18      	it	ne
 8017b0e:	2000      	movne	r0, #0
 8017b10:	4770      	bx	lr

08017b12 <strncpy>:
 8017b12:	b510      	push	{r4, lr}
 8017b14:	3901      	subs	r1, #1
 8017b16:	4603      	mov	r3, r0
 8017b18:	b132      	cbz	r2, 8017b28 <strncpy+0x16>
 8017b1a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017b1e:	f803 4b01 	strb.w	r4, [r3], #1
 8017b22:	3a01      	subs	r2, #1
 8017b24:	2c00      	cmp	r4, #0
 8017b26:	d1f7      	bne.n	8017b18 <strncpy+0x6>
 8017b28:	441a      	add	r2, r3
 8017b2a:	2100      	movs	r1, #0
 8017b2c:	4293      	cmp	r3, r2
 8017b2e:	d100      	bne.n	8017b32 <strncpy+0x20>
 8017b30:	bd10      	pop	{r4, pc}
 8017b32:	f803 1b01 	strb.w	r1, [r3], #1
 8017b36:	e7f9      	b.n	8017b2c <strncpy+0x1a>

08017b38 <strstr>:
 8017b38:	780a      	ldrb	r2, [r1, #0]
 8017b3a:	b570      	push	{r4, r5, r6, lr}
 8017b3c:	b96a      	cbnz	r2, 8017b5a <strstr+0x22>
 8017b3e:	bd70      	pop	{r4, r5, r6, pc}
 8017b40:	429a      	cmp	r2, r3
 8017b42:	d109      	bne.n	8017b58 <strstr+0x20>
 8017b44:	460c      	mov	r4, r1
 8017b46:	4605      	mov	r5, r0
 8017b48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d0f6      	beq.n	8017b3e <strstr+0x6>
 8017b50:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017b54:	429e      	cmp	r6, r3
 8017b56:	d0f7      	beq.n	8017b48 <strstr+0x10>
 8017b58:	3001      	adds	r0, #1
 8017b5a:	7803      	ldrb	r3, [r0, #0]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d1ef      	bne.n	8017b40 <strstr+0x8>
 8017b60:	4618      	mov	r0, r3
 8017b62:	e7ec      	b.n	8017b3e <strstr+0x6>

08017b64 <_close_r>:
 8017b64:	b538      	push	{r3, r4, r5, lr}
 8017b66:	4d06      	ldr	r5, [pc, #24]	@ (8017b80 <_close_r+0x1c>)
 8017b68:	2300      	movs	r3, #0
 8017b6a:	4604      	mov	r4, r0
 8017b6c:	4608      	mov	r0, r1
 8017b6e:	602b      	str	r3, [r5, #0]
 8017b70:	f7ed fcb7 	bl	80054e2 <_close>
 8017b74:	1c43      	adds	r3, r0, #1
 8017b76:	d102      	bne.n	8017b7e <_close_r+0x1a>
 8017b78:	682b      	ldr	r3, [r5, #0]
 8017b7a:	b103      	cbz	r3, 8017b7e <_close_r+0x1a>
 8017b7c:	6023      	str	r3, [r4, #0]
 8017b7e:	bd38      	pop	{r3, r4, r5, pc}
 8017b80:	200131a8 	.word	0x200131a8

08017b84 <_lseek_r>:
 8017b84:	b538      	push	{r3, r4, r5, lr}
 8017b86:	4d07      	ldr	r5, [pc, #28]	@ (8017ba4 <_lseek_r+0x20>)
 8017b88:	4604      	mov	r4, r0
 8017b8a:	4608      	mov	r0, r1
 8017b8c:	4611      	mov	r1, r2
 8017b8e:	2200      	movs	r2, #0
 8017b90:	602a      	str	r2, [r5, #0]
 8017b92:	461a      	mov	r2, r3
 8017b94:	f7ed fccc 	bl	8005530 <_lseek>
 8017b98:	1c43      	adds	r3, r0, #1
 8017b9a:	d102      	bne.n	8017ba2 <_lseek_r+0x1e>
 8017b9c:	682b      	ldr	r3, [r5, #0]
 8017b9e:	b103      	cbz	r3, 8017ba2 <_lseek_r+0x1e>
 8017ba0:	6023      	str	r3, [r4, #0]
 8017ba2:	bd38      	pop	{r3, r4, r5, pc}
 8017ba4:	200131a8 	.word	0x200131a8

08017ba8 <_read_r>:
 8017ba8:	b538      	push	{r3, r4, r5, lr}
 8017baa:	4d07      	ldr	r5, [pc, #28]	@ (8017bc8 <_read_r+0x20>)
 8017bac:	4604      	mov	r4, r0
 8017bae:	4608      	mov	r0, r1
 8017bb0:	4611      	mov	r1, r2
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	602a      	str	r2, [r5, #0]
 8017bb6:	461a      	mov	r2, r3
 8017bb8:	f7ed fc5a 	bl	8005470 <_read>
 8017bbc:	1c43      	adds	r3, r0, #1
 8017bbe:	d102      	bne.n	8017bc6 <_read_r+0x1e>
 8017bc0:	682b      	ldr	r3, [r5, #0]
 8017bc2:	b103      	cbz	r3, 8017bc6 <_read_r+0x1e>
 8017bc4:	6023      	str	r3, [r4, #0]
 8017bc6:	bd38      	pop	{r3, r4, r5, pc}
 8017bc8:	200131a8 	.word	0x200131a8

08017bcc <_sbrk_r>:
 8017bcc:	b538      	push	{r3, r4, r5, lr}
 8017bce:	4d06      	ldr	r5, [pc, #24]	@ (8017be8 <_sbrk_r+0x1c>)
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	4604      	mov	r4, r0
 8017bd4:	4608      	mov	r0, r1
 8017bd6:	602b      	str	r3, [r5, #0]
 8017bd8:	f7ed fcb8 	bl	800554c <_sbrk>
 8017bdc:	1c43      	adds	r3, r0, #1
 8017bde:	d102      	bne.n	8017be6 <_sbrk_r+0x1a>
 8017be0:	682b      	ldr	r3, [r5, #0]
 8017be2:	b103      	cbz	r3, 8017be6 <_sbrk_r+0x1a>
 8017be4:	6023      	str	r3, [r4, #0]
 8017be6:	bd38      	pop	{r3, r4, r5, pc}
 8017be8:	200131a8 	.word	0x200131a8

08017bec <_write_r>:
 8017bec:	b538      	push	{r3, r4, r5, lr}
 8017bee:	4d07      	ldr	r5, [pc, #28]	@ (8017c0c <_write_r+0x20>)
 8017bf0:	4604      	mov	r4, r0
 8017bf2:	4608      	mov	r0, r1
 8017bf4:	4611      	mov	r1, r2
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	602a      	str	r2, [r5, #0]
 8017bfa:	461a      	mov	r2, r3
 8017bfc:	f7ed fc55 	bl	80054aa <_write>
 8017c00:	1c43      	adds	r3, r0, #1
 8017c02:	d102      	bne.n	8017c0a <_write_r+0x1e>
 8017c04:	682b      	ldr	r3, [r5, #0]
 8017c06:	b103      	cbz	r3, 8017c0a <_write_r+0x1e>
 8017c08:	6023      	str	r3, [r4, #0]
 8017c0a:	bd38      	pop	{r3, r4, r5, pc}
 8017c0c:	200131a8 	.word	0x200131a8

08017c10 <__errno>:
 8017c10:	4b01      	ldr	r3, [pc, #4]	@ (8017c18 <__errno+0x8>)
 8017c12:	6818      	ldr	r0, [r3, #0]
 8017c14:	4770      	bx	lr
 8017c16:	bf00      	nop
 8017c18:	20000084 	.word	0x20000084

08017c1c <__libc_init_array>:
 8017c1c:	b570      	push	{r4, r5, r6, lr}
 8017c1e:	4d0d      	ldr	r5, [pc, #52]	@ (8017c54 <__libc_init_array+0x38>)
 8017c20:	4c0d      	ldr	r4, [pc, #52]	@ (8017c58 <__libc_init_array+0x3c>)
 8017c22:	1b64      	subs	r4, r4, r5
 8017c24:	10a4      	asrs	r4, r4, #2
 8017c26:	2600      	movs	r6, #0
 8017c28:	42a6      	cmp	r6, r4
 8017c2a:	d109      	bne.n	8017c40 <__libc_init_array+0x24>
 8017c2c:	4d0b      	ldr	r5, [pc, #44]	@ (8017c5c <__libc_init_array+0x40>)
 8017c2e:	4c0c      	ldr	r4, [pc, #48]	@ (8017c60 <__libc_init_array+0x44>)
 8017c30:	f000 feae 	bl	8018990 <_init>
 8017c34:	1b64      	subs	r4, r4, r5
 8017c36:	10a4      	asrs	r4, r4, #2
 8017c38:	2600      	movs	r6, #0
 8017c3a:	42a6      	cmp	r6, r4
 8017c3c:	d105      	bne.n	8017c4a <__libc_init_array+0x2e>
 8017c3e:	bd70      	pop	{r4, r5, r6, pc}
 8017c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c44:	4798      	blx	r3
 8017c46:	3601      	adds	r6, #1
 8017c48:	e7ee      	b.n	8017c28 <__libc_init_array+0xc>
 8017c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c4e:	4798      	blx	r3
 8017c50:	3601      	adds	r6, #1
 8017c52:	e7f2      	b.n	8017c3a <__libc_init_array+0x1e>
 8017c54:	0801c238 	.word	0x0801c238
 8017c58:	0801c238 	.word	0x0801c238
 8017c5c:	0801c238 	.word	0x0801c238
 8017c60:	0801c23c 	.word	0x0801c23c

08017c64 <__retarget_lock_init_recursive>:
 8017c64:	4770      	bx	lr

08017c66 <__retarget_lock_acquire_recursive>:
 8017c66:	4770      	bx	lr

08017c68 <__retarget_lock_release_recursive>:
 8017c68:	4770      	bx	lr

08017c6a <memcpy>:
 8017c6a:	440a      	add	r2, r1
 8017c6c:	4291      	cmp	r1, r2
 8017c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017c72:	d100      	bne.n	8017c76 <memcpy+0xc>
 8017c74:	4770      	bx	lr
 8017c76:	b510      	push	{r4, lr}
 8017c78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017c80:	4291      	cmp	r1, r2
 8017c82:	d1f9      	bne.n	8017c78 <memcpy+0xe>
 8017c84:	bd10      	pop	{r4, pc}
	...

08017c88 <_free_r>:
 8017c88:	b538      	push	{r3, r4, r5, lr}
 8017c8a:	4605      	mov	r5, r0
 8017c8c:	2900      	cmp	r1, #0
 8017c8e:	d041      	beq.n	8017d14 <_free_r+0x8c>
 8017c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c94:	1f0c      	subs	r4, r1, #4
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	bfb8      	it	lt
 8017c9a:	18e4      	addlt	r4, r4, r3
 8017c9c:	f7ff fd6c 	bl	8017778 <__malloc_lock>
 8017ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8017d18 <_free_r+0x90>)
 8017ca2:	6813      	ldr	r3, [r2, #0]
 8017ca4:	b933      	cbnz	r3, 8017cb4 <_free_r+0x2c>
 8017ca6:	6063      	str	r3, [r4, #4]
 8017ca8:	6014      	str	r4, [r2, #0]
 8017caa:	4628      	mov	r0, r5
 8017cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017cb0:	f7ff bd68 	b.w	8017784 <__malloc_unlock>
 8017cb4:	42a3      	cmp	r3, r4
 8017cb6:	d908      	bls.n	8017cca <_free_r+0x42>
 8017cb8:	6820      	ldr	r0, [r4, #0]
 8017cba:	1821      	adds	r1, r4, r0
 8017cbc:	428b      	cmp	r3, r1
 8017cbe:	bf01      	itttt	eq
 8017cc0:	6819      	ldreq	r1, [r3, #0]
 8017cc2:	685b      	ldreq	r3, [r3, #4]
 8017cc4:	1809      	addeq	r1, r1, r0
 8017cc6:	6021      	streq	r1, [r4, #0]
 8017cc8:	e7ed      	b.n	8017ca6 <_free_r+0x1e>
 8017cca:	461a      	mov	r2, r3
 8017ccc:	685b      	ldr	r3, [r3, #4]
 8017cce:	b10b      	cbz	r3, 8017cd4 <_free_r+0x4c>
 8017cd0:	42a3      	cmp	r3, r4
 8017cd2:	d9fa      	bls.n	8017cca <_free_r+0x42>
 8017cd4:	6811      	ldr	r1, [r2, #0]
 8017cd6:	1850      	adds	r0, r2, r1
 8017cd8:	42a0      	cmp	r0, r4
 8017cda:	d10b      	bne.n	8017cf4 <_free_r+0x6c>
 8017cdc:	6820      	ldr	r0, [r4, #0]
 8017cde:	4401      	add	r1, r0
 8017ce0:	1850      	adds	r0, r2, r1
 8017ce2:	4283      	cmp	r3, r0
 8017ce4:	6011      	str	r1, [r2, #0]
 8017ce6:	d1e0      	bne.n	8017caa <_free_r+0x22>
 8017ce8:	6818      	ldr	r0, [r3, #0]
 8017cea:	685b      	ldr	r3, [r3, #4]
 8017cec:	6053      	str	r3, [r2, #4]
 8017cee:	4408      	add	r0, r1
 8017cf0:	6010      	str	r0, [r2, #0]
 8017cf2:	e7da      	b.n	8017caa <_free_r+0x22>
 8017cf4:	d902      	bls.n	8017cfc <_free_r+0x74>
 8017cf6:	230c      	movs	r3, #12
 8017cf8:	602b      	str	r3, [r5, #0]
 8017cfa:	e7d6      	b.n	8017caa <_free_r+0x22>
 8017cfc:	6820      	ldr	r0, [r4, #0]
 8017cfe:	1821      	adds	r1, r4, r0
 8017d00:	428b      	cmp	r3, r1
 8017d02:	bf04      	itt	eq
 8017d04:	6819      	ldreq	r1, [r3, #0]
 8017d06:	685b      	ldreq	r3, [r3, #4]
 8017d08:	6063      	str	r3, [r4, #4]
 8017d0a:	bf04      	itt	eq
 8017d0c:	1809      	addeq	r1, r1, r0
 8017d0e:	6021      	streq	r1, [r4, #0]
 8017d10:	6054      	str	r4, [r2, #4]
 8017d12:	e7ca      	b.n	8017caa <_free_r+0x22>
 8017d14:	bd38      	pop	{r3, r4, r5, pc}
 8017d16:	bf00      	nop
 8017d18:	20013068 	.word	0x20013068

08017d1c <__ssputs_r>:
 8017d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d20:	688e      	ldr	r6, [r1, #8]
 8017d22:	461f      	mov	r7, r3
 8017d24:	42be      	cmp	r6, r7
 8017d26:	680b      	ldr	r3, [r1, #0]
 8017d28:	4682      	mov	sl, r0
 8017d2a:	460c      	mov	r4, r1
 8017d2c:	4690      	mov	r8, r2
 8017d2e:	d82d      	bhi.n	8017d8c <__ssputs_r+0x70>
 8017d30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017d34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017d38:	d026      	beq.n	8017d88 <__ssputs_r+0x6c>
 8017d3a:	6965      	ldr	r5, [r4, #20]
 8017d3c:	6909      	ldr	r1, [r1, #16]
 8017d3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d42:	eba3 0901 	sub.w	r9, r3, r1
 8017d46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017d4a:	1c7b      	adds	r3, r7, #1
 8017d4c:	444b      	add	r3, r9
 8017d4e:	106d      	asrs	r5, r5, #1
 8017d50:	429d      	cmp	r5, r3
 8017d52:	bf38      	it	cc
 8017d54:	461d      	movcc	r5, r3
 8017d56:	0553      	lsls	r3, r2, #21
 8017d58:	d527      	bpl.n	8017daa <__ssputs_r+0x8e>
 8017d5a:	4629      	mov	r1, r5
 8017d5c:	f7ff fc8c 	bl	8017678 <_malloc_r>
 8017d60:	4606      	mov	r6, r0
 8017d62:	b360      	cbz	r0, 8017dbe <__ssputs_r+0xa2>
 8017d64:	6921      	ldr	r1, [r4, #16]
 8017d66:	464a      	mov	r2, r9
 8017d68:	f7ff ff7f 	bl	8017c6a <memcpy>
 8017d6c:	89a3      	ldrh	r3, [r4, #12]
 8017d6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d76:	81a3      	strh	r3, [r4, #12]
 8017d78:	6126      	str	r6, [r4, #16]
 8017d7a:	6165      	str	r5, [r4, #20]
 8017d7c:	444e      	add	r6, r9
 8017d7e:	eba5 0509 	sub.w	r5, r5, r9
 8017d82:	6026      	str	r6, [r4, #0]
 8017d84:	60a5      	str	r5, [r4, #8]
 8017d86:	463e      	mov	r6, r7
 8017d88:	42be      	cmp	r6, r7
 8017d8a:	d900      	bls.n	8017d8e <__ssputs_r+0x72>
 8017d8c:	463e      	mov	r6, r7
 8017d8e:	6820      	ldr	r0, [r4, #0]
 8017d90:	4632      	mov	r2, r6
 8017d92:	4641      	mov	r1, r8
 8017d94:	f000 fd28 	bl	80187e8 <memmove>
 8017d98:	68a3      	ldr	r3, [r4, #8]
 8017d9a:	1b9b      	subs	r3, r3, r6
 8017d9c:	60a3      	str	r3, [r4, #8]
 8017d9e:	6823      	ldr	r3, [r4, #0]
 8017da0:	4433      	add	r3, r6
 8017da2:	6023      	str	r3, [r4, #0]
 8017da4:	2000      	movs	r0, #0
 8017da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017daa:	462a      	mov	r2, r5
 8017dac:	f000 fd36 	bl	801881c <_realloc_r>
 8017db0:	4606      	mov	r6, r0
 8017db2:	2800      	cmp	r0, #0
 8017db4:	d1e0      	bne.n	8017d78 <__ssputs_r+0x5c>
 8017db6:	6921      	ldr	r1, [r4, #16]
 8017db8:	4650      	mov	r0, sl
 8017dba:	f7ff ff65 	bl	8017c88 <_free_r>
 8017dbe:	230c      	movs	r3, #12
 8017dc0:	f8ca 3000 	str.w	r3, [sl]
 8017dc4:	89a3      	ldrh	r3, [r4, #12]
 8017dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017dca:	81a3      	strh	r3, [r4, #12]
 8017dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8017dd0:	e7e9      	b.n	8017da6 <__ssputs_r+0x8a>
	...

08017dd4 <_svfiprintf_r>:
 8017dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dd8:	4698      	mov	r8, r3
 8017dda:	898b      	ldrh	r3, [r1, #12]
 8017ddc:	061b      	lsls	r3, r3, #24
 8017dde:	b09d      	sub	sp, #116	@ 0x74
 8017de0:	4607      	mov	r7, r0
 8017de2:	460d      	mov	r5, r1
 8017de4:	4614      	mov	r4, r2
 8017de6:	d510      	bpl.n	8017e0a <_svfiprintf_r+0x36>
 8017de8:	690b      	ldr	r3, [r1, #16]
 8017dea:	b973      	cbnz	r3, 8017e0a <_svfiprintf_r+0x36>
 8017dec:	2140      	movs	r1, #64	@ 0x40
 8017dee:	f7ff fc43 	bl	8017678 <_malloc_r>
 8017df2:	6028      	str	r0, [r5, #0]
 8017df4:	6128      	str	r0, [r5, #16]
 8017df6:	b930      	cbnz	r0, 8017e06 <_svfiprintf_r+0x32>
 8017df8:	230c      	movs	r3, #12
 8017dfa:	603b      	str	r3, [r7, #0]
 8017dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8017e00:	b01d      	add	sp, #116	@ 0x74
 8017e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e06:	2340      	movs	r3, #64	@ 0x40
 8017e08:	616b      	str	r3, [r5, #20]
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e0e:	2320      	movs	r3, #32
 8017e10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e18:	2330      	movs	r3, #48	@ 0x30
 8017e1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017fb8 <_svfiprintf_r+0x1e4>
 8017e1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017e22:	f04f 0901 	mov.w	r9, #1
 8017e26:	4623      	mov	r3, r4
 8017e28:	469a      	mov	sl, r3
 8017e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e2e:	b10a      	cbz	r2, 8017e34 <_svfiprintf_r+0x60>
 8017e30:	2a25      	cmp	r2, #37	@ 0x25
 8017e32:	d1f9      	bne.n	8017e28 <_svfiprintf_r+0x54>
 8017e34:	ebba 0b04 	subs.w	fp, sl, r4
 8017e38:	d00b      	beq.n	8017e52 <_svfiprintf_r+0x7e>
 8017e3a:	465b      	mov	r3, fp
 8017e3c:	4622      	mov	r2, r4
 8017e3e:	4629      	mov	r1, r5
 8017e40:	4638      	mov	r0, r7
 8017e42:	f7ff ff6b 	bl	8017d1c <__ssputs_r>
 8017e46:	3001      	adds	r0, #1
 8017e48:	f000 80a7 	beq.w	8017f9a <_svfiprintf_r+0x1c6>
 8017e4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e4e:	445a      	add	r2, fp
 8017e50:	9209      	str	r2, [sp, #36]	@ 0x24
 8017e52:	f89a 3000 	ldrb.w	r3, [sl]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	f000 809f 	beq.w	8017f9a <_svfiprintf_r+0x1c6>
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8017e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e66:	f10a 0a01 	add.w	sl, sl, #1
 8017e6a:	9304      	str	r3, [sp, #16]
 8017e6c:	9307      	str	r3, [sp, #28]
 8017e6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017e72:	931a      	str	r3, [sp, #104]	@ 0x68
 8017e74:	4654      	mov	r4, sl
 8017e76:	2205      	movs	r2, #5
 8017e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e7c:	484e      	ldr	r0, [pc, #312]	@ (8017fb8 <_svfiprintf_r+0x1e4>)
 8017e7e:	f7e8 f9df 	bl	8000240 <memchr>
 8017e82:	9a04      	ldr	r2, [sp, #16]
 8017e84:	b9d8      	cbnz	r0, 8017ebe <_svfiprintf_r+0xea>
 8017e86:	06d0      	lsls	r0, r2, #27
 8017e88:	bf44      	itt	mi
 8017e8a:	2320      	movmi	r3, #32
 8017e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e90:	0711      	lsls	r1, r2, #28
 8017e92:	bf44      	itt	mi
 8017e94:	232b      	movmi	r3, #43	@ 0x2b
 8017e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8017e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ea0:	d015      	beq.n	8017ece <_svfiprintf_r+0xfa>
 8017ea2:	9a07      	ldr	r2, [sp, #28]
 8017ea4:	4654      	mov	r4, sl
 8017ea6:	2000      	movs	r0, #0
 8017ea8:	f04f 0c0a 	mov.w	ip, #10
 8017eac:	4621      	mov	r1, r4
 8017eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017eb2:	3b30      	subs	r3, #48	@ 0x30
 8017eb4:	2b09      	cmp	r3, #9
 8017eb6:	d94b      	bls.n	8017f50 <_svfiprintf_r+0x17c>
 8017eb8:	b1b0      	cbz	r0, 8017ee8 <_svfiprintf_r+0x114>
 8017eba:	9207      	str	r2, [sp, #28]
 8017ebc:	e014      	b.n	8017ee8 <_svfiprintf_r+0x114>
 8017ebe:	eba0 0308 	sub.w	r3, r0, r8
 8017ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8017ec6:	4313      	orrs	r3, r2
 8017ec8:	9304      	str	r3, [sp, #16]
 8017eca:	46a2      	mov	sl, r4
 8017ecc:	e7d2      	b.n	8017e74 <_svfiprintf_r+0xa0>
 8017ece:	9b03      	ldr	r3, [sp, #12]
 8017ed0:	1d19      	adds	r1, r3, #4
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	9103      	str	r1, [sp, #12]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	bfbb      	ittet	lt
 8017eda:	425b      	neglt	r3, r3
 8017edc:	f042 0202 	orrlt.w	r2, r2, #2
 8017ee0:	9307      	strge	r3, [sp, #28]
 8017ee2:	9307      	strlt	r3, [sp, #28]
 8017ee4:	bfb8      	it	lt
 8017ee6:	9204      	strlt	r2, [sp, #16]
 8017ee8:	7823      	ldrb	r3, [r4, #0]
 8017eea:	2b2e      	cmp	r3, #46	@ 0x2e
 8017eec:	d10a      	bne.n	8017f04 <_svfiprintf_r+0x130>
 8017eee:	7863      	ldrb	r3, [r4, #1]
 8017ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ef2:	d132      	bne.n	8017f5a <_svfiprintf_r+0x186>
 8017ef4:	9b03      	ldr	r3, [sp, #12]
 8017ef6:	1d1a      	adds	r2, r3, #4
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	9203      	str	r2, [sp, #12]
 8017efc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017f00:	3402      	adds	r4, #2
 8017f02:	9305      	str	r3, [sp, #20]
 8017f04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017fc8 <_svfiprintf_r+0x1f4>
 8017f08:	7821      	ldrb	r1, [r4, #0]
 8017f0a:	2203      	movs	r2, #3
 8017f0c:	4650      	mov	r0, sl
 8017f0e:	f7e8 f997 	bl	8000240 <memchr>
 8017f12:	b138      	cbz	r0, 8017f24 <_svfiprintf_r+0x150>
 8017f14:	9b04      	ldr	r3, [sp, #16]
 8017f16:	eba0 000a 	sub.w	r0, r0, sl
 8017f1a:	2240      	movs	r2, #64	@ 0x40
 8017f1c:	4082      	lsls	r2, r0
 8017f1e:	4313      	orrs	r3, r2
 8017f20:	3401      	adds	r4, #1
 8017f22:	9304      	str	r3, [sp, #16]
 8017f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f28:	4824      	ldr	r0, [pc, #144]	@ (8017fbc <_svfiprintf_r+0x1e8>)
 8017f2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017f2e:	2206      	movs	r2, #6
 8017f30:	f7e8 f986 	bl	8000240 <memchr>
 8017f34:	2800      	cmp	r0, #0
 8017f36:	d036      	beq.n	8017fa6 <_svfiprintf_r+0x1d2>
 8017f38:	4b21      	ldr	r3, [pc, #132]	@ (8017fc0 <_svfiprintf_r+0x1ec>)
 8017f3a:	bb1b      	cbnz	r3, 8017f84 <_svfiprintf_r+0x1b0>
 8017f3c:	9b03      	ldr	r3, [sp, #12]
 8017f3e:	3307      	adds	r3, #7
 8017f40:	f023 0307 	bic.w	r3, r3, #7
 8017f44:	3308      	adds	r3, #8
 8017f46:	9303      	str	r3, [sp, #12]
 8017f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f4a:	4433      	add	r3, r6
 8017f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f4e:	e76a      	b.n	8017e26 <_svfiprintf_r+0x52>
 8017f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f54:	460c      	mov	r4, r1
 8017f56:	2001      	movs	r0, #1
 8017f58:	e7a8      	b.n	8017eac <_svfiprintf_r+0xd8>
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	3401      	adds	r4, #1
 8017f5e:	9305      	str	r3, [sp, #20]
 8017f60:	4619      	mov	r1, r3
 8017f62:	f04f 0c0a 	mov.w	ip, #10
 8017f66:	4620      	mov	r0, r4
 8017f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f6c:	3a30      	subs	r2, #48	@ 0x30
 8017f6e:	2a09      	cmp	r2, #9
 8017f70:	d903      	bls.n	8017f7a <_svfiprintf_r+0x1a6>
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d0c6      	beq.n	8017f04 <_svfiprintf_r+0x130>
 8017f76:	9105      	str	r1, [sp, #20]
 8017f78:	e7c4      	b.n	8017f04 <_svfiprintf_r+0x130>
 8017f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f7e:	4604      	mov	r4, r0
 8017f80:	2301      	movs	r3, #1
 8017f82:	e7f0      	b.n	8017f66 <_svfiprintf_r+0x192>
 8017f84:	ab03      	add	r3, sp, #12
 8017f86:	9300      	str	r3, [sp, #0]
 8017f88:	462a      	mov	r2, r5
 8017f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8017fc4 <_svfiprintf_r+0x1f0>)
 8017f8c:	a904      	add	r1, sp, #16
 8017f8e:	4638      	mov	r0, r7
 8017f90:	f3af 8000 	nop.w
 8017f94:	1c42      	adds	r2, r0, #1
 8017f96:	4606      	mov	r6, r0
 8017f98:	d1d6      	bne.n	8017f48 <_svfiprintf_r+0x174>
 8017f9a:	89ab      	ldrh	r3, [r5, #12]
 8017f9c:	065b      	lsls	r3, r3, #25
 8017f9e:	f53f af2d 	bmi.w	8017dfc <_svfiprintf_r+0x28>
 8017fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017fa4:	e72c      	b.n	8017e00 <_svfiprintf_r+0x2c>
 8017fa6:	ab03      	add	r3, sp, #12
 8017fa8:	9300      	str	r3, [sp, #0]
 8017faa:	462a      	mov	r2, r5
 8017fac:	4b05      	ldr	r3, [pc, #20]	@ (8017fc4 <_svfiprintf_r+0x1f0>)
 8017fae:	a904      	add	r1, sp, #16
 8017fb0:	4638      	mov	r0, r7
 8017fb2:	f000 f9bb 	bl	801832c <_printf_i>
 8017fb6:	e7ed      	b.n	8017f94 <_svfiprintf_r+0x1c0>
 8017fb8:	0801c1fa 	.word	0x0801c1fa
 8017fbc:	0801c204 	.word	0x0801c204
 8017fc0:	00000000 	.word	0x00000000
 8017fc4:	08017d1d 	.word	0x08017d1d
 8017fc8:	0801c200 	.word	0x0801c200

08017fcc <__sfputc_r>:
 8017fcc:	6893      	ldr	r3, [r2, #8]
 8017fce:	3b01      	subs	r3, #1
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	b410      	push	{r4}
 8017fd4:	6093      	str	r3, [r2, #8]
 8017fd6:	da08      	bge.n	8017fea <__sfputc_r+0x1e>
 8017fd8:	6994      	ldr	r4, [r2, #24]
 8017fda:	42a3      	cmp	r3, r4
 8017fdc:	db01      	blt.n	8017fe2 <__sfputc_r+0x16>
 8017fde:	290a      	cmp	r1, #10
 8017fe0:	d103      	bne.n	8017fea <__sfputc_r+0x1e>
 8017fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fe6:	f000 bb6b 	b.w	80186c0 <__swbuf_r>
 8017fea:	6813      	ldr	r3, [r2, #0]
 8017fec:	1c58      	adds	r0, r3, #1
 8017fee:	6010      	str	r0, [r2, #0]
 8017ff0:	7019      	strb	r1, [r3, #0]
 8017ff2:	4608      	mov	r0, r1
 8017ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ff8:	4770      	bx	lr

08017ffa <__sfputs_r>:
 8017ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ffc:	4606      	mov	r6, r0
 8017ffe:	460f      	mov	r7, r1
 8018000:	4614      	mov	r4, r2
 8018002:	18d5      	adds	r5, r2, r3
 8018004:	42ac      	cmp	r4, r5
 8018006:	d101      	bne.n	801800c <__sfputs_r+0x12>
 8018008:	2000      	movs	r0, #0
 801800a:	e007      	b.n	801801c <__sfputs_r+0x22>
 801800c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018010:	463a      	mov	r2, r7
 8018012:	4630      	mov	r0, r6
 8018014:	f7ff ffda 	bl	8017fcc <__sfputc_r>
 8018018:	1c43      	adds	r3, r0, #1
 801801a:	d1f3      	bne.n	8018004 <__sfputs_r+0xa>
 801801c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018020 <_vfiprintf_r>:
 8018020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018024:	460d      	mov	r5, r1
 8018026:	b09d      	sub	sp, #116	@ 0x74
 8018028:	4614      	mov	r4, r2
 801802a:	4698      	mov	r8, r3
 801802c:	4606      	mov	r6, r0
 801802e:	b118      	cbz	r0, 8018038 <_vfiprintf_r+0x18>
 8018030:	6a03      	ldr	r3, [r0, #32]
 8018032:	b90b      	cbnz	r3, 8018038 <_vfiprintf_r+0x18>
 8018034:	f7ff fc38 	bl	80178a8 <__sinit>
 8018038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801803a:	07d9      	lsls	r1, r3, #31
 801803c:	d405      	bmi.n	801804a <_vfiprintf_r+0x2a>
 801803e:	89ab      	ldrh	r3, [r5, #12]
 8018040:	059a      	lsls	r2, r3, #22
 8018042:	d402      	bmi.n	801804a <_vfiprintf_r+0x2a>
 8018044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018046:	f7ff fe0e 	bl	8017c66 <__retarget_lock_acquire_recursive>
 801804a:	89ab      	ldrh	r3, [r5, #12]
 801804c:	071b      	lsls	r3, r3, #28
 801804e:	d501      	bpl.n	8018054 <_vfiprintf_r+0x34>
 8018050:	692b      	ldr	r3, [r5, #16]
 8018052:	b99b      	cbnz	r3, 801807c <_vfiprintf_r+0x5c>
 8018054:	4629      	mov	r1, r5
 8018056:	4630      	mov	r0, r6
 8018058:	f000 fb70 	bl	801873c <__swsetup_r>
 801805c:	b170      	cbz	r0, 801807c <_vfiprintf_r+0x5c>
 801805e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018060:	07dc      	lsls	r4, r3, #31
 8018062:	d504      	bpl.n	801806e <_vfiprintf_r+0x4e>
 8018064:	f04f 30ff 	mov.w	r0, #4294967295
 8018068:	b01d      	add	sp, #116	@ 0x74
 801806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801806e:	89ab      	ldrh	r3, [r5, #12]
 8018070:	0598      	lsls	r0, r3, #22
 8018072:	d4f7      	bmi.n	8018064 <_vfiprintf_r+0x44>
 8018074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018076:	f7ff fdf7 	bl	8017c68 <__retarget_lock_release_recursive>
 801807a:	e7f3      	b.n	8018064 <_vfiprintf_r+0x44>
 801807c:	2300      	movs	r3, #0
 801807e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018080:	2320      	movs	r3, #32
 8018082:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018086:	f8cd 800c 	str.w	r8, [sp, #12]
 801808a:	2330      	movs	r3, #48	@ 0x30
 801808c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801823c <_vfiprintf_r+0x21c>
 8018090:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018094:	f04f 0901 	mov.w	r9, #1
 8018098:	4623      	mov	r3, r4
 801809a:	469a      	mov	sl, r3
 801809c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180a0:	b10a      	cbz	r2, 80180a6 <_vfiprintf_r+0x86>
 80180a2:	2a25      	cmp	r2, #37	@ 0x25
 80180a4:	d1f9      	bne.n	801809a <_vfiprintf_r+0x7a>
 80180a6:	ebba 0b04 	subs.w	fp, sl, r4
 80180aa:	d00b      	beq.n	80180c4 <_vfiprintf_r+0xa4>
 80180ac:	465b      	mov	r3, fp
 80180ae:	4622      	mov	r2, r4
 80180b0:	4629      	mov	r1, r5
 80180b2:	4630      	mov	r0, r6
 80180b4:	f7ff ffa1 	bl	8017ffa <__sfputs_r>
 80180b8:	3001      	adds	r0, #1
 80180ba:	f000 80a7 	beq.w	801820c <_vfiprintf_r+0x1ec>
 80180be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80180c0:	445a      	add	r2, fp
 80180c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80180c4:	f89a 3000 	ldrb.w	r3, [sl]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	f000 809f 	beq.w	801820c <_vfiprintf_r+0x1ec>
 80180ce:	2300      	movs	r3, #0
 80180d0:	f04f 32ff 	mov.w	r2, #4294967295
 80180d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180d8:	f10a 0a01 	add.w	sl, sl, #1
 80180dc:	9304      	str	r3, [sp, #16]
 80180de:	9307      	str	r3, [sp, #28]
 80180e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80180e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80180e6:	4654      	mov	r4, sl
 80180e8:	2205      	movs	r2, #5
 80180ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180ee:	4853      	ldr	r0, [pc, #332]	@ (801823c <_vfiprintf_r+0x21c>)
 80180f0:	f7e8 f8a6 	bl	8000240 <memchr>
 80180f4:	9a04      	ldr	r2, [sp, #16]
 80180f6:	b9d8      	cbnz	r0, 8018130 <_vfiprintf_r+0x110>
 80180f8:	06d1      	lsls	r1, r2, #27
 80180fa:	bf44      	itt	mi
 80180fc:	2320      	movmi	r3, #32
 80180fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018102:	0713      	lsls	r3, r2, #28
 8018104:	bf44      	itt	mi
 8018106:	232b      	movmi	r3, #43	@ 0x2b
 8018108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801810c:	f89a 3000 	ldrb.w	r3, [sl]
 8018110:	2b2a      	cmp	r3, #42	@ 0x2a
 8018112:	d015      	beq.n	8018140 <_vfiprintf_r+0x120>
 8018114:	9a07      	ldr	r2, [sp, #28]
 8018116:	4654      	mov	r4, sl
 8018118:	2000      	movs	r0, #0
 801811a:	f04f 0c0a 	mov.w	ip, #10
 801811e:	4621      	mov	r1, r4
 8018120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018124:	3b30      	subs	r3, #48	@ 0x30
 8018126:	2b09      	cmp	r3, #9
 8018128:	d94b      	bls.n	80181c2 <_vfiprintf_r+0x1a2>
 801812a:	b1b0      	cbz	r0, 801815a <_vfiprintf_r+0x13a>
 801812c:	9207      	str	r2, [sp, #28]
 801812e:	e014      	b.n	801815a <_vfiprintf_r+0x13a>
 8018130:	eba0 0308 	sub.w	r3, r0, r8
 8018134:	fa09 f303 	lsl.w	r3, r9, r3
 8018138:	4313      	orrs	r3, r2
 801813a:	9304      	str	r3, [sp, #16]
 801813c:	46a2      	mov	sl, r4
 801813e:	e7d2      	b.n	80180e6 <_vfiprintf_r+0xc6>
 8018140:	9b03      	ldr	r3, [sp, #12]
 8018142:	1d19      	adds	r1, r3, #4
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	9103      	str	r1, [sp, #12]
 8018148:	2b00      	cmp	r3, #0
 801814a:	bfbb      	ittet	lt
 801814c:	425b      	neglt	r3, r3
 801814e:	f042 0202 	orrlt.w	r2, r2, #2
 8018152:	9307      	strge	r3, [sp, #28]
 8018154:	9307      	strlt	r3, [sp, #28]
 8018156:	bfb8      	it	lt
 8018158:	9204      	strlt	r2, [sp, #16]
 801815a:	7823      	ldrb	r3, [r4, #0]
 801815c:	2b2e      	cmp	r3, #46	@ 0x2e
 801815e:	d10a      	bne.n	8018176 <_vfiprintf_r+0x156>
 8018160:	7863      	ldrb	r3, [r4, #1]
 8018162:	2b2a      	cmp	r3, #42	@ 0x2a
 8018164:	d132      	bne.n	80181cc <_vfiprintf_r+0x1ac>
 8018166:	9b03      	ldr	r3, [sp, #12]
 8018168:	1d1a      	adds	r2, r3, #4
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	9203      	str	r2, [sp, #12]
 801816e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018172:	3402      	adds	r4, #2
 8018174:	9305      	str	r3, [sp, #20]
 8018176:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801824c <_vfiprintf_r+0x22c>
 801817a:	7821      	ldrb	r1, [r4, #0]
 801817c:	2203      	movs	r2, #3
 801817e:	4650      	mov	r0, sl
 8018180:	f7e8 f85e 	bl	8000240 <memchr>
 8018184:	b138      	cbz	r0, 8018196 <_vfiprintf_r+0x176>
 8018186:	9b04      	ldr	r3, [sp, #16]
 8018188:	eba0 000a 	sub.w	r0, r0, sl
 801818c:	2240      	movs	r2, #64	@ 0x40
 801818e:	4082      	lsls	r2, r0
 8018190:	4313      	orrs	r3, r2
 8018192:	3401      	adds	r4, #1
 8018194:	9304      	str	r3, [sp, #16]
 8018196:	f814 1b01 	ldrb.w	r1, [r4], #1
 801819a:	4829      	ldr	r0, [pc, #164]	@ (8018240 <_vfiprintf_r+0x220>)
 801819c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80181a0:	2206      	movs	r2, #6
 80181a2:	f7e8 f84d 	bl	8000240 <memchr>
 80181a6:	2800      	cmp	r0, #0
 80181a8:	d03f      	beq.n	801822a <_vfiprintf_r+0x20a>
 80181aa:	4b26      	ldr	r3, [pc, #152]	@ (8018244 <_vfiprintf_r+0x224>)
 80181ac:	bb1b      	cbnz	r3, 80181f6 <_vfiprintf_r+0x1d6>
 80181ae:	9b03      	ldr	r3, [sp, #12]
 80181b0:	3307      	adds	r3, #7
 80181b2:	f023 0307 	bic.w	r3, r3, #7
 80181b6:	3308      	adds	r3, #8
 80181b8:	9303      	str	r3, [sp, #12]
 80181ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181bc:	443b      	add	r3, r7
 80181be:	9309      	str	r3, [sp, #36]	@ 0x24
 80181c0:	e76a      	b.n	8018098 <_vfiprintf_r+0x78>
 80181c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80181c6:	460c      	mov	r4, r1
 80181c8:	2001      	movs	r0, #1
 80181ca:	e7a8      	b.n	801811e <_vfiprintf_r+0xfe>
 80181cc:	2300      	movs	r3, #0
 80181ce:	3401      	adds	r4, #1
 80181d0:	9305      	str	r3, [sp, #20]
 80181d2:	4619      	mov	r1, r3
 80181d4:	f04f 0c0a 	mov.w	ip, #10
 80181d8:	4620      	mov	r0, r4
 80181da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181de:	3a30      	subs	r2, #48	@ 0x30
 80181e0:	2a09      	cmp	r2, #9
 80181e2:	d903      	bls.n	80181ec <_vfiprintf_r+0x1cc>
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d0c6      	beq.n	8018176 <_vfiprintf_r+0x156>
 80181e8:	9105      	str	r1, [sp, #20]
 80181ea:	e7c4      	b.n	8018176 <_vfiprintf_r+0x156>
 80181ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80181f0:	4604      	mov	r4, r0
 80181f2:	2301      	movs	r3, #1
 80181f4:	e7f0      	b.n	80181d8 <_vfiprintf_r+0x1b8>
 80181f6:	ab03      	add	r3, sp, #12
 80181f8:	9300      	str	r3, [sp, #0]
 80181fa:	462a      	mov	r2, r5
 80181fc:	4b12      	ldr	r3, [pc, #72]	@ (8018248 <_vfiprintf_r+0x228>)
 80181fe:	a904      	add	r1, sp, #16
 8018200:	4630      	mov	r0, r6
 8018202:	f3af 8000 	nop.w
 8018206:	4607      	mov	r7, r0
 8018208:	1c78      	adds	r0, r7, #1
 801820a:	d1d6      	bne.n	80181ba <_vfiprintf_r+0x19a>
 801820c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801820e:	07d9      	lsls	r1, r3, #31
 8018210:	d405      	bmi.n	801821e <_vfiprintf_r+0x1fe>
 8018212:	89ab      	ldrh	r3, [r5, #12]
 8018214:	059a      	lsls	r2, r3, #22
 8018216:	d402      	bmi.n	801821e <_vfiprintf_r+0x1fe>
 8018218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801821a:	f7ff fd25 	bl	8017c68 <__retarget_lock_release_recursive>
 801821e:	89ab      	ldrh	r3, [r5, #12]
 8018220:	065b      	lsls	r3, r3, #25
 8018222:	f53f af1f 	bmi.w	8018064 <_vfiprintf_r+0x44>
 8018226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018228:	e71e      	b.n	8018068 <_vfiprintf_r+0x48>
 801822a:	ab03      	add	r3, sp, #12
 801822c:	9300      	str	r3, [sp, #0]
 801822e:	462a      	mov	r2, r5
 8018230:	4b05      	ldr	r3, [pc, #20]	@ (8018248 <_vfiprintf_r+0x228>)
 8018232:	a904      	add	r1, sp, #16
 8018234:	4630      	mov	r0, r6
 8018236:	f000 f879 	bl	801832c <_printf_i>
 801823a:	e7e4      	b.n	8018206 <_vfiprintf_r+0x1e6>
 801823c:	0801c1fa 	.word	0x0801c1fa
 8018240:	0801c204 	.word	0x0801c204
 8018244:	00000000 	.word	0x00000000
 8018248:	08017ffb 	.word	0x08017ffb
 801824c:	0801c200 	.word	0x0801c200

08018250 <_printf_common>:
 8018250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018254:	4616      	mov	r6, r2
 8018256:	4698      	mov	r8, r3
 8018258:	688a      	ldr	r2, [r1, #8]
 801825a:	690b      	ldr	r3, [r1, #16]
 801825c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018260:	4293      	cmp	r3, r2
 8018262:	bfb8      	it	lt
 8018264:	4613      	movlt	r3, r2
 8018266:	6033      	str	r3, [r6, #0]
 8018268:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801826c:	4607      	mov	r7, r0
 801826e:	460c      	mov	r4, r1
 8018270:	b10a      	cbz	r2, 8018276 <_printf_common+0x26>
 8018272:	3301      	adds	r3, #1
 8018274:	6033      	str	r3, [r6, #0]
 8018276:	6823      	ldr	r3, [r4, #0]
 8018278:	0699      	lsls	r1, r3, #26
 801827a:	bf42      	ittt	mi
 801827c:	6833      	ldrmi	r3, [r6, #0]
 801827e:	3302      	addmi	r3, #2
 8018280:	6033      	strmi	r3, [r6, #0]
 8018282:	6825      	ldr	r5, [r4, #0]
 8018284:	f015 0506 	ands.w	r5, r5, #6
 8018288:	d106      	bne.n	8018298 <_printf_common+0x48>
 801828a:	f104 0a19 	add.w	sl, r4, #25
 801828e:	68e3      	ldr	r3, [r4, #12]
 8018290:	6832      	ldr	r2, [r6, #0]
 8018292:	1a9b      	subs	r3, r3, r2
 8018294:	42ab      	cmp	r3, r5
 8018296:	dc26      	bgt.n	80182e6 <_printf_common+0x96>
 8018298:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801829c:	6822      	ldr	r2, [r4, #0]
 801829e:	3b00      	subs	r3, #0
 80182a0:	bf18      	it	ne
 80182a2:	2301      	movne	r3, #1
 80182a4:	0692      	lsls	r2, r2, #26
 80182a6:	d42b      	bmi.n	8018300 <_printf_common+0xb0>
 80182a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80182ac:	4641      	mov	r1, r8
 80182ae:	4638      	mov	r0, r7
 80182b0:	47c8      	blx	r9
 80182b2:	3001      	adds	r0, #1
 80182b4:	d01e      	beq.n	80182f4 <_printf_common+0xa4>
 80182b6:	6823      	ldr	r3, [r4, #0]
 80182b8:	6922      	ldr	r2, [r4, #16]
 80182ba:	f003 0306 	and.w	r3, r3, #6
 80182be:	2b04      	cmp	r3, #4
 80182c0:	bf02      	ittt	eq
 80182c2:	68e5      	ldreq	r5, [r4, #12]
 80182c4:	6833      	ldreq	r3, [r6, #0]
 80182c6:	1aed      	subeq	r5, r5, r3
 80182c8:	68a3      	ldr	r3, [r4, #8]
 80182ca:	bf0c      	ite	eq
 80182cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80182d0:	2500      	movne	r5, #0
 80182d2:	4293      	cmp	r3, r2
 80182d4:	bfc4      	itt	gt
 80182d6:	1a9b      	subgt	r3, r3, r2
 80182d8:	18ed      	addgt	r5, r5, r3
 80182da:	2600      	movs	r6, #0
 80182dc:	341a      	adds	r4, #26
 80182de:	42b5      	cmp	r5, r6
 80182e0:	d11a      	bne.n	8018318 <_printf_common+0xc8>
 80182e2:	2000      	movs	r0, #0
 80182e4:	e008      	b.n	80182f8 <_printf_common+0xa8>
 80182e6:	2301      	movs	r3, #1
 80182e8:	4652      	mov	r2, sl
 80182ea:	4641      	mov	r1, r8
 80182ec:	4638      	mov	r0, r7
 80182ee:	47c8      	blx	r9
 80182f0:	3001      	adds	r0, #1
 80182f2:	d103      	bne.n	80182fc <_printf_common+0xac>
 80182f4:	f04f 30ff 	mov.w	r0, #4294967295
 80182f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182fc:	3501      	adds	r5, #1
 80182fe:	e7c6      	b.n	801828e <_printf_common+0x3e>
 8018300:	18e1      	adds	r1, r4, r3
 8018302:	1c5a      	adds	r2, r3, #1
 8018304:	2030      	movs	r0, #48	@ 0x30
 8018306:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801830a:	4422      	add	r2, r4
 801830c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018310:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018314:	3302      	adds	r3, #2
 8018316:	e7c7      	b.n	80182a8 <_printf_common+0x58>
 8018318:	2301      	movs	r3, #1
 801831a:	4622      	mov	r2, r4
 801831c:	4641      	mov	r1, r8
 801831e:	4638      	mov	r0, r7
 8018320:	47c8      	blx	r9
 8018322:	3001      	adds	r0, #1
 8018324:	d0e6      	beq.n	80182f4 <_printf_common+0xa4>
 8018326:	3601      	adds	r6, #1
 8018328:	e7d9      	b.n	80182de <_printf_common+0x8e>
	...

0801832c <_printf_i>:
 801832c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018330:	7e0f      	ldrb	r7, [r1, #24]
 8018332:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018334:	2f78      	cmp	r7, #120	@ 0x78
 8018336:	4691      	mov	r9, r2
 8018338:	4680      	mov	r8, r0
 801833a:	460c      	mov	r4, r1
 801833c:	469a      	mov	sl, r3
 801833e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018342:	d807      	bhi.n	8018354 <_printf_i+0x28>
 8018344:	2f62      	cmp	r7, #98	@ 0x62
 8018346:	d80a      	bhi.n	801835e <_printf_i+0x32>
 8018348:	2f00      	cmp	r7, #0
 801834a:	f000 80d1 	beq.w	80184f0 <_printf_i+0x1c4>
 801834e:	2f58      	cmp	r7, #88	@ 0x58
 8018350:	f000 80b8 	beq.w	80184c4 <_printf_i+0x198>
 8018354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018358:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801835c:	e03a      	b.n	80183d4 <_printf_i+0xa8>
 801835e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018362:	2b15      	cmp	r3, #21
 8018364:	d8f6      	bhi.n	8018354 <_printf_i+0x28>
 8018366:	a101      	add	r1, pc, #4	@ (adr r1, 801836c <_printf_i+0x40>)
 8018368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801836c:	080183c5 	.word	0x080183c5
 8018370:	080183d9 	.word	0x080183d9
 8018374:	08018355 	.word	0x08018355
 8018378:	08018355 	.word	0x08018355
 801837c:	08018355 	.word	0x08018355
 8018380:	08018355 	.word	0x08018355
 8018384:	080183d9 	.word	0x080183d9
 8018388:	08018355 	.word	0x08018355
 801838c:	08018355 	.word	0x08018355
 8018390:	08018355 	.word	0x08018355
 8018394:	08018355 	.word	0x08018355
 8018398:	080184d7 	.word	0x080184d7
 801839c:	08018403 	.word	0x08018403
 80183a0:	08018491 	.word	0x08018491
 80183a4:	08018355 	.word	0x08018355
 80183a8:	08018355 	.word	0x08018355
 80183ac:	080184f9 	.word	0x080184f9
 80183b0:	08018355 	.word	0x08018355
 80183b4:	08018403 	.word	0x08018403
 80183b8:	08018355 	.word	0x08018355
 80183bc:	08018355 	.word	0x08018355
 80183c0:	08018499 	.word	0x08018499
 80183c4:	6833      	ldr	r3, [r6, #0]
 80183c6:	1d1a      	adds	r2, r3, #4
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	6032      	str	r2, [r6, #0]
 80183cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80183d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80183d4:	2301      	movs	r3, #1
 80183d6:	e09c      	b.n	8018512 <_printf_i+0x1e6>
 80183d8:	6833      	ldr	r3, [r6, #0]
 80183da:	6820      	ldr	r0, [r4, #0]
 80183dc:	1d19      	adds	r1, r3, #4
 80183de:	6031      	str	r1, [r6, #0]
 80183e0:	0606      	lsls	r6, r0, #24
 80183e2:	d501      	bpl.n	80183e8 <_printf_i+0xbc>
 80183e4:	681d      	ldr	r5, [r3, #0]
 80183e6:	e003      	b.n	80183f0 <_printf_i+0xc4>
 80183e8:	0645      	lsls	r5, r0, #25
 80183ea:	d5fb      	bpl.n	80183e4 <_printf_i+0xb8>
 80183ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80183f0:	2d00      	cmp	r5, #0
 80183f2:	da03      	bge.n	80183fc <_printf_i+0xd0>
 80183f4:	232d      	movs	r3, #45	@ 0x2d
 80183f6:	426d      	negs	r5, r5
 80183f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80183fc:	4858      	ldr	r0, [pc, #352]	@ (8018560 <_printf_i+0x234>)
 80183fe:	230a      	movs	r3, #10
 8018400:	e011      	b.n	8018426 <_printf_i+0xfa>
 8018402:	6821      	ldr	r1, [r4, #0]
 8018404:	6833      	ldr	r3, [r6, #0]
 8018406:	0608      	lsls	r0, r1, #24
 8018408:	f853 5b04 	ldr.w	r5, [r3], #4
 801840c:	d402      	bmi.n	8018414 <_printf_i+0xe8>
 801840e:	0649      	lsls	r1, r1, #25
 8018410:	bf48      	it	mi
 8018412:	b2ad      	uxthmi	r5, r5
 8018414:	2f6f      	cmp	r7, #111	@ 0x6f
 8018416:	4852      	ldr	r0, [pc, #328]	@ (8018560 <_printf_i+0x234>)
 8018418:	6033      	str	r3, [r6, #0]
 801841a:	bf14      	ite	ne
 801841c:	230a      	movne	r3, #10
 801841e:	2308      	moveq	r3, #8
 8018420:	2100      	movs	r1, #0
 8018422:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018426:	6866      	ldr	r6, [r4, #4]
 8018428:	60a6      	str	r6, [r4, #8]
 801842a:	2e00      	cmp	r6, #0
 801842c:	db05      	blt.n	801843a <_printf_i+0x10e>
 801842e:	6821      	ldr	r1, [r4, #0]
 8018430:	432e      	orrs	r6, r5
 8018432:	f021 0104 	bic.w	r1, r1, #4
 8018436:	6021      	str	r1, [r4, #0]
 8018438:	d04b      	beq.n	80184d2 <_printf_i+0x1a6>
 801843a:	4616      	mov	r6, r2
 801843c:	fbb5 f1f3 	udiv	r1, r5, r3
 8018440:	fb03 5711 	mls	r7, r3, r1, r5
 8018444:	5dc7      	ldrb	r7, [r0, r7]
 8018446:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801844a:	462f      	mov	r7, r5
 801844c:	42bb      	cmp	r3, r7
 801844e:	460d      	mov	r5, r1
 8018450:	d9f4      	bls.n	801843c <_printf_i+0x110>
 8018452:	2b08      	cmp	r3, #8
 8018454:	d10b      	bne.n	801846e <_printf_i+0x142>
 8018456:	6823      	ldr	r3, [r4, #0]
 8018458:	07df      	lsls	r7, r3, #31
 801845a:	d508      	bpl.n	801846e <_printf_i+0x142>
 801845c:	6923      	ldr	r3, [r4, #16]
 801845e:	6861      	ldr	r1, [r4, #4]
 8018460:	4299      	cmp	r1, r3
 8018462:	bfde      	ittt	le
 8018464:	2330      	movle	r3, #48	@ 0x30
 8018466:	f806 3c01 	strble.w	r3, [r6, #-1]
 801846a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801846e:	1b92      	subs	r2, r2, r6
 8018470:	6122      	str	r2, [r4, #16]
 8018472:	f8cd a000 	str.w	sl, [sp]
 8018476:	464b      	mov	r3, r9
 8018478:	aa03      	add	r2, sp, #12
 801847a:	4621      	mov	r1, r4
 801847c:	4640      	mov	r0, r8
 801847e:	f7ff fee7 	bl	8018250 <_printf_common>
 8018482:	3001      	adds	r0, #1
 8018484:	d14a      	bne.n	801851c <_printf_i+0x1f0>
 8018486:	f04f 30ff 	mov.w	r0, #4294967295
 801848a:	b004      	add	sp, #16
 801848c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018490:	6823      	ldr	r3, [r4, #0]
 8018492:	f043 0320 	orr.w	r3, r3, #32
 8018496:	6023      	str	r3, [r4, #0]
 8018498:	4832      	ldr	r0, [pc, #200]	@ (8018564 <_printf_i+0x238>)
 801849a:	2778      	movs	r7, #120	@ 0x78
 801849c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80184a0:	6823      	ldr	r3, [r4, #0]
 80184a2:	6831      	ldr	r1, [r6, #0]
 80184a4:	061f      	lsls	r7, r3, #24
 80184a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80184aa:	d402      	bmi.n	80184b2 <_printf_i+0x186>
 80184ac:	065f      	lsls	r7, r3, #25
 80184ae:	bf48      	it	mi
 80184b0:	b2ad      	uxthmi	r5, r5
 80184b2:	6031      	str	r1, [r6, #0]
 80184b4:	07d9      	lsls	r1, r3, #31
 80184b6:	bf44      	itt	mi
 80184b8:	f043 0320 	orrmi.w	r3, r3, #32
 80184bc:	6023      	strmi	r3, [r4, #0]
 80184be:	b11d      	cbz	r5, 80184c8 <_printf_i+0x19c>
 80184c0:	2310      	movs	r3, #16
 80184c2:	e7ad      	b.n	8018420 <_printf_i+0xf4>
 80184c4:	4826      	ldr	r0, [pc, #152]	@ (8018560 <_printf_i+0x234>)
 80184c6:	e7e9      	b.n	801849c <_printf_i+0x170>
 80184c8:	6823      	ldr	r3, [r4, #0]
 80184ca:	f023 0320 	bic.w	r3, r3, #32
 80184ce:	6023      	str	r3, [r4, #0]
 80184d0:	e7f6      	b.n	80184c0 <_printf_i+0x194>
 80184d2:	4616      	mov	r6, r2
 80184d4:	e7bd      	b.n	8018452 <_printf_i+0x126>
 80184d6:	6833      	ldr	r3, [r6, #0]
 80184d8:	6825      	ldr	r5, [r4, #0]
 80184da:	6961      	ldr	r1, [r4, #20]
 80184dc:	1d18      	adds	r0, r3, #4
 80184de:	6030      	str	r0, [r6, #0]
 80184e0:	062e      	lsls	r6, r5, #24
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	d501      	bpl.n	80184ea <_printf_i+0x1be>
 80184e6:	6019      	str	r1, [r3, #0]
 80184e8:	e002      	b.n	80184f0 <_printf_i+0x1c4>
 80184ea:	0668      	lsls	r0, r5, #25
 80184ec:	d5fb      	bpl.n	80184e6 <_printf_i+0x1ba>
 80184ee:	8019      	strh	r1, [r3, #0]
 80184f0:	2300      	movs	r3, #0
 80184f2:	6123      	str	r3, [r4, #16]
 80184f4:	4616      	mov	r6, r2
 80184f6:	e7bc      	b.n	8018472 <_printf_i+0x146>
 80184f8:	6833      	ldr	r3, [r6, #0]
 80184fa:	1d1a      	adds	r2, r3, #4
 80184fc:	6032      	str	r2, [r6, #0]
 80184fe:	681e      	ldr	r6, [r3, #0]
 8018500:	6862      	ldr	r2, [r4, #4]
 8018502:	2100      	movs	r1, #0
 8018504:	4630      	mov	r0, r6
 8018506:	f7e7 fe9b 	bl	8000240 <memchr>
 801850a:	b108      	cbz	r0, 8018510 <_printf_i+0x1e4>
 801850c:	1b80      	subs	r0, r0, r6
 801850e:	6060      	str	r0, [r4, #4]
 8018510:	6863      	ldr	r3, [r4, #4]
 8018512:	6123      	str	r3, [r4, #16]
 8018514:	2300      	movs	r3, #0
 8018516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801851a:	e7aa      	b.n	8018472 <_printf_i+0x146>
 801851c:	6923      	ldr	r3, [r4, #16]
 801851e:	4632      	mov	r2, r6
 8018520:	4649      	mov	r1, r9
 8018522:	4640      	mov	r0, r8
 8018524:	47d0      	blx	sl
 8018526:	3001      	adds	r0, #1
 8018528:	d0ad      	beq.n	8018486 <_printf_i+0x15a>
 801852a:	6823      	ldr	r3, [r4, #0]
 801852c:	079b      	lsls	r3, r3, #30
 801852e:	d413      	bmi.n	8018558 <_printf_i+0x22c>
 8018530:	68e0      	ldr	r0, [r4, #12]
 8018532:	9b03      	ldr	r3, [sp, #12]
 8018534:	4298      	cmp	r0, r3
 8018536:	bfb8      	it	lt
 8018538:	4618      	movlt	r0, r3
 801853a:	e7a6      	b.n	801848a <_printf_i+0x15e>
 801853c:	2301      	movs	r3, #1
 801853e:	4632      	mov	r2, r6
 8018540:	4649      	mov	r1, r9
 8018542:	4640      	mov	r0, r8
 8018544:	47d0      	blx	sl
 8018546:	3001      	adds	r0, #1
 8018548:	d09d      	beq.n	8018486 <_printf_i+0x15a>
 801854a:	3501      	adds	r5, #1
 801854c:	68e3      	ldr	r3, [r4, #12]
 801854e:	9903      	ldr	r1, [sp, #12]
 8018550:	1a5b      	subs	r3, r3, r1
 8018552:	42ab      	cmp	r3, r5
 8018554:	dcf2      	bgt.n	801853c <_printf_i+0x210>
 8018556:	e7eb      	b.n	8018530 <_printf_i+0x204>
 8018558:	2500      	movs	r5, #0
 801855a:	f104 0619 	add.w	r6, r4, #25
 801855e:	e7f5      	b.n	801854c <_printf_i+0x220>
 8018560:	0801c20b 	.word	0x0801c20b
 8018564:	0801c21c 	.word	0x0801c21c

08018568 <__sflush_r>:
 8018568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018570:	0716      	lsls	r6, r2, #28
 8018572:	4605      	mov	r5, r0
 8018574:	460c      	mov	r4, r1
 8018576:	d454      	bmi.n	8018622 <__sflush_r+0xba>
 8018578:	684b      	ldr	r3, [r1, #4]
 801857a:	2b00      	cmp	r3, #0
 801857c:	dc02      	bgt.n	8018584 <__sflush_r+0x1c>
 801857e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018580:	2b00      	cmp	r3, #0
 8018582:	dd48      	ble.n	8018616 <__sflush_r+0xae>
 8018584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018586:	2e00      	cmp	r6, #0
 8018588:	d045      	beq.n	8018616 <__sflush_r+0xae>
 801858a:	2300      	movs	r3, #0
 801858c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018590:	682f      	ldr	r7, [r5, #0]
 8018592:	6a21      	ldr	r1, [r4, #32]
 8018594:	602b      	str	r3, [r5, #0]
 8018596:	d030      	beq.n	80185fa <__sflush_r+0x92>
 8018598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801859a:	89a3      	ldrh	r3, [r4, #12]
 801859c:	0759      	lsls	r1, r3, #29
 801859e:	d505      	bpl.n	80185ac <__sflush_r+0x44>
 80185a0:	6863      	ldr	r3, [r4, #4]
 80185a2:	1ad2      	subs	r2, r2, r3
 80185a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80185a6:	b10b      	cbz	r3, 80185ac <__sflush_r+0x44>
 80185a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80185aa:	1ad2      	subs	r2, r2, r3
 80185ac:	2300      	movs	r3, #0
 80185ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80185b0:	6a21      	ldr	r1, [r4, #32]
 80185b2:	4628      	mov	r0, r5
 80185b4:	47b0      	blx	r6
 80185b6:	1c43      	adds	r3, r0, #1
 80185b8:	89a3      	ldrh	r3, [r4, #12]
 80185ba:	d106      	bne.n	80185ca <__sflush_r+0x62>
 80185bc:	6829      	ldr	r1, [r5, #0]
 80185be:	291d      	cmp	r1, #29
 80185c0:	d82b      	bhi.n	801861a <__sflush_r+0xb2>
 80185c2:	4a2a      	ldr	r2, [pc, #168]	@ (801866c <__sflush_r+0x104>)
 80185c4:	40ca      	lsrs	r2, r1
 80185c6:	07d6      	lsls	r6, r2, #31
 80185c8:	d527      	bpl.n	801861a <__sflush_r+0xb2>
 80185ca:	2200      	movs	r2, #0
 80185cc:	6062      	str	r2, [r4, #4]
 80185ce:	04d9      	lsls	r1, r3, #19
 80185d0:	6922      	ldr	r2, [r4, #16]
 80185d2:	6022      	str	r2, [r4, #0]
 80185d4:	d504      	bpl.n	80185e0 <__sflush_r+0x78>
 80185d6:	1c42      	adds	r2, r0, #1
 80185d8:	d101      	bne.n	80185de <__sflush_r+0x76>
 80185da:	682b      	ldr	r3, [r5, #0]
 80185dc:	b903      	cbnz	r3, 80185e0 <__sflush_r+0x78>
 80185de:	6560      	str	r0, [r4, #84]	@ 0x54
 80185e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80185e2:	602f      	str	r7, [r5, #0]
 80185e4:	b1b9      	cbz	r1, 8018616 <__sflush_r+0xae>
 80185e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80185ea:	4299      	cmp	r1, r3
 80185ec:	d002      	beq.n	80185f4 <__sflush_r+0x8c>
 80185ee:	4628      	mov	r0, r5
 80185f0:	f7ff fb4a 	bl	8017c88 <_free_r>
 80185f4:	2300      	movs	r3, #0
 80185f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80185f8:	e00d      	b.n	8018616 <__sflush_r+0xae>
 80185fa:	2301      	movs	r3, #1
 80185fc:	4628      	mov	r0, r5
 80185fe:	47b0      	blx	r6
 8018600:	4602      	mov	r2, r0
 8018602:	1c50      	adds	r0, r2, #1
 8018604:	d1c9      	bne.n	801859a <__sflush_r+0x32>
 8018606:	682b      	ldr	r3, [r5, #0]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d0c6      	beq.n	801859a <__sflush_r+0x32>
 801860c:	2b1d      	cmp	r3, #29
 801860e:	d001      	beq.n	8018614 <__sflush_r+0xac>
 8018610:	2b16      	cmp	r3, #22
 8018612:	d11e      	bne.n	8018652 <__sflush_r+0xea>
 8018614:	602f      	str	r7, [r5, #0]
 8018616:	2000      	movs	r0, #0
 8018618:	e022      	b.n	8018660 <__sflush_r+0xf8>
 801861a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801861e:	b21b      	sxth	r3, r3
 8018620:	e01b      	b.n	801865a <__sflush_r+0xf2>
 8018622:	690f      	ldr	r7, [r1, #16]
 8018624:	2f00      	cmp	r7, #0
 8018626:	d0f6      	beq.n	8018616 <__sflush_r+0xae>
 8018628:	0793      	lsls	r3, r2, #30
 801862a:	680e      	ldr	r6, [r1, #0]
 801862c:	bf08      	it	eq
 801862e:	694b      	ldreq	r3, [r1, #20]
 8018630:	600f      	str	r7, [r1, #0]
 8018632:	bf18      	it	ne
 8018634:	2300      	movne	r3, #0
 8018636:	eba6 0807 	sub.w	r8, r6, r7
 801863a:	608b      	str	r3, [r1, #8]
 801863c:	f1b8 0f00 	cmp.w	r8, #0
 8018640:	dde9      	ble.n	8018616 <__sflush_r+0xae>
 8018642:	6a21      	ldr	r1, [r4, #32]
 8018644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018646:	4643      	mov	r3, r8
 8018648:	463a      	mov	r2, r7
 801864a:	4628      	mov	r0, r5
 801864c:	47b0      	blx	r6
 801864e:	2800      	cmp	r0, #0
 8018650:	dc08      	bgt.n	8018664 <__sflush_r+0xfc>
 8018652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801865a:	81a3      	strh	r3, [r4, #12]
 801865c:	f04f 30ff 	mov.w	r0, #4294967295
 8018660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018664:	4407      	add	r7, r0
 8018666:	eba8 0800 	sub.w	r8, r8, r0
 801866a:	e7e7      	b.n	801863c <__sflush_r+0xd4>
 801866c:	20400001 	.word	0x20400001

08018670 <_fflush_r>:
 8018670:	b538      	push	{r3, r4, r5, lr}
 8018672:	690b      	ldr	r3, [r1, #16]
 8018674:	4605      	mov	r5, r0
 8018676:	460c      	mov	r4, r1
 8018678:	b913      	cbnz	r3, 8018680 <_fflush_r+0x10>
 801867a:	2500      	movs	r5, #0
 801867c:	4628      	mov	r0, r5
 801867e:	bd38      	pop	{r3, r4, r5, pc}
 8018680:	b118      	cbz	r0, 801868a <_fflush_r+0x1a>
 8018682:	6a03      	ldr	r3, [r0, #32]
 8018684:	b90b      	cbnz	r3, 801868a <_fflush_r+0x1a>
 8018686:	f7ff f90f 	bl	80178a8 <__sinit>
 801868a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d0f3      	beq.n	801867a <_fflush_r+0xa>
 8018692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018694:	07d0      	lsls	r0, r2, #31
 8018696:	d404      	bmi.n	80186a2 <_fflush_r+0x32>
 8018698:	0599      	lsls	r1, r3, #22
 801869a:	d402      	bmi.n	80186a2 <_fflush_r+0x32>
 801869c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801869e:	f7ff fae2 	bl	8017c66 <__retarget_lock_acquire_recursive>
 80186a2:	4628      	mov	r0, r5
 80186a4:	4621      	mov	r1, r4
 80186a6:	f7ff ff5f 	bl	8018568 <__sflush_r>
 80186aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80186ac:	07da      	lsls	r2, r3, #31
 80186ae:	4605      	mov	r5, r0
 80186b0:	d4e4      	bmi.n	801867c <_fflush_r+0xc>
 80186b2:	89a3      	ldrh	r3, [r4, #12]
 80186b4:	059b      	lsls	r3, r3, #22
 80186b6:	d4e1      	bmi.n	801867c <_fflush_r+0xc>
 80186b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80186ba:	f7ff fad5 	bl	8017c68 <__retarget_lock_release_recursive>
 80186be:	e7dd      	b.n	801867c <_fflush_r+0xc>

080186c0 <__swbuf_r>:
 80186c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186c2:	460e      	mov	r6, r1
 80186c4:	4614      	mov	r4, r2
 80186c6:	4605      	mov	r5, r0
 80186c8:	b118      	cbz	r0, 80186d2 <__swbuf_r+0x12>
 80186ca:	6a03      	ldr	r3, [r0, #32]
 80186cc:	b90b      	cbnz	r3, 80186d2 <__swbuf_r+0x12>
 80186ce:	f7ff f8eb 	bl	80178a8 <__sinit>
 80186d2:	69a3      	ldr	r3, [r4, #24]
 80186d4:	60a3      	str	r3, [r4, #8]
 80186d6:	89a3      	ldrh	r3, [r4, #12]
 80186d8:	071a      	lsls	r2, r3, #28
 80186da:	d501      	bpl.n	80186e0 <__swbuf_r+0x20>
 80186dc:	6923      	ldr	r3, [r4, #16]
 80186de:	b943      	cbnz	r3, 80186f2 <__swbuf_r+0x32>
 80186e0:	4621      	mov	r1, r4
 80186e2:	4628      	mov	r0, r5
 80186e4:	f000 f82a 	bl	801873c <__swsetup_r>
 80186e8:	b118      	cbz	r0, 80186f2 <__swbuf_r+0x32>
 80186ea:	f04f 37ff 	mov.w	r7, #4294967295
 80186ee:	4638      	mov	r0, r7
 80186f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186f2:	6823      	ldr	r3, [r4, #0]
 80186f4:	6922      	ldr	r2, [r4, #16]
 80186f6:	1a98      	subs	r0, r3, r2
 80186f8:	6963      	ldr	r3, [r4, #20]
 80186fa:	b2f6      	uxtb	r6, r6
 80186fc:	4283      	cmp	r3, r0
 80186fe:	4637      	mov	r7, r6
 8018700:	dc05      	bgt.n	801870e <__swbuf_r+0x4e>
 8018702:	4621      	mov	r1, r4
 8018704:	4628      	mov	r0, r5
 8018706:	f7ff ffb3 	bl	8018670 <_fflush_r>
 801870a:	2800      	cmp	r0, #0
 801870c:	d1ed      	bne.n	80186ea <__swbuf_r+0x2a>
 801870e:	68a3      	ldr	r3, [r4, #8]
 8018710:	3b01      	subs	r3, #1
 8018712:	60a3      	str	r3, [r4, #8]
 8018714:	6823      	ldr	r3, [r4, #0]
 8018716:	1c5a      	adds	r2, r3, #1
 8018718:	6022      	str	r2, [r4, #0]
 801871a:	701e      	strb	r6, [r3, #0]
 801871c:	6962      	ldr	r2, [r4, #20]
 801871e:	1c43      	adds	r3, r0, #1
 8018720:	429a      	cmp	r2, r3
 8018722:	d004      	beq.n	801872e <__swbuf_r+0x6e>
 8018724:	89a3      	ldrh	r3, [r4, #12]
 8018726:	07db      	lsls	r3, r3, #31
 8018728:	d5e1      	bpl.n	80186ee <__swbuf_r+0x2e>
 801872a:	2e0a      	cmp	r6, #10
 801872c:	d1df      	bne.n	80186ee <__swbuf_r+0x2e>
 801872e:	4621      	mov	r1, r4
 8018730:	4628      	mov	r0, r5
 8018732:	f7ff ff9d 	bl	8018670 <_fflush_r>
 8018736:	2800      	cmp	r0, #0
 8018738:	d0d9      	beq.n	80186ee <__swbuf_r+0x2e>
 801873a:	e7d6      	b.n	80186ea <__swbuf_r+0x2a>

0801873c <__swsetup_r>:
 801873c:	b538      	push	{r3, r4, r5, lr}
 801873e:	4b29      	ldr	r3, [pc, #164]	@ (80187e4 <__swsetup_r+0xa8>)
 8018740:	4605      	mov	r5, r0
 8018742:	6818      	ldr	r0, [r3, #0]
 8018744:	460c      	mov	r4, r1
 8018746:	b118      	cbz	r0, 8018750 <__swsetup_r+0x14>
 8018748:	6a03      	ldr	r3, [r0, #32]
 801874a:	b90b      	cbnz	r3, 8018750 <__swsetup_r+0x14>
 801874c:	f7ff f8ac 	bl	80178a8 <__sinit>
 8018750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018754:	0719      	lsls	r1, r3, #28
 8018756:	d422      	bmi.n	801879e <__swsetup_r+0x62>
 8018758:	06da      	lsls	r2, r3, #27
 801875a:	d407      	bmi.n	801876c <__swsetup_r+0x30>
 801875c:	2209      	movs	r2, #9
 801875e:	602a      	str	r2, [r5, #0]
 8018760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018764:	81a3      	strh	r3, [r4, #12]
 8018766:	f04f 30ff 	mov.w	r0, #4294967295
 801876a:	e033      	b.n	80187d4 <__swsetup_r+0x98>
 801876c:	0758      	lsls	r0, r3, #29
 801876e:	d512      	bpl.n	8018796 <__swsetup_r+0x5a>
 8018770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018772:	b141      	cbz	r1, 8018786 <__swsetup_r+0x4a>
 8018774:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018778:	4299      	cmp	r1, r3
 801877a:	d002      	beq.n	8018782 <__swsetup_r+0x46>
 801877c:	4628      	mov	r0, r5
 801877e:	f7ff fa83 	bl	8017c88 <_free_r>
 8018782:	2300      	movs	r3, #0
 8018784:	6363      	str	r3, [r4, #52]	@ 0x34
 8018786:	89a3      	ldrh	r3, [r4, #12]
 8018788:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801878c:	81a3      	strh	r3, [r4, #12]
 801878e:	2300      	movs	r3, #0
 8018790:	6063      	str	r3, [r4, #4]
 8018792:	6923      	ldr	r3, [r4, #16]
 8018794:	6023      	str	r3, [r4, #0]
 8018796:	89a3      	ldrh	r3, [r4, #12]
 8018798:	f043 0308 	orr.w	r3, r3, #8
 801879c:	81a3      	strh	r3, [r4, #12]
 801879e:	6923      	ldr	r3, [r4, #16]
 80187a0:	b94b      	cbnz	r3, 80187b6 <__swsetup_r+0x7a>
 80187a2:	89a3      	ldrh	r3, [r4, #12]
 80187a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80187a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80187ac:	d003      	beq.n	80187b6 <__swsetup_r+0x7a>
 80187ae:	4621      	mov	r1, r4
 80187b0:	4628      	mov	r0, r5
 80187b2:	f000 f887 	bl	80188c4 <__smakebuf_r>
 80187b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187ba:	f013 0201 	ands.w	r2, r3, #1
 80187be:	d00a      	beq.n	80187d6 <__swsetup_r+0x9a>
 80187c0:	2200      	movs	r2, #0
 80187c2:	60a2      	str	r2, [r4, #8]
 80187c4:	6962      	ldr	r2, [r4, #20]
 80187c6:	4252      	negs	r2, r2
 80187c8:	61a2      	str	r2, [r4, #24]
 80187ca:	6922      	ldr	r2, [r4, #16]
 80187cc:	b942      	cbnz	r2, 80187e0 <__swsetup_r+0xa4>
 80187ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80187d2:	d1c5      	bne.n	8018760 <__swsetup_r+0x24>
 80187d4:	bd38      	pop	{r3, r4, r5, pc}
 80187d6:	0799      	lsls	r1, r3, #30
 80187d8:	bf58      	it	pl
 80187da:	6962      	ldrpl	r2, [r4, #20]
 80187dc:	60a2      	str	r2, [r4, #8]
 80187de:	e7f4      	b.n	80187ca <__swsetup_r+0x8e>
 80187e0:	2000      	movs	r0, #0
 80187e2:	e7f7      	b.n	80187d4 <__swsetup_r+0x98>
 80187e4:	20000084 	.word	0x20000084

080187e8 <memmove>:
 80187e8:	4288      	cmp	r0, r1
 80187ea:	b510      	push	{r4, lr}
 80187ec:	eb01 0402 	add.w	r4, r1, r2
 80187f0:	d902      	bls.n	80187f8 <memmove+0x10>
 80187f2:	4284      	cmp	r4, r0
 80187f4:	4623      	mov	r3, r4
 80187f6:	d807      	bhi.n	8018808 <memmove+0x20>
 80187f8:	1e43      	subs	r3, r0, #1
 80187fa:	42a1      	cmp	r1, r4
 80187fc:	d008      	beq.n	8018810 <memmove+0x28>
 80187fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018806:	e7f8      	b.n	80187fa <memmove+0x12>
 8018808:	4402      	add	r2, r0
 801880a:	4601      	mov	r1, r0
 801880c:	428a      	cmp	r2, r1
 801880e:	d100      	bne.n	8018812 <memmove+0x2a>
 8018810:	bd10      	pop	{r4, pc}
 8018812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801881a:	e7f7      	b.n	801880c <memmove+0x24>

0801881c <_realloc_r>:
 801881c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018820:	4607      	mov	r7, r0
 8018822:	4614      	mov	r4, r2
 8018824:	460d      	mov	r5, r1
 8018826:	b921      	cbnz	r1, 8018832 <_realloc_r+0x16>
 8018828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801882c:	4611      	mov	r1, r2
 801882e:	f7fe bf23 	b.w	8017678 <_malloc_r>
 8018832:	b92a      	cbnz	r2, 8018840 <_realloc_r+0x24>
 8018834:	f7ff fa28 	bl	8017c88 <_free_r>
 8018838:	4625      	mov	r5, r4
 801883a:	4628      	mov	r0, r5
 801883c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018840:	f000 f89e 	bl	8018980 <_malloc_usable_size_r>
 8018844:	4284      	cmp	r4, r0
 8018846:	4606      	mov	r6, r0
 8018848:	d802      	bhi.n	8018850 <_realloc_r+0x34>
 801884a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801884e:	d8f4      	bhi.n	801883a <_realloc_r+0x1e>
 8018850:	4621      	mov	r1, r4
 8018852:	4638      	mov	r0, r7
 8018854:	f7fe ff10 	bl	8017678 <_malloc_r>
 8018858:	4680      	mov	r8, r0
 801885a:	b908      	cbnz	r0, 8018860 <_realloc_r+0x44>
 801885c:	4645      	mov	r5, r8
 801885e:	e7ec      	b.n	801883a <_realloc_r+0x1e>
 8018860:	42b4      	cmp	r4, r6
 8018862:	4622      	mov	r2, r4
 8018864:	4629      	mov	r1, r5
 8018866:	bf28      	it	cs
 8018868:	4632      	movcs	r2, r6
 801886a:	f7ff f9fe 	bl	8017c6a <memcpy>
 801886e:	4629      	mov	r1, r5
 8018870:	4638      	mov	r0, r7
 8018872:	f7ff fa09 	bl	8017c88 <_free_r>
 8018876:	e7f1      	b.n	801885c <_realloc_r+0x40>

08018878 <__swhatbuf_r>:
 8018878:	b570      	push	{r4, r5, r6, lr}
 801887a:	460c      	mov	r4, r1
 801887c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018880:	2900      	cmp	r1, #0
 8018882:	b096      	sub	sp, #88	@ 0x58
 8018884:	4615      	mov	r5, r2
 8018886:	461e      	mov	r6, r3
 8018888:	da0d      	bge.n	80188a6 <__swhatbuf_r+0x2e>
 801888a:	89a3      	ldrh	r3, [r4, #12]
 801888c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018890:	f04f 0100 	mov.w	r1, #0
 8018894:	bf14      	ite	ne
 8018896:	2340      	movne	r3, #64	@ 0x40
 8018898:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801889c:	2000      	movs	r0, #0
 801889e:	6031      	str	r1, [r6, #0]
 80188a0:	602b      	str	r3, [r5, #0]
 80188a2:	b016      	add	sp, #88	@ 0x58
 80188a4:	bd70      	pop	{r4, r5, r6, pc}
 80188a6:	466a      	mov	r2, sp
 80188a8:	f000 f848 	bl	801893c <_fstat_r>
 80188ac:	2800      	cmp	r0, #0
 80188ae:	dbec      	blt.n	801888a <__swhatbuf_r+0x12>
 80188b0:	9901      	ldr	r1, [sp, #4]
 80188b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80188b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80188ba:	4259      	negs	r1, r3
 80188bc:	4159      	adcs	r1, r3
 80188be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80188c2:	e7eb      	b.n	801889c <__swhatbuf_r+0x24>

080188c4 <__smakebuf_r>:
 80188c4:	898b      	ldrh	r3, [r1, #12]
 80188c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80188c8:	079d      	lsls	r5, r3, #30
 80188ca:	4606      	mov	r6, r0
 80188cc:	460c      	mov	r4, r1
 80188ce:	d507      	bpl.n	80188e0 <__smakebuf_r+0x1c>
 80188d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80188d4:	6023      	str	r3, [r4, #0]
 80188d6:	6123      	str	r3, [r4, #16]
 80188d8:	2301      	movs	r3, #1
 80188da:	6163      	str	r3, [r4, #20]
 80188dc:	b003      	add	sp, #12
 80188de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188e0:	ab01      	add	r3, sp, #4
 80188e2:	466a      	mov	r2, sp
 80188e4:	f7ff ffc8 	bl	8018878 <__swhatbuf_r>
 80188e8:	9f00      	ldr	r7, [sp, #0]
 80188ea:	4605      	mov	r5, r0
 80188ec:	4639      	mov	r1, r7
 80188ee:	4630      	mov	r0, r6
 80188f0:	f7fe fec2 	bl	8017678 <_malloc_r>
 80188f4:	b948      	cbnz	r0, 801890a <__smakebuf_r+0x46>
 80188f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188fa:	059a      	lsls	r2, r3, #22
 80188fc:	d4ee      	bmi.n	80188dc <__smakebuf_r+0x18>
 80188fe:	f023 0303 	bic.w	r3, r3, #3
 8018902:	f043 0302 	orr.w	r3, r3, #2
 8018906:	81a3      	strh	r3, [r4, #12]
 8018908:	e7e2      	b.n	80188d0 <__smakebuf_r+0xc>
 801890a:	89a3      	ldrh	r3, [r4, #12]
 801890c:	6020      	str	r0, [r4, #0]
 801890e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018912:	81a3      	strh	r3, [r4, #12]
 8018914:	9b01      	ldr	r3, [sp, #4]
 8018916:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801891a:	b15b      	cbz	r3, 8018934 <__smakebuf_r+0x70>
 801891c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018920:	4630      	mov	r0, r6
 8018922:	f000 f81d 	bl	8018960 <_isatty_r>
 8018926:	b128      	cbz	r0, 8018934 <__smakebuf_r+0x70>
 8018928:	89a3      	ldrh	r3, [r4, #12]
 801892a:	f023 0303 	bic.w	r3, r3, #3
 801892e:	f043 0301 	orr.w	r3, r3, #1
 8018932:	81a3      	strh	r3, [r4, #12]
 8018934:	89a3      	ldrh	r3, [r4, #12]
 8018936:	431d      	orrs	r5, r3
 8018938:	81a5      	strh	r5, [r4, #12]
 801893a:	e7cf      	b.n	80188dc <__smakebuf_r+0x18>

0801893c <_fstat_r>:
 801893c:	b538      	push	{r3, r4, r5, lr}
 801893e:	4d07      	ldr	r5, [pc, #28]	@ (801895c <_fstat_r+0x20>)
 8018940:	2300      	movs	r3, #0
 8018942:	4604      	mov	r4, r0
 8018944:	4608      	mov	r0, r1
 8018946:	4611      	mov	r1, r2
 8018948:	602b      	str	r3, [r5, #0]
 801894a:	f7ec fdd6 	bl	80054fa <_fstat>
 801894e:	1c43      	adds	r3, r0, #1
 8018950:	d102      	bne.n	8018958 <_fstat_r+0x1c>
 8018952:	682b      	ldr	r3, [r5, #0]
 8018954:	b103      	cbz	r3, 8018958 <_fstat_r+0x1c>
 8018956:	6023      	str	r3, [r4, #0]
 8018958:	bd38      	pop	{r3, r4, r5, pc}
 801895a:	bf00      	nop
 801895c:	200131a8 	.word	0x200131a8

08018960 <_isatty_r>:
 8018960:	b538      	push	{r3, r4, r5, lr}
 8018962:	4d06      	ldr	r5, [pc, #24]	@ (801897c <_isatty_r+0x1c>)
 8018964:	2300      	movs	r3, #0
 8018966:	4604      	mov	r4, r0
 8018968:	4608      	mov	r0, r1
 801896a:	602b      	str	r3, [r5, #0]
 801896c:	f7ec fdd5 	bl	800551a <_isatty>
 8018970:	1c43      	adds	r3, r0, #1
 8018972:	d102      	bne.n	801897a <_isatty_r+0x1a>
 8018974:	682b      	ldr	r3, [r5, #0]
 8018976:	b103      	cbz	r3, 801897a <_isatty_r+0x1a>
 8018978:	6023      	str	r3, [r4, #0]
 801897a:	bd38      	pop	{r3, r4, r5, pc}
 801897c:	200131a8 	.word	0x200131a8

08018980 <_malloc_usable_size_r>:
 8018980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018984:	1f18      	subs	r0, r3, #4
 8018986:	2b00      	cmp	r3, #0
 8018988:	bfbc      	itt	lt
 801898a:	580b      	ldrlt	r3, [r1, r0]
 801898c:	18c0      	addlt	r0, r0, r3
 801898e:	4770      	bx	lr

08018990 <_init>:
 8018990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018992:	bf00      	nop
 8018994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018996:	bc08      	pop	{r3}
 8018998:	469e      	mov	lr, r3
 801899a:	4770      	bx	lr

0801899c <_fini>:
 801899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801899e:	bf00      	nop
 80189a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189a2:	bc08      	pop	{r3}
 80189a4:	469e      	mov	lr, r3
 80189a6:	4770      	bx	lr
