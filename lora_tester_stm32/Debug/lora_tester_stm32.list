
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ca4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020a4  08015e74  08015e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017f18  08017f18  00019208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017f18  08017f18  00018f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017f20  08017f20  00019208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017f20  08017f20  00018f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017f24  08017f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  08017f28  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000c8  08017ff0  000190c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000168  08018090  00019168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000984c  20000208  08018130  00019208  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20009a54  08018130  00019a54  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00019208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00040bc7  00000000  00000000  00019238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008e5e  00000000  00000000  00059dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003530  00000000  00000000  00062c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000293a  00000000  00000000  00066190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00035d19  00000000  00000000  00068aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004888e  00000000  00000000  0009e7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012bc8a  00000000  00000000  000e7071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00212cfb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e784  00000000  00000000  00212d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  002214c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015e5c 	.word	0x08015e5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	08015e5c 	.word	0x08015e5c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d105      	bne.n	8000626 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 800061a:	491e      	ldr	r1, [pc, #120]	@ (8000694 <is_response_ok+0x88>)
 800061c:	2000      	movs	r0, #0
 800061e:	f003 f983 	bl	8003928 <LOGGER_SendFormatted>
        return false;
 8000622:	2300      	movs	r3, #0
 8000624:	e031      	b.n	800068a <is_response_ok+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	491b      	ldr	r1, [pc, #108]	@ (8000698 <is_response_ok+0x8c>)
 800062a:	2000      	movs	r0, #0
 800062c:	f003 f97c 	bl	8003928 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000630:	491a      	ldr	r1, [pc, #104]	@ (800069c <is_response_ok+0x90>)
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff fdec 	bl	8000210 <strcmp>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d105      	bne.n	800064a <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 800063e:	4918      	ldr	r1, [pc, #96]	@ (80006a0 <is_response_ok+0x94>)
 8000640:	2000      	movs	r0, #0
 8000642:	f003 f971 	bl	8003928 <LOGGER_SendFormatted>
        return true;
 8000646:	2301      	movs	r3, #1
 8000648:	e01f      	b.n	800068a <is_response_ok+0x7e>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 800064a:	4916      	ldr	r1, [pc, #88]	@ (80006a4 <is_response_ok+0x98>)
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff fddf 	bl	8000210 <strcmp>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d105      	bne.n	8000664 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000658:	4913      	ldr	r1, [pc, #76]	@ (80006a8 <is_response_ok+0x9c>)
 800065a:	2000      	movs	r0, #0
 800065c:	f003 f964 	bl	8003928 <LOGGER_SendFormatted>
        return true;
 8000660:	2301      	movs	r3, #1
 8000662:	e012      	b.n	800068a <is_response_ok+0x7e>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000664:	4911      	ldr	r1, [pc, #68]	@ (80006ac <is_response_ok+0xa0>)
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff fdd2 	bl	8000210 <strcmp>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d105      	bne.n	800067e <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000672:	490f      	ldr	r1, [pc, #60]	@ (80006b0 <is_response_ok+0xa4>)
 8000674:	2000      	movs	r0, #0
 8000676:	f003 f957 	bl	8003928 <LOGGER_SendFormatted>
        return true;
 800067a:	2301      	movs	r3, #1
 800067c:	e005      	b.n	800068a <is_response_ok+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	490c      	ldr	r1, [pc, #48]	@ (80006b4 <is_response_ok+0xa8>)
 8000682:	2000      	movs	r0, #0
 8000684:	f003 f950 	bl	8003928 <LOGGER_SendFormatted>
    return false;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	08015e74 	.word	0x08015e74
 8000698:	08015ea4 	.word	0x08015ea4
 800069c:	08015ed4 	.word	0x08015ed4
 80006a0:	08015ed8 	.word	0x08015ed8
 80006a4:	08015f00 	.word	0x08015f00
 80006a8:	08015f08 	.word	0x08015f08
 80006ac:	08015f3c 	.word	0x08015f3c
 80006b0:	08015f40 	.word	0x08015f40
 80006b4:	08015f74 	.word	0x08015f74

080006b8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
	...

080006ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <vApplicationGetIdleTaskMemory+0x2c>)
 80006fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	4a06      	ldr	r2, [pc, #24]	@ (800071c <vApplicationGetIdleTaskMemory+0x30>)
 8000702:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000224 	.word	0x20000224
 800071c:	2000027c 	.word	0x2000027c

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b5b0      	push	{r4, r5, r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f004 f82e 	bl	8004786 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f84d 	bl	80007c8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800072e:	f000 f8bd 	bl	80008ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f001 f87b 	bl	800182c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000736:	f000 f8eb 	bl	8000910 <MX_ADC3_Init>
  MX_CRC_Init();
 800073a:	f000 f93b 	bl	80009b4 <MX_CRC_Init>
  MX_DCMI_Init();
 800073e:	f000 f95b 	bl	80009f8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000742:	f000 f98d 	bl	8000a60 <MX_DMA2D_Init>
  MX_ETH_Init();
 8000746:	f000 f9bd 	bl	8000ac4 <MX_ETH_Init>
  MX_FMC_Init();
 800074a:	f001 f81f 	bl	800178c <MX_FMC_Init>
  MX_I2C1_Init();
 800074e:	f000 fa07 	bl	8000b60 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000752:	f000 fa45 	bl	8000be0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000756:	f000 fa83 	bl	8000c60 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800075a:	f000 fb03 	bl	8000d64 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800075e:	f000 fb2d 	bl	8000dbc <MX_RTC_Init>
  MX_SAI2_Init();
 8000762:	f000 fbcf 	bl	8000f04 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000766:	f000 fc75 	bl	8001054 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800076a:	f000 fc95 	bl	8001098 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800076e:	f000 fcc3 	bl	80010f8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000772:	f000 fcff 	bl	8001174 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000776:	f000 fda9 	bl	80012cc <MX_TIM2_Init>
  MX_TIM3_Init();
 800077a:	f000 fe1d 	bl	80013b8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800077e:	f000 fe93 	bl	80014a8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000782:	f000 ff09 	bl	8001598 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000786:	f000 ff5b 	bl	8001640 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800078a:	f000 ff9f 	bl	80016cc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800078e:	f000 ffcd 	bl	800172c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000792:	f00f fb19 	bl	800fdc8 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000796:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <main+0xa0>)
 8000798:	1d3c      	adds	r4, r7, #4
 800079a:	461d      	mov	r5, r3
 800079c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f011 ffd1 	bl	8012754 <osThreadCreate>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a03      	ldr	r2, [pc, #12]	@ (80007c4 <main+0xa4>)
 80007b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007b8:	f011 ffa9 	bl	801270e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <main+0x9c>
 80007c0:	080161dc 	.word	0x080161dc
 80007c4:	20000d64 	.word	0x20000d64

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	@ 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	@ 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f014 ff34 	bl	8015644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ec:	f008 fa2e 	bl	8008c4c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	4b2c      	ldr	r3, [pc, #176]	@ (80008a4 <SystemClock_Config+0xdc>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	4a2b      	ldr	r2, [pc, #172]	@ (80008a4 <SystemClock_Config+0xdc>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fc:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <SystemClock_Config+0xdc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	4b27      	ldr	r3, [pc, #156]	@ (80008a8 <SystemClock_Config+0xe0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a26      	ldr	r2, [pc, #152]	@ (80008a8 <SystemClock_Config+0xe0>)
 800080e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b24      	ldr	r3, [pc, #144]	@ (80008a8 <SystemClock_Config+0xe0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000820:	2309      	movs	r3, #9
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000824:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000838:	2319      	movs	r3, #25
 800083a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800083c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000840:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000842:	2302      	movs	r3, #2
 8000844:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000846:	2309      	movs	r3, #9
 8000848:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	4618      	mov	r0, r3
 8000850:	f008 fb1e 	bl	8008e90 <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800085a:	f001 fe75 	bl	8002548 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800085e:	f008 fa05 	bl	8008c6c <HAL_PWREx_EnableOverDrive>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000868:	f001 fe6e 	bl	8002548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000878:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000882:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2106      	movs	r1, #6
 800088a:	4618      	mov	r0, r3
 800088c:	f008 fda4 	bl	80093d8 <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000896:	f001 fe57 	bl	8002548 <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	3750      	adds	r7, #80	@ 0x50
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000

080008ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0a2      	sub	sp, #136	@ 0x88
 80008b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2284      	movs	r2, #132	@ 0x84
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f014 fec3 	bl	8015644 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <PeriphCommonClock_Config+0x60>)
 80008c0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80008c2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80008c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80008c8:	2305      	movs	r3, #5
 80008ca:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80008d0:	2303      	movs	r3, #3
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008dc:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80008de:	2300      	movs	r3, #0
 80008e0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80008e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4618      	mov	r0, r3
 80008f4:	f008 ff88 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80008fe:	f001 fe23 	bl	8002548 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3788      	adds	r7, #136	@ 0x88
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	00b00008 	.word	0x00b00008

08000910 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000922:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <MX_ADC3_Init+0x98>)
 8000924:	4a21      	ldr	r2, [pc, #132]	@ (80009ac <MX_ADC3_Init+0x9c>)
 8000926:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000928:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <MX_ADC3_Init+0x98>)
 800092a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800092e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000930:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <MX_ADC3_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000936:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <MX_ADC3_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_ADC3_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <MX_ADC3_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_ADC3_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000950:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <MX_ADC3_Init+0x98>)
 8000952:	4a17      	ldr	r2, [pc, #92]	@ (80009b0 <MX_ADC3_Init+0xa0>)
 8000954:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_ADC3_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_ADC3_Init+0x98>)
 800095e:	2201      	movs	r2, #1
 8000960:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_ADC3_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_ADC3_Init+0x98>)
 800096c:	2201      	movs	r2, #1
 800096e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000970:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <MX_ADC3_Init+0x98>)
 8000972:	f003 ff59 	bl	8004828 <HAL_ADC_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800097c:	f001 fde4 	bl	8002548 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000980:	2304      	movs	r3, #4
 8000982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000984:	2301      	movs	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_ADC3_Init+0x98>)
 8000992:	f003 ff8d 	bl	80048b0 <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800099c:	f001 fdd4 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200004b4 	.word	0x200004b4
 80009ac:	40012200 	.word	0x40012200
 80009b0:	0f000001 	.word	0x0f000001

080009b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009b8:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <MX_CRC_Init+0x3c>)
 80009ba:	4a0e      	ldr	r2, [pc, #56]	@ (80009f4 <MX_CRC_Init+0x40>)
 80009bc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_CRC_Init+0x3c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MX_CRC_Init+0x3c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_CRC_Init+0x3c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <MX_CRC_Init+0x3c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_CRC_Init+0x3c>)
 80009d8:	2201      	movs	r2, #1
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_CRC_Init+0x3c>)
 80009de:	f004 fa9d 	bl	8004f1c <HAL_CRC_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009e8:	f001 fdae 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200004fc 	.word	0x200004fc
 80009f4:	40023000 	.word	0x40023000

080009f8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_DCMI_Init+0x60>)
 80009fe:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <MX_DCMI_Init+0x64>)
 8000a00:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_DCMI_Init+0x60>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_DCMI_Init+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_DCMI_Init+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a14:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_DCMI_Init+0x60>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_DCMI_Init+0x60>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <MX_DCMI_Init+0x60>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_DCMI_Init+0x60>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <MX_DCMI_Init+0x60>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_DCMI_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <MX_DCMI_Init+0x60>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_DCMI_Init+0x60>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <MX_DCMI_Init+0x60>)
 8000a46:	f004 fb5b 	bl	8005100 <HAL_DCMI_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a50:	f001 fd7a 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000520 	.word	0x20000520
 8000a5c:	50050000 	.word	0x50050000

08000a60 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a64:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <MX_DMA2D_Init+0x5c>)
 8000a66:	4a16      	ldr	r2, [pc, #88]	@ (8000ac0 <MX_DMA2D_Init+0x60>)
 8000a68:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <MX_DMA2D_Init+0x5c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <MX_DMA2D_Init+0x5c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_DMA2D_Init+0x5c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_DMA2D_Init+0x5c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_DMA2D_Init+0x5c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_DMA2D_Init+0x5c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_DMA2D_Init+0x5c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a94:	4809      	ldr	r0, [pc, #36]	@ (8000abc <MX_DMA2D_Init+0x5c>)
 8000a96:	f004 fc47 	bl	8005328 <HAL_DMA2D_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000aa0:	f001 fd52 	bl	8002548 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_DMA2D_Init+0x5c>)
 8000aa8:	f004 fd98 	bl	80055dc <HAL_DMA2D_ConfigLayer>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ab2:	f001 fd49 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000570 	.word	0x20000570
 8000ac0:	4002b000 	.word	0x4002b000

08000ac4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000aca:	4a20      	ldr	r2, [pc, #128]	@ (8000b4c <MX_ETH_Init+0x88>)
 8000acc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ace:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000ad6:	2280      	movs	r2, #128	@ 0x80
 8000ad8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ada:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000adc:	22e1      	movs	r2, #225	@ 0xe1
 8000ade:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000aec:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000af4:	4a16      	ldr	r2, [pc, #88]	@ (8000b50 <MX_ETH_Init+0x8c>)
 8000af6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000afa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000afe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000b02:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <MX_ETH_Init+0x90>)
 8000b04:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000b08:	4a13      	ldr	r2, [pc, #76]	@ (8000b58 <MX_ETH_Init+0x94>)
 8000b0a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000b0e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000b12:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <MX_ETH_Init+0x84>)
 8000b16:	f004 fdf3 	bl	8005700 <HAL_ETH_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b20:	f001 fd12 	bl	8002548 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b24:	2238      	movs	r2, #56	@ 0x38
 8000b26:	2100      	movs	r1, #0
 8000b28:	480c      	ldr	r0, [pc, #48]	@ (8000b5c <MX_ETH_Init+0x98>)
 8000b2a:	f014 fd8b 	bl	8015644 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_ETH_Init+0x98>)
 8000b30:	2221      	movs	r2, #33	@ 0x21
 8000b32:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_ETH_Init+0x98>)
 8000b36:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000b3a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <MX_ETH_Init+0x98>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200005b0 	.word	0x200005b0
 8000b4c:	40028000 	.word	0x40028000
 8000b50:	20000d68 	.word	0x20000d68
 8000b54:	20000168 	.word	0x20000168
 8000b58:	200000c8 	.word	0x200000c8
 8000b5c:	2000047c 	.word	0x2000047c

08000b60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b66:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <MX_I2C1_Init+0x78>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <MX_I2C1_Init+0x7c>)
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b70:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b9a:	480e      	ldr	r0, [pc, #56]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b9c:	f007 fc10 	bl	80083c0 <HAL_I2C_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ba6:	f001 fccf 	bl	8002548 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bae:	f007 fca3 	bl	80084f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bb8:	f001 fcc6 	bl	8002548 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bc0:	f007 fce5 	bl	800858e <HAL_I2CEx_ConfigDigitalFilter>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bca:	f001 fcbd 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000660 	.word	0x20000660
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	00c0eaff 	.word	0x00c0eaff

08000be0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <MX_I2C3_Init+0x74>)
 8000be6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c58 <MX_I2C3_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_I2C3_Init+0x74>)
 8000bec:	4a1b      	ldr	r2, [pc, #108]	@ (8000c5c <MX_I2C3_Init+0x7c>)
 8000bee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <MX_I2C3_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <MX_I2C3_Init+0x74>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <MX_I2C3_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_I2C3_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_I2C3_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_I2C3_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_I2C3_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c1a:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <MX_I2C3_Init+0x74>)
 8000c1c:	f007 fbd0 	bl	80083c0 <HAL_I2C_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c26:	f001 fc8f 	bl	8002548 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <MX_I2C3_Init+0x74>)
 8000c2e:	f007 fc63 	bl	80084f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c38:	f001 fc86 	bl	8002548 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_I2C3_Init+0x74>)
 8000c40:	f007 fca5 	bl	800858e <HAL_I2CEx_ConfigDigitalFilter>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c4a:	f001 fc7d 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200006b4 	.word	0x200006b4
 8000c58:	40005c00 	.word	0x40005c00
 8000c5c:	00c0eaff 	.word	0x00c0eaff

08000c60 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	@ 0x38
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2234      	movs	r2, #52	@ 0x34
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f014 fce9 	bl	8015644 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c72:	4b3a      	ldr	r3, [pc, #232]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000c74:	4a3a      	ldr	r2, [pc, #232]	@ (8000d60 <MX_LTDC_Init+0x100>)
 8000c76:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c78:	4b38      	ldr	r3, [pc, #224]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c7e:	4b37      	ldr	r3, [pc, #220]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c84:	4b35      	ldr	r3, [pc, #212]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c8a:	4b34      	ldr	r3, [pc, #208]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000c90:	4b32      	ldr	r3, [pc, #200]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000c92:	2228      	movs	r2, #40	@ 0x28
 8000c94:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000c96:	4b31      	ldr	r3, [pc, #196]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000c98:	2209      	movs	r2, #9
 8000c9a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000c9e:	2235      	movs	r2, #53	@ 0x35
 8000ca0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000ca4:	220b      	movs	r2, #11
 8000ca6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000caa:	f240 2215 	movw	r2, #533	@ 0x215
 8000cae:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000cb2:	f240 121b 	movw	r2, #283	@ 0x11b
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8000cb8:	4b28      	ldr	r3, [pc, #160]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000cba:	f240 2235 	movw	r2, #565	@ 0x235
 8000cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000cc0:	4b26      	ldr	r3, [pc, #152]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000cc2:	f240 121d 	movw	r2, #285	@ 0x11d
 8000cc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000cc8:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cd8:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ce0:	481e      	ldr	r0, [pc, #120]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000ce2:	f007 fca0 	bl	8008626 <HAL_LTDC_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000cec:	f001 fc2c 	bl	8002548 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000cf4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000cf8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000cfe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000d02:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d04:	2302      	movs	r3, #2
 8000d06:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d08:	23ff      	movs	r3, #255	@ 0xff
 8000d0a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d10:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d14:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d16:	2307      	movs	r3, #7
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000d1a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000d20:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000d26:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_LTDC_Init+0xfc>)
 8000d46:	f007 fdcd 	bl	80088e4 <HAL_LTDC_ConfigLayer>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000d50:	f001 fbfa 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	3738      	adds	r7, #56	@ 0x38
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000708 	.word	0x20000708
 8000d60:	40016800 	.word	0x40016800

08000d64 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d6a:	4a13      	ldr	r2, [pc, #76]	@ (8000db8 <MX_QUADSPI_Init+0x54>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d76:	2204      	movs	r2, #4
 8000d78:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d7c:	2210      	movs	r2, #16
 8000d7e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d82:	2218      	movs	r2, #24
 8000d84:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d88:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000d8c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d94:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000da0:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <MX_QUADSPI_Init+0x50>)
 8000da2:	f007 ffb3 	bl	8008d0c <HAL_QSPI_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000dac:	f001 fbcc 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200007b0 	.word	0x200007b0
 8000db8:	a0001000 	.word	0xa0001000

08000dbc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b090      	sub	sp, #64	@ 0x40
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2228      	movs	r2, #40	@ 0x28
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f014 fc31 	bl	8015644 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000de2:	4b46      	ldr	r3, [pc, #280]	@ (8000efc <MX_RTC_Init+0x140>)
 8000de4:	4a46      	ldr	r2, [pc, #280]	@ (8000f00 <MX_RTC_Init+0x144>)
 8000de6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000de8:	4b44      	ldr	r3, [pc, #272]	@ (8000efc <MX_RTC_Init+0x140>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000dee:	4b43      	ldr	r3, [pc, #268]	@ (8000efc <MX_RTC_Init+0x140>)
 8000df0:	227f      	movs	r2, #127	@ 0x7f
 8000df2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000df4:	4b41      	ldr	r3, [pc, #260]	@ (8000efc <MX_RTC_Init+0x140>)
 8000df6:	22ff      	movs	r2, #255	@ 0xff
 8000df8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dfa:	4b40      	ldr	r3, [pc, #256]	@ (8000efc <MX_RTC_Init+0x140>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <MX_RTC_Init+0x140>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e06:	4b3d      	ldr	r3, [pc, #244]	@ (8000efc <MX_RTC_Init+0x140>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e0c:	483b      	ldr	r0, [pc, #236]	@ (8000efc <MX_RTC_Init+0x140>)
 8000e0e:	f009 fa2b 	bl	800a268 <HAL_RTC_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000e18:	f001 fb96 	bl	8002548 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	482f      	ldr	r0, [pc, #188]	@ (8000efc <MX_RTC_Init+0x140>)
 8000e40:	f009 fa94 	bl	800a36c <HAL_RTC_SetTime>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000e4a:	f001 fb7d 	bl	8002548 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000e54:	2301      	movs	r3, #1
 8000e56:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4823      	ldr	r0, [pc, #140]	@ (8000efc <MX_RTC_Init+0x140>)
 8000e70:	f009 fb16 	bl	800a4a0 <HAL_RTC_SetDate>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000e7a:	f001 fb65 	bl	8002548 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ea8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4811      	ldr	r0, [pc, #68]	@ (8000efc <MX_RTC_Init+0x140>)
 8000eb6:	f009 fb77 	bl	800a5a8 <HAL_RTC_SetAlarm>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000ec0:	f001 fb42 	bl	8002548 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000ec4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480a      	ldr	r0, [pc, #40]	@ (8000efc <MX_RTC_Init+0x140>)
 8000ed2:	f009 fb69 	bl	800a5a8 <HAL_RTC_SetAlarm>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000edc:	f001 fb34 	bl	8002548 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4805      	ldr	r0, [pc, #20]	@ (8000efc <MX_RTC_Init+0x140>)
 8000ee6:	f009 fd29 	bl	800a93c <HAL_RTCEx_SetTimeStamp>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000ef0:	f001 fb2a 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3740      	adds	r7, #64	@ 0x40
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200007fc 	.word	0x200007fc
 8000f00:	40002800 	.word	0x40002800

08000f04 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000f08:	4b4d      	ldr	r3, [pc, #308]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f0a:	4a4e      	ldr	r2, [pc, #312]	@ (8001044 <MX_SAI2_Init+0x140>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f14:	4b4a      	ldr	r3, [pc, #296]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000f1a:	4b49      	ldr	r3, [pc, #292]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f1c:	2240      	movs	r2, #64	@ 0x40
 8000f1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f20:	4b47      	ldr	r3, [pc, #284]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f26:	4b46      	ldr	r3, [pc, #280]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f2c:	4b44      	ldr	r3, [pc, #272]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f32:	4b43      	ldr	r3, [pc, #268]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f38:	4b41      	ldr	r3, [pc, #260]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f3e:	4b40      	ldr	r3, [pc, #256]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f44:	4b3e      	ldr	r3, [pc, #248]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f46:	4a40      	ldr	r2, [pc, #256]	@ (8001048 <MX_SAI2_Init+0x144>)
 8000f48:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f50:	4b3b      	ldr	r3, [pc, #236]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f56:	4b3a      	ldr	r3, [pc, #232]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f5c:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000f62:	4b37      	ldr	r3, [pc, #220]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f64:	2208      	movs	r2, #8
 8000f66:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000f68:	4b35      	ldr	r3, [pc, #212]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f6e:	4b34      	ldr	r3, [pc, #208]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f74:	4b32      	ldr	r3, [pc, #200]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f7a:	4b31      	ldr	r3, [pc, #196]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000f80:	4b2f      	ldr	r3, [pc, #188]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f86:	4b2e      	ldr	r3, [pc, #184]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000f92:	4b2b      	ldr	r3, [pc, #172]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000f98:	4829      	ldr	r0, [pc, #164]	@ (8001040 <MX_SAI2_Init+0x13c>)
 8000f9a:	f009 fd37 	bl	800aa0c <HAL_SAI_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000fa4:	f001 fad0 	bl	8002548 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000fa8:	4b28      	ldr	r3, [pc, #160]	@ (800104c <MX_SAI2_Init+0x148>)
 8000faa:	4a29      	ldr	r2, [pc, #164]	@ (8001050 <MX_SAI2_Init+0x14c>)
 8000fac:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000fae:	4b27      	ldr	r3, [pc, #156]	@ (800104c <MX_SAI2_Init+0x148>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000fb4:	4b25      	ldr	r3, [pc, #148]	@ (800104c <MX_SAI2_Init+0x148>)
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000fba:	4b24      	ldr	r3, [pc, #144]	@ (800104c <MX_SAI2_Init+0x148>)
 8000fbc:	2240      	movs	r2, #64	@ 0x40
 8000fbe:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fc0:	4b22      	ldr	r3, [pc, #136]	@ (800104c <MX_SAI2_Init+0x148>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000fc6:	4b21      	ldr	r3, [pc, #132]	@ (800104c <MX_SAI2_Init+0x148>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <MX_SAI2_Init+0x148>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <MX_SAI2_Init+0x148>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <MX_SAI2_Init+0x148>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fde:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_SAI2_Init+0x148>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <MX_SAI2_Init+0x148>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fea:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_SAI2_Init+0x148>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ff0:	4b16      	ldr	r3, [pc, #88]	@ (800104c <MX_SAI2_Init+0x148>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <MX_SAI2_Init+0x148>)
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <MX_SAI2_Init+0x148>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001002:	4b12      	ldr	r3, [pc, #72]	@ (800104c <MX_SAI2_Init+0x148>)
 8001004:	2200      	movs	r2, #0
 8001006:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001008:	4b10      	ldr	r3, [pc, #64]	@ (800104c <MX_SAI2_Init+0x148>)
 800100a:	2200      	movs	r2, #0
 800100c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_SAI2_Init+0x148>)
 8001010:	2200      	movs	r2, #0
 8001012:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001014:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <MX_SAI2_Init+0x148>)
 8001016:	2200      	movs	r2, #0
 8001018:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <MX_SAI2_Init+0x148>)
 800101c:	2200      	movs	r2, #0
 800101e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <MX_SAI2_Init+0x148>)
 8001022:	2201      	movs	r2, #1
 8001024:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_SAI2_Init+0x148>)
 8001028:	2200      	movs	r2, #0
 800102a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800102c:	4807      	ldr	r0, [pc, #28]	@ (800104c <MX_SAI2_Init+0x148>)
 800102e:	f009 fced 	bl	800aa0c <HAL_SAI_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001038:	f001 fa86 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000081c 	.word	0x2000081c
 8001044:	40015c04 	.word	0x40015c04
 8001048:	0002ee00 	.word	0x0002ee00
 800104c:	200008a0 	.word	0x200008a0
 8001050:	40015c24 	.word	0x40015c24

08001054 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001058:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <MX_SDMMC1_SD_Init+0x3c>)
 800105a:	4a0e      	ldr	r2, [pc, #56]	@ (8001094 <MX_SDMMC1_SD_Init+0x40>)
 800105c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800105e:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <MX_SDMMC1_SD_Init+0x3c>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001064:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <MX_SDMMC1_SD_Init+0x3c>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800106a:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <MX_SDMMC1_SD_Init+0x3c>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001070:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <MX_SDMMC1_SD_Init+0x3c>)
 8001072:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001076:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001078:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <MX_SDMMC1_SD_Init+0x3c>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800107e:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <MX_SDMMC1_SD_Init+0x3c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000924 	.word	0x20000924
 8001094:	40012c00 	.word	0x40012c00

08001098 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_SPDIFRX_Init+0x5c>)
 800109e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80010a2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <MX_SPDIFRX_Init+0x5c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_SPDIFRX_Init+0x5c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80010b0:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <MX_SPDIFRX_Init+0x5c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_SPDIFRX_Init+0x5c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <MX_SPDIFRX_Init+0x5c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_SPDIFRX_Init+0x5c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_SPDIFRX_Init+0x5c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_SPDIFRX_Init+0x5c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <MX_SPDIFRX_Init+0x5c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_SPDIFRX_Init+0x5c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_SPDIFRX_Init+0x5c>)
 80010e2:	f00a ff17 	bl	800bf14 <HAL_SPDIFRX_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80010ec:	f001 fa2c 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200009a8 	.word	0x200009a8

080010f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <MX_SPI2_Init+0x74>)
 80010fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <MX_SPI2_Init+0x78>)
 8001100:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001102:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <MX_SPI2_Init+0x74>)
 8001104:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001108:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <MX_SPI2_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001110:	4b16      	ldr	r3, [pc, #88]	@ (800116c <MX_SPI2_Init+0x74>)
 8001112:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001116:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_SPI2_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800111e:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_SPI2_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_SPI2_Init+0x74>)
 8001126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800112a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_SPI2_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <MX_SPI2_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001138:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_SPI2_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <MX_SPI2_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_SPI2_Init+0x74>)
 8001146:	2207      	movs	r2, #7
 8001148:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <MX_SPI2_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_SPI2_Init+0x74>)
 8001152:	2208      	movs	r2, #8
 8001154:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_SPI2_Init+0x74>)
 8001158:	f00a ff38 	bl	800bfcc <HAL_SPI_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001162:	f001 f9f1 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200009f4 	.word	0x200009f4
 8001170:	40003800 	.word	0x40003800

08001174 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09a      	sub	sp, #104	@ 0x68
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001194:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
 80011a4:	615a      	str	r2, [r3, #20]
 80011a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	222c      	movs	r2, #44	@ 0x2c
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f014 fa48 	bl	8015644 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b4:	4b43      	ldr	r3, [pc, #268]	@ (80012c4 <MX_TIM1_Init+0x150>)
 80011b6:	4a44      	ldr	r2, [pc, #272]	@ (80012c8 <MX_TIM1_Init+0x154>)
 80011b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011ba:	4b42      	ldr	r3, [pc, #264]	@ (80012c4 <MX_TIM1_Init+0x150>)
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b40      	ldr	r3, [pc, #256]	@ (80012c4 <MX_TIM1_Init+0x150>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011c6:	4b3f      	ldr	r3, [pc, #252]	@ (80012c4 <MX_TIM1_Init+0x150>)
 80011c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	4b3d      	ldr	r3, [pc, #244]	@ (80012c4 <MX_TIM1_Init+0x150>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d4:	4b3b      	ldr	r3, [pc, #236]	@ (80012c4 <MX_TIM1_Init+0x150>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b3a      	ldr	r3, [pc, #232]	@ (80012c4 <MX_TIM1_Init+0x150>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011e0:	4838      	ldr	r0, [pc, #224]	@ (80012c4 <MX_TIM1_Init+0x150>)
 80011e2:	f00a ff9e 	bl	800c122 <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011ec:	f001 f9ac 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80011fa:	4619      	mov	r1, r3
 80011fc:	4831      	ldr	r0, [pc, #196]	@ (80012c4 <MX_TIM1_Init+0x150>)
 80011fe:	f00b fad1 	bl	800c7a4 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001208:	f001 f99e 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800120c:	482d      	ldr	r0, [pc, #180]	@ (80012c4 <MX_TIM1_Init+0x150>)
 800120e:	f00b f857 	bl	800c2c0 <HAL_TIM_PWM_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001218:	f001 f996 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001228:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800122c:	4619      	mov	r1, r3
 800122e:	4825      	ldr	r0, [pc, #148]	@ (80012c4 <MX_TIM1_Init+0x150>)
 8001230:	f00b ff48 	bl	800d0c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800123a:	f001 f985 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123e:	2360      	movs	r3, #96	@ 0x60
 8001240:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800124a:	2300      	movs	r3, #0
 800124c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	4818      	ldr	r0, [pc, #96]	@ (80012c4 <MX_TIM1_Init+0x150>)
 8001264:	f00b f98a 	bl	800c57c <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800126e:	f001 f96b 	bl	8002548 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001286:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800128a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001294:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <MX_TIM1_Init+0x150>)
 80012a8:	f00b ff9a 	bl	800d1e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80012b2:	f001 f949 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <MX_TIM1_Init+0x150>)
 80012b8:	f001 ff4e 	bl	8003158 <HAL_TIM_MspPostInit>

}
 80012bc:	bf00      	nop
 80012be:	3768      	adds	r7, #104	@ 0x68
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000a58 	.word	0x20000a58
 80012c8:	40010000 	.word	0x40010000

080012cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	@ 0x38
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
 80012fa:	615a      	str	r2, [r3, #20]
 80012fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012fe:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001300:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001304:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001306:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001312:	4b28      	ldr	r3, [pc, #160]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001326:	4823      	ldr	r0, [pc, #140]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001328:	f00a fefb 	bl	800c122 <HAL_TIM_Base_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001332:	f001 f909 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001336:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001340:	4619      	mov	r1, r3
 8001342:	481c      	ldr	r0, [pc, #112]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001344:	f00b fa2e 	bl	800c7a4 <HAL_TIM_ConfigClockSource>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800134e:	f001 f8fb 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001352:	4818      	ldr	r0, [pc, #96]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001354:	f00a ffb4 	bl	800c2c0 <HAL_TIM_PWM_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800135e:	f001 f8f3 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	4810      	ldr	r0, [pc, #64]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001372:	f00b fea7 	bl	800d0c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800137c:	f001 f8e4 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001380:	2360      	movs	r3, #96	@ 0x60
 8001382:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	4619      	mov	r1, r3
 8001396:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 8001398:	f00b f8f0 	bl	800c57c <HAL_TIM_PWM_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013a2:	f001 f8d1 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013a6:	4803      	ldr	r0, [pc, #12]	@ (80013b4 <MX_TIM2_Init+0xe8>)
 80013a8:	f001 fed6 	bl	8003158 <HAL_TIM_MspPostInit>

}
 80013ac:	bf00      	nop
 80013ae:	3738      	adds	r7, #56	@ 0x38
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000aa4 	.word	0x20000aa4

080013b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	@ 0x38
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
 80013e6:	615a      	str	r2, [r3, #20]
 80013e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ea:	4b2d      	ldr	r3, [pc, #180]	@ (80014a0 <MX_TIM3_Init+0xe8>)
 80013ec:	4a2d      	ldr	r2, [pc, #180]	@ (80014a4 <MX_TIM3_Init+0xec>)
 80013ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013f0:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <MX_TIM3_Init+0xe8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b2a      	ldr	r3, [pc, #168]	@ (80014a0 <MX_TIM3_Init+0xe8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013fc:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <MX_TIM3_Init+0xe8>)
 80013fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001402:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <MX_TIM3_Init+0xe8>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <MX_TIM3_Init+0xe8>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001410:	4823      	ldr	r0, [pc, #140]	@ (80014a0 <MX_TIM3_Init+0xe8>)
 8001412:	f00a fe86 	bl	800c122 <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800141c:	f001 f894 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001426:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800142a:	4619      	mov	r1, r3
 800142c:	481c      	ldr	r0, [pc, #112]	@ (80014a0 <MX_TIM3_Init+0xe8>)
 800142e:	f00b f9b9 	bl	800c7a4 <HAL_TIM_ConfigClockSource>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001438:	f001 f886 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800143c:	4818      	ldr	r0, [pc, #96]	@ (80014a0 <MX_TIM3_Init+0xe8>)
 800143e:	f00a ff3f 	bl	800c2c0 <HAL_TIM_PWM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001448:	f001 f87e 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4811      	ldr	r0, [pc, #68]	@ (80014a0 <MX_TIM3_Init+0xe8>)
 800145c:	f00b fe32 	bl	800d0c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001466:	f001 f86f 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146a:	2360      	movs	r3, #96	@ 0x60
 800146c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <MX_TIM3_Init+0xe8>)
 8001482:	f00b f87b 	bl	800c57c <HAL_TIM_PWM_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800148c:	f001 f85c 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001490:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <MX_TIM3_Init+0xe8>)
 8001492:	f001 fe61 	bl	8003158 <HAL_TIM_MspPostInit>

}
 8001496:	bf00      	nop
 8001498:	3738      	adds	r7, #56	@ 0x38
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000af0 	.word	0x20000af0
 80014a4:	40000400 	.word	0x40000400

080014a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	@ 0x38
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c8:	463b      	mov	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	615a      	str	r2, [r3, #20]
 80014d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014da:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <MX_TIM5_Init+0xe8>)
 80014dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001594 <MX_TIM5_Init+0xec>)
 80014de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <MX_TIM5_Init+0xe8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <MX_TIM5_Init+0xe8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014ec:	4b28      	ldr	r3, [pc, #160]	@ (8001590 <MX_TIM5_Init+0xe8>)
 80014ee:	f04f 32ff 	mov.w	r2, #4294967295
 80014f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b26      	ldr	r3, [pc, #152]	@ (8001590 <MX_TIM5_Init+0xe8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b25      	ldr	r3, [pc, #148]	@ (8001590 <MX_TIM5_Init+0xe8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001500:	4823      	ldr	r0, [pc, #140]	@ (8001590 <MX_TIM5_Init+0xe8>)
 8001502:	f00a fe0e 	bl	800c122 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800150c:	f001 f81c 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001516:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800151a:	4619      	mov	r1, r3
 800151c:	481c      	ldr	r0, [pc, #112]	@ (8001590 <MX_TIM5_Init+0xe8>)
 800151e:	f00b f941 	bl	800c7a4 <HAL_TIM_ConfigClockSource>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001528:	f001 f80e 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800152c:	4818      	ldr	r0, [pc, #96]	@ (8001590 <MX_TIM5_Init+0xe8>)
 800152e:	f00a fec7 	bl	800c2c0 <HAL_TIM_PWM_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001538:	f001 f806 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4811      	ldr	r0, [pc, #68]	@ (8001590 <MX_TIM5_Init+0xe8>)
 800154c:	f00b fdba 	bl	800d0c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001556:	f000 fff7 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155a:	2360      	movs	r3, #96	@ 0x60
 800155c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800156a:	463b      	mov	r3, r7
 800156c:	220c      	movs	r2, #12
 800156e:	4619      	mov	r1, r3
 8001570:	4807      	ldr	r0, [pc, #28]	@ (8001590 <MX_TIM5_Init+0xe8>)
 8001572:	f00b f803 	bl	800c57c <HAL_TIM_PWM_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800157c:	f000 ffe4 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001580:	4803      	ldr	r0, [pc, #12]	@ (8001590 <MX_TIM5_Init+0xe8>)
 8001582:	f001 fde9 	bl	8003158 <HAL_TIM_MspPostInit>

}
 8001586:	bf00      	nop
 8001588:	3738      	adds	r7, #56	@ 0x38
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000b3c 	.word	0x20000b3c
 8001594:	40000c00 	.word	0x40000c00

08001598 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015b6:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <MX_TIM8_Init+0xa0>)
 80015b8:	4a20      	ldr	r2, [pc, #128]	@ (800163c <MX_TIM8_Init+0xa4>)
 80015ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <MX_TIM8_Init+0xa0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <MX_TIM8_Init+0xa0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <MX_TIM8_Init+0xa0>)
 80015ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <MX_TIM8_Init+0xa0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015d6:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <MX_TIM8_Init+0xa0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <MX_TIM8_Init+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015e2:	4815      	ldr	r0, [pc, #84]	@ (8001638 <MX_TIM8_Init+0xa0>)
 80015e4:	f00a fd9d 	bl	800c122 <HAL_TIM_Base_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80015ee:	f000 ffab 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	480e      	ldr	r0, [pc, #56]	@ (8001638 <MX_TIM8_Init+0xa0>)
 8001600:	f00b f8d0 	bl	800c7a4 <HAL_TIM_ConfigClockSource>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800160a:	f000 ff9d 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	@ (8001638 <MX_TIM8_Init+0xa0>)
 8001620:	f00b fd50 	bl	800d0c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800162a:	f000 ff8d 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000b88 	.word	0x20000b88
 800163c:	40010400 	.word	0x40010400

08001640 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	615a      	str	r2, [r3, #20]
 8001656:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <MX_TIM12_Init+0x84>)
 800165a:	4a1b      	ldr	r2, [pc, #108]	@ (80016c8 <MX_TIM12_Init+0x88>)
 800165c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800165e:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <MX_TIM12_Init+0x84>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <MX_TIM12_Init+0x84>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <MX_TIM12_Init+0x84>)
 800166c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001670:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <MX_TIM12_Init+0x84>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <MX_TIM12_Init+0x84>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800167e:	4811      	ldr	r0, [pc, #68]	@ (80016c4 <MX_TIM12_Init+0x84>)
 8001680:	f00a fe1e 	bl	800c2c0 <HAL_TIM_PWM_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800168a:	f000 ff5d 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168e:	2360      	movs	r3, #96	@ 0x60
 8001690:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	4619      	mov	r1, r3
 80016a4:	4807      	ldr	r0, [pc, #28]	@ (80016c4 <MX_TIM12_Init+0x84>)
 80016a6:	f00a ff69 	bl	800c57c <HAL_TIM_PWM_ConfigChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80016b0:	f000 ff4a 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80016b4:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <MX_TIM12_Init+0x84>)
 80016b6:	f001 fd4f 	bl	8003158 <HAL_TIM_MspPostInit>

}
 80016ba:	bf00      	nop
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000bd4 	.word	0x20000bd4
 80016c8:	40001800 	.word	0x40001800

080016cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <MX_USART1_UART_Init+0x58>)
 80016d2:	4a15      	ldr	r2, [pc, #84]	@ (8001728 <MX_USART1_UART_Init+0x5c>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <MX_USART1_UART_Init+0x58>)
 80016d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <MX_USART1_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <MX_USART1_UART_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <MX_USART1_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <MX_USART1_UART_Init+0x58>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <MX_USART1_UART_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <MX_USART1_UART_Init+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001702:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <MX_USART1_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <MX_USART1_UART_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	@ (8001724 <MX_USART1_UART_Init+0x58>)
 8001710:	f00b fe02 	bl	800d318 <HAL_UART_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800171a:	f000 ff15 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000c20 	.word	0x20000c20
 8001728:	40011000 	.word	0x40011000

0800172c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_USART6_UART_Init+0x58>)
 8001732:	4a15      	ldr	r2, [pc, #84]	@ (8001788 <MX_USART6_UART_Init+0x5c>)
 8001734:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <MX_USART6_UART_Init+0x58>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MX_USART6_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <MX_USART6_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <MX_USART6_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <MX_USART6_UART_Init+0x58>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <MX_USART6_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <MX_USART6_UART_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001762:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <MX_USART6_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <MX_USART6_UART_Init+0x58>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	@ (8001784 <MX_USART6_UART_Init+0x58>)
 8001770:	f00b fdd2 	bl	800d318 <HAL_UART_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800177a:	f000 fee5 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000ca8 	.word	0x20000ca8
 8001788:	40011400 	.word	0x40011400

0800178c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80017a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <MX_FMC_Init+0x98>)
 80017a6:	4a20      	ldr	r2, [pc, #128]	@ (8001828 <MX_FMC_Init+0x9c>)
 80017a8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <MX_FMC_Init+0x98>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80017b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <MX_FMC_Init+0x98>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80017b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <MX_FMC_Init+0x98>)
 80017b8:	2204      	movs	r2, #4
 80017ba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <MX_FMC_Init+0x98>)
 80017be:	2210      	movs	r2, #16
 80017c0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80017c2:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <MX_FMC_Init+0x98>)
 80017c4:	2240      	movs	r2, #64	@ 0x40
 80017c6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80017c8:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <MX_FMC_Init+0x98>)
 80017ca:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017ce:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <MX_FMC_Init+0x98>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80017d6:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <MX_FMC_Init+0x98>)
 80017d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017dc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <MX_FMC_Init+0x98>)
 80017e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <MX_FMC_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80017f0:	2307      	movs	r3, #7
 80017f2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80017f4:	2304      	movs	r3, #4
 80017f6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80017f8:	2307      	movs	r3, #7
 80017fa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80017fc:	2303      	movs	r3, #3
 80017fe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001800:	2302      	movs	r3, #2
 8001802:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001804:	2302      	movs	r3, #2
 8001806:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	@ (8001824 <MX_FMC_Init+0x98>)
 800180e:	f00a fb4c 	bl	800beaa <HAL_SDRAM_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001818:	f000 fe96 	bl	8002548 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000d30 	.word	0x20000d30
 8001828:	a0000140 	.word	0xa0000140

0800182c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b090      	sub	sp, #64	@ 0x40
 8001830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001832:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001842:	4bb0      	ldr	r3, [pc, #704]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4aaf      	ldr	r2, [pc, #700]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001848:	f043 0310 	orr.w	r3, r3, #16
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4bad      	ldr	r3, [pc, #692]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800185a:	4baa      	ldr	r3, [pc, #680]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4aa9      	ldr	r2, [pc, #676]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4ba7      	ldr	r3, [pc, #668]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4ba4      	ldr	r3, [pc, #656]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4aa3      	ldr	r2, [pc, #652]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4ba1      	ldr	r3, [pc, #644]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188a:	4b9e      	ldr	r3, [pc, #632]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a9d      	ldr	r2, [pc, #628]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001890:	f043 0308 	orr.w	r3, r3, #8
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b9b      	ldr	r3, [pc, #620]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	4b98      	ldr	r3, [pc, #608]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a97      	ldr	r2, [pc, #604]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b95      	ldr	r3, [pc, #596]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	4b92      	ldr	r3, [pc, #584]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a91      	ldr	r2, [pc, #580]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b8f      	ldr	r3, [pc, #572]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018d2:	4b8c      	ldr	r3, [pc, #560]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a8b      	ldr	r2, [pc, #556]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 80018d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b89      	ldr	r3, [pc, #548]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80018ea:	4b86      	ldr	r3, [pc, #536]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a85      	ldr	r2, [pc, #532]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b83      	ldr	r3, [pc, #524]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001902:	4b80      	ldr	r3, [pc, #512]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a7f      	ldr	r2, [pc, #508]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001908:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800191a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a79      	ldr	r2, [pc, #484]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001920:	f043 0320 	orr.w	r3, r3, #32
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b77      	ldr	r3, [pc, #476]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001932:	4b74      	ldr	r3, [pc, #464]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a73      	ldr	r2, [pc, #460]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b71      	ldr	r3, [pc, #452]	@ (8001b04 <MX_GPIO_Init+0x2d8>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	2120      	movs	r1, #32
 800194e:	486e      	ldr	r0, [pc, #440]	@ (8001b08 <MX_GPIO_Init+0x2dc>)
 8001950:	f004 fbe8 	bl	8006124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	210c      	movs	r1, #12
 8001958:	486c      	ldr	r0, [pc, #432]	@ (8001b0c <MX_GPIO_Init+0x2e0>)
 800195a:	f004 fbe3 	bl	8006124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2108      	movs	r1, #8
 8001962:	486b      	ldr	r0, [pc, #428]	@ (8001b10 <MX_GPIO_Init+0x2e4>)
 8001964:	f004 fbde 	bl	8006124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800196e:	4867      	ldr	r0, [pc, #412]	@ (8001b0c <MX_GPIO_Init+0x2e0>)
 8001970:	f004 fbd8 	bl	8006124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800197a:	4866      	ldr	r0, [pc, #408]	@ (8001b14 <MX_GPIO_Init+0x2e8>)
 800197c:	f004 fbd2 	bl	8006124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	21c8      	movs	r1, #200	@ 0xc8
 8001984:	4864      	ldr	r0, [pc, #400]	@ (8001b18 <MX_GPIO_Init+0x2ec>)
 8001986:	f004 fbcd 	bl	8006124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800198a:	2308      	movs	r3, #8
 800198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198e:	2300      	movs	r3, #0
 8001990:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800199a:	4619      	mov	r1, r3
 800199c:	485f      	ldr	r0, [pc, #380]	@ (8001b1c <MX_GPIO_Init+0x2f0>)
 800199e:	f004 f9fd 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80019a2:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019b4:	230a      	movs	r3, #10
 80019b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019bc:	4619      	mov	r1, r3
 80019be:	4858      	ldr	r0, [pc, #352]	@ (8001b20 <MX_GPIO_Init+0x2f4>)
 80019c0:	f004 f9ec 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80019c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d6:	4619      	mov	r1, r3
 80019d8:	4852      	ldr	r0, [pc, #328]	@ (8001b24 <MX_GPIO_Init+0x2f8>)
 80019da:	f004 f9df 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80019de:	2340      	movs	r3, #64	@ 0x40
 80019e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019e2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80019e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019f0:	4619      	mov	r1, r3
 80019f2:	4845      	ldr	r0, [pc, #276]	@ (8001b08 <MX_GPIO_Init+0x2dc>)
 80019f4:	f004 f9d2 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80019f8:	2320      	movs	r3, #32
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	483e      	ldr	r0, [pc, #248]	@ (8001b08 <MX_GPIO_Init+0x2dc>)
 8001a10:	f004 f9c4 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001a14:	f241 030c 	movw	r3, #4108	@ 0x100c
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4837      	ldr	r0, [pc, #220]	@ (8001b0c <MX_GPIO_Init+0x2e0>)
 8001a2e:	f004 f9b5 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a44:	4619      	mov	r1, r3
 8001a46:	4838      	ldr	r0, [pc, #224]	@ (8001b28 <MX_GPIO_Init+0x2fc>)
 8001a48:	f004 f9a8 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a60:	4619      	mov	r1, r3
 8001a62:	482b      	ldr	r0, [pc, #172]	@ (8001b10 <MX_GPIO_Init+0x2e4>)
 8001a64:	f004 f99a 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a68:	2310      	movs	r3, #16
 8001a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4823      	ldr	r0, [pc, #140]	@ (8001b08 <MX_GPIO_Init+0x2dc>)
 8001a7c:	f004 f98e 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001a80:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a86:	2300      	movs	r3, #0
 8001a88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a92:	4619      	mov	r1, r3
 8001a94:	481f      	ldr	r0, [pc, #124]	@ (8001b14 <MX_GPIO_Init+0x2e8>)
 8001a96:	f004 f981 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4818      	ldr	r0, [pc, #96]	@ (8001b14 <MX_GPIO_Init+0x2e8>)
 8001ab4:	f004 f972 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ab8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001abe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001acc:	4619      	mov	r1, r3
 8001ace:	480f      	ldr	r0, [pc, #60]	@ (8001b0c <MX_GPIO_Init+0x2e0>)
 8001ad0:	f004 f964 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aec:	4619      	mov	r1, r3
 8001aee:	4809      	ldr	r0, [pc, #36]	@ (8001b14 <MX_GPIO_Init+0x2e8>)
 8001af0:	f004 f954 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001af4:	23c8      	movs	r3, #200	@ 0xc8
 8001af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b00:	e014      	b.n	8001b2c <MX_GPIO_Init+0x300>
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	40022800 	.word	0x40022800
 8001b14:	40021c00 	.word	0x40021c00
 8001b18:	40021800 	.word	0x40021800
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40022400 	.word	0x40022400
 8001b28:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b34:	4619      	mov	r1, r3
 8001b36:	4819      	ldr	r0, [pc, #100]	@ (8001b9c <MX_GPIO_Init+0x370>)
 8001b38:	f004 f930 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001b3c:	2305      	movs	r3, #5
 8001b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b54:	4619      	mov	r1, r3
 8001b56:	4812      	ldr	r0, [pc, #72]	@ (8001ba0 <MX_GPIO_Init+0x374>)
 8001b58:	f004 f920 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b60:	2300      	movs	r3, #0
 8001b62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480b      	ldr	r0, [pc, #44]	@ (8001b9c <MX_GPIO_Init+0x370>)
 8001b70:	f004 f914 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001b74:	2328      	movs	r3, #40	@ 0x28
 8001b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b84:	230a      	movs	r3, #10
 8001b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <MX_GPIO_Init+0x378>)
 8001b90:	f004 f904 	bl	8005d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b94:	bf00      	nop
 8001b96:	3740      	adds	r7, #64	@ 0x40
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8001bae:	af02      	add	r7, sp, #8
 8001bb0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001bb4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8001bb8:	6018      	str	r0, [r3, #0]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001bba:	f013 f91b 	bl	8014df4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  
  // Logger 초기화 (STM32에서는 단순히 연결 상태 설정)
  LOGGER_Connect("STM32", 0);
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	48ab      	ldr	r0, [pc, #684]	@ (8001e70 <StartDefaultTask+0x2c8>)
 8001bc2:	f001 fe69 	bl	8003898 <LOGGER_Connect>
  
  LOG_INFO("=== STM32F746G-DISCO LoRa UART Test Started ===");
 8001bc6:	49ab      	ldr	r1, [pc, #684]	@ (8001e74 <StartDefaultTask+0x2cc>)
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f001 fead 	bl	8003928 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8001bce:	4baa      	ldr	r3, [pc, #680]	@ (8001e78 <StartDefaultTask+0x2d0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4aaa      	ldr	r2, [pc, #680]	@ (8001e7c <StartDefaultTask+0x2d4>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	0c9b      	lsrs	r3, r3, #18
 8001bda:	461a      	mov	r2, r3
 8001bdc:	49a8      	ldr	r1, [pc, #672]	@ (8001e80 <StartDefaultTask+0x2d8>)
 8001bde:	2001      	movs	r0, #1
 8001be0:	f001 fea2 	bl	8003928 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8001be4:	49a7      	ldr	r1, [pc, #668]	@ (8001e84 <StartDefaultTask+0x2dc>)
 8001be6:	2001      	movs	r0, #1
 8001be8:	f001 fe9e 	bl	8003928 <LOGGER_SendFormatted>
  LOG_INFO("Test Objective: Send AT command once and check for OK response");
 8001bec:	49a6      	ldr	r1, [pc, #664]	@ (8001e88 <StartDefaultTask+0x2e0>)
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f001 fe9a 	bl	8003928 <LOGGER_SendFormatted>
  
  // UART 연결 테스트
  LOG_INFO("[STEP 1] Testing UART6 connection to LoRa module...");
 8001bf4:	49a5      	ldr	r1, [pc, #660]	@ (8001e8c <StartDefaultTask+0x2e4>)
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f001 fe96 	bl	8003928 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Pins: PC6(TX) -> LoRa RX, PC7(RX) <- LoRa TX");
 8001bfc:	49a4      	ldr	r1, [pc, #656]	@ (8001e90 <StartDefaultTask+0x2e8>)
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f001 fe92 	bl	8003928 <LOGGER_SendFormatted>
  
  UartStatus uart_status = UART_Connect("UART6");
 8001c04:	48a3      	ldr	r0, [pc, #652]	@ (8001e94 <StartDefaultTask+0x2ec>)
 8001c06:	f001 ff2b 	bl	8003a60 <UART_Connect>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
  if (uart_status == UART_STATUS_OK) {
 8001c10:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <StartDefaultTask+0x84>
    LOG_INFO("[STEP 1] ✓ UART6 connection SUCCESS");
 8001c18:	499f      	ldr	r1, [pc, #636]	@ (8001e98 <StartDefaultTask+0x2f0>)
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f001 fe84 	bl	8003928 <LOGGER_SendFormatted>
    LOG_ERROR("Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  // UART 연결 상태 확인
  if (UART_IsConnected()) {
 8001c20:	f001 fff4 	bl	8003c0c <UART_IsConnected>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d03e      	beq.n	8001ca8 <StartDefaultTask+0x100>
 8001c2a:	e00c      	b.n	8001c46 <StartDefaultTask+0x9e>
    LOG_ERROR("[STEP 1] ✗ UART6 connection FAILED (status: %d)", uart_status);
 8001c2c:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8001c30:	461a      	mov	r2, r3
 8001c32:	499a      	ldr	r1, [pc, #616]	@ (8001e9c <StartDefaultTask+0x2f4>)
 8001c34:	2003      	movs	r0, #3
 8001c36:	f001 fe77 	bl	8003928 <LOGGER_SendFormatted>
    LOG_ERROR("Program terminated due to UART connection failure");
 8001c3a:	4999      	ldr	r1, [pc, #612]	@ (8001ea0 <StartDefaultTask+0x2f8>)
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f001 fe73 	bl	8003928 <LOGGER_SendFormatted>
    goto idle_loop;
 8001c42:	f000 bc0b 	b.w	800245c <StartDefaultTask+0x8b4>
    LOG_INFO("[STEP 1] ✓ UART6 is CONNECTED and ready");
 8001c46:	4997      	ldr	r1, [pc, #604]	@ (8001ea4 <StartDefaultTask+0x2fc>)
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f001 fe6d 	bl	8003928 <LOGGER_SendFormatted>
    LOG_ERROR("[STEP 1] ✗ UART6 is NOT CONNECTED");
    LOG_ERROR("Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  osDelay(1000); // 1초 대기 (안정화)
 8001c4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c52:	f010 fdcb 	bl	80127ec <osDelay>
  
  // === 하드웨어 진단 단계 추가 ===
  LOG_INFO("[DIAGNOSIS] === UART Hardware Diagnosis ===");
 8001c56:	4994      	ldr	r1, [pc, #592]	@ (8001ea8 <StartDefaultTask+0x300>)
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f001 fe65 	bl	8003928 <LOGGER_SendFormatted>
  LOG_INFO("[DIAGNOSIS] Testing UART with different scenarios...");
 8001c5e:	4993      	ldr	r1, [pc, #588]	@ (8001eac <StartDefaultTask+0x304>)
 8001c60:	2001      	movs	r0, #1
 8001c62:	f001 fe61 	bl	8003928 <LOGGER_SendFormatted>
  
  // 진단 1: 루프백 테스트 (PC6-PC7 연결 필요)
  LOG_INFO("[DIAGNOSIS] Test 1: Loopback Test");
 8001c66:	4992      	ldr	r1, [pc, #584]	@ (8001eb0 <StartDefaultTask+0x308>)
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f001 fe5d 	bl	8003928 <LOGGER_SendFormatted>
  LOG_INFO("[DIAGNOSIS] Please connect PC6 to PC7 for loopback test");
 8001c6e:	4991      	ldr	r1, [pc, #580]	@ (8001eb4 <StartDefaultTask+0x30c>)
 8001c70:	2001      	movs	r0, #1
 8001c72:	f001 fe59 	bl	8003928 <LOGGER_SendFormatted>
  LOG_INFO("[DIAGNOSIS] If no loopback: Disconnect LoRa and check with actual module");
 8001c76:	4990      	ldr	r1, [pc, #576]	@ (8001eb8 <StartDefaultTask+0x310>)
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f001 fe55 	bl	8003928 <LOGGER_SendFormatted>
  
  const char* loopback_cmd = "LOOP\r\n";
 8001c7e:	4b8f      	ldr	r3, [pc, #572]	@ (8001ebc <StartDefaultTask+0x314>)
 8001c80:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
  LOG_INFO("[DIAGNOSIS] Sending loopback test: '%s'", loopback_cmd);
 8001c84:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8001c88:	498d      	ldr	r1, [pc, #564]	@ (8001ec0 <StartDefaultTask+0x318>)
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f001 fe4c 	bl	8003928 <LOGGER_SendFormatted>
  
  UartStatus loop_send_status = UART_Send(loopback_cmd);
 8001c90:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8001c94:	f001 ff1c 	bl	8003ad0 <UART_Send>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
  if (loop_send_status == UART_STATUS_OK) {
 8001c9e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d172      	bne.n	8001d8c <StartDefaultTask+0x1e4>
 8001ca6:	e008      	b.n	8001cba <StartDefaultTask+0x112>
    LOG_ERROR("[STEP 1] ✗ UART6 is NOT CONNECTED");
 8001ca8:	4986      	ldr	r1, [pc, #536]	@ (8001ec4 <StartDefaultTask+0x31c>)
 8001caa:	2003      	movs	r0, #3
 8001cac:	f001 fe3c 	bl	8003928 <LOGGER_SendFormatted>
    LOG_ERROR("Program terminated due to UART connection failure");
 8001cb0:	497b      	ldr	r1, [pc, #492]	@ (8001ea0 <StartDefaultTask+0x2f8>)
 8001cb2:	2003      	movs	r0, #3
 8001cb4:	f001 fe38 	bl	8003928 <LOGGER_SendFormatted>
    goto idle_loop;
 8001cb8:	e3d0      	b.n	800245c <StartDefaultTask+0x8b4>
    LOG_INFO("[DIAGNOSIS] ✓ Loopback command sent");
 8001cba:	4983      	ldr	r1, [pc, #524]	@ (8001ec8 <StartDefaultTask+0x320>)
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f001 fe33 	bl	8003928 <LOGGER_SendFormatted>
    
    osDelay(500); // 500ms 대기
 8001cc2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cc6:	f010 fd91 	bl	80127ec <osDelay>
    
    char loop_buffer[256];
    int loop_bytes = 0;
 8001cca:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001cce:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
    UartStatus loop_recv_status = UART_Receive(loop_buffer, sizeof(loop_buffer) - 1, &loop_bytes);
 8001cd6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	21ff      	movs	r1, #255	@ 0xff
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f001 ff39 	bl	8003b58 <UART_Receive>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
    
    if (loop_recv_status == UART_STATUS_OK && loop_bytes > 0) {
 8001cec:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d147      	bne.n	8001d84 <StartDefaultTask+0x1dc>
 8001cf4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001cf8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	dd40      	ble.n	8001d84 <StartDefaultTask+0x1dc>
      loop_buffer[loop_bytes] = '\0';
 8001d02:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001d06:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8001d10:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 8001d14:	2100      	movs	r1, #0
 8001d16:	54d1      	strb	r1, [r2, r3]
      LOG_INFO("[DIAGNOSIS] ✓ Loopback received (%d bytes): '%s'", loop_bytes, loop_buffer);
 8001d18:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001d1c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	4969      	ldr	r1, [pc, #420]	@ (8001ecc <StartDefaultTask+0x324>)
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f001 fdfd 	bl	8003928 <LOGGER_SendFormatted>
      
      if (loop_bytes >= 6 && strncmp(loop_buffer, "LOOP", 4) == 0) {
 8001d2e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001d32:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	dd0e      	ble.n	8001d5a <StartDefaultTask+0x1b2>
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	2204      	movs	r2, #4
 8001d42:	4963      	ldr	r1, [pc, #396]	@ (8001ed0 <StartDefaultTask+0x328>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f013 fc85 	bl	8015654 <strncmp>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d104      	bne.n	8001d5a <StartDefaultTask+0x1b2>
        LOG_INFO("[DIAGNOSIS] 🎉 UART Hardware WORKING - Full loopback success!");
 8001d50:	4960      	ldr	r1, [pc, #384]	@ (8001ed4 <StartDefaultTask+0x32c>)
 8001d52:	2001      	movs	r0, #1
 8001d54:	f001 fde8 	bl	8003928 <LOGGER_SendFormatted>
      if (loop_bytes >= 6 && strncmp(loop_buffer, "LOOP", 4) == 0) {
 8001d58:	e018      	b.n	8001d8c <StartDefaultTask+0x1e4>
      } else if (loop_bytes == 1) {
 8001d5a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001d5e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d108      	bne.n	8001d7a <StartDefaultTask+0x1d2>
        LOG_WARN("[DIAGNOSIS] ⚠ Partial loopback - only 1 byte received");
 8001d68:	495b      	ldr	r1, [pc, #364]	@ (8001ed8 <StartDefaultTask+0x330>)
 8001d6a:	2002      	movs	r0, #2
 8001d6c:	f001 fddc 	bl	8003928 <LOGGER_SendFormatted>
        LOG_WARN("[DIAGNOSIS] Same issue as LoRa - hardware timing problem");
 8001d70:	495a      	ldr	r1, [pc, #360]	@ (8001edc <StartDefaultTask+0x334>)
 8001d72:	2002      	movs	r0, #2
 8001d74:	f001 fdd8 	bl	8003928 <LOGGER_SendFormatted>
      if (loop_bytes >= 6 && strncmp(loop_buffer, "LOOP", 4) == 0) {
 8001d78:	e008      	b.n	8001d8c <StartDefaultTask+0x1e4>
      } else {
        LOG_INFO("[DIAGNOSIS] ✓ Loopback working but partial data");
 8001d7a:	4959      	ldr	r1, [pc, #356]	@ (8001ee0 <StartDefaultTask+0x338>)
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f001 fdd3 	bl	8003928 <LOGGER_SendFormatted>
      if (loop_bytes >= 6 && strncmp(loop_buffer, "LOOP", 4) == 0) {
 8001d82:	e003      	b.n	8001d8c <StartDefaultTask+0x1e4>
      }
    } else {
      LOG_WARN("[DIAGNOSIS] ⚠ No loopback data - check PC6-PC7 connection");
 8001d84:	4957      	ldr	r1, [pc, #348]	@ (8001ee4 <StartDefaultTask+0x33c>)
 8001d86:	2002      	movs	r0, #2
 8001d88:	f001 fdce 	bl	8003928 <LOGGER_SendFormatted>
    }
  }
  
  // 진단 2: 다른 명령어 테스트
  LOG_INFO("[DIAGNOSIS] Test 2: Different Command Formats");
 8001d8c:	4956      	ldr	r1, [pc, #344]	@ (8001ee8 <StartDefaultTask+0x340>)
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f001 fdca 	bl	8003928 <LOGGER_SendFormatted>
  
  const char* test_commands[] = {
 8001d94:	4b55      	ldr	r3, [pc, #340]	@ (8001eec <StartDefaultTask+0x344>)
 8001d96:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 8001d9a:	461d      	mov	r5, r3
 8001d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da0:	682b      	ldr	r3, [r5, #0]
 8001da2:	6023      	str	r3, [r4, #0]
    "AT\n",         // AT with LF only
    "AT+VER\r\n",   // Version command
    "+++",          // Command mode (some modules)
  };
  
  int num_test_commands = sizeof(test_commands) / sizeof(test_commands[0]);
 8001da4:	2305      	movs	r3, #5
 8001da6:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  
  for (int i = 0; i < num_test_commands; i++) {
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8001db0:	e0b3      	b.n	8001f1a <StartDefaultTask+0x372>
    LOG_INFO("[DIAGNOSIS] Testing command %d: '%s'", i+1, test_commands[i]);
 8001db2:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001dc2:	443b      	add	r3, r7
 8001dc4:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001dc8:	4949      	ldr	r1, [pc, #292]	@ (8001ef0 <StartDefaultTask+0x348>)
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f001 fdac 	bl	8003928 <LOGGER_SendFormatted>
    
    UartStatus test_send_status = UART_Send(test_commands[i]);
 8001dd0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001dda:	443b      	add	r3, r7
 8001ddc:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f001 fe75 	bl	8003ad0 <UART_Send>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f887 3230 	strb.w	r3, [r7, #560]	@ 0x230
    if (test_send_status == UART_STATUS_OK) {
 8001dec:	f897 3230 	ldrb.w	r3, [r7, #560]	@ 0x230
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f040 8089 	bne.w	8001f08 <StartDefaultTask+0x360>
      osDelay(1000); // 1초 대기
 8001df6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dfa:	f010 fcf7 	bl	80127ec <osDelay>
      
      char test_buffer[256];
      int test_bytes = 0;
 8001dfe:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001e02:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
      UartStatus test_recv_status = UART_Receive(test_buffer, sizeof(test_buffer) - 1, &test_bytes);
 8001e0a:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	21ff      	movs	r1, #255	@ 0xff
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fe9f 	bl	8003b58 <UART_Receive>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
      
      if (test_recv_status == UART_STATUS_OK && test_bytes > 0) {
 8001e20:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d167      	bne.n	8001ef8 <StartDefaultTask+0x350>
 8001e28:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001e2c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	dd60      	ble.n	8001ef8 <StartDefaultTask+0x350>
        test_buffer[test_bytes] = '\0';
 8001e36:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001e3a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8001e44:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 8001e48:	2100      	movs	r1, #0
 8001e4a:	54d1      	strb	r1, [r2, r3]
        LOG_INFO("[DIAGNOSIS] ✓ Response to cmd %d (%d bytes): '%s'", i+1, test_bytes, test_buffer);
 8001e4c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001e56:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	460b      	mov	r3, r1
 8001e64:	4923      	ldr	r1, [pc, #140]	@ (8001ef4 <StartDefaultTask+0x34c>)
 8001e66:	2001      	movs	r0, #1
 8001e68:	f001 fd5e 	bl	8003928 <LOGGER_SendFormatted>
 8001e6c:	e04c      	b.n	8001f08 <StartDefaultTask+0x360>
 8001e6e:	bf00      	nop
 8001e70:	080161f8 	.word	0x080161f8
 8001e74:	08016200 	.word	0x08016200
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	431bde83 	.word	0x431bde83
 8001e80:	08016230 	.word	0x08016230
 8001e84:	08016248 	.word	0x08016248
 8001e88:	08016270 	.word	0x08016270
 8001e8c:	080162b0 	.word	0x080162b0
 8001e90:	080162e4 	.word	0x080162e4
 8001e94:	08016318 	.word	0x08016318
 8001e98:	08016320 	.word	0x08016320
 8001e9c:	08016348 	.word	0x08016348
 8001ea0:	0801637c 	.word	0x0801637c
 8001ea4:	080163b0 	.word	0x080163b0
 8001ea8:	08016400 	.word	0x08016400
 8001eac:	0801642c 	.word	0x0801642c
 8001eb0:	08016464 	.word	0x08016464
 8001eb4:	08016488 	.word	0x08016488
 8001eb8:	080164c0 	.word	0x080164c0
 8001ebc:	0801650c 	.word	0x0801650c
 8001ec0:	08016514 	.word	0x08016514
 8001ec4:	080163dc 	.word	0x080163dc
 8001ec8:	0801653c 	.word	0x0801653c
 8001ecc:	08016564 	.word	0x08016564
 8001ed0:	08016598 	.word	0x08016598
 8001ed4:	080165a0 	.word	0x080165a0
 8001ed8:	080165e0 	.word	0x080165e0
 8001edc:	08016618 	.word	0x08016618
 8001ee0:	08016654 	.word	0x08016654
 8001ee4:	08016688 	.word	0x08016688
 8001ee8:	080166c4 	.word	0x080166c4
 8001eec:	0801717c 	.word	0x0801717c
 8001ef0:	080166f4 	.word	0x080166f4
 8001ef4:	0801671c 	.word	0x0801671c
      } else {
        LOG_INFO("[DIAGNOSIS] ⚠ No response to cmd %d", i+1);
 8001ef8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001efc:	3301      	adds	r3, #1
 8001efe:	461a      	mov	r2, r3
 8001f00:	49d1      	ldr	r1, [pc, #836]	@ (8002248 <StartDefaultTask+0x6a0>)
 8001f02:	2001      	movs	r0, #1
 8001f04:	f001 fd10 	bl	8003928 <LOGGER_SendFormatted>
      }
    }
    
    osDelay(500); // 명령어 간 간격
 8001f08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f0c:	f010 fc6e 	bl	80127ec <osDelay>
  for (int i = 0; i < num_test_commands; i++) {
 8001f10:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001f14:	3301      	adds	r3, #1
 8001f16:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8001f1a:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8001f1e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001f22:	429a      	cmp	r2, r3
 8001f24:	f6ff af45 	blt.w	8001db2 <StartDefaultTask+0x20a>
  }
  
  LOG_INFO("[DIAGNOSIS] === End of Hardware Diagnosis ===");
 8001f28:	49c8      	ldr	r1, [pc, #800]	@ (800224c <StartDefaultTask+0x6a4>)
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f001 fcfc 	bl	8003928 <LOGGER_SendFormatted>
  osDelay(2000); // 2초 대기
 8001f30:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f34:	f010 fc5a 	bl	80127ec <osDelay>
  
  // === 원래 AT 명령어 테스트 계속 ===
  
  // AT 명령어 전송
  LOG_INFO("[STEP 2] Sending AT command to LoRa module...");
 8001f38:	49c5      	ldr	r1, [pc, #788]	@ (8002250 <StartDefaultTask+0x6a8>)
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f001 fcf4 	bl	8003928 <LOGGER_SendFormatted>
  
  const char* test_cmd = "AT\r\n";
 8001f40:	4bc4      	ldr	r3, [pc, #784]	@ (8002254 <StartDefaultTask+0x6ac>)
 8001f42:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  LOG_INFO("[STEP 2] Command: '%s'", test_cmd);
 8001f46:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8001f4a:	49c3      	ldr	r1, [pc, #780]	@ (8002258 <StartDefaultTask+0x6b0>)
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f001 fceb 	bl	8003928 <LOGGER_SendFormatted>
  
  UartStatus send_status = UART_Send(test_cmd);
 8001f52:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8001f56:	f001 fdbb 	bl	8003ad0 <UART_Send>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
  if (send_status == UART_STATUS_OK) {
 8001f60:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d122      	bne.n	8001fae <StartDefaultTask+0x406>
    LOG_INFO("[STEP 2] ✓ AT command sent successfully");
 8001f68:	49bc      	ldr	r1, [pc, #752]	@ (800225c <StartDefaultTask+0x6b4>)
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f001 fcdc 	bl	8003928 <LOGGER_SendFormatted>
    LOG_ERROR("Program terminated due to send failure");
    goto idle_loop;
  }
  
  // 응답 대기
  LOG_INFO("[STEP 3] Waiting for LoRa module response...");
 8001f70:	49bb      	ldr	r1, [pc, #748]	@ (8002260 <StartDefaultTask+0x6b8>)
 8001f72:	2001      	movs	r0, #1
 8001f74:	f001 fcd8 	bl	8003928 <LOGGER_SendFormatted>
  osDelay(1000); // 1초 대기 (응답 시간)
 8001f78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f7c:	f010 fc36 	bl	80127ec <osDelay>
  
  // 응답 확인
  char rx_buffer[256];
  int bytes_received = 0;
 8001f80:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001f84:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
  
  UartStatus recv_status = UART_Receive(rx_buffer, sizeof(rx_buffer) - 1, &bytes_received);
 8001f8c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001f90:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f94:	21ff      	movs	r1, #255	@ 0xff
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 fdde 	bl	8003b58 <UART_Receive>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f887 323a 	strb.w	r3, [r7, #570]	@ 0x23a
  
  if (recv_status == UART_STATUS_OK && bytes_received > 0) {
 8001fa2:	f897 323a 	ldrb.w	r3, [r7, #570]	@ 0x23a
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 821c 	bne.w	80023e4 <StartDefaultTask+0x83c>
 8001fac:	e00b      	b.n	8001fc6 <StartDefaultTask+0x41e>
    LOG_ERROR("[STEP 2] ✗ AT command send FAILED (status: %d)", send_status);
 8001fae:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	49ab      	ldr	r1, [pc, #684]	@ (8002264 <StartDefaultTask+0x6bc>)
 8001fb6:	2003      	movs	r0, #3
 8001fb8:	f001 fcb6 	bl	8003928 <LOGGER_SendFormatted>
    LOG_ERROR("Program terminated due to send failure");
 8001fbc:	49aa      	ldr	r1, [pc, #680]	@ (8002268 <StartDefaultTask+0x6c0>)
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f001 fcb2 	bl	8003928 <LOGGER_SendFormatted>
    goto idle_loop;
 8001fc4:	e24a      	b.n	800245c <StartDefaultTask+0x8b4>
  if (recv_status == UART_STATUS_OK && bytes_received > 0) {
 8001fc6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001fca:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f340 8207 	ble.w	80023e4 <StartDefaultTask+0x83c>
    // 수신된 데이터를 null-terminate
    rx_buffer[bytes_received] = '\0';
 8001fd6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001fda:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8001fe4:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8001fe8:	2100      	movs	r1, #0
 8001fea:	54d1      	strb	r1, [r2, r3]
    
    LOG_INFO("[STEP 3] ✓ Response received (%d bytes)", bytes_received);
 8001fec:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001ff0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	499c      	ldr	r1, [pc, #624]	@ (800226c <StartDefaultTask+0x6c4>)
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f001 fc94 	bl	8003928 <LOGGER_SendFormatted>
    LOG_INFO("[STEP 3] Raw response: '%s'", rx_buffer);
 8002000:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002004:	461a      	mov	r2, r3
 8002006:	499a      	ldr	r1, [pc, #616]	@ (8002270 <StartDefaultTask+0x6c8>)
 8002008:	2001      	movs	r0, #1
 800200a:	f001 fc8d 	bl	8003928 <LOGGER_SendFormatted>
    
    // 바이트별 분석 (디버깅용)
    LOG_INFO("[STEP 3] Hex dump:");
 800200e:	4999      	ldr	r1, [pc, #612]	@ (8002274 <StartDefaultTask+0x6cc>)
 8002010:	2001      	movs	r0, #1
 8002012:	f001 fc89 	bl	8003928 <LOGGER_SendFormatted>
    for (int i = 0; i < bytes_received; i++) {
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 800201c:	e03c      	b.n	8002098 <StartDefaultTask+0x4f0>
      uint8_t byte = (uint8_t)rx_buffer[i];
 800201e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002022:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8002026:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800202a:	4413      	add	r3, r2
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	f887 3232 	strb.w	r3, [r7, #562]	@ 0x232
      char printable = (byte >= 32 && byte <= 126) ? byte : '.';
 8002032:	f897 3232 	ldrb.w	r3, [r7, #562]	@ 0x232
 8002036:	2b1f      	cmp	r3, #31
 8002038:	d906      	bls.n	8002048 <StartDefaultTask+0x4a0>
 800203a:	f897 3232 	ldrb.w	r3, [r7, #562]	@ 0x232
 800203e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002040:	d802      	bhi.n	8002048 <StartDefaultTask+0x4a0>
 8002042:	f897 3232 	ldrb.w	r3, [r7, #562]	@ 0x232
 8002046:	e000      	b.n	800204a <StartDefaultTask+0x4a2>
 8002048:	232e      	movs	r3, #46	@ 0x2e
 800204a:	f887 3231 	strb.w	r3, [r7, #561]	@ 0x231
      LOG_INFO("  [%d] = 0x%02X ('%c') %s", i, byte, printable,
 800204e:	f897 1232 	ldrb.w	r1, [r7, #562]	@ 0x232
 8002052:	f897 2231 	ldrb.w	r2, [r7, #561]	@ 0x231
 8002056:	f897 3232 	ldrb.w	r3, [r7, #562]	@ 0x232
 800205a:	2b0d      	cmp	r3, #13
 800205c:	d00d      	beq.n	800207a <StartDefaultTask+0x4d2>
 800205e:	f897 3232 	ldrb.w	r3, [r7, #562]	@ 0x232
 8002062:	2b0a      	cmp	r3, #10
 8002064:	d007      	beq.n	8002076 <StartDefaultTask+0x4ce>
 8002066:	f897 3232 	ldrb.w	r3, [r7, #562]	@ 0x232
 800206a:	2b20      	cmp	r3, #32
 800206c:	d101      	bne.n	8002072 <StartDefaultTask+0x4ca>
 800206e:	4b82      	ldr	r3, [pc, #520]	@ (8002278 <StartDefaultTask+0x6d0>)
 8002070:	e004      	b.n	800207c <StartDefaultTask+0x4d4>
 8002072:	4b82      	ldr	r3, [pc, #520]	@ (800227c <StartDefaultTask+0x6d4>)
 8002074:	e002      	b.n	800207c <StartDefaultTask+0x4d4>
 8002076:	4b82      	ldr	r3, [pc, #520]	@ (8002280 <StartDefaultTask+0x6d8>)
 8002078:	e000      	b.n	800207c <StartDefaultTask+0x4d4>
 800207a:	4b82      	ldr	r3, [pc, #520]	@ (8002284 <StartDefaultTask+0x6dc>)
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	9200      	str	r2, [sp, #0]
 8002080:	460b      	mov	r3, r1
 8002082:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8002086:	4980      	ldr	r1, [pc, #512]	@ (8002288 <StartDefaultTask+0x6e0>)
 8002088:	2001      	movs	r0, #1
 800208a:	f001 fc4d 	bl	8003928 <LOGGER_SendFormatted>
    for (int i = 0; i < bytes_received; i++) {
 800208e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8002092:	3301      	adds	r3, #1
 8002094:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8002098:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800209c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80020a6:	429a      	cmp	r2, r3
 80020a8:	dbb9      	blt.n	800201e <StartDefaultTask+0x476>
              (byte == 0x0A) ? "<LF>" : 
              (byte == 0x20) ? "<SPACE>" : "");
    }
    
    // 부분적 응답 검사: 'O' 문자만 받은 경우 추가 수신 시도
    if (bytes_received == 1 && rx_buffer[0] == 'O') {
 80020aa:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020ae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	f040 8112 	bne.w	80022de <StartDefaultTask+0x736>
 80020ba:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020be:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80020c6:	f040 810a 	bne.w	80022de <StartDefaultTask+0x736>
      LOG_INFO("[STEP 3] 🔍 Detected partial response 'O' - waiting for remaining data...");
 80020ca:	4970      	ldr	r1, [pc, #448]	@ (800228c <StartDefaultTask+0x6e4>)
 80020cc:	2001      	movs	r0, #1
 80020ce:	f001 fc2b 	bl	8003928 <LOGGER_SendFormatted>
      
      // 추가 수신 시도 (더 긴 타임아웃)
      char additional_buffer[256];
      int additional_bytes = 0;
 80020d2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020d6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
      int total_attempts = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
      const int max_attempts = 5;
 80020e4:	2305      	movs	r3, #5
 80020e6:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      
      while (total_attempts < max_attempts) {
 80020ea:	e0e7      	b.n	80022bc <StartDefaultTask+0x714>
        total_attempts++;
 80020ec:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80020f0:	3301      	adds	r3, #1
 80020f2:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
        LOG_INFO("[STEP 3] Additional receive attempt %d/%d...", total_attempts, max_attempts);
 80020f6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80020fa:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80020fe:	4964      	ldr	r1, [pc, #400]	@ (8002290 <StartDefaultTask+0x6e8>)
 8002100:	2001      	movs	r0, #1
 8002102:	f001 fc11 	bl	8003928 <LOGGER_SendFormatted>
        
        osDelay(500); // 500ms 추가 대기
 8002106:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800210a:	f010 fb6f 	bl	80127ec <osDelay>
        
        UartStatus additional_status = UART_Receive(additional_buffer, sizeof(additional_buffer) - 1, &additional_bytes);
 800210e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	21ff      	movs	r1, #255	@ 0xff
 8002118:	4618      	mov	r0, r3
 800211a:	f001 fd1d 	bl	8003b58 <UART_Receive>
 800211e:	4603      	mov	r3, r0
 8002120:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233
        
        if (additional_status == UART_STATUS_OK && additional_bytes > 0) {
 8002124:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 8002128:	2b00      	cmp	r3, #0
 800212a:	f040 80c1 	bne.w	80022b0 <StartDefaultTask+0x708>
 800212e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002132:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	f340 80b9 	ble.w	80022b0 <StartDefaultTask+0x708>
          additional_buffer[additional_bytes] = '\0';
 800213e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002142:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 800214c:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 8002150:	2100      	movs	r1, #0
 8002152:	54d1      	strb	r1, [r2, r3]
          LOG_INFO("[STEP 3] ✓ Additional data received (%d bytes): '%s'", additional_bytes, additional_buffer);
 8002154:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002158:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	f107 0308 	add.w	r3, r7, #8
 8002162:	494c      	ldr	r1, [pc, #304]	@ (8002294 <StartDefaultTask+0x6ec>)
 8002164:	2001      	movs	r0, #1
 8002166:	f001 fbdf 	bl	8003928 <LOGGER_SendFormatted>
          
          // 기존 응답과 합치기
          if (bytes_received + additional_bytes < sizeof(rx_buffer) - 1) {
 800216a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800216e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002178:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	2bfe      	cmp	r3, #254	@ 0xfe
 8002182:	d85b      	bhi.n	800223c <StartDefaultTask+0x694>
            memcpy(rx_buffer + bytes_received, additional_buffer, additional_bytes);
 8002184:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002188:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002194:	1898      	adds	r0, r3, r2
 8002196:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800219a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	4619      	mov	r1, r3
 80021a8:	f013 facc 	bl	8015744 <memcpy>
            bytes_received += additional_bytes;
 80021ac:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80021b0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80021ba:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	441a      	add	r2, r3
 80021c2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80021c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021ca:	601a      	str	r2, [r3, #0]
            rx_buffer[bytes_received] = '\0';
 80021cc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80021d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80021da:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80021de:	2100      	movs	r1, #0
 80021e0:	54d1      	strb	r1, [r2, r3]
            
            LOG_INFO("[STEP 3] ✓ Combined response (%d bytes): '%s'", bytes_received, rx_buffer);
 80021e2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80021e6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021f0:	4929      	ldr	r1, [pc, #164]	@ (8002298 <StartDefaultTask+0x6f0>)
 80021f2:	2001      	movs	r0, #1
 80021f4:	f001 fb98 	bl	8003928 <LOGGER_SendFormatted>
            
            // 완전한 OK 응답인지 확인
            extern bool is_response_ok(const char* response);
            if (is_response_ok(rx_buffer)) {
 80021f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fa05 	bl	800060c <is_response_ok>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <StartDefaultTask+0x66e>
              LOG_INFO("[STEP 3] 🎉 Complete OK response found after %d attempts!", total_attempts);
 8002208:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800220c:	4923      	ldr	r1, [pc, #140]	@ (800229c <StartDefaultTask+0x6f4>)
 800220e:	2001      	movs	r0, #1
 8002210:	f001 fb8a 	bl	8003928 <LOGGER_SendFormatted>
              break;
 8002214:	e059      	b.n	80022ca <StartDefaultTask+0x722>
            } else if (strstr(rx_buffer, "OK") != NULL) {
 8002216:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800221a:	4921      	ldr	r1, [pc, #132]	@ (80022a0 <StartDefaultTask+0x6f8>)
 800221c:	4618      	mov	r0, r3
 800221e:	f013 fa3e 	bl	801569e <strstr>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <StartDefaultTask+0x68a>
              LOG_INFO("[STEP 3] ✓ OK pattern found in combined response");
 8002228:	491e      	ldr	r1, [pc, #120]	@ (80022a4 <StartDefaultTask+0x6fc>)
 800222a:	2001      	movs	r0, #1
 800222c:	f001 fb7c 	bl	8003928 <LOGGER_SendFormatted>
              break;
 8002230:	e04b      	b.n	80022ca <StartDefaultTask+0x722>
            } else {
              LOG_INFO("[STEP 3] Partial response continues, trying again...");
 8002232:	491d      	ldr	r1, [pc, #116]	@ (80022a8 <StartDefaultTask+0x700>)
 8002234:	2001      	movs	r0, #1
 8002236:	f001 fb77 	bl	8003928 <LOGGER_SendFormatted>
          if (bytes_received + additional_bytes < sizeof(rx_buffer) - 1) {
 800223a:	e03f      	b.n	80022bc <StartDefaultTask+0x714>
            }
          } else {
            LOG_WARN("[STEP 3] ⚠ Buffer overflow prevented during response combination");
 800223c:	491b      	ldr	r1, [pc, #108]	@ (80022ac <StartDefaultTask+0x704>)
 800223e:	2002      	movs	r0, #2
 8002240:	f001 fb72 	bl	8003928 <LOGGER_SendFormatted>
            break;
 8002244:	e041      	b.n	80022ca <StartDefaultTask+0x722>
 8002246:	bf00      	nop
 8002248:	08016750 	.word	0x08016750
 800224c:	08016778 	.word	0x08016778
 8002250:	080167a8 	.word	0x080167a8
 8002254:	080167d8 	.word	0x080167d8
 8002258:	080167e0 	.word	0x080167e0
 800225c:	080167f8 	.word	0x080167f8
 8002260:	08016880 	.word	0x08016880
 8002264:	08016824 	.word	0x08016824
 8002268:	08016858 	.word	0x08016858
 800226c:	080168b0 	.word	0x080168b0
 8002270:	080168dc 	.word	0x080168dc
 8002274:	080168f8 	.word	0x080168f8
 8002278:	0801690c 	.word	0x0801690c
 800227c:	08016914 	.word	0x08016914
 8002280:	08016918 	.word	0x08016918
 8002284:	08016920 	.word	0x08016920
 8002288:	08016928 	.word	0x08016928
 800228c:	08016944 	.word	0x08016944
 8002290:	08016990 	.word	0x08016990
 8002294:	080169c0 	.word	0x080169c0
 8002298:	080169f8 	.word	0x080169f8
 800229c:	08016a28 	.word	0x08016a28
 80022a0:	08016a64 	.word	0x08016a64
 80022a4:	08016a68 	.word	0x08016a68
 80022a8:	08016a9c 	.word	0x08016a9c
 80022ac:	08016ad4 	.word	0x08016ad4
          }
        } else {
          LOG_INFO("[STEP 3] No additional data in attempt %d", total_attempts);
 80022b0:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80022b4:	4976      	ldr	r1, [pc, #472]	@ (8002490 <StartDefaultTask+0x8e8>)
 80022b6:	2001      	movs	r0, #1
 80022b8:	f001 fb36 	bl	8003928 <LOGGER_SendFormatted>
      while (total_attempts < max_attempts) {
 80022bc:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80022c0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80022c4:	429a      	cmp	r2, r3
 80022c6:	f6ff af11 	blt.w	80020ec <StartDefaultTask+0x544>
        }
      }
      
      if (total_attempts >= max_attempts) {
 80022ca:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80022ce:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80022d2:	429a      	cmp	r2, r3
 80022d4:	db03      	blt.n	80022de <StartDefaultTask+0x736>
        LOG_WARN("[STEP 3] ⚠ Max attempts reached, proceeding with partial response");
 80022d6:	496f      	ldr	r1, [pc, #444]	@ (8002494 <StartDefaultTask+0x8ec>)
 80022d8:	2002      	movs	r0, #2
 80022da:	f001 fb25 	bl	8003928 <LOGGER_SendFormatted>
    }
    
    // ResponseHandler를 사용하여 OK 응답 확인
    extern bool is_response_ok(const char* response);
    
    if (is_response_ok(rx_buffer)) {
 80022de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f992 	bl	800060c <is_response_ok>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00c      	beq.n	8002308 <StartDefaultTask+0x760>
      LOG_INFO("[RESULT] 🎉 SUCCESS: LoRa module responded with OK!");
 80022ee:	496a      	ldr	r1, [pc, #424]	@ (8002498 <StartDefaultTask+0x8f0>)
 80022f0:	2001      	movs	r0, #1
 80022f2:	f001 fb19 	bl	8003928 <LOGGER_SendFormatted>
      LOG_INFO("[RESULT] ✓ Communication test PASSED");
 80022f6:	4969      	ldr	r1, [pc, #420]	@ (800249c <StartDefaultTask+0x8f4>)
 80022f8:	2001      	movs	r0, #1
 80022fa:	f001 fb15 	bl	8003928 <LOGGER_SendFormatted>
      LOG_INFO("[RESULT] ✓ LoRa module is ready for commands");
 80022fe:	4968      	ldr	r1, [pc, #416]	@ (80024a0 <StartDefaultTask+0x8f8>)
 8002300:	2001      	movs	r0, #1
 8002302:	f001 fb11 	bl	8003928 <LOGGER_SendFormatted>
  if (recv_status == UART_STATUS_OK && bytes_received > 0) {
 8002306:	e09d      	b.n	8002444 <StartDefaultTask+0x89c>
    } else if (strstr(rx_buffer, "OK") != NULL) {
 8002308:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800230c:	4965      	ldr	r1, [pc, #404]	@ (80024a4 <StartDefaultTask+0x8fc>)
 800230e:	4618      	mov	r0, r3
 8002310:	f013 f9c5 	bl	801569e <strstr>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00c      	beq.n	8002334 <StartDefaultTask+0x78c>
      LOG_INFO("[RESULT] 🎉 SUCCESS: Found OK in response!");
 800231a:	4963      	ldr	r1, [pc, #396]	@ (80024a8 <StartDefaultTask+0x900>)
 800231c:	2001      	movs	r0, #1
 800231e:	f001 fb03 	bl	8003928 <LOGGER_SendFormatted>
      LOG_INFO("[RESULT] ✓ Communication test PASSED");
 8002322:	495e      	ldr	r1, [pc, #376]	@ (800249c <StartDefaultTask+0x8f4>)
 8002324:	2001      	movs	r0, #1
 8002326:	f001 faff 	bl	8003928 <LOGGER_SendFormatted>
      LOG_INFO("[RESULT] ✓ LoRa module is ready for commands");
 800232a:	495d      	ldr	r1, [pc, #372]	@ (80024a0 <StartDefaultTask+0x8f8>)
 800232c:	2001      	movs	r0, #1
 800232e:	f001 fafb 	bl	8003928 <LOGGER_SendFormatted>
  if (recv_status == UART_STATUS_OK && bytes_received > 0) {
 8002332:	e087      	b.n	8002444 <StartDefaultTask+0x89c>
    } else if (strstr(rx_buffer, "AT") != NULL) {
 8002334:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002338:	495c      	ldr	r1, [pc, #368]	@ (80024ac <StartDefaultTask+0x904>)
 800233a:	4618      	mov	r0, r3
 800233c:	f013 f9af 	bl	801569e <strstr>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00c      	beq.n	8002360 <StartDefaultTask+0x7b8>
      LOG_INFO("[RESULT] 📡 INFO: LoRa module echoed AT command");
 8002346:	495a      	ldr	r1, [pc, #360]	@ (80024b0 <StartDefaultTask+0x908>)
 8002348:	2001      	movs	r0, #1
 800234a:	f001 faed 	bl	8003928 <LOGGER_SendFormatted>
      LOG_INFO("[RESULT] ✓ Communication working (echo mode)");
 800234e:	4959      	ldr	r1, [pc, #356]	@ (80024b4 <StartDefaultTask+0x90c>)
 8002350:	2001      	movs	r0, #1
 8002352:	f001 fae9 	bl	8003928 <LOGGER_SendFormatted>
      LOG_WARN("[RESULT] ⚠ No explicit OK received, but communication confirmed");
 8002356:	4958      	ldr	r1, [pc, #352]	@ (80024b8 <StartDefaultTask+0x910>)
 8002358:	2002      	movs	r0, #2
 800235a:	f001 fae5 	bl	8003928 <LOGGER_SendFormatted>
  if (recv_status == UART_STATUS_OK && bytes_received > 0) {
 800235e:	e071      	b.n	8002444 <StartDefaultTask+0x89c>
    } else if (strstr(rx_buffer, "ERROR") != NULL) {
 8002360:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002364:	4955      	ldr	r1, [pc, #340]	@ (80024bc <StartDefaultTask+0x914>)
 8002366:	4618      	mov	r0, r3
 8002368:	f013 f999 	bl	801569e <strstr>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <StartDefaultTask+0x7dc>
      LOG_WARN("[RESULT] ⚠ WARNING: LoRa module responded with ERROR");
 8002372:	4953      	ldr	r1, [pc, #332]	@ (80024c0 <StartDefaultTask+0x918>)
 8002374:	2002      	movs	r0, #2
 8002376:	f001 fad7 	bl	8003928 <LOGGER_SendFormatted>
      LOG_WARN("[RESULT] Check LoRa module configuration");
 800237a:	4952      	ldr	r1, [pc, #328]	@ (80024c4 <StartDefaultTask+0x91c>)
 800237c:	2002      	movs	r0, #2
 800237e:	f001 fad3 	bl	8003928 <LOGGER_SendFormatted>
  if (recv_status == UART_STATUS_OK && bytes_received > 0) {
 8002382:	e05f      	b.n	8002444 <StartDefaultTask+0x89c>
    } else if (bytes_received == 1 && rx_buffer[0] == 'O') {
 8002384:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002388:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d11f      	bne.n	80023d2 <StartDefaultTask+0x82a>
 8002392:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002396:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b4f      	cmp	r3, #79	@ 0x4f
 800239e:	d118      	bne.n	80023d2 <StartDefaultTask+0x82a>
      LOG_WARN("[RESULT] ⚠ PARTIAL: Only 'O' received, likely incomplete OK response");
 80023a0:	4949      	ldr	r1, [pc, #292]	@ (80024c8 <StartDefaultTask+0x920>)
 80023a2:	2002      	movs	r0, #2
 80023a4:	f001 fac0 	bl	8003928 <LOGGER_SendFormatted>
      LOG_WARN("[RESULT] ✓ Communication working, but response may be incomplete");
 80023a8:	4948      	ldr	r1, [pc, #288]	@ (80024cc <StartDefaultTask+0x924>)
 80023aa:	2002      	movs	r0, #2
 80023ac:	f001 fabc 	bl	8003928 <LOGGER_SendFormatted>
      LOG_WARN("[RESULT] Suggestions:");
 80023b0:	4947      	ldr	r1, [pc, #284]	@ (80024d0 <StartDefaultTask+0x928>)
 80023b2:	2002      	movs	r0, #2
 80023b4:	f001 fab8 	bl	8003928 <LOGGER_SendFormatted>
      LOG_WARN("  - LoRa module may need more time to respond");
 80023b8:	4946      	ldr	r1, [pc, #280]	@ (80024d4 <StartDefaultTask+0x92c>)
 80023ba:	2002      	movs	r0, #2
 80023bc:	f001 fab4 	bl	8003928 <LOGGER_SendFormatted>
      LOG_WARN("  - Check LoRa module firmware/configuration");
 80023c0:	4945      	ldr	r1, [pc, #276]	@ (80024d8 <StartDefaultTask+0x930>)
 80023c2:	2002      	movs	r0, #2
 80023c4:	f001 fab0 	bl	8003928 <LOGGER_SendFormatted>
      LOG_WARN("  - Try different AT command format");
 80023c8:	4944      	ldr	r1, [pc, #272]	@ (80024dc <StartDefaultTask+0x934>)
 80023ca:	2002      	movs	r0, #2
 80023cc:	f001 faac 	bl	8003928 <LOGGER_SendFormatted>
  if (recv_status == UART_STATUS_OK && bytes_received > 0) {
 80023d0:	e038      	b.n	8002444 <StartDefaultTask+0x89c>
    } else {
      LOG_INFO("[RESULT] 📋 INFO: Unknown response pattern");
 80023d2:	4943      	ldr	r1, [pc, #268]	@ (80024e0 <StartDefaultTask+0x938>)
 80023d4:	2001      	movs	r0, #1
 80023d6:	f001 faa7 	bl	8003928 <LOGGER_SendFormatted>
      LOG_INFO("[RESULT] ✓ Communication working, but response format unexpected");
 80023da:	4942      	ldr	r1, [pc, #264]	@ (80024e4 <StartDefaultTask+0x93c>)
 80023dc:	2001      	movs	r0, #1
 80023de:	f001 faa3 	bl	8003928 <LOGGER_SendFormatted>
  if (recv_status == UART_STATUS_OK && bytes_received > 0) {
 80023e2:	e02f      	b.n	8002444 <StartDefaultTask+0x89c>
    }
    
  } else if (recv_status == UART_STATUS_TIMEOUT) {
 80023e4:	f897 323a 	ldrb.w	r3, [r7, #570]	@ 0x23a
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d120      	bne.n	800242e <StartDefaultTask+0x886>
    LOG_WARN("[STEP 3] ⚠ No response from LoRa module (TIMEOUT)");
 80023ec:	493e      	ldr	r1, [pc, #248]	@ (80024e8 <StartDefaultTask+0x940>)
 80023ee:	2002      	movs	r0, #2
 80023f0:	f001 fa9a 	bl	8003928 <LOGGER_SendFormatted>
    LOG_WARN("[RESULT] ❌ FAILED: No response received");
 80023f4:	493d      	ldr	r1, [pc, #244]	@ (80024ec <StartDefaultTask+0x944>)
 80023f6:	2002      	movs	r0, #2
 80023f8:	f001 fa96 	bl	8003928 <LOGGER_SendFormatted>
    LOG_WARN("[RESULT] Troubleshooting:");
 80023fc:	493c      	ldr	r1, [pc, #240]	@ (80024f0 <StartDefaultTask+0x948>)
 80023fe:	2002      	movs	r0, #2
 8002400:	f001 fa92 	bl	8003928 <LOGGER_SendFormatted>
    LOG_WARN("  1. Check LoRa module power supply");
 8002404:	493b      	ldr	r1, [pc, #236]	@ (80024f4 <StartDefaultTask+0x94c>)
 8002406:	2002      	movs	r0, #2
 8002408:	f001 fa8e 	bl	8003928 <LOGGER_SendFormatted>
    LOG_WARN("  2. Verify wiring: PC6(TX)->RX, PC7(RX)<-TX");
 800240c:	493a      	ldr	r1, [pc, #232]	@ (80024f8 <StartDefaultTask+0x950>)
 800240e:	2002      	movs	r0, #2
 8002410:	f001 fa8a 	bl	8003928 <LOGGER_SendFormatted>
    LOG_WARN("  3. Try different baud rates: 9600, 38400, 57600");
 8002414:	4939      	ldr	r1, [pc, #228]	@ (80024fc <StartDefaultTask+0x954>)
 8002416:	2002      	movs	r0, #2
 8002418:	f001 fa86 	bl	8003928 <LOGGER_SendFormatted>
    LOG_WARN("  4. Check if LoRa module requires wake-up sequence");
 800241c:	4938      	ldr	r1, [pc, #224]	@ (8002500 <StartDefaultTask+0x958>)
 800241e:	2002      	movs	r0, #2
 8002420:	f001 fa82 	bl	8003928 <LOGGER_SendFormatted>
    LOG_WARN("  5. For loopback test: Connect PC6 to PC7");
 8002424:	4937      	ldr	r1, [pc, #220]	@ (8002504 <StartDefaultTask+0x95c>)
 8002426:	2002      	movs	r0, #2
 8002428:	f001 fa7e 	bl	8003928 <LOGGER_SendFormatted>
 800242c:	e00a      	b.n	8002444 <StartDefaultTask+0x89c>
  } else {
    LOG_ERROR("[STEP 3] ✗ Response receive FAILED (status: %d)", recv_status);
 800242e:	f897 323a 	ldrb.w	r3, [r7, #570]	@ 0x23a
 8002432:	461a      	mov	r2, r3
 8002434:	4934      	ldr	r1, [pc, #208]	@ (8002508 <StartDefaultTask+0x960>)
 8002436:	2003      	movs	r0, #3
 8002438:	f001 fa76 	bl	8003928 <LOGGER_SendFormatted>
    LOG_ERROR("[RESULT] ❌ FAILED: Reception error");
 800243c:	4933      	ldr	r1, [pc, #204]	@ (800250c <StartDefaultTask+0x964>)
 800243e:	2003      	movs	r0, #3
 8002440:	f001 fa72 	bl	8003928 <LOGGER_SendFormatted>
  }
  
  LOG_INFO("=== AT Command Test Completed ===");
 8002444:	4932      	ldr	r1, [pc, #200]	@ (8002510 <StartDefaultTask+0x968>)
 8002446:	2001      	movs	r0, #1
 8002448:	f001 fa6e 	bl	8003928 <LOGGER_SendFormatted>
  LOG_INFO("Program will now enter idle mode");
 800244c:	4931      	ldr	r1, [pc, #196]	@ (8002514 <StartDefaultTask+0x96c>)
 800244e:	2001      	movs	r0, #1
 8002450:	f001 fa6a 	bl	8003928 <LOGGER_SendFormatted>
  LOG_INFO("Reset the board to run the test again");
 8002454:	4930      	ldr	r1, [pc, #192]	@ (8002518 <StartDefaultTask+0x970>)
 8002456:	2001      	movs	r0, #1
 8002458:	f001 fa66 	bl	8003928 <LOGGER_SendFormatted>

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("Entering idle mode...");
 800245c:	492f      	ldr	r1, [pc, #188]	@ (800251c <StartDefaultTask+0x974>)
 800245e:	2001      	movs	r0, #1
 8002460:	f001 fa62 	bl	8003928 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 800246a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800246e:	f010 f9bd 	bl	80127ec <osDelay>
    idle_counter++;
 8002472:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002476:	3301      	adds	r3, #1
 8002478:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    LOG_INFO("Idle mode: %lu minutes elapsed", idle_counter / 2);
 800247c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	461a      	mov	r2, r3
 8002484:	4926      	ldr	r1, [pc, #152]	@ (8002520 <StartDefaultTask+0x978>)
 8002486:	2001      	movs	r0, #1
 8002488:	f001 fa4e 	bl	8003928 <LOGGER_SendFormatted>
    osDelay(30000);
 800248c:	bf00      	nop
 800248e:	e7ec      	b.n	800246a <StartDefaultTask+0x8c2>
 8002490:	08016b18 	.word	0x08016b18
 8002494:	08016b44 	.word	0x08016b44
 8002498:	08016b88 	.word	0x08016b88
 800249c:	08016bc0 	.word	0x08016bc0
 80024a0:	08016be8 	.word	0x08016be8
 80024a4:	08016a64 	.word	0x08016a64
 80024a8:	08016c18 	.word	0x08016c18
 80024ac:	08016c48 	.word	0x08016c48
 80024b0:	08016c4c 	.word	0x08016c4c
 80024b4:	08016c80 	.word	0x08016c80
 80024b8:	08016cb0 	.word	0x08016cb0
 80024bc:	08016cf4 	.word	0x08016cf4
 80024c0:	08016cfc 	.word	0x08016cfc
 80024c4:	08016d34 	.word	0x08016d34
 80024c8:	08016d60 	.word	0x08016d60
 80024cc:	08016da8 	.word	0x08016da8
 80024d0:	08016dec 	.word	0x08016dec
 80024d4:	08016e04 	.word	0x08016e04
 80024d8:	08016e34 	.word	0x08016e34
 80024dc:	08016e64 	.word	0x08016e64
 80024e0:	08016e88 	.word	0x08016e88
 80024e4:	08016eb8 	.word	0x08016eb8
 80024e8:	08016efc 	.word	0x08016efc
 80024ec:	08016f30 	.word	0x08016f30
 80024f0:	08016f5c 	.word	0x08016f5c
 80024f4:	08016f78 	.word	0x08016f78
 80024f8:	08016f9c 	.word	0x08016f9c
 80024fc:	08016fcc 	.word	0x08016fcc
 8002500:	08017000 	.word	0x08017000
 8002504:	08017034 	.word	0x08017034
 8002508:	08017060 	.word	0x08017060
 800250c:	08017094 	.word	0x08017094
 8002510:	080170bc 	.word	0x080170bc
 8002514:	080170e0 	.word	0x080170e0
 8002518:	08017104 	.word	0x08017104
 800251c:	0801712c 	.word	0x0801712c
 8002520:	08017144 	.word	0x08017144

08002524 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a04      	ldr	r2, [pc, #16]	@ (8002544 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002536:	f002 f933 	bl	80047a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40001000 	.word	0x40001000

08002548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800254c:	b672      	cpsid	i
}
 800254e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <Error_Handler+0x8>

08002554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <HAL_MspInit+0x4c>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	4a10      	ldr	r2, [pc, #64]	@ (80025a0 <HAL_MspInit+0x4c>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002564:	6413      	str	r3, [r2, #64]	@ 0x40
 8002566:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <HAL_MspInit+0x4c>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_MspInit+0x4c>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	4a0a      	ldr	r2, [pc, #40]	@ (80025a0 <HAL_MspInit+0x4c>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800257c:	6453      	str	r3, [r2, #68]	@ 0x44
 800257e:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <HAL_MspInit+0x4c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	210f      	movs	r1, #15
 800258e:	f06f 0001 	mvn.w	r0, #1
 8002592:	f002 fc99 	bl	8004ec8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800

080025a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	@ 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a21      	ldr	r2, [pc, #132]	@ (8002648 <HAL_ADC_MspInit+0xa4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d13c      	bne.n	8002640 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80025c6:	4b21      	ldr	r3, [pc, #132]	@ (800264c <HAL_ADC_MspInit+0xa8>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	4a20      	ldr	r2, [pc, #128]	@ (800264c <HAL_ADC_MspInit+0xa8>)
 80025cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025d2:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <HAL_ADC_MspInit+0xa8>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025de:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <HAL_ADC_MspInit+0xa8>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	4a1a      	ldr	r2, [pc, #104]	@ (800264c <HAL_ADC_MspInit+0xa8>)
 80025e4:	f043 0320 	orr.w	r3, r3, #32
 80025e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ea:	4b18      	ldr	r3, [pc, #96]	@ (800264c <HAL_ADC_MspInit+0xa8>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	4b15      	ldr	r3, [pc, #84]	@ (800264c <HAL_ADC_MspInit+0xa8>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	4a14      	ldr	r2, [pc, #80]	@ (800264c <HAL_ADC_MspInit+0xa8>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6313      	str	r3, [r2, #48]	@ 0x30
 8002602:	4b12      	ldr	r3, [pc, #72]	@ (800264c <HAL_ADC_MspInit+0xa8>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800260e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002612:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002614:	2303      	movs	r3, #3
 8002616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4619      	mov	r1, r3
 8002622:	480b      	ldr	r0, [pc, #44]	@ (8002650 <HAL_ADC_MspInit+0xac>)
 8002624:	f003 fbba 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002628:	2301      	movs	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800262c:	2303      	movs	r3, #3
 800262e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	4806      	ldr	r0, [pc, #24]	@ (8002654 <HAL_ADC_MspInit+0xb0>)
 800263c:	f003 fbae 	bl	8005d9c <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	@ 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40012200 	.word	0x40012200
 800264c:	40023800 	.word	0x40023800
 8002650:	40021400 	.word	0x40021400
 8002654:	40020000 	.word	0x40020000

08002658 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <HAL_CRC_MspInit+0x38>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10b      	bne.n	8002682 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800266a:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <HAL_CRC_MspInit+0x3c>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	4a09      	ldr	r2, [pc, #36]	@ (8002694 <HAL_CRC_MspInit+0x3c>)
 8002670:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002674:	6313      	str	r3, [r2, #48]	@ 0x30
 8002676:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <HAL_CRC_MspInit+0x3c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40023000 	.word	0x40023000
 8002694:	40023800 	.word	0x40023800

08002698 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08e      	sub	sp, #56	@ 0x38
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a50      	ldr	r2, [pc, #320]	@ (80027f8 <HAL_DCMI_MspInit+0x160>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	f040 809a 	bne.w	80027f0 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80026bc:	4b4f      	ldr	r3, [pc, #316]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 80026be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c0:	4a4e      	ldr	r2, [pc, #312]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80026c8:	4b4c      	ldr	r3, [pc, #304]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 80026ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	623b      	str	r3, [r7, #32]
 80026d2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026d4:	4b49      	ldr	r3, [pc, #292]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	4a48      	ldr	r2, [pc, #288]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 80026da:	f043 0310 	orr.w	r3, r3, #16
 80026de:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e0:	4b46      	ldr	r3, [pc, #280]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ec:	4b43      	ldr	r3, [pc, #268]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	4a42      	ldr	r2, [pc, #264]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 80026f2:	f043 0308 	orr.w	r3, r3, #8
 80026f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f8:	4b40      	ldr	r3, [pc, #256]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002704:	4b3d      	ldr	r3, [pc, #244]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002708:	4a3c      	ldr	r2, [pc, #240]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 800270a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800270e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002710:	4b3a      	ldr	r3, [pc, #232]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800271c:	4b37      	ldr	r3, [pc, #220]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	4a36      	ldr	r2, [pc, #216]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 8002722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002726:	6313      	str	r3, [r2, #48]	@ 0x30
 8002728:	4b34      	ldr	r3, [pc, #208]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002734:	4b31      	ldr	r3, [pc, #196]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002738:	4a30      	ldr	r2, [pc, #192]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002740:	4b2e      	ldr	r3, [pc, #184]	@ (80027fc <HAL_DCMI_MspInit+0x164>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800274c:	2360      	movs	r3, #96	@ 0x60
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800275c:	230d      	movs	r3, #13
 800275e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002764:	4619      	mov	r1, r3
 8002766:	4826      	ldr	r0, [pc, #152]	@ (8002800 <HAL_DCMI_MspInit+0x168>)
 8002768:	f003 fb18 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800276c:	2308      	movs	r3, #8
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2300      	movs	r3, #0
 800277a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800277c:	230d      	movs	r3, #13
 800277e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002784:	4619      	mov	r1, r3
 8002786:	481f      	ldr	r0, [pc, #124]	@ (8002804 <HAL_DCMI_MspInit+0x16c>)
 8002788:	f003 fb08 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800278c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	2302      	movs	r3, #2
 8002794:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800279e:	230d      	movs	r3, #13
 80027a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80027a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a6:	4619      	mov	r1, r3
 80027a8:	4817      	ldr	r0, [pc, #92]	@ (8002808 <HAL_DCMI_MspInit+0x170>)
 80027aa:	f003 faf7 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80027ae:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027c0:	230d      	movs	r3, #13
 80027c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027c8:	4619      	mov	r1, r3
 80027ca:	4810      	ldr	r0, [pc, #64]	@ (800280c <HAL_DCMI_MspInit+0x174>)
 80027cc:	f003 fae6 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80027d0:	2350      	movs	r3, #80	@ 0x50
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027e0:	230d      	movs	r3, #13
 80027e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e8:	4619      	mov	r1, r3
 80027ea:	4809      	ldr	r0, [pc, #36]	@ (8002810 <HAL_DCMI_MspInit+0x178>)
 80027ec:	f003 fad6 	bl	8005d9c <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80027f0:	bf00      	nop
 80027f2:	3738      	adds	r7, #56	@ 0x38
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	50050000 	.word	0x50050000
 80027fc:	40023800 	.word	0x40023800
 8002800:	40021000 	.word	0x40021000
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40020000 	.word	0x40020000

08002814 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0d      	ldr	r2, [pc, #52]	@ (8002858 <HAL_DMA2D_MspInit+0x44>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d113      	bne.n	800284e <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002826:	4b0d      	ldr	r3, [pc, #52]	@ (800285c <HAL_DMA2D_MspInit+0x48>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	4a0c      	ldr	r2, [pc, #48]	@ (800285c <HAL_DMA2D_MspInit+0x48>)
 800282c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002830:	6313      	str	r3, [r2, #48]	@ 0x30
 8002832:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <HAL_DMA2D_MspInit+0x48>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2105      	movs	r1, #5
 8002842:	205a      	movs	r0, #90	@ 0x5a
 8002844:	f002 fb40 	bl	8004ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002848:	205a      	movs	r0, #90	@ 0x5a
 800284a:	f002 fb59 	bl	8004f00 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	4002b000 	.word	0x4002b000
 800285c:	40023800 	.word	0x40023800

08002860 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08e      	sub	sp, #56	@ 0x38
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a3f      	ldr	r2, [pc, #252]	@ (800297c <HAL_ETH_MspInit+0x11c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d178      	bne.n	8002974 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002882:	4b3f      	ldr	r3, [pc, #252]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	4a3e      	ldr	r2, [pc, #248]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 8002888:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800288c:	6313      	str	r3, [r2, #48]	@ 0x30
 800288e:	4b3c      	ldr	r3, [pc, #240]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	623b      	str	r3, [r7, #32]
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	4b39      	ldr	r3, [pc, #228]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	4a38      	ldr	r2, [pc, #224]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 80028a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a6:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	4b33      	ldr	r3, [pc, #204]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4a32      	ldr	r2, [pc, #200]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 80028b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4b30      	ldr	r3, [pc, #192]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 80028d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e2:	4b27      	ldr	r3, [pc, #156]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	4a26      	ldr	r2, [pc, #152]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ee:	4b24      	ldr	r3, [pc, #144]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	4b21      	ldr	r3, [pc, #132]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4a20      	ldr	r2, [pc, #128]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6313      	str	r3, [r2, #48]	@ 0x30
 8002906:	4b1e      	ldr	r3, [pc, #120]	@ (8002980 <HAL_ETH_MspInit+0x120>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002912:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002924:	230b      	movs	r3, #11
 8002926:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800292c:	4619      	mov	r1, r3
 800292e:	4815      	ldr	r0, [pc, #84]	@ (8002984 <HAL_ETH_MspInit+0x124>)
 8002930:	f003 fa34 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002934:	2332      	movs	r3, #50	@ 0x32
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002940:	2303      	movs	r3, #3
 8002942:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002944:	230b      	movs	r3, #11
 8002946:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800294c:	4619      	mov	r1, r3
 800294e:	480e      	ldr	r0, [pc, #56]	@ (8002988 <HAL_ETH_MspInit+0x128>)
 8002950:	f003 fa24 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002954:	2386      	movs	r3, #134	@ 0x86
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002960:	2303      	movs	r3, #3
 8002962:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002964:	230b      	movs	r3, #11
 8002966:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800296c:	4619      	mov	r1, r3
 800296e:	4807      	ldr	r0, [pc, #28]	@ (800298c <HAL_ETH_MspInit+0x12c>)
 8002970:	f003 fa14 	bl	8005d9c <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8002974:	bf00      	nop
 8002976:	3738      	adds	r7, #56	@ 0x38
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40028000 	.word	0x40028000
 8002980:	40023800 	.word	0x40023800
 8002984:	40021800 	.word	0x40021800
 8002988:	40020800 	.word	0x40020800
 800298c:	40020000 	.word	0x40020000

08002990 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b0ac      	sub	sp, #176	@ 0xb0
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029a8:	f107 0318 	add.w	r3, r7, #24
 80029ac:	2284      	movs	r2, #132	@ 0x84
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f012 fe47 	bl	8015644 <memset>
  if(hi2c->Instance==I2C1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a44      	ldr	r2, [pc, #272]	@ (8002acc <HAL_I2C_MspInit+0x13c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d13d      	bne.n	8002a3c <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029c6:	2300      	movs	r3, #0
 80029c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ca:	f107 0318 	add.w	r3, r7, #24
 80029ce:	4618      	mov	r0, r3
 80029d0:	f006 ff1a 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80029da:	f7ff fdb5 	bl	8002548 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad0 <HAL_I2C_MspInit+0x140>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ad0 <HAL_I2C_MspInit+0x140>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ea:	4b39      	ldr	r3, [pc, #228]	@ (8002ad0 <HAL_I2C_MspInit+0x140>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80029f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029fe:	2312      	movs	r3, #18
 8002a00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a10:	2304      	movs	r3, #4
 8002a12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	482d      	ldr	r0, [pc, #180]	@ (8002ad4 <HAL_I2C_MspInit+0x144>)
 8002a1e:	f003 f9bd 	bl	8005d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a22:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <HAL_I2C_MspInit+0x140>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	4a2a      	ldr	r2, [pc, #168]	@ (8002ad0 <HAL_I2C_MspInit+0x140>)
 8002a28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2e:	4b28      	ldr	r3, [pc, #160]	@ (8002ad0 <HAL_I2C_MspInit+0x140>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a3a:	e042      	b.n	8002ac2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a25      	ldr	r2, [pc, #148]	@ (8002ad8 <HAL_I2C_MspInit+0x148>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d13d      	bne.n	8002ac2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002a46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a52:	f107 0318 	add.w	r3, r7, #24
 8002a56:	4618      	mov	r0, r3
 8002a58:	f006 fed6 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002a62:	f7ff fd71 	bl	8002548 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a66:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad0 <HAL_I2C_MspInit+0x140>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	4a19      	ldr	r2, [pc, #100]	@ (8002ad0 <HAL_I2C_MspInit+0x140>)
 8002a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a72:	4b17      	ldr	r3, [pc, #92]	@ (8002ad0 <HAL_I2C_MspInit+0x140>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002a7e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a86:	2312      	movs	r3, #18
 8002a88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a92:	2303      	movs	r3, #3
 8002a94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a98:	2304      	movs	r3, #4
 8002a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a9e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	480d      	ldr	r0, [pc, #52]	@ (8002adc <HAL_I2C_MspInit+0x14c>)
 8002aa6:	f003 f979 	bl	8005d9c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <HAL_I2C_MspInit+0x140>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	4a08      	ldr	r2, [pc, #32]	@ (8002ad0 <HAL_I2C_MspInit+0x140>)
 8002ab0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_I2C_MspInit+0x140>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
}
 8002ac2:	bf00      	nop
 8002ac4:	37b0      	adds	r7, #176	@ 0xb0
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40005400 	.word	0x40005400
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40005c00 	.word	0x40005c00
 8002adc:	40021c00 	.word	0x40021c00

08002ae0 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08e      	sub	sp, #56	@ 0x38
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a55      	ldr	r2, [pc, #340]	@ (8002c54 <HAL_LTDC_MspInit+0x174>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	f040 80a3 	bne.w	8002c4a <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002b04:	4b54      	ldr	r3, [pc, #336]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b08:	4a53      	ldr	r2, [pc, #332]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b10:	4b51      	ldr	r3, [pc, #324]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b18:	623b      	str	r3, [r7, #32]
 8002b1a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b1c:	4b4e      	ldr	r3, [pc, #312]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	4a4d      	ldr	r2, [pc, #308]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b22:	f043 0310 	orr.w	r3, r3, #16
 8002b26:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b28:	4b4b      	ldr	r3, [pc, #300]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b34:	4b48      	ldr	r3, [pc, #288]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b38:	4a47      	ldr	r2, [pc, #284]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b40:	4b45      	ldr	r3, [pc, #276]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b4c:	4b42      	ldr	r3, [pc, #264]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	4a41      	ldr	r2, [pc, #260]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b58:	4b3f      	ldr	r3, [pc, #252]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b64:	4b3c      	ldr	r3, [pc, #240]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b68:	4a3b      	ldr	r2, [pc, #236]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b70:	4b39      	ldr	r3, [pc, #228]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b7c:	4b36      	ldr	r3, [pc, #216]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b80:	4a35      	ldr	r2, [pc, #212]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b88:	4b33      	ldr	r3, [pc, #204]	@ (8002c58 <HAL_LTDC_MspInit+0x178>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002b94:	2310      	movs	r3, #16
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ba4:	230e      	movs	r3, #14
 8002ba6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bac:	4619      	mov	r1, r3
 8002bae:	482b      	ldr	r0, [pc, #172]	@ (8002c5c <HAL_LTDC_MspInit+0x17c>)
 8002bb0:	f003 f8f4 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002bb4:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bc6:	230e      	movs	r3, #14
 8002bc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4823      	ldr	r0, [pc, #140]	@ (8002c60 <HAL_LTDC_MspInit+0x180>)
 8002bd2:	f003 f8e3 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002bd6:	23f7      	movs	r3, #247	@ 0xf7
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002be6:	230e      	movs	r3, #14
 8002be8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bee:	4619      	mov	r1, r3
 8002bf0:	481c      	ldr	r0, [pc, #112]	@ (8002c64 <HAL_LTDC_MspInit+0x184>)
 8002bf2:	f003 f8d3 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002bf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c08:	2309      	movs	r3, #9
 8002c0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c10:	4619      	mov	r1, r3
 8002c12:	4815      	ldr	r0, [pc, #84]	@ (8002c68 <HAL_LTDC_MspInit+0x188>)
 8002c14:	f003 f8c2 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002c18:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c2a:	230e      	movs	r3, #14
 8002c2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c32:	4619      	mov	r1, r3
 8002c34:	480d      	ldr	r0, [pc, #52]	@ (8002c6c <HAL_LTDC_MspInit+0x18c>)
 8002c36:	f003 f8b1 	bl	8005d9c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2105      	movs	r1, #5
 8002c3e:	2058      	movs	r0, #88	@ 0x58
 8002c40:	f002 f942 	bl	8004ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002c44:	2058      	movs	r0, #88	@ 0x58
 8002c46:	f002 f95b 	bl	8004f00 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002c4a:	bf00      	nop
 8002c4c:	3738      	adds	r7, #56	@ 0x38
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40016800 	.word	0x40016800
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40022400 	.word	0x40022400
 8002c64:	40022800 	.word	0x40022800
 8002c68:	40021800 	.word	0x40021800
 8002c6c:	40022000 	.word	0x40022000

08002c70 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08c      	sub	sp, #48	@ 0x30
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 031c 	add.w	r3, r7, #28
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d7c <HAL_QSPI_MspInit+0x10c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d170      	bne.n	8002d74 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002c92:	4b3b      	ldr	r3, [pc, #236]	@ (8002d80 <HAL_QSPI_MspInit+0x110>)
 8002c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c96:	4a3a      	ldr	r2, [pc, #232]	@ (8002d80 <HAL_QSPI_MspInit+0x110>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	6393      	str	r3, [r2, #56]	@ 0x38
 8002c9e:	4b38      	ldr	r3, [pc, #224]	@ (8002d80 <HAL_QSPI_MspInit+0x110>)
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002caa:	4b35      	ldr	r3, [pc, #212]	@ (8002d80 <HAL_QSPI_MspInit+0x110>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	4a34      	ldr	r2, [pc, #208]	@ (8002d80 <HAL_QSPI_MspInit+0x110>)
 8002cb0:	f043 0310 	orr.w	r3, r3, #16
 8002cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb6:	4b32      	ldr	r3, [pc, #200]	@ (8002d80 <HAL_QSPI_MspInit+0x110>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d80 <HAL_QSPI_MspInit+0x110>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8002d80 <HAL_QSPI_MspInit+0x110>)
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cce:	4b2c      	ldr	r3, [pc, #176]	@ (8002d80 <HAL_QSPI_MspInit+0x110>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cda:	4b29      	ldr	r3, [pc, #164]	@ (8002d80 <HAL_QSPI_MspInit+0x110>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	4a28      	ldr	r2, [pc, #160]	@ (8002d80 <HAL_QSPI_MspInit+0x110>)
 8002ce0:	f043 0308 	orr.w	r3, r3, #8
 8002ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce6:	4b26      	ldr	r3, [pc, #152]	@ (8002d80 <HAL_QSPI_MspInit+0x110>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d02:	2309      	movs	r3, #9
 8002d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002d06:	f107 031c 	add.w	r3, r7, #28
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	481d      	ldr	r0, [pc, #116]	@ (8002d84 <HAL_QSPI_MspInit+0x114>)
 8002d0e:	f003 f845 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002d12:	2340      	movs	r3, #64	@ 0x40
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002d22:	230a      	movs	r3, #10
 8002d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002d26:	f107 031c 	add.w	r3, r7, #28
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4816      	ldr	r0, [pc, #88]	@ (8002d88 <HAL_QSPI_MspInit+0x118>)
 8002d2e:	f003 f835 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d32:	2304      	movs	r3, #4
 8002d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d42:	2309      	movs	r3, #9
 8002d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d46:	f107 031c 	add.w	r3, r7, #28
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	480e      	ldr	r0, [pc, #56]	@ (8002d88 <HAL_QSPI_MspInit+0x118>)
 8002d4e:	f003 f825 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002d52:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d64:	2309      	movs	r3, #9
 8002d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d68:	f107 031c 	add.w	r3, r7, #28
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4807      	ldr	r0, [pc, #28]	@ (8002d8c <HAL_QSPI_MspInit+0x11c>)
 8002d70:	f003 f814 	bl	8005d9c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002d74:	bf00      	nop
 8002d76:	3730      	adds	r7, #48	@ 0x30
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	a0001000 	.word	0xa0001000
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	40020c00 	.word	0x40020c00

08002d90 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b0a4      	sub	sp, #144	@ 0x90
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d98:	f107 030c 	add.w	r3, r7, #12
 8002d9c:	2284      	movs	r2, #132	@ 0x84
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f012 fc4f 	bl	8015644 <memset>
  if(hrtc->Instance==RTC)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a0e      	ldr	r2, [pc, #56]	@ (8002de4 <HAL_RTC_MspInit+0x54>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d114      	bne.n	8002dda <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002db0:	2320      	movs	r3, #32
 8002db2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002db4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f006 fd22 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002dca:	f7ff fbbd 	bl	8002548 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dce:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <HAL_RTC_MspInit+0x58>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd2:	4a05      	ldr	r2, [pc, #20]	@ (8002de8 <HAL_RTC_MspInit+0x58>)
 8002dd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dd8:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002dda:	bf00      	nop
 8002ddc:	3790      	adds	r7, #144	@ 0x90
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40002800 	.word	0x40002800
 8002de8:	40023800 	.word	0x40023800

08002dec <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	@ 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a25      	ldr	r2, [pc, #148]	@ (8002ea0 <HAL_SD_MspInit+0xb4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d144      	bne.n	8002e98 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e0e:	4b25      	ldr	r3, [pc, #148]	@ (8002ea4 <HAL_SD_MspInit+0xb8>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	4a24      	ldr	r2, [pc, #144]	@ (8002ea4 <HAL_SD_MspInit+0xb8>)
 8002e14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ea4 <HAL_SD_MspInit+0xb8>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e26:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea4 <HAL_SD_MspInit+0xb8>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea4 <HAL_SD_MspInit+0xb8>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e32:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea4 <HAL_SD_MspInit+0xb8>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ea4 <HAL_SD_MspInit+0xb8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	4a18      	ldr	r2, [pc, #96]	@ (8002ea4 <HAL_SD_MspInit+0xb8>)
 8002e44:	f043 0308 	orr.w	r3, r3, #8
 8002e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ea4 <HAL_SD_MspInit+0xb8>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002e56:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002e5a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e64:	2303      	movs	r3, #3
 8002e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e68:	230c      	movs	r3, #12
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4619      	mov	r1, r3
 8002e72:	480d      	ldr	r0, [pc, #52]	@ (8002ea8 <HAL_SD_MspInit+0xbc>)
 8002e74:	f002 ff92 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002e78:	2304      	movs	r3, #4
 8002e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e84:	2303      	movs	r3, #3
 8002e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e88:	230c      	movs	r3, #12
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	4619      	mov	r1, r3
 8002e92:	4806      	ldr	r0, [pc, #24]	@ (8002eac <HAL_SD_MspInit+0xc0>)
 8002e94:	f002 ff82 	bl	8005d9c <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002e98:	bf00      	nop
 8002e9a:	3728      	adds	r7, #40	@ 0x28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	40020c00 	.word	0x40020c00

08002eb0 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b0aa      	sub	sp, #168	@ 0xa8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ec8:	f107 0310 	add.w	r3, r7, #16
 8002ecc:	2284      	movs	r2, #132	@ 0x84
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f012 fbb7 	bl	8015644 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8002ede:	d143      	bne.n	8002f68 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8002ee0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ee4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8002ee6:	2364      	movs	r3, #100	@ 0x64
 8002ee8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8002eea:	2302      	movs	r3, #2
 8002eec:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002efa:	f107 0310 	add.w	r3, r7, #16
 8002efe:	4618      	mov	r0, r3
 8002f00:	f006 fc82 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8002f0a:	f7ff fb1d 	bl	8002548 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002f0e:	4b18      	ldr	r3, [pc, #96]	@ (8002f70 <HAL_SPDIFRX_MspInit+0xc0>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	4a17      	ldr	r2, [pc, #92]	@ (8002f70 <HAL_SPDIFRX_MspInit+0xc0>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f1a:	4b15      	ldr	r3, [pc, #84]	@ (8002f70 <HAL_SPDIFRX_MspInit+0xc0>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f26:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <HAL_SPDIFRX_MspInit+0xc0>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	4a11      	ldr	r2, [pc, #68]	@ (8002f70 <HAL_SPDIFRX_MspInit+0xc0>)
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f32:	4b0f      	ldr	r3, [pc, #60]	@ (8002f70 <HAL_SPDIFRX_MspInit+0xc0>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002f3e:	2380      	movs	r3, #128	@ 0x80
 8002f40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002f56:	2308      	movs	r3, #8
 8002f58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002f5c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002f60:	4619      	mov	r1, r3
 8002f62:	4804      	ldr	r0, [pc, #16]	@ (8002f74 <HAL_SPDIFRX_MspInit+0xc4>)
 8002f64:	f002 ff1a 	bl	8005d9c <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8002f68:	bf00      	nop
 8002f6a:	37a8      	adds	r7, #168	@ 0xa8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40020c00 	.word	0x40020c00

08002f78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	@ 0x28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f80:	f107 0314 	add.w	r3, r7, #20
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a25      	ldr	r2, [pc, #148]	@ (800302c <HAL_SPI_MspInit+0xb4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d144      	bne.n	8003024 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f9a:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <HAL_SPI_MspInit+0xb8>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	4a24      	ldr	r2, [pc, #144]	@ (8003030 <HAL_SPI_MspInit+0xb8>)
 8002fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa6:	4b22      	ldr	r3, [pc, #136]	@ (8003030 <HAL_SPI_MspInit+0xb8>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8003030 <HAL_SPI_MspInit+0xb8>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003030 <HAL_SPI_MspInit+0xb8>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003030 <HAL_SPI_MspInit+0xb8>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fca:	4b19      	ldr	r3, [pc, #100]	@ (8003030 <HAL_SPI_MspInit+0xb8>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <HAL_SPI_MspInit+0xb8>)
 8002fd0:	f043 0302 	orr.w	r3, r3, #2
 8002fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fd6:	4b16      	ldr	r3, [pc, #88]	@ (8003030 <HAL_SPI_MspInit+0xb8>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ff2:	2305      	movs	r3, #5
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002ff6:	f107 0314 	add.w	r3, r7, #20
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	480d      	ldr	r0, [pc, #52]	@ (8003034 <HAL_SPI_MspInit+0xbc>)
 8002ffe:	f002 fecd 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003002:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003008:	2302      	movs	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003010:	2300      	movs	r3, #0
 8003012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003014:	2305      	movs	r3, #5
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	4619      	mov	r1, r3
 800301e:	4806      	ldr	r0, [pc, #24]	@ (8003038 <HAL_SPI_MspInit+0xc0>)
 8003020:	f002 febc 	bl	8005d9c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003024:	bf00      	nop
 8003026:	3728      	adds	r7, #40	@ 0x28
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40003800 	.word	0x40003800
 8003030:	40023800 	.word	0x40023800
 8003034:	40022000 	.word	0x40022000
 8003038:	40020400 	.word	0x40020400

0800303c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	@ 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2e      	ldr	r2, [pc, #184]	@ (8003104 <HAL_TIM_Base_MspInit+0xc8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10c      	bne.n	8003068 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800304e:	4b2e      	ldr	r3, [pc, #184]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003052:	4a2d      	ldr	r2, [pc, #180]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6453      	str	r3, [r2, #68]	@ 0x44
 800305a:	4b2b      	ldr	r3, [pc, #172]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003066:	e046      	b.n	80030f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003070:	d10c      	bne.n	800308c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003072:	4b25      	ldr	r3, [pc, #148]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	4a24      	ldr	r2, [pc, #144]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6413      	str	r3, [r2, #64]	@ 0x40
 800307e:	4b22      	ldr	r3, [pc, #136]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	69bb      	ldr	r3, [r7, #24]
}
 800308a:	e034      	b.n	80030f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1e      	ldr	r2, [pc, #120]	@ (800310c <HAL_TIM_Base_MspInit+0xd0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10c      	bne.n	80030b0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003096:	4b1c      	ldr	r3, [pc, #112]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	4a1b      	ldr	r2, [pc, #108]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a2:	4b19      	ldr	r3, [pc, #100]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697b      	ldr	r3, [r7, #20]
}
 80030ae:	e022      	b.n	80030f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a16      	ldr	r2, [pc, #88]	@ (8003110 <HAL_TIM_Base_MspInit+0xd4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d10c      	bne.n	80030d4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030ba:	4b13      	ldr	r3, [pc, #76]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	4a12      	ldr	r2, [pc, #72]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c6:	4b10      	ldr	r3, [pc, #64]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
}
 80030d2:	e010      	b.n	80030f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003114 <HAL_TIM_Base_MspInit+0xd8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10b      	bne.n	80030f6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030de:	4b0a      	ldr	r3, [pc, #40]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	4a09      	ldr	r2, [pc, #36]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ea:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <HAL_TIM_Base_MspInit+0xcc>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
}
 80030f6:	bf00      	nop
 80030f8:	3724      	adds	r7, #36	@ 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000
 8003108:	40023800 	.word	0x40023800
 800310c:	40000400 	.word	0x40000400
 8003110:	40000c00 	.word	0x40000c00
 8003114:	40010400 	.word	0x40010400

08003118 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <HAL_TIM_PWM_MspInit+0x38>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10b      	bne.n	8003142 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800312a:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <HAL_TIM_PWM_MspInit+0x3c>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	4a09      	ldr	r2, [pc, #36]	@ (8003154 <HAL_TIM_PWM_MspInit+0x3c>)
 8003130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003134:	6413      	str	r3, [r2, #64]	@ 0x40
 8003136:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <HAL_TIM_PWM_MspInit+0x3c>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40001800 	.word	0x40001800
 8003154:	40023800 	.word	0x40023800

08003158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08c      	sub	sp, #48	@ 0x30
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 031c 	add.w	r3, r7, #28
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a56      	ldr	r2, [pc, #344]	@ (80032d0 <HAL_TIM_MspPostInit+0x178>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d11d      	bne.n	80031b6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317a:	4b56      	ldr	r3, [pc, #344]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	4a55      	ldr	r2, [pc, #340]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6313      	str	r3, [r2, #48]	@ 0x30
 8003186:	4b53      	ldr	r3, [pc, #332]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003192:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003198:	2302      	movs	r3, #2
 800319a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a0:	2300      	movs	r3, #0
 80031a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031a4:	2301      	movs	r3, #1
 80031a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80031a8:	f107 031c 	add.w	r3, r7, #28
 80031ac:	4619      	mov	r1, r3
 80031ae:	484a      	ldr	r0, [pc, #296]	@ (80032d8 <HAL_TIM_MspPostInit+0x180>)
 80031b0:	f002 fdf4 	bl	8005d9c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80031b4:	e087      	b.n	80032c6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031be:	d11d      	bne.n	80031fc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c0:	4b44      	ldr	r3, [pc, #272]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	4a43      	ldr	r2, [pc, #268]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80031cc:	4b41      	ldr	r3, [pc, #260]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80031d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031de:	2302      	movs	r3, #2
 80031e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e6:	2300      	movs	r3, #0
 80031e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031ea:	2301      	movs	r3, #1
 80031ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80031ee:	f107 031c 	add.w	r3, r7, #28
 80031f2:	4619      	mov	r1, r3
 80031f4:	4838      	ldr	r0, [pc, #224]	@ (80032d8 <HAL_TIM_MspPostInit+0x180>)
 80031f6:	f002 fdd1 	bl	8005d9c <HAL_GPIO_Init>
}
 80031fa:	e064      	b.n	80032c6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a36      	ldr	r2, [pc, #216]	@ (80032dc <HAL_TIM_MspPostInit+0x184>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d11c      	bne.n	8003240 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003206:	4b33      	ldr	r3, [pc, #204]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	4a32      	ldr	r2, [pc, #200]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	6313      	str	r3, [r2, #48]	@ 0x30
 8003212:	4b30      	ldr	r3, [pc, #192]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800321e:	2310      	movs	r3, #16
 8003220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322a:	2300      	movs	r3, #0
 800322c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800322e:	2302      	movs	r3, #2
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003232:	f107 031c 	add.w	r3, r7, #28
 8003236:	4619      	mov	r1, r3
 8003238:	4829      	ldr	r0, [pc, #164]	@ (80032e0 <HAL_TIM_MspPostInit+0x188>)
 800323a:	f002 fdaf 	bl	8005d9c <HAL_GPIO_Init>
}
 800323e:	e042      	b.n	80032c6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a27      	ldr	r2, [pc, #156]	@ (80032e4 <HAL_TIM_MspPostInit+0x18c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d11c      	bne.n	8003284 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800324a:	4b22      	ldr	r3, [pc, #136]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	4a21      	ldr	r2, [pc, #132]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 8003250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003254:	6313      	str	r3, [r2, #48]	@ 0x30
 8003256:	4b1f      	ldr	r3, [pc, #124]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003262:	2301      	movs	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326e:	2300      	movs	r3, #0
 8003270:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003272:	2302      	movs	r3, #2
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003276:	f107 031c 	add.w	r3, r7, #28
 800327a:	4619      	mov	r1, r3
 800327c:	481a      	ldr	r0, [pc, #104]	@ (80032e8 <HAL_TIM_MspPostInit+0x190>)
 800327e:	f002 fd8d 	bl	8005d9c <HAL_GPIO_Init>
}
 8003282:	e020      	b.n	80032c6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a18      	ldr	r2, [pc, #96]	@ (80032ec <HAL_TIM_MspPostInit+0x194>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d11b      	bne.n	80032c6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800328e:	4b11      	ldr	r3, [pc, #68]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003292:	4a10      	ldr	r2, [pc, #64]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 8003294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003298:	6313      	str	r3, [r2, #48]	@ 0x30
 800329a:	4b0e      	ldr	r3, [pc, #56]	@ (80032d4 <HAL_TIM_MspPostInit+0x17c>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80032a6:	2340      	movs	r3, #64	@ 0x40
 80032a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032aa:	2302      	movs	r3, #2
 80032ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	2300      	movs	r3, #0
 80032b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80032b6:	2309      	movs	r3, #9
 80032b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80032ba:	f107 031c 	add.w	r3, r7, #28
 80032be:	4619      	mov	r1, r3
 80032c0:	480b      	ldr	r0, [pc, #44]	@ (80032f0 <HAL_TIM_MspPostInit+0x198>)
 80032c2:	f002 fd6b 	bl	8005d9c <HAL_GPIO_Init>
}
 80032c6:	bf00      	nop
 80032c8:	3730      	adds	r7, #48	@ 0x30
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40010000 	.word	0x40010000
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40020000 	.word	0x40020000
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40020400 	.word	0x40020400
 80032e4:	40000c00 	.word	0x40000c00
 80032e8:	40022000 	.word	0x40022000
 80032ec:	40001800 	.word	0x40001800
 80032f0:	40021c00 	.word	0x40021c00

080032f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b0ae      	sub	sp, #184	@ 0xb8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800330c:	f107 0320 	add.w	r3, r7, #32
 8003310:	2284      	movs	r2, #132	@ 0x84
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f012 f995 	bl	8015644 <memset>
  if(huart->Instance==USART1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a53      	ldr	r2, [pc, #332]	@ (800346c <HAL_UART_MspInit+0x178>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d15d      	bne.n	80033e0 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003324:	2340      	movs	r3, #64	@ 0x40
 8003326:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003328:	2300      	movs	r3, #0
 800332a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800332c:	f107 0320 	add.w	r3, r7, #32
 8003330:	4618      	mov	r0, r3
 8003332:	f006 fa69 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800333c:	f7ff f904 	bl	8002548 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003340:	4b4b      	ldr	r3, [pc, #300]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 8003342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003344:	4a4a      	ldr	r2, [pc, #296]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 8003346:	f043 0310 	orr.w	r3, r3, #16
 800334a:	6453      	str	r3, [r2, #68]	@ 0x44
 800334c:	4b48      	ldr	r3, [pc, #288]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 800334e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003358:	4b45      	ldr	r3, [pc, #276]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	4a44      	ldr	r2, [pc, #272]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 800335e:	f043 0302 	orr.w	r3, r3, #2
 8003362:	6313      	str	r3, [r2, #48]	@ 0x30
 8003364:	4b42      	ldr	r3, [pc, #264]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003370:	4b3f      	ldr	r3, [pc, #252]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003374:	4a3e      	ldr	r2, [pc, #248]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6313      	str	r3, [r2, #48]	@ 0x30
 800337c:	4b3c      	ldr	r3, [pc, #240]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 800337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003388:	2380      	movs	r3, #128	@ 0x80
 800338a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033a0:	2307      	movs	r3, #7
 80033a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80033a6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80033aa:	4619      	mov	r1, r3
 80033ac:	4831      	ldr	r0, [pc, #196]	@ (8003474 <HAL_UART_MspInit+0x180>)
 80033ae:	f002 fcf5 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80033b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033cc:	2307      	movs	r3, #7
 80033ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80033d2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80033d6:	4619      	mov	r1, r3
 80033d8:	4827      	ldr	r0, [pc, #156]	@ (8003478 <HAL_UART_MspInit+0x184>)
 80033da:	f002 fcdf 	bl	8005d9c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80033de:	e040      	b.n	8003462 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a25      	ldr	r2, [pc, #148]	@ (800347c <HAL_UART_MspInit+0x188>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d13b      	bne.n	8003462 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80033ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033ee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80033f0:	2300      	movs	r3, #0
 80033f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033f4:	f107 0320 	add.w	r3, r7, #32
 80033f8:	4618      	mov	r0, r3
 80033fa:	f006 fa05 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8003404:	f7ff f8a0 	bl	8002548 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003408:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 800340a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340c:	4a18      	ldr	r2, [pc, #96]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 800340e:	f043 0320 	orr.w	r3, r3, #32
 8003412:	6453      	str	r3, [r2, #68]	@ 0x44
 8003414:	4b16      	ldr	r3, [pc, #88]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 8003416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003420:	4b13      	ldr	r3, [pc, #76]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 8003422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003424:	4a12      	ldr	r2, [pc, #72]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	6313      	str	r3, [r2, #48]	@ 0x30
 800342c:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <HAL_UART_MspInit+0x17c>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003438:	23c0      	movs	r3, #192	@ 0xc0
 800343a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344a:	2303      	movs	r3, #3
 800344c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003450:	2308      	movs	r3, #8
 8003452:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003456:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800345a:	4619      	mov	r1, r3
 800345c:	4808      	ldr	r0, [pc, #32]	@ (8003480 <HAL_UART_MspInit+0x18c>)
 800345e:	f002 fc9d 	bl	8005d9c <HAL_GPIO_Init>
}
 8003462:	bf00      	nop
 8003464:	37b8      	adds	r7, #184	@ 0xb8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40011000 	.word	0x40011000
 8003470:	40023800 	.word	0x40023800
 8003474:	40020400 	.word	0x40020400
 8003478:	40020000 	.word	0x40020000
 800347c:	40011400 	.word	0x40011400
 8003480:	40020800 	.word	0x40020800

08003484 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003498:	4b3a      	ldr	r3, [pc, #232]	@ (8003584 <HAL_FMC_MspInit+0x100>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d16d      	bne.n	800357c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80034a0:	4b38      	ldr	r3, [pc, #224]	@ (8003584 <HAL_FMC_MspInit+0x100>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80034a6:	4b38      	ldr	r3, [pc, #224]	@ (8003588 <HAL_FMC_MspInit+0x104>)
 80034a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034aa:	4a37      	ldr	r2, [pc, #220]	@ (8003588 <HAL_FMC_MspInit+0x104>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6393      	str	r3, [r2, #56]	@ 0x38
 80034b2:	4b35      	ldr	r3, [pc, #212]	@ (8003588 <HAL_FMC_MspInit+0x104>)
 80034b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80034be:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80034c2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	2302      	movs	r3, #2
 80034c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034cc:	2303      	movs	r3, #3
 80034ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034d0:	230c      	movs	r3, #12
 80034d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	4619      	mov	r1, r3
 80034d8:	482c      	ldr	r0, [pc, #176]	@ (800358c <HAL_FMC_MspInit+0x108>)
 80034da:	f002 fc5f 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80034de:	f248 1333 	movw	r3, #33075	@ 0x8133
 80034e2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e4:	2302      	movs	r3, #2
 80034e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ec:	2303      	movs	r3, #3
 80034ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034f0:	230c      	movs	r3, #12
 80034f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034f4:	1d3b      	adds	r3, r7, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4825      	ldr	r0, [pc, #148]	@ (8003590 <HAL_FMC_MspInit+0x10c>)
 80034fa:	f002 fc4f 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80034fe:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003502:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350c:	2303      	movs	r3, #3
 800350e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003510:	230c      	movs	r3, #12
 8003512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	4619      	mov	r1, r3
 8003518:	481e      	ldr	r0, [pc, #120]	@ (8003594 <HAL_FMC_MspInit+0x110>)
 800351a:	f002 fc3f 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800351e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003522:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352c:	2303      	movs	r3, #3
 800352e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003530:	230c      	movs	r3, #12
 8003532:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003534:	1d3b      	adds	r3, r7, #4
 8003536:	4619      	mov	r1, r3
 8003538:	4817      	ldr	r0, [pc, #92]	@ (8003598 <HAL_FMC_MspInit+0x114>)
 800353a:	f002 fc2f 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800353e:	2328      	movs	r3, #40	@ 0x28
 8003540:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003542:	2302      	movs	r3, #2
 8003544:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354a:	2303      	movs	r3, #3
 800354c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800354e:	230c      	movs	r3, #12
 8003550:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4811      	ldr	r0, [pc, #68]	@ (800359c <HAL_FMC_MspInit+0x118>)
 8003558:	f002 fc20 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800355c:	2308      	movs	r3, #8
 800355e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003560:	2302      	movs	r3, #2
 8003562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003568:	2303      	movs	r3, #3
 800356a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800356c:	230c      	movs	r3, #12
 800356e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	4619      	mov	r1, r3
 8003574:	480a      	ldr	r0, [pc, #40]	@ (80035a0 <HAL_FMC_MspInit+0x11c>)
 8003576:	f002 fc11 	bl	8005d9c <HAL_GPIO_Init>
 800357a:	e000      	b.n	800357e <HAL_FMC_MspInit+0xfa>
    return;
 800357c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000d70 	.word	0x20000d70
 8003588:	40023800 	.word	0x40023800
 800358c:	40021000 	.word	0x40021000
 8003590:	40021800 	.word	0x40021800
 8003594:	40020c00 	.word	0x40020c00
 8003598:	40021400 	.word	0x40021400
 800359c:	40021c00 	.word	0x40021c00
 80035a0:	40020800 	.word	0x40020800

080035a4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80035ac:	f7ff ff6a 	bl	8003484 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	@ 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003674 <HAL_SAI_MspInit+0xbc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d124      	bne.n	8003614 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80035ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003678 <HAL_SAI_MspInit+0xc0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10b      	bne.n	80035ea <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80035d2:	4b2a      	ldr	r3, [pc, #168]	@ (800367c <HAL_SAI_MspInit+0xc4>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	4a29      	ldr	r2, [pc, #164]	@ (800367c <HAL_SAI_MspInit+0xc4>)
 80035d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80035de:	4b27      	ldr	r3, [pc, #156]	@ (800367c <HAL_SAI_MspInit+0xc4>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80035ea:	4b23      	ldr	r3, [pc, #140]	@ (8003678 <HAL_SAI_MspInit+0xc0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3301      	adds	r3, #1
 80035f0:	4a21      	ldr	r2, [pc, #132]	@ (8003678 <HAL_SAI_MspInit+0xc0>)
 80035f2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80035f4:	23f0      	movs	r3, #240	@ 0xf0
 80035f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003600:	2300      	movs	r3, #0
 8003602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003604:	230a      	movs	r3, #10
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	4619      	mov	r1, r3
 800360e:	481c      	ldr	r0, [pc, #112]	@ (8003680 <HAL_SAI_MspInit+0xc8>)
 8003610:	f002 fbc4 	bl	8005d9c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1a      	ldr	r2, [pc, #104]	@ (8003684 <HAL_SAI_MspInit+0xcc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d125      	bne.n	800366a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800361e:	4b16      	ldr	r3, [pc, #88]	@ (8003678 <HAL_SAI_MspInit+0xc0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003626:	4b15      	ldr	r3, [pc, #84]	@ (800367c <HAL_SAI_MspInit+0xc4>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	4a14      	ldr	r2, [pc, #80]	@ (800367c <HAL_SAI_MspInit+0xc4>)
 800362c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003630:	6453      	str	r3, [r2, #68]	@ 0x44
 8003632:	4b12      	ldr	r3, [pc, #72]	@ (800367c <HAL_SAI_MspInit+0xc4>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003636:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800363e:	4b0e      	ldr	r3, [pc, #56]	@ (8003678 <HAL_SAI_MspInit+0xc0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	4a0c      	ldr	r2, [pc, #48]	@ (8003678 <HAL_SAI_MspInit+0xc0>)
 8003646:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003648:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800364c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364e:	2302      	movs	r3, #2
 8003650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800365a:	230a      	movs	r3, #10
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800365e:	f107 0314 	add.w	r3, r7, #20
 8003662:	4619      	mov	r1, r3
 8003664:	4808      	ldr	r0, [pc, #32]	@ (8003688 <HAL_SAI_MspInit+0xd0>)
 8003666:	f002 fb99 	bl	8005d9c <HAL_GPIO_Init>

    }
}
 800366a:	bf00      	nop
 800366c:	3728      	adds	r7, #40	@ 0x28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40015c04 	.word	0x40015c04
 8003678:	20000d74 	.word	0x20000d74
 800367c:	40023800 	.word	0x40023800
 8003680:	40022000 	.word	0x40022000
 8003684:	40015c24 	.word	0x40015c24
 8003688:	40021800 	.word	0x40021800

0800368c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08e      	sub	sp, #56	@ 0x38
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800369c:	4b33      	ldr	r3, [pc, #204]	@ (800376c <HAL_InitTick+0xe0>)
 800369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a0:	4a32      	ldr	r2, [pc, #200]	@ (800376c <HAL_InitTick+0xe0>)
 80036a2:	f043 0310 	orr.w	r3, r3, #16
 80036a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80036a8:	4b30      	ldr	r3, [pc, #192]	@ (800376c <HAL_InitTick+0xe0>)
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036b4:	f107 0210 	add.w	r2, r7, #16
 80036b8:	f107 0314 	add.w	r3, r7, #20
 80036bc:	4611      	mov	r1, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f006 f870 	bl	80097a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80036c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80036ce:	f006 f841 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 80036d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80036d4:	e004      	b.n	80036e0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80036d6:	f006 f83d 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 80036da:	4603      	mov	r3, r0
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e2:	4a23      	ldr	r2, [pc, #140]	@ (8003770 <HAL_InitTick+0xe4>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	0c9b      	lsrs	r3, r3, #18
 80036ea:	3b01      	subs	r3, #1
 80036ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80036ee:	4b21      	ldr	r3, [pc, #132]	@ (8003774 <HAL_InitTick+0xe8>)
 80036f0:	4a21      	ldr	r2, [pc, #132]	@ (8003778 <HAL_InitTick+0xec>)
 80036f2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80036f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003774 <HAL_InitTick+0xe8>)
 80036f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80036fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003774 <HAL_InitTick+0xe8>)
 80036fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003700:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003702:	4b1c      	ldr	r3, [pc, #112]	@ (8003774 <HAL_InitTick+0xe8>)
 8003704:	2200      	movs	r2, #0
 8003706:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003708:	4b1a      	ldr	r3, [pc, #104]	@ (8003774 <HAL_InitTick+0xe8>)
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800370e:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <HAL_InitTick+0xe8>)
 8003710:	2200      	movs	r2, #0
 8003712:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003714:	4817      	ldr	r0, [pc, #92]	@ (8003774 <HAL_InitTick+0xe8>)
 8003716:	f008 fd04 	bl	800c122 <HAL_TIM_Base_Init>
 800371a:	4603      	mov	r3, r0
 800371c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003720:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003724:	2b00      	cmp	r3, #0
 8003726:	d11b      	bne.n	8003760 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003728:	4812      	ldr	r0, [pc, #72]	@ (8003774 <HAL_InitTick+0xe8>)
 800372a:	f008 fd51 	bl	800c1d0 <HAL_TIM_Base_Start_IT>
 800372e:	4603      	mov	r3, r0
 8003730:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003734:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003738:	2b00      	cmp	r3, #0
 800373a:	d111      	bne.n	8003760 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800373c:	2036      	movs	r0, #54	@ 0x36
 800373e:	f001 fbdf 	bl	8004f00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b0f      	cmp	r3, #15
 8003746:	d808      	bhi.n	800375a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003748:	2200      	movs	r2, #0
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	2036      	movs	r0, #54	@ 0x36
 800374e:	f001 fbbb 	bl	8004ec8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003752:	4a0a      	ldr	r2, [pc, #40]	@ (800377c <HAL_InitTick+0xf0>)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	e002      	b.n	8003760 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003760:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003764:	4618      	mov	r0, r3
 8003766:	3738      	adds	r7, #56	@ 0x38
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	431bde83 	.word	0x431bde83
 8003774:	20000d78 	.word	0x20000d78
 8003778:	40001000 	.word	0x40001000
 800377c:	2000004c 	.word	0x2000004c

08003780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003784:	bf00      	nop
 8003786:	e7fd      	b.n	8003784 <NMI_Handler+0x4>

08003788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800378c:	bf00      	nop
 800378e:	e7fd      	b.n	800378c <HardFault_Handler+0x4>

08003790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003794:	bf00      	nop
 8003796:	e7fd      	b.n	8003794 <MemManage_Handler+0x4>

08003798 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800379c:	bf00      	nop
 800379e:	e7fd      	b.n	800379c <BusFault_Handler+0x4>

080037a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <UsageFault_Handler+0x4>

080037a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037bc:	4802      	ldr	r0, [pc, #8]	@ (80037c8 <TIM6_DAC_IRQHandler+0x10>)
 80037be:	f008 fdd6 	bl	800c36e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000d78 	.word	0x20000d78

080037cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80037d0:	4802      	ldr	r0, [pc, #8]	@ (80037dc <OTG_FS_IRQHandler+0x10>)
 80037d2:	f002 ffa1 	bl	8006718 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	2000952c 	.word	0x2000952c

080037e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80037e4:	4802      	ldr	r0, [pc, #8]	@ (80037f0 <LTDC_IRQHandler+0x10>)
 80037e6:	f004 ffbb 	bl	8008760 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000708 	.word	0x20000708

080037f4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80037f8:	4802      	ldr	r0, [pc, #8]	@ (8003804 <DMA2D_IRQHandler+0x10>)
 80037fa:	f001 fddf 	bl	80053bc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000570 	.word	0x20000570

08003808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003810:	4a14      	ldr	r2, [pc, #80]	@ (8003864 <_sbrk+0x5c>)
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <_sbrk+0x60>)
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800381c:	4b13      	ldr	r3, [pc, #76]	@ (800386c <_sbrk+0x64>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003824:	4b11      	ldr	r3, [pc, #68]	@ (800386c <_sbrk+0x64>)
 8003826:	4a12      	ldr	r2, [pc, #72]	@ (8003870 <_sbrk+0x68>)
 8003828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800382a:	4b10      	ldr	r3, [pc, #64]	@ (800386c <_sbrk+0x64>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	429a      	cmp	r2, r3
 8003836:	d207      	bcs.n	8003848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003838:	f011 ff58 	bl	80156ec <__errno>
 800383c:	4603      	mov	r3, r0
 800383e:	220c      	movs	r2, #12
 8003840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	e009      	b.n	800385c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003848:	4b08      	ldr	r3, [pc, #32]	@ (800386c <_sbrk+0x64>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800384e:	4b07      	ldr	r3, [pc, #28]	@ (800386c <_sbrk+0x64>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	4a05      	ldr	r2, [pc, #20]	@ (800386c <_sbrk+0x64>)
 8003858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800385a:	68fb      	ldr	r3, [r7, #12]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20050000 	.word	0x20050000
 8003868:	00000400 	.word	0x00000400
 800386c:	20000dc4 	.word	0x20000dc4
 8003870:	20009a58 	.word	0x20009a58

08003874 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003878:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <SystemInit+0x20>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387e:	4a05      	ldr	r2, [pc, #20]	@ (8003894 <SystemInit+0x20>)
 8003880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <LOGGER_Connect+0x16>
 80038a8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ac:	e016      	b.n	80038dc <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 80038ae:	223f      	movs	r2, #63	@ 0x3f
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	480c      	ldr	r0, [pc, #48]	@ (80038e4 <LOGGER_Connect+0x4c>)
 80038b4:	f011 fee0 	bl	8015678 <strncpy>
    current_config.server_port = port;
 80038b8:	4a0b      	ldr	r2, [pc, #44]	@ (80038e8 <LOGGER_Connect+0x50>)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 80038be:	6839      	ldr	r1, [r7, #0]
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f891 	bl	80039e8 <LOGGER_Platform_Connect>
 80038c6:	4603      	mov	r3, r0
 80038c8:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <LOGGER_Connect+0x40>
        logger_connected = true;
 80038d2:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <LOGGER_Connect+0x54>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	701a      	strb	r2, [r3, #0]
    }
    return status;
 80038d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000007 	.word	0x20000007
 80038e8:	20000004 	.word	0x20000004
 80038ec:	20000dc8 	.word	0x20000dc8

080038f0 <LOGGER_Send>:
        logger_connected = false;
    }
    return status;
}

LoggerStatus LOGGER_Send(const char* message) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
    if (!logger_connected || message == NULL) return LOGGER_STATUS_ERROR;
 80038f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003924 <LOGGER_Send+0x34>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	f083 0301 	eor.w	r3, r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <LOGGER_Send+0x1c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <LOGGER_Send+0x22>
 800390c:	f04f 33ff 	mov.w	r3, #4294967295
 8003910:	e003      	b.n	800391a <LOGGER_Send+0x2a>
    return LOGGER_Platform_Send(message);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f874 	bl	8003a00 <LOGGER_Platform_Send>
 8003918:	4603      	mov	r3, r0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000dc8 	.word	0x20000dc8

08003928 <LOGGER_SendFormatted>:

bool LOGGER_IsConnected(void) {
    return logger_connected;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8003928:	b40e      	push	{r1, r2, r3}
 800392a:	b590      	push	{r4, r7, lr}
 800392c:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8003930:	af00      	add	r7, sp, #0
 8003932:	4602      	mov	r2, r0
 8003934:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003938:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 800393c:	701a      	strb	r2, [r3, #0]
    if (level < current_config.level) return;
 800393e:	4b27      	ldr	r3, [pc, #156]	@ (80039dc <LOGGER_SendFormatted+0xb4>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003946:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d33c      	bcc.n	80039ca <LOGGER_SendFormatted+0xa2>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8003950:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003954:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003958:	4a21      	ldr	r2, [pc, #132]	@ (80039e0 <LOGGER_SendFormatted+0xb8>)
 800395a:	461c      	mov	r4, r3
 800395c:	4613      	mov	r3, r2
 800395e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003960:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 8003964:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003968:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003972:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397a:	f107 001c 	add.w	r0, r7, #28
 800397e:	4a19      	ldr	r2, [pc, #100]	@ (80039e4 <LOGGER_SendFormatted+0xbc>)
 8003980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003984:	f011 fdec 	bl	8015560 <sniprintf>
 8003988:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 800398c:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8003990:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003994:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003998:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 800399a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800399e:	f107 021c 	add.w	r2, r7, #28
 80039a2:	18d0      	adds	r0, r2, r3
 80039a4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80039a8:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 80039ac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80039b0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80039ba:	f011 fe35 	bl	8015628 <vsniprintf>
    va_end(args);
    
    LOGGER_Send(buffer);
 80039be:	f107 031c 	add.w	r3, r7, #28
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ff94 	bl	80038f0 <LOGGER_Send>
 80039c8:	e000      	b.n	80039cc <LOGGER_SendFormatted+0xa4>
    if (level < current_config.level) return;
 80039ca:	bf00      	nop
}
 80039cc:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80039d0:	46bd      	mov	sp, r7
 80039d2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80039d6:	b003      	add	sp, #12
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000004 	.word	0x20000004
 80039e0:	080171bc 	.word	0x080171bc
 80039e4:	080171cc 	.word	0x080171cc

080039e8 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <LOGGER_Platform_Send+0x14>
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a12:	e01c      	b.n	8003a4e <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fc fc05 	bl	8000224 <strlen>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	dd12      	ble.n	8003a4a <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	480a      	ldr	r0, [pc, #40]	@ (8003a58 <LOGGER_Platform_Send+0x58>)
 8003a30:	f009 fcc0 	bl	800d3b4 <HAL_UART_Transmit>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d107      	bne.n	8003a4a <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8003a3a:	2364      	movs	r3, #100	@ 0x64
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	4907      	ldr	r1, [pc, #28]	@ (8003a5c <LOGGER_Platform_Send+0x5c>)
 8003a40:	4805      	ldr	r0, [pc, #20]	@ (8003a58 <LOGGER_Platform_Send+0x58>)
 8003a42:	f009 fcb7 	bl	800d3b4 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e001      	b.n	8003a4e <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000c20 	.word	0x20000c20
 8003a5c:	080171d0 	.word	0x080171d0

08003a60 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 8003a6e:	4913      	ldr	r1, [pc, #76]	@ (8003abc <UART_Connect+0x5c>)
 8003a70:	2003      	movs	r0, #3
 8003a72:	f7ff ff59 	bl	8003928 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e01c      	b.n	8003ab4 <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4910      	ldr	r1, [pc, #64]	@ (8003ac0 <UART_Connect+0x60>)
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f7ff ff52 	bl	8003928 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f935 	bl	8003cf4 <UART_Platform_Connect>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d108      	bne.n	8003aa6 <UART_Connect+0x46>
        uart_connected = true;
 8003a94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <UART_Connect+0x64>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	490a      	ldr	r1, [pc, #40]	@ (8003ac8 <UART_Connect+0x68>)
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f7ff ff42 	bl	8003928 <LOGGER_SendFormatted>
 8003aa4:	e005      	b.n	8003ab2 <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4908      	ldr	r1, [pc, #32]	@ (8003acc <UART_Connect+0x6c>)
 8003aac:	2003      	movs	r0, #3
 8003aae:	f7ff ff3b 	bl	8003928 <LOGGER_SendFormatted>
    }

    return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	080171d4 	.word	0x080171d4
 8003ac0:	080171f8 	.word	0x080171f8
 8003ac4:	20000dc9 	.word	0x20000dc9
 8003ac8:	08017210 	.word	0x08017210
 8003acc:	08017234 	.word	0x08017234

08003ad0 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8003ad8:	4b19      	ldr	r3, [pc, #100]	@ (8003b40 <UART_Send+0x70>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	f083 0301 	eor.w	r3, r3, #1
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 8003ae6:	4917      	ldr	r1, [pc, #92]	@ (8003b44 <UART_Send+0x74>)
 8003ae8:	2003      	movs	r0, #3
 8003aea:	f7ff ff1d 	bl	8003928 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e022      	b.n	8003b38 <UART_Send+0x68>
    }

    if (data == NULL) {
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d105      	bne.n	8003b04 <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8003af8:	4913      	ldr	r1, [pc, #76]	@ (8003b48 <UART_Send+0x78>)
 8003afa:	2003      	movs	r0, #3
 8003afc:	f7ff ff14 	bl	8003928 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e019      	b.n	8003b38 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4911      	ldr	r1, [pc, #68]	@ (8003b4c <UART_Send+0x7c>)
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f7ff ff0d 	bl	8003928 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f924 	bl	8003d5c <UART_Platform_Send>
 8003b14:	4603      	mov	r3, r0
 8003b16:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	490b      	ldr	r1, [pc, #44]	@ (8003b50 <UART_Send+0x80>)
 8003b22:	2000      	movs	r0, #0
 8003b24:	f7ff ff00 	bl	8003928 <LOGGER_SendFormatted>
 8003b28:	e005      	b.n	8003b36 <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4909      	ldr	r1, [pc, #36]	@ (8003b54 <UART_Send+0x84>)
 8003b30:	2003      	movs	r0, #3
 8003b32:	f7ff fef9 	bl	8003928 <LOGGER_SendFormatted>
    }

    return status;
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000dc9 	.word	0x20000dc9
 8003b44:	08017260 	.word	0x08017260
 8003b48:	08017284 	.word	0x08017284
 8003b4c:	080172a4 	.word	0x080172a4
 8003b50:	080172bc 	.word	0x080172bc
 8003b54:	080172d8 	.word	0x080172d8

08003b58 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 8003b64:	4b22      	ldr	r3, [pc, #136]	@ (8003bf0 <UART_Receive+0x98>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	f083 0301 	eor.w	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 8003b72:	4920      	ldr	r1, [pc, #128]	@ (8003bf4 <UART_Receive+0x9c>)
 8003b74:	2003      	movs	r0, #3
 8003b76:	f7ff fed7 	bl	8003928 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e034      	b.n	8003be8 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <UART_Receive+0x38>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	dd02      	ble.n	8003b90 <UART_Receive+0x38>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8003b90:	4919      	ldr	r1, [pc, #100]	@ (8003bf8 <UART_Receive+0xa0>)
 8003b92:	2003      	movs	r0, #3
 8003b94:	f7ff fec8 	bl	8003928 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e025      	b.n	8003be8 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	4917      	ldr	r1, [pc, #92]	@ (8003bfc <UART_Receive+0xa4>)
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f7ff fec1 	bl	8003928 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fb42 	bl	8004234 <UART_Platform_Receive>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d107      	bne.n	8003bca <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	490f      	ldr	r1, [pc, #60]	@ (8003c00 <UART_Receive+0xa8>)
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f7ff feb0 	bl	8003928 <LOGGER_SendFormatted>
 8003bc8:	e00d      	b.n	8003be6 <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d104      	bne.n	8003bda <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8003bd0:	490c      	ldr	r1, [pc, #48]	@ (8003c04 <UART_Receive+0xac>)
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f7ff fea8 	bl	8003928 <LOGGER_SendFormatted>
 8003bd8:	e005      	b.n	8003be6 <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	490a      	ldr	r1, [pc, #40]	@ (8003c08 <UART_Receive+0xb0>)
 8003be0:	2003      	movs	r0, #3
 8003be2:	f7ff fea1 	bl	8003928 <LOGGER_SendFormatted>
    }

    return status;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20000dc9 	.word	0x20000dc9
 8003bf4:	080172fc 	.word	0x080172fc
 8003bf8:	08017324 	.word	0x08017324
 8003bfc:	08017350 	.word	0x08017350
 8003c00:	08017378 	.word	0x08017378
 8003c04:	08017398 	.word	0x08017398
 8003c08:	080173b0 	.word	0x080173b0

08003c0c <UART_IsConnected>:
    LOG_DEBUG("[UART] Configuration saved (not connected)");
    return UART_STATUS_OK;
}

bool UART_IsConnected(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
    return uart_connected;
 8003c10:	4b03      	ldr	r3, [pc, #12]	@ (8003c20 <UART_IsConnected+0x14>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000dc9 	.word	0x20000dc9

08003c24 <flush_rx_buffer>:
static uint8_t loopback_buffer[256];
static int loopback_count = 0;
static bool loopback_data_available = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
    
    LOG_INFO("[UART_STM32] Flushing RX buffer...");
 8003c2e:	4928      	ldr	r1, [pc, #160]	@ (8003cd0 <flush_rx_buffer+0xac>)
 8003c30:	2001      	movs	r0, #1
 8003c32:	f7ff fe79 	bl	8003928 <LOGGER_SendFormatted>
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8003c36:	e00d      	b.n	8003c54 <flush_rx_buffer+0x30>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8003c38:	4b26      	ldr	r3, [pc, #152]	@ (8003cd4 <flush_rx_buffer+0xb0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3301      	adds	r3, #1
 8003c46:	607b      	str	r3, [r7, #4]
        LOG_DEBUG("[UART_STM32] Flushed byte %d: 0x%02X", flush_count, dummy);
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4922      	ldr	r1, [pc, #136]	@ (8003cd8 <flush_rx_buffer+0xb4>)
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f7ff fe6a 	bl	8003928 <LOGGER_SendFormatted>
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8003c54:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd4 <flush_rx_buffer+0xb0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d10c      	bne.n	8003c7c <flush_rx_buffer+0x58>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b63      	cmp	r3, #99	@ 0x63
 8003c66:	dde7      	ble.n	8003c38 <flush_rx_buffer+0x14>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8003c68:	e008      	b.n	8003c7c <flush_rx_buffer+0x58>
        flush_count++;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	607b      	str	r3, [r7, #4]
        LOG_DEBUG("[UART_STM32] HAL flushed byte %d: 0x%02X", flush_count, dummy);
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4919      	ldr	r1, [pc, #100]	@ (8003cdc <flush_rx_buffer+0xb8>)
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7ff fe56 	bl	8003928 <LOGGER_SendFormatted>
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8003c7c:	1cf9      	adds	r1, r7, #3
 8003c7e:	2301      	movs	r3, #1
 8003c80:	2201      	movs	r2, #1
 8003c82:	4814      	ldr	r0, [pc, #80]	@ (8003cd4 <flush_rx_buffer+0xb0>)
 8003c84:	f009 fc1f 	bl	800d4c6 <HAL_UART_Receive>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <flush_rx_buffer+0x70>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b63      	cmp	r3, #99	@ 0x63
 8003c92:	ddea      	ble.n	8003c6a <flush_rx_buffer+0x46>
    }
    
    if (flush_count > 0) {
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	dd05      	ble.n	8003ca6 <flush_rx_buffer+0x82>
        LOG_INFO("[UART_STM32] ✓ Flushed %d bytes from RX buffer", flush_count);
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4910      	ldr	r1, [pc, #64]	@ (8003ce0 <flush_rx_buffer+0xbc>)
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f7ff fe42 	bl	8003928 <LOGGER_SendFormatted>
 8003ca4:	e003      	b.n	8003cae <flush_rx_buffer+0x8a>
    } else {
        LOG_INFO("[UART_STM32] ✓ RX buffer was already empty");
 8003ca6:	490f      	ldr	r1, [pc, #60]	@ (8003ce4 <flush_rx_buffer+0xc0>)
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f7ff fe3d 	bl	8003928 <LOGGER_SendFormatted>
    }
    
    // 루프백 버퍼도 초기화
    loopback_count = 0;
 8003cae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce8 <flush_rx_buffer+0xc4>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
    loopback_data_available = false;
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <flush_rx_buffer+0xc8>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
    memset(loopback_buffer, 0, sizeof(loopback_buffer));
 8003cba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	480b      	ldr	r0, [pc, #44]	@ (8003cf0 <flush_rx_buffer+0xcc>)
 8003cc2:	f011 fcbf 	bl	8015644 <memset>
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	080175ac 	.word	0x080175ac
 8003cd4:	20000ca8 	.word	0x20000ca8
 8003cd8:	080175d0 	.word	0x080175d0
 8003cdc:	080175f8 	.word	0x080175f8
 8003ce0:	08017624 	.word	0x08017624
 8003ce4:	08017658 	.word	0x08017658
 8003ce8:	20000fd4 	.word	0x20000fd4
 8003cec:	20000fd8 	.word	0x20000fd8
 8003cf0:	20000ed4 	.word	0x20000ed4

08003cf4 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8003cfc:	4b10      	ldr	r3, [pc, #64]	@ (8003d40 <UART_Platform_Connect+0x4c>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
    data_received = false;
 8003d02:	4b10      	ldr	r3, [pc, #64]	@ (8003d44 <UART_Platform_Connect+0x50>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
    received_bytes = 0;
 8003d08:	4b0f      	ldr	r3, [pc, #60]	@ (8003d48 <UART_Platform_Connect+0x54>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8003d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d12:	2100      	movs	r1, #0
 8003d14:	480d      	ldr	r0, [pc, #52]	@ (8003d4c <UART_Platform_Connect+0x58>)
 8003d16:	f011 fc95 	bl	8015644 <memset>
    
    // 루프백 버퍼 초기화
    loopback_count = 0;
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <UART_Platform_Connect+0x5c>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
    loopback_data_available = false;
 8003d20:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <UART_Platform_Connect+0x60>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
    memset(loopback_buffer, 0, sizeof(loopback_buffer));
 8003d26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	480a      	ldr	r0, [pc, #40]	@ (8003d58 <UART_Platform_Connect+0x64>)
 8003d2e:	f011 fc89 	bl	8015644 <memset>
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8003d32:	f7ff ff77 	bl	8003c24 <flush_rx_buffer>
    
    return UART_STATUS_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000dca 	.word	0x20000dca
 8003d44:	20000ecc 	.word	0x20000ecc
 8003d48:	20000ed0 	.word	0x20000ed0
 8003d4c:	20000dcc 	.word	0x20000dcc
 8003d50:	20000fd4 	.word	0x20000fd4
 8003d54:	20000fd8 	.word	0x20000fd8
 8003d58:	20000ed4 	.word	0x20000ed4

08003d5c <UART_Platform_Send>:
    memset(loopback_buffer, 0, sizeof(loopback_buffer));
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b0cc      	sub	sp, #304	@ 0x130
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003d66:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003d6a:	6018      	str	r0, [r3, #0]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8003d6c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003d70:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <UART_Platform_Send+0x2c>
 8003d7a:	4bbb      	ldr	r3, [pc, #748]	@ (8004068 <UART_Platform_Send+0x30c>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	f083 0301 	eor.w	r3, r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <UART_Platform_Send+0x30>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e236      	b.n	80041fa <UART_Platform_Send+0x49e>
    
    int len = strlen(data);
 8003d8c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003d90:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	f7fc fa45 	bl	8000224 <strlen>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    if (len == 0) return UART_STATUS_OK;
 8003da0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <UART_Platform_Send+0x50>
 8003da8:	2300      	movs	r3, #0
 8003daa:	e226      	b.n	80041fa <UART_Platform_Send+0x49e>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8003dac:	f7ff ff3a 	bl	8003c24 <flush_rx_buffer>
    
    // 전송 데이터 로깅
    LOG_INFO("[UART_STM32] Sending %d bytes: '%s'", len, data);
 8003db0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003db4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003dbe:	49ab      	ldr	r1, [pc, #684]	@ (800406c <UART_Platform_Send+0x310>)
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f7ff fdb1 	bl	8003928 <LOGGER_SendFormatted>
    
    // 바이트별 hex 덤프
    LOG_INFO("[UART_STM32] Hex dump:");
 8003dc6:	49aa      	ldr	r1, [pc, #680]	@ (8004070 <UART_Platform_Send+0x314>)
 8003dc8:	2001      	movs	r0, #1
 8003dca:	f7ff fdad 	bl	8003928 <LOGGER_SendFormatted>
    for (int i = 0; i < len; i++) {
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003dd4:	e03d      	b.n	8003e52 <UART_Platform_Send+0xf6>
        uint8_t byte = (uint8_t)data[i];
 8003dd6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003dda:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8003dde:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	4413      	add	r3, r2
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
        char printable = (byte >= 32 && byte <= 126) ? byte : '.';
 8003dec:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8003df0:	2b1f      	cmp	r3, #31
 8003df2:	d906      	bls.n	8003e02 <UART_Platform_Send+0xa6>
 8003df4:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8003df8:	2b7e      	cmp	r3, #126	@ 0x7e
 8003dfa:	d802      	bhi.n	8003e02 <UART_Platform_Send+0xa6>
 8003dfc:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8003e00:	e000      	b.n	8003e04 <UART_Platform_Send+0xa8>
 8003e02:	232e      	movs	r3, #46	@ 0x2e
 8003e04:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
        LOG_INFO("  [%d] = 0x%02X ('%c') %s", i, byte, printable,
 8003e08:	f897 110d 	ldrb.w	r1, [r7, #269]	@ 0x10d
 8003e0c:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8003e10:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8003e14:	2b0d      	cmp	r3, #13
 8003e16:	d00d      	beq.n	8003e34 <UART_Platform_Send+0xd8>
 8003e18:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8003e1c:	2b0a      	cmp	r3, #10
 8003e1e:	d007      	beq.n	8003e30 <UART_Platform_Send+0xd4>
 8003e20:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d101      	bne.n	8003e2c <UART_Platform_Send+0xd0>
 8003e28:	4b92      	ldr	r3, [pc, #584]	@ (8004074 <UART_Platform_Send+0x318>)
 8003e2a:	e004      	b.n	8003e36 <UART_Platform_Send+0xda>
 8003e2c:	4b92      	ldr	r3, [pc, #584]	@ (8004078 <UART_Platform_Send+0x31c>)
 8003e2e:	e002      	b.n	8003e36 <UART_Platform_Send+0xda>
 8003e30:	4b92      	ldr	r3, [pc, #584]	@ (800407c <UART_Platform_Send+0x320>)
 8003e32:	e000      	b.n	8003e36 <UART_Platform_Send+0xda>
 8003e34:	4b92      	ldr	r3, [pc, #584]	@ (8004080 <UART_Platform_Send+0x324>)
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	9200      	str	r2, [sp, #0]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003e40:	4990      	ldr	r1, [pc, #576]	@ (8004084 <UART_Platform_Send+0x328>)
 8003e42:	2001      	movs	r0, #1
 8003e44:	f7ff fd70 	bl	8003928 <LOGGER_SendFormatted>
    for (int i = 0; i < len; i++) {
 8003e48:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003e52:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003e56:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	dbbb      	blt.n	8003dd6 <UART_Platform_Send+0x7a>
                (byte == 0x0A) ? "<LF>" : 
                (byte == 0x20) ? "<SPACE>" : "");
    }
    
    // 단순한 송신 (LoRa 모듈 전용)
    LOG_INFO("[UART_STM32] Starting LoRa module transmission...");
 8003e5e:	498a      	ldr	r1, [pc, #552]	@ (8004088 <UART_Platform_Send+0x32c>)
 8003e60:	2001      	movs	r0, #1
 8003e62:	f7ff fd61 	bl	8003928 <LOGGER_SendFormatted>
    
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8003e66:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003e70:	f5a3 7192 	sub.w	r1, r3, #292	@ 0x124
 8003e74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e78:	6809      	ldr	r1, [r1, #0]
 8003e7a:	4884      	ldr	r0, [pc, #528]	@ (800408c <UART_Platform_Send+0x330>)
 8003e7c:	f009 fa9a 	bl	800d3b4 <HAL_UART_Transmit>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    
    if (tx_status == HAL_OK) {
 8003e86:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 81ad 	bne.w	80041ea <UART_Platform_Send+0x48e>
        LOG_INFO("[UART_STM32] ✓ Transmission completed successfully");
 8003e90:	497f      	ldr	r1, [pc, #508]	@ (8004090 <UART_Platform_Send+0x334>)
 8003e92:	2001      	movs	r0, #1
 8003e94:	f7ff fd48 	bl	8003928 <LOGGER_SendFormatted>
        
        // LoRa 모듈 응답 대기 시간 (더 충분한 시간)
        LOG_INFO("[UART_STM32] Waiting for LoRa module to process command...");
 8003e98:	497e      	ldr	r1, [pc, #504]	@ (8004094 <UART_Platform_Send+0x338>)
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	f7ff fd44 	bl	8003928 <LOGGER_SendFormatted>
        HAL_Delay(200); // 200ms 대기 (LoRa 모듈 처리 시간)
 8003ea0:	20c8      	movs	r0, #200	@ 0xc8
 8003ea2:	f000 fc9d 	bl	80047e0 <HAL_Delay>
        
        // 응답 데이터 수집 시작
        LOG_INFO("[UART_STM32] Starting response collection...");
 8003ea6:	497c      	ldr	r1, [pc, #496]	@ (8004098 <UART_Platform_Send+0x33c>)
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	f7ff fd3d 	bl	8003928 <LOGGER_SendFormatted>
        uint8_t response_buffer[256];
        int response_count = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        
        // 적극적인 응답 수집 (10번 시도, 각 50ms 간격)
        for (int attempt = 1; attempt <= 10; attempt++) {
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003eba:	e0ad      	b.n	8004018 <UART_Platform_Send+0x2bc>
            LOG_DEBUG("[UART_STM32] Collection attempt %d/10", attempt);
 8003ebc:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003ec0:	4976      	ldr	r1, [pc, #472]	@ (800409c <UART_Platform_Send+0x340>)
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f7ff fd30 	bl	8003928 <LOGGER_SendFormatted>
            
            // 레지스터에서 가용한 모든 데이터 수집
            while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && response_count < 255) {
 8003ec8:	e040      	b.n	8003f4c <UART_Platform_Send+0x1f0>
                response_buffer[response_count] = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8003eca:	4b70      	ldr	r3, [pc, #448]	@ (800408c <UART_Platform_Send+0x330>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	b2d9      	uxtb	r1, r3
 8003ed2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003ed6:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8003eda:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ede:	4413      	add	r3, r2
 8003ee0:	460a      	mov	r2, r1
 8003ee2:	701a      	strb	r2, [r3, #0]
                LOG_DEBUG("[UART_STM32] Collected [%d]: 0x%02X ('%c')", 
 8003ee4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003ee8:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8003eec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ef0:	4413      	add	r3, r2
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003efa:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8003efe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f02:	4413      	add	r3, r2
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b1f      	cmp	r3, #31
 8003f08:	d912      	bls.n	8003f30 <UART_Platform_Send+0x1d4>
 8003f0a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003f0e:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8003f12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f16:	4413      	add	r3, r2
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b7e      	cmp	r3, #126	@ 0x7e
 8003f1c:	d808      	bhi.n	8003f30 <UART_Platform_Send+0x1d4>
 8003f1e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003f22:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8003f26:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f2a:	4413      	add	r3, r2
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	e000      	b.n	8003f32 <UART_Platform_Send+0x1d6>
 8003f30:	232e      	movs	r3, #46	@ 0x2e
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	460b      	mov	r3, r1
 8003f36:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8003f3a:	4959      	ldr	r1, [pc, #356]	@ (80040a0 <UART_Platform_Send+0x344>)
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f7ff fcf3 	bl	8003928 <LOGGER_SendFormatted>
                         response_count, response_buffer[response_count],
                         (response_buffer[response_count] >= 32 && response_buffer[response_count] <= 126) ? response_buffer[response_count] : '.');
                response_count++;
 8003f42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f46:	3301      	adds	r3, #1
 8003f48:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && response_count < 255) {
 8003f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800408c <UART_Platform_Send+0x330>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d12b      	bne.n	8003fb2 <UART_Platform_Send+0x256>
 8003f5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f5e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003f60:	ddb3      	ble.n	8003eca <UART_Platform_Send+0x16e>
            }
            
            // HAL 함수로도 추가 수집
            uint8_t hal_byte;
            while (HAL_UART_Receive(&huart6, &hal_byte, 1, 5) == HAL_OK && response_count < 255) {
 8003f62:	e026      	b.n	8003fb2 <UART_Platform_Send+0x256>
                response_buffer[response_count] = hal_byte;
 8003f64:	f897 110b 	ldrb.w	r1, [r7, #267]	@ 0x10b
 8003f68:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003f6c:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8003f70:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f74:	4413      	add	r3, r2
 8003f76:	460a      	mov	r2, r1
 8003f78:	701a      	strb	r2, [r3, #0]
                LOG_DEBUG("[UART_STM32] HAL collected [%d]: 0x%02X ('%c')", 
 8003f7a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003f84:	2b1f      	cmp	r3, #31
 8003f86:	d906      	bls.n	8003f96 <UART_Platform_Send+0x23a>
 8003f88:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003f8c:	2b7e      	cmp	r3, #126	@ 0x7e
 8003f8e:	d802      	bhi.n	8003f96 <UART_Platform_Send+0x23a>
 8003f90:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003f94:	e000      	b.n	8003f98 <UART_Platform_Send+0x23c>
 8003f96:	232e      	movs	r3, #46	@ 0x2e
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8003fa0:	4940      	ldr	r1, [pc, #256]	@ (80040a4 <UART_Platform_Send+0x348>)
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	f7ff fcc0 	bl	8003928 <LOGGER_SendFormatted>
                         response_count, hal_byte,
                         (hal_byte >= 32 && hal_byte <= 126) ? hal_byte : '.');
                response_count++;
 8003fa8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003fac:	3301      	adds	r3, #1
 8003fae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            while (HAL_UART_Receive(&huart6, &hal_byte, 1, 5) == HAL_OK && response_count < 255) {
 8003fb2:	f207 110b 	addw	r1, r7, #267	@ 0x10b
 8003fb6:	2305      	movs	r3, #5
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4834      	ldr	r0, [pc, #208]	@ (800408c <UART_Platform_Send+0x330>)
 8003fbc:	f009 fa83 	bl	800d4c6 <HAL_UART_Receive>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <UART_Platform_Send+0x272>
 8003fc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003fca:	2bfe      	cmp	r3, #254	@ 0xfe
 8003fcc:	ddca      	ble.n	8003f64 <UART_Platform_Send+0x208>
            }
            
            // Overrun 에러 체크 및 클리어
            if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_ORE)) {
 8003fce:	4b2f      	ldr	r3, [pc, #188]	@ (800408c <UART_Platform_Send+0x330>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d107      	bne.n	8003fec <UART_Platform_Send+0x290>
                LOG_WARN("[UART_STM32] ⚠ Overrun error detected during collection - clearing");
 8003fdc:	4932      	ldr	r1, [pc, #200]	@ (80040a8 <UART_Platform_Send+0x34c>)
 8003fde:	2002      	movs	r0, #2
 8003fe0:	f7ff fca2 	bl	8003928 <LOGGER_SendFormatted>
                __HAL_UART_CLEAR_OREFLAG(&huart6);
 8003fe4:	4b29      	ldr	r3, [pc, #164]	@ (800408c <UART_Platform_Send+0x330>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2208      	movs	r2, #8
 8003fea:	621a      	str	r2, [r3, #32]
            }
            
            // 데이터를 받았으면 조금 더 기다려서 연속 데이터 확인
            if (response_count > 0) {
 8003fec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	dd09      	ble.n	8004008 <UART_Platform_Send+0x2ac>
                LOG_DEBUG("[UART_STM32] Got %d bytes, checking for more data...", response_count);
 8003ff4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8003ff8:	492c      	ldr	r1, [pc, #176]	@ (80040ac <UART_Platform_Send+0x350>)
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	f7ff fc94 	bl	8003928 <LOGGER_SendFormatted>
                HAL_Delay(20); // 20ms 더 대기
 8004000:	2014      	movs	r0, #20
 8004002:	f000 fbed 	bl	80047e0 <HAL_Delay>
 8004006:	e002      	b.n	800400e <UART_Platform_Send+0x2b2>
            } else {
                HAL_Delay(50); // 50ms 대기 후 재시도
 8004008:	2032      	movs	r0, #50	@ 0x32
 800400a:	f000 fbe9 	bl	80047e0 <HAL_Delay>
        for (int attempt = 1; attempt <= 10; attempt++) {
 800400e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004012:	3301      	adds	r3, #1
 8004014:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004018:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800401c:	2b0a      	cmp	r3, #10
 800401e:	f77f af4d 	ble.w	8003ebc <UART_Platform_Send+0x160>
            }
        }
        
        if (response_count > 0) {
 8004022:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004026:	2b00      	cmp	r3, #0
 8004028:	f340 80d9 	ble.w	80041de <UART_Platform_Send+0x482>
            LOG_INFO("[UART_STM32] ✓ Collected %d response bytes from LoRa module", response_count);
 800402c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004030:	491f      	ldr	r1, [pc, #124]	@ (80040b0 <UART_Platform_Send+0x354>)
 8004032:	2001      	movs	r0, #1
 8004034:	f7ff fc78 	bl	8003928 <LOGGER_SendFormatted>
            
            // 루프백 버퍼에 저장
            if (response_count < sizeof(loopback_buffer)) {
 8004038:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800403c:	2bff      	cmp	r3, #255	@ 0xff
 800403e:	d841      	bhi.n	80040c4 <UART_Platform_Send+0x368>
                memcpy(loopback_buffer, response_buffer, response_count);
 8004040:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004044:	f107 0308 	add.w	r3, r7, #8
 8004048:	4619      	mov	r1, r3
 800404a:	481a      	ldr	r0, [pc, #104]	@ (80040b4 <UART_Platform_Send+0x358>)
 800404c:	f011 fb7a 	bl	8015744 <memcpy>
                loopback_count = response_count;
 8004050:	4a19      	ldr	r2, [pc, #100]	@ (80040b8 <UART_Platform_Send+0x35c>)
 8004052:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004056:	6013      	str	r3, [r2, #0]
                loopback_data_available = true;
 8004058:	4b18      	ldr	r3, [pc, #96]	@ (80040bc <UART_Platform_Send+0x360>)
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
                LOG_INFO("[UART_STM32] ✓ Response data saved to buffer");
 800405e:	4918      	ldr	r1, [pc, #96]	@ (80040c0 <UART_Platform_Send+0x364>)
 8004060:	2001      	movs	r0, #1
 8004062:	f7ff fc61 	bl	8003928 <LOGGER_SendFormatted>
 8004066:	e044      	b.n	80040f2 <UART_Platform_Send+0x396>
 8004068:	20000dca 	.word	0x20000dca
 800406c:	08017688 	.word	0x08017688
 8004070:	080176ac 	.word	0x080176ac
 8004074:	080176c4 	.word	0x080176c4
 8004078:	080176cc 	.word	0x080176cc
 800407c:	080176d0 	.word	0x080176d0
 8004080:	080176d8 	.word	0x080176d8
 8004084:	080176e0 	.word	0x080176e0
 8004088:	080176fc 	.word	0x080176fc
 800408c:	20000ca8 	.word	0x20000ca8
 8004090:	08017730 	.word	0x08017730
 8004094:	08017768 	.word	0x08017768
 8004098:	080177a4 	.word	0x080177a4
 800409c:	080177d4 	.word	0x080177d4
 80040a0:	080177fc 	.word	0x080177fc
 80040a4:	08017828 	.word	0x08017828
 80040a8:	08017858 	.word	0x08017858
 80040ac:	080178a0 	.word	0x080178a0
 80040b0:	080178d8 	.word	0x080178d8
 80040b4:	20000ed4 	.word	0x20000ed4
 80040b8:	20000fd4 	.word	0x20000fd4
 80040bc:	20000fd8 	.word	0x20000fd8
 80040c0:	08017918 	.word	0x08017918
            } else {
                LOG_WARN("[UART_STM32] ⚠ Response data too large, truncating");
 80040c4:	494f      	ldr	r1, [pc, #316]	@ (8004204 <UART_Platform_Send+0x4a8>)
 80040c6:	2002      	movs	r0, #2
 80040c8:	f7ff fc2e 	bl	8003928 <LOGGER_SendFormatted>
                memcpy(loopback_buffer, response_buffer, sizeof(loopback_buffer));
 80040cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004208 <UART_Platform_Send+0x4ac>)
 80040ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80040d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040de:	461a      	mov	r2, r3
 80040e0:	f011 fb30 	bl	8015744 <memcpy>
                loopback_count = sizeof(loopback_buffer);
 80040e4:	4b49      	ldr	r3, [pc, #292]	@ (800420c <UART_Platform_Send+0x4b0>)
 80040e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040ea:	601a      	str	r2, [r3, #0]
                loopback_data_available = true;
 80040ec:	4b48      	ldr	r3, [pc, #288]	@ (8004210 <UART_Platform_Send+0x4b4>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
            }
            
            // 수집된 응답 데이터 로깅
            LOG_INFO("[UART_STM32] LoRa response preview:");
 80040f2:	4948      	ldr	r1, [pc, #288]	@ (8004214 <UART_Platform_Send+0x4b8>)
 80040f4:	2001      	movs	r0, #1
 80040f6:	f7ff fc17 	bl	8003928 <LOGGER_SendFormatted>
            for (int i = 0; i < response_count; i++) {
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004100:	e066      	b.n	80041d0 <UART_Platform_Send+0x474>
                char printable = (response_buffer[i] >= 32 && response_buffer[i] <= 126) ? response_buffer[i] : '.';
 8004102:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004106:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800410a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800410e:	4413      	add	r3, r2
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b1f      	cmp	r3, #31
 8004114:	d912      	bls.n	800413c <UART_Platform_Send+0x3e0>
 8004116:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800411a:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800411e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004122:	4413      	add	r3, r2
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b7e      	cmp	r3, #126	@ 0x7e
 8004128:	d808      	bhi.n	800413c <UART_Platform_Send+0x3e0>
 800412a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800412e:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8004132:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004136:	4413      	add	r3, r2
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	e000      	b.n	800413e <UART_Platform_Send+0x3e2>
 800413c:	232e      	movs	r3, #46	@ 0x2e
 800413e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
                const char* special = "";
 8004142:	4b35      	ldr	r3, [pc, #212]	@ (8004218 <UART_Platform_Send+0x4bc>)
 8004144:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                if (response_buffer[i] == 0x0D) special = " <CR>";
 8004148:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800414c:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8004150:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004154:	4413      	add	r3, r2
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b0d      	cmp	r3, #13
 800415a:	d103      	bne.n	8004164 <UART_Platform_Send+0x408>
 800415c:	4b2f      	ldr	r3, [pc, #188]	@ (800421c <UART_Platform_Send+0x4c0>)
 800415e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004162:	e01a      	b.n	800419a <UART_Platform_Send+0x43e>
                else if (response_buffer[i] == 0x0A) special = " <LF>";
 8004164:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004168:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800416c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004170:	4413      	add	r3, r2
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b0a      	cmp	r3, #10
 8004176:	d103      	bne.n	8004180 <UART_Platform_Send+0x424>
 8004178:	4b29      	ldr	r3, [pc, #164]	@ (8004220 <UART_Platform_Send+0x4c4>)
 800417a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800417e:	e00c      	b.n	800419a <UART_Platform_Send+0x43e>
                else if (response_buffer[i] == 0x20) special = " <SPACE>";
 8004180:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004184:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8004188:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800418c:	4413      	add	r3, r2
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b20      	cmp	r3, #32
 8004192:	d102      	bne.n	800419a <UART_Platform_Send+0x43e>
 8004194:	4b23      	ldr	r3, [pc, #140]	@ (8004224 <UART_Platform_Send+0x4c8>)
 8004196:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                
                LOG_INFO("[UART_STM32]   [%d] = 0x%02X ('%c')%s", i, response_buffer[i], printable, special);
 800419a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800419e:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80041a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80041a6:	4413      	add	r3, r2
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	4619      	mov	r1, r3
 80041ac:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80041b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80041b4:	9201      	str	r2, [sp, #4]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	460b      	mov	r3, r1
 80041ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80041be:	491a      	ldr	r1, [pc, #104]	@ (8004228 <UART_Platform_Send+0x4cc>)
 80041c0:	2001      	movs	r0, #1
 80041c2:	f7ff fbb1 	bl	8003928 <LOGGER_SendFormatted>
            for (int i = 0; i < response_count; i++) {
 80041c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80041ca:	3301      	adds	r3, #1
 80041cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80041d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80041d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041d8:	429a      	cmp	r2, r3
 80041da:	db92      	blt.n	8004102 <UART_Platform_Send+0x3a6>
 80041dc:	e003      	b.n	80041e6 <UART_Platform_Send+0x48a>
            }
        } else {
            LOG_WARN("[UART_STM32] ⚠ No response data collected from LoRa module");
 80041de:	4913      	ldr	r1, [pc, #76]	@ (800422c <UART_Platform_Send+0x4d0>)
 80041e0:	2002      	movs	r0, #2
 80041e2:	f7ff fba1 	bl	8003928 <LOGGER_SendFormatted>
        }
        
        return UART_STATUS_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e007      	b.n	80041fa <UART_Platform_Send+0x49e>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 80041ea:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80041ee:	461a      	mov	r2, r3
 80041f0:	490f      	ldr	r1, [pc, #60]	@ (8004230 <UART_Platform_Send+0x4d4>)
 80041f2:	2003      	movs	r0, #3
 80041f4:	f7ff fb98 	bl	8003928 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80041f8:	2301      	movs	r3, #1
    }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	08017948 	.word	0x08017948
 8004208:	20000ed4 	.word	0x20000ed4
 800420c:	20000fd4 	.word	0x20000fd4
 8004210:	20000fd8 	.word	0x20000fd8
 8004214:	08017980 	.word	0x08017980
 8004218:	080176cc 	.word	0x080176cc
 800421c:	080179a4 	.word	0x080179a4
 8004220:	080179ac 	.word	0x080179ac
 8004224:	080179b4 	.word	0x080179b4
 8004228:	080179c0 	.word	0x080179c0
 800422c:	080179e8 	.word	0x080179e8
 8004230:	08017a28 	.word	0x08017a28

08004234 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b09c      	sub	sp, #112	@ 0x70
 8004238:	af04      	add	r7, sp, #16
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <UART_Platform_Receive+0x26>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d006      	beq.n	800425a <UART_Platform_Receive+0x26>
 800424c:	4b9c      	ldr	r3, [pc, #624]	@ (80044c0 <UART_Platform_Receive+0x28c>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	f083 0301 	eor.w	r3, r3, #1
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e24c      	b.n	80046f8 <UART_Platform_Receive+0x4c4>
    }
    
    if (buffer_size <= 0) {
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	dc04      	bgt.n	800426e <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e244      	b.n	80046f8 <UART_Platform_Receive+0x4c4>
    }
    
    *bytes_received = 0;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
    
    LOG_INFO("[UART_STM32] === Starting IMPROVED receive ===");
 8004274:	4993      	ldr	r1, [pc, #588]	@ (80044c4 <UART_Platform_Receive+0x290>)
 8004276:	2001      	movs	r0, #1
 8004278:	f7ff fb56 	bl	8003928 <LOGGER_SendFormatted>
    
    // 1단계: 루프백 버퍼에 데이터가 있는지 확인
    if (loopback_data_available) {
 800427c:	4b92      	ldr	r3, [pc, #584]	@ (80044c8 <UART_Platform_Receive+0x294>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d066      	beq.n	8004352 <UART_Platform_Receive+0x11e>
        LOG_INFO("[UART_STM32] ✓ Using loopback buffer data (%d bytes)", loopback_count);
 8004284:	4b91      	ldr	r3, [pc, #580]	@ (80044cc <UART_Platform_Receive+0x298>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	4991      	ldr	r1, [pc, #580]	@ (80044d0 <UART_Platform_Receive+0x29c>)
 800428c:	2001      	movs	r0, #1
 800428e:	f7ff fb4b 	bl	8003928 <LOGGER_SendFormatted>
        
        // 루프백 버퍼에서 데이터 복사
        int copy_count = (loopback_count < buffer_size - 1) ? loopback_count : buffer_size - 1;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	1e5a      	subs	r2, r3, #1
 8004296:	4b8d      	ldr	r3, [pc, #564]	@ (80044cc <UART_Platform_Receive+0x298>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4293      	cmp	r3, r2
 800429c:	bfa8      	it	ge
 800429e:	4613      	movge	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]
        memcpy(buffer, loopback_buffer, copy_count);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	461a      	mov	r2, r3
 80042a6:	498b      	ldr	r1, [pc, #556]	@ (80044d4 <UART_Platform_Receive+0x2a0>)
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f011 fa4b 	bl	8015744 <memcpy>
        *bytes_received = copy_count;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	601a      	str	r2, [r3, #0]
        buffer[*bytes_received] = '\0';
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
        
        // 루프백 데이터 로깅
        LOG_INFO("[UART_STM32] Loopback data returned:");
 80042c2:	4985      	ldr	r1, [pc, #532]	@ (80044d8 <UART_Platform_Receive+0x2a4>)
 80042c4:	2001      	movs	r0, #1
 80042c6:	f7ff fb2f 	bl	8003928 <LOGGER_SendFormatted>
        for (int i = 0; i < *bytes_received; i++) {
 80042ca:	2300      	movs	r3, #0
 80042cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042ce:	e02f      	b.n	8004330 <UART_Platform_Receive+0xfc>
            uint8_t byte = (uint8_t)buffer[i];
 80042d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	74fb      	strb	r3, [r7, #19]
            char printable = (byte >= 32 && byte <= 126) ? byte : '.';
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	2b1f      	cmp	r3, #31
 80042de:	d904      	bls.n	80042ea <UART_Platform_Receive+0xb6>
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80042e4:	d801      	bhi.n	80042ea <UART_Platform_Receive+0xb6>
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	e000      	b.n	80042ec <UART_Platform_Receive+0xb8>
 80042ea:	232e      	movs	r3, #46	@ 0x2e
 80042ec:	74bb      	strb	r3, [r7, #18]
            const char* special = "";
 80042ee:	4b7b      	ldr	r3, [pc, #492]	@ (80044dc <UART_Platform_Receive+0x2a8>)
 80042f0:	65bb      	str	r3, [r7, #88]	@ 0x58
            if (byte == 0x0D) special = " <CR>";
 80042f2:	7cfb      	ldrb	r3, [r7, #19]
 80042f4:	2b0d      	cmp	r3, #13
 80042f6:	d102      	bne.n	80042fe <UART_Platform_Receive+0xca>
 80042f8:	4b79      	ldr	r3, [pc, #484]	@ (80044e0 <UART_Platform_Receive+0x2ac>)
 80042fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042fc:	e00a      	b.n	8004314 <UART_Platform_Receive+0xe0>
            else if (byte == 0x0A) special = " <LF>";
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	2b0a      	cmp	r3, #10
 8004302:	d102      	bne.n	800430a <UART_Platform_Receive+0xd6>
 8004304:	4b77      	ldr	r3, [pc, #476]	@ (80044e4 <UART_Platform_Receive+0x2b0>)
 8004306:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004308:	e004      	b.n	8004314 <UART_Platform_Receive+0xe0>
            else if (byte == 0x20) special = " <SPACE>";
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	2b20      	cmp	r3, #32
 800430e:	d101      	bne.n	8004314 <UART_Platform_Receive+0xe0>
 8004310:	4b75      	ldr	r3, [pc, #468]	@ (80044e8 <UART_Platform_Receive+0x2b4>)
 8004312:	65bb      	str	r3, [r7, #88]	@ 0x58
            
            LOG_INFO("[UART_STM32]   [%d] = 0x%02X ('%c')%s", i, byte, printable, special);
 8004314:	7cf9      	ldrb	r1, [r7, #19]
 8004316:	7cbb      	ldrb	r3, [r7, #18]
 8004318:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800431a:	9201      	str	r2, [sp, #4]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	460b      	mov	r3, r1
 8004320:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004322:	4972      	ldr	r1, [pc, #456]	@ (80044ec <UART_Platform_Receive+0x2b8>)
 8004324:	2001      	movs	r0, #1
 8004326:	f7ff faff 	bl	8003928 <LOGGER_SendFormatted>
        for (int i = 0; i < *bytes_received; i++) {
 800432a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800432c:	3301      	adds	r3, #1
 800432e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004336:	429a      	cmp	r2, r3
 8004338:	dbca      	blt.n	80042d0 <UART_Platform_Receive+0x9c>
        }
        
        // 루프백 버퍼 클리어
        loopback_data_available = false;
 800433a:	4b63      	ldr	r3, [pc, #396]	@ (80044c8 <UART_Platform_Receive+0x294>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
        loopback_count = 0;
 8004340:	4b62      	ldr	r3, [pc, #392]	@ (80044cc <UART_Platform_Receive+0x298>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
        
        LOG_INFO("[UART_STM32] === IMPROVED receive COMPLETE (from loopback) ===");
 8004346:	496a      	ldr	r1, [pc, #424]	@ (80044f0 <UART_Platform_Receive+0x2bc>)
 8004348:	2001      	movs	r0, #1
 800434a:	f7ff faed 	bl	8003928 <LOGGER_SendFormatted>
        return UART_STATUS_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	e1d2      	b.n	80046f8 <UART_Platform_Receive+0x4c4>
    }
    
    // 2단계: 실시간 수신 로직
    LOG_INFO("[UART_STM32] No loopback data, checking real-time reception");
 8004352:	4968      	ldr	r1, [pc, #416]	@ (80044f4 <UART_Platform_Receive+0x2c0>)
 8004354:	2001      	movs	r0, #1
 8004356:	f7ff fae7 	bl	8003928 <LOGGER_SendFormatted>
    
    // 수신 시작 전 상태 확인
    LOG_INFO("[UART_STM32] Pre-receive status:");
 800435a:	4967      	ldr	r1, [pc, #412]	@ (80044f8 <UART_Platform_Receive+0x2c4>)
 800435c:	2001      	movs	r0, #1
 800435e:	f7ff fae3 	bl	8003928 <LOGGER_SendFormatted>
    bool rxne_flag = __HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE);
 8004362:	4b66      	ldr	r3, [pc, #408]	@ (80044fc <UART_Platform_Receive+0x2c8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b20      	cmp	r3, #32
 800436e:	bf0c      	ite	eq
 8004370:	2301      	moveq	r3, #1
 8004372:	2300      	movne	r3, #0
 8004374:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bool ore_flag = __HAL_UART_GET_FLAG(&huart6, UART_FLAG_ORE);
 8004378:	4b60      	ldr	r3, [pc, #384]	@ (80044fc <UART_Platform_Receive+0x2c8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b08      	cmp	r3, #8
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    LOG_INFO("[UART_STM32]   RXNE flag: %s", rxne_flag ? "SET" : "CLEAR");
 800438e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <UART_Platform_Receive+0x166>
 8004396:	4b5a      	ldr	r3, [pc, #360]	@ (8004500 <UART_Platform_Receive+0x2cc>)
 8004398:	e000      	b.n	800439c <UART_Platform_Receive+0x168>
 800439a:	4b5a      	ldr	r3, [pc, #360]	@ (8004504 <UART_Platform_Receive+0x2d0>)
 800439c:	461a      	mov	r2, r3
 800439e:	495a      	ldr	r1, [pc, #360]	@ (8004508 <UART_Platform_Receive+0x2d4>)
 80043a0:	2001      	movs	r0, #1
 80043a2:	f7ff fac1 	bl	8003928 <LOGGER_SendFormatted>
    LOG_INFO("[UART_STM32]   ORE flag: %s", ore_flag ? "SET" : "CLEAR");
 80043a6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <UART_Platform_Receive+0x17e>
 80043ae:	4b54      	ldr	r3, [pc, #336]	@ (8004500 <UART_Platform_Receive+0x2cc>)
 80043b0:	e000      	b.n	80043b4 <UART_Platform_Receive+0x180>
 80043b2:	4b54      	ldr	r3, [pc, #336]	@ (8004504 <UART_Platform_Receive+0x2d0>)
 80043b4:	461a      	mov	r2, r3
 80043b6:	4955      	ldr	r1, [pc, #340]	@ (800450c <UART_Platform_Receive+0x2d8>)
 80043b8:	2001      	movs	r0, #1
 80043ba:	f7ff fab5 	bl	8003928 <LOGGER_SendFormatted>
    
    if (ore_flag) {
 80043be:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <UART_Platform_Receive+0x1a2>
        LOG_WARN("[UART_STM32] ⚠ Overrun error detected - clearing");
 80043c6:	4952      	ldr	r1, [pc, #328]	@ (8004510 <UART_Platform_Receive+0x2dc>)
 80043c8:	2002      	movs	r0, #2
 80043ca:	f7ff faad 	bl	8003928 <LOGGER_SendFormatted>
        __HAL_UART_CLEAR_OREFLAG(&huart6);
 80043ce:	4b4b      	ldr	r3, [pc, #300]	@ (80044fc <UART_Platform_Receive+0x2c8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2208      	movs	r2, #8
 80043d4:	621a      	str	r2, [r3, #32]
    }
    
    // 개선된 수신 로직: 먼저 모든 가용 데이터를 빠르게 수집
    uint32_t start_time = HAL_GetTick();
 80043d6:	f000 f9f7 	bl	80047c8 <HAL_GetTick>
 80043da:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint32_t timeout_total = 2000; // 2초 전체 타임아웃
 80043dc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80043e0:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t inter_byte_timeout = 100; // 바이트 간 타임아웃 100ms로 단축
 80043e2:	2364      	movs	r3, #100	@ 0x64
 80043e4:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t last_byte_time = start_time;
 80043e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e8:	657b      	str	r3, [r7, #84]	@ 0x54
    
    LOG_INFO("[UART_STM32] Starting data collection with timeouts:");
 80043ea:	494a      	ldr	r1, [pc, #296]	@ (8004514 <UART_Platform_Receive+0x2e0>)
 80043ec:	2001      	movs	r0, #1
 80043ee:	f7ff fa9b 	bl	8003928 <LOGGER_SendFormatted>
    LOG_INFO("[UART_STM32]   Total timeout: %lu ms", timeout_total);
 80043f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043f4:	4948      	ldr	r1, [pc, #288]	@ (8004518 <UART_Platform_Receive+0x2e4>)
 80043f6:	2001      	movs	r0, #1
 80043f8:	f7ff fa96 	bl	8003928 <LOGGER_SendFormatted>
    LOG_INFO("[UART_STM32]   Inter-byte timeout: %lu ms", inter_byte_timeout);
 80043fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043fe:	4947      	ldr	r1, [pc, #284]	@ (800451c <UART_Platform_Receive+0x2e8>)
 8004400:	2001      	movs	r0, #1
 8004402:	f7ff fa91 	bl	8003928 <LOGGER_SendFormatted>
    
    while (*bytes_received < buffer_size - 1) {
 8004406:	e116      	b.n	8004636 <UART_Platform_Receive+0x402>
        uint32_t current_time = HAL_GetTick();
 8004408:	f000 f9de 	bl	80047c8 <HAL_GetTick>
 800440c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        uint32_t elapsed_total = current_time - start_time;
 800440e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint32_t elapsed_since_last = current_time - last_byte_time;
 8004416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
        
        // 전체 타임아웃 체크
        if (elapsed_total > timeout_total) {
 800441e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004422:	429a      	cmp	r2, r3
 8004424:	d905      	bls.n	8004432 <UART_Platform_Receive+0x1fe>
            LOG_INFO("[UART_STM32] Total timeout (%lu ms) reached", elapsed_total);
 8004426:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004428:	493d      	ldr	r1, [pc, #244]	@ (8004520 <UART_Platform_Receive+0x2ec>)
 800442a:	2001      	movs	r0, #1
 800442c:	f7ff fa7c 	bl	8003928 <LOGGER_SendFormatted>
            break;
 8004430:	e108      	b.n	8004644 <UART_Platform_Receive+0x410>
        }
        
        // 바이트 간 타임아웃 체크 (첫 번째 바이트가 없으면 더 오래 기다림)
        uint32_t current_inter_byte_timeout = (*bytes_received == 0) ? 1000 : inter_byte_timeout;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <UART_Platform_Receive+0x20a>
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	e001      	b.n	8004442 <UART_Platform_Receive+0x20e>
 800443e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004442:	623b      	str	r3, [r7, #32]
        if (elapsed_since_last > current_inter_byte_timeout) {
 8004444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	429a      	cmp	r2, r3
 800444a:	d907      	bls.n	800445c <UART_Platform_Receive+0x228>
            LOG_INFO("[UART_STM32] Inter-byte timeout (%lu ms) after %d bytes", 
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	4934      	ldr	r1, [pc, #208]	@ (8004524 <UART_Platform_Receive+0x2f0>)
 8004454:	2001      	movs	r0, #1
 8004456:	f7ff fa67 	bl	8003928 <LOGGER_SendFormatted>
                    current_inter_byte_timeout, *bytes_received);
            break;
 800445a:	e0f3      	b.n	8004644 <UART_Platform_Receive+0x410>
        }
        
        bool data_received_this_loop = false;
 800445c:	2300      	movs	r3, #0
 800445e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        
        // 방법 1: 직접 레지스터 체크 (가장 빠름)
        if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)) {
 8004462:	4b26      	ldr	r3, [pc, #152]	@ (80044fc <UART_Platform_Receive+0x2c8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b20      	cmp	r3, #32
 800446e:	d17e      	bne.n	800456e <UART_Platform_Receive+0x33a>
            uint8_t received_byte = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8004470:	4b22      	ldr	r3, [pc, #136]	@ (80044fc <UART_Platform_Receive+0x2c8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	77fb      	strb	r3, [r7, #31]
            buffer[*bytes_received] = received_byte;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	7ffa      	ldrb	r2, [r7, #31]
 8004484:	701a      	strb	r2, [r3, #0]
            (*bytes_received)++;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	601a      	str	r2, [r3, #0]
            data_received_this_loop = true;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            last_byte_time = current_time;
 8004496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004498:	657b      	str	r3, [r7, #84]	@ 0x54
            
            char printable = (received_byte >= 32 && received_byte <= 126) ? received_byte : '.';
 800449a:	7ffb      	ldrb	r3, [r7, #31]
 800449c:	2b1f      	cmp	r3, #31
 800449e:	d904      	bls.n	80044aa <UART_Platform_Receive+0x276>
 80044a0:	7ffb      	ldrb	r3, [r7, #31]
 80044a2:	2b7e      	cmp	r3, #126	@ 0x7e
 80044a4:	d801      	bhi.n	80044aa <UART_Platform_Receive+0x276>
 80044a6:	7ffb      	ldrb	r3, [r7, #31]
 80044a8:	e000      	b.n	80044ac <UART_Platform_Receive+0x278>
 80044aa:	232e      	movs	r3, #46	@ 0x2e
 80044ac:	77bb      	strb	r3, [r7, #30]
            const char* special = "";
 80044ae:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <UART_Platform_Receive+0x2a8>)
 80044b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if (received_byte == 0x0D) special = " <CR>";
 80044b2:	7ffb      	ldrb	r3, [r7, #31]
 80044b4:	2b0d      	cmp	r3, #13
 80044b6:	d137      	bne.n	8004528 <UART_Platform_Receive+0x2f4>
 80044b8:	4b09      	ldr	r3, [pc, #36]	@ (80044e0 <UART_Platform_Receive+0x2ac>)
 80044ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044bc:	e03f      	b.n	800453e <UART_Platform_Receive+0x30a>
 80044be:	bf00      	nop
 80044c0:	20000dca 	.word	0x20000dca
 80044c4:	08017a60 	.word	0x08017a60
 80044c8:	20000fd8 	.word	0x20000fd8
 80044cc:	20000fd4 	.word	0x20000fd4
 80044d0:	08017a90 	.word	0x08017a90
 80044d4:	20000ed4 	.word	0x20000ed4
 80044d8:	08017ac8 	.word	0x08017ac8
 80044dc:	080176cc 	.word	0x080176cc
 80044e0:	080179a4 	.word	0x080179a4
 80044e4:	080179ac 	.word	0x080179ac
 80044e8:	080179b4 	.word	0x080179b4
 80044ec:	080179c0 	.word	0x080179c0
 80044f0:	08017af0 	.word	0x08017af0
 80044f4:	08017b30 	.word	0x08017b30
 80044f8:	08017b6c 	.word	0x08017b6c
 80044fc:	20000ca8 	.word	0x20000ca8
 8004500:	08017b90 	.word	0x08017b90
 8004504:	08017b94 	.word	0x08017b94
 8004508:	08017b9c 	.word	0x08017b9c
 800450c:	08017bbc 	.word	0x08017bbc
 8004510:	08017bd8 	.word	0x08017bd8
 8004514:	08017c0c 	.word	0x08017c0c
 8004518:	08017c44 	.word	0x08017c44
 800451c:	08017c6c 	.word	0x08017c6c
 8004520:	08017c98 	.word	0x08017c98
 8004524:	08017cc4 	.word	0x08017cc4
            else if (received_byte == 0x0A) special = " <LF>";
 8004528:	7ffb      	ldrb	r3, [r7, #31]
 800452a:	2b0a      	cmp	r3, #10
 800452c:	d102      	bne.n	8004534 <UART_Platform_Receive+0x300>
 800452e:	4b74      	ldr	r3, [pc, #464]	@ (8004700 <UART_Platform_Receive+0x4cc>)
 8004530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004532:	e004      	b.n	800453e <UART_Platform_Receive+0x30a>
            else if (received_byte == 0x20) special = " <SPACE>";
 8004534:	7ffb      	ldrb	r3, [r7, #31]
 8004536:	2b20      	cmp	r3, #32
 8004538:	d101      	bne.n	800453e <UART_Platform_Receive+0x30a>
 800453a:	4b72      	ldr	r3, [pc, #456]	@ (8004704 <UART_Platform_Receive+0x4d0>)
 800453c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            
            LOG_INFO("[UART_STM32] ✓ Register read [%d]: 0x%02X ('%c')%s (elapsed: %lu ms)", 
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	1e59      	subs	r1, r3, #1
 8004544:	7ff8      	ldrb	r0, [r7, #31]
 8004546:	7fbb      	ldrb	r3, [r7, #30]
 8004548:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800454a:	9202      	str	r2, [sp, #8]
 800454c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800454e:	9201      	str	r2, [sp, #4]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	4603      	mov	r3, r0
 8004554:	460a      	mov	r2, r1
 8004556:	496c      	ldr	r1, [pc, #432]	@ (8004708 <UART_Platform_Receive+0x4d4>)
 8004558:	2001      	movs	r0, #1
 800455a:	f7ff f9e5 	bl	8003928 <LOGGER_SendFormatted>
                    *bytes_received - 1, received_byte, printable, special, elapsed_total);
            
            // 완전한 응답 확인 (LF 또는 특정 패턴)
            if (received_byte == '\n') {
 800455e:	7ffb      	ldrb	r3, [r7, #31]
 8004560:	2b0a      	cmp	r3, #10
 8004562:	d104      	bne.n	800456e <UART_Platform_Receive+0x33a>
                LOG_INFO("[UART_STM32] Found LF - complete response received");
 8004564:	4969      	ldr	r1, [pc, #420]	@ (800470c <UART_Platform_Receive+0x4d8>)
 8004566:	2001      	movs	r0, #1
 8004568:	f7ff f9de 	bl	8003928 <LOGGER_SendFormatted>
                break;
 800456c:	e06a      	b.n	8004644 <UART_Platform_Receive+0x410>
            }
        }
        
        // 방법 2: HAL 함수 시도 (레지스터로 안 받았을 때만)
        if (!data_received_this_loop) {
 800456e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8004572:	f083 0301 	eor.w	r3, r3, #1
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d052      	beq.n	8004622 <UART_Platform_Receive+0x3ee>
            uint8_t single_byte;
            HAL_StatusTypeDef hal_status = HAL_UART_Receive(&huart6, &single_byte, 1, 1);
 800457c:	f107 0111 	add.w	r1, r7, #17
 8004580:	2301      	movs	r3, #1
 8004582:	2201      	movs	r2, #1
 8004584:	4862      	ldr	r0, [pc, #392]	@ (8004710 <UART_Platform_Receive+0x4dc>)
 8004586:	f008 ff9e 	bl	800d4c6 <HAL_UART_Receive>
 800458a:	4603      	mov	r3, r0
 800458c:	777b      	strb	r3, [r7, #29]
            
            if (hal_status == HAL_OK) {
 800458e:	7f7b      	ldrb	r3, [r7, #29]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d146      	bne.n	8004622 <UART_Platform_Receive+0x3ee>
                buffer[*bytes_received] = single_byte;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4413      	add	r3, r2
 800459e:	7c7a      	ldrb	r2, [r7, #17]
 80045a0:	701a      	strb	r2, [r3, #0]
                (*bytes_received)++;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	601a      	str	r2, [r3, #0]
                data_received_this_loop = true;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                last_byte_time = current_time;
 80045b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b4:	657b      	str	r3, [r7, #84]	@ 0x54
                
                char printable = (single_byte >= 32 && single_byte <= 126) ? single_byte : '.';
 80045b6:	7c7b      	ldrb	r3, [r7, #17]
 80045b8:	2b1f      	cmp	r3, #31
 80045ba:	d904      	bls.n	80045c6 <UART_Platform_Receive+0x392>
 80045bc:	7c7b      	ldrb	r3, [r7, #17]
 80045be:	2b7e      	cmp	r3, #126	@ 0x7e
 80045c0:	d801      	bhi.n	80045c6 <UART_Platform_Receive+0x392>
 80045c2:	7c7b      	ldrb	r3, [r7, #17]
 80045c4:	e000      	b.n	80045c8 <UART_Platform_Receive+0x394>
 80045c6:	232e      	movs	r3, #46	@ 0x2e
 80045c8:	773b      	strb	r3, [r7, #28]
                const char* special = "";
 80045ca:	4b52      	ldr	r3, [pc, #328]	@ (8004714 <UART_Platform_Receive+0x4e0>)
 80045cc:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (single_byte == 0x0D) special = " <CR>";
 80045ce:	7c7b      	ldrb	r3, [r7, #17]
 80045d0:	2b0d      	cmp	r3, #13
 80045d2:	d102      	bne.n	80045da <UART_Platform_Receive+0x3a6>
 80045d4:	4b50      	ldr	r3, [pc, #320]	@ (8004718 <UART_Platform_Receive+0x4e4>)
 80045d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045d8:	e00a      	b.n	80045f0 <UART_Platform_Receive+0x3bc>
                else if (single_byte == 0x0A) special = " <LF>";
 80045da:	7c7b      	ldrb	r3, [r7, #17]
 80045dc:	2b0a      	cmp	r3, #10
 80045de:	d102      	bne.n	80045e6 <UART_Platform_Receive+0x3b2>
 80045e0:	4b47      	ldr	r3, [pc, #284]	@ (8004700 <UART_Platform_Receive+0x4cc>)
 80045e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045e4:	e004      	b.n	80045f0 <UART_Platform_Receive+0x3bc>
                else if (single_byte == 0x20) special = " <SPACE>";
 80045e6:	7c7b      	ldrb	r3, [r7, #17]
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d101      	bne.n	80045f0 <UART_Platform_Receive+0x3bc>
 80045ec:	4b45      	ldr	r3, [pc, #276]	@ (8004704 <UART_Platform_Receive+0x4d0>)
 80045ee:	64bb      	str	r3, [r7, #72]	@ 0x48
                
                LOG_INFO("[UART_STM32] ✓ HAL read [%d]: 0x%02X ('%c')%s (elapsed: %lu ms)", 
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	1e59      	subs	r1, r3, #1
 80045f6:	7c7b      	ldrb	r3, [r7, #17]
 80045f8:	4618      	mov	r0, r3
 80045fa:	7f3b      	ldrb	r3, [r7, #28]
 80045fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045fe:	9202      	str	r2, [sp, #8]
 8004600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004602:	9201      	str	r2, [sp, #4]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	4603      	mov	r3, r0
 8004608:	460a      	mov	r2, r1
 800460a:	4944      	ldr	r1, [pc, #272]	@ (800471c <UART_Platform_Receive+0x4e8>)
 800460c:	2001      	movs	r0, #1
 800460e:	f7ff f98b 	bl	8003928 <LOGGER_SendFormatted>
                        *bytes_received - 1, single_byte, printable, special, elapsed_total);
                
                if (single_byte == '\n') {
 8004612:	7c7b      	ldrb	r3, [r7, #17]
 8004614:	2b0a      	cmp	r3, #10
 8004616:	d104      	bne.n	8004622 <UART_Platform_Receive+0x3ee>
                    LOG_INFO("[UART_STM32] Found LF - complete response received");
 8004618:	493c      	ldr	r1, [pc, #240]	@ (800470c <UART_Platform_Receive+0x4d8>)
 800461a:	2001      	movs	r0, #1
 800461c:	f7ff f984 	bl	8003928 <LOGGER_SendFormatted>
                    break;
 8004620:	e010      	b.n	8004644 <UART_Platform_Receive+0x410>
                }
            }
        }
        
        // 데이터를 못 받았으면 짧은 지연
        if (!data_received_this_loop) {
 8004622:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8004626:	f083 0301 	eor.w	r3, r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <UART_Platform_Receive+0x402>
            HAL_Delay(1); // 1ms 지연
 8004630:	2001      	movs	r0, #1
 8004632:	f000 f8d5 	bl	80047e0 <HAL_Delay>
    while (*bytes_received < buffer_size - 1) {
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	3b01      	subs	r3, #1
 800463e:	429a      	cmp	r2, r3
 8004640:	f6ff aee2 	blt.w	8004408 <UART_Platform_Receive+0x1d4>
        }
    }
    
    // 버퍼 null-terminate
    buffer[*bytes_received] = '\0';
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
    
    LOG_INFO("[UART_STM32] === IMPROVED receive COMPLETE (real-time) ===");
 8004652:	4933      	ldr	r1, [pc, #204]	@ (8004720 <UART_Platform_Receive+0x4ec>)
 8004654:	2001      	movs	r0, #1
 8004656:	f7ff f967 	bl	8003928 <LOGGER_SendFormatted>
    LOG_INFO("[UART_STM32] Total bytes received: %d", *bytes_received);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	4930      	ldr	r1, [pc, #192]	@ (8004724 <UART_Platform_Receive+0x4f0>)
 8004662:	2001      	movs	r0, #1
 8004664:	f7ff f960 	bl	8003928 <LOGGER_SendFormatted>
    LOG_INFO("[UART_STM32] String format: '%s'", buffer);
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	492f      	ldr	r1, [pc, #188]	@ (8004728 <UART_Platform_Receive+0x4f4>)
 800466c:	2001      	movs	r0, #1
 800466e:	f7ff f95b 	bl	8003928 <LOGGER_SendFormatted>
    LOG_INFO("[UART_STM32] Raw hex analysis:");
 8004672:	492e      	ldr	r1, [pc, #184]	@ (800472c <UART_Platform_Receive+0x4f8>)
 8004674:	2001      	movs	r0, #1
 8004676:	f7ff f957 	bl	8003928 <LOGGER_SendFormatted>
    for (int i = 0; i < *bytes_received; i++) {
 800467a:	2300      	movs	r3, #0
 800467c:	647b      	str	r3, [r7, #68]	@ 0x44
 800467e:	e02f      	b.n	80046e0 <UART_Platform_Receive+0x4ac>
        uint8_t byte = (uint8_t)buffer[i];
 8004680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	76fb      	strb	r3, [r7, #27]
        char printable = (byte >= 32 && byte <= 126) ? byte : '.';
 800468a:	7efb      	ldrb	r3, [r7, #27]
 800468c:	2b1f      	cmp	r3, #31
 800468e:	d904      	bls.n	800469a <UART_Platform_Receive+0x466>
 8004690:	7efb      	ldrb	r3, [r7, #27]
 8004692:	2b7e      	cmp	r3, #126	@ 0x7e
 8004694:	d801      	bhi.n	800469a <UART_Platform_Receive+0x466>
 8004696:	7efb      	ldrb	r3, [r7, #27]
 8004698:	e000      	b.n	800469c <UART_Platform_Receive+0x468>
 800469a:	232e      	movs	r3, #46	@ 0x2e
 800469c:	76bb      	strb	r3, [r7, #26]
        const char* special = "";
 800469e:	4b1d      	ldr	r3, [pc, #116]	@ (8004714 <UART_Platform_Receive+0x4e0>)
 80046a0:	643b      	str	r3, [r7, #64]	@ 0x40
        if (byte == 0x0D) special = " <CR>";
 80046a2:	7efb      	ldrb	r3, [r7, #27]
 80046a4:	2b0d      	cmp	r3, #13
 80046a6:	d102      	bne.n	80046ae <UART_Platform_Receive+0x47a>
 80046a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004718 <UART_Platform_Receive+0x4e4>)
 80046aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80046ac:	e00a      	b.n	80046c4 <UART_Platform_Receive+0x490>
        else if (byte == 0x0A) special = " <LF>";
 80046ae:	7efb      	ldrb	r3, [r7, #27]
 80046b0:	2b0a      	cmp	r3, #10
 80046b2:	d102      	bne.n	80046ba <UART_Platform_Receive+0x486>
 80046b4:	4b12      	ldr	r3, [pc, #72]	@ (8004700 <UART_Platform_Receive+0x4cc>)
 80046b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80046b8:	e004      	b.n	80046c4 <UART_Platform_Receive+0x490>
        else if (byte == 0x20) special = " <SPACE>";
 80046ba:	7efb      	ldrb	r3, [r7, #27]
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d101      	bne.n	80046c4 <UART_Platform_Receive+0x490>
 80046c0:	4b10      	ldr	r3, [pc, #64]	@ (8004704 <UART_Platform_Receive+0x4d0>)
 80046c2:	643b      	str	r3, [r7, #64]	@ 0x40
        
        LOG_INFO("[UART_STM32]   [%d] = 0x%02X ('%c')%s", i, byte, printable, special);
 80046c4:	7ef9      	ldrb	r1, [r7, #27]
 80046c6:	7ebb      	ldrb	r3, [r7, #26]
 80046c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046ca:	9201      	str	r2, [sp, #4]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	460b      	mov	r3, r1
 80046d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046d2:	4917      	ldr	r1, [pc, #92]	@ (8004730 <UART_Platform_Receive+0x4fc>)
 80046d4:	2001      	movs	r0, #1
 80046d6:	f7ff f927 	bl	8003928 <LOGGER_SendFormatted>
    for (int i = 0; i < *bytes_received; i++) {
 80046da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046dc:	3301      	adds	r3, #1
 80046de:	647b      	str	r3, [r7, #68]	@ 0x44
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046e6:	429a      	cmp	r2, r3
 80046e8:	dbca      	blt.n	8004680 <UART_Platform_Receive+0x44c>
    }
    
    return (*bytes_received > 0) ? UART_STATUS_OK : UART_STATUS_TIMEOUT;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	dd01      	ble.n	80046f6 <UART_Platform_Receive+0x4c2>
 80046f2:	2300      	movs	r3, #0
 80046f4:	e000      	b.n	80046f8 <UART_Platform_Receive+0x4c4>
 80046f6:	2302      	movs	r3, #2
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3760      	adds	r7, #96	@ 0x60
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	080179ac 	.word	0x080179ac
 8004704:	080179b4 	.word	0x080179b4
 8004708:	08017cfc 	.word	0x08017cfc
 800470c:	08017d44 	.word	0x08017d44
 8004710:	20000ca8 	.word	0x20000ca8
 8004714:	080176cc 	.word	0x080176cc
 8004718:	080179a4 	.word	0x080179a4
 800471c:	08017d78 	.word	0x08017d78
 8004720:	08017dbc 	.word	0x08017dbc
 8004724:	08017df8 	.word	0x08017df8
 8004728:	08017e20 	.word	0x08017e20
 800472c:	08017e44 	.word	0x08017e44
 8004730:	080179c0 	.word	0x080179c0

08004734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004734:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800476c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004738:	f7ff f89c 	bl	8003874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800473c:	480c      	ldr	r0, [pc, #48]	@ (8004770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800473e:	490d      	ldr	r1, [pc, #52]	@ (8004774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004740:	4a0d      	ldr	r2, [pc, #52]	@ (8004778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004744:	e002      	b.n	800474c <LoopCopyDataInit>

08004746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800474a:	3304      	adds	r3, #4

0800474c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800474c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800474e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004750:	d3f9      	bcc.n	8004746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004752:	4a0a      	ldr	r2, [pc, #40]	@ (800477c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004754:	4c0a      	ldr	r4, [pc, #40]	@ (8004780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004758:	e001      	b.n	800475e <LoopFillZerobss>

0800475a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800475a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800475c:	3204      	adds	r2, #4

0800475e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800475e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004760:	d3fb      	bcc.n	800475a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004762:	f010 ffc9 	bl	80156f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004766:	f7fb ffdb 	bl	8000720 <main>
  bx  lr    
 800476a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800476c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004774:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8004778:	08017f28 	.word	0x08017f28
  ldr r2, =_sbss
 800477c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004780:	20009a54 	.word	0x20009a54

08004784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004784:	e7fe      	b.n	8004784 <ADC_IRQHandler>

08004786 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800478a:	2003      	movs	r0, #3
 800478c:	f000 fb91 	bl	8004eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004790:	2000      	movs	r0, #0
 8004792:	f7fe ff7b 	bl	800368c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004796:	f7fd fedd 	bl	8002554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047a4:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <HAL_IncTick+0x20>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <HAL_IncTick+0x24>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4413      	add	r3, r2
 80047b0:	4a04      	ldr	r2, [pc, #16]	@ (80047c4 <HAL_IncTick+0x24>)
 80047b2:	6013      	str	r3, [r2, #0]
}
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20000050 	.word	0x20000050
 80047c4:	20000fdc 	.word	0x20000fdc

080047c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return uwTick;
 80047cc:	4b03      	ldr	r3, [pc, #12]	@ (80047dc <HAL_GetTick+0x14>)
 80047ce:	681b      	ldr	r3, [r3, #0]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000fdc 	.word	0x20000fdc

080047e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047e8:	f7ff ffee 	bl	80047c8 <HAL_GetTick>
 80047ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d005      	beq.n	8004806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004824 <HAL_Delay+0x44>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004806:	bf00      	nop
 8004808:	f7ff ffde 	bl	80047c8 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	429a      	cmp	r2, r3
 8004816:	d8f7      	bhi.n	8004808 <HAL_Delay+0x28>
  {
  }
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000050 	.word	0x20000050

08004828 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e031      	b.n	80048a2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fd feac 	bl	80025a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	d116      	bne.n	8004894 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800486a:	4b10      	ldr	r3, [pc, #64]	@ (80048ac <HAL_ADC_Init+0x84>)
 800486c:	4013      	ands	r3, r2
 800486e:	f043 0202 	orr.w	r2, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f974 	bl	8004b64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	f043 0201 	orr.w	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	641a      	str	r2, [r3, #64]	@ 0x40
 8004892:	e001      	b.n	8004898 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	ffffeefd 	.word	0xffffeefd

080048b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x1c>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e13a      	b.n	8004b42 <HAL_ADC_ConfigChannel+0x292>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b09      	cmp	r3, #9
 80048da:	d93a      	bls.n	8004952 <HAL_ADC_ConfigChannel+0xa2>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048e4:	d035      	beq.n	8004952 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68d9      	ldr	r1, [r3, #12]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	4613      	mov	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4413      	add	r3, r2
 80048fa:	3b1e      	subs	r3, #30
 80048fc:	2207      	movs	r2, #7
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43da      	mvns	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	400a      	ands	r2, r1
 800490a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a8f      	ldr	r2, [pc, #572]	@ (8004b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10a      	bne.n	800492c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68d9      	ldr	r1, [r3, #12]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	061a      	lsls	r2, r3, #24
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800492a:	e039      	b.n	80049a0 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68d9      	ldr	r1, [r3, #12]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	4618      	mov	r0, r3
 800493e:	4603      	mov	r3, r0
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	4403      	add	r3, r0
 8004944:	3b1e      	subs	r3, #30
 8004946:	409a      	lsls	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004950:	e026      	b.n	80049a0 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6919      	ldr	r1, [r3, #16]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	b29b      	uxth	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	4613      	mov	r3, r2
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4413      	add	r3, r2
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	2207      	movs	r2, #7
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	43da      	mvns	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	400a      	ands	r2, r1
 8004978:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6919      	ldr	r1, [r3, #16]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	4618      	mov	r0, r3
 800498c:	4603      	mov	r3, r0
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	4403      	add	r3, r0
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	409a      	lsls	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b06      	cmp	r3, #6
 80049a6:	d824      	bhi.n	80049f2 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	3b05      	subs	r3, #5
 80049ba:	221f      	movs	r2, #31
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43da      	mvns	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	400a      	ands	r2, r1
 80049c8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	4618      	mov	r0, r3
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	3b05      	subs	r3, #5
 80049e4:	fa00 f203 	lsl.w	r2, r0, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80049f0:	e04c      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d824      	bhi.n	8004a44 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	3b23      	subs	r3, #35	@ 0x23
 8004a0c:	221f      	movs	r2, #31
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43da      	mvns	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	400a      	ands	r2, r1
 8004a1a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4618      	mov	r0, r3
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	3b23      	subs	r3, #35	@ 0x23
 8004a36:	fa00 f203 	lsl.w	r2, r0, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a42:	e023      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	3b41      	subs	r3, #65	@ 0x41
 8004a56:	221f      	movs	r2, #31
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	43da      	mvns	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	400a      	ands	r2, r1
 8004a64:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	4618      	mov	r0, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3b41      	subs	r3, #65	@ 0x41
 8004a80:	fa00 f203 	lsl.w	r2, r0, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a30      	ldr	r2, [pc, #192]	@ (8004b54 <HAL_ADC_ConfigChannel+0x2a4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d10a      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x1fc>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a9e:	d105      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a8>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a8>)
 8004aa6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004aaa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a28      	ldr	r2, [pc, #160]	@ (8004b54 <HAL_ADC_ConfigChannel+0x2a4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d10f      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0x226>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b12      	cmp	r3, #18
 8004abc:	d10b      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004abe:	4b26      	ldr	r3, [pc, #152]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a8>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4a25      	ldr	r2, [pc, #148]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a8>)
 8004ac4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004ac8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004aca:	4b23      	ldr	r3, [pc, #140]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a8>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4a22      	ldr	r2, [pc, #136]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a8>)
 8004ad0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ad4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1e      	ldr	r2, [pc, #120]	@ (8004b54 <HAL_ADC_ConfigChannel+0x2a4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d12b      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x288>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <HAL_ADC_ConfigChannel+0x242>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b11      	cmp	r3, #17
 8004af0:	d122      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004af2:	4b19      	ldr	r3, [pc, #100]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a8>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4a18      	ldr	r2, [pc, #96]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a8>)
 8004af8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004afc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004afe:	4b16      	ldr	r3, [pc, #88]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a8>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4a15      	ldr	r2, [pc, #84]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a8>)
 8004b04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b08:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a10      	ldr	r2, [pc, #64]	@ (8004b50 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d111      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004b14:	4b11      	ldr	r3, [pc, #68]	@ (8004b5c <HAL_ADC_ConfigChannel+0x2ac>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a11      	ldr	r2, [pc, #68]	@ (8004b60 <HAL_ADC_ConfigChannel+0x2b0>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	0c9a      	lsrs	r2, r3, #18
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004b2a:	e002      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f9      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	10000012 	.word	0x10000012
 8004b54:	40012000 	.word	0x40012000
 8004b58:	40012300 	.word	0x40012300
 8004b5c:	20000000 	.word	0x20000000
 8004b60:	431bde83 	.word	0x431bde83

08004b64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004b6c:	4b78      	ldr	r3, [pc, #480]	@ (8004d50 <ADC_Init+0x1ec>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a77      	ldr	r2, [pc, #476]	@ (8004d50 <ADC_Init+0x1ec>)
 8004b72:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004b76:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004b78:	4b75      	ldr	r3, [pc, #468]	@ (8004d50 <ADC_Init+0x1ec>)
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4973      	ldr	r1, [pc, #460]	@ (8004d50 <ADC_Init+0x1ec>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6859      	ldr	r1, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	021a      	lsls	r2, r3, #8
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6859      	ldr	r1, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6899      	ldr	r1, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf2:	4a58      	ldr	r2, [pc, #352]	@ (8004d54 <ADC_Init+0x1f0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d022      	beq.n	8004c3e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6899      	ldr	r1, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004c28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6899      	ldr	r1, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	e00f      	b.n	8004c5e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004c5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0202 	bic.w	r2, r2, #2
 8004c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6899      	ldr	r1, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	005a      	lsls	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01b      	beq.n	8004cc4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004caa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6859      	ldr	r1, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	035a      	lsls	r2, r3, #13
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	e007      	b.n	8004cd4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	051a      	lsls	r2, r3, #20
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6899      	ldr	r1, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d16:	025a      	lsls	r2, r3, #9
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6899      	ldr	r1, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	029a      	lsls	r2, r3, #10
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	40012300 	.word	0x40012300
 8004d54:	0f000001 	.word	0x0f000001

08004d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <__NVIC_SetPriorityGrouping+0x40>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d74:	4013      	ands	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d80:	4b06      	ldr	r3, [pc, #24]	@ (8004d9c <__NVIC_SetPriorityGrouping+0x44>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d86:	4a04      	ldr	r2, [pc, #16]	@ (8004d98 <__NVIC_SetPriorityGrouping+0x40>)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	60d3      	str	r3, [r2, #12]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	e000ed00 	.word	0xe000ed00
 8004d9c:	05fa0000 	.word	0x05fa0000

08004da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004da4:	4b04      	ldr	r3, [pc, #16]	@ (8004db8 <__NVIC_GetPriorityGrouping+0x18>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	f003 0307 	and.w	r3, r3, #7
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	e000ed00 	.word	0xe000ed00

08004dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	db0b      	blt.n	8004de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	f003 021f 	and.w	r2, r3, #31
 8004dd4:	4907      	ldr	r1, [pc, #28]	@ (8004df4 <__NVIC_EnableIRQ+0x38>)
 8004dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2001      	movs	r0, #1
 8004dde:	fa00 f202 	lsl.w	r2, r0, r2
 8004de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	e000e100 	.word	0xe000e100

08004df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	6039      	str	r1, [r7, #0]
 8004e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	db0a      	blt.n	8004e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	490c      	ldr	r1, [pc, #48]	@ (8004e44 <__NVIC_SetPriority+0x4c>)
 8004e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e16:	0112      	lsls	r2, r2, #4
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e20:	e00a      	b.n	8004e38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	4908      	ldr	r1, [pc, #32]	@ (8004e48 <__NVIC_SetPriority+0x50>)
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	3b04      	subs	r3, #4
 8004e30:	0112      	lsls	r2, r2, #4
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	440b      	add	r3, r1
 8004e36:	761a      	strb	r2, [r3, #24]
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	e000e100 	.word	0xe000e100
 8004e48:	e000ed00 	.word	0xe000ed00

08004e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b089      	sub	sp, #36	@ 0x24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f1c3 0307 	rsb	r3, r3, #7
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	bf28      	it	cs
 8004e6a:	2304      	movcs	r3, #4
 8004e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	3304      	adds	r3, #4
 8004e72:	2b06      	cmp	r3, #6
 8004e74:	d902      	bls.n	8004e7c <NVIC_EncodePriority+0x30>
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3b03      	subs	r3, #3
 8004e7a:	e000      	b.n	8004e7e <NVIC_EncodePriority+0x32>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e80:	f04f 32ff 	mov.w	r2, #4294967295
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	401a      	ands	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e94:	f04f 31ff 	mov.w	r1, #4294967295
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9e:	43d9      	mvns	r1, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea4:	4313      	orrs	r3, r2
         );
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3724      	adds	r7, #36	@ 0x24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff ff4c 	bl	8004d58 <__NVIC_SetPriorityGrouping>
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004eda:	f7ff ff61 	bl	8004da0 <__NVIC_GetPriorityGrouping>
 8004ede:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	6978      	ldr	r0, [r7, #20]
 8004ee6:	f7ff ffb1 	bl	8004e4c <NVIC_EncodePriority>
 8004eea:	4602      	mov	r2, r0
 8004eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff ff80 	bl	8004df8 <__NVIC_SetPriority>
}
 8004ef8:	bf00      	nop
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff ff54 	bl	8004dbc <__NVIC_EnableIRQ>
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e054      	b.n	8004fd8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	7f5b      	ldrb	r3, [r3, #29]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fd fb8a 	bl	8002658 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	791b      	ldrb	r3, [r3, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10c      	bne.n	8004f6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a22      	ldr	r2, [pc, #136]	@ (8004fe0 <HAL_CRC_Init+0xc4>)
 8004f58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0218 	bic.w	r2, r2, #24
 8004f68:	609a      	str	r2, [r3, #8]
 8004f6a:	e00c      	b.n	8004f86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6899      	ldr	r1, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	461a      	mov	r2, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f834 	bl	8004fe4 <HAL_CRCEx_Polynomial_Set>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e028      	b.n	8004fd8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	795b      	ldrb	r3, [r3, #5]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d105      	bne.n	8004f9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f04f 32ff 	mov.w	r2, #4294967295
 8004f96:	611a      	str	r2, [r3, #16]
 8004f98:	e004      	b.n	8004fa4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6912      	ldr	r2, [r2, #16]
 8004fa2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699a      	ldr	r2, [r3, #24]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	04c11db7 	.word	0x04c11db7

08004fe4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004ff4:	231f      	movs	r3, #31
 8004ff6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
 8005006:	e063      	b.n	80050d0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005008:	bf00      	nop
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1e5a      	subs	r2, r3, #1
 800500e:	613a      	str	r2, [r7, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d009      	beq.n	8005028 <HAL_CRCEx_Polynomial_Set+0x44>
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b18      	cmp	r3, #24
 800502c:	d846      	bhi.n	80050bc <HAL_CRCEx_Polynomial_Set+0xd8>
 800502e:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	080050c3 	.word	0x080050c3
 8005038:	080050bd 	.word	0x080050bd
 800503c:	080050bd 	.word	0x080050bd
 8005040:	080050bd 	.word	0x080050bd
 8005044:	080050bd 	.word	0x080050bd
 8005048:	080050bd 	.word	0x080050bd
 800504c:	080050bd 	.word	0x080050bd
 8005050:	080050bd 	.word	0x080050bd
 8005054:	080050b1 	.word	0x080050b1
 8005058:	080050bd 	.word	0x080050bd
 800505c:	080050bd 	.word	0x080050bd
 8005060:	080050bd 	.word	0x080050bd
 8005064:	080050bd 	.word	0x080050bd
 8005068:	080050bd 	.word	0x080050bd
 800506c:	080050bd 	.word	0x080050bd
 8005070:	080050bd 	.word	0x080050bd
 8005074:	080050a5 	.word	0x080050a5
 8005078:	080050bd 	.word	0x080050bd
 800507c:	080050bd 	.word	0x080050bd
 8005080:	080050bd 	.word	0x080050bd
 8005084:	080050bd 	.word	0x080050bd
 8005088:	080050bd 	.word	0x080050bd
 800508c:	080050bd 	.word	0x080050bd
 8005090:	080050bd 	.word	0x080050bd
 8005094:	08005099 	.word	0x08005099
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b06      	cmp	r3, #6
 800509c:	d913      	bls.n	80050c6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80050a2:	e010      	b.n	80050c6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b07      	cmp	r3, #7
 80050a8:	d90f      	bls.n	80050ca <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80050ae:	e00c      	b.n	80050ca <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b0f      	cmp	r3, #15
 80050b4:	d90b      	bls.n	80050ce <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80050ba:	e008      	b.n	80050ce <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	75fb      	strb	r3, [r7, #23]
        break;
 80050c0:	e006      	b.n	80050d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80050c2:	bf00      	nop
 80050c4:	e004      	b.n	80050d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80050c6:	bf00      	nop
 80050c8:	e002      	b.n	80050d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80050ca:	bf00      	nop
 80050cc:	e000      	b.n	80050d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80050ce:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10d      	bne.n	80050f2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f023 0118 	bic.w	r1, r3, #24
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80050f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e069      	b.n	80051e6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d102      	bne.n	8005124 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fd faba 	bl	8002698 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6819      	ldr	r1, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	4b2a      	ldr	r3, [pc, #168]	@ (80051f0 <HAL_DCMI_Init+0xf0>)
 8005146:	400b      	ands	r3, r1
 8005148:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6819      	ldr	r1, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800515e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800516a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005176:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005182:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005188:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800518e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b10      	cmp	r3, #16
 800519e:	d112      	bne.n	80051c6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	7f1b      	ldrb	r3, [r3, #28]
 80051a4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	7f5b      	ldrb	r3, [r3, #29]
 80051aa:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80051ac:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7f9b      	ldrb	r3, [r3, #30]
 80051b2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80051b4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	7fdb      	ldrb	r3, [r3, #31]
 80051bc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80051c2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80051c4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 021e 	orr.w	r2, r2, #30
 80051d4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	ffe0f007 	.word	0xffe0f007

080051f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_DMA_Start_IT+0x26>
 8005216:	2302      	movs	r3, #2
 8005218:	e048      	b.n	80052ac <HAL_DMA_Start_IT+0xb8>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b01      	cmp	r3, #1
 800522c:	d137      	bne.n	800529e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f842 	bl	80052cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800524c:	223f      	movs	r2, #63	@ 0x3f
 800524e:	409a      	lsls	r2, r3
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0216 	orr.w	r2, r2, #22
 8005262:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005272:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0208 	orr.w	r2, r2, #8
 800528a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e005      	b.n	80052aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052a6:	2302      	movs	r3, #2
 80052a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b40      	cmp	r3, #64	@ 0x40
 80052f8:	d108      	bne.n	800530c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800530a:	e007      	b.n	800531c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	60da      	str	r2, [r3, #12]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e039      	b.n	80053ae <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fd fa60 	bl	8002814 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005378:	f023 0107 	bic.w	r1, r3, #7
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800538e:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <HAL_DMA2D_Init+0x90>)
 8005390:	4013      	ands	r3, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68d1      	ldr	r1, [r2, #12]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	430b      	orrs	r3, r1
 800539c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	ffffc000 	.word	0xffffc000

080053bc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d026      	beq.n	800542c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d021      	beq.n	800542c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053f6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fc:	f043 0201 	orr.w	r2, r3, #1
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2201      	movs	r2, #1
 800540a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2204      	movs	r2, #4
 8005410:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d026      	beq.n	8005484 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d021      	beq.n	8005484 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800544e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2220      	movs	r2, #32
 8005456:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545c:	f043 0202 	orr.w	r2, r3, #2
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2204      	movs	r2, #4
 8005468:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d026      	beq.n	80054dc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005494:	2b00      	cmp	r3, #0
 8005496:	d021      	beq.n	80054dc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054a6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2208      	movs	r2, #8
 80054ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b4:	f043 0204 	orr.w	r2, r3, #4
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2204      	movs	r2, #4
 80054c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d013      	beq.n	800550e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00e      	beq.n	800550e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2204      	movs	r2, #4
 8005506:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f853 	bl	80055b4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d024      	beq.n	8005562 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01f      	beq.n	8005562 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005530:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2202      	movs	r2, #2
 8005538:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01f      	beq.n	80055ac <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d01a      	beq.n	80055ac <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005584:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2210      	movs	r2, #16
 800558c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f80e 	bl	80055c8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_DMA2D_ConfigLayer+0x20>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e079      	b.n	80056f0 <HAL_DMA2D_ConfigLayer+0x114>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	3318      	adds	r3, #24
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4413      	add	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	041b      	lsls	r3, r3, #16
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005626:	4b35      	ldr	r3, [pc, #212]	@ (80056fc <HAL_DMA2D_ConfigLayer+0x120>)
 8005628:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b0a      	cmp	r3, #10
 8005630:	d003      	beq.n	800563a <HAL_DMA2D_ConfigLayer+0x5e>
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b09      	cmp	r3, #9
 8005638:	d107      	bne.n	800564a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	e005      	b.n	8005656 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	061b      	lsls	r3, r3, #24
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d120      	bne.n	800569e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	43db      	mvns	r3, r3
 8005666:	ea02 0103 	and.w	r1, r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	430a      	orrs	r2, r1
 8005672:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b0a      	cmp	r3, #10
 8005684:	d003      	beq.n	800568e <HAL_DMA2D_ConfigLayer+0xb2>
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b09      	cmp	r3, #9
 800568c:	d127      	bne.n	80056de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800569a:	629a      	str	r2, [r3, #40]	@ 0x28
 800569c:	e01f      	b.n	80056de <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	43db      	mvns	r3, r3
 80056a8:	ea02 0103 	and.w	r1, r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	6812      	ldr	r2, [r2, #0]
 80056be:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b0a      	cmp	r3, #10
 80056c6:	d003      	beq.n	80056d0 <HAL_DMA2D_ConfigLayer+0xf4>
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b09      	cmp	r3, #9
 80056ce:	d106      	bne.n	80056de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80056dc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	ff03000f 	.word	0xff03000f

08005700 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e086      	b.n	8005820 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7fd f89b 	bl	8002860 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800572a:	4b3f      	ldr	r3, [pc, #252]	@ (8005828 <HAL_ETH_Init+0x128>)
 800572c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572e:	4a3e      	ldr	r2, [pc, #248]	@ (8005828 <HAL_ETH_Init+0x128>)
 8005730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005734:	6453      	str	r3, [r2, #68]	@ 0x44
 8005736:	4b3c      	ldr	r3, [pc, #240]	@ (8005828 <HAL_ETH_Init+0x128>)
 8005738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800573e:	60bb      	str	r3, [r7, #8]
 8005740:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005742:	4b3a      	ldr	r3, [pc, #232]	@ (800582c <HAL_ETH_Init+0x12c>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	4a39      	ldr	r2, [pc, #228]	@ (800582c <HAL_ETH_Init+0x12c>)
 8005748:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800574c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800574e:	4b37      	ldr	r3, [pc, #220]	@ (800582c <HAL_ETH_Init+0x12c>)
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	4935      	ldr	r1, [pc, #212]	@ (800582c <HAL_ETH_Init+0x12c>)
 8005758:	4313      	orrs	r3, r2
 800575a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800575c:	4b33      	ldr	r3, [pc, #204]	@ (800582c <HAL_ETH_Init+0x12c>)
 800575e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005776:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005778:	f7ff f826 	bl	80047c8 <HAL_GetTick>
 800577c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800577e:	e011      	b.n	80057a4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005780:	f7ff f822 	bl	80047c8 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800578e:	d909      	bls.n	80057a4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2204      	movs	r2, #4
 8005794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	22e0      	movs	r2, #224	@ 0xe0
 800579c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e03d      	b.n	8005820 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e4      	bne.n	8005780 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f97a 	bl	8005ab0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fa25 	bl	8005c0c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fa7b 	bl	8005cbe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	461a      	mov	r2, r3
 80057ce:	2100      	movs	r1, #0
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f9e3 	bl	8005b9c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80057e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005830 <HAL_ETH_Init+0x130>)
 80057f4:	430b      	orrs	r3, r1
 80057f6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800580a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2210      	movs	r2, #16
 800581a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40023800 	.word	0x40023800
 800582c:	40013800 	.word	0x40013800
 8005830:	00020060 	.word	0x00020060

08005834 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4b53      	ldr	r3, [pc, #332]	@ (8005998 <ETH_SetMACConfig+0x164>)
 800584a:	4013      	ands	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	7b9b      	ldrb	r3, [r3, #14]
 8005852:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	7c12      	ldrb	r2, [r2, #16]
 8005858:	2a00      	cmp	r2, #0
 800585a:	d102      	bne.n	8005862 <ETH_SetMACConfig+0x2e>
 800585c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005860:	e000      	b.n	8005864 <ETH_SetMACConfig+0x30>
 8005862:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005864:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	7c52      	ldrb	r2, [r2, #17]
 800586a:	2a00      	cmp	r2, #0
 800586c:	d102      	bne.n	8005874 <ETH_SetMACConfig+0x40>
 800586e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005872:	e000      	b.n	8005876 <ETH_SetMACConfig+0x42>
 8005874:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005876:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800587c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	7fdb      	ldrb	r3, [r3, #31]
 8005882:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005884:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800588a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	7f92      	ldrb	r2, [r2, #30]
 8005890:	2a00      	cmp	r2, #0
 8005892:	d102      	bne.n	800589a <ETH_SetMACConfig+0x66>
 8005894:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005898:	e000      	b.n	800589c <ETH_SetMACConfig+0x68>
 800589a:	2200      	movs	r2, #0
                        macconf->Speed |
 800589c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	7f1b      	ldrb	r3, [r3, #28]
 80058a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80058a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80058aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	791b      	ldrb	r3, [r3, #4]
 80058b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80058b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	d102      	bne.n	80058c4 <ETH_SetMACConfig+0x90>
 80058be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058c2:	e000      	b.n	80058c6 <ETH_SetMACConfig+0x92>
 80058c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80058c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	7bdb      	ldrb	r3, [r3, #15]
 80058cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80058ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80058d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80058de:	4313      	orrs	r3, r2
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80058f6:	2001      	movs	r0, #1
 80058f8:	f7fe ff72 	bl	80047e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005912:	4013      	ands	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800591a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005922:	2a00      	cmp	r2, #0
 8005924:	d101      	bne.n	800592a <ETH_SetMACConfig+0xf6>
 8005926:	2280      	movs	r2, #128	@ 0x80
 8005928:	e000      	b.n	800592c <ETH_SetMACConfig+0xf8>
 800592a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800592c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005932:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800593a:	2a01      	cmp	r2, #1
 800593c:	d101      	bne.n	8005942 <ETH_SetMACConfig+0x10e>
 800593e:	2208      	movs	r2, #8
 8005940:	e000      	b.n	8005944 <ETH_SetMACConfig+0x110>
 8005942:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005944:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800594c:	2a01      	cmp	r2, #1
 800594e:	d101      	bne.n	8005954 <ETH_SetMACConfig+0x120>
 8005950:	2204      	movs	r2, #4
 8005952:	e000      	b.n	8005956 <ETH_SetMACConfig+0x122>
 8005954:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005956:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800595e:	2a01      	cmp	r2, #1
 8005960:	d101      	bne.n	8005966 <ETH_SetMACConfig+0x132>
 8005962:	2202      	movs	r2, #2
 8005964:	e000      	b.n	8005968 <ETH_SetMACConfig+0x134>
 8005966:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005968:	4313      	orrs	r3, r2
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005980:	2001      	movs	r0, #1
 8005982:	f7fe ff2d 	bl	80047e0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	619a      	str	r2, [r3, #24]
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	fd20810f 	.word	0xfd20810f

0800599c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4b3d      	ldr	r3, [pc, #244]	@ (8005aac <ETH_SetDMAConfig+0x110>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	7b1b      	ldrb	r3, [r3, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <ETH_SetDMAConfig+0x2c>
 80059c2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80059c6:	e000      	b.n	80059ca <ETH_SetDMAConfig+0x2e>
 80059c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	7b5b      	ldrb	r3, [r3, #13]
 80059ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80059d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	7f52      	ldrb	r2, [r2, #29]
 80059d6:	2a00      	cmp	r2, #0
 80059d8:	d102      	bne.n	80059e0 <ETH_SetDMAConfig+0x44>
 80059da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80059de:	e000      	b.n	80059e2 <ETH_SetDMAConfig+0x46>
 80059e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80059e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	7b9b      	ldrb	r3, [r3, #14]
 80059e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80059ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80059f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	7f1b      	ldrb	r3, [r3, #28]
 80059f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80059f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	7f9b      	ldrb	r3, [r3, #30]
 80059fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005a00:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005a06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a0e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005a10:	4313      	orrs	r3, r2
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a20:	461a      	mov	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a32:	2001      	movs	r0, #1
 8005a34:	f7fe fed4 	bl	80047e0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a40:	461a      	mov	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	791b      	ldrb	r3, [r3, #4]
 8005a4a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005a50:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005a56:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005a5c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a64:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005a66:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005a6e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005a74:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a82:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a90:	2001      	movs	r0, #1
 8005a92:	f7fe fea5 	bl	80047e0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6013      	str	r3, [r2, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	f8de3f23 	.word	0xf8de3f23

08005ab0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b0a6      	sub	sp, #152	@ 0x98
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005af2:	2300      	movs	r3, #0
 8005af4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005b18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005b1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005b2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff fe7f 	bl	8005834 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005b36:	2301      	movs	r3, #1
 8005b38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005b62:	2301      	movs	r3, #1
 8005b64:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005b66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b6a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005b6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005b70:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005b72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b76:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005b86:	f107 0308 	add.w	r3, r7, #8
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff ff05 	bl	800599c <ETH_SetDMAConfig>
}
 8005b92:	bf00      	nop
 8005b94:	3798      	adds	r7, #152	@ 0x98
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3305      	adds	r3, #5
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	3204      	adds	r2, #4
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	4b11      	ldr	r3, [pc, #68]	@ (8005c04 <ETH_MACAddressConfig+0x68>)
 8005bbe:	4413      	add	r3, r2
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3303      	adds	r3, #3
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	061a      	lsls	r2, r3, #24
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3302      	adds	r3, #2
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	4313      	orrs	r3, r2
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	7812      	ldrb	r2, [r2, #0]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	4b06      	ldr	r3, [pc, #24]	@ (8005c08 <ETH_MACAddressConfig+0x6c>)
 8005bee:	4413      	add	r3, r2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	6013      	str	r3, [r2, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40028040 	.word	0x40028040
 8005c08:	40028044 	.word	0x40028044

08005c0c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e03e      	b.n	8005c98 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68d9      	ldr	r1, [r3, #12]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	440b      	add	r3, r1
 8005c2a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2200      	movs	r2, #0
 8005c36:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2200      	movs	r2, #0
 8005c42:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	3206      	adds	r2, #6
 8005c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d80c      	bhi.n	8005c7c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68d9      	ldr	r1, [r3, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	440b      	add	r3, r1
 8005c74:	461a      	mov	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	e004      	b.n	8005c86 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	461a      	mov	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d9bd      	bls.n	8005c1a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cb0:	611a      	str	r2, [r3, #16]
}
 8005cb2:	bf00      	nop
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	e048      	b.n	8005d5e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6919      	ldr	r1, [r3, #16]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	440b      	add	r3, r1
 8005cdc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2200      	movs	r2, #0
 8005cee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d08:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	3212      	adds	r2, #18
 8005d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d80c      	bhi.n	8005d4e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6919      	ldr	r1, [r3, #16]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	440b      	add	r3, r1
 8005d46:	461a      	mov	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	60da      	str	r2, [r3, #12]
 8005d4c:	e004      	b.n	8005d58 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	461a      	mov	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d9b3      	bls.n	8005ccc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d8e:	60da      	str	r2, [r3, #12]
}
 8005d90:	bf00      	nop
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b089      	sub	sp, #36	@ 0x24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005dae:	2300      	movs	r3, #0
 8005db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005db6:	2300      	movs	r3, #0
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	e175      	b.n	80060a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	f040 8164 	bne.w	80060a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d005      	beq.n	8005df2 <HAL_GPIO_Init+0x56>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d130      	bne.n	8005e54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43db      	mvns	r3, r3
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	4013      	ands	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e28:	2201      	movs	r2, #1
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	43db      	mvns	r3, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4013      	ands	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	f003 0201 	and.w	r2, r3, #1
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f003 0303 	and.w	r3, r3, #3
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d017      	beq.n	8005e90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	43db      	mvns	r3, r3
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	4013      	ands	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f003 0303 	and.w	r3, r3, #3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d123      	bne.n	8005ee4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	08da      	lsrs	r2, r3, #3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3208      	adds	r2, #8
 8005ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	220f      	movs	r2, #15
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	08da      	lsrs	r2, r3, #3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3208      	adds	r2, #8
 8005ede:	69b9      	ldr	r1, [r7, #24]
 8005ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	2203      	movs	r2, #3
 8005ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f003 0203 	and.w	r2, r3, #3
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80be 	beq.w	80060a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f26:	4b66      	ldr	r3, [pc, #408]	@ (80060c0 <HAL_GPIO_Init+0x324>)
 8005f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2a:	4a65      	ldr	r2, [pc, #404]	@ (80060c0 <HAL_GPIO_Init+0x324>)
 8005f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f32:	4b63      	ldr	r3, [pc, #396]	@ (80060c0 <HAL_GPIO_Init+0x324>)
 8005f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005f3e:	4a61      	ldr	r2, [pc, #388]	@ (80060c4 <HAL_GPIO_Init+0x328>)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	089b      	lsrs	r3, r3, #2
 8005f44:	3302      	adds	r3, #2
 8005f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	220f      	movs	r2, #15
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a58      	ldr	r2, [pc, #352]	@ (80060c8 <HAL_GPIO_Init+0x32c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d037      	beq.n	8005fda <HAL_GPIO_Init+0x23e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a57      	ldr	r2, [pc, #348]	@ (80060cc <HAL_GPIO_Init+0x330>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d031      	beq.n	8005fd6 <HAL_GPIO_Init+0x23a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a56      	ldr	r2, [pc, #344]	@ (80060d0 <HAL_GPIO_Init+0x334>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d02b      	beq.n	8005fd2 <HAL_GPIO_Init+0x236>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a55      	ldr	r2, [pc, #340]	@ (80060d4 <HAL_GPIO_Init+0x338>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d025      	beq.n	8005fce <HAL_GPIO_Init+0x232>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a54      	ldr	r2, [pc, #336]	@ (80060d8 <HAL_GPIO_Init+0x33c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01f      	beq.n	8005fca <HAL_GPIO_Init+0x22e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a53      	ldr	r2, [pc, #332]	@ (80060dc <HAL_GPIO_Init+0x340>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d019      	beq.n	8005fc6 <HAL_GPIO_Init+0x22a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a52      	ldr	r2, [pc, #328]	@ (80060e0 <HAL_GPIO_Init+0x344>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d013      	beq.n	8005fc2 <HAL_GPIO_Init+0x226>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a51      	ldr	r2, [pc, #324]	@ (80060e4 <HAL_GPIO_Init+0x348>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00d      	beq.n	8005fbe <HAL_GPIO_Init+0x222>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a50      	ldr	r2, [pc, #320]	@ (80060e8 <HAL_GPIO_Init+0x34c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d007      	beq.n	8005fba <HAL_GPIO_Init+0x21e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a4f      	ldr	r2, [pc, #316]	@ (80060ec <HAL_GPIO_Init+0x350>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d101      	bne.n	8005fb6 <HAL_GPIO_Init+0x21a>
 8005fb2:	2309      	movs	r3, #9
 8005fb4:	e012      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fb6:	230a      	movs	r3, #10
 8005fb8:	e010      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fba:	2308      	movs	r3, #8
 8005fbc:	e00e      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fbe:	2307      	movs	r3, #7
 8005fc0:	e00c      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fc2:	2306      	movs	r3, #6
 8005fc4:	e00a      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fc6:	2305      	movs	r3, #5
 8005fc8:	e008      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fca:	2304      	movs	r3, #4
 8005fcc:	e006      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e004      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e002      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <HAL_GPIO_Init+0x240>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	f002 0203 	and.w	r2, r2, #3
 8005fe2:	0092      	lsls	r2, r2, #2
 8005fe4:	4093      	lsls	r3, r2
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005fec:	4935      	ldr	r1, [pc, #212]	@ (80060c4 <HAL_GPIO_Init+0x328>)
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	089b      	lsrs	r3, r3, #2
 8005ff2:	3302      	adds	r3, #2
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80060f0 <HAL_GPIO_Init+0x354>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	43db      	mvns	r3, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4013      	ands	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800601e:	4a34      	ldr	r2, [pc, #208]	@ (80060f0 <HAL_GPIO_Init+0x354>)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006024:	4b32      	ldr	r3, [pc, #200]	@ (80060f0 <HAL_GPIO_Init+0x354>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	43db      	mvns	r3, r3
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006048:	4a29      	ldr	r2, [pc, #164]	@ (80060f0 <HAL_GPIO_Init+0x354>)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800604e:	4b28      	ldr	r3, [pc, #160]	@ (80060f0 <HAL_GPIO_Init+0x354>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	43db      	mvns	r3, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4013      	ands	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006072:	4a1f      	ldr	r2, [pc, #124]	@ (80060f0 <HAL_GPIO_Init+0x354>)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006078:	4b1d      	ldr	r3, [pc, #116]	@ (80060f0 <HAL_GPIO_Init+0x354>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	43db      	mvns	r3, r3
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	4013      	ands	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800609c:	4a14      	ldr	r2, [pc, #80]	@ (80060f0 <HAL_GPIO_Init+0x354>)
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	3301      	adds	r3, #1
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	2b0f      	cmp	r3, #15
 80060ac:	f67f ae86 	bls.w	8005dbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80060b0:	bf00      	nop
 80060b2:	bf00      	nop
 80060b4:	3724      	adds	r7, #36	@ 0x24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40023800 	.word	0x40023800
 80060c4:	40013800 	.word	0x40013800
 80060c8:	40020000 	.word	0x40020000
 80060cc:	40020400 	.word	0x40020400
 80060d0:	40020800 	.word	0x40020800
 80060d4:	40020c00 	.word	0x40020c00
 80060d8:	40021000 	.word	0x40021000
 80060dc:	40021400 	.word	0x40021400
 80060e0:	40021800 	.word	0x40021800
 80060e4:	40021c00 	.word	0x40021c00
 80060e8:	40022000 	.word	0x40022000
 80060ec:	40022400 	.word	0x40022400
 80060f0:	40013c00 	.word	0x40013c00

080060f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	887b      	ldrh	r3, [r7, #2]
 8006106:	4013      	ands	r3, r2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
 8006110:	e001      	b.n	8006116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	807b      	strh	r3, [r7, #2]
 8006130:	4613      	mov	r3, r2
 8006132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006134:	787b      	ldrb	r3, [r7, #1]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800613a:	887a      	ldrh	r2, [r7, #2]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006140:	e003      	b.n	800614a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006142:	887b      	ldrh	r3, [r7, #2]
 8006144:	041a      	lsls	r2, r3, #16
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	619a      	str	r2, [r3, #24]
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b086      	sub	sp, #24
 800615a:	af02      	add	r7, sp, #8
 800615c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e059      	b.n	800621c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f00e fe8a 	bl	8014e9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2203      	movs	r2, #3
 800618c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006196:	d102      	bne.n	800619e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f008 fd1d 	bl	800ebe2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	7c1a      	ldrb	r2, [r3, #16]
 80061b0:	f88d 2000 	strb.w	r2, [sp]
 80061b4:	3304      	adds	r3, #4
 80061b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061b8:	f008 fca8 	bl	800eb0c <USB_CoreInit>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d005      	beq.n	80061ce <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2202      	movs	r2, #2
 80061c6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e026      	b.n	800621c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2101      	movs	r1, #1
 80061d4:	4618      	mov	r0, r3
 80061d6:	f008 fd15 	bl	800ec04 <USB_SetCurrentMode>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e017      	b.n	800621c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	7c1a      	ldrb	r2, [r3, #16]
 80061f4:	f88d 2000 	strb.w	r2, [sp]
 80061f8:	3304      	adds	r3, #4
 80061fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061fc:	f008 febe 	bl	800ef7c <USB_HostInit>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d005      	beq.n	8006212 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e004      	b.n	800621c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006224:	b590      	push	{r4, r7, lr}
 8006226:	b08b      	sub	sp, #44	@ 0x2c
 8006228:	af04      	add	r7, sp, #16
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	461a      	mov	r2, r3
 8006232:	4603      	mov	r3, r0
 8006234:	70fb      	strb	r3, [r7, #3]
 8006236:	460b      	mov	r3, r1
 8006238:	70bb      	strb	r3, [r7, #2]
 800623a:	4613      	mov	r3, r2
 800623c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800623e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006240:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_HCD_HC_Init+0x2c>
 800624c:	2302      	movs	r3, #2
 800624e:	e09d      	b.n	800638c <HAL_HCD_HC_Init+0x168>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8006258:	78fa      	ldrb	r2, [r7, #3]
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	3319      	adds	r3, #25
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800626c:	78fa      	ldrb	r2, [r7, #3]
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	4613      	mov	r3, r2
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	440b      	add	r3, r1
 800627a:	3314      	adds	r3, #20
 800627c:	787a      	ldrb	r2, [r7, #1]
 800627e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006280:	78fa      	ldrb	r2, [r7, #3]
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	3315      	adds	r3, #21
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006294:	78fa      	ldrb	r2, [r7, #3]
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	3326      	adds	r3, #38	@ 0x26
 80062a4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80062a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80062aa:	78fa      	ldrb	r2, [r7, #3]
 80062ac:	78bb      	ldrb	r3, [r7, #2]
 80062ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062b2:	b2d8      	uxtb	r0, r3
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	1a9b      	subs	r3, r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	3316      	adds	r3, #22
 80062c2:	4602      	mov	r2, r0
 80062c4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fbc8 	bl	8006a60 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80062d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	da0a      	bge.n	80062ee <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80062d8:	78fa      	ldrb	r2, [r7, #3]
 80062da:	6879      	ldr	r1, [r7, #4]
 80062dc:	4613      	mov	r3, r2
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	440b      	add	r3, r1
 80062e6:	3317      	adds	r3, #23
 80062e8:	2201      	movs	r2, #1
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	e009      	b.n	8006302 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80062ee:	78fa      	ldrb	r2, [r7, #3]
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	3317      	adds	r3, #23
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f008 ff90 	bl	800f22c <USB_GetHostSpeed>
 800630c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800630e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006312:	2b01      	cmp	r3, #1
 8006314:	d10b      	bne.n	800632e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8006316:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800631a:	2b01      	cmp	r3, #1
 800631c:	d107      	bne.n	800632e <HAL_HCD_HC_Init+0x10a>
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d104      	bne.n	800632e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2bbc      	cmp	r3, #188	@ 0xbc
 8006328:	d901      	bls.n	800632e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800632a:	23bc      	movs	r3, #188	@ 0xbc
 800632c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800632e:	78fa      	ldrb	r2, [r7, #3]
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	4613      	mov	r3, r2
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	440b      	add	r3, r1
 800633c:	3318      	adds	r3, #24
 800633e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006342:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8006344:	78fa      	ldrb	r2, [r7, #3]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	b298      	uxth	r0, r3
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	4613      	mov	r3, r2
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	440b      	add	r3, r1
 8006356:	3328      	adds	r3, #40	@ 0x28
 8006358:	4602      	mov	r2, r0
 800635a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	b29b      	uxth	r3, r3
 8006364:	787c      	ldrb	r4, [r7, #1]
 8006366:	78ba      	ldrb	r2, [r7, #2]
 8006368:	78f9      	ldrb	r1, [r7, #3]
 800636a:	9302      	str	r3, [sp, #8]
 800636c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006370:	9301      	str	r3, [sp, #4]
 8006372:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	4623      	mov	r3, r4
 800637a:	f008 ff7f 	bl	800f27c <USB_HC_Init>
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800638a:	7bfb      	ldrb	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	bd90      	pop	{r4, r7, pc}

08006394 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_HCD_HC_Halt+0x1e>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e00f      	b.n	80063d2 <HAL_HCD_HC_Halt+0x3e>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	4611      	mov	r1, r2
 80063c2:	4618      	mov	r0, r3
 80063c4:	f009 fb11 	bl	800f9ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	4608      	mov	r0, r1
 80063e6:	4611      	mov	r1, r2
 80063e8:	461a      	mov	r2, r3
 80063ea:	4603      	mov	r3, r0
 80063ec:	70fb      	strb	r3, [r7, #3]
 80063ee:	460b      	mov	r3, r1
 80063f0:	70bb      	strb	r3, [r7, #2]
 80063f2:	4613      	mov	r3, r2
 80063f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	3317      	adds	r3, #23
 8006406:	78ba      	ldrb	r2, [r7, #2]
 8006408:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800640a:	78fa      	ldrb	r2, [r7, #3]
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	1a9b      	subs	r3, r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	3326      	adds	r3, #38	@ 0x26
 800641a:	787a      	ldrb	r2, [r7, #1]
 800641c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800641e:	7c3b      	ldrb	r3, [r7, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d114      	bne.n	800644e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006424:	78fa      	ldrb	r2, [r7, #3]
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	4613      	mov	r3, r2
 800642a:	011b      	lsls	r3, r3, #4
 800642c:	1a9b      	subs	r3, r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	440b      	add	r3, r1
 8006432:	332a      	adds	r3, #42	@ 0x2a
 8006434:	2203      	movs	r2, #3
 8006436:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006438:	78fa      	ldrb	r2, [r7, #3]
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	4613      	mov	r3, r2
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	3319      	adds	r3, #25
 8006448:	7f3a      	ldrb	r2, [r7, #28]
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	e009      	b.n	8006462 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800644e:	78fa      	ldrb	r2, [r7, #3]
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	4613      	mov	r3, r2
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	1a9b      	subs	r3, r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	440b      	add	r3, r1
 800645c:	332a      	adds	r3, #42	@ 0x2a
 800645e:	2202      	movs	r2, #2
 8006460:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006462:	787b      	ldrb	r3, [r7, #1]
 8006464:	2b03      	cmp	r3, #3
 8006466:	f200 8102 	bhi.w	800666e <HAL_HCD_HC_SubmitRequest+0x292>
 800646a:	a201      	add	r2, pc, #4	@ (adr r2, 8006470 <HAL_HCD_HC_SubmitRequest+0x94>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	08006481 	.word	0x08006481
 8006474:	08006659 	.word	0x08006659
 8006478:	08006545 	.word	0x08006545
 800647c:	080065cf 	.word	0x080065cf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8006480:	7c3b      	ldrb	r3, [r7, #16]
 8006482:	2b01      	cmp	r3, #1
 8006484:	f040 80f5 	bne.w	8006672 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8006488:	78bb      	ldrb	r3, [r7, #2]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d12d      	bne.n	80064ea <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800648e:	8b3b      	ldrh	r3, [r7, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d109      	bne.n	80064a8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8006494:	78fa      	ldrb	r2, [r7, #3]
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	4613      	mov	r3, r2
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	1a9b      	subs	r3, r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	333d      	adds	r3, #61	@ 0x3d
 80064a4:	2201      	movs	r2, #1
 80064a6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80064a8:	78fa      	ldrb	r2, [r7, #3]
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	4613      	mov	r3, r2
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	333d      	adds	r3, #61	@ 0x3d
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80064be:	78fa      	ldrb	r2, [r7, #3]
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	4613      	mov	r3, r2
 80064c4:	011b      	lsls	r3, r3, #4
 80064c6:	1a9b      	subs	r3, r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	440b      	add	r3, r1
 80064cc:	332a      	adds	r3, #42	@ 0x2a
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80064d2:	e0ce      	b.n	8006672 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80064d4:	78fa      	ldrb	r2, [r7, #3]
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	4613      	mov	r3, r2
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	440b      	add	r3, r1
 80064e2:	332a      	adds	r3, #42	@ 0x2a
 80064e4:	2202      	movs	r2, #2
 80064e6:	701a      	strb	r2, [r3, #0]
      break;
 80064e8:	e0c3      	b.n	8006672 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80064ea:	78fa      	ldrb	r2, [r7, #3]
 80064ec:	6879      	ldr	r1, [r7, #4]
 80064ee:	4613      	mov	r3, r2
 80064f0:	011b      	lsls	r3, r3, #4
 80064f2:	1a9b      	subs	r3, r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	440b      	add	r3, r1
 80064f8:	331a      	adds	r3, #26
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	f040 80b8 	bne.w	8006672 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8006502:	78fa      	ldrb	r2, [r7, #3]
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	333c      	adds	r3, #60	@ 0x3c
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10a      	bne.n	800652e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006518:	78fa      	ldrb	r2, [r7, #3]
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	4613      	mov	r3, r2
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	440b      	add	r3, r1
 8006526:	332a      	adds	r3, #42	@ 0x2a
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
      break;
 800652c:	e0a1      	b.n	8006672 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800652e:	78fa      	ldrb	r2, [r7, #3]
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	1a9b      	subs	r3, r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	332a      	adds	r3, #42	@ 0x2a
 800653e:	2202      	movs	r2, #2
 8006540:	701a      	strb	r2, [r3, #0]
      break;
 8006542:	e096      	b.n	8006672 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006544:	78bb      	ldrb	r3, [r7, #2]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d120      	bne.n	800658c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800654a:	78fa      	ldrb	r2, [r7, #3]
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	440b      	add	r3, r1
 8006558:	333d      	adds	r3, #61	@ 0x3d
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006560:	78fa      	ldrb	r2, [r7, #3]
 8006562:	6879      	ldr	r1, [r7, #4]
 8006564:	4613      	mov	r3, r2
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	1a9b      	subs	r3, r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	332a      	adds	r3, #42	@ 0x2a
 8006570:	2200      	movs	r2, #0
 8006572:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006574:	e07e      	b.n	8006674 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006576:	78fa      	ldrb	r2, [r7, #3]
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	4613      	mov	r3, r2
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	332a      	adds	r3, #42	@ 0x2a
 8006586:	2202      	movs	r2, #2
 8006588:	701a      	strb	r2, [r3, #0]
      break;
 800658a:	e073      	b.n	8006674 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800658c:	78fa      	ldrb	r2, [r7, #3]
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	333c      	adds	r3, #60	@ 0x3c
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80065a2:	78fa      	ldrb	r2, [r7, #3]
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	1a9b      	subs	r3, r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	332a      	adds	r3, #42	@ 0x2a
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
      break;
 80065b6:	e05d      	b.n	8006674 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80065b8:	78fa      	ldrb	r2, [r7, #3]
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	1a9b      	subs	r3, r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	332a      	adds	r3, #42	@ 0x2a
 80065c8:	2202      	movs	r2, #2
 80065ca:	701a      	strb	r2, [r3, #0]
      break;
 80065cc:	e052      	b.n	8006674 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80065ce:	78bb      	ldrb	r3, [r7, #2]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d120      	bne.n	8006616 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	4613      	mov	r3, r2
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	1a9b      	subs	r3, r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	440b      	add	r3, r1
 80065e2:	333d      	adds	r3, #61	@ 0x3d
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80065ea:	78fa      	ldrb	r2, [r7, #3]
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	1a9b      	subs	r3, r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	332a      	adds	r3, #42	@ 0x2a
 80065fa:	2200      	movs	r2, #0
 80065fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80065fe:	e039      	b.n	8006674 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006600:	78fa      	ldrb	r2, [r7, #3]
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	4613      	mov	r3, r2
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	1a9b      	subs	r3, r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	332a      	adds	r3, #42	@ 0x2a
 8006610:	2202      	movs	r2, #2
 8006612:	701a      	strb	r2, [r3, #0]
      break;
 8006614:	e02e      	b.n	8006674 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006616:	78fa      	ldrb	r2, [r7, #3]
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	1a9b      	subs	r3, r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	333c      	adds	r3, #60	@ 0x3c
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800662c:	78fa      	ldrb	r2, [r7, #3]
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	4613      	mov	r3, r2
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	440b      	add	r3, r1
 800663a:	332a      	adds	r3, #42	@ 0x2a
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
      break;
 8006640:	e018      	b.n	8006674 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006642:	78fa      	ldrb	r2, [r7, #3]
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	440b      	add	r3, r1
 8006650:	332a      	adds	r3, #42	@ 0x2a
 8006652:	2202      	movs	r2, #2
 8006654:	701a      	strb	r2, [r3, #0]
      break;
 8006656:	e00d      	b.n	8006674 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006658:	78fa      	ldrb	r2, [r7, #3]
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	4613      	mov	r3, r2
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	440b      	add	r3, r1
 8006666:	332a      	adds	r3, #42	@ 0x2a
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
      break;
 800666c:	e002      	b.n	8006674 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800666e:	bf00      	nop
 8006670:	e000      	b.n	8006674 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8006672:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006674:	78fa      	ldrb	r2, [r7, #3]
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	4613      	mov	r3, r2
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	332c      	adds	r3, #44	@ 0x2c
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006688:	78fa      	ldrb	r2, [r7, #3]
 800668a:	8b39      	ldrh	r1, [r7, #24]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4403      	add	r3, r0
 8006698:	3334      	adds	r3, #52	@ 0x34
 800669a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800669c:	78fa      	ldrb	r2, [r7, #3]
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	4613      	mov	r3, r2
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	334c      	adds	r3, #76	@ 0x4c
 80066ac:	2200      	movs	r2, #0
 80066ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	4613      	mov	r3, r2
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	3338      	adds	r3, #56	@ 0x38
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80066c4:	78fa      	ldrb	r2, [r7, #3]
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	3315      	adds	r3, #21
 80066d4:	78fa      	ldrb	r2, [r7, #3]
 80066d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80066d8:	78fa      	ldrb	r2, [r7, #3]
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	4613      	mov	r3, r2
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	1a9b      	subs	r3, r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	440b      	add	r3, r1
 80066e6:	334d      	adds	r3, #77	@ 0x4d
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	78fa      	ldrb	r2, [r7, #3]
 80066f2:	4613      	mov	r3, r2
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	1a9b      	subs	r3, r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	3310      	adds	r3, #16
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	4413      	add	r3, r2
 8006700:	1d19      	adds	r1, r3, #4
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	799b      	ldrb	r3, [r3, #6]
 8006706:	461a      	mov	r2, r3
 8006708:	f008 fee4 	bl	800f4d4 <USB_HC_StartXfer>
 800670c:	4603      	mov	r3, r0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop

08006718 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f008 fbde 	bl	800eef0 <USB_GetMode>
 8006734:	4603      	mov	r3, r0
 8006736:	2b01      	cmp	r3, #1
 8006738:	f040 80fb 	bne.w	8006932 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f008 fba1 	bl	800ee88 <USB_ReadInterrupts>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80f1 	beq.w	8006930 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f008 fb98 	bl	800ee88 <USB_ReadInterrupts>
 8006758:	4603      	mov	r3, r0
 800675a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800675e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006762:	d104      	bne.n	800676e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800676c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	f008 fb88 	bl	800ee88 <USB_ReadInterrupts>
 8006778:	4603      	mov	r3, r0
 800677a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800677e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006782:	d104      	bne.n	800678e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800678c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4618      	mov	r0, r3
 8006794:	f008 fb78 	bl	800ee88 <USB_ReadInterrupts>
 8006798:	4603      	mov	r3, r0
 800679a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800679e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067a2:	d104      	bne.n	80067ae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80067ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f008 fb68 	bl	800ee88 <USB_ReadInterrupts>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d103      	bne.n	80067ca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2202      	movs	r2, #2
 80067c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f008 fb5a 	bl	800ee88 <USB_ReadInterrupts>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067de:	d120      	bne.n	8006822 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80067e8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d113      	bne.n	8006822 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80067fa:	2110      	movs	r1, #16
 80067fc:	6938      	ldr	r0, [r7, #16]
 80067fe:	f008 fa4d 	bl	800ec9c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006802:	6938      	ldr	r0, [r7, #16]
 8006804:	f008 fa7c 	bl	800ed00 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	7a5b      	ldrb	r3, [r3, #9]
 800680c:	2b02      	cmp	r3, #2
 800680e:	d105      	bne.n	800681c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2101      	movs	r1, #1
 8006816:	4618      	mov	r0, r3
 8006818:	f008 fc68 	bl	800f0ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f00e fbaf 	bl	8014f80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f008 fb2e 	bl	800ee88 <USB_ReadInterrupts>
 800682c:	4603      	mov	r3, r0
 800682e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006836:	d102      	bne.n	800683e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 fd4d 	bl	80082d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f008 fb20 	bl	800ee88 <USB_ReadInterrupts>
 8006848:	4603      	mov	r3, r0
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b08      	cmp	r3, #8
 8006850:	d106      	bne.n	8006860 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f00e fb78 	bl	8014f48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2208      	movs	r2, #8
 800685e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f008 fb0f 	bl	800ee88 <USB_ReadInterrupts>
 800686a:	4603      	mov	r3, r0
 800686c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006870:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006874:	d139      	bne.n	80068ea <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f009 f8a4 	bl	800f9c8 <USB_HC_ReadInterrupt>
 8006880:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006882:	2300      	movs	r3, #0
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	e025      	b.n	80068d4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	fa22 f303 	lsr.w	r3, r2, r3
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d018      	beq.n	80068ce <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068b2:	d106      	bne.n	80068c2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f905 	bl	8006aca <HCD_HC_IN_IRQHandler>
 80068c0:	e005      	b.n	80068ce <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 ff67 	bl	800779c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	3301      	adds	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	795b      	ldrb	r3, [r3, #5]
 80068d8:	461a      	mov	r2, r3
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	4293      	cmp	r3, r2
 80068de:	d3d3      	bcc.n	8006888 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f008 faca 	bl	800ee88 <USB_ReadInterrupts>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d101      	bne.n	8006902 <HAL_HCD_IRQHandler+0x1ea>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <HAL_HCD_IRQHandler+0x1ec>
 8006902:	2300      	movs	r3, #0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d014      	beq.n	8006932 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0210 	bic.w	r2, r2, #16
 8006916:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 fbfe 	bl	800811a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	699a      	ldr	r2, [r3, #24]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0210 	orr.w	r2, r2, #16
 800692c:	619a      	str	r2, [r3, #24]
 800692e:	e000      	b.n	8006932 <HAL_HCD_IRQHandler+0x21a>
      return;
 8006930:	bf00      	nop
    }
  }
}
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <HAL_HCD_Start+0x16>
 800694a:	2302      	movs	r3, #2
 800694c:	e013      	b.n	8006976 <HAL_HCD_Start+0x3e>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2101      	movs	r1, #1
 800695c:	4618      	mov	r0, r3
 800695e:	f008 fc2c 	bl	800f1ba <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f008 f92a 	bl	800ebc0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b082      	sub	sp, #8
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_HCD_Stop+0x16>
 8006990:	2302      	movs	r3, #2
 8006992:	e00d      	b.n	80069b0 <HAL_HCD_Stop+0x32>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f009 f97f 	bl	800fca4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f008 fbce 	bl	800f166 <USB_ResetPort>
 80069ca:	4603      	mov	r3, r0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	334c      	adds	r3, #76	@ 0x4c
 80069f0:	781b      	ldrb	r3, [r3, #0]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	460b      	mov	r3, r1
 8006a08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006a0a:	78fa      	ldrb	r2, [r7, #3]
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	1a9b      	subs	r3, r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	440b      	add	r3, r1
 8006a18:	3338      	adds	r3, #56	@ 0x38
 8006a1a:	681b      	ldr	r3, [r3, #0]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f008 fc10 	bl	800f25a <USB_GetCurrentFrame>
 8006a3a:	4603      	mov	r3, r0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f008 fbeb 	bl	800f22c <USB_GetHostSpeed>
 8006a56:	4603      	mov	r3, r0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8006a6c:	78fa      	ldrb	r2, [r7, #3]
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	4613      	mov	r3, r2
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	1a9b      	subs	r3, r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	331a      	adds	r3, #26
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8006a80:	78fa      	ldrb	r2, [r7, #3]
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	4613      	mov	r3, r2
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	331b      	adds	r3, #27
 8006a90:	2200      	movs	r2, #0
 8006a92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8006a94:	78fa      	ldrb	r2, [r7, #3]
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	3325      	adds	r3, #37	@ 0x25
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8006aa8:	78fa      	ldrb	r2, [r7, #3]
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4613      	mov	r3, r2
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	1a9b      	subs	r3, r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	3324      	adds	r3, #36	@ 0x24
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b086      	sub	sp, #24
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	78fa      	ldrb	r2, [r7, #3]
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f008 f9e0 	bl	800eeae <USB_ReadChInterrupts>
 8006aee:	4603      	mov	r3, r0
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d11a      	bne.n	8006b2e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b04:	461a      	mov	r2, r3
 8006b06:	2304      	movs	r3, #4
 8006b08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006b0a:	78fa      	ldrb	r2, [r7, #3]
 8006b0c:	6879      	ldr	r1, [r7, #4]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	1a9b      	subs	r3, r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	440b      	add	r3, r1
 8006b18:	334d      	adds	r3, #77	@ 0x4d
 8006b1a:	2207      	movs	r2, #7
 8006b1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	78fa      	ldrb	r2, [r7, #3]
 8006b24:	4611      	mov	r1, r2
 8006b26:	4618      	mov	r0, r3
 8006b28:	f008 ff5f 	bl	800f9ea <USB_HC_Halt>
 8006b2c:	e09e      	b.n	8006c6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	78fa      	ldrb	r2, [r7, #3]
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f008 f9b9 	bl	800eeae <USB_ReadChInterrupts>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b46:	d11b      	bne.n	8006b80 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b54:	461a      	mov	r2, r3
 8006b56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8006b5c:	78fa      	ldrb	r2, [r7, #3]
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	4613      	mov	r3, r2
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	334d      	adds	r3, #77	@ 0x4d
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	78fa      	ldrb	r2, [r7, #3]
 8006b76:	4611      	mov	r1, r2
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f008 ff36 	bl	800f9ea <USB_HC_Halt>
 8006b7e:	e075      	b.n	8006c6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	78fa      	ldrb	r2, [r7, #3]
 8006b86:	4611      	mov	r1, r2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f008 f990 	bl	800eeae <USB_ReadChInterrupts>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d11a      	bne.n	8006bce <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	334d      	adds	r3, #77	@ 0x4d
 8006bba:	2206      	movs	r2, #6
 8006bbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	78fa      	ldrb	r2, [r7, #3]
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f008 ff0f 	bl	800f9ea <USB_HC_Halt>
 8006bcc:	e04e      	b.n	8006c6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	78fa      	ldrb	r2, [r7, #3]
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f008 f969 	bl	800eeae <USB_ReadChInterrupts>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006be6:	d11b      	bne.n	8006c20 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006bfc:	78fa      	ldrb	r2, [r7, #3]
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	4613      	mov	r3, r2
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	1a9b      	subs	r3, r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	334d      	adds	r3, #77	@ 0x4d
 8006c0c:	2209      	movs	r2, #9
 8006c0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	78fa      	ldrb	r2, [r7, #3]
 8006c16:	4611      	mov	r1, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f008 fee6 	bl	800f9ea <USB_HC_Halt>
 8006c1e:	e025      	b.n	8006c6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	4611      	mov	r1, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f008 f940 	bl	800eeae <USB_ReadChInterrupts>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c34:	2b80      	cmp	r3, #128	@ 0x80
 8006c36:	d119      	bne.n	8006c6c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c44:	461a      	mov	r2, r3
 8006c46:	2380      	movs	r3, #128	@ 0x80
 8006c48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	1a9b      	subs	r3, r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	440b      	add	r3, r1
 8006c58:	334d      	adds	r3, #77	@ 0x4d
 8006c5a:	2207      	movs	r2, #7
 8006c5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	78fa      	ldrb	r2, [r7, #3]
 8006c64:	4611      	mov	r1, r2
 8006c66:	4618      	mov	r0, r3
 8006c68:	f008 febf 	bl	800f9ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	78fa      	ldrb	r2, [r7, #3]
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f008 f91a 	bl	800eeae <USB_ReadChInterrupts>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c84:	d112      	bne.n	8006cac <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f008 feab 	bl	800f9ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ca6:	6093      	str	r3, [r2, #8]
 8006ca8:	f000 bd75 	b.w	8007796 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	78fa      	ldrb	r2, [r7, #3]
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f008 f8fa 	bl	800eeae <USB_ReadChInterrupts>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	f040 8128 	bne.w	8006f16 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2320      	movs	r3, #32
 8006cd6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006cd8:	78fa      	ldrb	r2, [r7, #3]
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	331b      	adds	r3, #27
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d119      	bne.n	8006d22 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006cee:	78fa      	ldrb	r2, [r7, #3]
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	440b      	add	r3, r1
 8006cfc:	331b      	adds	r3, #27
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	78fa      	ldrb	r2, [r7, #3]
 8006d12:	0151      	lsls	r1, r2, #5
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	440a      	add	r2, r1
 8006d18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d20:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	799b      	ldrb	r3, [r3, #6]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d01b      	beq.n	8006d62 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006d2a:	78fa      	ldrb	r2, [r7, #3]
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	3330      	adds	r3, #48	@ 0x30
 8006d3a:	6819      	ldr	r1, [r3, #0]
 8006d3c:	78fb      	ldrb	r3, [r7, #3]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	1ac9      	subs	r1, r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4613      	mov	r3, r2
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	1a9b      	subs	r3, r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4403      	add	r3, r0
 8006d5e:	3338      	adds	r3, #56	@ 0x38
 8006d60:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8006d62:	78fa      	ldrb	r2, [r7, #3]
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	334d      	adds	r3, #77	@ 0x4d
 8006d72:	2201      	movs	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	3344      	adds	r3, #68	@ 0x44
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d96:	461a      	mov	r2, r3
 8006d98:	2301      	movs	r3, #1
 8006d9a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006d9c:	78fa      	ldrb	r2, [r7, #3]
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	011b      	lsls	r3, r3, #4
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	3326      	adds	r3, #38	@ 0x26
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00a      	beq.n	8006dc8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	011b      	lsls	r3, r3, #4
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3326      	adds	r3, #38	@ 0x26
 8006dc2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d110      	bne.n	8006dea <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	78fa      	ldrb	r2, [r7, #3]
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f008 fe0a 	bl	800f9ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de2:	461a      	mov	r2, r3
 8006de4:	2310      	movs	r3, #16
 8006de6:	6093      	str	r3, [r2, #8]
 8006de8:	e03d      	b.n	8006e66 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	4613      	mov	r3, r2
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	440b      	add	r3, r1
 8006df8:	3326      	adds	r3, #38	@ 0x26
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d00a      	beq.n	8006e16 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8006e00:	78fa      	ldrb	r2, [r7, #3]
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	4613      	mov	r3, r2
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	1a9b      	subs	r3, r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	3326      	adds	r3, #38	@ 0x26
 8006e10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d127      	bne.n	8006e66 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	78fa      	ldrb	r2, [r7, #3]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e34:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	1a9b      	subs	r3, r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	440b      	add	r3, r1
 8006e44:	334c      	adds	r3, #76	@ 0x4c
 8006e46:	2201      	movs	r2, #1
 8006e48:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006e4a:	78fa      	ldrb	r2, [r7, #3]
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	1a9b      	subs	r3, r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	334c      	adds	r3, #76	@ 0x4c
 8006e5a:	781a      	ldrb	r2, [r3, #0]
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f00e f89b 	bl	8014f9c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	799b      	ldrb	r3, [r3, #6]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d13b      	bne.n	8006ee6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8006e6e:	78fa      	ldrb	r2, [r7, #3]
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	4613      	mov	r3, r2
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	1a9b      	subs	r3, r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	440b      	add	r3, r1
 8006e7c:	3338      	adds	r3, #56	@ 0x38
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	78fa      	ldrb	r2, [r7, #3]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4613      	mov	r3, r2
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4403      	add	r3, r0
 8006e8e:	3328      	adds	r3, #40	@ 0x28
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	440b      	add	r3, r1
 8006e94:	1e59      	subs	r1, r3, #1
 8006e96:	78fa      	ldrb	r2, [r7, #3]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4403      	add	r3, r0
 8006ea4:	3328      	adds	r3, #40	@ 0x28
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 8470 	beq.w	8007796 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8006eb6:	78fa      	ldrb	r2, [r7, #3]
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	1a9b      	subs	r3, r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	333c      	adds	r3, #60	@ 0x3c
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	78fa      	ldrb	r2, [r7, #3]
 8006eca:	f083 0301 	eor.w	r3, r3, #1
 8006ece:	b2d8      	uxtb	r0, r3
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	333c      	adds	r3, #60	@ 0x3c
 8006ede:	4602      	mov	r2, r0
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	f000 bc58 	b.w	8007796 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8006ee6:	78fa      	ldrb	r2, [r7, #3]
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	011b      	lsls	r3, r3, #4
 8006eee:	1a9b      	subs	r3, r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	333c      	adds	r3, #60	@ 0x3c
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	f083 0301 	eor.w	r3, r3, #1
 8006efe:	b2d8      	uxtb	r0, r3
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	1a9b      	subs	r3, r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	333c      	adds	r3, #60	@ 0x3c
 8006f0e:	4602      	mov	r2, r0
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	f000 bc40 	b.w	8007796 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f007 ffc5 	bl	800eeae <USB_ReadChInterrupts>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f003 0320 	and.w	r3, r3, #32
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d131      	bne.n	8006f92 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006f2e:	78fb      	ldrb	r3, [r7, #3]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2320      	movs	r3, #32
 8006f3e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	1a9b      	subs	r3, r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	331a      	adds	r3, #26
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	f040 841f 	bne.w	8007796 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8006f58:	78fa      	ldrb	r2, [r7, #3]
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	011b      	lsls	r3, r3, #4
 8006f60:	1a9b      	subs	r3, r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	331b      	adds	r3, #27
 8006f68:	2201      	movs	r2, #1
 8006f6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006f6c:	78fa      	ldrb	r2, [r7, #3]
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	4613      	mov	r3, r2
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	1a9b      	subs	r3, r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	334d      	adds	r3, #77	@ 0x4d
 8006f7c:	2203      	movs	r2, #3
 8006f7e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	78fa      	ldrb	r2, [r7, #3]
 8006f86:	4611      	mov	r1, r2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f008 fd2e 	bl	800f9ea <USB_HC_Halt>
 8006f8e:	f000 bc02 	b.w	8007796 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	78fa      	ldrb	r2, [r7, #3]
 8006f98:	4611      	mov	r1, r2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f007 ff87 	bl	800eeae <USB_ReadChInterrupts>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	f040 8305 	bne.w	80075b6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006fac:	78fb      	ldrb	r3, [r7, #3]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2302      	movs	r3, #2
 8006fbc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	334d      	adds	r3, #77	@ 0x4d
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d114      	bne.n	8006ffe <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006fd4:	78fa      	ldrb	r2, [r7, #3]
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	1a9b      	subs	r3, r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	440b      	add	r3, r1
 8006fe2:	334d      	adds	r3, #77	@ 0x4d
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006fe8:	78fa      	ldrb	r2, [r7, #3]
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	4613      	mov	r3, r2
 8006fee:	011b      	lsls	r3, r3, #4
 8006ff0:	1a9b      	subs	r3, r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	334c      	adds	r3, #76	@ 0x4c
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e2cc      	b.n	8007598 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006ffe:	78fa      	ldrb	r2, [r7, #3]
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	011b      	lsls	r3, r3, #4
 8007006:	1a9b      	subs	r3, r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	334d      	adds	r3, #77	@ 0x4d
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b06      	cmp	r3, #6
 8007012:	d114      	bne.n	800703e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	4613      	mov	r3, r2
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	1a9b      	subs	r3, r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	440b      	add	r3, r1
 8007022:	334d      	adds	r3, #77	@ 0x4d
 8007024:	2202      	movs	r2, #2
 8007026:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8007028:	78fa      	ldrb	r2, [r7, #3]
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4613      	mov	r3, r2
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	1a9b      	subs	r3, r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	334c      	adds	r3, #76	@ 0x4c
 8007038:	2205      	movs	r2, #5
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	e2ac      	b.n	8007598 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	334d      	adds	r3, #77	@ 0x4d
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b07      	cmp	r3, #7
 8007052:	d00b      	beq.n	800706c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8007054:	78fa      	ldrb	r2, [r7, #3]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	334d      	adds	r3, #77	@ 0x4d
 8007064:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007066:	2b09      	cmp	r3, #9
 8007068:	f040 80a6 	bne.w	80071b8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800706c:	78fa      	ldrb	r2, [r7, #3]
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	4613      	mov	r3, r2
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	1a9b      	subs	r3, r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	440b      	add	r3, r1
 800707a:	334d      	adds	r3, #77	@ 0x4d
 800707c:	2202      	movs	r2, #2
 800707e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	4613      	mov	r3, r2
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	1a9b      	subs	r3, r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	3344      	adds	r3, #68	@ 0x44
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	1c59      	adds	r1, r3, #1
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4613      	mov	r3, r2
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4403      	add	r3, r0
 80070a0:	3344      	adds	r3, #68	@ 0x44
 80070a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80070a4:	78fa      	ldrb	r2, [r7, #3]
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	4613      	mov	r3, r2
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	1a9b      	subs	r3, r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	440b      	add	r3, r1
 80070b2:	3344      	adds	r3, #68	@ 0x44
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d943      	bls.n	8007142 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	1a9b      	subs	r3, r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	3344      	adds	r3, #68	@ 0x44
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80070ce:	78fa      	ldrb	r2, [r7, #3]
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	4613      	mov	r3, r2
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	1a9b      	subs	r3, r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	440b      	add	r3, r1
 80070dc:	331a      	adds	r3, #26
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d123      	bne.n	800712c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80070e4:	78fa      	ldrb	r2, [r7, #3]
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	4613      	mov	r3, r2
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	1a9b      	subs	r3, r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	331b      	adds	r3, #27
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80070f8:	78fa      	ldrb	r2, [r7, #3]
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	4613      	mov	r3, r2
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	1a9b      	subs	r3, r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	440b      	add	r3, r1
 8007106:	331c      	adds	r3, #28
 8007108:	2200      	movs	r2, #0
 800710a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	4413      	add	r3, r2
 8007114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	78fa      	ldrb	r2, [r7, #3]
 800711c:	0151      	lsls	r1, r2, #5
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	440a      	add	r2, r1
 8007122:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800712a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800712c:	78fa      	ldrb	r2, [r7, #3]
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	4613      	mov	r3, r2
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	334c      	adds	r3, #76	@ 0x4c
 800713c:	2204      	movs	r2, #4
 800713e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007140:	e229      	b.n	8007596 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007142:	78fa      	ldrb	r2, [r7, #3]
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	1a9b      	subs	r3, r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	334c      	adds	r3, #76	@ 0x4c
 8007152:	2202      	movs	r2, #2
 8007154:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007156:	78fa      	ldrb	r2, [r7, #3]
 8007158:	6879      	ldr	r1, [r7, #4]
 800715a:	4613      	mov	r3, r2
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	1a9b      	subs	r3, r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	440b      	add	r3, r1
 8007164:	3326      	adds	r3, #38	@ 0x26
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00b      	beq.n	8007184 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800716c:	78fa      	ldrb	r2, [r7, #3]
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	4613      	mov	r3, r2
 8007172:	011b      	lsls	r3, r3, #4
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	3326      	adds	r3, #38	@ 0x26
 800717c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800717e:	2b02      	cmp	r3, #2
 8007180:	f040 8209 	bne.w	8007596 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	4413      	add	r3, r2
 800718c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800719a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071b0:	461a      	mov	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80071b6:	e1ee      	b.n	8007596 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	4613      	mov	r3, r2
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	1a9b      	subs	r3, r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	440b      	add	r3, r1
 80071c6:	334d      	adds	r3, #77	@ 0x4d
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b05      	cmp	r3, #5
 80071cc:	f040 80c8 	bne.w	8007360 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80071d0:	78fa      	ldrb	r2, [r7, #3]
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	4613      	mov	r3, r2
 80071d6:	011b      	lsls	r3, r3, #4
 80071d8:	1a9b      	subs	r3, r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	440b      	add	r3, r1
 80071de:	334d      	adds	r3, #77	@ 0x4d
 80071e0:	2202      	movs	r2, #2
 80071e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80071e4:	78fa      	ldrb	r2, [r7, #3]
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	4613      	mov	r3, r2
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	1a9b      	subs	r3, r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	440b      	add	r3, r1
 80071f2:	331b      	adds	r3, #27
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	f040 81ce 	bne.w	8007598 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80071fc:	78fa      	ldrb	r2, [r7, #3]
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	4613      	mov	r3, r2
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	3326      	adds	r3, #38	@ 0x26
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b03      	cmp	r3, #3
 8007210:	d16b      	bne.n	80072ea <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8007212:	78fa      	ldrb	r2, [r7, #3]
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	4613      	mov	r3, r2
 8007218:	011b      	lsls	r3, r3, #4
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	440b      	add	r3, r1
 8007220:	3348      	adds	r3, #72	@ 0x48
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	1c59      	adds	r1, r3, #1
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4613      	mov	r3, r2
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	1a9b      	subs	r3, r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4403      	add	r3, r0
 8007232:	3348      	adds	r3, #72	@ 0x48
 8007234:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8007236:	78fa      	ldrb	r2, [r7, #3]
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	440b      	add	r3, r1
 8007244:	3348      	adds	r3, #72	@ 0x48
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b02      	cmp	r3, #2
 800724a:	d943      	bls.n	80072d4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800724c:	78fa      	ldrb	r2, [r7, #3]
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	4613      	mov	r3, r2
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	1a9b      	subs	r3, r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	440b      	add	r3, r1
 800725a:	3348      	adds	r3, #72	@ 0x48
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8007260:	78fa      	ldrb	r2, [r7, #3]
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	4613      	mov	r3, r2
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	1a9b      	subs	r3, r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	440b      	add	r3, r1
 800726e:	331b      	adds	r3, #27
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8007274:	78fa      	ldrb	r2, [r7, #3]
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	4613      	mov	r3, r2
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	3344      	adds	r3, #68	@ 0x44
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b02      	cmp	r3, #2
 8007288:	d809      	bhi.n	800729e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800728a:	78fa      	ldrb	r2, [r7, #3]
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	4613      	mov	r3, r2
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	440b      	add	r3, r1
 8007298:	331c      	adds	r3, #28
 800729a:	2201      	movs	r2, #1
 800729c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	78fa      	ldrb	r2, [r7, #3]
 80072ae:	0151      	lsls	r1, r2, #5
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	440a      	add	r2, r1
 80072b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072bc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80072be:	78fa      	ldrb	r2, [r7, #3]
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	4613      	mov	r3, r2
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	1a9b      	subs	r3, r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	334c      	adds	r3, #76	@ 0x4c
 80072ce:	2204      	movs	r2, #4
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	e014      	b.n	80072fe <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80072d4:	78fa      	ldrb	r2, [r7, #3]
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	011b      	lsls	r3, r3, #4
 80072dc:	1a9b      	subs	r3, r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	334c      	adds	r3, #76	@ 0x4c
 80072e4:	2202      	movs	r2, #2
 80072e6:	701a      	strb	r2, [r3, #0]
 80072e8:	e009      	b.n	80072fe <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80072ea:	78fa      	ldrb	r2, [r7, #3]
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	4613      	mov	r3, r2
 80072f0:	011b      	lsls	r3, r3, #4
 80072f2:	1a9b      	subs	r3, r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	334c      	adds	r3, #76	@ 0x4c
 80072fa:	2202      	movs	r2, #2
 80072fc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	6879      	ldr	r1, [r7, #4]
 8007302:	4613      	mov	r3, r2
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	1a9b      	subs	r3, r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	440b      	add	r3, r1
 800730c:	3326      	adds	r3, #38	@ 0x26
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00b      	beq.n	800732c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007314:	78fa      	ldrb	r2, [r7, #3]
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	4613      	mov	r3, r2
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	1a9b      	subs	r3, r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	3326      	adds	r3, #38	@ 0x26
 8007324:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007326:	2b02      	cmp	r3, #2
 8007328:	f040 8136 	bne.w	8007598 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	4413      	add	r3, r2
 8007334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007342:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800734a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	4413      	add	r3, r2
 8007354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007358:	461a      	mov	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	e11b      	b.n	8007598 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4613      	mov	r3, r2
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	1a9b      	subs	r3, r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	334d      	adds	r3, #77	@ 0x4d
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b03      	cmp	r3, #3
 8007374:	f040 8081 	bne.w	800747a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007378:	78fa      	ldrb	r2, [r7, #3]
 800737a:	6879      	ldr	r1, [r7, #4]
 800737c:	4613      	mov	r3, r2
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	1a9b      	subs	r3, r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	440b      	add	r3, r1
 8007386:	334d      	adds	r3, #77	@ 0x4d
 8007388:	2202      	movs	r2, #2
 800738a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800738c:	78fa      	ldrb	r2, [r7, #3]
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	4613      	mov	r3, r2
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	440b      	add	r3, r1
 800739a:	331b      	adds	r3, #27
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	f040 80fa 	bne.w	8007598 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80073a4:	78fa      	ldrb	r2, [r7, #3]
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	4613      	mov	r3, r2
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	1a9b      	subs	r3, r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	440b      	add	r3, r1
 80073b2:	334c      	adds	r3, #76	@ 0x4c
 80073b4:	2202      	movs	r2, #2
 80073b6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	78fa      	ldrb	r2, [r7, #3]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073d6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	78fa      	ldrb	r2, [r7, #3]
 80073e8:	0151      	lsls	r1, r2, #5
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	440a      	add	r2, r1
 80073ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	0151      	lsls	r1, r2, #5
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	440a      	add	r2, r1
 800740e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007412:	f023 0320 	bic.w	r3, r3, #32
 8007416:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007418:	78fa      	ldrb	r2, [r7, #3]
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	3326      	adds	r3, #38	@ 0x26
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00b      	beq.n	8007446 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800742e:	78fa      	ldrb	r2, [r7, #3]
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	4613      	mov	r3, r2
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	1a9b      	subs	r3, r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	440b      	add	r3, r1
 800743c:	3326      	adds	r3, #38	@ 0x26
 800743e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007440:	2b02      	cmp	r3, #2
 8007442:	f040 80a9 	bne.w	8007598 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007446:	78fb      	ldrb	r3, [r7, #3]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	4413      	add	r3, r2
 800744e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800745c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007464:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	4413      	add	r3, r2
 800746e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007472:	461a      	mov	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	e08e      	b.n	8007598 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800747a:	78fa      	ldrb	r2, [r7, #3]
 800747c:	6879      	ldr	r1, [r7, #4]
 800747e:	4613      	mov	r3, r2
 8007480:	011b      	lsls	r3, r3, #4
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	440b      	add	r3, r1
 8007488:	334d      	adds	r3, #77	@ 0x4d
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b04      	cmp	r3, #4
 800748e:	d143      	bne.n	8007518 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	4613      	mov	r3, r2
 8007496:	011b      	lsls	r3, r3, #4
 8007498:	1a9b      	subs	r3, r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	334d      	adds	r3, #77	@ 0x4d
 80074a0:	2202      	movs	r2, #2
 80074a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80074a4:	78fa      	ldrb	r2, [r7, #3]
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	4613      	mov	r3, r2
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	1a9b      	subs	r3, r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	440b      	add	r3, r1
 80074b2:	334c      	adds	r3, #76	@ 0x4c
 80074b4:	2202      	movs	r2, #2
 80074b6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	1a9b      	subs	r3, r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	3326      	adds	r3, #38	@ 0x26
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	4613      	mov	r3, r2
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	1a9b      	subs	r3, r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	440b      	add	r3, r1
 80074dc:	3326      	adds	r3, #38	@ 0x26
 80074de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d159      	bne.n	8007598 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80074fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007502:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	4413      	add	r3, r2
 800750c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007510:	461a      	mov	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	e03f      	b.n	8007598 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8007518:	78fa      	ldrb	r2, [r7, #3]
 800751a:	6879      	ldr	r1, [r7, #4]
 800751c:	4613      	mov	r3, r2
 800751e:	011b      	lsls	r3, r3, #4
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	334d      	adds	r3, #77	@ 0x4d
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b08      	cmp	r3, #8
 800752c:	d126      	bne.n	800757c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800752e:	78fa      	ldrb	r2, [r7, #3]
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	4613      	mov	r3, r2
 8007534:	011b      	lsls	r3, r3, #4
 8007536:	1a9b      	subs	r3, r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	440b      	add	r3, r1
 800753c:	334d      	adds	r3, #77	@ 0x4d
 800753e:	2202      	movs	r2, #2
 8007540:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007542:	78fa      	ldrb	r2, [r7, #3]
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	4613      	mov	r3, r2
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	1a9b      	subs	r3, r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	440b      	add	r3, r1
 8007550:	3344      	adds	r3, #68	@ 0x44
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	1c59      	adds	r1, r3, #1
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4613      	mov	r3, r2
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	1a9b      	subs	r3, r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4403      	add	r3, r0
 8007562:	3344      	adds	r3, #68	@ 0x44
 8007564:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	4613      	mov	r3, r2
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	1a9b      	subs	r3, r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	440b      	add	r3, r1
 8007574:	334c      	adds	r3, #76	@ 0x4c
 8007576:	2204      	movs	r2, #4
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	e00d      	b.n	8007598 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800757c:	78fa      	ldrb	r2, [r7, #3]
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	4613      	mov	r3, r2
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	334d      	adds	r3, #77	@ 0x4d
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b02      	cmp	r3, #2
 8007590:	f000 8100 	beq.w	8007794 <HCD_HC_IN_IRQHandler+0xcca>
 8007594:	e000      	b.n	8007598 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007596:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	4613      	mov	r3, r2
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	334c      	adds	r3, #76	@ 0x4c
 80075a8:	781a      	ldrb	r2, [r3, #0]
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f00d fcf4 	bl	8014f9c <HAL_HCD_HC_NotifyURBChange_Callback>
 80075b4:	e0ef      	b.n	8007796 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	4611      	mov	r1, r2
 80075be:	4618      	mov	r0, r3
 80075c0:	f007 fc75 	bl	800eeae <USB_ReadChInterrupts>
 80075c4:	4603      	mov	r3, r0
 80075c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ca:	2b40      	cmp	r3, #64	@ 0x40
 80075cc:	d12f      	bne.n	800762e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075da:	461a      	mov	r2, r3
 80075dc:	2340      	movs	r3, #64	@ 0x40
 80075de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80075e0:	78fa      	ldrb	r2, [r7, #3]
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4613      	mov	r3, r2
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	1a9b      	subs	r3, r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	334d      	adds	r3, #77	@ 0x4d
 80075f0:	2205      	movs	r2, #5
 80075f2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80075f4:	78fa      	ldrb	r2, [r7, #3]
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	4613      	mov	r3, r2
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	1a9b      	subs	r3, r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	331a      	adds	r3, #26
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d109      	bne.n	800761e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800760a:	78fa      	ldrb	r2, [r7, #3]
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	4613      	mov	r3, r2
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	1a9b      	subs	r3, r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	440b      	add	r3, r1
 8007618:	3344      	adds	r3, #68	@ 0x44
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	78fa      	ldrb	r2, [r7, #3]
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f008 f9df 	bl	800f9ea <USB_HC_Halt>
 800762c:	e0b3      	b.n	8007796 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	78fa      	ldrb	r2, [r7, #3]
 8007634:	4611      	mov	r1, r2
 8007636:	4618      	mov	r0, r3
 8007638:	f007 fc39 	bl	800eeae <USB_ReadChInterrupts>
 800763c:	4603      	mov	r3, r0
 800763e:	f003 0310 	and.w	r3, r3, #16
 8007642:	2b10      	cmp	r3, #16
 8007644:	f040 80a7 	bne.w	8007796 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007648:	78fa      	ldrb	r2, [r7, #3]
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	4613      	mov	r3, r2
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	1a9b      	subs	r3, r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	440b      	add	r3, r1
 8007656:	3326      	adds	r3, #38	@ 0x26
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b03      	cmp	r3, #3
 800765c:	d11b      	bne.n	8007696 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800765e:	78fa      	ldrb	r2, [r7, #3]
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	4613      	mov	r3, r2
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	440b      	add	r3, r1
 800766c:	3344      	adds	r3, #68	@ 0x44
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8007672:	78fa      	ldrb	r2, [r7, #3]
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	1a9b      	subs	r3, r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	334d      	adds	r3, #77	@ 0x4d
 8007682:	2204      	movs	r2, #4
 8007684:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	78fa      	ldrb	r2, [r7, #3]
 800768c:	4611      	mov	r1, r2
 800768e:	4618      	mov	r0, r3
 8007690:	f008 f9ab 	bl	800f9ea <USB_HC_Halt>
 8007694:	e03f      	b.n	8007716 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007696:	78fa      	ldrb	r2, [r7, #3]
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	4613      	mov	r3, r2
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	1a9b      	subs	r3, r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	440b      	add	r3, r1
 80076a4:	3326      	adds	r3, #38	@ 0x26
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80076ac:	78fa      	ldrb	r2, [r7, #3]
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	3326      	adds	r3, #38	@ 0x26
 80076bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d129      	bne.n	8007716 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	1a9b      	subs	r3, r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	440b      	add	r3, r1
 80076d0:	3344      	adds	r3, #68	@ 0x44
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	799b      	ldrb	r3, [r3, #6]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <HCD_HC_IN_IRQHandler+0xc2a>
 80076de:	78fa      	ldrb	r2, [r7, #3]
 80076e0:	6879      	ldr	r1, [r7, #4]
 80076e2:	4613      	mov	r3, r2
 80076e4:	011b      	lsls	r3, r3, #4
 80076e6:	1a9b      	subs	r3, r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	331b      	adds	r3, #27
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d110      	bne.n	8007716 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	4613      	mov	r3, r2
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	1a9b      	subs	r3, r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	334d      	adds	r3, #77	@ 0x4d
 8007704:	2204      	movs	r2, #4
 8007706:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	78fa      	ldrb	r2, [r7, #3]
 800770e:	4611      	mov	r1, r2
 8007710:	4618      	mov	r0, r3
 8007712:	f008 f96a 	bl	800f9ea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007716:	78fa      	ldrb	r2, [r7, #3]
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	4613      	mov	r3, r2
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	1a9b      	subs	r3, r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	440b      	add	r3, r1
 8007724:	331b      	adds	r3, #27
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d129      	bne.n	8007780 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800772c:	78fa      	ldrb	r2, [r7, #3]
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	4613      	mov	r3, r2
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	1a9b      	subs	r3, r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	440b      	add	r3, r1
 800773a:	331b      	adds	r3, #27
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	4413      	add	r3, r2
 8007748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	78fa      	ldrb	r2, [r7, #3]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	440a      	add	r2, r1
 8007756:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800775a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800775e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	4413      	add	r3, r2
 8007768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	78fa      	ldrb	r2, [r7, #3]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	440a      	add	r2, r1
 8007776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800777a:	f043 0320 	orr.w	r3, r3, #32
 800777e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	4413      	add	r3, r2
 8007788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800778c:	461a      	mov	r2, r3
 800778e:	2310      	movs	r3, #16
 8007790:	6093      	str	r3, [r2, #8]
 8007792:	e000      	b.n	8007796 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8007794:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	78fa      	ldrb	r2, [r7, #3]
 80077b8:	4611      	mov	r1, r2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f007 fb77 	bl	800eeae <USB_ReadChInterrupts>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f003 0304 	and.w	r3, r3, #4
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d11b      	bne.n	8007802 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077d6:	461a      	mov	r2, r3
 80077d8:	2304      	movs	r3, #4
 80077da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80077dc:	78fa      	ldrb	r2, [r7, #3]
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	4613      	mov	r3, r2
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	1a9b      	subs	r3, r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	334d      	adds	r3, #77	@ 0x4d
 80077ec:	2207      	movs	r2, #7
 80077ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	78fa      	ldrb	r2, [r7, #3]
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f008 f8f6 	bl	800f9ea <USB_HC_Halt>
 80077fe:	f000 bc89 	b.w	8008114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	78fa      	ldrb	r2, [r7, #3]
 8007808:	4611      	mov	r1, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f007 fb4f 	bl	800eeae <USB_ReadChInterrupts>
 8007810:	4603      	mov	r3, r0
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b20      	cmp	r3, #32
 8007818:	f040 8082 	bne.w	8007920 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	4413      	add	r3, r2
 8007824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007828:	461a      	mov	r2, r3
 800782a:	2320      	movs	r3, #32
 800782c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	4613      	mov	r3, r2
 8007834:	011b      	lsls	r3, r3, #4
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	3319      	adds	r3, #25
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d124      	bne.n	800788e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8007844:	78fa      	ldrb	r2, [r7, #3]
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	4613      	mov	r3, r2
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	440b      	add	r3, r1
 8007852:	3319      	adds	r3, #25
 8007854:	2200      	movs	r2, #0
 8007856:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007858:	78fa      	ldrb	r2, [r7, #3]
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	4613      	mov	r3, r2
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	440b      	add	r3, r1
 8007866:	334c      	adds	r3, #76	@ 0x4c
 8007868:	2202      	movs	r2, #2
 800786a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800786c:	78fa      	ldrb	r2, [r7, #3]
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	4613      	mov	r3, r2
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	1a9b      	subs	r3, r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	440b      	add	r3, r1
 800787a:	334d      	adds	r3, #77	@ 0x4d
 800787c:	2203      	movs	r2, #3
 800787e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	4611      	mov	r1, r2
 8007888:	4618      	mov	r0, r3
 800788a:	f008 f8ae 	bl	800f9ea <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800788e:	78fa      	ldrb	r2, [r7, #3]
 8007890:	6879      	ldr	r1, [r7, #4]
 8007892:	4613      	mov	r3, r2
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	1a9b      	subs	r3, r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	440b      	add	r3, r1
 800789c:	331a      	adds	r3, #26
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	f040 8437 	bne.w	8008114 <HCD_HC_OUT_IRQHandler+0x978>
 80078a6:	78fa      	ldrb	r2, [r7, #3]
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	4613      	mov	r3, r2
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	440b      	add	r3, r1
 80078b4:	331b      	adds	r3, #27
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f040 842b 	bne.w	8008114 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80078be:	78fa      	ldrb	r2, [r7, #3]
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	4613      	mov	r3, r2
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	440b      	add	r3, r1
 80078cc:	3326      	adds	r3, #38	@ 0x26
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d009      	beq.n	80078e8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80078d4:	78fa      	ldrb	r2, [r7, #3]
 80078d6:	6879      	ldr	r1, [r7, #4]
 80078d8:	4613      	mov	r3, r2
 80078da:	011b      	lsls	r3, r3, #4
 80078dc:	1a9b      	subs	r3, r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	440b      	add	r3, r1
 80078e2:	331b      	adds	r3, #27
 80078e4:	2201      	movs	r2, #1
 80078e6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80078e8:	78fa      	ldrb	r2, [r7, #3]
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	4613      	mov	r3, r2
 80078ee:	011b      	lsls	r3, r3, #4
 80078f0:	1a9b      	subs	r3, r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	334d      	adds	r3, #77	@ 0x4d
 80078f8:	2203      	movs	r2, #3
 80078fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	78fa      	ldrb	r2, [r7, #3]
 8007902:	4611      	mov	r1, r2
 8007904:	4618      	mov	r0, r3
 8007906:	f008 f870 	bl	800f9ea <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800790a:	78fa      	ldrb	r2, [r7, #3]
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	4613      	mov	r3, r2
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	1a9b      	subs	r3, r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	440b      	add	r3, r1
 8007918:	3344      	adds	r3, #68	@ 0x44
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	e3f9      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	4611      	mov	r1, r2
 8007928:	4618      	mov	r0, r3
 800792a:	f007 fac0 	bl	800eeae <USB_ReadChInterrupts>
 800792e:	4603      	mov	r3, r0
 8007930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007938:	d111      	bne.n	800795e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	4413      	add	r3, r2
 8007942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007946:	461a      	mov	r2, r3
 8007948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800794c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	78fa      	ldrb	r2, [r7, #3]
 8007954:	4611      	mov	r1, r2
 8007956:	4618      	mov	r0, r3
 8007958:	f008 f847 	bl	800f9ea <USB_HC_Halt>
 800795c:	e3da      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	4611      	mov	r1, r2
 8007966:	4618      	mov	r0, r3
 8007968:	f007 faa1 	bl	800eeae <USB_ReadChInterrupts>
 800796c:	4603      	mov	r3, r0
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b01      	cmp	r3, #1
 8007974:	d168      	bne.n	8007a48 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	4613      	mov	r3, r2
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	1a9b      	subs	r3, r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	440b      	add	r3, r1
 8007984:	3344      	adds	r3, #68	@ 0x44
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	4611      	mov	r1, r2
 8007992:	4618      	mov	r0, r3
 8007994:	f007 fa8b 	bl	800eeae <USB_ReadChInterrupts>
 8007998:	4603      	mov	r3, r0
 800799a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799e:	2b40      	cmp	r3, #64	@ 0x40
 80079a0:	d112      	bne.n	80079c8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80079a2:	78fa      	ldrb	r2, [r7, #3]
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	4613      	mov	r3, r2
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	440b      	add	r3, r1
 80079b0:	3319      	adds	r3, #25
 80079b2:	2201      	movs	r2, #1
 80079b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80079b6:	78fb      	ldrb	r3, [r7, #3]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c2:	461a      	mov	r2, r3
 80079c4:	2340      	movs	r3, #64	@ 0x40
 80079c6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80079c8:	78fa      	ldrb	r2, [r7, #3]
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	4613      	mov	r3, r2
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	331b      	adds	r3, #27
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d019      	beq.n	8007a12 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	011b      	lsls	r3, r3, #4
 80079e6:	1a9b      	subs	r3, r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	331b      	adds	r3, #27
 80079ee:	2200      	movs	r2, #0
 80079f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	78fa      	ldrb	r2, [r7, #3]
 8007a02:	0151      	lsls	r1, r2, #5
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	440a      	add	r2, r1
 8007a08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a10:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007a12:	78fb      	ldrb	r3, [r7, #3]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a1e:	461a      	mov	r2, r3
 8007a20:	2301      	movs	r3, #1
 8007a22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8007a24:	78fa      	ldrb	r2, [r7, #3]
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	011b      	lsls	r3, r3, #4
 8007a2c:	1a9b      	subs	r3, r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	334d      	adds	r3, #77	@ 0x4d
 8007a34:	2201      	movs	r2, #1
 8007a36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	78fa      	ldrb	r2, [r7, #3]
 8007a3e:	4611      	mov	r1, r2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f007 ffd2 	bl	800f9ea <USB_HC_Halt>
 8007a46:	e365      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f007 fa2c 	bl	800eeae <USB_ReadChInterrupts>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a5c:	2b40      	cmp	r3, #64	@ 0x40
 8007a5e:	d139      	bne.n	8007ad4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8007a60:	78fa      	ldrb	r2, [r7, #3]
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	4613      	mov	r3, r2
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	1a9b      	subs	r3, r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	334d      	adds	r3, #77	@ 0x4d
 8007a70:	2205      	movs	r2, #5
 8007a72:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007a74:	78fa      	ldrb	r2, [r7, #3]
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	1a9b      	subs	r3, r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	440b      	add	r3, r1
 8007a82:	331a      	adds	r3, #26
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007a8a:	78fa      	ldrb	r2, [r7, #3]
 8007a8c:	6879      	ldr	r1, [r7, #4]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	440b      	add	r3, r1
 8007a98:	3319      	adds	r3, #25
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	1a9b      	subs	r3, r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	3344      	adds	r3, #68	@ 0x44
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	78fa      	ldrb	r2, [r7, #3]
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f007 ff95 	bl	800f9ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007acc:	461a      	mov	r2, r3
 8007ace:	2340      	movs	r3, #64	@ 0x40
 8007ad0:	6093      	str	r3, [r2, #8]
 8007ad2:	e31f      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	78fa      	ldrb	r2, [r7, #3]
 8007ada:	4611      	mov	r1, r2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f007 f9e6 	bl	800eeae <USB_ReadChInterrupts>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f003 0308 	and.w	r3, r3, #8
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d11a      	bne.n	8007b22 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af8:	461a      	mov	r2, r3
 8007afa:	2308      	movs	r3, #8
 8007afc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007afe:	78fa      	ldrb	r2, [r7, #3]
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	440b      	add	r3, r1
 8007b0c:	334d      	adds	r3, #77	@ 0x4d
 8007b0e:	2206      	movs	r2, #6
 8007b10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	78fa      	ldrb	r2, [r7, #3]
 8007b18:	4611      	mov	r1, r2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f007 ff65 	bl	800f9ea <USB_HC_Halt>
 8007b20:	e2f8      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	78fa      	ldrb	r2, [r7, #3]
 8007b28:	4611      	mov	r1, r2
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f007 f9bf 	bl	800eeae <USB_ReadChInterrupts>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f003 0310 	and.w	r3, r3, #16
 8007b36:	2b10      	cmp	r3, #16
 8007b38:	d144      	bne.n	8007bc4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007b3a:	78fa      	ldrb	r2, [r7, #3]
 8007b3c:	6879      	ldr	r1, [r7, #4]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	011b      	lsls	r3, r3, #4
 8007b42:	1a9b      	subs	r3, r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	440b      	add	r3, r1
 8007b48:	3344      	adds	r3, #68	@ 0x44
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8007b4e:	78fa      	ldrb	r2, [r7, #3]
 8007b50:	6879      	ldr	r1, [r7, #4]
 8007b52:	4613      	mov	r3, r2
 8007b54:	011b      	lsls	r3, r3, #4
 8007b56:	1a9b      	subs	r3, r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	334d      	adds	r3, #77	@ 0x4d
 8007b5e:	2204      	movs	r2, #4
 8007b60:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	6879      	ldr	r1, [r7, #4]
 8007b66:	4613      	mov	r3, r2
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	1a9b      	subs	r3, r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	440b      	add	r3, r1
 8007b70:	3319      	adds	r3, #25
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d114      	bne.n	8007ba2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8007b78:	78fa      	ldrb	r2, [r7, #3]
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	011b      	lsls	r3, r3, #4
 8007b80:	1a9b      	subs	r3, r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	3318      	adds	r3, #24
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d109      	bne.n	8007ba2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8007b8e:	78fa      	ldrb	r2, [r7, #3]
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	4613      	mov	r3, r2
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	440b      	add	r3, r1
 8007b9c:	3319      	adds	r3, #25
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	78fa      	ldrb	r2, [r7, #3]
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f007 ff1d 	bl	800f9ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	2310      	movs	r3, #16
 8007bc0:	6093      	str	r3, [r2, #8]
 8007bc2:	e2a7      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	78fa      	ldrb	r2, [r7, #3]
 8007bca:	4611      	mov	r1, r2
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f007 f96e 	bl	800eeae <USB_ReadChInterrupts>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd8:	2b80      	cmp	r3, #128	@ 0x80
 8007bda:	f040 8083 	bne.w	8007ce4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	799b      	ldrb	r3, [r3, #6]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d111      	bne.n	8007c0a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8007be6:	78fa      	ldrb	r2, [r7, #3]
 8007be8:	6879      	ldr	r1, [r7, #4]
 8007bea:	4613      	mov	r3, r2
 8007bec:	011b      	lsls	r3, r3, #4
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	440b      	add	r3, r1
 8007bf4:	334d      	adds	r3, #77	@ 0x4d
 8007bf6:	2207      	movs	r2, #7
 8007bf8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	78fa      	ldrb	r2, [r7, #3]
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f007 fef1 	bl	800f9ea <USB_HC_Halt>
 8007c08:	e062      	b.n	8007cd0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	3344      	adds	r3, #68	@ 0x44
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	1c59      	adds	r1, r3, #1
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	1a9b      	subs	r3, r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4403      	add	r3, r0
 8007c2a:	3344      	adds	r3, #68	@ 0x44
 8007c2c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007c2e:	78fa      	ldrb	r2, [r7, #3]
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	4613      	mov	r3, r2
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	1a9b      	subs	r3, r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	3344      	adds	r3, #68	@ 0x44
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d922      	bls.n	8007c8a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007c44:	78fa      	ldrb	r2, [r7, #3]
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	1a9b      	subs	r3, r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	3344      	adds	r3, #68	@ 0x44
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007c58:	78fa      	ldrb	r2, [r7, #3]
 8007c5a:	6879      	ldr	r1, [r7, #4]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	334c      	adds	r3, #76	@ 0x4c
 8007c68:	2204      	movs	r2, #4
 8007c6a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007c6c:	78fa      	ldrb	r2, [r7, #3]
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	4613      	mov	r3, r2
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	440b      	add	r3, r1
 8007c7a:	334c      	adds	r3, #76	@ 0x4c
 8007c7c:	781a      	ldrb	r2, [r3, #0]
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f00d f98a 	bl	8014f9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007c88:	e022      	b.n	8007cd0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007c8a:	78fa      	ldrb	r2, [r7, #3]
 8007c8c:	6879      	ldr	r1, [r7, #4]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	011b      	lsls	r3, r3, #4
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	440b      	add	r3, r1
 8007c98:	334c      	adds	r3, #76	@ 0x4c
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007c9e:	78fb      	ldrb	r3, [r7, #3]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007cb4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cbc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cca:	461a      	mov	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cdc:	461a      	mov	r2, r3
 8007cde:	2380      	movs	r3, #128	@ 0x80
 8007ce0:	6093      	str	r3, [r2, #8]
 8007ce2:	e217      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	78fa      	ldrb	r2, [r7, #3]
 8007cea:	4611      	mov	r1, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f007 f8de 	bl	800eeae <USB_ReadChInterrupts>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cfc:	d11b      	bne.n	8007d36 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	1a9b      	subs	r3, r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	334d      	adds	r3, #77	@ 0x4d
 8007d0e:	2209      	movs	r2, #9
 8007d10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	78fa      	ldrb	r2, [r7, #3]
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f007 fe65 	bl	800f9ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d32:	6093      	str	r3, [r2, #8]
 8007d34:	e1ee      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f007 f8b5 	bl	800eeae <USB_ReadChInterrupts>
 8007d44:	4603      	mov	r3, r0
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	f040 81df 	bne.w	800810e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	2302      	movs	r3, #2
 8007d60:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007d62:	78fa      	ldrb	r2, [r7, #3]
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	4613      	mov	r3, r2
 8007d68:	011b      	lsls	r3, r3, #4
 8007d6a:	1a9b      	subs	r3, r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	440b      	add	r3, r1
 8007d70:	334d      	adds	r3, #77	@ 0x4d
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	f040 8093 	bne.w	8007ea0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	1a9b      	subs	r3, r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	334d      	adds	r3, #77	@ 0x4d
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007d8e:	78fa      	ldrb	r2, [r7, #3]
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4613      	mov	r3, r2
 8007d94:	011b      	lsls	r3, r3, #4
 8007d96:	1a9b      	subs	r3, r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	334c      	adds	r3, #76	@ 0x4c
 8007d9e:	2201      	movs	r2, #1
 8007da0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007da2:	78fa      	ldrb	r2, [r7, #3]
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	4613      	mov	r3, r2
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	1a9b      	subs	r3, r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	440b      	add	r3, r1
 8007db0:	3326      	adds	r3, #38	@ 0x26
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d00b      	beq.n	8007dd0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8007db8:	78fa      	ldrb	r2, [r7, #3]
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	011b      	lsls	r3, r3, #4
 8007dc0:	1a9b      	subs	r3, r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	440b      	add	r3, r1
 8007dc6:	3326      	adds	r3, #38	@ 0x26
 8007dc8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	f040 8190 	bne.w	80080f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	799b      	ldrb	r3, [r3, #6]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d115      	bne.n	8007e04 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8007dd8:	78fa      	ldrb	r2, [r7, #3]
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	1a9b      	subs	r3, r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	440b      	add	r3, r1
 8007de6:	333d      	adds	r3, #61	@ 0x3d
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	78fa      	ldrb	r2, [r7, #3]
 8007dec:	f083 0301 	eor.w	r3, r3, #1
 8007df0:	b2d8      	uxtb	r0, r3
 8007df2:	6879      	ldr	r1, [r7, #4]
 8007df4:	4613      	mov	r3, r2
 8007df6:	011b      	lsls	r3, r3, #4
 8007df8:	1a9b      	subs	r3, r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	333d      	adds	r3, #61	@ 0x3d
 8007e00:	4602      	mov	r2, r0
 8007e02:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	799b      	ldrb	r3, [r3, #6]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	f040 8171 	bne.w	80080f0 <HCD_HC_OUT_IRQHandler+0x954>
 8007e0e:	78fa      	ldrb	r2, [r7, #3]
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	4613      	mov	r3, r2
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	1a9b      	subs	r3, r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	440b      	add	r3, r1
 8007e1c:	3334      	adds	r3, #52	@ 0x34
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 8165 	beq.w	80080f0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8007e26:	78fa      	ldrb	r2, [r7, #3]
 8007e28:	6879      	ldr	r1, [r7, #4]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	011b      	lsls	r3, r3, #4
 8007e2e:	1a9b      	subs	r3, r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	440b      	add	r3, r1
 8007e34:	3334      	adds	r3, #52	@ 0x34
 8007e36:	6819      	ldr	r1, [r3, #0]
 8007e38:	78fa      	ldrb	r2, [r7, #3]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4403      	add	r3, r0
 8007e46:	3328      	adds	r3, #40	@ 0x28
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	440b      	add	r3, r1
 8007e4c:	1e59      	subs	r1, r3, #1
 8007e4e:	78fa      	ldrb	r2, [r7, #3]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	4613      	mov	r3, r2
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4403      	add	r3, r0
 8007e5c:	3328      	adds	r3, #40	@ 0x28
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e64:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 813f 	beq.w	80080f0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	4613      	mov	r3, r2
 8007e78:	011b      	lsls	r3, r3, #4
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	440b      	add	r3, r1
 8007e80:	333d      	adds	r3, #61	@ 0x3d
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	78fa      	ldrb	r2, [r7, #3]
 8007e86:	f083 0301 	eor.w	r3, r3, #1
 8007e8a:	b2d8      	uxtb	r0, r3
 8007e8c:	6879      	ldr	r1, [r7, #4]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	011b      	lsls	r3, r3, #4
 8007e92:	1a9b      	subs	r3, r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	440b      	add	r3, r1
 8007e98:	333d      	adds	r3, #61	@ 0x3d
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	e127      	b.n	80080f0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007ea0:	78fa      	ldrb	r2, [r7, #3]
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	1a9b      	subs	r3, r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	334d      	adds	r3, #77	@ 0x4d
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d120      	bne.n	8007ef8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007eb6:	78fa      	ldrb	r2, [r7, #3]
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	011b      	lsls	r3, r3, #4
 8007ebe:	1a9b      	subs	r3, r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	440b      	add	r3, r1
 8007ec4:	334d      	adds	r3, #77	@ 0x4d
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	1a9b      	subs	r3, r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	440b      	add	r3, r1
 8007ed8:	331b      	adds	r3, #27
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	f040 8107 	bne.w	80080f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007ee2:	78fa      	ldrb	r2, [r7, #3]
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	011b      	lsls	r3, r3, #4
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	440b      	add	r3, r1
 8007ef0:	334c      	adds	r3, #76	@ 0x4c
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	701a      	strb	r2, [r3, #0]
 8007ef6:	e0fb      	b.n	80080f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	4613      	mov	r3, r2
 8007efe:	011b      	lsls	r3, r3, #4
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	440b      	add	r3, r1
 8007f06:	334d      	adds	r3, #77	@ 0x4d
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d13a      	bne.n	8007f84 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	1a9b      	subs	r3, r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	334d      	adds	r3, #77	@ 0x4d
 8007f1e:	2202      	movs	r2, #2
 8007f20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007f22:	78fa      	ldrb	r2, [r7, #3]
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	440b      	add	r3, r1
 8007f30:	334c      	adds	r3, #76	@ 0x4c
 8007f32:	2202      	movs	r2, #2
 8007f34:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	011b      	lsls	r3, r3, #4
 8007f3e:	1a9b      	subs	r3, r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	440b      	add	r3, r1
 8007f44:	331b      	adds	r3, #27
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	f040 80d1 	bne.w	80080f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8007f4e:	78fa      	ldrb	r2, [r7, #3]
 8007f50:	6879      	ldr	r1, [r7, #4]
 8007f52:	4613      	mov	r3, r2
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	1a9b      	subs	r3, r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	440b      	add	r3, r1
 8007f5c:	331b      	adds	r3, #27
 8007f5e:	2200      	movs	r2, #0
 8007f60:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007f62:	78fb      	ldrb	r3, [r7, #3]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	0151      	lsls	r1, r2, #5
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	440a      	add	r2, r1
 8007f78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f80:	6053      	str	r3, [r2, #4]
 8007f82:	e0b5      	b.n	80080f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	1a9b      	subs	r3, r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	334d      	adds	r3, #77	@ 0x4d
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b05      	cmp	r3, #5
 8007f98:	d114      	bne.n	8007fc4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	1a9b      	subs	r3, r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	334d      	adds	r3, #77	@ 0x4d
 8007faa:	2202      	movs	r2, #2
 8007fac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8007fae:	78fa      	ldrb	r2, [r7, #3]
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	1a9b      	subs	r3, r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	334c      	adds	r3, #76	@ 0x4c
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	e095      	b.n	80080f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007fc4:	78fa      	ldrb	r2, [r7, #3]
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	1a9b      	subs	r3, r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	334d      	adds	r3, #77	@ 0x4d
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b06      	cmp	r3, #6
 8007fd8:	d114      	bne.n	8008004 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007fda:	78fa      	ldrb	r2, [r7, #3]
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	011b      	lsls	r3, r3, #4
 8007fe2:	1a9b      	subs	r3, r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	334d      	adds	r3, #77	@ 0x4d
 8007fea:	2202      	movs	r2, #2
 8007fec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8007fee:	78fa      	ldrb	r2, [r7, #3]
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	334c      	adds	r3, #76	@ 0x4c
 8007ffe:	2205      	movs	r2, #5
 8008000:	701a      	strb	r2, [r3, #0]
 8008002:	e075      	b.n	80080f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008004:	78fa      	ldrb	r2, [r7, #3]
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	4613      	mov	r3, r2
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	1a9b      	subs	r3, r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	440b      	add	r3, r1
 8008012:	334d      	adds	r3, #77	@ 0x4d
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b07      	cmp	r3, #7
 8008018:	d00a      	beq.n	8008030 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800801a:	78fa      	ldrb	r2, [r7, #3]
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	1a9b      	subs	r3, r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	440b      	add	r3, r1
 8008028:	334d      	adds	r3, #77	@ 0x4d
 800802a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800802c:	2b09      	cmp	r3, #9
 800802e:	d170      	bne.n	8008112 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008030:	78fa      	ldrb	r2, [r7, #3]
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4613      	mov	r3, r2
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	1a9b      	subs	r3, r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	334d      	adds	r3, #77	@ 0x4d
 8008040:	2202      	movs	r2, #2
 8008042:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008044:	78fa      	ldrb	r2, [r7, #3]
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	4613      	mov	r3, r2
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	1a9b      	subs	r3, r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	440b      	add	r3, r1
 8008052:	3344      	adds	r3, #68	@ 0x44
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	1c59      	adds	r1, r3, #1
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	4613      	mov	r3, r2
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	1a9b      	subs	r3, r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4403      	add	r3, r0
 8008064:	3344      	adds	r3, #68	@ 0x44
 8008066:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008068:	78fa      	ldrb	r2, [r7, #3]
 800806a:	6879      	ldr	r1, [r7, #4]
 800806c:	4613      	mov	r3, r2
 800806e:	011b      	lsls	r3, r3, #4
 8008070:	1a9b      	subs	r3, r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	3344      	adds	r3, #68	@ 0x44
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d914      	bls.n	80080a8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	011b      	lsls	r3, r3, #4
 8008086:	1a9b      	subs	r3, r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	440b      	add	r3, r1
 800808c:	3344      	adds	r3, #68	@ 0x44
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008092:	78fa      	ldrb	r2, [r7, #3]
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	4613      	mov	r3, r2
 8008098:	011b      	lsls	r3, r3, #4
 800809a:	1a9b      	subs	r3, r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	440b      	add	r3, r1
 80080a0:	334c      	adds	r3, #76	@ 0x4c
 80080a2:	2204      	movs	r2, #4
 80080a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80080a6:	e022      	b.n	80080ee <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80080a8:	78fa      	ldrb	r2, [r7, #3]
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4613      	mov	r3, r2
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	1a9b      	subs	r3, r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	440b      	add	r3, r1
 80080b6:	334c      	adds	r3, #76	@ 0x4c
 80080b8:	2202      	movs	r2, #2
 80080ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80080d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e8:	461a      	mov	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80080ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80080f0:	78fa      	ldrb	r2, [r7, #3]
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4613      	mov	r3, r2
 80080f6:	011b      	lsls	r3, r3, #4
 80080f8:	1a9b      	subs	r3, r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	440b      	add	r3, r1
 80080fe:	334c      	adds	r3, #76	@ 0x4c
 8008100:	781a      	ldrb	r2, [r3, #0]
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f00c ff48 	bl	8014f9c <HAL_HCD_HC_NotifyURBChange_Callback>
 800810c:	e002      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800810e:	bf00      	nop
 8008110:	e000      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8008112:	bf00      	nop
  }
}
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b08a      	sub	sp, #40	@ 0x28
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f003 030f 	and.w	r3, r3, #15
 800813a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	0c5b      	lsrs	r3, r3, #17
 8008140:	f003 030f 	and.w	r3, r3, #15
 8008144:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	091b      	lsrs	r3, r3, #4
 800814a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800814e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d004      	beq.n	8008160 <HCD_RXQLVL_IRQHandler+0x46>
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b05      	cmp	r3, #5
 800815a:	f000 80b6 	beq.w	80082ca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800815e:	e0b7      	b.n	80082d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 80b3 	beq.w	80082ce <HCD_RXQLVL_IRQHandler+0x1b4>
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	4613      	mov	r3, r2
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	1a9b      	subs	r3, r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	440b      	add	r3, r1
 8008176:	332c      	adds	r3, #44	@ 0x2c
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 80a7 	beq.w	80082ce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8008180:	6879      	ldr	r1, [r7, #4]
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	4613      	mov	r3, r2
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	1a9b      	subs	r3, r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	3338      	adds	r3, #56	@ 0x38
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	18d1      	adds	r1, r2, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	4613      	mov	r3, r2
 800819c:	011b      	lsls	r3, r3, #4
 800819e:	1a9b      	subs	r3, r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4403      	add	r3, r0
 80081a4:	3334      	adds	r3, #52	@ 0x34
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4299      	cmp	r1, r3
 80081aa:	f200 8083 	bhi.w	80082b4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	4613      	mov	r3, r2
 80081b8:	011b      	lsls	r3, r3, #4
 80081ba:	1a9b      	subs	r3, r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	332c      	adds	r3, #44	@ 0x2c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	b292      	uxth	r2, r2
 80081c8:	4619      	mov	r1, r3
 80081ca:	f006 fe05 	bl	800edd8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	4613      	mov	r3, r2
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	332c      	adds	r3, #44	@ 0x2c
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	18d1      	adds	r1, r2, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	4613      	mov	r3, r2
 80081ea:	011b      	lsls	r3, r3, #4
 80081ec:	1a9b      	subs	r3, r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4403      	add	r3, r0
 80081f2:	332c      	adds	r3, #44	@ 0x2c
 80081f4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	4613      	mov	r3, r2
 80081fc:	011b      	lsls	r3, r3, #4
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	3338      	adds	r3, #56	@ 0x38
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	18d1      	adds	r1, r2, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	4613      	mov	r3, r2
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	1a9b      	subs	r3, r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4403      	add	r3, r0
 800821a:	3338      	adds	r3, #56	@ 0x38
 800821c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	4413      	add	r3, r2
 8008226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	0cdb      	lsrs	r3, r3, #19
 800822e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008232:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	4613      	mov	r3, r2
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	1a9b      	subs	r3, r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	440b      	add	r3, r1
 8008242:	3328      	adds	r3, #40	@ 0x28
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	4293      	cmp	r3, r2
 800824c:	d13f      	bne.n	80082ce <HCD_RXQLVL_IRQHandler+0x1b4>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d03c      	beq.n	80082ce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	4413      	add	r3, r2
 800825c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800826a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008272:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	4413      	add	r3, r2
 800827c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008280:	461a      	mov	r2, r3
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	4613      	mov	r3, r2
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	1a9b      	subs	r3, r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	440b      	add	r3, r1
 8008294:	333c      	adds	r3, #60	@ 0x3c
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	f083 0301 	eor.w	r3, r3, #1
 800829c:	b2d8      	uxtb	r0, r3
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	4613      	mov	r3, r2
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	440b      	add	r3, r1
 80082ac:	333c      	adds	r3, #60	@ 0x3c
 80082ae:	4602      	mov	r2, r0
 80082b0:	701a      	strb	r2, [r3, #0]
      break;
 80082b2:	e00c      	b.n	80082ce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	4613      	mov	r3, r2
 80082ba:	011b      	lsls	r3, r3, #4
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	334c      	adds	r3, #76	@ 0x4c
 80082c4:	2204      	movs	r2, #4
 80082c6:	701a      	strb	r2, [r3, #0]
      break;
 80082c8:	e001      	b.n	80082ce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80082ca:	bf00      	nop
 80082cc:	e000      	b.n	80082d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80082ce:	bf00      	nop
  }
}
 80082d0:	bf00      	nop
 80082d2:	3728      	adds	r7, #40	@ 0x28
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008304:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	2b02      	cmp	r3, #2
 800830e:	d10b      	bne.n	8008328 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b01      	cmp	r3, #1
 8008318:	d102      	bne.n	8008320 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f00c fe22 	bl	8014f64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f043 0302 	orr.w	r3, r3, #2
 8008326:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f003 0308 	and.w	r3, r3, #8
 800832e:	2b08      	cmp	r3, #8
 8008330:	d132      	bne.n	8008398 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f043 0308 	orr.w	r3, r3, #8
 8008338:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b04      	cmp	r3, #4
 8008342:	d126      	bne.n	8008392 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	7a5b      	ldrb	r3, [r3, #9]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d113      	bne.n	8008374 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008352:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008356:	d106      	bne.n	8008366 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2102      	movs	r1, #2
 800835e:	4618      	mov	r0, r3
 8008360:	f006 fec4 	bl	800f0ec <USB_InitFSLSPClkSel>
 8008364:	e011      	b.n	800838a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2101      	movs	r1, #1
 800836c:	4618      	mov	r0, r3
 800836e:	f006 febd 	bl	800f0ec <USB_InitFSLSPClkSel>
 8008372:	e00a      	b.n	800838a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	79db      	ldrb	r3, [r3, #7]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d106      	bne.n	800838a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008382:	461a      	mov	r2, r3
 8008384:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8008388:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f00c fe18 	bl	8014fc0 <HAL_HCD_PortEnabled_Callback>
 8008390:	e002      	b.n	8008398 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f00c fe22 	bl	8014fdc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b20      	cmp	r3, #32
 80083a0:	d103      	bne.n	80083aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f043 0320 	orr.w	r3, r3, #32
 80083a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80083b0:	461a      	mov	r2, r3
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	6013      	str	r3, [r2, #0]
}
 80083b6:	bf00      	nop
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e08b      	b.n	80084ea <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d106      	bne.n	80083ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7fa fad2 	bl	8002990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2224      	movs	r2, #36	@ 0x24
 80083f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0201 	bic.w	r2, r2, #1
 8008402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008410:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008420:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d107      	bne.n	800843a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008436:	609a      	str	r2, [r3, #8]
 8008438:	e006      	b.n	8008448 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008446:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	2b02      	cmp	r3, #2
 800844e:	d108      	bne.n	8008462 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800845e:	605a      	str	r2, [r3, #4]
 8008460:	e007      	b.n	8008472 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008470:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6859      	ldr	r1, [r3, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	4b1d      	ldr	r3, [pc, #116]	@ (80084f4 <HAL_I2C_Init+0x134>)
 800847e:	430b      	orrs	r3, r1
 8008480:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008490:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	691a      	ldr	r2, [r3, #16]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	69d9      	ldr	r1, [r3, #28]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a1a      	ldr	r2, [r3, #32]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f042 0201 	orr.w	r2, r2, #1
 80084ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	02008000 	.word	0x02008000

080084f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b20      	cmp	r3, #32
 800850c:	d138      	bne.n	8008580 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008518:	2302      	movs	r3, #2
 800851a:	e032      	b.n	8008582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2224      	movs	r2, #36	@ 0x24
 8008528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0201 	bic.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800854a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6819      	ldr	r1, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0201 	orr.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2220      	movs	r2, #32
 8008570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	e000      	b.n	8008582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008580:	2302      	movs	r3, #2
  }
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800858e:	b480      	push	{r7}
 8008590:	b085      	sub	sp, #20
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b20      	cmp	r3, #32
 80085a2:	d139      	bne.n	8008618 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80085ae:	2302      	movs	r3, #2
 80085b0:	e033      	b.n	800861a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2224      	movs	r2, #36	@ 0x24
 80085be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0201 	bic.w	r2, r2, #1
 80085d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80085e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0201 	orr.w	r2, r2, #1
 8008602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	e000      	b.n	800861a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008618:	2302      	movs	r3, #2
  }
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e08f      	b.n	8008758 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7fa fa47 	bl	8002ae0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2202      	movs	r2, #2
 8008656:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	699a      	ldr	r2, [r3, #24]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008668:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6999      	ldr	r1, [r3, #24]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800867e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	041b      	lsls	r3, r3, #16
 8008694:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6999      	ldr	r1, [r3, #24]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	041b      	lsls	r3, r3, #16
 80086aa:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a19      	ldr	r1, [r3, #32]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086be:	041b      	lsls	r3, r3, #16
 80086c0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80086ec:	021b      	lsls	r3, r3, #8
 80086ee:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80086f6:	041b      	lsls	r3, r3, #16
 80086f8:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008708:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	4313      	orrs	r3, r2
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800871c:	431a      	orrs	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f042 0206 	orr.w	r2, r2, #6
 8008734:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	699a      	ldr	r2, [r3, #24]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 0201 	orr.w	r2, r2, #1
 8008744:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008776:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b00      	cmp	r3, #0
 8008780:	d023      	beq.n	80087ca <HAL_LTDC_IRQHandler+0x6a>
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f003 0304 	and.w	r3, r3, #4
 8008788:	2b00      	cmp	r3, #0
 800878a:	d01e      	beq.n	80087ca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f022 0204 	bic.w	r2, r2, #4
 800879a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2204      	movs	r2, #4
 80087a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087aa:	f043 0201 	orr.w	r2, r3, #1
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2204      	movs	r2, #4
 80087b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f86f 	bl	80088a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d023      	beq.n	800881c <HAL_LTDC_IRQHandler+0xbc>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d01e      	beq.n	800881c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 0202 	bic.w	r2, r2, #2
 80087ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2202      	movs	r2, #2
 80087f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087fc:	f043 0202 	orr.w	r2, r3, #2
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2204      	movs	r2, #4
 800880a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f846 	bl	80088a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d01b      	beq.n	800885e <HAL_LTDC_IRQHandler+0xfe>
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d016      	beq.n	800885e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 0201 	bic.w	r2, r2, #1
 800883e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2201      	movs	r2, #1
 8008846:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f82f 	bl	80088bc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f003 0308 	and.w	r3, r3, #8
 8008864:	2b00      	cmp	r3, #0
 8008866:	d01b      	beq.n	80088a0 <HAL_LTDC_IRQHandler+0x140>
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d016      	beq.n	80088a0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 0208 	bic.w	r2, r2, #8
 8008880:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2208      	movs	r2, #8
 8008888:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f818 	bl	80088d0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80088a0:	bf00      	nop
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80088e4:	b5b0      	push	{r4, r5, r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d101      	bne.n	80088fe <HAL_LTDC_ConfigLayer+0x1a>
 80088fa:	2302      	movs	r3, #2
 80088fc:	e02c      	b.n	8008958 <HAL_LTDC_ConfigLayer+0x74>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2202      	movs	r2, #2
 800890a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2134      	movs	r1, #52	@ 0x34
 8008914:	fb01 f303 	mul.w	r3, r1, r3
 8008918:	4413      	add	r3, r2
 800891a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	4614      	mov	r4, r2
 8008922:	461d      	mov	r5, r3
 8008924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800892a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800892c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800892e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	68b9      	ldr	r1, [r7, #8]
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 f811 	bl	8008960 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2201      	movs	r2, #1
 8008944:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bdb0      	pop	{r4, r5, r7, pc}

08008960 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008960:	b480      	push	{r7}
 8008962:	b089      	sub	sp, #36	@ 0x24
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	0c1b      	lsrs	r3, r3, #16
 8008978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800897c:	4413      	add	r3, r2
 800897e:	041b      	lsls	r3, r3, #16
 8008980:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	01db      	lsls	r3, r3, #7
 800898c:	4413      	add	r3, r2
 800898e:	3384      	adds	r3, #132	@ 0x84
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	4611      	mov	r1, r2
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	01d2      	lsls	r2, r2, #7
 800899c:	440a      	add	r2, r1
 800899e:	3284      	adds	r2, #132	@ 0x84
 80089a0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80089a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	0c1b      	lsrs	r3, r3, #16
 80089b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80089b6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80089b8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4619      	mov	r1, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	01db      	lsls	r3, r3, #7
 80089c4:	440b      	add	r3, r1
 80089c6:	3384      	adds	r3, #132	@ 0x84
 80089c8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80089ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089de:	4413      	add	r3, r2
 80089e0:	041b      	lsls	r3, r3, #16
 80089e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	461a      	mov	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	01db      	lsls	r3, r3, #7
 80089ee:	4413      	add	r3, r2
 80089f0:	3384      	adds	r3, #132	@ 0x84
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	6812      	ldr	r2, [r2, #0]
 80089f8:	4611      	mov	r1, r2
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	01d2      	lsls	r2, r2, #7
 80089fe:	440a      	add	r2, r1
 8008a00:	3284      	adds	r2, #132	@ 0x84
 8008a02:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008a06:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a16:	4413      	add	r3, r2
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4619      	mov	r1, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	01db      	lsls	r3, r3, #7
 8008a24:	440b      	add	r3, r1
 8008a26:	3384      	adds	r3, #132	@ 0x84
 8008a28:	4619      	mov	r1, r3
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	01db      	lsls	r3, r3, #7
 8008a3a:	4413      	add	r3, r2
 8008a3c:	3384      	adds	r3, #132	@ 0x84
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	6812      	ldr	r2, [r2, #0]
 8008a44:	4611      	mov	r1, r2
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	01d2      	lsls	r2, r2, #7
 8008a4a:	440a      	add	r2, r1
 8008a4c:	3284      	adds	r2, #132	@ 0x84
 8008a4e:	f023 0307 	bic.w	r3, r3, #7
 8008a52:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	01db      	lsls	r3, r3, #7
 8008a5e:	4413      	add	r3, r2
 8008a60:	3384      	adds	r3, #132	@ 0x84
 8008a62:	461a      	mov	r2, r3
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008a70:	021b      	lsls	r3, r3, #8
 8008a72:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008a7a:	041b      	lsls	r3, r3, #16
 8008a7c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	061b      	lsls	r3, r3, #24
 8008a84:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	431a      	orrs	r2, r3
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	431a      	orrs	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	01db      	lsls	r3, r3, #7
 8008aa0:	440b      	add	r3, r1
 8008aa2:	3384      	adds	r3, #132	@ 0x84
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	01db      	lsls	r3, r3, #7
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3384      	adds	r3, #132	@ 0x84
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	6812      	ldr	r2, [r2, #0]
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	01d2      	lsls	r2, r2, #7
 8008ac6:	440a      	add	r2, r1
 8008ac8:	3284      	adds	r2, #132	@ 0x84
 8008aca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008ace:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	01db      	lsls	r3, r3, #7
 8008ada:	4413      	add	r3, r2
 8008adc:	3384      	adds	r3, #132	@ 0x84
 8008ade:	461a      	mov	r2, r3
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	01db      	lsls	r3, r3, #7
 8008af0:	4413      	add	r3, r2
 8008af2:	3384      	adds	r3, #132	@ 0x84
 8008af4:	69da      	ldr	r2, [r3, #28]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4619      	mov	r1, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	01db      	lsls	r3, r3, #7
 8008b00:	440b      	add	r3, r1
 8008b02:	3384      	adds	r3, #132	@ 0x84
 8008b04:	4619      	mov	r1, r3
 8008b06:	4b4f      	ldr	r3, [pc, #316]	@ (8008c44 <LTDC_SetConfig+0x2e4>)
 8008b08:	4013      	ands	r3, r2
 8008b0a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	69da      	ldr	r2, [r3, #28]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	68f9      	ldr	r1, [r7, #12]
 8008b16:	6809      	ldr	r1, [r1, #0]
 8008b18:	4608      	mov	r0, r1
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	01c9      	lsls	r1, r1, #7
 8008b1e:	4401      	add	r1, r0
 8008b20:	3184      	adds	r1, #132	@ 0x84
 8008b22:	4313      	orrs	r3, r2
 8008b24:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	01db      	lsls	r3, r3, #7
 8008b30:	4413      	add	r3, r2
 8008b32:	3384      	adds	r3, #132	@ 0x84
 8008b34:	461a      	mov	r2, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d102      	bne.n	8008b4a <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8008b44:	2304      	movs	r3, #4
 8008b46:	61fb      	str	r3, [r7, #28]
 8008b48:	e01b      	b.n	8008b82 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d102      	bne.n	8008b58 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8008b52:	2303      	movs	r3, #3
 8008b54:	61fb      	str	r3, [r7, #28]
 8008b56:	e014      	b.n	8008b82 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	2b04      	cmp	r3, #4
 8008b5e:	d00b      	beq.n	8008b78 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d007      	beq.n	8008b78 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d003      	beq.n	8008b78 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008b74:	2b07      	cmp	r3, #7
 8008b76:	d102      	bne.n	8008b7e <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	61fb      	str	r3, [r7, #28]
 8008b7c:	e001      	b.n	8008b82 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	01db      	lsls	r3, r3, #7
 8008b8c:	4413      	add	r3, r2
 8008b8e:	3384      	adds	r3, #132	@ 0x84
 8008b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	6812      	ldr	r2, [r2, #0]
 8008b96:	4611      	mov	r1, r2
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	01d2      	lsls	r2, r2, #7
 8008b9c:	440a      	add	r2, r1
 8008b9e:	3284      	adds	r2, #132	@ 0x84
 8008ba0:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008baa:	69fa      	ldr	r2, [r7, #28]
 8008bac:	fb02 f303 	mul.w	r3, r2, r3
 8008bb0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	6859      	ldr	r1, [r3, #4]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	1acb      	subs	r3, r1, r3
 8008bbc:	69f9      	ldr	r1, [r7, #28]
 8008bbe:	fb01 f303 	mul.w	r3, r1, r3
 8008bc2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008bc4:	68f9      	ldr	r1, [r7, #12]
 8008bc6:	6809      	ldr	r1, [r1, #0]
 8008bc8:	4608      	mov	r0, r1
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	01c9      	lsls	r1, r1, #7
 8008bce:	4401      	add	r1, r0
 8008bd0:	3184      	adds	r1, #132	@ 0x84
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	01db      	lsls	r3, r3, #7
 8008be0:	4413      	add	r3, r2
 8008be2:	3384      	adds	r3, #132	@ 0x84
 8008be4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4619      	mov	r1, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	01db      	lsls	r3, r3, #7
 8008bf0:	440b      	add	r3, r1
 8008bf2:	3384      	adds	r3, #132	@ 0x84
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4b14      	ldr	r3, [pc, #80]	@ (8008c48 <LTDC_SetConfig+0x2e8>)
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	461a      	mov	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	01db      	lsls	r3, r3, #7
 8008c06:	4413      	add	r3, r2
 8008c08:	3384      	adds	r3, #132	@ 0x84
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c10:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	01db      	lsls	r3, r3, #7
 8008c1c:	4413      	add	r3, r2
 8008c1e:	3384      	adds	r3, #132	@ 0x84
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	6812      	ldr	r2, [r2, #0]
 8008c26:	4611      	mov	r1, r2
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	01d2      	lsls	r2, r2, #7
 8008c2c:	440a      	add	r2, r1
 8008c2e:	3284      	adds	r2, #132	@ 0x84
 8008c30:	f043 0301 	orr.w	r3, r3, #1
 8008c34:	6013      	str	r3, [r2, #0]
}
 8008c36:	bf00      	nop
 8008c38:	3724      	adds	r7, #36	@ 0x24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	fffff8f8 	.word	0xfffff8f8
 8008c48:	fffff800 	.word	0xfffff800

08008c4c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c50:	4b05      	ldr	r3, [pc, #20]	@ (8008c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a04      	ldr	r2, [pc, #16]	@ (8008c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c5a:	6013      	str	r3, [r2, #0]
}
 8008c5c:	bf00      	nop
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	40007000 	.word	0x40007000

08008c6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008c76:	4b23      	ldr	r3, [pc, #140]	@ (8008d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7a:	4a22      	ldr	r2, [pc, #136]	@ (8008d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c82:	4b20      	ldr	r3, [pc, #128]	@ (8008d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a1d      	ldr	r2, [pc, #116]	@ (8008d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c9a:	f7fb fd95 	bl	80047c8 <HAL_GetTick>
 8008c9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008ca0:	e009      	b.n	8008cb6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008ca2:	f7fb fd91 	bl	80047c8 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008cb0:	d901      	bls.n	8008cb6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e022      	b.n	8008cfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008cb6:	4b14      	ldr	r3, [pc, #80]	@ (8008d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cc2:	d1ee      	bne.n	8008ca2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008cc4:	4b10      	ldr	r3, [pc, #64]	@ (8008d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a0f      	ldr	r2, [pc, #60]	@ (8008d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008cd0:	f7fb fd7a 	bl	80047c8 <HAL_GetTick>
 8008cd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008cd6:	e009      	b.n	8008cec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008cd8:	f7fb fd76 	bl	80047c8 <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ce6:	d901      	bls.n	8008cec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e007      	b.n	8008cfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008cec:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cf8:	d1ee      	bne.n	8008cd8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	40023800 	.word	0x40023800
 8008d08:	40007000 	.word	0x40007000

08008d0c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af02      	add	r7, sp, #8
 8008d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008d14:	f7fb fd58 	bl	80047c8 <HAL_GetTick>
 8008d18:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e067      	b.n	8008df4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10b      	bne.n	8008d48 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7f9 ff99 	bl	8002c70 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008d3e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f85e 	bl	8008e04 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	021a      	lsls	r2, r3, #8
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	2120      	movs	r1, #32
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f856 	bl	8008e20 <QSPI_WaitFlagStateUntilTimeout>
 8008d74:	4603      	mov	r3, r0
 8008d76:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d135      	bne.n	8008dea <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	4b1d      	ldr	r3, [pc, #116]	@ (8008dfc <HAL_QSPI_Init+0xf0>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	6852      	ldr	r2, [r2, #4]
 8008d8c:	0611      	lsls	r1, r2, #24
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	68d2      	ldr	r2, [r2, #12]
 8008d92:	4311      	orrs	r1, r2
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	69d2      	ldr	r2, [r2, #28]
 8008d98:	4311      	orrs	r1, r2
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6a12      	ldr	r2, [r2, #32]
 8008d9e:	4311      	orrs	r1, r2
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	6812      	ldr	r2, [r2, #0]
 8008da4:	430b      	orrs	r3, r1
 8008da6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	4b14      	ldr	r3, [pc, #80]	@ (8008e00 <HAL_QSPI_Init+0xf4>)
 8008db0:	4013      	ands	r3, r2
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	6912      	ldr	r2, [r2, #16]
 8008db6:	0411      	lsls	r1, r2, #16
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	6952      	ldr	r2, [r2, #20]
 8008dbc:	4311      	orrs	r1, r2
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	6992      	ldr	r2, [r2, #24]
 8008dc2:	4311      	orrs	r1, r2
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	6812      	ldr	r2, [r2, #0]
 8008dc8:	430b      	orrs	r3, r1
 8008dca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0201 	orr.w	r2, r2, #1
 8008dda:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8008df2:	7afb      	ldrb	r3, [r7, #11]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	00ffff2f 	.word	0x00ffff2f
 8008e00:	ffe0f8fe 	.word	0xffe0f8fe

08008e04 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008e30:	e01a      	b.n	8008e68 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e38:	d016      	beq.n	8008e68 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e3a:	f7fb fcc5 	bl	80047c8 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d302      	bcc.n	8008e50 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10b      	bne.n	8008e68 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2204      	movs	r2, #4
 8008e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e5c:	f043 0201 	orr.w	r2, r3, #1
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e00e      	b.n	8008e86 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689a      	ldr	r2, [r3, #8]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	4013      	ands	r3, r2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bf14      	ite	ne
 8008e76:	2301      	movne	r3, #1
 8008e78:	2300      	moveq	r3, #0
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	79fb      	ldrb	r3, [r7, #7]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d1d6      	bne.n	8008e32 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e291      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 8087 	beq.w	8008fc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008eb4:	4b96      	ldr	r3, [pc, #600]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f003 030c 	and.w	r3, r3, #12
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d00c      	beq.n	8008eda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ec0:	4b93      	ldr	r3, [pc, #588]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f003 030c 	and.w	r3, r3, #12
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d112      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x62>
 8008ecc:	4b90      	ldr	r3, [pc, #576]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ed4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ed8:	d10b      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eda:	4b8d      	ldr	r3, [pc, #564]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d06c      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x130>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d168      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e26b      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008efa:	d106      	bne.n	8008f0a <HAL_RCC_OscConfig+0x7a>
 8008efc:	4b84      	ldr	r3, [pc, #528]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a83      	ldr	r2, [pc, #524]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	e02e      	b.n	8008f68 <HAL_RCC_OscConfig+0xd8>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10c      	bne.n	8008f2c <HAL_RCC_OscConfig+0x9c>
 8008f12:	4b7f      	ldr	r3, [pc, #508]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a7e      	ldr	r2, [pc, #504]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	4b7c      	ldr	r3, [pc, #496]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a7b      	ldr	r2, [pc, #492]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	e01d      	b.n	8008f68 <HAL_RCC_OscConfig+0xd8>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f34:	d10c      	bne.n	8008f50 <HAL_RCC_OscConfig+0xc0>
 8008f36:	4b76      	ldr	r3, [pc, #472]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a75      	ldr	r2, [pc, #468]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	4b73      	ldr	r3, [pc, #460]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a72      	ldr	r2, [pc, #456]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	e00b      	b.n	8008f68 <HAL_RCC_OscConfig+0xd8>
 8008f50:	4b6f      	ldr	r3, [pc, #444]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a6e      	ldr	r2, [pc, #440]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	4b6c      	ldr	r3, [pc, #432]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a6b      	ldr	r2, [pc, #428]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d013      	beq.n	8008f98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f70:	f7fb fc2a 	bl	80047c8 <HAL_GetTick>
 8008f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f76:	e008      	b.n	8008f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f78:	f7fb fc26 	bl	80047c8 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	2b64      	cmp	r3, #100	@ 0x64
 8008f84:	d901      	bls.n	8008f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e21f      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f8a:	4b61      	ldr	r3, [pc, #388]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0f0      	beq.n	8008f78 <HAL_RCC_OscConfig+0xe8>
 8008f96:	e014      	b.n	8008fc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f98:	f7fb fc16 	bl	80047c8 <HAL_GetTick>
 8008f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f9e:	e008      	b.n	8008fb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fa0:	f7fb fc12 	bl	80047c8 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	2b64      	cmp	r3, #100	@ 0x64
 8008fac:	d901      	bls.n	8008fb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e20b      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fb2:	4b57      	ldr	r3, [pc, #348]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f0      	bne.n	8008fa0 <HAL_RCC_OscConfig+0x110>
 8008fbe:	e000      	b.n	8008fc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d069      	beq.n	80090a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008fce:	4b50      	ldr	r3, [pc, #320]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f003 030c 	and.w	r3, r3, #12
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00b      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008fda:	4b4d      	ldr	r3, [pc, #308]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 030c 	and.w	r3, r3, #12
 8008fe2:	2b08      	cmp	r3, #8
 8008fe4:	d11c      	bne.n	8009020 <HAL_RCC_OscConfig+0x190>
 8008fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d116      	bne.n	8009020 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ff2:	4b47      	ldr	r3, [pc, #284]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d005      	beq.n	800900a <HAL_RCC_OscConfig+0x17a>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d001      	beq.n	800900a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e1df      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800900a:	4b41      	ldr	r3, [pc, #260]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	493d      	ldr	r1, [pc, #244]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 800901a:	4313      	orrs	r3, r2
 800901c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800901e:	e040      	b.n	80090a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d023      	beq.n	8009070 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009028:	4b39      	ldr	r3, [pc, #228]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a38      	ldr	r2, [pc, #224]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 800902e:	f043 0301 	orr.w	r3, r3, #1
 8009032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009034:	f7fb fbc8 	bl	80047c8 <HAL_GetTick>
 8009038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800903a:	e008      	b.n	800904e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800903c:	f7fb fbc4 	bl	80047c8 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b02      	cmp	r3, #2
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e1bd      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800904e:	4b30      	ldr	r3, [pc, #192]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0f0      	beq.n	800903c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800905a:	4b2d      	ldr	r3, [pc, #180]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	4929      	ldr	r1, [pc, #164]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 800906a:	4313      	orrs	r3, r2
 800906c:	600b      	str	r3, [r1, #0]
 800906e:	e018      	b.n	80090a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009070:	4b27      	ldr	r3, [pc, #156]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a26      	ldr	r2, [pc, #152]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8009076:	f023 0301 	bic.w	r3, r3, #1
 800907a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800907c:	f7fb fba4 	bl	80047c8 <HAL_GetTick>
 8009080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009082:	e008      	b.n	8009096 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009084:	f7fb fba0 	bl	80047c8 <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	2b02      	cmp	r3, #2
 8009090:	d901      	bls.n	8009096 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e199      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009096:	4b1e      	ldr	r3, [pc, #120]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1f0      	bne.n	8009084 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0308 	and.w	r3, r3, #8
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d038      	beq.n	8009120 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d019      	beq.n	80090ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090b6:	4b16      	ldr	r3, [pc, #88]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 80090b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ba:	4a15      	ldr	r2, [pc, #84]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 80090bc:	f043 0301 	orr.w	r3, r3, #1
 80090c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090c2:	f7fb fb81 	bl	80047c8 <HAL_GetTick>
 80090c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090c8:	e008      	b.n	80090dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090ca:	f7fb fb7d 	bl	80047c8 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d901      	bls.n	80090dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e176      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 80090de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0f0      	beq.n	80090ca <HAL_RCC_OscConfig+0x23a>
 80090e8:	e01a      	b.n	8009120 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090ea:	4b09      	ldr	r3, [pc, #36]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 80090ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ee:	4a08      	ldr	r2, [pc, #32]	@ (8009110 <HAL_RCC_OscConfig+0x280>)
 80090f0:	f023 0301 	bic.w	r3, r3, #1
 80090f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f6:	f7fb fb67 	bl	80047c8 <HAL_GetTick>
 80090fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090fc:	e00a      	b.n	8009114 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090fe:	f7fb fb63 	bl	80047c8 <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	d903      	bls.n	8009114 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e15c      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
 8009110:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009114:	4b91      	ldr	r3, [pc, #580]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1ee      	bne.n	80090fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 80a4 	beq.w	8009276 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800912e:	4b8b      	ldr	r3, [pc, #556]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10d      	bne.n	8009156 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800913a:	4b88      	ldr	r3, [pc, #544]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800913c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913e:	4a87      	ldr	r2, [pc, #540]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009144:	6413      	str	r3, [r2, #64]	@ 0x40
 8009146:	4b85      	ldr	r3, [pc, #532]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800914e:	60bb      	str	r3, [r7, #8]
 8009150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009152:	2301      	movs	r3, #1
 8009154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009156:	4b82      	ldr	r3, [pc, #520]	@ (8009360 <HAL_RCC_OscConfig+0x4d0>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800915e:	2b00      	cmp	r3, #0
 8009160:	d118      	bne.n	8009194 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009162:	4b7f      	ldr	r3, [pc, #508]	@ (8009360 <HAL_RCC_OscConfig+0x4d0>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a7e      	ldr	r2, [pc, #504]	@ (8009360 <HAL_RCC_OscConfig+0x4d0>)
 8009168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800916c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800916e:	f7fb fb2b 	bl	80047c8 <HAL_GetTick>
 8009172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009174:	e008      	b.n	8009188 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009176:	f7fb fb27 	bl	80047c8 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b64      	cmp	r3, #100	@ 0x64
 8009182:	d901      	bls.n	8009188 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e120      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009188:	4b75      	ldr	r3, [pc, #468]	@ (8009360 <HAL_RCC_OscConfig+0x4d0>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0f0      	beq.n	8009176 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d106      	bne.n	80091aa <HAL_RCC_OscConfig+0x31a>
 800919c:	4b6f      	ldr	r3, [pc, #444]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800919e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091a0:	4a6e      	ldr	r2, [pc, #440]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091a2:	f043 0301 	orr.w	r3, r3, #1
 80091a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80091a8:	e02d      	b.n	8009206 <HAL_RCC_OscConfig+0x376>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10c      	bne.n	80091cc <HAL_RCC_OscConfig+0x33c>
 80091b2:	4b6a      	ldr	r3, [pc, #424]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091b6:	4a69      	ldr	r2, [pc, #420]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091b8:	f023 0301 	bic.w	r3, r3, #1
 80091bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80091be:	4b67      	ldr	r3, [pc, #412]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091c2:	4a66      	ldr	r2, [pc, #408]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091c4:	f023 0304 	bic.w	r3, r3, #4
 80091c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80091ca:	e01c      	b.n	8009206 <HAL_RCC_OscConfig+0x376>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	2b05      	cmp	r3, #5
 80091d2:	d10c      	bne.n	80091ee <HAL_RCC_OscConfig+0x35e>
 80091d4:	4b61      	ldr	r3, [pc, #388]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091d8:	4a60      	ldr	r2, [pc, #384]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091da:	f043 0304 	orr.w	r3, r3, #4
 80091de:	6713      	str	r3, [r2, #112]	@ 0x70
 80091e0:	4b5e      	ldr	r3, [pc, #376]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091e4:	4a5d      	ldr	r2, [pc, #372]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091e6:	f043 0301 	orr.w	r3, r3, #1
 80091ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80091ec:	e00b      	b.n	8009206 <HAL_RCC_OscConfig+0x376>
 80091ee:	4b5b      	ldr	r3, [pc, #364]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091f2:	4a5a      	ldr	r2, [pc, #360]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091f4:	f023 0301 	bic.w	r3, r3, #1
 80091f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80091fa:	4b58      	ldr	r3, [pc, #352]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80091fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091fe:	4a57      	ldr	r2, [pc, #348]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009200:	f023 0304 	bic.w	r3, r3, #4
 8009204:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d015      	beq.n	800923a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800920e:	f7fb fadb 	bl	80047c8 <HAL_GetTick>
 8009212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009214:	e00a      	b.n	800922c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009216:	f7fb fad7 	bl	80047c8 <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009224:	4293      	cmp	r3, r2
 8009226:	d901      	bls.n	800922c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e0ce      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800922c:	4b4b      	ldr	r3, [pc, #300]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800922e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0ee      	beq.n	8009216 <HAL_RCC_OscConfig+0x386>
 8009238:	e014      	b.n	8009264 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800923a:	f7fb fac5 	bl	80047c8 <HAL_GetTick>
 800923e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009240:	e00a      	b.n	8009258 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009242:	f7fb fac1 	bl	80047c8 <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009250:	4293      	cmp	r3, r2
 8009252:	d901      	bls.n	8009258 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e0b8      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009258:	4b40      	ldr	r3, [pc, #256]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800925a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1ee      	bne.n	8009242 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d105      	bne.n	8009276 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800926a:	4b3c      	ldr	r3, [pc, #240]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800926c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800926e:	4a3b      	ldr	r2, [pc, #236]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009270:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009274:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 80a4 	beq.w	80093c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009280:	4b36      	ldr	r3, [pc, #216]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f003 030c 	and.w	r3, r3, #12
 8009288:	2b08      	cmp	r3, #8
 800928a:	d06b      	beq.n	8009364 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	2b02      	cmp	r3, #2
 8009292:	d149      	bne.n	8009328 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009294:	4b31      	ldr	r3, [pc, #196]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a30      	ldr	r2, [pc, #192]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800929a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800929e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092a0:	f7fb fa92 	bl	80047c8 <HAL_GetTick>
 80092a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092a6:	e008      	b.n	80092ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092a8:	f7fb fa8e 	bl	80047c8 <HAL_GetTick>
 80092ac:	4602      	mov	r2, r0
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d901      	bls.n	80092ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e087      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092ba:	4b28      	ldr	r3, [pc, #160]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1f0      	bne.n	80092a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69da      	ldr	r2, [r3, #28]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d4:	019b      	lsls	r3, r3, #6
 80092d6:	431a      	orrs	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092dc:	085b      	lsrs	r3, r3, #1
 80092de:	3b01      	subs	r3, #1
 80092e0:	041b      	lsls	r3, r3, #16
 80092e2:	431a      	orrs	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e8:	061b      	lsls	r3, r3, #24
 80092ea:	4313      	orrs	r3, r2
 80092ec:	4a1b      	ldr	r2, [pc, #108]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80092ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092f4:	4b19      	ldr	r3, [pc, #100]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a18      	ldr	r2, [pc, #96]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 80092fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009300:	f7fb fa62 	bl	80047c8 <HAL_GetTick>
 8009304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009306:	e008      	b.n	800931a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009308:	f7fb fa5e 	bl	80047c8 <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	2b02      	cmp	r3, #2
 8009314:	d901      	bls.n	800931a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e057      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800931a:	4b10      	ldr	r3, [pc, #64]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0f0      	beq.n	8009308 <HAL_RCC_OscConfig+0x478>
 8009326:	e04f      	b.n	80093c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009328:	4b0c      	ldr	r3, [pc, #48]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a0b      	ldr	r2, [pc, #44]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 800932e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009334:	f7fb fa48 	bl	80047c8 <HAL_GetTick>
 8009338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800933a:	e008      	b.n	800934e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800933c:	f7fb fa44 	bl	80047c8 <HAL_GetTick>
 8009340:	4602      	mov	r2, r0
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	2b02      	cmp	r3, #2
 8009348:	d901      	bls.n	800934e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e03d      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800934e:	4b03      	ldr	r3, [pc, #12]	@ (800935c <HAL_RCC_OscConfig+0x4cc>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1f0      	bne.n	800933c <HAL_RCC_OscConfig+0x4ac>
 800935a:	e035      	b.n	80093c8 <HAL_RCC_OscConfig+0x538>
 800935c:	40023800 	.word	0x40023800
 8009360:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009364:	4b1b      	ldr	r3, [pc, #108]	@ (80093d4 <HAL_RCC_OscConfig+0x544>)
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d028      	beq.n	80093c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800937c:	429a      	cmp	r2, r3
 800937e:	d121      	bne.n	80093c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800938a:	429a      	cmp	r2, r3
 800938c:	d11a      	bne.n	80093c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009394:	4013      	ands	r3, r2
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800939a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800939c:	4293      	cmp	r3, r2
 800939e:	d111      	bne.n	80093c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093aa:	085b      	lsrs	r3, r3, #1
 80093ac:	3b01      	subs	r3, #1
 80093ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d107      	bne.n	80093c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d001      	beq.n	80093c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e000      	b.n	80093ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3718      	adds	r7, #24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	40023800 	.word	0x40023800

080093d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e0d0      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093f0:	4b6a      	ldr	r3, [pc, #424]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 030f 	and.w	r3, r3, #15
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d910      	bls.n	8009420 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093fe:	4b67      	ldr	r3, [pc, #412]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f023 020f 	bic.w	r2, r3, #15
 8009406:	4965      	ldr	r1, [pc, #404]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	4313      	orrs	r3, r2
 800940c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800940e:	4b63      	ldr	r3, [pc, #396]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 030f 	and.w	r3, r3, #15
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	429a      	cmp	r2, r3
 800941a:	d001      	beq.n	8009420 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e0b8      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0302 	and.w	r3, r3, #2
 8009428:	2b00      	cmp	r3, #0
 800942a:	d020      	beq.n	800946e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	2b00      	cmp	r3, #0
 8009436:	d005      	beq.n	8009444 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009438:	4b59      	ldr	r3, [pc, #356]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	4a58      	ldr	r2, [pc, #352]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 800943e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009442:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0308 	and.w	r3, r3, #8
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009450:	4b53      	ldr	r3, [pc, #332]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	4a52      	ldr	r2, [pc, #328]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009456:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800945a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800945c:	4b50      	ldr	r3, [pc, #320]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	494d      	ldr	r1, [pc, #308]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 800946a:	4313      	orrs	r3, r2
 800946c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d040      	beq.n	80094fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d107      	bne.n	8009492 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009482:	4b47      	ldr	r3, [pc, #284]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d115      	bne.n	80094ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e07f      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	2b02      	cmp	r3, #2
 8009498:	d107      	bne.n	80094aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800949a:	4b41      	ldr	r3, [pc, #260]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d109      	bne.n	80094ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e073      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094aa:	4b3d      	ldr	r3, [pc, #244]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e06b      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094ba:	4b39      	ldr	r3, [pc, #228]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	f023 0203 	bic.w	r2, r3, #3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	4936      	ldr	r1, [pc, #216]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 80094c8:	4313      	orrs	r3, r2
 80094ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094cc:	f7fb f97c 	bl	80047c8 <HAL_GetTick>
 80094d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094d2:	e00a      	b.n	80094ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094d4:	f7fb f978 	bl	80047c8 <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d901      	bls.n	80094ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e053      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094ea:	4b2d      	ldr	r3, [pc, #180]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 020c 	and.w	r2, r3, #12
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d1eb      	bne.n	80094d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80094fc:	4b27      	ldr	r3, [pc, #156]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d210      	bcs.n	800952c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800950a:	4b24      	ldr	r3, [pc, #144]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f023 020f 	bic.w	r2, r3, #15
 8009512:	4922      	ldr	r1, [pc, #136]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	4313      	orrs	r3, r2
 8009518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800951a:	4b20      	ldr	r3, [pc, #128]	@ (800959c <HAL_RCC_ClockConfig+0x1c4>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d001      	beq.n	800952c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e032      	b.n	8009592 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	d008      	beq.n	800954a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009538:	4b19      	ldr	r3, [pc, #100]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	4916      	ldr	r1, [pc, #88]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009546:	4313      	orrs	r3, r2
 8009548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0308 	and.w	r3, r3, #8
 8009552:	2b00      	cmp	r3, #0
 8009554:	d009      	beq.n	800956a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009556:	4b12      	ldr	r3, [pc, #72]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	490e      	ldr	r1, [pc, #56]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009566:	4313      	orrs	r3, r2
 8009568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800956a:	f000 f821 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800956e:	4602      	mov	r2, r0
 8009570:	4b0b      	ldr	r3, [pc, #44]	@ (80095a0 <HAL_RCC_ClockConfig+0x1c8>)
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	091b      	lsrs	r3, r3, #4
 8009576:	f003 030f 	and.w	r3, r3, #15
 800957a:	490a      	ldr	r1, [pc, #40]	@ (80095a4 <HAL_RCC_ClockConfig+0x1cc>)
 800957c:	5ccb      	ldrb	r3, [r1, r3]
 800957e:	fa22 f303 	lsr.w	r3, r2, r3
 8009582:	4a09      	ldr	r2, [pc, #36]	@ (80095a8 <HAL_RCC_ClockConfig+0x1d0>)
 8009584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009586:	4b09      	ldr	r3, [pc, #36]	@ (80095ac <HAL_RCC_ClockConfig+0x1d4>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4618      	mov	r0, r3
 800958c:	f7fa f87e 	bl	800368c <HAL_InitTick>

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	40023c00 	.word	0x40023c00
 80095a0:	40023800 	.word	0x40023800
 80095a4:	08017eb8 	.word	0x08017eb8
 80095a8:	20000000 	.word	0x20000000
 80095ac:	2000004c 	.word	0x2000004c

080095b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b4:	b090      	sub	sp, #64	@ 0x40
 80095b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80095bc:	2300      	movs	r3, #0
 80095be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095c0:	2300      	movs	r3, #0
 80095c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095c8:	4b59      	ldr	r3, [pc, #356]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x180>)
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f003 030c 	and.w	r3, r3, #12
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	d00d      	beq.n	80095f0 <HAL_RCC_GetSysClockFreq+0x40>
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	f200 80a1 	bhi.w	800971c <HAL_RCC_GetSysClockFreq+0x16c>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <HAL_RCC_GetSysClockFreq+0x34>
 80095de:	2b04      	cmp	r3, #4
 80095e0:	d003      	beq.n	80095ea <HAL_RCC_GetSysClockFreq+0x3a>
 80095e2:	e09b      	b.n	800971c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80095e4:	4b53      	ldr	r3, [pc, #332]	@ (8009734 <HAL_RCC_GetSysClockFreq+0x184>)
 80095e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80095e8:	e09b      	b.n	8009722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80095ea:	4b53      	ldr	r3, [pc, #332]	@ (8009738 <HAL_RCC_GetSysClockFreq+0x188>)
 80095ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80095ee:	e098      	b.n	8009722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80095f0:	4b4f      	ldr	r3, [pc, #316]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x180>)
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80095fa:	4b4d      	ldr	r3, [pc, #308]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x180>)
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d028      	beq.n	8009658 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009606:	4b4a      	ldr	r3, [pc, #296]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x180>)
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	099b      	lsrs	r3, r3, #6
 800960c:	2200      	movs	r2, #0
 800960e:	623b      	str	r3, [r7, #32]
 8009610:	627a      	str	r2, [r7, #36]	@ 0x24
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009618:	2100      	movs	r1, #0
 800961a:	4b47      	ldr	r3, [pc, #284]	@ (8009738 <HAL_RCC_GetSysClockFreq+0x188>)
 800961c:	fb03 f201 	mul.w	r2, r3, r1
 8009620:	2300      	movs	r3, #0
 8009622:	fb00 f303 	mul.w	r3, r0, r3
 8009626:	4413      	add	r3, r2
 8009628:	4a43      	ldr	r2, [pc, #268]	@ (8009738 <HAL_RCC_GetSysClockFreq+0x188>)
 800962a:	fba0 1202 	umull	r1, r2, r0, r2
 800962e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009630:	460a      	mov	r2, r1
 8009632:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009636:	4413      	add	r3, r2
 8009638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800963a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963c:	2200      	movs	r2, #0
 800963e:	61bb      	str	r3, [r7, #24]
 8009640:	61fa      	str	r2, [r7, #28]
 8009642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009646:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800964a:	f7f6 fe49 	bl	80002e0 <__aeabi_uldivmod>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	4613      	mov	r3, r2
 8009654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009656:	e053      	b.n	8009700 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009658:	4b35      	ldr	r3, [pc, #212]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x180>)
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	099b      	lsrs	r3, r3, #6
 800965e:	2200      	movs	r2, #0
 8009660:	613b      	str	r3, [r7, #16]
 8009662:	617a      	str	r2, [r7, #20]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800966a:	f04f 0b00 	mov.w	fp, #0
 800966e:	4652      	mov	r2, sl
 8009670:	465b      	mov	r3, fp
 8009672:	f04f 0000 	mov.w	r0, #0
 8009676:	f04f 0100 	mov.w	r1, #0
 800967a:	0159      	lsls	r1, r3, #5
 800967c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009680:	0150      	lsls	r0, r2, #5
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	ebb2 080a 	subs.w	r8, r2, sl
 800968a:	eb63 090b 	sbc.w	r9, r3, fp
 800968e:	f04f 0200 	mov.w	r2, #0
 8009692:	f04f 0300 	mov.w	r3, #0
 8009696:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800969a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800969e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80096a2:	ebb2 0408 	subs.w	r4, r2, r8
 80096a6:	eb63 0509 	sbc.w	r5, r3, r9
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	00eb      	lsls	r3, r5, #3
 80096b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80096b8:	00e2      	lsls	r2, r4, #3
 80096ba:	4614      	mov	r4, r2
 80096bc:	461d      	mov	r5, r3
 80096be:	eb14 030a 	adds.w	r3, r4, sl
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	eb45 030b 	adc.w	r3, r5, fp
 80096c8:	607b      	str	r3, [r7, #4]
 80096ca:	f04f 0200 	mov.w	r2, #0
 80096ce:	f04f 0300 	mov.w	r3, #0
 80096d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80096d6:	4629      	mov	r1, r5
 80096d8:	028b      	lsls	r3, r1, #10
 80096da:	4621      	mov	r1, r4
 80096dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80096e0:	4621      	mov	r1, r4
 80096e2:	028a      	lsls	r2, r1, #10
 80096e4:	4610      	mov	r0, r2
 80096e6:	4619      	mov	r1, r3
 80096e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ea:	2200      	movs	r2, #0
 80096ec:	60bb      	str	r3, [r7, #8]
 80096ee:	60fa      	str	r2, [r7, #12]
 80096f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096f4:	f7f6 fdf4 	bl	80002e0 <__aeabi_uldivmod>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4613      	mov	r3, r2
 80096fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009700:	4b0b      	ldr	r3, [pc, #44]	@ (8009730 <HAL_RCC_GetSysClockFreq+0x180>)
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	0c1b      	lsrs	r3, r3, #16
 8009706:	f003 0303 	and.w	r3, r3, #3
 800970a:	3301      	adds	r3, #1
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009710:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009714:	fbb2 f3f3 	udiv	r3, r2, r3
 8009718:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800971a:	e002      	b.n	8009722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800971c:	4b05      	ldr	r3, [pc, #20]	@ (8009734 <HAL_RCC_GetSysClockFreq+0x184>)
 800971e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009724:	4618      	mov	r0, r3
 8009726:	3740      	adds	r7, #64	@ 0x40
 8009728:	46bd      	mov	sp, r7
 800972a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800972e:	bf00      	nop
 8009730:	40023800 	.word	0x40023800
 8009734:	00f42400 	.word	0x00f42400
 8009738:	017d7840 	.word	0x017d7840

0800973c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800973c:	b480      	push	{r7}
 800973e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009740:	4b03      	ldr	r3, [pc, #12]	@ (8009750 <HAL_RCC_GetHCLKFreq+0x14>)
 8009742:	681b      	ldr	r3, [r3, #0]
}
 8009744:	4618      	mov	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20000000 	.word	0x20000000

08009754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009758:	f7ff fff0 	bl	800973c <HAL_RCC_GetHCLKFreq>
 800975c:	4602      	mov	r2, r0
 800975e:	4b05      	ldr	r3, [pc, #20]	@ (8009774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	0a9b      	lsrs	r3, r3, #10
 8009764:	f003 0307 	and.w	r3, r3, #7
 8009768:	4903      	ldr	r1, [pc, #12]	@ (8009778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800976a:	5ccb      	ldrb	r3, [r1, r3]
 800976c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009770:	4618      	mov	r0, r3
 8009772:	bd80      	pop	{r7, pc}
 8009774:	40023800 	.word	0x40023800
 8009778:	08017ec8 	.word	0x08017ec8

0800977c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009780:	f7ff ffdc 	bl	800973c <HAL_RCC_GetHCLKFreq>
 8009784:	4602      	mov	r2, r0
 8009786:	4b05      	ldr	r3, [pc, #20]	@ (800979c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	0b5b      	lsrs	r3, r3, #13
 800978c:	f003 0307 	and.w	r3, r3, #7
 8009790:	4903      	ldr	r1, [pc, #12]	@ (80097a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009792:	5ccb      	ldrb	r3, [r1, r3]
 8009794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009798:	4618      	mov	r0, r3
 800979a:	bd80      	pop	{r7, pc}
 800979c:	40023800 	.word	0x40023800
 80097a0:	08017ec8 	.word	0x08017ec8

080097a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	220f      	movs	r2, #15
 80097b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80097b4:	4b12      	ldr	r3, [pc, #72]	@ (8009800 <HAL_RCC_GetClockConfig+0x5c>)
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f003 0203 	and.w	r2, r3, #3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80097c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009800 <HAL_RCC_GetClockConfig+0x5c>)
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80097cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009800 <HAL_RCC_GetClockConfig+0x5c>)
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80097d8:	4b09      	ldr	r3, [pc, #36]	@ (8009800 <HAL_RCC_GetClockConfig+0x5c>)
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	08db      	lsrs	r3, r3, #3
 80097de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80097e6:	4b07      	ldr	r3, [pc, #28]	@ (8009804 <HAL_RCC_GetClockConfig+0x60>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 020f 	and.w	r2, r3, #15
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	601a      	str	r2, [r3, #0]
}
 80097f2:	bf00      	nop
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	40023800 	.word	0x40023800
 8009804:	40023c00 	.word	0x40023c00

08009808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800981c:	2300      	movs	r3, #0
 800981e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009820:	2300      	movs	r3, #0
 8009822:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d012      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009830:	4b69      	ldr	r3, [pc, #420]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	4a68      	ldr	r2, [pc, #416]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009836:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800983a:	6093      	str	r3, [r2, #8]
 800983c:	4b66      	ldr	r3, [pc, #408]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009844:	4964      	ldr	r1, [pc, #400]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009846:	4313      	orrs	r3, r2
 8009848:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009852:	2301      	movs	r3, #1
 8009854:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d017      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009862:	4b5d      	ldr	r3, [pc, #372]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009868:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009870:	4959      	ldr	r1, [pc, #356]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009872:	4313      	orrs	r3, r2
 8009874:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800987c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009880:	d101      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009882:	2301      	movs	r3, #1
 8009884:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800988e:	2301      	movs	r3, #1
 8009890:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d017      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800989e:	4b4e      	ldr	r3, [pc, #312]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ac:	494a      	ldr	r1, [pc, #296]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098bc:	d101      	bne.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80098be:	2301      	movs	r3, #1
 80098c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80098ca:	2301      	movs	r3, #1
 80098cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80098da:	2301      	movs	r3, #1
 80098dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 808b 	beq.w	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80098ec:	4b3a      	ldr	r3, [pc, #232]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f0:	4a39      	ldr	r2, [pc, #228]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80098f8:	4b37      	ldr	r3, [pc, #220]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009904:	4b35      	ldr	r3, [pc, #212]	@ (80099dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a34      	ldr	r2, [pc, #208]	@ (80099dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800990a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800990e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009910:	f7fa ff5a 	bl	80047c8 <HAL_GetTick>
 8009914:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009916:	e008      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009918:	f7fa ff56 	bl	80047c8 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b64      	cmp	r3, #100	@ 0x64
 8009924:	d901      	bls.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e357      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800992a:	4b2c      	ldr	r3, [pc, #176]	@ (80099dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0f0      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009936:	4b28      	ldr	r3, [pc, #160]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800993a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800993e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d035      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800994a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	429a      	cmp	r2, r3
 8009952:	d02e      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009954:	4b20      	ldr	r3, [pc, #128]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800995c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800995e:	4b1e      	ldr	r3, [pc, #120]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009962:	4a1d      	ldr	r2, [pc, #116]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009968:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800996a:	4b1b      	ldr	r3, [pc, #108]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800996c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800996e:	4a1a      	ldr	r2, [pc, #104]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009974:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009976:	4a18      	ldr	r2, [pc, #96]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800997c:	4b16      	ldr	r3, [pc, #88]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800997e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b01      	cmp	r3, #1
 8009986:	d114      	bne.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009988:	f7fa ff1e 	bl	80047c8 <HAL_GetTick>
 800998c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800998e:	e00a      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009990:	f7fa ff1a 	bl	80047c8 <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800999e:	4293      	cmp	r3, r2
 80099a0:	d901      	bls.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e319      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099a6:	4b0c      	ldr	r3, [pc, #48]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099aa:	f003 0302 	and.w	r3, r3, #2
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d0ee      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099be:	d111      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80099c0:	4b05      	ldr	r3, [pc, #20]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80099cc:	4b04      	ldr	r3, [pc, #16]	@ (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80099ce:	400b      	ands	r3, r1
 80099d0:	4901      	ldr	r1, [pc, #4]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099d2:	4313      	orrs	r3, r2
 80099d4:	608b      	str	r3, [r1, #8]
 80099d6:	e00b      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80099d8:	40023800 	.word	0x40023800
 80099dc:	40007000 	.word	0x40007000
 80099e0:	0ffffcff 	.word	0x0ffffcff
 80099e4:	4baa      	ldr	r3, [pc, #680]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	4aa9      	ldr	r2, [pc, #676]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80099ee:	6093      	str	r3, [r2, #8]
 80099f0:	4ba7      	ldr	r3, [pc, #668]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099fc:	49a4      	ldr	r1, [pc, #656]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0310 	and.w	r3, r3, #16
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d010      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a0e:	4ba0      	ldr	r3, [pc, #640]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a14:	4a9e      	ldr	r2, [pc, #632]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009a1e:	4b9c      	ldr	r3, [pc, #624]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a20:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a28:	4999      	ldr	r1, [pc, #612]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00a      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a3c:	4b94      	ldr	r3, [pc, #592]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a42:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a4a:	4991      	ldr	r1, [pc, #580]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00a      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009a5e:	4b8c      	ldr	r3, [pc, #560]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a6c:	4988      	ldr	r1, [pc, #544]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00a      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a80:	4b83      	ldr	r3, [pc, #524]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a8e:	4980      	ldr	r1, [pc, #512]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aa8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ab0:	4977      	ldr	r1, [pc, #476]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00a      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009ac4:	4b72      	ldr	r3, [pc, #456]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aca:	f023 0203 	bic.w	r2, r3, #3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ad2:	496f      	ldr	r1, [pc, #444]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00a      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ae6:	4b6a      	ldr	r3, [pc, #424]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aec:	f023 020c 	bic.w	r2, r3, #12
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009af4:	4966      	ldr	r1, [pc, #408]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009af6:	4313      	orrs	r3, r2
 8009af8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00a      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b08:	4b61      	ldr	r3, [pc, #388]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b0e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b16:	495e      	ldr	r1, [pc, #376]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009b2a:	4b59      	ldr	r3, [pc, #356]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b30:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b38:	4955      	ldr	r1, [pc, #340]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00a      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009b4c:	4b50      	ldr	r3, [pc, #320]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5a:	494d      	ldr	r1, [pc, #308]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009b6e:	4b48      	ldr	r3, [pc, #288]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b74:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b7c:	4944      	ldr	r1, [pc, #272]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00a      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009b90:	4b3f      	ldr	r3, [pc, #252]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b96:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b9e:	493c      	ldr	r1, [pc, #240]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009bb2:	4b37      	ldr	r3, [pc, #220]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bb8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bc0:	4933      	ldr	r1, [pc, #204]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00a      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bda:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009be2:	492b      	ldr	r1, [pc, #172]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d011      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009bf6:	4b26      	ldr	r3, [pc, #152]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bfc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c04:	4922      	ldr	r1, [pc, #136]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c06:	4313      	orrs	r3, r2
 8009c08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c14:	d101      	bne.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009c16:	2301      	movs	r3, #1
 8009c18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0308 	and.w	r3, r3, #8
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009c26:	2301      	movs	r3, #1
 8009c28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00a      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c36:	4b16      	ldr	r3, [pc, #88]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c3c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c44:	4912      	ldr	r1, [pc, #72]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00b      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009c58:	4b0d      	ldr	r3, [pc, #52]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c5e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c68:	4909      	ldr	r1, [pc, #36]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d006      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 80d9 	beq.w	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009c84:	4b02      	ldr	r3, [pc, #8]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a01      	ldr	r2, [pc, #4]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c8e:	e001      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009c90:	40023800 	.word	0x40023800
 8009c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c96:	f7fa fd97 	bl	80047c8 <HAL_GetTick>
 8009c9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c9c:	e008      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009c9e:	f7fa fd93 	bl	80047c8 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	2b64      	cmp	r3, #100	@ 0x64
 8009caa:	d901      	bls.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e194      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1f0      	bne.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d021      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d11d      	bne.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009cd0:	4b64      	ldr	r3, [pc, #400]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cd6:	0c1b      	lsrs	r3, r3, #16
 8009cd8:	f003 0303 	and.w	r3, r3, #3
 8009cdc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009cde:	4b61      	ldr	r3, [pc, #388]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ce4:	0e1b      	lsrs	r3, r3, #24
 8009ce6:	f003 030f 	and.w	r3, r3, #15
 8009cea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	019a      	lsls	r2, r3, #6
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	041b      	lsls	r3, r3, #16
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	061b      	lsls	r3, r3, #24
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	071b      	lsls	r3, r3, #28
 8009d04:	4957      	ldr	r1, [pc, #348]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d004      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d20:	d00a      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d02e      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d36:	d129      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009d38:	4b4a      	ldr	r3, [pc, #296]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d3e:	0c1b      	lsrs	r3, r3, #16
 8009d40:	f003 0303 	and.w	r3, r3, #3
 8009d44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009d46:	4b47      	ldr	r3, [pc, #284]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d4c:	0f1b      	lsrs	r3, r3, #28
 8009d4e:	f003 0307 	and.w	r3, r3, #7
 8009d52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	019a      	lsls	r2, r3, #6
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	041b      	lsls	r3, r3, #16
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	061b      	lsls	r3, r3, #24
 8009d66:	431a      	orrs	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	071b      	lsls	r3, r3, #28
 8009d6c:	493d      	ldr	r1, [pc, #244]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009d74:	4b3b      	ldr	r3, [pc, #236]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d7a:	f023 021f 	bic.w	r2, r3, #31
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d82:	3b01      	subs	r3, #1
 8009d84:	4937      	ldr	r1, [pc, #220]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d01d      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009d98:	4b32      	ldr	r3, [pc, #200]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d9e:	0e1b      	lsrs	r3, r3, #24
 8009da0:	f003 030f 	and.w	r3, r3, #15
 8009da4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009da6:	4b2f      	ldr	r3, [pc, #188]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dac:	0f1b      	lsrs	r3, r3, #28
 8009dae:	f003 0307 	and.w	r3, r3, #7
 8009db2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	019a      	lsls	r2, r3, #6
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	041b      	lsls	r3, r3, #16
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	061b      	lsls	r3, r3, #24
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	071b      	lsls	r3, r3, #28
 8009dcc:	4925      	ldr	r1, [pc, #148]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d011      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	019a      	lsls	r2, r3, #6
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	041b      	lsls	r3, r3, #16
 8009dec:	431a      	orrs	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	061b      	lsls	r3, r3, #24
 8009df4:	431a      	orrs	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	071b      	lsls	r3, r3, #28
 8009dfc:	4919      	ldr	r1, [pc, #100]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009e04:	4b17      	ldr	r3, [pc, #92]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a16      	ldr	r2, [pc, #88]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e10:	f7fa fcda 	bl	80047c8 <HAL_GetTick>
 8009e14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e16:	e008      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009e18:	f7fa fcd6 	bl	80047c8 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	2b64      	cmp	r3, #100	@ 0x64
 8009e24:	d901      	bls.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e0d7      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0f0      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	f040 80cd 	bne.w	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009e3e:	4b09      	ldr	r3, [pc, #36]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a08      	ldr	r2, [pc, #32]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e4a:	f7fa fcbd 	bl	80047c8 <HAL_GetTick>
 8009e4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009e50:	e00a      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009e52:	f7fa fcb9 	bl	80047c8 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b64      	cmp	r3, #100	@ 0x64
 8009e5e:	d903      	bls.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e0ba      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009e64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009e68:	4b5e      	ldr	r3, [pc, #376]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e74:	d0ed      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d009      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d02e      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d12a      	bne.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009e9e:	4b51      	ldr	r3, [pc, #324]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ea4:	0c1b      	lsrs	r3, r3, #16
 8009ea6:	f003 0303 	and.w	r3, r3, #3
 8009eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009eac:	4b4d      	ldr	r3, [pc, #308]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eb2:	0f1b      	lsrs	r3, r3, #28
 8009eb4:	f003 0307 	and.w	r3, r3, #7
 8009eb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	019a      	lsls	r2, r3, #6
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	041b      	lsls	r3, r3, #16
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	061b      	lsls	r3, r3, #24
 8009ecc:	431a      	orrs	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	071b      	lsls	r3, r3, #28
 8009ed2:	4944      	ldr	r1, [pc, #272]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009eda:	4b42      	ldr	r3, [pc, #264]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ee0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	021b      	lsls	r3, r3, #8
 8009eec:	493d      	ldr	r1, [pc, #244]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d022      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f08:	d11d      	bne.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009f0a:	4b36      	ldr	r3, [pc, #216]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f10:	0e1b      	lsrs	r3, r3, #24
 8009f12:	f003 030f 	and.w	r3, r3, #15
 8009f16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009f18:	4b32      	ldr	r3, [pc, #200]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f1e:	0f1b      	lsrs	r3, r3, #28
 8009f20:	f003 0307 	and.w	r3, r3, #7
 8009f24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	019a      	lsls	r2, r3, #6
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
 8009f30:	041b      	lsls	r3, r3, #16
 8009f32:	431a      	orrs	r2, r3
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	061b      	lsls	r3, r3, #24
 8009f38:	431a      	orrs	r2, r3
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	071b      	lsls	r3, r3, #28
 8009f3e:	4929      	ldr	r1, [pc, #164]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f40:	4313      	orrs	r3, r2
 8009f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0308 	and.w	r3, r3, #8
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d028      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009f52:	4b24      	ldr	r3, [pc, #144]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f58:	0e1b      	lsrs	r3, r3, #24
 8009f5a:	f003 030f 	and.w	r3, r3, #15
 8009f5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009f60:	4b20      	ldr	r3, [pc, #128]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f66:	0c1b      	lsrs	r3, r3, #16
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	019a      	lsls	r2, r3, #6
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	041b      	lsls	r3, r3, #16
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	061b      	lsls	r3, r3, #24
 8009f7e:	431a      	orrs	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	071b      	lsls	r3, r3, #28
 8009f86:	4917      	ldr	r1, [pc, #92]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009f8e:	4b15      	ldr	r3, [pc, #84]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f9c:	4911      	ldr	r1, [pc, #68]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fb0:	f7fa fc0a 	bl	80047c8 <HAL_GetTick>
 8009fb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009fb6:	e008      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009fb8:	f7fa fc06 	bl	80047c8 <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b64      	cmp	r3, #100	@ 0x64
 8009fc4:	d901      	bls.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e007      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009fca:	4b06      	ldr	r3, [pc, #24]	@ (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fd6:	d1ef      	bne.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3720      	adds	r7, #32
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	40023800 	.word	0x40023800

08009fe8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a006:	f040 808d 	bne.w	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a00a:	4b93      	ldr	r3, [pc, #588]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a00c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a010:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a018:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a020:	d07c      	beq.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a028:	d87b      	bhi.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d004      	beq.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a036:	d039      	beq.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a038:	e073      	b.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a03a:	4b87      	ldr	r3, [pc, #540]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d108      	bne.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a046:	4b84      	ldr	r3, [pc, #528]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a04e:	4a83      	ldr	r2, [pc, #524]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a050:	fbb2 f3f3 	udiv	r3, r2, r3
 800a054:	613b      	str	r3, [r7, #16]
 800a056:	e007      	b.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a058:	4b7f      	ldr	r3, [pc, #508]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a060:	4a7f      	ldr	r2, [pc, #508]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a062:	fbb2 f3f3 	udiv	r3, r2, r3
 800a066:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a068:	4b7b      	ldr	r3, [pc, #492]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a06e:	0e1b      	lsrs	r3, r3, #24
 800a070:	f003 030f 	and.w	r3, r3, #15
 800a074:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a076:	4b78      	ldr	r3, [pc, #480]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a07c:	099b      	lsrs	r3, r3, #6
 800a07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	fb03 f202 	mul.w	r2, r3, r2
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a08e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a090:	4b71      	ldr	r3, [pc, #452]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a092:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a096:	0a1b      	lsrs	r3, r3, #8
 800a098:	f003 031f 	and.w	r3, r3, #31
 800a09c:	3301      	adds	r3, #1
 800a09e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a8:	617b      	str	r3, [r7, #20]
        break;
 800a0aa:	e03b      	b.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a0ac:	4b6a      	ldr	r3, [pc, #424]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d108      	bne.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a0b8:	4b67      	ldr	r3, [pc, #412]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0c0:	4a66      	ldr	r2, [pc, #408]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a0c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0c6:	613b      	str	r3, [r7, #16]
 800a0c8:	e007      	b.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a0ca:	4b63      	ldr	r3, [pc, #396]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0d2:	4a63      	ldr	r2, [pc, #396]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0d8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a0da:	4b5f      	ldr	r3, [pc, #380]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0e0:	0e1b      	lsrs	r3, r3, #24
 800a0e2:	f003 030f 	and.w	r3, r3, #15
 800a0e6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a0e8:	4b5b      	ldr	r3, [pc, #364]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0ee:	099b      	lsrs	r3, r3, #6
 800a0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	fb03 f202 	mul.w	r2, r3, r2
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a100:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a102:	4b55      	ldr	r3, [pc, #340]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a108:	f003 031f 	and.w	r3, r3, #31
 800a10c:	3301      	adds	r3, #1
 800a10e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	fbb2 f3f3 	udiv	r3, r2, r3
 800a118:	617b      	str	r3, [r7, #20]
        break;
 800a11a:	e003      	b.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a11c:	4b51      	ldr	r3, [pc, #324]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a11e:	617b      	str	r3, [r7, #20]
        break;
 800a120:	e000      	b.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800a122:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a12a:	f040 808d 	bne.w	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a12e:	4b4a      	ldr	r3, [pc, #296]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a134:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800a13c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a144:	d07c      	beq.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a14c:	d87b      	bhi.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d004      	beq.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a15a:	d039      	beq.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a15c:	e073      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a15e:	4b3e      	ldr	r3, [pc, #248]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d108      	bne.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a16a:	4b3b      	ldr	r3, [pc, #236]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a172:	4a3a      	ldr	r2, [pc, #232]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a174:	fbb2 f3f3 	udiv	r3, r2, r3
 800a178:	613b      	str	r3, [r7, #16]
 800a17a:	e007      	b.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a17c:	4b36      	ldr	r3, [pc, #216]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a184:	4a36      	ldr	r2, [pc, #216]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a186:	fbb2 f3f3 	udiv	r3, r2, r3
 800a18a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a18c:	4b32      	ldr	r3, [pc, #200]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a192:	0e1b      	lsrs	r3, r3, #24
 800a194:	f003 030f 	and.w	r3, r3, #15
 800a198:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a19a:	4b2f      	ldr	r3, [pc, #188]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1a0:	099b      	lsrs	r3, r3, #6
 800a1a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	fb03 f202 	mul.w	r2, r3, r2
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a1b4:	4b28      	ldr	r3, [pc, #160]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1ba:	0a1b      	lsrs	r3, r3, #8
 800a1bc:	f003 031f 	and.w	r3, r3, #31
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1cc:	617b      	str	r3, [r7, #20]
        break;
 800a1ce:	e03b      	b.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a1d0:	4b21      	ldr	r3, [pc, #132]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d108      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a1dc:	4b1e      	ldr	r3, [pc, #120]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ea:	613b      	str	r3, [r7, #16]
 800a1ec:	e007      	b.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a1ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1f6:	4a1a      	ldr	r2, [pc, #104]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1fc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a1fe:	4b16      	ldr	r3, [pc, #88]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a204:	0e1b      	lsrs	r3, r3, #24
 800a206:	f003 030f 	and.w	r3, r3, #15
 800a20a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a20c:	4b12      	ldr	r3, [pc, #72]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a212:	099b      	lsrs	r3, r3, #6
 800a214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	fb03 f202 	mul.w	r2, r3, r2
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	fbb2 f3f3 	udiv	r3, r2, r3
 800a224:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a226:	4b0c      	ldr	r3, [pc, #48]	@ (800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a22c:	f003 031f 	and.w	r3, r3, #31
 800a230:	3301      	adds	r3, #1
 800a232:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	fbb2 f3f3 	udiv	r3, r2, r3
 800a23c:	617b      	str	r3, [r7, #20]
        break;
 800a23e:	e003      	b.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a240:	4b08      	ldr	r3, [pc, #32]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a242:	617b      	str	r3, [r7, #20]
        break;
 800a244:	e000      	b.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800a246:	bf00      	nop
      }
    }
  }

  return frequency;
 800a248:	697b      	ldr	r3, [r7, #20]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	371c      	adds	r7, #28
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	40023800 	.word	0x40023800
 800a25c:	00f42400 	.word	0x00f42400
 800a260:	017d7840 	.word	0x017d7840
 800a264:	00bb8000 	.word	0x00bb8000

0800a268 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e071      	b.n	800a35e <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	7f5b      	ldrb	r3, [r3, #29]
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b00      	cmp	r3, #0
 800a282:	d105      	bne.n	800a290 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7f8 fd80 	bl	8002d90 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2202      	movs	r2, #2
 800a294:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	f003 0310 	and.w	r3, r3, #16
 800a2a0:	2b10      	cmp	r3, #16
 800a2a2:	d053      	beq.n	800a34c <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	22ca      	movs	r2, #202	@ 0xca
 800a2aa:	625a      	str	r2, [r3, #36]	@ 0x24
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2253      	movs	r2, #83	@ 0x53
 800a2b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 fac7 	bl	800a848 <RTC_EnterInitMode>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d12a      	bne.n	800a31a <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6899      	ldr	r1, [r3, #8]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	4b26      	ldr	r3, [pc, #152]	@ (800a368 <HAL_RTC_Init+0x100>)
 800a2d0:	400b      	ands	r3, r1
 800a2d2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6899      	ldr	r1, [r3, #8]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	695b      	ldr	r3, [r3, #20]
 800a2e8:	431a      	orrs	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	68d2      	ldr	r2, [r2, #12]
 800a2fa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6919      	ldr	r1, [r3, #16]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	041a      	lsls	r2, r3, #16
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	430a      	orrs	r2, r1
 800a30e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fad0 	bl	800a8b6 <RTC_ExitInitMode>
 800a316:	4603      	mov	r3, r0
 800a318:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d110      	bne.n	800a342 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f022 0208 	bic.w	r2, r2, #8
 800a32e:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	699a      	ldr	r2, [r3, #24]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	430a      	orrs	r2, r1
 800a340:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	22ff      	movs	r2, #255	@ 0xff
 800a348:	625a      	str	r2, [r3, #36]	@ 0x24
 800a34a:	e001      	b.n	800a350 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d102      	bne.n	800a35c <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	ff8fffbf 	.word	0xff8fffbf

0800a36c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a36c:	b590      	push	{r4, r7, lr}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a378:	2300      	movs	r3, #0
 800a37a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	7f1b      	ldrb	r3, [r3, #28]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d101      	bne.n	800a388 <HAL_RTC_SetTime+0x1c>
 800a384:	2302      	movs	r3, #2
 800a386:	e085      	b.n	800a494 <HAL_RTC_SetTime+0x128>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2201      	movs	r2, #1
 800a38c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2202      	movs	r2, #2
 800a392:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d126      	bne.n	800a3e8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d102      	bne.n	800a3ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 faa4 	bl	800a900 <RTC_ByteToBcd2>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	785b      	ldrb	r3, [r3, #1]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 fa9d 	bl	800a900 <RTC_ByteToBcd2>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a3ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	789b      	ldrb	r3, [r3, #2]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f000 fa95 	bl	800a900 <RTC_ByteToBcd2>
 800a3d6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	78db      	ldrb	r3, [r3, #3]
 800a3e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	617b      	str	r3, [r7, #20]
 800a3e6:	e018      	b.n	800a41a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d102      	bne.n	800a3fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	785b      	ldrb	r3, [r3, #1]
 800a406:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a408:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a40e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	78db      	ldrb	r3, [r3, #3]
 800a414:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a416:	4313      	orrs	r3, r2
 800a418:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	22ca      	movs	r2, #202	@ 0xca
 800a420:	625a      	str	r2, [r3, #36]	@ 0x24
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2253      	movs	r2, #83	@ 0x53
 800a428:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f000 fa0c 	bl	800a848 <RTC_EnterInitMode>
 800a430:	4603      	mov	r3, r0
 800a432:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a434:	7cfb      	ldrb	r3, [r7, #19]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d11e      	bne.n	800a478 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	6979      	ldr	r1, [r7, #20]
 800a440:	4b16      	ldr	r3, [pc, #88]	@ (800a49c <HAL_RTC_SetTime+0x130>)
 800a442:	400b      	ands	r3, r1
 800a444:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	689a      	ldr	r2, [r3, #8]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a454:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	6899      	ldr	r1, [r3, #8]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	68da      	ldr	r2, [r3, #12]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	431a      	orrs	r2, r3
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f000 fa21 	bl	800a8b6 <RTC_ExitInitMode>
 800a474:	4603      	mov	r3, r0
 800a476:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a478:	7cfb      	ldrb	r3, [r7, #19]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d102      	bne.n	800a484 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2201      	movs	r2, #1
 800a482:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	22ff      	movs	r2, #255	@ 0xff
 800a48a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	771a      	strb	r2, [r3, #28]

  return status;
 800a492:	7cfb      	ldrb	r3, [r7, #19]
}
 800a494:	4618      	mov	r0, r3
 800a496:	371c      	adds	r7, #28
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd90      	pop	{r4, r7, pc}
 800a49c:	007f7f7f 	.word	0x007f7f7f

0800a4a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a4a0:	b590      	push	{r4, r7, lr}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	7f1b      	ldrb	r3, [r3, #28]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d101      	bne.n	800a4bc <HAL_RTC_SetDate+0x1c>
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	e06f      	b.n	800a59c <HAL_RTC_SetDate+0xfc>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10e      	bne.n	800a4ec <HAL_RTC_SetDate+0x4c>
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	785b      	ldrb	r3, [r3, #1]
 800a4d2:	f003 0310 	and.w	r3, r3, #16
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d008      	beq.n	800a4ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	785b      	ldrb	r3, [r3, #1]
 800a4de:	f023 0310 	bic.w	r3, r3, #16
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	330a      	adds	r3, #10
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d11c      	bne.n	800a52c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	78db      	ldrb	r3, [r3, #3]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 fa02 	bl	800a900 <RTC_ByteToBcd2>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	785b      	ldrb	r3, [r3, #1]
 800a504:	4618      	mov	r0, r3
 800a506:	f000 f9fb 	bl	800a900 <RTC_ByteToBcd2>
 800a50a:	4603      	mov	r3, r0
 800a50c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a50e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	789b      	ldrb	r3, [r3, #2]
 800a514:	4618      	mov	r0, r3
 800a516:	f000 f9f3 	bl	800a900 <RTC_ByteToBcd2>
 800a51a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a51c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a526:	4313      	orrs	r3, r2
 800a528:	617b      	str	r3, [r7, #20]
 800a52a:	e00e      	b.n	800a54a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	78db      	ldrb	r3, [r3, #3]
 800a530:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	785b      	ldrb	r3, [r3, #1]
 800a536:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a538:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a53e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a546:	4313      	orrs	r3, r2
 800a548:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	22ca      	movs	r2, #202	@ 0xca
 800a550:	625a      	str	r2, [r3, #36]	@ 0x24
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2253      	movs	r2, #83	@ 0x53
 800a558:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 f974 	bl	800a848 <RTC_EnterInitMode>
 800a560:	4603      	mov	r3, r0
 800a562:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a564:	7cfb      	ldrb	r3, [r7, #19]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10a      	bne.n	800a580 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	6979      	ldr	r1, [r7, #20]
 800a570:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a4 <HAL_RTC_SetDate+0x104>)
 800a572:	400b      	ands	r3, r1
 800a574:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 f99d 	bl	800a8b6 <RTC_ExitInitMode>
 800a57c:	4603      	mov	r3, r0
 800a57e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a580:	7cfb      	ldrb	r3, [r7, #19]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d102      	bne.n	800a58c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2201      	movs	r2, #1
 800a58a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	22ff      	movs	r2, #255	@ 0xff
 800a592:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	771a      	strb	r2, [r3, #28]

  return status;
 800a59a:	7cfb      	ldrb	r3, [r7, #19]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	371c      	adds	r7, #28
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd90      	pop	{r4, r7, pc}
 800a5a4:	00ffff3f 	.word	0x00ffff3f

0800a5a8 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a5a8:	b590      	push	{r4, r7, lr}
 800a5aa:	b089      	sub	sp, #36	@ 0x24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	7f1b      	ldrb	r3, [r3, #28]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d101      	bne.n	800a5cc <HAL_RTC_SetAlarm+0x24>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e113      	b.n	800a7f4 <HAL_RTC_SetAlarm+0x24c>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2202      	movs	r2, #2
 800a5d6:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d137      	bne.n	800a64e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d102      	bne.n	800a5f2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 f982 	bl	800a900 <RTC_ByteToBcd2>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	785b      	ldrb	r3, [r3, #1]
 800a604:	4618      	mov	r0, r3
 800a606:	f000 f97b 	bl	800a900 <RTC_ByteToBcd2>
 800a60a:	4603      	mov	r3, r0
 800a60c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a60e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	789b      	ldrb	r3, [r3, #2]
 800a614:	4618      	mov	r0, r3
 800a616:	f000 f973 	bl	800a900 <RTC_ByteToBcd2>
 800a61a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a61c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	78db      	ldrb	r3, [r3, #3]
 800a624:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a626:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a630:	4618      	mov	r0, r3
 800a632:	f000 f965 	bl	800a900 <RTC_ByteToBcd2>
 800a636:	4603      	mov	r3, r0
 800a638:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800a63a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a642:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a648:	4313      	orrs	r3, r2
 800a64a:	61fb      	str	r3, [r7, #28]
 800a64c:	e023      	b.n	800a696 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d102      	bne.n	800a662 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	2200      	movs	r2, #0
 800a660:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	785b      	ldrb	r3, [r3, #1]
 800a66c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a66e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a674:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	78db      	ldrb	r3, [r3, #3]
 800a67a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a67c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a684:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800a686:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a68c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a692:	4313      	orrs	r3, r2
 800a694:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	22ca      	movs	r2, #202	@ 0xca
 800a6a8:	625a      	str	r2, [r3, #36]	@ 0x24
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2253      	movs	r2, #83	@ 0x53
 800a6b0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6ba:	d148      	bne.n	800a74e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689a      	ldr	r2, [r3, #8]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a6ca:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	689a      	ldr	r2, [r3, #8]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a6da:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800a6ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a6ee:	f7fa f86b 	bl	80047c8 <HAL_GetTick>
 800a6f2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a6f4:	e013      	b.n	800a71e <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a6f6:	f7fa f867 	bl	80047c8 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a704:	d90b      	bls.n	800a71e <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	22ff      	movs	r2, #255	@ 0xff
 800a70c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2203      	movs	r2, #3
 800a712:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a71a:	2303      	movs	r3, #3
 800a71c:	e06a      	b.n	800a7f4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d0e4      	beq.n	800a6f6 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	69fa      	ldr	r2, [r7, #28]
 800a732:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689a      	ldr	r2, [r3, #8]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a74a:	609a      	str	r2, [r3, #8]
 800a74c:	e047      	b.n	800a7de <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	689a      	ldr	r2, [r3, #8]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a75c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a76c:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	b2da      	uxtb	r2, r3
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800a77e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a780:	f7fa f822 	bl	80047c8 <HAL_GetTick>
 800a784:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a786:	e013      	b.n	800a7b0 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a788:	f7fa f81e 	bl	80047c8 <HAL_GetTick>
 800a78c:	4602      	mov	r2, r0
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a796:	d90b      	bls.n	800a7b0 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	22ff      	movs	r2, #255	@ 0xff
 800a79e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2203      	movs	r2, #3
 800a7a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	e021      	b.n	800a7f4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	f003 0302 	and.w	r3, r3, #2
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0e4      	beq.n	800a788 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69fa      	ldr	r2, [r7, #28]
 800a7c4:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	689a      	ldr	r2, [r3, #8]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	22ff      	movs	r2, #255	@ 0xff
 800a7e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3724      	adds	r7, #36	@ 0x24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd90      	pop	{r4, r7, pc}

0800a7fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a0d      	ldr	r2, [pc, #52]	@ (800a844 <HAL_RTC_WaitForSynchro+0x48>)
 800a80e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a810:	f7f9 ffda 	bl	80047c8 <HAL_GetTick>
 800a814:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a816:	e009      	b.n	800a82c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a818:	f7f9 ffd6 	bl	80047c8 <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a826:	d901      	bls.n	800a82c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e007      	b.n	800a83c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b00      	cmp	r3, #0
 800a838:	d0ee      	beq.n	800a818 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	0001ff5f 	.word	0x0001ff5f

0800a848 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a862:	2b00      	cmp	r3, #0
 800a864:	d122      	bne.n	800a8ac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68da      	ldr	r2, [r3, #12]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a874:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a876:	f7f9 ffa7 	bl	80047c8 <HAL_GetTick>
 800a87a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a87c:	e00c      	b.n	800a898 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a87e:	f7f9 ffa3 	bl	80047c8 <HAL_GetTick>
 800a882:	4602      	mov	r2, r0
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a88c:	d904      	bls.n	800a898 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2204      	movs	r2, #4
 800a892:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d102      	bne.n	800a8ac <RTC_EnterInitMode+0x64>
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d1e8      	bne.n	800a87e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68da      	ldr	r2, [r3, #12]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a8d0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f003 0320 	and.w	r3, r3, #32
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7ff ff8b 	bl	800a7fc <HAL_RTC_WaitForSynchro>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d004      	beq.n	800a8f6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2204      	movs	r2, #4
 800a8f0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	4603      	mov	r3, r0
 800a908:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a90e:	e005      	b.n	800a91c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	3301      	adds	r3, #1
 800a914:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a916:	79fb      	ldrb	r3, [r7, #7]
 800a918:	3b0a      	subs	r3, #10
 800a91a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a91c:	79fb      	ldrb	r3, [r7, #7]
 800a91e:	2b09      	cmp	r3, #9
 800a920:	d8f6      	bhi.n	800a910 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	b2db      	uxtb	r3, r3
 800a926:	011b      	lsls	r3, r3, #4
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	79fb      	ldrb	r3, [r7, #7]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	b2db      	uxtb	r3, r3
}
 800a930:	4618      	mov	r0, r3
 800a932:	3714      	adds	r7, #20
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b087      	sub	sp, #28
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a948:	2300      	movs	r3, #0
 800a94a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	7f1b      	ldrb	r3, [r3, #28]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d101      	bne.n	800a958 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a954:	2302      	movs	r3, #2
 800a956:	e050      	b.n	800a9fa <HAL_RTCEx_SetTimeStamp+0xbe>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2201      	movs	r2, #1
 800a95c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2202      	movs	r2, #2
 800a962:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f022 0206 	bic.w	r2, r2, #6
 800a972:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	430a      	orrs	r2, r1
 800a982:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	689a      	ldr	r2, [r3, #8]
 800a98a:	4b1f      	ldr	r3, [pc, #124]	@ (800aa08 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800a990:	697a      	ldr	r2, [r7, #20]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	4313      	orrs	r3, r2
 800a996:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	22ca      	movs	r2, #202	@ 0xca
 800a99e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2253      	movs	r2, #83	@ 0x53
 800a9a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	697a      	ldr	r2, [r7, #20]
 800a9ae:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800a9c0:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800a9d2:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689a      	ldr	r2, [r3, #8]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a9e2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	22ff      	movs	r2, #255	@ 0xff
 800a9ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	371c      	adds	r7, #28
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	fffff7f7 	.word	0xfffff7f7

0800aa0c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b088      	sub	sp, #32
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e156      	b.n	800acd8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d106      	bne.n	800aa44 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7f8 fdba 	bl	80035b8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2202      	movs	r2, #2
 800aa48:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f95b 	bl	800ad08 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d00c      	beq.n	800aa74 <HAL_SAI_Init+0x68>
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d80d      	bhi.n	800aa7a <HAL_SAI_Init+0x6e>
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d002      	beq.n	800aa68 <HAL_SAI_Init+0x5c>
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d003      	beq.n	800aa6e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800aa66:	e008      	b.n	800aa7a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	61fb      	str	r3, [r7, #28]
      break;
 800aa6c:	e006      	b.n	800aa7c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800aa6e:	2310      	movs	r3, #16
 800aa70:	61fb      	str	r3, [r7, #28]
      break;
 800aa72:	e003      	b.n	800aa7c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800aa74:	2320      	movs	r3, #32
 800aa76:	61fb      	str	r3, [r7, #28]
      break;
 800aa78:	e000      	b.n	800aa7c <HAL_SAI_Init+0x70>
      break;
 800aa7a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	2b03      	cmp	r3, #3
 800aa82:	d81e      	bhi.n	800aac2 <HAL_SAI_Init+0xb6>
 800aa84:	a201      	add	r2, pc, #4	@ (adr r2, 800aa8c <HAL_SAI_Init+0x80>)
 800aa86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8a:	bf00      	nop
 800aa8c:	0800aa9d 	.word	0x0800aa9d
 800aa90:	0800aaa3 	.word	0x0800aaa3
 800aa94:	0800aaab 	.word	0x0800aaab
 800aa98:	0800aab3 	.word	0x0800aab3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	617b      	str	r3, [r7, #20]
    }
    break;
 800aaa0:	e010      	b.n	800aac4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800aaa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aaa6:	617b      	str	r3, [r7, #20]
    }
    break;
 800aaa8:	e00c      	b.n	800aac4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aaaa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aaae:	617b      	str	r3, [r7, #20]
    }
    break;
 800aab0:	e008      	b.n	800aac4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aab2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aab6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	f043 0301 	orr.w	r3, r3, #1
 800aabe:	61fb      	str	r3, [r7, #28]
    }
    break;
 800aac0:	e000      	b.n	800aac4 <HAL_SAI_Init+0xb8>
    default:
      break;
 800aac2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a85      	ldr	r2, [pc, #532]	@ (800ace0 <HAL_SAI_Init+0x2d4>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d004      	beq.n	800aad8 <HAL_SAI_Init+0xcc>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a84      	ldr	r2, [pc, #528]	@ (800ace4 <HAL_SAI_Init+0x2d8>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d103      	bne.n	800aae0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800aad8:	4a83      	ldr	r2, [pc, #524]	@ (800ace8 <HAL_SAI_Init+0x2dc>)
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	6013      	str	r3, [r2, #0]
 800aade:	e002      	b.n	800aae6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800aae0:	4a82      	ldr	r2, [pc, #520]	@ (800acec <HAL_SAI_Init+0x2e0>)
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	69db      	ldr	r3, [r3, #28]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d04c      	beq.n	800ab88 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a7a      	ldr	r2, [pc, #488]	@ (800ace0 <HAL_SAI_Init+0x2d4>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d004      	beq.n	800ab06 <HAL_SAI_Init+0xfa>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a78      	ldr	r2, [pc, #480]	@ (800ace4 <HAL_SAI_Init+0x2d8>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d104      	bne.n	800ab10 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ab06:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ab0a:	f7ff fa6d 	bl	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab0e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a76      	ldr	r2, [pc, #472]	@ (800acf0 <HAL_SAI_Init+0x2e4>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d004      	beq.n	800ab24 <HAL_SAI_Init+0x118>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a75      	ldr	r2, [pc, #468]	@ (800acf4 <HAL_SAI_Init+0x2e8>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d104      	bne.n	800ab2e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ab24:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ab28:	f7ff fa5e 	bl	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab2c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	4613      	mov	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4413      	add	r3, r2
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	461a      	mov	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	025b      	lsls	r3, r3, #9
 800ab40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab44:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	4a6b      	ldr	r2, [pc, #428]	@ (800acf8 <HAL_SAI_Init+0x2ec>)
 800ab4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab4e:	08da      	lsrs	r2, r3, #3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800ab54:	68f9      	ldr	r1, [r7, #12]
 800ab56:	4b68      	ldr	r3, [pc, #416]	@ (800acf8 <HAL_SAI_Init+0x2ec>)
 800ab58:	fba3 2301 	umull	r2, r3, r3, r1
 800ab5c:	08da      	lsrs	r2, r3, #3
 800ab5e:	4613      	mov	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4413      	add	r3, r2
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	1aca      	subs	r2, r1, r3
 800ab68:	2a08      	cmp	r2, #8
 800ab6a:	d904      	bls.n	800ab76 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a1b      	ldr	r3, [r3, #32]
 800ab70:	1c5a      	adds	r2, r3, #1
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab7a:	2b04      	cmp	r3, #4
 800ab7c:	d104      	bne.n	800ab88 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	085a      	lsrs	r2, r3, #1
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d003      	beq.n	800ab98 <HAL_SAI_Init+0x18c>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d109      	bne.n	800abac <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d101      	bne.n	800aba4 <HAL_SAI_Init+0x198>
 800aba0:	2300      	movs	r3, #0
 800aba2:	e001      	b.n	800aba8 <HAL_SAI_Init+0x19c>
 800aba4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aba8:	61bb      	str	r3, [r7, #24]
 800abaa:	e008      	b.n	800abbe <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d102      	bne.n	800abba <HAL_SAI_Init+0x1ae>
 800abb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abb8:	e000      	b.n	800abbc <HAL_SAI_Init+0x1b0>
 800abba:	2300      	movs	r3, #0
 800abbc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6819      	ldr	r1, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	4b4c      	ldr	r3, [pc, #304]	@ (800acfc <HAL_SAI_Init+0x2f0>)
 800abca:	400b      	ands	r3, r1
 800abcc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	6819      	ldr	r1, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abdc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800abe2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe8:	431a      	orrs	r2, r3
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800abf6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ac02:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	051b      	lsls	r3, r3, #20
 800ac0a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	430a      	orrs	r2, r1
 800ac12:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6859      	ldr	r1, [r3, #4]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	4b38      	ldr	r3, [pc, #224]	@ (800ad00 <HAL_SAI_Init+0x2f4>)
 800ac20:	400b      	ands	r3, r1
 800ac22:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	6859      	ldr	r1, [r3, #4]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	699a      	ldr	r2, [r3, #24]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac32:	431a      	orrs	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac38:	431a      	orrs	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6899      	ldr	r1, [r3, #8]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	4b2d      	ldr	r3, [pc, #180]	@ (800ad04 <HAL_SAI_Init+0x2f8>)
 800ac4e:	400b      	ands	r3, r1
 800ac50:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	6899      	ldr	r1, [r3, #8]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac5c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ac62:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800ac68:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800ac6e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac74:	3b01      	subs	r3, #1
 800ac76:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ac78:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	430a      	orrs	r2, r1
 800ac80:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68d9      	ldr	r1, [r3, #12]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800ac90:	400b      	ands	r3, r1
 800ac92:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68d9      	ldr	r1, [r3, #12]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aca2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aca8:	041b      	lsls	r3, r3, #16
 800acaa:	431a      	orrs	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acb0:	3b01      	subs	r3, #1
 800acb2:	021b      	lsls	r3, r3, #8
 800acb4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	430a      	orrs	r2, r1
 800acbc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2201      	movs	r2, #1
 800acca:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3720      	adds	r7, #32
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	40015804 	.word	0x40015804
 800ace4:	40015824 	.word	0x40015824
 800ace8:	40015800 	.word	0x40015800
 800acec:	40015c00 	.word	0x40015c00
 800acf0:	40015c04 	.word	0x40015c04
 800acf4:	40015c24 	.word	0x40015c24
 800acf8:	cccccccd 	.word	0xcccccccd
 800acfc:	ff05c010 	.word	0xff05c010
 800ad00:	ffff1ff0 	.word	0xffff1ff0
 800ad04:	fff88000 	.word	0xfff88000

0800ad08 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800ad10:	4b17      	ldr	r3, [pc, #92]	@ (800ad70 <SAI_Disable+0x68>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a17      	ldr	r2, [pc, #92]	@ (800ad74 <SAI_Disable+0x6c>)
 800ad16:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1a:	0b1b      	lsrs	r3, r3, #12
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ad32:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	1e5a      	subs	r2, r3, #1
 800ad38:	60fa      	str	r2, [r7, #12]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	72fb      	strb	r3, [r7, #11]
      break;
 800ad52:	e006      	b.n	800ad62 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1e8      	bne.n	800ad34 <SAI_Disable+0x2c>

  return status;
 800ad62:	7afb      	ldrb	r3, [r7, #11]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	20000000 	.word	0x20000000
 800ad74:	95cbec1b 	.word	0x95cbec1b

0800ad78 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e022      	b.n	800add0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d105      	bne.n	800ada2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7f8 f825 	bl	8002dec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2203      	movs	r2, #3
 800ada6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f814 	bl	800add8 <HAL_SD_InitCard>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e00a      	b.n	800add0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800add8:	b5b0      	push	{r4, r5, r7, lr}
 800adda:	b08e      	sub	sp, #56	@ 0x38
 800addc:	af04      	add	r7, sp, #16
 800adde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ade0:	2300      	movs	r3, #0
 800ade2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800ade4:	2300      	movs	r3, #0
 800ade6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ade8:	2300      	movs	r3, #0
 800adea:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800adec:	2300      	movs	r3, #0
 800adee:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800adf0:	2300      	movs	r3, #0
 800adf2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800adf4:	2376      	movs	r3, #118	@ 0x76
 800adf6:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681d      	ldr	r5, [r3, #0]
 800adfc:	466c      	mov	r4, sp
 800adfe:	f107 0318 	add.w	r3, r7, #24
 800ae02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae0a:	f107 030c 	add.w	r3, r7, #12
 800ae0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae10:	4628      	mov	r0, r5
 800ae12:	f003 f915 	bl	800e040 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ae24:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f003 f941 	bl	800e0b2 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae3e:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800ae40:	2002      	movs	r0, #2
 800ae42:	f7f9 fccd 	bl	80047e0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fe10 	bl	800ba6c <SD_PowerON>
 800ae4c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00b      	beq.n	800ae6c <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae62:	431a      	orrs	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e02e      	b.n	800aeca <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fd2f 	bl	800b8d0 <SD_InitCard>
 800ae72:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00b      	beq.n	800ae92 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae88:	431a      	orrs	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e01b      	b.n	800aeca <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f003 f99c 	bl	800e1d8 <SDMMC_CmdBlockLength>
 800aea0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800aea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00f      	beq.n	800aec8 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a09      	ldr	r2, [pc, #36]	@ (800aed4 <HAL_SD_InitCard+0xfc>)
 800aeae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb6:	431a      	orrs	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e000      	b.n	800aeca <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3728      	adds	r7, #40	@ 0x28
 800aece:	46bd      	mov	sp, r7
 800aed0:	bdb0      	pop	{r4, r5, r7, pc}
 800aed2:	bf00      	nop
 800aed4:	004005ff 	.word	0x004005ff

0800aed8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b08c      	sub	sp, #48	@ 0x30
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
 800aee4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d107      	bne.n	800af00 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e0c3      	b.n	800b088 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800af06:	b2db      	uxtb	r3, r3
 800af08:	2b01      	cmp	r3, #1
 800af0a:	f040 80bc 	bne.w	800b086 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800af14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	441a      	add	r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af1e:	429a      	cmp	r2, r3
 800af20:	d907      	bls.n	800af32 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af26:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e0aa      	b.n	800b088 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2203      	movs	r2, #3
 800af36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2200      	movs	r2, #0
 800af40:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800af50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af56:	4a4e      	ldr	r2, [pc, #312]	@ (800b090 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800af58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af5e:	4a4d      	ldr	r2, [pc, #308]	@ (800b094 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800af60:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af66:	2200      	movs	r2, #0
 800af68:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6e:	2200      	movs	r2, #0
 800af70:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af82:	689a      	ldr	r2, [r3, #8]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	430a      	orrs	r2, r1
 800af8c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3380      	adds	r3, #128	@ 0x80
 800af98:	4619      	mov	r1, r3
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	025b      	lsls	r3, r3, #9
 800afa0:	089b      	lsrs	r3, r3, #2
 800afa2:	f7fa f927 	bl	80051f4 <HAL_DMA_Start_IT>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d017      	beq.n	800afdc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800afba:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a35      	ldr	r2, [pc, #212]	@ (800b098 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800afc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afc8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	e055      	b.n	800b088 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f042 0208 	orr.w	r2, r2, #8
 800afea:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d002      	beq.n	800affa <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800aff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff6:	025b      	lsls	r3, r3, #9
 800aff8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800affa:	f04f 33ff 	mov.w	r3, #4294967295
 800affe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	025b      	lsls	r3, r3, #9
 800b004:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b006:	2390      	movs	r3, #144	@ 0x90
 800b008:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b00a:	2302      	movs	r3, #2
 800b00c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b00e:	2300      	movs	r3, #0
 800b010:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b012:	2301      	movs	r3, #1
 800b014:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f107 0210 	add.w	r2, r7, #16
 800b01e:	4611      	mov	r1, r2
 800b020:	4618      	mov	r0, r3
 800b022:	f003 f8ad 	bl	800e180 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d90a      	bls.n	800b042 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2282      	movs	r2, #130	@ 0x82
 800b030:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b038:	4618      	mov	r0, r3
 800b03a:	f003 f911 	bl	800e260 <SDMMC_CmdReadMultiBlock>
 800b03e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b040:	e009      	b.n	800b056 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2281      	movs	r2, #129	@ 0x81
 800b046:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b04e:	4618      	mov	r0, r3
 800b050:	f003 f8e4 	bl	800e21c <SDMMC_CmdReadSingleBlock>
 800b054:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d012      	beq.n	800b082 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a0d      	ldr	r2, [pc, #52]	@ (800b098 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b062:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b06a:	431a      	orrs	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e002      	b.n	800b088 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	e000      	b.n	800b088 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800b086:	2302      	movs	r3, #2
  }
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3730      	adds	r7, #48	@ 0x30
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	0800b7bb 	.word	0x0800b7bb
 800b094:	0800b82d 	.word	0x0800b82d
 800b098:	004005ff 	.word	0x004005ff

0800b09c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b08c      	sub	sp, #48	@ 0x30
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
 800b0a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d107      	bne.n	800b0c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e0c6      	b.n	800b252 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	f040 80bf 	bne.w	800b250 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b0d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	441a      	add	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d907      	bls.n	800b0f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ea:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e0ad      	b.n	800b252 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2203      	movs	r2, #3
 800b0fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2200      	movs	r2, #0
 800b104:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f042 021a 	orr.w	r2, r2, #26
 800b114:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b11a:	4a50      	ldr	r2, [pc, #320]	@ (800b25c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800b11c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b122:	4a4f      	ldr	r2, [pc, #316]	@ (800b260 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800b124:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b12a:	2200      	movs	r2, #0
 800b12c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b132:	2b01      	cmp	r3, #1
 800b134:	d002      	beq.n	800b13c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b138:	025b      	lsls	r3, r3, #9
 800b13a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d90a      	bls.n	800b158 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	22a0      	movs	r2, #160	@ 0xa0
 800b146:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b14e:	4618      	mov	r0, r3
 800b150:	f003 f8ca 	bl	800e2e8 <SDMMC_CmdWriteMultiBlock>
 800b154:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b156:	e009      	b.n	800b16c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2290      	movs	r2, #144	@ 0x90
 800b15c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b164:	4618      	mov	r0, r3
 800b166:	f003 f89d 	bl	800e2a4 <SDMMC_CmdWriteSingleBlock>
 800b16a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d012      	beq.n	800b198 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a3b      	ldr	r2, [pc, #236]	@ (800b264 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b178:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b180:	431a      	orrs	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2201      	movs	r2, #1
 800b18a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	e05c      	b.n	800b252 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f042 0208 	orr.w	r2, r2, #8
 800b1a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1ac:	2240      	movs	r2, #64	@ 0x40
 800b1ae:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1c0:	689a      	ldr	r2, [r3, #8]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	430a      	orrs	r2, r1
 800b1ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b1d0:	68b9      	ldr	r1, [r7, #8]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3380      	adds	r3, #128	@ 0x80
 800b1d8:	461a      	mov	r2, r3
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	025b      	lsls	r3, r3, #9
 800b1de:	089b      	lsrs	r3, r3, #2
 800b1e0:	f7fa f808 	bl	80051f4 <HAL_DMA_Start_IT>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d01a      	beq.n	800b220 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f022 021a 	bic.w	r2, r2, #26
 800b1f8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a19      	ldr	r2, [pc, #100]	@ (800b264 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b200:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b206:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2201      	movs	r2, #1
 800b212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e018      	b.n	800b252 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b220:	f04f 33ff 	mov.w	r3, #4294967295
 800b224:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	025b      	lsls	r3, r3, #9
 800b22a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b22c:	2390      	movs	r3, #144	@ 0x90
 800b22e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b230:	2300      	movs	r3, #0
 800b232:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b234:	2300      	movs	r3, #0
 800b236:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b238:	2301      	movs	r3, #1
 800b23a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f107 0210 	add.w	r2, r7, #16
 800b244:	4611      	mov	r1, r2
 800b246:	4618      	mov	r0, r3
 800b248:	f002 ff9a 	bl	800e180 <SDMMC_ConfigData>

      return HAL_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	e000      	b.n	800b252 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800b250:	2302      	movs	r3, #2
  }
}
 800b252:	4618      	mov	r0, r3
 800b254:	3730      	adds	r7, #48	@ 0x30
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	0800b791 	.word	0x0800b791
 800b260:	0800b82d 	.word	0x0800b82d
 800b264:	004005ff 	.word	0x004005ff

0800b268 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b28a:	0f9b      	lsrs	r3, r3, #30
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b296:	0e9b      	lsrs	r3, r3, #26
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	f003 030f 	and.w	r3, r3, #15
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2a8:	0e1b      	lsrs	r3, r3, #24
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	f003 0303 	and.w	r3, r3, #3
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2ba:	0c1b      	lsrs	r3, r3, #16
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2c6:	0a1b      	lsrs	r3, r3, #8
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2dc:	0d1b      	lsrs	r3, r3, #20
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2e8:	0c1b      	lsrs	r3, r3, #16
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	f003 030f 	and.w	r3, r3, #15
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2fa:	0bdb      	lsrs	r3, r3, #15
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	f003 0301 	and.w	r3, r3, #1
 800b302:	b2da      	uxtb	r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b30c:	0b9b      	lsrs	r3, r3, #14
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	f003 0301 	and.w	r3, r3, #1
 800b314:	b2da      	uxtb	r2, r3
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b31e:	0b5b      	lsrs	r3, r3, #13
 800b320:	b2db      	uxtb	r3, r3
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	b2da      	uxtb	r2, r3
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b330:	0b1b      	lsrs	r3, r3, #12
 800b332:	b2db      	uxtb	r3, r3
 800b334:	f003 0301 	and.w	r3, r3, #1
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2200      	movs	r2, #0
 800b342:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d163      	bne.n	800b414 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b350:	009a      	lsls	r2, r3, #2
 800b352:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b356:	4013      	ands	r3, r2
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800b35c:	0f92      	lsrs	r2, r2, #30
 800b35e:	431a      	orrs	r2, r3
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b368:	0edb      	lsrs	r3, r3, #27
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	f003 0307 	and.w	r3, r3, #7
 800b370:	b2da      	uxtb	r2, r3
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b37a:	0e1b      	lsrs	r3, r3, #24
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	f003 0307 	and.w	r3, r3, #7
 800b382:	b2da      	uxtb	r2, r3
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b38c:	0d5b      	lsrs	r3, r3, #21
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	f003 0307 	and.w	r3, r3, #7
 800b394:	b2da      	uxtb	r2, r3
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b39e:	0c9b      	lsrs	r3, r3, #18
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	f003 0307 	and.w	r3, r3, #7
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3b0:	0bdb      	lsrs	r3, r3, #15
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	f003 0307 	and.w	r3, r3, #7
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	7e1b      	ldrb	r3, [r3, #24]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	f003 0307 	and.w	r3, r3, #7
 800b3d2:	3302      	adds	r3, #2
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800b3de:	fb03 f202 	mul.w	r2, r3, r2
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	7a1b      	ldrb	r3, [r3, #8]
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	f003 030f 	and.w	r3, r3, #15
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	409a      	lsls	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800b400:	0a52      	lsrs	r2, r2, #9
 800b402:	fb03 f202 	mul.w	r2, r3, r2
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b410:	661a      	str	r2, [r3, #96]	@ 0x60
 800b412:	e031      	b.n	800b478 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d11d      	bne.n	800b458 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b420:	041b      	lsls	r3, r3, #16
 800b422:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b42a:	0c1b      	lsrs	r3, r3, #16
 800b42c:	431a      	orrs	r2, r3
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	3301      	adds	r3, #1
 800b438:	029a      	lsls	r2, r3, #10
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b44c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	661a      	str	r2, [r3, #96]	@ 0x60
 800b456:	e00f      	b.n	800b478 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a58      	ldr	r2, [pc, #352]	@ (800b5c0 <HAL_SD_GetCardCSD+0x344>)
 800b45e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b464:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	e09d      	b.n	800b5b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b47c:	0b9b      	lsrs	r3, r3, #14
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	f003 0301 	and.w	r3, r3, #1
 800b484:	b2da      	uxtb	r2, r3
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b48e:	09db      	lsrs	r3, r3, #7
 800b490:	b2db      	uxtb	r3, r3
 800b492:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b496:	b2da      	uxtb	r2, r3
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4a6:	b2da      	uxtb	r2, r3
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4b0:	0fdb      	lsrs	r3, r3, #31
 800b4b2:	b2da      	uxtb	r2, r3
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4bc:	0f5b      	lsrs	r3, r3, #29
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	f003 0303 	and.w	r3, r3, #3
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4ce:	0e9b      	lsrs	r3, r3, #26
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	f003 0307 	and.w	r3, r3, #7
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4e0:	0d9b      	lsrs	r3, r3, #22
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	f003 030f 	and.w	r3, r3, #15
 800b4e8:	b2da      	uxtb	r2, r3
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4f2:	0d5b      	lsrs	r3, r3, #21
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	2200      	movs	r2, #0
 800b506:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b50e:	0c1b      	lsrs	r3, r3, #16
 800b510:	b2db      	uxtb	r3, r3
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	b2da      	uxtb	r2, r3
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b522:	0bdb      	lsrs	r3, r3, #15
 800b524:	b2db      	uxtb	r3, r3
 800b526:	f003 0301 	and.w	r3, r3, #1
 800b52a:	b2da      	uxtb	r2, r3
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b536:	0b9b      	lsrs	r3, r3, #14
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b54a:	0b5b      	lsrs	r3, r3, #13
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	f003 0301 	and.w	r3, r3, #1
 800b552:	b2da      	uxtb	r2, r3
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b55e:	0b1b      	lsrs	r3, r3, #12
 800b560:	b2db      	uxtb	r3, r3
 800b562:	f003 0301 	and.w	r3, r3, #1
 800b566:	b2da      	uxtb	r2, r3
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b572:	0a9b      	lsrs	r3, r3, #10
 800b574:	b2db      	uxtb	r3, r3
 800b576:	f003 0303 	and.w	r3, r3, #3
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b586:	0a1b      	lsrs	r3, r3, #8
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	f003 0303 	and.w	r3, r3, #3
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b59a:	085b      	lsrs	r3, r3, #1
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5a2:	b2da      	uxtb	r2, r3
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	004005ff 	.word	0x004005ff

0800b5c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b61c:	b5b0      	push	{r4, r5, r7, lr}
 800b61e:	b08e      	sub	sp, #56	@ 0x38
 800b620:	af04      	add	r7, sp, #16
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2203      	movs	r2, #3
 800b630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b638:	2b03      	cmp	r3, #3
 800b63a:	d02e      	beq.n	800b69a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b642:	d106      	bne.n	800b652 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b648:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	639a      	str	r2, [r3, #56]	@ 0x38
 800b650:	e029      	b.n	800b6a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b658:	d10a      	bne.n	800b670 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 fabc 	bl	800bbd8 <SD_WideBus_Enable>
 800b660:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b666:	6a3b      	ldr	r3, [r7, #32]
 800b668:	431a      	orrs	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	639a      	str	r2, [r3, #56]	@ 0x38
 800b66e:	e01a      	b.n	800b6a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d10a      	bne.n	800b68c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 faf9 	bl	800bc6e <SD_WideBus_Disable>
 800b67c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b682:	6a3b      	ldr	r3, [r7, #32]
 800b684:	431a      	orrs	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	639a      	str	r2, [r3, #56]	@ 0x38
 800b68a:	e00c      	b.n	800b6a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b690:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	639a      	str	r2, [r3, #56]	@ 0x38
 800b698:	e005      	b.n	800b6a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b69e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00b      	beq.n	800b6c6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a26      	ldr	r2, [pc, #152]	@ (800b74c <HAL_SD_ConfigWideBusOperation+0x130>)
 800b6b4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b6c4:	e01f      	b.n	800b706 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	695b      	ldr	r3, [r3, #20]
 800b6e0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681d      	ldr	r5, [r3, #0]
 800b6ec:	466c      	mov	r4, sp
 800b6ee:	f107 0314 	add.w	r3, r7, #20
 800b6f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b6f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b6fa:	f107 0308 	add.w	r3, r7, #8
 800b6fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b700:	4628      	mov	r0, r5
 800b702:	f002 fc9d 	bl	800e040 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b70e:	4618      	mov	r0, r3
 800b710:	f002 fd62 	bl	800e1d8 <SDMMC_CmdBlockLength>
 800b714:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00c      	beq.n	800b736 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a0a      	ldr	r2, [pc, #40]	@ (800b74c <HAL_SD_ConfigWideBusOperation+0x130>)
 800b722:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	431a      	orrs	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800b73e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b742:	4618      	mov	r0, r3
 800b744:	3728      	adds	r7, #40	@ 0x28
 800b746:	46bd      	mov	sp, r7
 800b748:	bdb0      	pop	{r4, r5, r7, pc}
 800b74a:	bf00      	nop
 800b74c:	004005ff 	.word	0x004005ff

0800b750 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b758:	2300      	movs	r3, #0
 800b75a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b75c:	f107 030c 	add.w	r3, r7, #12
 800b760:	4619      	mov	r1, r3
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fa10 	bl	800bb88 <SD_SendStatus>
 800b768:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d005      	beq.n	800b77c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	431a      	orrs	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	0a5b      	lsrs	r3, r3, #9
 800b780:	f003 030f 	and.w	r3, r3, #15
 800b784:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b786:	693b      	ldr	r3, [r7, #16]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3718      	adds	r7, #24
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b79c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b7ac:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b7ae:	bf00      	nop
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b084      	sub	sp, #16
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7cc:	2b82      	cmp	r3, #130	@ 0x82
 800b7ce:	d111      	bne.n	800b7f4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f002 fda9 	bl	800e32c <SDMMC_CmdStopTransfer>
 800b7da:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d008      	beq.n	800b7f4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	431a      	orrs	r2, r3
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f7ff fd3a 	bl	800b268 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f022 0208 	bic.w	r2, r2, #8
 800b802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b80c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f004 fb5d 	bl	800fedc <HAL_SD_RxCpltCallback>
#endif
}
 800b822:	bf00      	nop
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
	...

0800b82c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b838:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7f9 fd3a 	bl	80052b4 <HAL_DMA_GetError>
 800b840:	4603      	mov	r3, r0
 800b842:	2b02      	cmp	r3, #2
 800b844:	d03e      	beq.n	800b8c4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b84a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b84c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b854:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d002      	beq.n	800b862 <SD_DMAError+0x36>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d12d      	bne.n	800b8be <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a19      	ldr	r2, [pc, #100]	@ (800b8cc <SD_DMAError+0xa0>)
 800b868:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800b878:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b87e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b886:	6978      	ldr	r0, [r7, #20]
 800b888:	f7ff ff62 	bl	800b750 <HAL_SD_GetCardState>
 800b88c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	2b06      	cmp	r3, #6
 800b892:	d002      	beq.n	800b89a <SD_DMAError+0x6e>
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2b05      	cmp	r3, #5
 800b898:	d10a      	bne.n	800b8b0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f002 fd44 	bl	800e32c <SDMMC_CmdStopTransfer>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8aa:	431a      	orrs	r2, r3
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b8be:	6978      	ldr	r0, [r7, #20]
 800b8c0:	f7ff fcd2 	bl	800b268 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b8c4:	bf00      	nop
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	004005ff 	.word	0x004005ff

0800b8d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b8d0:	b5b0      	push	{r4, r5, r7, lr}
 800b8d2:	b094      	sub	sp, #80	@ 0x50
 800b8d4:	af04      	add	r7, sp, #16
 800b8d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f002 fbf4 	bl	800e0ce <SDMMC_GetPowerState>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d102      	bne.n	800b8f2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b8ec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b8f0:	e0b8      	b.n	800ba64 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	d02f      	beq.n	800b95a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4618      	mov	r0, r3
 800b900:	f002 fe1f 	bl	800e542 <SDMMC_CmdSendCID>
 800b904:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <SD_InitCard+0x40>
    {
      return errorstate;
 800b90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b90e:	e0a9      	b.n	800ba64 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2100      	movs	r1, #0
 800b916:	4618      	mov	r0, r3
 800b918:	f002 fc1f 	bl	800e15a <SDMMC_GetResponse>
 800b91c:	4602      	mov	r2, r0
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2104      	movs	r1, #4
 800b928:	4618      	mov	r0, r3
 800b92a:	f002 fc16 	bl	800e15a <SDMMC_GetResponse>
 800b92e:	4602      	mov	r2, r0
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2108      	movs	r1, #8
 800b93a:	4618      	mov	r0, r3
 800b93c:	f002 fc0d 	bl	800e15a <SDMMC_GetResponse>
 800b940:	4602      	mov	r2, r0
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	210c      	movs	r1, #12
 800b94c:	4618      	mov	r0, r3
 800b94e:	f002 fc04 	bl	800e15a <SDMMC_GetResponse>
 800b952:	4602      	mov	r2, r0
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b95e:	2b03      	cmp	r3, #3
 800b960:	d00d      	beq.n	800b97e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f107 020e 	add.w	r2, r7, #14
 800b96a:	4611      	mov	r1, r2
 800b96c:	4618      	mov	r0, r3
 800b96e:	f002 fe25 	bl	800e5bc <SDMMC_CmdSetRelAdd>
 800b972:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <SD_InitCard+0xae>
    {
      return errorstate;
 800b97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b97c:	e072      	b.n	800ba64 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b982:	2b03      	cmp	r3, #3
 800b984:	d036      	beq.n	800b9f4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b986:	89fb      	ldrh	r3, [r7, #14]
 800b988:	461a      	mov	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b996:	041b      	lsls	r3, r3, #16
 800b998:	4619      	mov	r1, r3
 800b99a:	4610      	mov	r0, r2
 800b99c:	f002 fdef 	bl	800e57e <SDMMC_CmdSendCSD>
 800b9a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <SD_InitCard+0xdc>
    {
      return errorstate;
 800b9a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9aa:	e05b      	b.n	800ba64 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f002 fbd1 	bl	800e15a <SDMMC_GetResponse>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2104      	movs	r1, #4
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f002 fbc8 	bl	800e15a <SDMMC_GetResponse>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2108      	movs	r1, #8
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f002 fbbf 	bl	800e15a <SDMMC_GetResponse>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	210c      	movs	r1, #12
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f002 fbb6 	bl	800e15a <SDMMC_GetResponse>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2104      	movs	r1, #4
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f002 fbad 	bl	800e15a <SDMMC_GetResponse>
 800ba00:	4603      	mov	r3, r0
 800ba02:	0d1a      	lsrs	r2, r3, #20
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ba08:	f107 0310 	add.w	r3, r7, #16
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7ff fc34 	bl	800b27c <HAL_SD_GetCardCSD>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d002      	beq.n	800ba20 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba1a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ba1e:	e021      	b.n	800ba64 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6819      	ldr	r1, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba28:	041b      	lsls	r3, r3, #16
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	461c      	mov	r4, r3
 800ba2e:	4615      	mov	r5, r2
 800ba30:	4622      	mov	r2, r4
 800ba32:	462b      	mov	r3, r5
 800ba34:	4608      	mov	r0, r1
 800ba36:	f002 fc9b 	bl	800e370 <SDMMC_CmdSelDesel>
 800ba3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d001      	beq.n	800ba46 <SD_InitCard+0x176>
  {
    return errorstate;
 800ba42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba44:	e00e      	b.n	800ba64 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681d      	ldr	r5, [r3, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	466c      	mov	r4, sp
 800ba4e:	f103 0210 	add.w	r2, r3, #16
 800ba52:	ca07      	ldmia	r2, {r0, r1, r2}
 800ba54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba58:	3304      	adds	r3, #4
 800ba5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f002 faef 	bl	800e040 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3740      	adds	r7, #64	@ 0x40
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bdb0      	pop	{r4, r5, r7, pc}

0800ba6c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b086      	sub	sp, #24
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ba74:	2300      	movs	r3, #0
 800ba76:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	617b      	str	r3, [r7, #20]
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f002 fc96 	bl	800e3b6 <SDMMC_CmdGoIdleState>
 800ba8a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d001      	beq.n	800ba96 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	e072      	b.n	800bb7c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f002 fca9 	bl	800e3f2 <SDMMC_CmdOperCond>
 800baa0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00d      	beq.n	800bac4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f002 fc7f 	bl	800e3b6 <SDMMC_CmdGoIdleState>
 800bab8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d004      	beq.n	800baca <SD_PowerON+0x5e>
    {
      return errorstate;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	e05b      	b.n	800bb7c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d137      	bne.n	800bb42 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2100      	movs	r1, #0
 800bad8:	4618      	mov	r0, r3
 800bada:	f002 fca9 	bl	800e430 <SDMMC_CmdAppCommand>
 800bade:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d02d      	beq.n	800bb42 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bae6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800baea:	e047      	b.n	800bb7c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2100      	movs	r1, #0
 800baf2:	4618      	mov	r0, r3
 800baf4:	f002 fc9c 	bl	800e430 <SDMMC_CmdAppCommand>
 800baf8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <SD_PowerON+0x98>
    {
      return errorstate;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	e03b      	b.n	800bb7c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	491e      	ldr	r1, [pc, #120]	@ (800bb84 <SD_PowerON+0x118>)
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f002 fcb2 	bl	800e474 <SDMMC_CmdAppOperCommand>
 800bb10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800bb1c:	e02e      	b.n	800bb7c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2100      	movs	r1, #0
 800bb24:	4618      	mov	r0, r3
 800bb26:	f002 fb18 	bl	800e15a <SDMMC_GetResponse>
 800bb2a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	0fdb      	lsrs	r3, r3, #31
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d101      	bne.n	800bb38 <SD_PowerON+0xcc>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e000      	b.n	800bb3a <SD_PowerON+0xce>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	613b      	str	r3, [r7, #16]

    count++;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d802      	bhi.n	800bb52 <SD_PowerON+0xe6>
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d0cc      	beq.n	800baec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d902      	bls.n	800bb62 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bb5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bb60:	e00c      	b.n	800bb7c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d003      	beq.n	800bb74 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	645a      	str	r2, [r3, #68]	@ 0x44
 800bb72:	e002      	b.n	800bb7a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3718      	adds	r7, #24
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	c1100000 	.word	0xc1100000

0800bb88 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d102      	bne.n	800bb9e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bb98:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bb9c:	e018      	b.n	800bbd0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bba6:	041b      	lsls	r3, r3, #16
 800bba8:	4619      	mov	r1, r3
 800bbaa:	4610      	mov	r0, r2
 800bbac:	f002 fd27 	bl	800e5fe <SDMMC_CmdSendStatus>
 800bbb0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <SD_SendStatus+0x34>
  {
    return errorstate;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	e009      	b.n	800bbd0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f002 fac9 	bl	800e15a <SDMMC_GetResponse>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	60fb      	str	r3, [r7, #12]
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2100      	movs	r1, #0
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f002 fab3 	bl	800e15a <SDMMC_GetResponse>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bbfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bbfe:	d102      	bne.n	800bc06 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bc00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc04:	e02f      	b.n	800bc66 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bc06:	f107 030c 	add.w	r3, r7, #12
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 f879 	bl	800bd04 <SD_FindSCR>
 800bc12:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	e023      	b.n	800bc66 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d01c      	beq.n	800bc62 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc30:	041b      	lsls	r3, r3, #16
 800bc32:	4619      	mov	r1, r3
 800bc34:	4610      	mov	r0, r2
 800bc36:	f002 fbfb 	bl	800e430 <SDMMC_CmdAppCommand>
 800bc3a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d001      	beq.n	800bc46 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	e00f      	b.n	800bc66 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2102      	movs	r1, #2
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f002 fc35 	bl	800e4bc <SDMMC_CmdBusWidth>
 800bc52:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	e003      	b.n	800bc66 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	e001      	b.n	800bc66 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bc62:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3718      	adds	r7, #24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b086      	sub	sp, #24
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bc76:	2300      	movs	r3, #0
 800bc78:	60fb      	str	r3, [r7, #12]
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2100      	movs	r1, #0
 800bc84:	4618      	mov	r0, r3
 800bc86:	f002 fa68 	bl	800e15a <SDMMC_GetResponse>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc94:	d102      	bne.n	800bc9c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bc96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc9a:	e02f      	b.n	800bcfc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bc9c:	f107 030c 	add.w	r3, r7, #12
 800bca0:	4619      	mov	r1, r3
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f82e 	bl	800bd04 <SD_FindSCR>
 800bca8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	e023      	b.n	800bcfc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d01c      	beq.n	800bcf8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcc6:	041b      	lsls	r3, r3, #16
 800bcc8:	4619      	mov	r1, r3
 800bcca:	4610      	mov	r0, r2
 800bccc:	f002 fbb0 	bl	800e430 <SDMMC_CmdAppCommand>
 800bcd0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d001      	beq.n	800bcdc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	e00f      	b.n	800bcfc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2100      	movs	r1, #0
 800bce2:	4618      	mov	r0, r3
 800bce4:	f002 fbea 	bl	800e4bc <SDMMC_CmdBusWidth>
 800bce8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d001      	beq.n	800bcf4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	e003      	b.n	800bcfc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	e001      	b.n	800bcfc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bcf8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3718      	adds	r7, #24
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bd04:	b590      	push	{r4, r7, lr}
 800bd06:	b08f      	sub	sp, #60	@ 0x3c
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bd0e:	f7f8 fd5b 	bl	80047c8 <HAL_GetTick>
 800bd12:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800bd14:	2300      	movs	r3, #0
 800bd16:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bd18:	2300      	movs	r3, #0
 800bd1a:	60bb      	str	r3, [r7, #8]
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2108      	movs	r1, #8
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f002 fa54 	bl	800e1d8 <SDMMC_CmdBlockLength>
 800bd30:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <SD_FindSCR+0x38>
  {
    return errorstate;
 800bd38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3a:	e0b2      	b.n	800bea2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd44:	041b      	lsls	r3, r3, #16
 800bd46:	4619      	mov	r1, r3
 800bd48:	4610      	mov	r0, r2
 800bd4a:	f002 fb71 	bl	800e430 <SDMMC_CmdAppCommand>
 800bd4e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <SD_FindSCR+0x56>
  {
    return errorstate;
 800bd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd58:	e0a3      	b.n	800bea2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bd5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd5e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bd60:	2308      	movs	r3, #8
 800bd62:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bd64:	2330      	movs	r3, #48	@ 0x30
 800bd66:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bd68:	2302      	movs	r3, #2
 800bd6a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bd70:	2301      	movs	r3, #1
 800bd72:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f107 0210 	add.w	r2, r7, #16
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f002 f9fe 	bl	800e180 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f002 fbb9 	bl	800e500 <SDMMC_CmdSendSCR>
 800bd8e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d02a      	beq.n	800bdec <SD_FindSCR+0xe8>
  {
    return errorstate;
 800bd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd98:	e083      	b.n	800bea2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bda0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00f      	beq.n	800bdc8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6819      	ldr	r1, [r3, #0]
 800bdac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	f107 0208 	add.w	r2, r7, #8
 800bdb4:	18d4      	adds	r4, r2, r3
 800bdb6:	4608      	mov	r0, r1
 800bdb8:	f002 f96e 	bl	800e098 <SDMMC_ReadFIFO>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	6023      	str	r3, [r4, #0]
      index++;
 800bdc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdc6:	e006      	b.n	800bdd6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d012      	beq.n	800bdfc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800bdd6:	f7f8 fcf7 	bl	80047c8 <HAL_GetTick>
 800bdda:	4602      	mov	r2, r0
 800bddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde4:	d102      	bne.n	800bdec <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bde6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bdea:	e05a      	b.n	800bea2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdf2:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d0cf      	beq.n	800bd9a <SD_FindSCR+0x96>
 800bdfa:	e000      	b.n	800bdfe <SD_FindSCR+0xfa>
      break;
 800bdfc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be04:	f003 0308 	and.w	r3, r3, #8
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d005      	beq.n	800be18 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2208      	movs	r2, #8
 800be12:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800be14:	2308      	movs	r3, #8
 800be16:	e044      	b.n	800bea2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be1e:	f003 0302 	and.w	r3, r3, #2
 800be22:	2b00      	cmp	r3, #0
 800be24:	d005      	beq.n	800be32 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2202      	movs	r2, #2
 800be2c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800be2e:	2302      	movs	r3, #2
 800be30:	e037      	b.n	800bea2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be38:	f003 0320 	and.w	r3, r3, #32
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d005      	beq.n	800be4c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2220      	movs	r2, #32
 800be46:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800be48:	2320      	movs	r3, #32
 800be4a:	e02a      	b.n	800bea2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f240 523a 	movw	r2, #1338	@ 0x53a
 800be54:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	061a      	lsls	r2, r3, #24
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	021b      	lsls	r3, r3, #8
 800be5e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800be62:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	0a1b      	lsrs	r3, r3, #8
 800be68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800be6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	0e1b      	lsrs	r3, r3, #24
 800be72:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800be74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be76:	601a      	str	r2, [r3, #0]
    scr++;
 800be78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7a:	3304      	adds	r3, #4
 800be7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	061a      	lsls	r2, r3, #24
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	021b      	lsls	r3, r3, #8
 800be86:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800be8a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	0a1b      	lsrs	r3, r3, #8
 800be90:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800be94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	0e1b      	lsrs	r3, r3, #24
 800be9a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800be9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	373c      	adds	r7, #60	@ 0x3c
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd90      	pop	{r4, r7, pc}

0800beaa <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b082      	sub	sp, #8
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
 800beb2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d101      	bne.n	800bebe <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	e025      	b.n	800bf0a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d106      	bne.n	800bed8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f7f7 fb66 	bl	80035a4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2202      	movs	r2, #2
 800bedc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	3304      	adds	r3, #4
 800bee8:	4619      	mov	r1, r3
 800beea:	4610      	mov	r0, r2
 800beec:	f001 ffe2 	bl	800deb4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6818      	ldr	r0, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	461a      	mov	r2, r3
 800befa:	6839      	ldr	r1, [r7, #0]
 800befc:	f002 f836 	bl	800df6c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
	...

0800bf14 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d101      	bne.n	800bf26 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e04c      	b.n	800bfc0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d106      	bne.n	800bf40 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7f6 ffb8 	bl	8002eb0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2202      	movs	r2, #2
 800bf44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f022 0203 	bic.w	r2, r2, #3
 800bf56:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	4b19      	ldr	r3, [pc, #100]	@ (800bfc8 <HAL_SPDIFRX_Init+0xb4>)
 800bf64:	4013      	ands	r3, r2
 800bf66:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800bf70:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800bf76:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800bf7c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800bf82:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800bf88:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800bf8e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800bf94:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800bf9a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800bfa0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	fff88407 	.word	0xfff88407

0800bfcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d101      	bne.n	800bfde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e09d      	b.n	800c11a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d108      	bne.n	800bff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bfee:	d009      	beq.n	800c004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	61da      	str	r2, [r3, #28]
 800bff6:	e005      	b.n	800c004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b00      	cmp	r3, #0
 800c014:	d106      	bne.n	800c024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7f6 ffaa 	bl	8002f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2202      	movs	r2, #2
 800c028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c03a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c044:	d902      	bls.n	800c04c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c046:	2300      	movs	r3, #0
 800c048:	60fb      	str	r3, [r7, #12]
 800c04a:	e002      	b.n	800c052 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c04c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c050:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c05a:	d007      	beq.n	800c06c <HAL_SPI_Init+0xa0>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c064:	d002      	beq.n	800c06c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c07c:	431a      	orrs	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	f003 0302 	and.w	r3, r3, #2
 800c086:	431a      	orrs	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	695b      	ldr	r3, [r3, #20]
 800c08c:	f003 0301 	and.w	r3, r3, #1
 800c090:	431a      	orrs	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	699b      	ldr	r3, [r3, #24]
 800c096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c09a:	431a      	orrs	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	69db      	ldr	r3, [r3, #28]
 800c0a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c0a4:	431a      	orrs	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a1b      	ldr	r3, [r3, #32]
 800c0aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0ae:	ea42 0103 	orr.w	r1, r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	430a      	orrs	r2, r1
 800c0c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	699b      	ldr	r3, [r3, #24]
 800c0c6:	0c1b      	lsrs	r3, r3, #16
 800c0c8:	f003 0204 	and.w	r2, r3, #4
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d0:	f003 0310 	and.w	r3, r3, #16
 800c0d4:	431a      	orrs	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0da:	f003 0308 	and.w	r3, r3, #8
 800c0de:	431a      	orrs	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c0e8:	ea42 0103 	orr.w	r1, r2, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	69da      	ldr	r2, [r3, #28]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2201      	movs	r2, #1
 800c114:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b082      	sub	sp, #8
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d101      	bne.n	800c134 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c130:	2301      	movs	r3, #1
 800c132:	e049      	b.n	800c1c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d106      	bne.n	800c14e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7f6 ff77 	bl	800303c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2202      	movs	r2, #2
 800c152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	3304      	adds	r3, #4
 800c15e:	4619      	mov	r1, r3
 800c160:	4610      	mov	r0, r2
 800c162:	f000 fc11 	bl	800c988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2201      	movs	r2, #1
 800c182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d001      	beq.n	800c1e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e054      	b.n	800c292 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68da      	ldr	r2, [r3, #12]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f042 0201 	orr.w	r2, r2, #1
 800c1fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a26      	ldr	r2, [pc, #152]	@ (800c2a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d022      	beq.n	800c250 <HAL_TIM_Base_Start_IT+0x80>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c212:	d01d      	beq.n	800c250 <HAL_TIM_Base_Start_IT+0x80>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a22      	ldr	r2, [pc, #136]	@ (800c2a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d018      	beq.n	800c250 <HAL_TIM_Base_Start_IT+0x80>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a21      	ldr	r2, [pc, #132]	@ (800c2a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d013      	beq.n	800c250 <HAL_TIM_Base_Start_IT+0x80>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a1f      	ldr	r2, [pc, #124]	@ (800c2ac <HAL_TIM_Base_Start_IT+0xdc>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d00e      	beq.n	800c250 <HAL_TIM_Base_Start_IT+0x80>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a1e      	ldr	r2, [pc, #120]	@ (800c2b0 <HAL_TIM_Base_Start_IT+0xe0>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d009      	beq.n	800c250 <HAL_TIM_Base_Start_IT+0x80>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a1c      	ldr	r2, [pc, #112]	@ (800c2b4 <HAL_TIM_Base_Start_IT+0xe4>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d004      	beq.n	800c250 <HAL_TIM_Base_Start_IT+0x80>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a1b      	ldr	r2, [pc, #108]	@ (800c2b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d115      	bne.n	800c27c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	689a      	ldr	r2, [r3, #8]
 800c256:	4b19      	ldr	r3, [pc, #100]	@ (800c2bc <HAL_TIM_Base_Start_IT+0xec>)
 800c258:	4013      	ands	r3, r2
 800c25a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2b06      	cmp	r3, #6
 800c260:	d015      	beq.n	800c28e <HAL_TIM_Base_Start_IT+0xbe>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c268:	d011      	beq.n	800c28e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f042 0201 	orr.w	r2, r2, #1
 800c278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c27a:	e008      	b.n	800c28e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f042 0201 	orr.w	r2, r2, #1
 800c28a:	601a      	str	r2, [r3, #0]
 800c28c:	e000      	b.n	800c290 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c28e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	3714      	adds	r7, #20
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	40010000 	.word	0x40010000
 800c2a4:	40000400 	.word	0x40000400
 800c2a8:	40000800 	.word	0x40000800
 800c2ac:	40000c00 	.word	0x40000c00
 800c2b0:	40010400 	.word	0x40010400
 800c2b4:	40014000 	.word	0x40014000
 800c2b8:	40001800 	.word	0x40001800
 800c2bc:	00010007 	.word	0x00010007

0800c2c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d101      	bne.n	800c2d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e049      	b.n	800c366 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d106      	bne.n	800c2ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7f6 ff16 	bl	8003118 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2202      	movs	r2, #2
 800c2f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4610      	mov	r0, r2
 800c300:	f000 fb42 	bl	800c988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2201      	movs	r2, #1
 800c318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3708      	adds	r7, #8
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b084      	sub	sp, #16
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	f003 0302 	and.w	r3, r3, #2
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d020      	beq.n	800c3d2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f003 0302 	and.w	r3, r3, #2
 800c396:	2b00      	cmp	r3, #0
 800c398:	d01b      	beq.n	800c3d2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f06f 0202 	mvn.w	r2, #2
 800c3a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	699b      	ldr	r3, [r3, #24]
 800c3b0:	f003 0303 	and.w	r3, r3, #3
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d003      	beq.n	800c3c0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 fac7 	bl	800c94c <HAL_TIM_IC_CaptureCallback>
 800c3be:	e005      	b.n	800c3cc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 fab9 	bl	800c938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 faca 	bl	800c960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d020      	beq.n	800c41e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f003 0304 	and.w	r3, r3, #4
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d01b      	beq.n	800c41e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f06f 0204 	mvn.w	r2, #4
 800c3ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	699b      	ldr	r3, [r3, #24]
 800c3fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c400:	2b00      	cmp	r3, #0
 800c402:	d003      	beq.n	800c40c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 faa1 	bl	800c94c <HAL_TIM_IC_CaptureCallback>
 800c40a:	e005      	b.n	800c418 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 fa93 	bl	800c938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 faa4 	bl	800c960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	f003 0308 	and.w	r3, r3, #8
 800c424:	2b00      	cmp	r3, #0
 800c426:	d020      	beq.n	800c46a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f003 0308 	and.w	r3, r3, #8
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d01b      	beq.n	800c46a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f06f 0208 	mvn.w	r2, #8
 800c43a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2204      	movs	r2, #4
 800c440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	69db      	ldr	r3, [r3, #28]
 800c448:	f003 0303 	and.w	r3, r3, #3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d003      	beq.n	800c458 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fa7b 	bl	800c94c <HAL_TIM_IC_CaptureCallback>
 800c456:	e005      	b.n	800c464 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fa6d 	bl	800c938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 fa7e 	bl	800c960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	f003 0310 	and.w	r3, r3, #16
 800c470:	2b00      	cmp	r3, #0
 800c472:	d020      	beq.n	800c4b6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f003 0310 	and.w	r3, r3, #16
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d01b      	beq.n	800c4b6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f06f 0210 	mvn.w	r2, #16
 800c486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2208      	movs	r2, #8
 800c48c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	69db      	ldr	r3, [r3, #28]
 800c494:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d003      	beq.n	800c4a4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 fa55 	bl	800c94c <HAL_TIM_IC_CaptureCallback>
 800c4a2:	e005      	b.n	800c4b0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 fa47 	bl	800c938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 fa58 	bl	800c960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	f003 0301 	and.w	r3, r3, #1
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00c      	beq.n	800c4da <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d007      	beq.n	800c4da <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f06f 0201 	mvn.w	r2, #1
 800c4d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7f6 f825 	bl	8002524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d104      	bne.n	800c4ee <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00c      	beq.n	800c508 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d007      	beq.n	800c508 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fef4 	bl	800d2f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00c      	beq.n	800c52c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d007      	beq.n	800c52c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 feec 	bl	800d304 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00c      	beq.n	800c550 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d007      	beq.n	800c550 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 fa12 	bl	800c974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	f003 0320 	and.w	r3, r3, #32
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00c      	beq.n	800c574 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f003 0320 	and.w	r3, r3, #32
 800c560:	2b00      	cmp	r3, #0
 800c562:	d007      	beq.n	800c574 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f06f 0220 	mvn.w	r2, #32
 800c56c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 feb4 	bl	800d2dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c574:	bf00      	nop
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c588:	2300      	movs	r3, #0
 800c58a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c592:	2b01      	cmp	r3, #1
 800c594:	d101      	bne.n	800c59a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c596:	2302      	movs	r3, #2
 800c598:	e0ff      	b.n	800c79a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2201      	movs	r2, #1
 800c59e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b14      	cmp	r3, #20
 800c5a6:	f200 80f0 	bhi.w	800c78a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c5b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b0:	0800c605 	.word	0x0800c605
 800c5b4:	0800c78b 	.word	0x0800c78b
 800c5b8:	0800c78b 	.word	0x0800c78b
 800c5bc:	0800c78b 	.word	0x0800c78b
 800c5c0:	0800c645 	.word	0x0800c645
 800c5c4:	0800c78b 	.word	0x0800c78b
 800c5c8:	0800c78b 	.word	0x0800c78b
 800c5cc:	0800c78b 	.word	0x0800c78b
 800c5d0:	0800c687 	.word	0x0800c687
 800c5d4:	0800c78b 	.word	0x0800c78b
 800c5d8:	0800c78b 	.word	0x0800c78b
 800c5dc:	0800c78b 	.word	0x0800c78b
 800c5e0:	0800c6c7 	.word	0x0800c6c7
 800c5e4:	0800c78b 	.word	0x0800c78b
 800c5e8:	0800c78b 	.word	0x0800c78b
 800c5ec:	0800c78b 	.word	0x0800c78b
 800c5f0:	0800c709 	.word	0x0800c709
 800c5f4:	0800c78b 	.word	0x0800c78b
 800c5f8:	0800c78b 	.word	0x0800c78b
 800c5fc:	0800c78b 	.word	0x0800c78b
 800c600:	0800c749 	.word	0x0800c749
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68b9      	ldr	r1, [r7, #8]
 800c60a:	4618      	mov	r0, r3
 800c60c:	f000 fa62 	bl	800cad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	699a      	ldr	r2, [r3, #24]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f042 0208 	orr.w	r2, r2, #8
 800c61e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	699a      	ldr	r2, [r3, #24]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f022 0204 	bic.w	r2, r2, #4
 800c62e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	6999      	ldr	r1, [r3, #24]
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	691a      	ldr	r2, [r3, #16]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	430a      	orrs	r2, r1
 800c640:	619a      	str	r2, [r3, #24]
      break;
 800c642:	e0a5      	b.n	800c790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68b9      	ldr	r1, [r7, #8]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 fab4 	bl	800cbb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	699a      	ldr	r2, [r3, #24]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c65e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	699a      	ldr	r2, [r3, #24]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c66e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6999      	ldr	r1, [r3, #24]
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	021a      	lsls	r2, r3, #8
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	430a      	orrs	r2, r1
 800c682:	619a      	str	r2, [r3, #24]
      break;
 800c684:	e084      	b.n	800c790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	68b9      	ldr	r1, [r7, #8]
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 fb0b 	bl	800cca8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	69da      	ldr	r2, [r3, #28]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f042 0208 	orr.w	r2, r2, #8
 800c6a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	69da      	ldr	r2, [r3, #28]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f022 0204 	bic.w	r2, r2, #4
 800c6b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	69d9      	ldr	r1, [r3, #28]
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	691a      	ldr	r2, [r3, #16]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	430a      	orrs	r2, r1
 800c6c2:	61da      	str	r2, [r3, #28]
      break;
 800c6c4:	e064      	b.n	800c790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	68b9      	ldr	r1, [r7, #8]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 fb61 	bl	800cd94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	69da      	ldr	r2, [r3, #28]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	69da      	ldr	r2, [r3, #28]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c6f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	69d9      	ldr	r1, [r3, #28]
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	021a      	lsls	r2, r3, #8
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	430a      	orrs	r2, r1
 800c704:	61da      	str	r2, [r3, #28]
      break;
 800c706:	e043      	b.n	800c790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68b9      	ldr	r1, [r7, #8]
 800c70e:	4618      	mov	r0, r3
 800c710:	f000 fb98 	bl	800ce44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f042 0208 	orr.w	r2, r2, #8
 800c722:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f022 0204 	bic.w	r2, r2, #4
 800c732:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	691a      	ldr	r2, [r3, #16]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	430a      	orrs	r2, r1
 800c744:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c746:	e023      	b.n	800c790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68b9      	ldr	r1, [r7, #8]
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 fbca 	bl	800cee8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c762:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c772:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	021a      	lsls	r2, r3, #8
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	430a      	orrs	r2, r1
 800c786:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c788:	e002      	b.n	800c790 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	75fb      	strb	r3, [r7, #23]
      break;
 800c78e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2200      	movs	r2, #0
 800c794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c798:	7dfb      	ldrb	r3, [r7, #23]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3718      	adds	r7, #24
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop

0800c7a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d101      	bne.n	800c7c0 <HAL_TIM_ConfigClockSource+0x1c>
 800c7bc:	2302      	movs	r3, #2
 800c7be:	e0b4      	b.n	800c92a <HAL_TIM_ConfigClockSource+0x186>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2202      	movs	r2, #2
 800c7cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	4b56      	ldr	r3, [pc, #344]	@ (800c934 <HAL_TIM_ConfigClockSource+0x190>)
 800c7dc:	4013      	ands	r3, r2
 800c7de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c7e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7f8:	d03e      	beq.n	800c878 <HAL_TIM_ConfigClockSource+0xd4>
 800c7fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7fe:	f200 8087 	bhi.w	800c910 <HAL_TIM_ConfigClockSource+0x16c>
 800c802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c806:	f000 8086 	beq.w	800c916 <HAL_TIM_ConfigClockSource+0x172>
 800c80a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c80e:	d87f      	bhi.n	800c910 <HAL_TIM_ConfigClockSource+0x16c>
 800c810:	2b70      	cmp	r3, #112	@ 0x70
 800c812:	d01a      	beq.n	800c84a <HAL_TIM_ConfigClockSource+0xa6>
 800c814:	2b70      	cmp	r3, #112	@ 0x70
 800c816:	d87b      	bhi.n	800c910 <HAL_TIM_ConfigClockSource+0x16c>
 800c818:	2b60      	cmp	r3, #96	@ 0x60
 800c81a:	d050      	beq.n	800c8be <HAL_TIM_ConfigClockSource+0x11a>
 800c81c:	2b60      	cmp	r3, #96	@ 0x60
 800c81e:	d877      	bhi.n	800c910 <HAL_TIM_ConfigClockSource+0x16c>
 800c820:	2b50      	cmp	r3, #80	@ 0x50
 800c822:	d03c      	beq.n	800c89e <HAL_TIM_ConfigClockSource+0xfa>
 800c824:	2b50      	cmp	r3, #80	@ 0x50
 800c826:	d873      	bhi.n	800c910 <HAL_TIM_ConfigClockSource+0x16c>
 800c828:	2b40      	cmp	r3, #64	@ 0x40
 800c82a:	d058      	beq.n	800c8de <HAL_TIM_ConfigClockSource+0x13a>
 800c82c:	2b40      	cmp	r3, #64	@ 0x40
 800c82e:	d86f      	bhi.n	800c910 <HAL_TIM_ConfigClockSource+0x16c>
 800c830:	2b30      	cmp	r3, #48	@ 0x30
 800c832:	d064      	beq.n	800c8fe <HAL_TIM_ConfigClockSource+0x15a>
 800c834:	2b30      	cmp	r3, #48	@ 0x30
 800c836:	d86b      	bhi.n	800c910 <HAL_TIM_ConfigClockSource+0x16c>
 800c838:	2b20      	cmp	r3, #32
 800c83a:	d060      	beq.n	800c8fe <HAL_TIM_ConfigClockSource+0x15a>
 800c83c:	2b20      	cmp	r3, #32
 800c83e:	d867      	bhi.n	800c910 <HAL_TIM_ConfigClockSource+0x16c>
 800c840:	2b00      	cmp	r3, #0
 800c842:	d05c      	beq.n	800c8fe <HAL_TIM_ConfigClockSource+0x15a>
 800c844:	2b10      	cmp	r3, #16
 800c846:	d05a      	beq.n	800c8fe <HAL_TIM_ConfigClockSource+0x15a>
 800c848:	e062      	b.n	800c910 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c85a:	f000 fc13 	bl	800d084 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c86c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	609a      	str	r2, [r3, #8]
      break;
 800c876:	e04f      	b.n	800c918 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c888:	f000 fbfc 	bl	800d084 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	689a      	ldr	r2, [r3, #8]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c89a:	609a      	str	r2, [r3, #8]
      break;
 800c89c:	e03c      	b.n	800c918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	f000 fb70 	bl	800cf90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2150      	movs	r1, #80	@ 0x50
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f000 fbc9 	bl	800d04e <TIM_ITRx_SetConfig>
      break;
 800c8bc:	e02c      	b.n	800c918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	f000 fb8f 	bl	800cfee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2160      	movs	r1, #96	@ 0x60
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f000 fbb9 	bl	800d04e <TIM_ITRx_SetConfig>
      break;
 800c8dc:	e01c      	b.n	800c918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	f000 fb50 	bl	800cf90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2140      	movs	r1, #64	@ 0x40
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 fba9 	bl	800d04e <TIM_ITRx_SetConfig>
      break;
 800c8fc:	e00c      	b.n	800c918 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4619      	mov	r1, r3
 800c908:	4610      	mov	r0, r2
 800c90a:	f000 fba0 	bl	800d04e <TIM_ITRx_SetConfig>
      break;
 800c90e:	e003      	b.n	800c918 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	73fb      	strb	r3, [r7, #15]
      break;
 800c914:	e000      	b.n	800c918 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c928:	7bfb      	ldrb	r3, [r7, #15]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	fffeff88 	.word	0xfffeff88

0800c938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c954:	bf00      	nop
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a43      	ldr	r2, [pc, #268]	@ (800caa8 <TIM_Base_SetConfig+0x120>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d013      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9a6:	d00f      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a40      	ldr	r2, [pc, #256]	@ (800caac <TIM_Base_SetConfig+0x124>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d00b      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a3f      	ldr	r2, [pc, #252]	@ (800cab0 <TIM_Base_SetConfig+0x128>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d007      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a3e      	ldr	r2, [pc, #248]	@ (800cab4 <TIM_Base_SetConfig+0x12c>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d003      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4a3d      	ldr	r2, [pc, #244]	@ (800cab8 <TIM_Base_SetConfig+0x130>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d108      	bne.n	800c9da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a32      	ldr	r2, [pc, #200]	@ (800caa8 <TIM_Base_SetConfig+0x120>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d02b      	beq.n	800ca3a <TIM_Base_SetConfig+0xb2>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9e8:	d027      	beq.n	800ca3a <TIM_Base_SetConfig+0xb2>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a2f      	ldr	r2, [pc, #188]	@ (800caac <TIM_Base_SetConfig+0x124>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d023      	beq.n	800ca3a <TIM_Base_SetConfig+0xb2>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4a2e      	ldr	r2, [pc, #184]	@ (800cab0 <TIM_Base_SetConfig+0x128>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d01f      	beq.n	800ca3a <TIM_Base_SetConfig+0xb2>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4a2d      	ldr	r2, [pc, #180]	@ (800cab4 <TIM_Base_SetConfig+0x12c>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d01b      	beq.n	800ca3a <TIM_Base_SetConfig+0xb2>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a2c      	ldr	r2, [pc, #176]	@ (800cab8 <TIM_Base_SetConfig+0x130>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d017      	beq.n	800ca3a <TIM_Base_SetConfig+0xb2>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4a2b      	ldr	r2, [pc, #172]	@ (800cabc <TIM_Base_SetConfig+0x134>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d013      	beq.n	800ca3a <TIM_Base_SetConfig+0xb2>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a2a      	ldr	r2, [pc, #168]	@ (800cac0 <TIM_Base_SetConfig+0x138>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d00f      	beq.n	800ca3a <TIM_Base_SetConfig+0xb2>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a29      	ldr	r2, [pc, #164]	@ (800cac4 <TIM_Base_SetConfig+0x13c>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d00b      	beq.n	800ca3a <TIM_Base_SetConfig+0xb2>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4a28      	ldr	r2, [pc, #160]	@ (800cac8 <TIM_Base_SetConfig+0x140>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d007      	beq.n	800ca3a <TIM_Base_SetConfig+0xb2>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4a27      	ldr	r2, [pc, #156]	@ (800cacc <TIM_Base_SetConfig+0x144>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d003      	beq.n	800ca3a <TIM_Base_SetConfig+0xb2>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4a26      	ldr	r2, [pc, #152]	@ (800cad0 <TIM_Base_SetConfig+0x148>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d108      	bne.n	800ca4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	689a      	ldr	r2, [r3, #8]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a0e      	ldr	r2, [pc, #56]	@ (800caa8 <TIM_Base_SetConfig+0x120>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d003      	beq.n	800ca7a <TIM_Base_SetConfig+0xf2>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a10      	ldr	r2, [pc, #64]	@ (800cab8 <TIM_Base_SetConfig+0x130>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d103      	bne.n	800ca82 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	691a      	ldr	r2, [r3, #16]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f043 0204 	orr.w	r2, r3, #4
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2201      	movs	r2, #1
 800ca92:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	601a      	str	r2, [r3, #0]
}
 800ca9a:	bf00      	nop
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	40010000 	.word	0x40010000
 800caac:	40000400 	.word	0x40000400
 800cab0:	40000800 	.word	0x40000800
 800cab4:	40000c00 	.word	0x40000c00
 800cab8:	40010400 	.word	0x40010400
 800cabc:	40014000 	.word	0x40014000
 800cac0:	40014400 	.word	0x40014400
 800cac4:	40014800 	.word	0x40014800
 800cac8:	40001800 	.word	0x40001800
 800cacc:	40001c00 	.word	0x40001c00
 800cad0:	40002000 	.word	0x40002000

0800cad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b087      	sub	sp, #28
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a1b      	ldr	r3, [r3, #32]
 800cae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a1b      	ldr	r3, [r3, #32]
 800cae8:	f023 0201 	bic.w	r2, r3, #1
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	699b      	ldr	r3, [r3, #24]
 800cafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	4b2b      	ldr	r3, [pc, #172]	@ (800cbac <TIM_OC1_SetConfig+0xd8>)
 800cb00:	4013      	ands	r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f023 0303 	bic.w	r3, r3, #3
 800cb0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	4313      	orrs	r3, r2
 800cb14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f023 0302 	bic.w	r3, r3, #2
 800cb1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	697a      	ldr	r2, [r7, #20]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a21      	ldr	r2, [pc, #132]	@ (800cbb0 <TIM_OC1_SetConfig+0xdc>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d003      	beq.n	800cb38 <TIM_OC1_SetConfig+0x64>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4a20      	ldr	r2, [pc, #128]	@ (800cbb4 <TIM_OC1_SetConfig+0xe0>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d10c      	bne.n	800cb52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	f023 0308 	bic.w	r3, r3, #8
 800cb3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	697a      	ldr	r2, [r7, #20]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	f023 0304 	bic.w	r3, r3, #4
 800cb50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4a16      	ldr	r2, [pc, #88]	@ (800cbb0 <TIM_OC1_SetConfig+0xdc>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d003      	beq.n	800cb62 <TIM_OC1_SetConfig+0x8e>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4a15      	ldr	r2, [pc, #84]	@ (800cbb4 <TIM_OC1_SetConfig+0xe0>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d111      	bne.n	800cb86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cb70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	693a      	ldr	r2, [r7, #16]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	699b      	ldr	r3, [r3, #24]
 800cb80:	693a      	ldr	r2, [r7, #16]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	693a      	ldr	r2, [r7, #16]
 800cb8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	68fa      	ldr	r2, [r7, #12]
 800cb90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	685a      	ldr	r2, [r3, #4]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	697a      	ldr	r2, [r7, #20]
 800cb9e:	621a      	str	r2, [r3, #32]
}
 800cba0:	bf00      	nop
 800cba2:	371c      	adds	r7, #28
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr
 800cbac:	fffeff8f 	.word	0xfffeff8f
 800cbb0:	40010000 	.word	0x40010000
 800cbb4:	40010400 	.word	0x40010400

0800cbb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b087      	sub	sp, #28
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6a1b      	ldr	r3, [r3, #32]
 800cbc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6a1b      	ldr	r3, [r3, #32]
 800cbcc:	f023 0210 	bic.w	r2, r3, #16
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	4b2e      	ldr	r3, [pc, #184]	@ (800cc9c <TIM_OC2_SetConfig+0xe4>)
 800cbe4:	4013      	ands	r3, r2
 800cbe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cbee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	021b      	lsls	r3, r3, #8
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	f023 0320 	bic.w	r3, r3, #32
 800cc02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	011b      	lsls	r3, r3, #4
 800cc0a:	697a      	ldr	r2, [r7, #20]
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4a23      	ldr	r2, [pc, #140]	@ (800cca0 <TIM_OC2_SetConfig+0xe8>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d003      	beq.n	800cc20 <TIM_OC2_SetConfig+0x68>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a22      	ldr	r2, [pc, #136]	@ (800cca4 <TIM_OC2_SetConfig+0xec>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d10d      	bne.n	800cc3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	011b      	lsls	r3, r3, #4
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	4313      	orrs	r3, r2
 800cc32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4a18      	ldr	r2, [pc, #96]	@ (800cca0 <TIM_OC2_SetConfig+0xe8>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d003      	beq.n	800cc4c <TIM_OC2_SetConfig+0x94>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4a17      	ldr	r2, [pc, #92]	@ (800cca4 <TIM_OC2_SetConfig+0xec>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d113      	bne.n	800cc74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cc52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cc5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	693a      	ldr	r2, [r7, #16]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	699b      	ldr	r3, [r3, #24]
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	693a      	ldr	r2, [r7, #16]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	693a      	ldr	r2, [r7, #16]
 800cc78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	685a      	ldr	r2, [r3, #4]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	621a      	str	r2, [r3, #32]
}
 800cc8e:	bf00      	nop
 800cc90:	371c      	adds	r7, #28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	feff8fff 	.word	0xfeff8fff
 800cca0:	40010000 	.word	0x40010000
 800cca4:	40010400 	.word	0x40010400

0800cca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b087      	sub	sp, #28
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a1b      	ldr	r3, [r3, #32]
 800ccb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a1b      	ldr	r3, [r3, #32]
 800ccbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	69db      	ldr	r3, [r3, #28]
 800ccce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	4b2d      	ldr	r3, [pc, #180]	@ (800cd88 <TIM_OC3_SetConfig+0xe0>)
 800ccd4:	4013      	ands	r3, r2
 800ccd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f023 0303 	bic.w	r3, r3, #3
 800ccde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ccf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	021b      	lsls	r3, r3, #8
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	4a22      	ldr	r2, [pc, #136]	@ (800cd8c <TIM_OC3_SetConfig+0xe4>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d003      	beq.n	800cd0e <TIM_OC3_SetConfig+0x66>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4a21      	ldr	r2, [pc, #132]	@ (800cd90 <TIM_OC3_SetConfig+0xe8>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d10d      	bne.n	800cd2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cd14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	68db      	ldr	r3, [r3, #12]
 800cd1a:	021b      	lsls	r3, r3, #8
 800cd1c:	697a      	ldr	r2, [r7, #20]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4a17      	ldr	r2, [pc, #92]	@ (800cd8c <TIM_OC3_SetConfig+0xe4>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d003      	beq.n	800cd3a <TIM_OC3_SetConfig+0x92>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a16      	ldr	r2, [pc, #88]	@ (800cd90 <TIM_OC3_SetConfig+0xe8>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d113      	bne.n	800cd62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cd48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	695b      	ldr	r3, [r3, #20]
 800cd4e:	011b      	lsls	r3, r3, #4
 800cd50:	693a      	ldr	r2, [r7, #16]
 800cd52:	4313      	orrs	r3, r2
 800cd54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	011b      	lsls	r3, r3, #4
 800cd5c:	693a      	ldr	r2, [r7, #16]
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	693a      	ldr	r2, [r7, #16]
 800cd66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	685a      	ldr	r2, [r3, #4]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	697a      	ldr	r2, [r7, #20]
 800cd7a:	621a      	str	r2, [r3, #32]
}
 800cd7c:	bf00      	nop
 800cd7e:	371c      	adds	r7, #28
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr
 800cd88:	fffeff8f 	.word	0xfffeff8f
 800cd8c:	40010000 	.word	0x40010000
 800cd90:	40010400 	.word	0x40010400

0800cd94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b087      	sub	sp, #28
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a1b      	ldr	r3, [r3, #32]
 800cda8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	69db      	ldr	r3, [r3, #28]
 800cdba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	4b1e      	ldr	r3, [pc, #120]	@ (800ce38 <TIM_OC4_SetConfig+0xa4>)
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	021b      	lsls	r3, r3, #8
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cdde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	031b      	lsls	r3, r3, #12
 800cde6:	693a      	ldr	r2, [r7, #16]
 800cde8:	4313      	orrs	r3, r2
 800cdea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	4a13      	ldr	r2, [pc, #76]	@ (800ce3c <TIM_OC4_SetConfig+0xa8>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d003      	beq.n	800cdfc <TIM_OC4_SetConfig+0x68>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4a12      	ldr	r2, [pc, #72]	@ (800ce40 <TIM_OC4_SetConfig+0xac>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d109      	bne.n	800ce10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	695b      	ldr	r3, [r3, #20]
 800ce08:	019b      	lsls	r3, r3, #6
 800ce0a:	697a      	ldr	r2, [r7, #20]
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	697a      	ldr	r2, [r7, #20]
 800ce14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	685a      	ldr	r2, [r3, #4]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	621a      	str	r2, [r3, #32]
}
 800ce2a:	bf00      	nop
 800ce2c:	371c      	adds	r7, #28
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	feff8fff 	.word	0xfeff8fff
 800ce3c:	40010000 	.word	0x40010000
 800ce40:	40010400 	.word	0x40010400

0800ce44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b087      	sub	sp, #28
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a1b      	ldr	r3, [r3, #32]
 800ce52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a1b      	ldr	r3, [r3, #32]
 800ce58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	4b1b      	ldr	r3, [pc, #108]	@ (800cedc <TIM_OC5_SetConfig+0x98>)
 800ce70:	4013      	ands	r3, r2
 800ce72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ce84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	041b      	lsls	r3, r3, #16
 800ce8c:	693a      	ldr	r2, [r7, #16]
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a12      	ldr	r2, [pc, #72]	@ (800cee0 <TIM_OC5_SetConfig+0x9c>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d003      	beq.n	800cea2 <TIM_OC5_SetConfig+0x5e>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a11      	ldr	r2, [pc, #68]	@ (800cee4 <TIM_OC5_SetConfig+0xa0>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d109      	bne.n	800ceb6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cea8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	695b      	ldr	r3, [r3, #20]
 800ceae:	021b      	lsls	r3, r3, #8
 800ceb0:	697a      	ldr	r2, [r7, #20]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	697a      	ldr	r2, [r7, #20]
 800ceba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	685a      	ldr	r2, [r3, #4]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	693a      	ldr	r2, [r7, #16]
 800cece:	621a      	str	r2, [r3, #32]
}
 800ced0:	bf00      	nop
 800ced2:	371c      	adds	r7, #28
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr
 800cedc:	fffeff8f 	.word	0xfffeff8f
 800cee0:	40010000 	.word	0x40010000
 800cee4:	40010400 	.word	0x40010400

0800cee8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b087      	sub	sp, #28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6a1b      	ldr	r3, [r3, #32]
 800cef6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a1b      	ldr	r3, [r3, #32]
 800cefc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	4b1c      	ldr	r3, [pc, #112]	@ (800cf84 <TIM_OC6_SetConfig+0x9c>)
 800cf14:	4013      	ands	r3, r2
 800cf16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	021b      	lsls	r3, r3, #8
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cf2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	051b      	lsls	r3, r3, #20
 800cf32:	693a      	ldr	r2, [r7, #16]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4a13      	ldr	r2, [pc, #76]	@ (800cf88 <TIM_OC6_SetConfig+0xa0>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d003      	beq.n	800cf48 <TIM_OC6_SetConfig+0x60>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4a12      	ldr	r2, [pc, #72]	@ (800cf8c <TIM_OC6_SetConfig+0xa4>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d109      	bne.n	800cf5c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cf4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	695b      	ldr	r3, [r3, #20]
 800cf54:	029b      	lsls	r3, r3, #10
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	697a      	ldr	r2, [r7, #20]
 800cf60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	685a      	ldr	r2, [r3, #4]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	693a      	ldr	r2, [r7, #16]
 800cf74:	621a      	str	r2, [r3, #32]
}
 800cf76:	bf00      	nop
 800cf78:	371c      	adds	r7, #28
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	feff8fff 	.word	0xfeff8fff
 800cf88:	40010000 	.word	0x40010000
 800cf8c:	40010400 	.word	0x40010400

0800cf90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b087      	sub	sp, #28
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6a1b      	ldr	r3, [r3, #32]
 800cfa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	6a1b      	ldr	r3, [r3, #32]
 800cfa6:	f023 0201 	bic.w	r2, r3, #1
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cfba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	011b      	lsls	r3, r3, #4
 800cfc0:	693a      	ldr	r2, [r7, #16]
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	f023 030a 	bic.w	r3, r3, #10
 800cfcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cfce:	697a      	ldr	r2, [r7, #20]
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	693a      	ldr	r2, [r7, #16]
 800cfda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	697a      	ldr	r2, [r7, #20]
 800cfe0:	621a      	str	r2, [r3, #32]
}
 800cfe2:	bf00      	nop
 800cfe4:	371c      	adds	r7, #28
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr

0800cfee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfee:	b480      	push	{r7}
 800cff0:	b087      	sub	sp, #28
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	60f8      	str	r0, [r7, #12]
 800cff6:	60b9      	str	r1, [r7, #8]
 800cff8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6a1b      	ldr	r3, [r3, #32]
 800cffe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6a1b      	ldr	r3, [r3, #32]
 800d004:	f023 0210 	bic.w	r2, r3, #16
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	699b      	ldr	r3, [r3, #24]
 800d010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	031b      	lsls	r3, r3, #12
 800d01e:	693a      	ldr	r2, [r7, #16]
 800d020:	4313      	orrs	r3, r2
 800d022:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d02a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	011b      	lsls	r3, r3, #4
 800d030:	697a      	ldr	r2, [r7, #20]
 800d032:	4313      	orrs	r3, r2
 800d034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	693a      	ldr	r2, [r7, #16]
 800d03a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	697a      	ldr	r2, [r7, #20]
 800d040:	621a      	str	r2, [r3, #32]
}
 800d042:	bf00      	nop
 800d044:	371c      	adds	r7, #28
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d04e:	b480      	push	{r7}
 800d050:	b085      	sub	sp, #20
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
 800d056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	f043 0307 	orr.w	r3, r3, #7
 800d070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	68fa      	ldr	r2, [r7, #12]
 800d076:	609a      	str	r2, [r3, #8]
}
 800d078:	bf00      	nop
 800d07a:	3714      	adds	r7, #20
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d084:	b480      	push	{r7}
 800d086:	b087      	sub	sp, #28
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
 800d090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	689b      	ldr	r3, [r3, #8]
 800d096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d09e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	021a      	lsls	r2, r3, #8
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	431a      	orrs	r2, r3
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	697a      	ldr	r2, [r7, #20]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	697a      	ldr	r2, [r7, #20]
 800d0b6:	609a      	str	r2, [r3, #8]
}
 800d0b8:	bf00      	nop
 800d0ba:	371c      	adds	r7, #28
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d101      	bne.n	800d0dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d0d8:	2302      	movs	r3, #2
 800d0da:	e06d      	b.n	800d1b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a30      	ldr	r2, [pc, #192]	@ (800d1c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d004      	beq.n	800d110 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a2f      	ldr	r2, [pc, #188]	@ (800d1c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d108      	bne.n	800d122 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d116:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	4313      	orrs	r3, r2
 800d120:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d128:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	4313      	orrs	r3, r2
 800d132:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a20      	ldr	r2, [pc, #128]	@ (800d1c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d022      	beq.n	800d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d14e:	d01d      	beq.n	800d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4a1d      	ldr	r2, [pc, #116]	@ (800d1cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d018      	beq.n	800d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4a1c      	ldr	r2, [pc, #112]	@ (800d1d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d013      	beq.n	800d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a1a      	ldr	r2, [pc, #104]	@ (800d1d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d00e      	beq.n	800d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a15      	ldr	r2, [pc, #84]	@ (800d1c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d009      	beq.n	800d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a16      	ldr	r2, [pc, #88]	@ (800d1d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d004      	beq.n	800d18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a15      	ldr	r2, [pc, #84]	@ (800d1dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d10c      	bne.n	800d1a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d192:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	4313      	orrs	r3, r2
 800d19c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	68ba      	ldr	r2, [r7, #8]
 800d1a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3714      	adds	r7, #20
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr
 800d1c4:	40010000 	.word	0x40010000
 800d1c8:	40010400 	.word	0x40010400
 800d1cc:	40000400 	.word	0x40000400
 800d1d0:	40000800 	.word	0x40000800
 800d1d4:	40000c00 	.word	0x40000c00
 800d1d8:	40014000 	.word	0x40014000
 800d1dc:	40001800 	.word	0x40001800

0800d1e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b085      	sub	sp, #20
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d101      	bne.n	800d1fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d1f8:	2302      	movs	r3, #2
 800d1fa:	e065      	b.n	800d2c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2201      	movs	r2, #1
 800d200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	4313      	orrs	r3, r2
 800d210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	689b      	ldr	r3, [r3, #8]
 800d21c:	4313      	orrs	r3, r2
 800d21e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	4313      	orrs	r3, r2
 800d22c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4313      	orrs	r3, r2
 800d23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	691b      	ldr	r3, [r3, #16]
 800d246:	4313      	orrs	r3, r2
 800d248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	695b      	ldr	r3, [r3, #20]
 800d254:	4313      	orrs	r3, r2
 800d256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d262:	4313      	orrs	r3, r2
 800d264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	699b      	ldr	r3, [r3, #24]
 800d270:	041b      	lsls	r3, r3, #16
 800d272:	4313      	orrs	r3, r2
 800d274:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a16      	ldr	r2, [pc, #88]	@ (800d2d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d004      	beq.n	800d28a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a14      	ldr	r2, [pc, #80]	@ (800d2d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d115      	bne.n	800d2b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d294:	051b      	lsls	r3, r3, #20
 800d296:	4313      	orrs	r3, r2
 800d298:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	69db      	ldr	r3, [r3, #28]
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d2c6:	2300      	movs	r3, #0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3714      	adds	r7, #20
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	40010000 	.word	0x40010000
 800d2d8:	40010400 	.word	0x40010400

0800d2dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d2e4:	bf00      	nop
 800d2e6:	370c      	adds	r7, #12
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr

0800d2f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b083      	sub	sp, #12
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d2f8:	bf00      	nop
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d30c:	bf00      	nop
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d101      	bne.n	800d32a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d326:	2301      	movs	r3, #1
 800d328:	e040      	b.n	800d3ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d106      	bne.n	800d340 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f7f5 ffda 	bl	80032f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2224      	movs	r2, #36	@ 0x24
 800d344:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f022 0201 	bic.w	r2, r2, #1
 800d354:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d002      	beq.n	800d364 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 fbde 	bl	800db20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 f977 	bl	800d658 <UART_SetConfig>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d101      	bne.n	800d374 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800d370:	2301      	movs	r3, #1
 800d372:	e01b      	b.n	800d3ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	685a      	ldr	r2, [r3, #4]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d382:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	689a      	ldr	r2, [r3, #8]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f042 0201 	orr.w	r2, r2, #1
 800d3a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 fc5d 	bl	800dc64 <UART_CheckIdleState>
 800d3aa:	4603      	mov	r3, r0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b08a      	sub	sp, #40	@ 0x28
 800d3b8:	af02      	add	r7, sp, #8
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	603b      	str	r3, [r7, #0]
 800d3c0:	4613      	mov	r3, r2
 800d3c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d3c8:	2b20      	cmp	r3, #32
 800d3ca:	d177      	bne.n	800d4bc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d002      	beq.n	800d3d8 <HAL_UART_Transmit+0x24>
 800d3d2:	88fb      	ldrh	r3, [r7, #6]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d101      	bne.n	800d3dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e070      	b.n	800d4be <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2221      	movs	r2, #33	@ 0x21
 800d3e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d3ea:	f7f7 f9ed 	bl	80047c8 <HAL_GetTick>
 800d3ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	88fa      	ldrh	r2, [r7, #6]
 800d3f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	88fa      	ldrh	r2, [r7, #6]
 800d3fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d408:	d108      	bne.n	800d41c <HAL_UART_Transmit+0x68>
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d104      	bne.n	800d41c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800d412:	2300      	movs	r3, #0
 800d414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	61bb      	str	r3, [r7, #24]
 800d41a:	e003      	b.n	800d424 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d420:	2300      	movs	r3, #0
 800d422:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d424:	e02f      	b.n	800d486 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	2200      	movs	r2, #0
 800d42e:	2180      	movs	r1, #128	@ 0x80
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f000 fc6e 	bl	800dd12 <UART_WaitOnFlagUntilTimeout>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d004      	beq.n	800d446 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2220      	movs	r2, #32
 800d440:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800d442:	2303      	movs	r3, #3
 800d444:	e03b      	b.n	800d4be <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10b      	bne.n	800d464 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	881b      	ldrh	r3, [r3, #0]
 800d450:	461a      	mov	r2, r3
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d45a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	3302      	adds	r3, #2
 800d460:	61bb      	str	r3, [r7, #24]
 800d462:	e007      	b.n	800d474 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	781a      	ldrb	r2, [r3, #0]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	3301      	adds	r3, #1
 800d472:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	3b01      	subs	r3, #1
 800d47e:	b29a      	uxth	r2, r3
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1c9      	bne.n	800d426 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	9300      	str	r3, [sp, #0]
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	2200      	movs	r2, #0
 800d49a:	2140      	movs	r1, #64	@ 0x40
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f000 fc38 	bl	800dd12 <UART_WaitOnFlagUntilTimeout>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d004      	beq.n	800d4b2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2220      	movs	r2, #32
 800d4ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800d4ae:	2303      	movs	r3, #3
 800d4b0:	e005      	b.n	800d4be <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2220      	movs	r2, #32
 800d4b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	e000      	b.n	800d4be <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800d4bc:	2302      	movs	r3, #2
  }
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3720      	adds	r7, #32
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b08a      	sub	sp, #40	@ 0x28
 800d4ca:	af02      	add	r7, sp, #8
 800d4cc:	60f8      	str	r0, [r7, #12]
 800d4ce:	60b9      	str	r1, [r7, #8]
 800d4d0:	603b      	str	r3, [r7, #0]
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4dc:	2b20      	cmp	r3, #32
 800d4de:	f040 80b5 	bne.w	800d64c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <HAL_UART_Receive+0x28>
 800d4e8:	88fb      	ldrh	r3, [r7, #6]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d101      	bne.n	800d4f2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e0ad      	b.n	800d64e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2222      	movs	r2, #34	@ 0x22
 800d4fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2200      	movs	r2, #0
 800d506:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d508:	f7f7 f95e 	bl	80047c8 <HAL_GetTick>
 800d50c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	88fa      	ldrh	r2, [r7, #6]
 800d512:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	88fa      	ldrh	r2, [r7, #6]
 800d51a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	689b      	ldr	r3, [r3, #8]
 800d522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d526:	d10e      	bne.n	800d546 <HAL_UART_Receive+0x80>
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d105      	bne.n	800d53c <HAL_UART_Receive+0x76>
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d536:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d53a:	e02d      	b.n	800d598 <HAL_UART_Receive+0xd2>
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	22ff      	movs	r2, #255	@ 0xff
 800d540:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d544:	e028      	b.n	800d598 <HAL_UART_Receive+0xd2>
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10d      	bne.n	800d56a <HAL_UART_Receive+0xa4>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d104      	bne.n	800d560 <HAL_UART_Receive+0x9a>
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	22ff      	movs	r2, #255	@ 0xff
 800d55a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d55e:	e01b      	b.n	800d598 <HAL_UART_Receive+0xd2>
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	227f      	movs	r2, #127	@ 0x7f
 800d564:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d568:	e016      	b.n	800d598 <HAL_UART_Receive+0xd2>
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d572:	d10d      	bne.n	800d590 <HAL_UART_Receive+0xca>
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	691b      	ldr	r3, [r3, #16]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d104      	bne.n	800d586 <HAL_UART_Receive+0xc0>
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	227f      	movs	r2, #127	@ 0x7f
 800d580:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d584:	e008      	b.n	800d598 <HAL_UART_Receive+0xd2>
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	223f      	movs	r2, #63	@ 0x3f
 800d58a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d58e:	e003      	b.n	800d598 <HAL_UART_Receive+0xd2>
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2200      	movs	r2, #0
 800d594:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d59e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	689b      	ldr	r3, [r3, #8]
 800d5a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5a8:	d108      	bne.n	800d5bc <HAL_UART_Receive+0xf6>
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d104      	bne.n	800d5bc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	61bb      	str	r3, [r7, #24]
 800d5ba:	e003      	b.n	800d5c4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d5c4:	e036      	b.n	800d634 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	9300      	str	r3, [sp, #0]
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	2120      	movs	r1, #32
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f000 fb9e 	bl	800dd12 <UART_WaitOnFlagUntilTimeout>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d005      	beq.n	800d5e8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2220      	movs	r2, #32
 800d5e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800d5e4:	2303      	movs	r3, #3
 800d5e6:	e032      	b.n	800d64e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d10c      	bne.n	800d608 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f4:	b29a      	uxth	r2, r3
 800d5f6:	8a7b      	ldrh	r3, [r7, #18]
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	3302      	adds	r3, #2
 800d604:	61bb      	str	r3, [r7, #24]
 800d606:	e00c      	b.n	800d622 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	8a7b      	ldrh	r3, [r7, #18]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	4013      	ands	r3, r2
 800d616:	b2da      	uxtb	r2, r3
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	3301      	adds	r3, #1
 800d620:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d628:	b29b      	uxth	r3, r3
 800d62a:	3b01      	subs	r3, #1
 800d62c:	b29a      	uxth	r2, r3
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1c2      	bne.n	800d5c6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2220      	movs	r2, #32
 800d644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	e000      	b.n	800d64e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d64c:	2302      	movs	r3, #2
  }
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3720      	adds	r7, #32
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
	...

0800d658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b088      	sub	sp, #32
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d660:	2300      	movs	r3, #0
 800d662:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	689a      	ldr	r2, [r3, #8]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	431a      	orrs	r2, r3
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	695b      	ldr	r3, [r3, #20]
 800d672:	431a      	orrs	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	69db      	ldr	r3, [r3, #28]
 800d678:	4313      	orrs	r3, r2
 800d67a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	4ba6      	ldr	r3, [pc, #664]	@ (800d91c <UART_SetConfig+0x2c4>)
 800d684:	4013      	ands	r3, r2
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	6812      	ldr	r2, [r2, #0]
 800d68a:	6979      	ldr	r1, [r7, #20]
 800d68c:	430b      	orrs	r3, r1
 800d68e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	68da      	ldr	r2, [r3, #12]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	430a      	orrs	r2, r1
 800d6a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	699b      	ldr	r3, [r3, #24]
 800d6aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6a1b      	ldr	r3, [r3, #32]
 800d6b0:	697a      	ldr	r2, [r7, #20]
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	697a      	ldr	r2, [r7, #20]
 800d6c6:	430a      	orrs	r2, r1
 800d6c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a94      	ldr	r2, [pc, #592]	@ (800d920 <UART_SetConfig+0x2c8>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d120      	bne.n	800d716 <UART_SetConfig+0xbe>
 800d6d4:	4b93      	ldr	r3, [pc, #588]	@ (800d924 <UART_SetConfig+0x2cc>)
 800d6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6da:	f003 0303 	and.w	r3, r3, #3
 800d6de:	2b03      	cmp	r3, #3
 800d6e0:	d816      	bhi.n	800d710 <UART_SetConfig+0xb8>
 800d6e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e8 <UART_SetConfig+0x90>)
 800d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e8:	0800d6f9 	.word	0x0800d6f9
 800d6ec:	0800d705 	.word	0x0800d705
 800d6f0:	0800d6ff 	.word	0x0800d6ff
 800d6f4:	0800d70b 	.word	0x0800d70b
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	77fb      	strb	r3, [r7, #31]
 800d6fc:	e150      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d6fe:	2302      	movs	r3, #2
 800d700:	77fb      	strb	r3, [r7, #31]
 800d702:	e14d      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d704:	2304      	movs	r3, #4
 800d706:	77fb      	strb	r3, [r7, #31]
 800d708:	e14a      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d70a:	2308      	movs	r3, #8
 800d70c:	77fb      	strb	r3, [r7, #31]
 800d70e:	e147      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d710:	2310      	movs	r3, #16
 800d712:	77fb      	strb	r3, [r7, #31]
 800d714:	e144      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a83      	ldr	r2, [pc, #524]	@ (800d928 <UART_SetConfig+0x2d0>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d132      	bne.n	800d786 <UART_SetConfig+0x12e>
 800d720:	4b80      	ldr	r3, [pc, #512]	@ (800d924 <UART_SetConfig+0x2cc>)
 800d722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d726:	f003 030c 	and.w	r3, r3, #12
 800d72a:	2b0c      	cmp	r3, #12
 800d72c:	d828      	bhi.n	800d780 <UART_SetConfig+0x128>
 800d72e:	a201      	add	r2, pc, #4	@ (adr r2, 800d734 <UART_SetConfig+0xdc>)
 800d730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d734:	0800d769 	.word	0x0800d769
 800d738:	0800d781 	.word	0x0800d781
 800d73c:	0800d781 	.word	0x0800d781
 800d740:	0800d781 	.word	0x0800d781
 800d744:	0800d775 	.word	0x0800d775
 800d748:	0800d781 	.word	0x0800d781
 800d74c:	0800d781 	.word	0x0800d781
 800d750:	0800d781 	.word	0x0800d781
 800d754:	0800d76f 	.word	0x0800d76f
 800d758:	0800d781 	.word	0x0800d781
 800d75c:	0800d781 	.word	0x0800d781
 800d760:	0800d781 	.word	0x0800d781
 800d764:	0800d77b 	.word	0x0800d77b
 800d768:	2300      	movs	r3, #0
 800d76a:	77fb      	strb	r3, [r7, #31]
 800d76c:	e118      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d76e:	2302      	movs	r3, #2
 800d770:	77fb      	strb	r3, [r7, #31]
 800d772:	e115      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d774:	2304      	movs	r3, #4
 800d776:	77fb      	strb	r3, [r7, #31]
 800d778:	e112      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d77a:	2308      	movs	r3, #8
 800d77c:	77fb      	strb	r3, [r7, #31]
 800d77e:	e10f      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d780:	2310      	movs	r3, #16
 800d782:	77fb      	strb	r3, [r7, #31]
 800d784:	e10c      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a68      	ldr	r2, [pc, #416]	@ (800d92c <UART_SetConfig+0x2d4>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d120      	bne.n	800d7d2 <UART_SetConfig+0x17a>
 800d790:	4b64      	ldr	r3, [pc, #400]	@ (800d924 <UART_SetConfig+0x2cc>)
 800d792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d796:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d79a:	2b30      	cmp	r3, #48	@ 0x30
 800d79c:	d013      	beq.n	800d7c6 <UART_SetConfig+0x16e>
 800d79e:	2b30      	cmp	r3, #48	@ 0x30
 800d7a0:	d814      	bhi.n	800d7cc <UART_SetConfig+0x174>
 800d7a2:	2b20      	cmp	r3, #32
 800d7a4:	d009      	beq.n	800d7ba <UART_SetConfig+0x162>
 800d7a6:	2b20      	cmp	r3, #32
 800d7a8:	d810      	bhi.n	800d7cc <UART_SetConfig+0x174>
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d002      	beq.n	800d7b4 <UART_SetConfig+0x15c>
 800d7ae:	2b10      	cmp	r3, #16
 800d7b0:	d006      	beq.n	800d7c0 <UART_SetConfig+0x168>
 800d7b2:	e00b      	b.n	800d7cc <UART_SetConfig+0x174>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	77fb      	strb	r3, [r7, #31]
 800d7b8:	e0f2      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d7ba:	2302      	movs	r3, #2
 800d7bc:	77fb      	strb	r3, [r7, #31]
 800d7be:	e0ef      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d7c0:	2304      	movs	r3, #4
 800d7c2:	77fb      	strb	r3, [r7, #31]
 800d7c4:	e0ec      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d7c6:	2308      	movs	r3, #8
 800d7c8:	77fb      	strb	r3, [r7, #31]
 800d7ca:	e0e9      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d7cc:	2310      	movs	r3, #16
 800d7ce:	77fb      	strb	r3, [r7, #31]
 800d7d0:	e0e6      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4a56      	ldr	r2, [pc, #344]	@ (800d930 <UART_SetConfig+0x2d8>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d120      	bne.n	800d81e <UART_SetConfig+0x1c6>
 800d7dc:	4b51      	ldr	r3, [pc, #324]	@ (800d924 <UART_SetConfig+0x2cc>)
 800d7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d7e6:	2bc0      	cmp	r3, #192	@ 0xc0
 800d7e8:	d013      	beq.n	800d812 <UART_SetConfig+0x1ba>
 800d7ea:	2bc0      	cmp	r3, #192	@ 0xc0
 800d7ec:	d814      	bhi.n	800d818 <UART_SetConfig+0x1c0>
 800d7ee:	2b80      	cmp	r3, #128	@ 0x80
 800d7f0:	d009      	beq.n	800d806 <UART_SetConfig+0x1ae>
 800d7f2:	2b80      	cmp	r3, #128	@ 0x80
 800d7f4:	d810      	bhi.n	800d818 <UART_SetConfig+0x1c0>
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d002      	beq.n	800d800 <UART_SetConfig+0x1a8>
 800d7fa:	2b40      	cmp	r3, #64	@ 0x40
 800d7fc:	d006      	beq.n	800d80c <UART_SetConfig+0x1b4>
 800d7fe:	e00b      	b.n	800d818 <UART_SetConfig+0x1c0>
 800d800:	2300      	movs	r3, #0
 800d802:	77fb      	strb	r3, [r7, #31]
 800d804:	e0cc      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d806:	2302      	movs	r3, #2
 800d808:	77fb      	strb	r3, [r7, #31]
 800d80a:	e0c9      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d80c:	2304      	movs	r3, #4
 800d80e:	77fb      	strb	r3, [r7, #31]
 800d810:	e0c6      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d812:	2308      	movs	r3, #8
 800d814:	77fb      	strb	r3, [r7, #31]
 800d816:	e0c3      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d818:	2310      	movs	r3, #16
 800d81a:	77fb      	strb	r3, [r7, #31]
 800d81c:	e0c0      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4a44      	ldr	r2, [pc, #272]	@ (800d934 <UART_SetConfig+0x2dc>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d125      	bne.n	800d874 <UART_SetConfig+0x21c>
 800d828:	4b3e      	ldr	r3, [pc, #248]	@ (800d924 <UART_SetConfig+0x2cc>)
 800d82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d82e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d836:	d017      	beq.n	800d868 <UART_SetConfig+0x210>
 800d838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d83c:	d817      	bhi.n	800d86e <UART_SetConfig+0x216>
 800d83e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d842:	d00b      	beq.n	800d85c <UART_SetConfig+0x204>
 800d844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d848:	d811      	bhi.n	800d86e <UART_SetConfig+0x216>
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d003      	beq.n	800d856 <UART_SetConfig+0x1fe>
 800d84e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d852:	d006      	beq.n	800d862 <UART_SetConfig+0x20a>
 800d854:	e00b      	b.n	800d86e <UART_SetConfig+0x216>
 800d856:	2300      	movs	r3, #0
 800d858:	77fb      	strb	r3, [r7, #31]
 800d85a:	e0a1      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d85c:	2302      	movs	r3, #2
 800d85e:	77fb      	strb	r3, [r7, #31]
 800d860:	e09e      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d862:	2304      	movs	r3, #4
 800d864:	77fb      	strb	r3, [r7, #31]
 800d866:	e09b      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d868:	2308      	movs	r3, #8
 800d86a:	77fb      	strb	r3, [r7, #31]
 800d86c:	e098      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d86e:	2310      	movs	r3, #16
 800d870:	77fb      	strb	r3, [r7, #31]
 800d872:	e095      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a2f      	ldr	r2, [pc, #188]	@ (800d938 <UART_SetConfig+0x2e0>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d125      	bne.n	800d8ca <UART_SetConfig+0x272>
 800d87e:	4b29      	ldr	r3, [pc, #164]	@ (800d924 <UART_SetConfig+0x2cc>)
 800d880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d884:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d888:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d88c:	d017      	beq.n	800d8be <UART_SetConfig+0x266>
 800d88e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d892:	d817      	bhi.n	800d8c4 <UART_SetConfig+0x26c>
 800d894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d898:	d00b      	beq.n	800d8b2 <UART_SetConfig+0x25a>
 800d89a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d89e:	d811      	bhi.n	800d8c4 <UART_SetConfig+0x26c>
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d003      	beq.n	800d8ac <UART_SetConfig+0x254>
 800d8a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8a8:	d006      	beq.n	800d8b8 <UART_SetConfig+0x260>
 800d8aa:	e00b      	b.n	800d8c4 <UART_SetConfig+0x26c>
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	77fb      	strb	r3, [r7, #31]
 800d8b0:	e076      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d8b2:	2302      	movs	r3, #2
 800d8b4:	77fb      	strb	r3, [r7, #31]
 800d8b6:	e073      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d8b8:	2304      	movs	r3, #4
 800d8ba:	77fb      	strb	r3, [r7, #31]
 800d8bc:	e070      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d8be:	2308      	movs	r3, #8
 800d8c0:	77fb      	strb	r3, [r7, #31]
 800d8c2:	e06d      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d8c4:	2310      	movs	r3, #16
 800d8c6:	77fb      	strb	r3, [r7, #31]
 800d8c8:	e06a      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a1b      	ldr	r2, [pc, #108]	@ (800d93c <UART_SetConfig+0x2e4>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d138      	bne.n	800d946 <UART_SetConfig+0x2ee>
 800d8d4:	4b13      	ldr	r3, [pc, #76]	@ (800d924 <UART_SetConfig+0x2cc>)
 800d8d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d8de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d8e2:	d017      	beq.n	800d914 <UART_SetConfig+0x2bc>
 800d8e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d8e8:	d82a      	bhi.n	800d940 <UART_SetConfig+0x2e8>
 800d8ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8ee:	d00b      	beq.n	800d908 <UART_SetConfig+0x2b0>
 800d8f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8f4:	d824      	bhi.n	800d940 <UART_SetConfig+0x2e8>
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d003      	beq.n	800d902 <UART_SetConfig+0x2aa>
 800d8fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8fe:	d006      	beq.n	800d90e <UART_SetConfig+0x2b6>
 800d900:	e01e      	b.n	800d940 <UART_SetConfig+0x2e8>
 800d902:	2300      	movs	r3, #0
 800d904:	77fb      	strb	r3, [r7, #31]
 800d906:	e04b      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d908:	2302      	movs	r3, #2
 800d90a:	77fb      	strb	r3, [r7, #31]
 800d90c:	e048      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d90e:	2304      	movs	r3, #4
 800d910:	77fb      	strb	r3, [r7, #31]
 800d912:	e045      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d914:	2308      	movs	r3, #8
 800d916:	77fb      	strb	r3, [r7, #31]
 800d918:	e042      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d91a:	bf00      	nop
 800d91c:	efff69f3 	.word	0xefff69f3
 800d920:	40011000 	.word	0x40011000
 800d924:	40023800 	.word	0x40023800
 800d928:	40004400 	.word	0x40004400
 800d92c:	40004800 	.word	0x40004800
 800d930:	40004c00 	.word	0x40004c00
 800d934:	40005000 	.word	0x40005000
 800d938:	40011400 	.word	0x40011400
 800d93c:	40007800 	.word	0x40007800
 800d940:	2310      	movs	r3, #16
 800d942:	77fb      	strb	r3, [r7, #31]
 800d944:	e02c      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a72      	ldr	r2, [pc, #456]	@ (800db14 <UART_SetConfig+0x4bc>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d125      	bne.n	800d99c <UART_SetConfig+0x344>
 800d950:	4b71      	ldr	r3, [pc, #452]	@ (800db18 <UART_SetConfig+0x4c0>)
 800d952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d956:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d95a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d95e:	d017      	beq.n	800d990 <UART_SetConfig+0x338>
 800d960:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d964:	d817      	bhi.n	800d996 <UART_SetConfig+0x33e>
 800d966:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d96a:	d00b      	beq.n	800d984 <UART_SetConfig+0x32c>
 800d96c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d970:	d811      	bhi.n	800d996 <UART_SetConfig+0x33e>
 800d972:	2b00      	cmp	r3, #0
 800d974:	d003      	beq.n	800d97e <UART_SetConfig+0x326>
 800d976:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d97a:	d006      	beq.n	800d98a <UART_SetConfig+0x332>
 800d97c:	e00b      	b.n	800d996 <UART_SetConfig+0x33e>
 800d97e:	2300      	movs	r3, #0
 800d980:	77fb      	strb	r3, [r7, #31]
 800d982:	e00d      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d984:	2302      	movs	r3, #2
 800d986:	77fb      	strb	r3, [r7, #31]
 800d988:	e00a      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d98a:	2304      	movs	r3, #4
 800d98c:	77fb      	strb	r3, [r7, #31]
 800d98e:	e007      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d990:	2308      	movs	r3, #8
 800d992:	77fb      	strb	r3, [r7, #31]
 800d994:	e004      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d996:	2310      	movs	r3, #16
 800d998:	77fb      	strb	r3, [r7, #31]
 800d99a:	e001      	b.n	800d9a0 <UART_SetConfig+0x348>
 800d99c:	2310      	movs	r3, #16
 800d99e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	69db      	ldr	r3, [r3, #28]
 800d9a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d9a8:	d15b      	bne.n	800da62 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d9aa:	7ffb      	ldrb	r3, [r7, #31]
 800d9ac:	2b08      	cmp	r3, #8
 800d9ae:	d828      	bhi.n	800da02 <UART_SetConfig+0x3aa>
 800d9b0:	a201      	add	r2, pc, #4	@ (adr r2, 800d9b8 <UART_SetConfig+0x360>)
 800d9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b6:	bf00      	nop
 800d9b8:	0800d9dd 	.word	0x0800d9dd
 800d9bc:	0800d9e5 	.word	0x0800d9e5
 800d9c0:	0800d9ed 	.word	0x0800d9ed
 800d9c4:	0800da03 	.word	0x0800da03
 800d9c8:	0800d9f3 	.word	0x0800d9f3
 800d9cc:	0800da03 	.word	0x0800da03
 800d9d0:	0800da03 	.word	0x0800da03
 800d9d4:	0800da03 	.word	0x0800da03
 800d9d8:	0800d9fb 	.word	0x0800d9fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9dc:	f7fb feba 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800d9e0:	61b8      	str	r0, [r7, #24]
        break;
 800d9e2:	e013      	b.n	800da0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9e4:	f7fb feca 	bl	800977c <HAL_RCC_GetPCLK2Freq>
 800d9e8:	61b8      	str	r0, [r7, #24]
        break;
 800d9ea:	e00f      	b.n	800da0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d9ec:	4b4b      	ldr	r3, [pc, #300]	@ (800db1c <UART_SetConfig+0x4c4>)
 800d9ee:	61bb      	str	r3, [r7, #24]
        break;
 800d9f0:	e00c      	b.n	800da0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d9f2:	f7fb fddd 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800d9f6:	61b8      	str	r0, [r7, #24]
        break;
 800d9f8:	e008      	b.n	800da0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9fe:	61bb      	str	r3, [r7, #24]
        break;
 800da00:	e004      	b.n	800da0c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800da02:	2300      	movs	r3, #0
 800da04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800da06:	2301      	movs	r3, #1
 800da08:	77bb      	strb	r3, [r7, #30]
        break;
 800da0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d074      	beq.n	800dafc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	005a      	lsls	r2, r3, #1
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	085b      	lsrs	r3, r3, #1
 800da1c:	441a      	add	r2, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	fbb2 f3f3 	udiv	r3, r2, r3
 800da26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	2b0f      	cmp	r3, #15
 800da2c:	d916      	bls.n	800da5c <UART_SetConfig+0x404>
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da34:	d212      	bcs.n	800da5c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	b29b      	uxth	r3, r3
 800da3a:	f023 030f 	bic.w	r3, r3, #15
 800da3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	085b      	lsrs	r3, r3, #1
 800da44:	b29b      	uxth	r3, r3
 800da46:	f003 0307 	and.w	r3, r3, #7
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	89fb      	ldrh	r3, [r7, #14]
 800da4e:	4313      	orrs	r3, r2
 800da50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	89fa      	ldrh	r2, [r7, #14]
 800da58:	60da      	str	r2, [r3, #12]
 800da5a:	e04f      	b.n	800dafc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800da5c:	2301      	movs	r3, #1
 800da5e:	77bb      	strb	r3, [r7, #30]
 800da60:	e04c      	b.n	800dafc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da62:	7ffb      	ldrb	r3, [r7, #31]
 800da64:	2b08      	cmp	r3, #8
 800da66:	d828      	bhi.n	800daba <UART_SetConfig+0x462>
 800da68:	a201      	add	r2, pc, #4	@ (adr r2, 800da70 <UART_SetConfig+0x418>)
 800da6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da6e:	bf00      	nop
 800da70:	0800da95 	.word	0x0800da95
 800da74:	0800da9d 	.word	0x0800da9d
 800da78:	0800daa5 	.word	0x0800daa5
 800da7c:	0800dabb 	.word	0x0800dabb
 800da80:	0800daab 	.word	0x0800daab
 800da84:	0800dabb 	.word	0x0800dabb
 800da88:	0800dabb 	.word	0x0800dabb
 800da8c:	0800dabb 	.word	0x0800dabb
 800da90:	0800dab3 	.word	0x0800dab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da94:	f7fb fe5e 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800da98:	61b8      	str	r0, [r7, #24]
        break;
 800da9a:	e013      	b.n	800dac4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da9c:	f7fb fe6e 	bl	800977c <HAL_RCC_GetPCLK2Freq>
 800daa0:	61b8      	str	r0, [r7, #24]
        break;
 800daa2:	e00f      	b.n	800dac4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800daa4:	4b1d      	ldr	r3, [pc, #116]	@ (800db1c <UART_SetConfig+0x4c4>)
 800daa6:	61bb      	str	r3, [r7, #24]
        break;
 800daa8:	e00c      	b.n	800dac4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800daaa:	f7fb fd81 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800daae:	61b8      	str	r0, [r7, #24]
        break;
 800dab0:	e008      	b.n	800dac4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dab6:	61bb      	str	r3, [r7, #24]
        break;
 800dab8:	e004      	b.n	800dac4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800daba:	2300      	movs	r3, #0
 800dabc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	77bb      	strb	r3, [r7, #30]
        break;
 800dac2:	bf00      	nop
    }

    if (pclk != 0U)
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d018      	beq.n	800dafc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	085a      	lsrs	r2, r3, #1
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	441a      	add	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dadc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	2b0f      	cmp	r3, #15
 800dae2:	d909      	bls.n	800daf8 <UART_SetConfig+0x4a0>
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800daea:	d205      	bcs.n	800daf8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	b29a      	uxth	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	60da      	str	r2, [r3, #12]
 800daf6:	e001      	b.n	800dafc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800daf8:	2301      	movs	r3, #1
 800dafa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800db08:	7fbb      	ldrb	r3, [r7, #30]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3720      	adds	r7, #32
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	40007c00 	.word	0x40007c00
 800db18:	40023800 	.word	0x40023800
 800db1c:	00f42400 	.word	0x00f42400

0800db20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db2c:	f003 0308 	and.w	r3, r3, #8
 800db30:	2b00      	cmp	r3, #0
 800db32:	d00a      	beq.n	800db4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	430a      	orrs	r2, r1
 800db48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db4e:	f003 0301 	and.w	r3, r3, #1
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00a      	beq.n	800db6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	430a      	orrs	r2, r1
 800db6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db70:	f003 0302 	and.w	r3, r3, #2
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00a      	beq.n	800db8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	430a      	orrs	r2, r1
 800db8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db92:	f003 0304 	and.w	r3, r3, #4
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00a      	beq.n	800dbb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	430a      	orrs	r2, r1
 800dbae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbb4:	f003 0310 	and.w	r3, r3, #16
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00a      	beq.n	800dbd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	430a      	orrs	r2, r1
 800dbd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbd6:	f003 0320 	and.w	r3, r3, #32
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	430a      	orrs	r2, r1
 800dbf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d01a      	beq.n	800dc36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	430a      	orrs	r2, r1
 800dc14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc1e:	d10a      	bne.n	800dc36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	430a      	orrs	r2, r1
 800dc34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00a      	beq.n	800dc58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	430a      	orrs	r2, r1
 800dc56:	605a      	str	r2, [r3, #4]
  }
}
 800dc58:	bf00      	nop
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b08c      	sub	sp, #48	@ 0x30
 800dc68:	af02      	add	r7, sp, #8
 800dc6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc74:	f7f6 fda8 	bl	80047c8 <HAL_GetTick>
 800dc78:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f003 0308 	and.w	r3, r3, #8
 800dc84:	2b08      	cmp	r3, #8
 800dc86:	d12e      	bne.n	800dce6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc90:	2200      	movs	r2, #0
 800dc92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 f83b 	bl	800dd12 <UART_WaitOnFlagUntilTimeout>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d021      	beq.n	800dce6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	e853 3f00 	ldrex	r3, [r3]
 800dcae:	60fb      	str	r3, [r7, #12]
   return(result);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dcb6:	623b      	str	r3, [r7, #32]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	6a3b      	ldr	r3, [r7, #32]
 800dcc0:	61fb      	str	r3, [r7, #28]
 800dcc2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc4:	69b9      	ldr	r1, [r7, #24]
 800dcc6:	69fa      	ldr	r2, [r7, #28]
 800dcc8:	e841 2300 	strex	r3, r2, [r1]
 800dccc:	617b      	str	r3, [r7, #20]
   return(result);
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d1e6      	bne.n	800dca2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2220      	movs	r2, #32
 800dcd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dce2:	2303      	movs	r3, #3
 800dce4:	e011      	b.n	800dd0a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2220      	movs	r2, #32
 800dcea:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2220      	movs	r2, #32
 800dcf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800dd08:	2300      	movs	r3, #0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3728      	adds	r7, #40	@ 0x28
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b084      	sub	sp, #16
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	60f8      	str	r0, [r7, #12]
 800dd1a:	60b9      	str	r1, [r7, #8]
 800dd1c:	603b      	str	r3, [r7, #0]
 800dd1e:	4613      	mov	r3, r2
 800dd20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd22:	e04f      	b.n	800ddc4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd2a:	d04b      	beq.n	800ddc4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd2c:	f7f6 fd4c 	bl	80047c8 <HAL_GetTick>
 800dd30:	4602      	mov	r2, r0
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	1ad3      	subs	r3, r2, r3
 800dd36:	69ba      	ldr	r2, [r7, #24]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d302      	bcc.n	800dd42 <UART_WaitOnFlagUntilTimeout+0x30>
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d101      	bne.n	800dd46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dd42:	2303      	movs	r3, #3
 800dd44:	e04e      	b.n	800dde4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f003 0304 	and.w	r3, r3, #4
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d037      	beq.n	800ddc4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	2b80      	cmp	r3, #128	@ 0x80
 800dd58:	d034      	beq.n	800ddc4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	2b40      	cmp	r3, #64	@ 0x40
 800dd5e:	d031      	beq.n	800ddc4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	69db      	ldr	r3, [r3, #28]
 800dd66:	f003 0308 	and.w	r3, r3, #8
 800dd6a:	2b08      	cmp	r3, #8
 800dd6c:	d110      	bne.n	800dd90 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2208      	movs	r2, #8
 800dd74:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f000 f838 	bl	800ddec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2208      	movs	r2, #8
 800dd80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e029      	b.n	800dde4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	69db      	ldr	r3, [r3, #28]
 800dd96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dd9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dd9e:	d111      	bne.n	800ddc4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dda8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f000 f81e 	bl	800ddec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2220      	movs	r2, #32
 800ddb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ddc0:	2303      	movs	r3, #3
 800ddc2:	e00f      	b.n	800dde4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	69da      	ldr	r2, [r3, #28]
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	4013      	ands	r3, r2
 800ddce:	68ba      	ldr	r2, [r7, #8]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	bf0c      	ite	eq
 800ddd4:	2301      	moveq	r3, #1
 800ddd6:	2300      	movne	r3, #0
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	461a      	mov	r2, r3
 800dddc:	79fb      	ldrb	r3, [r7, #7]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d0a0      	beq.n	800dd24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dde2:	2300      	movs	r3, #0
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3710      	adds	r7, #16
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b095      	sub	sp, #84	@ 0x54
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddfc:	e853 3f00 	ldrex	r3, [r3]
 800de00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800de02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800de08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	461a      	mov	r2, r3
 800de10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de12:	643b      	str	r3, [r7, #64]	@ 0x40
 800de14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de1a:	e841 2300 	strex	r3, r2, [r1]
 800de1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800de20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de22:	2b00      	cmp	r3, #0
 800de24:	d1e6      	bne.n	800ddf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	3308      	adds	r3, #8
 800de2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de2e:	6a3b      	ldr	r3, [r7, #32]
 800de30:	e853 3f00 	ldrex	r3, [r3]
 800de34:	61fb      	str	r3, [r7, #28]
   return(result);
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	f023 0301 	bic.w	r3, r3, #1
 800de3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	3308      	adds	r3, #8
 800de44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800de48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de4e:	e841 2300 	strex	r3, r2, [r1]
 800de52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800de54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de56:	2b00      	cmp	r3, #0
 800de58:	d1e5      	bne.n	800de26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d118      	bne.n	800de94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	e853 3f00 	ldrex	r3, [r3]
 800de6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	f023 0310 	bic.w	r3, r3, #16
 800de76:	647b      	str	r3, [r7, #68]	@ 0x44
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	461a      	mov	r2, r3
 800de7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de80:	61bb      	str	r3, [r7, #24]
 800de82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de84:	6979      	ldr	r1, [r7, #20]
 800de86:	69ba      	ldr	r2, [r7, #24]
 800de88:	e841 2300 	strex	r3, r2, [r1]
 800de8c:	613b      	str	r3, [r7, #16]
   return(result);
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d1e6      	bne.n	800de62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2220      	movs	r2, #32
 800de98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2200      	movs	r2, #0
 800dea6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800dea8:	bf00      	nop
 800deaa:	3754      	adds	r7, #84	@ 0x54
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr

0800deb4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d121      	bne.n	800df0a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	4b27      	ldr	r3, [pc, #156]	@ (800df68 <FMC_SDRAM_Init+0xb4>)
 800decc:	4013      	ands	r3, r2
 800dece:	683a      	ldr	r2, [r7, #0]
 800ded0:	6851      	ldr	r1, [r2, #4]
 800ded2:	683a      	ldr	r2, [r7, #0]
 800ded4:	6892      	ldr	r2, [r2, #8]
 800ded6:	4311      	orrs	r1, r2
 800ded8:	683a      	ldr	r2, [r7, #0]
 800deda:	68d2      	ldr	r2, [r2, #12]
 800dedc:	4311      	orrs	r1, r2
 800dede:	683a      	ldr	r2, [r7, #0]
 800dee0:	6912      	ldr	r2, [r2, #16]
 800dee2:	4311      	orrs	r1, r2
 800dee4:	683a      	ldr	r2, [r7, #0]
 800dee6:	6952      	ldr	r2, [r2, #20]
 800dee8:	4311      	orrs	r1, r2
 800deea:	683a      	ldr	r2, [r7, #0]
 800deec:	6992      	ldr	r2, [r2, #24]
 800deee:	4311      	orrs	r1, r2
 800def0:	683a      	ldr	r2, [r7, #0]
 800def2:	69d2      	ldr	r2, [r2, #28]
 800def4:	4311      	orrs	r1, r2
 800def6:	683a      	ldr	r2, [r7, #0]
 800def8:	6a12      	ldr	r2, [r2, #32]
 800defa:	4311      	orrs	r1, r2
 800defc:	683a      	ldr	r2, [r7, #0]
 800defe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800df00:	430a      	orrs	r2, r1
 800df02:	431a      	orrs	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	601a      	str	r2, [r3, #0]
 800df08:	e026      	b.n	800df58 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	69d9      	ldr	r1, [r3, #28]
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	6a1b      	ldr	r3, [r3, #32]
 800df1a:	4319      	orrs	r1, r3
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df20:	430b      	orrs	r3, r1
 800df22:	431a      	orrs	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	685a      	ldr	r2, [r3, #4]
 800df2c:	4b0e      	ldr	r3, [pc, #56]	@ (800df68 <FMC_SDRAM_Init+0xb4>)
 800df2e:	4013      	ands	r3, r2
 800df30:	683a      	ldr	r2, [r7, #0]
 800df32:	6851      	ldr	r1, [r2, #4]
 800df34:	683a      	ldr	r2, [r7, #0]
 800df36:	6892      	ldr	r2, [r2, #8]
 800df38:	4311      	orrs	r1, r2
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	68d2      	ldr	r2, [r2, #12]
 800df3e:	4311      	orrs	r1, r2
 800df40:	683a      	ldr	r2, [r7, #0]
 800df42:	6912      	ldr	r2, [r2, #16]
 800df44:	4311      	orrs	r1, r2
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	6952      	ldr	r2, [r2, #20]
 800df4a:	4311      	orrs	r1, r2
 800df4c:	683a      	ldr	r2, [r7, #0]
 800df4e:	6992      	ldr	r2, [r2, #24]
 800df50:	430a      	orrs	r2, r1
 800df52:	431a      	orrs	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	370c      	adds	r7, #12
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop
 800df68:	ffff8000 	.word	0xffff8000

0800df6c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b085      	sub	sp, #20
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d128      	bne.n	800dfd0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	1e59      	subs	r1, r3, #1
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	3b01      	subs	r3, #1
 800df92:	011b      	lsls	r3, r3, #4
 800df94:	4319      	orrs	r1, r3
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	689b      	ldr	r3, [r3, #8]
 800df9a:	3b01      	subs	r3, #1
 800df9c:	021b      	lsls	r3, r3, #8
 800df9e:	4319      	orrs	r1, r3
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	031b      	lsls	r3, r3, #12
 800dfa8:	4319      	orrs	r1, r3
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	3b01      	subs	r3, #1
 800dfb0:	041b      	lsls	r3, r3, #16
 800dfb2:	4319      	orrs	r1, r3
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	695b      	ldr	r3, [r3, #20]
 800dfb8:	3b01      	subs	r3, #1
 800dfba:	051b      	lsls	r3, r3, #20
 800dfbc:	4319      	orrs	r1, r3
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	699b      	ldr	r3, [r3, #24]
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	061b      	lsls	r3, r3, #24
 800dfc6:	430b      	orrs	r3, r1
 800dfc8:	431a      	orrs	r2, r3
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	609a      	str	r2, [r3, #8]
 800dfce:	e02d      	b.n	800e02c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	689a      	ldr	r2, [r3, #8]
 800dfd4:	4b19      	ldr	r3, [pc, #100]	@ (800e03c <FMC_SDRAM_Timing_Init+0xd0>)
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	68ba      	ldr	r2, [r7, #8]
 800dfda:	68d2      	ldr	r2, [r2, #12]
 800dfdc:	3a01      	subs	r2, #1
 800dfde:	0311      	lsls	r1, r2, #12
 800dfe0:	68ba      	ldr	r2, [r7, #8]
 800dfe2:	6952      	ldr	r2, [r2, #20]
 800dfe4:	3a01      	subs	r2, #1
 800dfe6:	0512      	lsls	r2, r2, #20
 800dfe8:	430a      	orrs	r2, r1
 800dfea:	431a      	orrs	r2, r3
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	1e59      	subs	r1, r3, #1
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	3b01      	subs	r3, #1
 800e004:	011b      	lsls	r3, r3, #4
 800e006:	4319      	orrs	r1, r3
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	3b01      	subs	r3, #1
 800e00e:	021b      	lsls	r3, r3, #8
 800e010:	4319      	orrs	r1, r3
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	3b01      	subs	r3, #1
 800e018:	041b      	lsls	r3, r3, #16
 800e01a:	4319      	orrs	r1, r3
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	699b      	ldr	r3, [r3, #24]
 800e020:	3b01      	subs	r3, #1
 800e022:	061b      	lsls	r3, r3, #24
 800e024:	430b      	orrs	r3, r1
 800e026:	431a      	orrs	r2, r3
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800e02c:	2300      	movs	r3, #0
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3714      	adds	r7, #20
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	ff0f0fff 	.word	0xff0f0fff

0800e040 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e040:	b084      	sub	sp, #16
 800e042:	b480      	push	{r7}
 800e044:	b085      	sub	sp, #20
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	f107 001c 	add.w	r0, r7, #28
 800e04e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e052:	2300      	movs	r3, #0
 800e054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e056:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e058:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e05a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800e05e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800e062:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800e066:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800e06a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	4313      	orrs	r3, r2
 800e070:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	685a      	ldr	r2, [r3, #4]
 800e076:	4b07      	ldr	r3, [pc, #28]	@ (800e094 <SDMMC_Init+0x54>)
 800e078:	4013      	ands	r3, r2
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	431a      	orrs	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	3714      	adds	r7, #20
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	b004      	add	sp, #16
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop
 800e094:	ffff8100 	.word	0xffff8100

0800e098 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e098:	b480      	push	{r7}
 800e09a:	b083      	sub	sp, #12
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	370c      	adds	r7, #12
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr

0800e0b2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800e0b2:	b480      	push	{r7}
 800e0b4:	b083      	sub	sp, #12
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2203      	movs	r2, #3
 800e0be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e0c0:	2300      	movs	r3, #0
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	370c      	adds	r7, #12
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr

0800e0ce <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800e0ce:	b480      	push	{r7}
 800e0d0:	b083      	sub	sp, #12
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f003 0303 	and.w	r3, r3, #3
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	370c      	adds	r7, #12
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
	...

0800e0ec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b085      	sub	sp, #20
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e10a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e110:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e116:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	4313      	orrs	r3, r2
 800e11c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	68da      	ldr	r2, [r3, #12]
 800e122:	4b06      	ldr	r3, [pc, #24]	@ (800e13c <SDMMC_SendCommand+0x50>)
 800e124:	4013      	ands	r3, r2
 800e126:	68fa      	ldr	r2, [r7, #12]
 800e128:	431a      	orrs	r2, r3
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e12e:	2300      	movs	r3, #0
}
 800e130:	4618      	mov	r0, r3
 800e132:	3714      	adds	r7, #20
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr
 800e13c:	fffff000 	.word	0xfffff000

0800e140 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e140:	b480      	push	{r7}
 800e142:	b083      	sub	sp, #12
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	b2db      	uxtb	r3, r3
}
 800e14e:	4618      	mov	r0, r3
 800e150:	370c      	adds	r7, #12
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr

0800e15a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e15a:	b480      	push	{r7}
 800e15c:	b085      	sub	sp, #20
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
 800e162:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	3314      	adds	r3, #20
 800e168:	461a      	mov	r2, r3
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	4413      	add	r3, r2
 800e16e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
}  
 800e174:	4618      	mov	r0, r3
 800e176:	3714      	adds	r7, #20
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e180:	b480      	push	{r7}
 800e182:	b085      	sub	sp, #20
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	685a      	ldr	r2, [r3, #4]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e1a6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e1ac:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e1b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e1b4:	68fa      	ldr	r2, [r7, #12]
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1be:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	431a      	orrs	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e1ca:	2300      	movs	r3, #0

}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3714      	adds	r7, #20
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e1e6:	2310      	movs	r3, #16
 800e1e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1ea:	2340      	movs	r3, #64	@ 0x40
 800e1ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e1f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1f8:	f107 0308 	add.w	r3, r7, #8
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f7ff ff74 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e204:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e208:	2110      	movs	r1, #16
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 fa1a 	bl	800e644 <SDMMC_GetCmdResp1>
 800e210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e212:	69fb      	ldr	r3, [r7, #28]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3720      	adds	r7, #32
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b088      	sub	sp, #32
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e22a:	2311      	movs	r3, #17
 800e22c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e22e:	2340      	movs	r3, #64	@ 0x40
 800e230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e232:	2300      	movs	r3, #0
 800e234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e23a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e23c:	f107 0308 	add.w	r3, r7, #8
 800e240:	4619      	mov	r1, r3
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f7ff ff52 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e24c:	2111      	movs	r1, #17
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 f9f8 	bl	800e644 <SDMMC_GetCmdResp1>
 800e254:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e256:	69fb      	ldr	r3, [r7, #28]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3720      	adds	r7, #32
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b088      	sub	sp, #32
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e26e:	2312      	movs	r3, #18
 800e270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e272:	2340      	movs	r3, #64	@ 0x40
 800e274:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e276:	2300      	movs	r3, #0
 800e278:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e27a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e27e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e280:	f107 0308 	add.w	r3, r7, #8
 800e284:	4619      	mov	r1, r3
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7ff ff30 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e28c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e290:	2112      	movs	r1, #18
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 f9d6 	bl	800e644 <SDMMC_GetCmdResp1>
 800e298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e29a:	69fb      	ldr	r3, [r7, #28]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3720      	adds	r7, #32
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b088      	sub	sp, #32
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e2b2:	2318      	movs	r3, #24
 800e2b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2b6:	2340      	movs	r3, #64	@ 0x40
 800e2b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2c4:	f107 0308 	add.w	r3, r7, #8
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff ff0e 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e2d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2d4:	2118      	movs	r1, #24
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 f9b4 	bl	800e644 <SDMMC_GetCmdResp1>
 800e2dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2de:	69fb      	ldr	r3, [r7, #28]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3720      	adds	r7, #32
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b088      	sub	sp, #32
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e2f6:	2319      	movs	r3, #25
 800e2f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2fa:	2340      	movs	r3, #64	@ 0x40
 800e2fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2fe:	2300      	movs	r3, #0
 800e300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e308:	f107 0308 	add.w	r3, r7, #8
 800e30c:	4619      	mov	r1, r3
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f7ff feec 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e314:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e318:	2119      	movs	r1, #25
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 f992 	bl	800e644 <SDMMC_GetCmdResp1>
 800e320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e322:	69fb      	ldr	r3, [r7, #28]
}
 800e324:	4618      	mov	r0, r3
 800e326:	3720      	adds	r7, #32
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b088      	sub	sp, #32
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e334:	2300      	movs	r3, #0
 800e336:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e338:	230c      	movs	r3, #12
 800e33a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e33c:	2340      	movs	r3, #64	@ 0x40
 800e33e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e340:	2300      	movs	r3, #0
 800e342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e348:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e34a:	f107 0308 	add.w	r3, r7, #8
 800e34e:	4619      	mov	r1, r3
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7ff fecb 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e356:	4a05      	ldr	r2, [pc, #20]	@ (800e36c <SDMMC_CmdStopTransfer+0x40>)
 800e358:	210c      	movs	r1, #12
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 f972 	bl	800e644 <SDMMC_GetCmdResp1>
 800e360:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e362:	69fb      	ldr	r3, [r7, #28]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3720      	adds	r7, #32
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	05f5e100 	.word	0x05f5e100

0800e370 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b08a      	sub	sp, #40	@ 0x28
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e380:	2307      	movs	r3, #7
 800e382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e384:	2340      	movs	r3, #64	@ 0x40
 800e386:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e388:	2300      	movs	r3, #0
 800e38a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e38c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e390:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e392:	f107 0310 	add.w	r3, r7, #16
 800e396:	4619      	mov	r1, r3
 800e398:	68f8      	ldr	r0, [r7, #12]
 800e39a:	f7ff fea7 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e39e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e3a2:	2107      	movs	r1, #7
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f000 f94d 	bl	800e644 <SDMMC_GetCmdResp1>
 800e3aa:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800e3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3728      	adds	r7, #40	@ 0x28
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b088      	sub	sp, #32
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3d4:	f107 0308 	add.w	r3, r7, #8
 800e3d8:	4619      	mov	r1, r3
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7ff fe86 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 fb67 	bl	800eab4 <SDMMC_GetCmdError>
 800e3e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3e8:	69fb      	ldr	r3, [r7, #28]
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3720      	adds	r7, #32
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}

0800e3f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b088      	sub	sp, #32
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e3fa:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e3fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e400:	2308      	movs	r3, #8
 800e402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e404:	2340      	movs	r3, #64	@ 0x40
 800e406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e408:	2300      	movs	r3, #0
 800e40a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e40c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e410:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e412:	f107 0308 	add.w	r3, r7, #8
 800e416:	4619      	mov	r1, r3
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f7ff fe67 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 fafa 	bl	800ea18 <SDMMC_GetCmdResp7>
 800e424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e426:	69fb      	ldr	r3, [r7, #28]
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3720      	adds	r7, #32
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b088      	sub	sp, #32
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e43e:	2337      	movs	r3, #55	@ 0x37
 800e440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e442:	2340      	movs	r3, #64	@ 0x40
 800e444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e446:	2300      	movs	r3, #0
 800e448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e44a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e44e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e450:	f107 0308 	add.w	r3, r7, #8
 800e454:	4619      	mov	r1, r3
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f7ff fe48 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e45c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e460:	2137      	movs	r1, #55	@ 0x37
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f8ee 	bl	800e644 <SDMMC_GetCmdResp1>
 800e468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e46a:	69fb      	ldr	r3, [r7, #28]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3720      	adds	r7, #32
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b088      	sub	sp, #32
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e47e:	683a      	ldr	r2, [r7, #0]
 800e480:	4b0d      	ldr	r3, [pc, #52]	@ (800e4b8 <SDMMC_CmdAppOperCommand+0x44>)
 800e482:	4313      	orrs	r3, r2
 800e484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e486:	2329      	movs	r3, #41	@ 0x29
 800e488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e48a:	2340      	movs	r3, #64	@ 0x40
 800e48c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e48e:	2300      	movs	r3, #0
 800e490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e496:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e498:	f107 0308 	add.w	r3, r7, #8
 800e49c:	4619      	mov	r1, r3
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f7ff fe24 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 fa03 	bl	800e8b0 <SDMMC_GetCmdResp3>
 800e4aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4ac:	69fb      	ldr	r3, [r7, #28]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3720      	adds	r7, #32
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	80100000 	.word	0x80100000

0800e4bc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b088      	sub	sp, #32
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e4ca:	2306      	movs	r3, #6
 800e4cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4ce:	2340      	movs	r3, #64	@ 0x40
 800e4d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4dc:	f107 0308 	add.w	r3, r7, #8
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7ff fe02 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e4e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e4ec:	2106      	movs	r1, #6
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 f8a8 	bl	800e644 <SDMMC_GetCmdResp1>
 800e4f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4f6:	69fb      	ldr	r3, [r7, #28]
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3720      	adds	r7, #32
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b088      	sub	sp, #32
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e508:	2300      	movs	r3, #0
 800e50a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e50c:	2333      	movs	r3, #51	@ 0x33
 800e50e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e510:	2340      	movs	r3, #64	@ 0x40
 800e512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e514:	2300      	movs	r3, #0
 800e516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e51c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e51e:	f107 0308 	add.w	r3, r7, #8
 800e522:	4619      	mov	r1, r3
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7ff fde1 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e52a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e52e:	2133      	movs	r1, #51	@ 0x33
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 f887 	bl	800e644 <SDMMC_GetCmdResp1>
 800e536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e538:	69fb      	ldr	r3, [r7, #28]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3720      	adds	r7, #32
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}

0800e542 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e542:	b580      	push	{r7, lr}
 800e544:	b088      	sub	sp, #32
 800e546:	af00      	add	r7, sp, #0
 800e548:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e54a:	2300      	movs	r3, #0
 800e54c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e54e:	2302      	movs	r3, #2
 800e550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e552:	23c0      	movs	r3, #192	@ 0xc0
 800e554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e556:	2300      	movs	r3, #0
 800e558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e55a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e55e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e560:	f107 0308 	add.w	r3, r7, #8
 800e564:	4619      	mov	r1, r3
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7ff fdc0 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 f957 	bl	800e820 <SDMMC_GetCmdResp2>
 800e572:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e574:	69fb      	ldr	r3, [r7, #28]
}
 800e576:	4618      	mov	r0, r3
 800e578:	3720      	adds	r7, #32
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e57e:	b580      	push	{r7, lr}
 800e580:	b088      	sub	sp, #32
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
 800e586:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e58c:	2309      	movs	r3, #9
 800e58e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e590:	23c0      	movs	r3, #192	@ 0xc0
 800e592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e594:	2300      	movs	r3, #0
 800e596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e598:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e59c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e59e:	f107 0308 	add.w	r3, r7, #8
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7ff fda1 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f000 f938 	bl	800e820 <SDMMC_GetCmdResp2>
 800e5b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5b2:	69fb      	ldr	r3, [r7, #28]
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3720      	adds	r7, #32
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b088      	sub	sp, #32
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e5ca:	2303      	movs	r3, #3
 800e5cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5ce:	2340      	movs	r3, #64	@ 0x40
 800e5d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5dc:	f107 0308 	add.w	r3, r7, #8
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f7ff fd82 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e5e8:	683a      	ldr	r2, [r7, #0]
 800e5ea:	2103      	movs	r1, #3
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 f99d 	bl	800e92c <SDMMC_GetCmdResp6>
 800e5f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5f4:	69fb      	ldr	r3, [r7, #28]
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3720      	adds	r7, #32
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}

0800e5fe <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b088      	sub	sp, #32
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
 800e606:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e60c:	230d      	movs	r3, #13
 800e60e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e610:	2340      	movs	r3, #64	@ 0x40
 800e612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e614:	2300      	movs	r3, #0
 800e616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e618:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e61c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e61e:	f107 0308 	add.w	r3, r7, #8
 800e622:	4619      	mov	r1, r3
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f7ff fd61 	bl	800e0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e62a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e62e:	210d      	movs	r1, #13
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 f807 	bl	800e644 <SDMMC_GetCmdResp1>
 800e636:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e638:	69fb      	ldr	r3, [r7, #28]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3720      	adds	r7, #32
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
	...

0800e644 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b088      	sub	sp, #32
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	460b      	mov	r3, r1
 800e64e:	607a      	str	r2, [r7, #4]
 800e650:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e652:	4b70      	ldr	r3, [pc, #448]	@ (800e814 <SDMMC_GetCmdResp1+0x1d0>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	4a70      	ldr	r2, [pc, #448]	@ (800e818 <SDMMC_GetCmdResp1+0x1d4>)
 800e658:	fba2 2303 	umull	r2, r3, r2, r3
 800e65c:	0a5a      	lsrs	r2, r3, #9
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	fb02 f303 	mul.w	r3, r2, r3
 800e664:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e666:	69fb      	ldr	r3, [r7, #28]
 800e668:	1e5a      	subs	r2, r3, #1
 800e66a:	61fa      	str	r2, [r7, #28]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d102      	bne.n	800e676 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e670:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e674:	e0c9      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e67a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e67c:	69bb      	ldr	r3, [r7, #24]
 800e67e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e682:	2b00      	cmp	r3, #0
 800e684:	d0ef      	beq.n	800e666 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1ea      	bne.n	800e666 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e694:	f003 0304 	and.w	r3, r3, #4
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d004      	beq.n	800e6a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2204      	movs	r2, #4
 800e6a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6a2:	2304      	movs	r3, #4
 800e6a4:	e0b1      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6aa:	f003 0301 	and.w	r3, r3, #1
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d004      	beq.n	800e6bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	e0a6      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	22c5      	movs	r2, #197	@ 0xc5
 800e6c0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	f7ff fd3c 	bl	800e140 <SDMMC_GetCommandResponse>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	7afb      	ldrb	r3, [r7, #11]
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d001      	beq.n	800e6d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	e099      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	68f8      	ldr	r0, [r7, #12]
 800e6da:	f7ff fd3e 	bl	800e15a <SDMMC_GetResponse>
 800e6de:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e6e0:	697a      	ldr	r2, [r7, #20]
 800e6e2:	4b4e      	ldr	r3, [pc, #312]	@ (800e81c <SDMMC_GetCmdResp1+0x1d8>)
 800e6e4:	4013      	ands	r3, r2
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d101      	bne.n	800e6ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	e08d      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	da02      	bge.n	800e6fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e6f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e6f8:	e087      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e700:	2b00      	cmp	r3, #0
 800e702:	d001      	beq.n	800e708 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e704:	2340      	movs	r3, #64	@ 0x40
 800e706:	e080      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d001      	beq.n	800e716 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e712:	2380      	movs	r3, #128	@ 0x80
 800e714:	e079      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e720:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e724:	e071      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d002      	beq.n	800e736 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e730:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e734:	e069      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d002      	beq.n	800e746 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e740:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e744:	e061      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d002      	beq.n	800e756 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e750:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e754:	e059      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d002      	beq.n	800e766 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e764:	e051      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d002      	beq.n	800e776 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e774:	e049      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d002      	beq.n	800e786 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e780:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e784:	e041      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d002      	beq.n	800e796 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e790:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e794:	e039      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d002      	beq.n	800e7a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e7a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e7a4:	e031      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d002      	beq.n	800e7b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e7b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e7b4:	e029      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d002      	beq.n	800e7c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e7c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e7c4:	e021      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e7d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e7d4:	e019      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d002      	beq.n	800e7e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e7e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e7e4:	e011      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d002      	beq.n	800e7f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e7f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e7f4:	e009      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	f003 0308 	and.w	r3, r3, #8
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d002      	beq.n	800e806 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e800:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e804:	e001      	b.n	800e80a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e806:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3720      	adds	r7, #32
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
 800e812:	bf00      	nop
 800e814:	20000000 	.word	0x20000000
 800e818:	10624dd3 	.word	0x10624dd3
 800e81c:	fdffe008 	.word	0xfdffe008

0800e820 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e820:	b480      	push	{r7}
 800e822:	b085      	sub	sp, #20
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e828:	4b1f      	ldr	r3, [pc, #124]	@ (800e8a8 <SDMMC_GetCmdResp2+0x88>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a1f      	ldr	r2, [pc, #124]	@ (800e8ac <SDMMC_GetCmdResp2+0x8c>)
 800e82e:	fba2 2303 	umull	r2, r3, r2, r3
 800e832:	0a5b      	lsrs	r3, r3, #9
 800e834:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e838:	fb02 f303 	mul.w	r3, r2, r3
 800e83c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	1e5a      	subs	r2, r3, #1
 800e842:	60fa      	str	r2, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d102      	bne.n	800e84e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e848:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e84c:	e026      	b.n	800e89c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e852:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d0ef      	beq.n	800e83e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1ea      	bne.n	800e83e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e86c:	f003 0304 	and.w	r3, r3, #4
 800e870:	2b00      	cmp	r3, #0
 800e872:	d004      	beq.n	800e87e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2204      	movs	r2, #4
 800e878:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e87a:	2304      	movs	r3, #4
 800e87c:	e00e      	b.n	800e89c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e882:	f003 0301 	and.w	r3, r3, #1
 800e886:	2b00      	cmp	r3, #0
 800e888:	d004      	beq.n	800e894 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2201      	movs	r2, #1
 800e88e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e890:	2301      	movs	r3, #1
 800e892:	e003      	b.n	800e89c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	22c5      	movs	r2, #197	@ 0xc5
 800e898:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3714      	adds	r7, #20
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr
 800e8a8:	20000000 	.word	0x20000000
 800e8ac:	10624dd3 	.word	0x10624dd3

0800e8b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8b8:	4b1a      	ldr	r3, [pc, #104]	@ (800e924 <SDMMC_GetCmdResp3+0x74>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a1a      	ldr	r2, [pc, #104]	@ (800e928 <SDMMC_GetCmdResp3+0x78>)
 800e8be:	fba2 2303 	umull	r2, r3, r2, r3
 800e8c2:	0a5b      	lsrs	r3, r3, #9
 800e8c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8c8:	fb02 f303 	mul.w	r3, r2, r3
 800e8cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	1e5a      	subs	r2, r3, #1
 800e8d2:	60fa      	str	r2, [r7, #12]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d102      	bne.n	800e8de <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e8d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e8dc:	e01b      	b.n	800e916 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d0ef      	beq.n	800e8ce <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1ea      	bne.n	800e8ce <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8fc:	f003 0304 	and.w	r3, r3, #4
 800e900:	2b00      	cmp	r3, #0
 800e902:	d004      	beq.n	800e90e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2204      	movs	r2, #4
 800e908:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e90a:	2304      	movs	r3, #4
 800e90c:	e003      	b.n	800e916 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	22c5      	movs	r2, #197	@ 0xc5
 800e912:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e914:	2300      	movs	r3, #0
}
 800e916:	4618      	mov	r0, r3
 800e918:	3714      	adds	r7, #20
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop
 800e924:	20000000 	.word	0x20000000
 800e928:	10624dd3 	.word	0x10624dd3

0800e92c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b088      	sub	sp, #32
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	460b      	mov	r3, r1
 800e936:	607a      	str	r2, [r7, #4]
 800e938:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e93a:	4b35      	ldr	r3, [pc, #212]	@ (800ea10 <SDMMC_GetCmdResp6+0xe4>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4a35      	ldr	r2, [pc, #212]	@ (800ea14 <SDMMC_GetCmdResp6+0xe8>)
 800e940:	fba2 2303 	umull	r2, r3, r2, r3
 800e944:	0a5b      	lsrs	r3, r3, #9
 800e946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e94a:	fb02 f303 	mul.w	r3, r2, r3
 800e94e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	1e5a      	subs	r2, r3, #1
 800e954:	61fa      	str	r2, [r7, #28]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d102      	bne.n	800e960 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e95a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e95e:	e052      	b.n	800ea06 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e964:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d0ef      	beq.n	800e950 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e970:	69bb      	ldr	r3, [r7, #24]
 800e972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1ea      	bne.n	800e950 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e97e:	f003 0304 	and.w	r3, r3, #4
 800e982:	2b00      	cmp	r3, #0
 800e984:	d004      	beq.n	800e990 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2204      	movs	r2, #4
 800e98a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e98c:	2304      	movs	r3, #4
 800e98e:	e03a      	b.n	800ea06 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e994:	f003 0301 	and.w	r3, r3, #1
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d004      	beq.n	800e9a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2201      	movs	r2, #1
 800e9a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e02f      	b.n	800ea06 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f7ff fbca 	bl	800e140 <SDMMC_GetCommandResponse>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	7afb      	ldrb	r3, [r7, #11]
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d001      	beq.n	800e9ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	e025      	b.n	800ea06 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	22c5      	movs	r2, #197	@ 0xc5
 800e9be:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e9c0:	2100      	movs	r1, #0
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f7ff fbc9 	bl	800e15a <SDMMC_GetResponse>
 800e9c8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d106      	bne.n	800e9e2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	0c1b      	lsrs	r3, r3, #16
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	e011      	b.n	800ea06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d002      	beq.n	800e9f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e9ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e9f0:	e009      	b.n	800ea06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d002      	beq.n	800ea02 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e9fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea00:	e001      	b.n	800ea06 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ea02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3720      	adds	r7, #32
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	20000000 	.word	0x20000000
 800ea14:	10624dd3 	.word	0x10624dd3

0800ea18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b085      	sub	sp, #20
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ea20:	4b22      	ldr	r3, [pc, #136]	@ (800eaac <SDMMC_GetCmdResp7+0x94>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4a22      	ldr	r2, [pc, #136]	@ (800eab0 <SDMMC_GetCmdResp7+0x98>)
 800ea26:	fba2 2303 	umull	r2, r3, r2, r3
 800ea2a:	0a5b      	lsrs	r3, r3, #9
 800ea2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ea30:	fb02 f303 	mul.w	r3, r2, r3
 800ea34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	1e5a      	subs	r2, r3, #1
 800ea3a:	60fa      	str	r2, [r7, #12]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d102      	bne.n	800ea46 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ea44:	e02c      	b.n	800eaa0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d0ef      	beq.n	800ea36 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d1ea      	bne.n	800ea36 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea64:	f003 0304 	and.w	r3, r3, #4
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d004      	beq.n	800ea76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2204      	movs	r2, #4
 800ea70:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea72:	2304      	movs	r3, #4
 800ea74:	e014      	b.n	800eaa0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea7a:	f003 0301 	and.w	r3, r3, #1
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d004      	beq.n	800ea8c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2201      	movs	r2, #1
 800ea86:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	e009      	b.n	800eaa0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d002      	beq.n	800ea9e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2240      	movs	r2, #64	@ 0x40
 800ea9c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ea9e:	2300      	movs	r3, #0
  
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3714      	adds	r7, #20
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr
 800eaac:	20000000 	.word	0x20000000
 800eab0:	10624dd3 	.word	0x10624dd3

0800eab4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b085      	sub	sp, #20
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eabc:	4b11      	ldr	r3, [pc, #68]	@ (800eb04 <SDMMC_GetCmdError+0x50>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a11      	ldr	r2, [pc, #68]	@ (800eb08 <SDMMC_GetCmdError+0x54>)
 800eac2:	fba2 2303 	umull	r2, r3, r2, r3
 800eac6:	0a5b      	lsrs	r3, r3, #9
 800eac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eacc:	fb02 f303 	mul.w	r3, r2, r3
 800ead0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	1e5a      	subs	r2, r3, #1
 800ead6:	60fa      	str	r2, [r7, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d102      	bne.n	800eae2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eadc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eae0:	e009      	b.n	800eaf6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d0f1      	beq.n	800ead2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	22c5      	movs	r2, #197	@ 0xc5
 800eaf2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800eaf4:	2300      	movs	r3, #0
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3714      	adds	r7, #20
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	20000000 	.word	0x20000000
 800eb08:	10624dd3 	.word	0x10624dd3

0800eb0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb0c:	b084      	sub	sp, #16
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b084      	sub	sp, #16
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
 800eb16:	f107 001c 	add.w	r0, r7, #28
 800eb1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d121      	bne.n	800eb6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	68da      	ldr	r2, [r3, #12]
 800eb36:	4b21      	ldr	r3, [pc, #132]	@ (800ebbc <USB_CoreInit+0xb0>)
 800eb38:	4013      	ands	r3, r2
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800eb4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d105      	bne.n	800eb5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f000 f9d4 	bl	800ef0c <USB_CoreReset>
 800eb64:	4603      	mov	r3, r0
 800eb66:	73fb      	strb	r3, [r7, #15]
 800eb68:	e010      	b.n	800eb8c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 f9c8 	bl	800ef0c <USB_CoreReset>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800eb8c:	7fbb      	ldrb	r3, [r7, #30]
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d10b      	bne.n	800ebaa <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	689b      	ldr	r3, [r3, #8]
 800eb96:	f043 0206 	orr.w	r2, r3, #6
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	f043 0220 	orr.w	r2, r3, #32
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ebaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ebb6:	b004      	add	sp, #16
 800ebb8:	4770      	bx	lr
 800ebba:	bf00      	nop
 800ebbc:	ffbdffbf 	.word	0xffbdffbf

0800ebc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b083      	sub	sp, #12
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	f043 0201 	orr.w	r2, r3, #1
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	370c      	adds	r7, #12
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr

0800ebe2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ebe2:	b480      	push	{r7}
 800ebe4:	b083      	sub	sp, #12
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	689b      	ldr	r3, [r3, #8]
 800ebee:	f023 0201 	bic.w	r2, r3, #1
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ebf6:	2300      	movs	r3, #0
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ec10:	2300      	movs	r3, #0
 800ec12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	68db      	ldr	r3, [r3, #12]
 800ec18:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ec20:	78fb      	ldrb	r3, [r7, #3]
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	d115      	bne.n	800ec52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	68db      	ldr	r3, [r3, #12]
 800ec2a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ec32:	200a      	movs	r0, #10
 800ec34:	f7f5 fdd4 	bl	80047e0 <HAL_Delay>
      ms += 10U;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	330a      	adds	r3, #10
 800ec3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f000 f956 	bl	800eef0 <USB_GetMode>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d01e      	beq.n	800ec88 <USB_SetCurrentMode+0x84>
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2bc7      	cmp	r3, #199	@ 0xc7
 800ec4e:	d9f0      	bls.n	800ec32 <USB_SetCurrentMode+0x2e>
 800ec50:	e01a      	b.n	800ec88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ec52:	78fb      	ldrb	r3, [r7, #3]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d115      	bne.n	800ec84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ec64:	200a      	movs	r0, #10
 800ec66:	f7f5 fdbb 	bl	80047e0 <HAL_Delay>
      ms += 10U;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	330a      	adds	r3, #10
 800ec6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 f93d 	bl	800eef0 <USB_GetMode>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d005      	beq.n	800ec88 <USB_SetCurrentMode+0x84>
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2bc7      	cmp	r3, #199	@ 0xc7
 800ec80:	d9f0      	bls.n	800ec64 <USB_SetCurrentMode+0x60>
 800ec82:	e001      	b.n	800ec88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ec84:	2301      	movs	r3, #1
 800ec86:	e005      	b.n	800ec94 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2bc8      	cmp	r3, #200	@ 0xc8
 800ec8c:	d101      	bne.n	800ec92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e000      	b.n	800ec94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ec92:	2300      	movs	r3, #0
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b085      	sub	sp, #20
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800eca6:	2300      	movs	r3, #0
 800eca8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	3301      	adds	r3, #1
 800ecae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ecb6:	d901      	bls.n	800ecbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	e01b      	b.n	800ecf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	691b      	ldr	r3, [r3, #16]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	daf2      	bge.n	800ecaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	019b      	lsls	r3, r3, #6
 800eccc:	f043 0220 	orr.w	r2, r3, #32
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ece0:	d901      	bls.n	800ece6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ece2:	2303      	movs	r3, #3
 800ece4:	e006      	b.n	800ecf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	691b      	ldr	r3, [r3, #16]
 800ecea:	f003 0320 	and.w	r3, r3, #32
 800ecee:	2b20      	cmp	r3, #32
 800ecf0:	d0f0      	beq.n	800ecd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ecf2:	2300      	movs	r3, #0
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3714      	adds	r7, #20
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr

0800ed00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	3301      	adds	r3, #1
 800ed10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed18:	d901      	bls.n	800ed1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ed1a:	2303      	movs	r3, #3
 800ed1c:	e018      	b.n	800ed50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	691b      	ldr	r3, [r3, #16]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	daf2      	bge.n	800ed0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ed26:	2300      	movs	r3, #0
 800ed28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2210      	movs	r2, #16
 800ed2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	3301      	adds	r3, #1
 800ed34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed3c:	d901      	bls.n	800ed42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ed3e:	2303      	movs	r3, #3
 800ed40:	e006      	b.n	800ed50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	f003 0310 	and.w	r3, r3, #16
 800ed4a:	2b10      	cmp	r3, #16
 800ed4c:	d0f0      	beq.n	800ed30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ed4e:	2300      	movs	r3, #0
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3714      	adds	r7, #20
 800ed54:	46bd      	mov	sp, r7
 800ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5a:	4770      	bx	lr

0800ed5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b089      	sub	sp, #36	@ 0x24
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	60b9      	str	r1, [r7, #8]
 800ed66:	4611      	mov	r1, r2
 800ed68:	461a      	mov	r2, r3
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	71fb      	strb	r3, [r7, #7]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ed7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d123      	bne.n	800edca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ed82:	88bb      	ldrh	r3, [r7, #4]
 800ed84:	3303      	adds	r3, #3
 800ed86:	089b      	lsrs	r3, r3, #2
 800ed88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	61bb      	str	r3, [r7, #24]
 800ed8e:	e018      	b.n	800edc2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ed90:	79fb      	ldrb	r3, [r7, #7]
 800ed92:	031a      	lsls	r2, r3, #12
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	4413      	add	r3, r2
 800ed98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	69fb      	ldr	r3, [r7, #28]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	3301      	adds	r3, #1
 800eda8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	3301      	adds	r3, #1
 800edae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	3301      	adds	r3, #1
 800edb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edb6:	69fb      	ldr	r3, [r7, #28]
 800edb8:	3301      	adds	r3, #1
 800edba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	3301      	adds	r3, #1
 800edc0:	61bb      	str	r3, [r7, #24]
 800edc2:	69ba      	ldr	r2, [r7, #24]
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d3e2      	bcc.n	800ed90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800edca:	2300      	movs	r3, #0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3724      	adds	r7, #36	@ 0x24
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr

0800edd8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800edd8:	b480      	push	{r7}
 800edda:	b08b      	sub	sp, #44	@ 0x2c
 800eddc:	af00      	add	r7, sp, #0
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	4613      	mov	r3, r2
 800ede4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800edee:	88fb      	ldrh	r3, [r7, #6]
 800edf0:	089b      	lsrs	r3, r3, #2
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800edf6:	88fb      	ldrh	r3, [r7, #6]
 800edf8:	f003 0303 	and.w	r3, r3, #3
 800edfc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800edfe:	2300      	movs	r3, #0
 800ee00:	623b      	str	r3, [r7, #32]
 800ee02:	e014      	b.n	800ee2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ee04:	69bb      	ldr	r3, [r7, #24]
 800ee06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee0e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ee10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee12:	3301      	adds	r3, #1
 800ee14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee18:	3301      	adds	r3, #1
 800ee1a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee1e:	3301      	adds	r3, #1
 800ee20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee24:	3301      	adds	r3, #1
 800ee26:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ee28:	6a3b      	ldr	r3, [r7, #32]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	623b      	str	r3, [r7, #32]
 800ee2e:	6a3a      	ldr	r2, [r7, #32]
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d3e6      	bcc.n	800ee04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ee36:	8bfb      	ldrh	r3, [r7, #30]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d01e      	beq.n	800ee7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee46:	461a      	mov	r2, r3
 800ee48:	f107 0310 	add.w	r3, r7, #16
 800ee4c:	6812      	ldr	r2, [r2, #0]
 800ee4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ee50:	693a      	ldr	r2, [r7, #16]
 800ee52:	6a3b      	ldr	r3, [r7, #32]
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	00db      	lsls	r3, r3, #3
 800ee58:	fa22 f303 	lsr.w	r3, r2, r3
 800ee5c:	b2da      	uxtb	r2, r3
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee60:	701a      	strb	r2, [r3, #0]
      i++;
 800ee62:	6a3b      	ldr	r3, [r7, #32]
 800ee64:	3301      	adds	r3, #1
 800ee66:	623b      	str	r3, [r7, #32]
      pDest++;
 800ee68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ee6e:	8bfb      	ldrh	r3, [r7, #30]
 800ee70:	3b01      	subs	r3, #1
 800ee72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ee74:	8bfb      	ldrh	r3, [r7, #30]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1ea      	bne.n	800ee50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ee7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	372c      	adds	r7, #44	@ 0x2c
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	695b      	ldr	r3, [r3, #20]
 800ee94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	699b      	ldr	r3, [r3, #24]
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	4013      	ands	r3, r2
 800ee9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eea0:	68fb      	ldr	r3, [r7, #12]
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3714      	adds	r7, #20
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr

0800eeae <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800eeae:	b480      	push	{r7}
 800eeb0:	b085      	sub	sp, #20
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
 800eeb6:	460b      	mov	r3, r1
 800eeb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800eebe:	78fb      	ldrb	r3, [r7, #3]
 800eec0:	015a      	lsls	r2, r3, #5
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	4413      	add	r3, r2
 800eec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800eece:	78fb      	ldrb	r3, [r7, #3]
 800eed0:	015a      	lsls	r2, r3, #5
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	4413      	add	r3, r2
 800eed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	4013      	ands	r3, r2
 800eee0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eee2:	68bb      	ldr	r3, [r7, #8]
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3714      	adds	r7, #20
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr

0800eef0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b083      	sub	sp, #12
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	695b      	ldr	r3, [r3, #20]
 800eefc:	f003 0301 	and.w	r3, r3, #1
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	370c      	adds	r7, #12
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr

0800ef0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b085      	sub	sp, #20
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ef14:	2300      	movs	r3, #0
 800ef16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ef24:	d901      	bls.n	800ef2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ef26:	2303      	movs	r3, #3
 800ef28:	e022      	b.n	800ef70 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	691b      	ldr	r3, [r3, #16]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	daf2      	bge.n	800ef18 <USB_CoreReset+0xc>

  count = 10U;
 800ef32:	230a      	movs	r3, #10
 800ef34:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800ef36:	e002      	b.n	800ef3e <USB_CoreReset+0x32>
  {
    count--;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d1f9      	bne.n	800ef38 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	691b      	ldr	r3, [r3, #16]
 800ef48:	f043 0201 	orr.w	r2, r3, #1
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	3301      	adds	r3, #1
 800ef54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ef5c:	d901      	bls.n	800ef62 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	e006      	b.n	800ef70 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	691b      	ldr	r3, [r3, #16]
 800ef66:	f003 0301 	and.w	r3, r3, #1
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d0f0      	beq.n	800ef50 <USB_CoreReset+0x44>

  return HAL_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3714      	adds	r7, #20
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr

0800ef7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ef7c:	b084      	sub	sp, #16
 800ef7e:	b580      	push	{r7, lr}
 800ef80:	b086      	sub	sp, #24
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]
 800ef86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ef8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	2300      	movs	r3, #0
 800efa0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efa6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d119      	bne.n	800efee <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800efba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d10a      	bne.n	800efd8 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	68fa      	ldr	r2, [r7, #12]
 800efcc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800efd0:	f043 0304 	orr.w	r3, r3, #4
 800efd4:	6013      	str	r3, [r2, #0]
 800efd6:	e014      	b.n	800f002 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800efe6:	f023 0304 	bic.w	r3, r3, #4
 800efea:	6013      	str	r3, [r2, #0]
 800efec:	e009      	b.n	800f002 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	68fa      	ldr	r2, [r7, #12]
 800eff8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800effc:	f023 0304 	bic.w	r3, r3, #4
 800f000:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f002:	2110      	movs	r1, #16
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f7ff fe49 	bl	800ec9c <USB_FlushTxFifo>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d001      	beq.n	800f014 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800f010:	2301      	movs	r3, #1
 800f012:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7ff fe73 	bl	800ed00 <USB_FlushRxFifo>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d001      	beq.n	800f024 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800f020:	2301      	movs	r3, #1
 800f022:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800f024:	2300      	movs	r3, #0
 800f026:	613b      	str	r3, [r7, #16]
 800f028:	e015      	b.n	800f056 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	015a      	lsls	r2, r3, #5
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	4413      	add	r3, r2
 800f032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f036:	461a      	mov	r2, r3
 800f038:	f04f 33ff 	mov.w	r3, #4294967295
 800f03c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	015a      	lsls	r2, r3, #5
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	4413      	add	r3, r2
 800f046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f04a:	461a      	mov	r2, r3
 800f04c:	2300      	movs	r3, #0
 800f04e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	3301      	adds	r3, #1
 800f054:	613b      	str	r3, [r7, #16]
 800f056:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f05a:	461a      	mov	r2, r3
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	4293      	cmp	r3, r2
 800f060:	d3e3      	bcc.n	800f02a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2200      	movs	r2, #0
 800f066:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f04f 32ff 	mov.w	r2, #4294967295
 800f06e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	4a18      	ldr	r2, [pc, #96]	@ (800f0d4 <USB_HostInit+0x158>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d10b      	bne.n	800f090 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f07e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	4a15      	ldr	r2, [pc, #84]	@ (800f0d8 <USB_HostInit+0x15c>)
 800f084:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4a14      	ldr	r2, [pc, #80]	@ (800f0dc <USB_HostInit+0x160>)
 800f08a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800f08e:	e009      	b.n	800f0a4 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2280      	movs	r2, #128	@ 0x80
 800f094:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a11      	ldr	r2, [pc, #68]	@ (800f0e0 <USB_HostInit+0x164>)
 800f09a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a11      	ldr	r2, [pc, #68]	@ (800f0e4 <USB_HostInit+0x168>)
 800f0a0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f0a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d105      	bne.n	800f0b8 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	699b      	ldr	r3, [r3, #24]
 800f0b0:	f043 0210 	orr.w	r2, r3, #16
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	699a      	ldr	r2, [r3, #24]
 800f0bc:	4b0a      	ldr	r3, [pc, #40]	@ (800f0e8 <USB_HostInit+0x16c>)
 800f0be:	4313      	orrs	r3, r2
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800f0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3718      	adds	r7, #24
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0d0:	b004      	add	sp, #16
 800f0d2:	4770      	bx	lr
 800f0d4:	40040000 	.word	0x40040000
 800f0d8:	01000200 	.word	0x01000200
 800f0dc:	00e00300 	.word	0x00e00300
 800f0e0:	00600080 	.word	0x00600080
 800f0e4:	004000e0 	.word	0x004000e0
 800f0e8:	a3200008 	.word	0xa3200008

0800f0ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	68fa      	ldr	r2, [r7, #12]
 800f106:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f10a:	f023 0303 	bic.w	r3, r3, #3
 800f10e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	78fb      	ldrb	r3, [r7, #3]
 800f11a:	f003 0303 	and.w	r3, r3, #3
 800f11e:	68f9      	ldr	r1, [r7, #12]
 800f120:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800f124:	4313      	orrs	r3, r2
 800f126:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800f128:	78fb      	ldrb	r3, [r7, #3]
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d107      	bne.n	800f13e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f134:	461a      	mov	r2, r3
 800f136:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800f13a:	6053      	str	r3, [r2, #4]
 800f13c:	e00c      	b.n	800f158 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800f13e:	78fb      	ldrb	r3, [r7, #3]
 800f140:	2b02      	cmp	r3, #2
 800f142:	d107      	bne.n	800f154 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f14a:	461a      	mov	r2, r3
 800f14c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800f150:	6053      	str	r3, [r2, #4]
 800f152:	e001      	b.n	800f158 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800f154:	2301      	movs	r3, #1
 800f156:	e000      	b.n	800f15a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr

0800f166 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b084      	sub	sp, #16
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800f172:	2300      	movs	r3, #0
 800f174:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800f186:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800f190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f194:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800f196:	2064      	movs	r0, #100	@ 0x64
 800f198:	f7f5 fb22 	bl	80047e0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800f1a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f1a8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800f1aa:	200a      	movs	r0, #10
 800f1ac:	f7f5 fb18 	bl	80047e0 <HAL_Delay>

  return HAL_OK;
 800f1b0:	2300      	movs	r3, #0
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3710      	adds	r7, #16
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}

0800f1ba <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800f1ba:	b480      	push	{r7}
 800f1bc:	b085      	sub	sp, #20
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800f1de:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d109      	bne.n	800f1fe <USB_DriveVbus+0x44>
 800f1ea:	78fb      	ldrb	r3, [r7, #3]
 800f1ec:	2b01      	cmp	r3, #1
 800f1ee:	d106      	bne.n	800f1fe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	68fa      	ldr	r2, [r7, #12]
 800f1f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800f1f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f1fc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f208:	d109      	bne.n	800f21e <USB_DriveVbus+0x64>
 800f20a:	78fb      	ldrb	r3, [r7, #3]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d106      	bne.n	800f21e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800f218:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f21c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800f21e:	2300      	movs	r3, #0
}
 800f220:	4618      	mov	r0, r3
 800f222:	3714      	adds	r7, #20
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr

0800f22c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b085      	sub	sp, #20
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f238:	2300      	movs	r3, #0
 800f23a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	0c5b      	lsrs	r3, r3, #17
 800f24a:	f003 0303 	and.w	r3, r3, #3
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3714      	adds	r7, #20
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr

0800f25a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800f25a:	b480      	push	{r7}
 800f25c:	b085      	sub	sp, #20
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f26c:	689b      	ldr	r3, [r3, #8]
 800f26e:	b29b      	uxth	r3, r3
}
 800f270:	4618      	mov	r0, r3
 800f272:	3714      	adds	r7, #20
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b088      	sub	sp, #32
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	4608      	mov	r0, r1
 800f286:	4611      	mov	r1, r2
 800f288:	461a      	mov	r2, r3
 800f28a:	4603      	mov	r3, r0
 800f28c:	70fb      	strb	r3, [r7, #3]
 800f28e:	460b      	mov	r3, r1
 800f290:	70bb      	strb	r3, [r7, #2]
 800f292:	4613      	mov	r3, r2
 800f294:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800f296:	2300      	movs	r3, #0
 800f298:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800f29e:	78fb      	ldrb	r3, [r7, #3]
 800f2a0:	015a      	lsls	r2, r3, #5
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	4413      	add	r3, r2
 800f2a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800f2b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f2b6:	2b03      	cmp	r3, #3
 800f2b8:	d87c      	bhi.n	800f3b4 <USB_HC_Init+0x138>
 800f2ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f2c0 <USB_HC_Init+0x44>)
 800f2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c0:	0800f2d1 	.word	0x0800f2d1
 800f2c4:	0800f377 	.word	0x0800f377
 800f2c8:	0800f2d1 	.word	0x0800f2d1
 800f2cc:	0800f339 	.word	0x0800f339
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f2d0:	78fb      	ldrb	r3, [r7, #3]
 800f2d2:	015a      	lsls	r2, r3, #5
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2dc:	461a      	mov	r2, r3
 800f2de:	f240 439d 	movw	r3, #1181	@ 0x49d
 800f2e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800f2e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	da10      	bge.n	800f30e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f2ec:	78fb      	ldrb	r3, [r7, #3]
 800f2ee:	015a      	lsls	r2, r3, #5
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	4413      	add	r3, r2
 800f2f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	78fa      	ldrb	r2, [r7, #3]
 800f2fc:	0151      	lsls	r1, r2, #5
 800f2fe:	693a      	ldr	r2, [r7, #16]
 800f300:	440a      	add	r2, r1
 800f302:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f30a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800f30c:	e055      	b.n	800f3ba <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a6f      	ldr	r2, [pc, #444]	@ (800f4d0 <USB_HC_Init+0x254>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d151      	bne.n	800f3ba <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800f316:	78fb      	ldrb	r3, [r7, #3]
 800f318:	015a      	lsls	r2, r3, #5
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	4413      	add	r3, r2
 800f31e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f322:	68db      	ldr	r3, [r3, #12]
 800f324:	78fa      	ldrb	r2, [r7, #3]
 800f326:	0151      	lsls	r1, r2, #5
 800f328:	693a      	ldr	r2, [r7, #16]
 800f32a:	440a      	add	r2, r1
 800f32c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f330:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f334:	60d3      	str	r3, [r2, #12]
      break;
 800f336:	e040      	b.n	800f3ba <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f338:	78fb      	ldrb	r3, [r7, #3]
 800f33a:	015a      	lsls	r2, r3, #5
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	4413      	add	r3, r2
 800f340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f344:	461a      	mov	r2, r3
 800f346:	f240 639d 	movw	r3, #1693	@ 0x69d
 800f34a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f34c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f350:	2b00      	cmp	r3, #0
 800f352:	da34      	bge.n	800f3be <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f354:	78fb      	ldrb	r3, [r7, #3]
 800f356:	015a      	lsls	r2, r3, #5
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	4413      	add	r3, r2
 800f35c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	78fa      	ldrb	r2, [r7, #3]
 800f364:	0151      	lsls	r1, r2, #5
 800f366:	693a      	ldr	r2, [r7, #16]
 800f368:	440a      	add	r2, r1
 800f36a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f36e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f372:	60d3      	str	r3, [r2, #12]
      }

      break;
 800f374:	e023      	b.n	800f3be <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f376:	78fb      	ldrb	r3, [r7, #3]
 800f378:	015a      	lsls	r2, r3, #5
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	4413      	add	r3, r2
 800f37e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f382:	461a      	mov	r2, r3
 800f384:	f240 2325 	movw	r3, #549	@ 0x225
 800f388:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f38a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	da17      	bge.n	800f3c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800f392:	78fb      	ldrb	r3, [r7, #3]
 800f394:	015a      	lsls	r2, r3, #5
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	4413      	add	r3, r2
 800f39a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	78fa      	ldrb	r2, [r7, #3]
 800f3a2:	0151      	lsls	r1, r2, #5
 800f3a4:	693a      	ldr	r2, [r7, #16]
 800f3a6:	440a      	add	r2, r1
 800f3a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f3ac:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800f3b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800f3b2:	e006      	b.n	800f3c2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	77fb      	strb	r3, [r7, #31]
      break;
 800f3b8:	e004      	b.n	800f3c4 <USB_HC_Init+0x148>
      break;
 800f3ba:	bf00      	nop
 800f3bc:	e002      	b.n	800f3c4 <USB_HC_Init+0x148>
      break;
 800f3be:	bf00      	nop
 800f3c0:	e000      	b.n	800f3c4 <USB_HC_Init+0x148>
      break;
 800f3c2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800f3c4:	78fb      	ldrb	r3, [r7, #3]
 800f3c6:	015a      	lsls	r2, r3, #5
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800f3d6:	78fb      	ldrb	r3, [r7, #3]
 800f3d8:	015a      	lsls	r2, r3, #5
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	4413      	add	r3, r2
 800f3de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	78fa      	ldrb	r2, [r7, #3]
 800f3e6:	0151      	lsls	r1, r2, #5
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	440a      	add	r2, r1
 800f3ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f3f0:	f043 0302 	orr.w	r3, r3, #2
 800f3f4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f3fc:	699a      	ldr	r2, [r3, #24]
 800f3fe:	78fb      	ldrb	r3, [r7, #3]
 800f400:	f003 030f 	and.w	r3, r3, #15
 800f404:	2101      	movs	r1, #1
 800f406:	fa01 f303 	lsl.w	r3, r1, r3
 800f40a:	6939      	ldr	r1, [r7, #16]
 800f40c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800f410:	4313      	orrs	r3, r2
 800f412:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	699b      	ldr	r3, [r3, #24]
 800f418:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800f420:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f424:	2b00      	cmp	r3, #0
 800f426:	da03      	bge.n	800f430 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800f428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f42c:	61bb      	str	r3, [r7, #24]
 800f42e:	e001      	b.n	800f434 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800f430:	2300      	movs	r3, #0
 800f432:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f7ff fef9 	bl	800f22c <USB_GetHostSpeed>
 800f43a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800f43c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f440:	2b02      	cmp	r3, #2
 800f442:	d106      	bne.n	800f452 <USB_HC_Init+0x1d6>
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2b02      	cmp	r3, #2
 800f448:	d003      	beq.n	800f452 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800f44a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800f44e:	617b      	str	r3, [r7, #20]
 800f450:	e001      	b.n	800f456 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800f452:	2300      	movs	r3, #0
 800f454:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f456:	787b      	ldrb	r3, [r7, #1]
 800f458:	059b      	lsls	r3, r3, #22
 800f45a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f45e:	78bb      	ldrb	r3, [r7, #2]
 800f460:	02db      	lsls	r3, r3, #11
 800f462:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f466:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f468:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f46c:	049b      	lsls	r3, r3, #18
 800f46e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f472:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800f474:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800f476:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f47a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800f47c:	69bb      	ldr	r3, [r7, #24]
 800f47e:	431a      	orrs	r2, r3
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f484:	78fa      	ldrb	r2, [r7, #3]
 800f486:	0151      	lsls	r1, r2, #5
 800f488:	693a      	ldr	r2, [r7, #16]
 800f48a:	440a      	add	r2, r1
 800f48c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800f490:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f494:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800f496:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f49a:	2b03      	cmp	r3, #3
 800f49c:	d003      	beq.n	800f4a6 <USB_HC_Init+0x22a>
 800f49e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d10f      	bne.n	800f4c6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800f4a6:	78fb      	ldrb	r3, [r7, #3]
 800f4a8:	015a      	lsls	r2, r3, #5
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	78fa      	ldrb	r2, [r7, #3]
 800f4b6:	0151      	lsls	r1, r2, #5
 800f4b8:	693a      	ldr	r2, [r7, #16]
 800f4ba:	440a      	add	r2, r1
 800f4bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f4c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f4c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800f4c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3720      	adds	r7, #32
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	40040000 	.word	0x40040000

0800f4d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b08c      	sub	sp, #48	@ 0x30
 800f4d8:	af02      	add	r7, sp, #8
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	4613      	mov	r3, r2
 800f4e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	785b      	ldrb	r3, [r3, #1]
 800f4ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800f4ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f4f0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	4a5d      	ldr	r2, [pc, #372]	@ (800f66c <USB_HC_StartXfer+0x198>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d12f      	bne.n	800f55a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800f4fa:	79fb      	ldrb	r3, [r7, #7]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d11c      	bne.n	800f53a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	7c9b      	ldrb	r3, [r3, #18]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d003      	beq.n	800f510 <USB_HC_StartXfer+0x3c>
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	7c9b      	ldrb	r3, [r3, #18]
 800f50c:	2b02      	cmp	r3, #2
 800f50e:	d124      	bne.n	800f55a <USB_HC_StartXfer+0x86>
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	799b      	ldrb	r3, [r3, #6]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d120      	bne.n	800f55a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800f518:	69fb      	ldr	r3, [r7, #28]
 800f51a:	015a      	lsls	r2, r3, #5
 800f51c:	6a3b      	ldr	r3, [r7, #32]
 800f51e:	4413      	add	r3, r2
 800f520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f524:	68db      	ldr	r3, [r3, #12]
 800f526:	69fa      	ldr	r2, [r7, #28]
 800f528:	0151      	lsls	r1, r2, #5
 800f52a:	6a3a      	ldr	r2, [r7, #32]
 800f52c:	440a      	add	r2, r1
 800f52e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f536:	60d3      	str	r3, [r2, #12]
 800f538:	e00f      	b.n	800f55a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	791b      	ldrb	r3, [r3, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d10b      	bne.n	800f55a <USB_HC_StartXfer+0x86>
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	795b      	ldrb	r3, [r3, #5]
 800f546:	2b01      	cmp	r3, #1
 800f548:	d107      	bne.n	800f55a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	785b      	ldrb	r3, [r3, #1]
 800f54e:	4619      	mov	r1, r3
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f000 fb6b 	bl	800fc2c <USB_DoPing>
        return HAL_OK;
 800f556:	2300      	movs	r3, #0
 800f558:	e232      	b.n	800f9c0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	799b      	ldrb	r3, [r3, #6]
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d158      	bne.n	800f614 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800f562:	2301      	movs	r3, #1
 800f564:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	78db      	ldrb	r3, [r3, #3]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d007      	beq.n	800f57e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f56e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f570:	68ba      	ldr	r2, [r7, #8]
 800f572:	8a92      	ldrh	r2, [r2, #20]
 800f574:	fb03 f202 	mul.w	r2, r3, r2
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	61da      	str	r2, [r3, #28]
 800f57c:	e07c      	b.n	800f678 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	7c9b      	ldrb	r3, [r3, #18]
 800f582:	2b01      	cmp	r3, #1
 800f584:	d130      	bne.n	800f5e8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	6a1b      	ldr	r3, [r3, #32]
 800f58a:	2bbc      	cmp	r3, #188	@ 0xbc
 800f58c:	d918      	bls.n	800f5c0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	8a9b      	ldrh	r3, [r3, #20]
 800f592:	461a      	mov	r2, r3
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	69da      	ldr	r2, [r3, #28]
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d003      	beq.n	800f5b0 <USB_HC_StartXfer+0xdc>
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	2b02      	cmp	r3, #2
 800f5ae:	d103      	bne.n	800f5b8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	2202      	movs	r2, #2
 800f5b4:	60da      	str	r2, [r3, #12]
 800f5b6:	e05f      	b.n	800f678 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	60da      	str	r2, [r3, #12]
 800f5be:	e05b      	b.n	800f678 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	6a1a      	ldr	r2, [r3, #32]
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	d007      	beq.n	800f5e0 <USB_HC_StartXfer+0x10c>
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	2b02      	cmp	r3, #2
 800f5d6:	d003      	beq.n	800f5e0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	2204      	movs	r2, #4
 800f5dc:	60da      	str	r2, [r3, #12]
 800f5de:	e04b      	b.n	800f678 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	2203      	movs	r2, #3
 800f5e4:	60da      	str	r2, [r3, #12]
 800f5e6:	e047      	b.n	800f678 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800f5e8:	79fb      	ldrb	r3, [r7, #7]
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d10d      	bne.n	800f60a <USB_HC_StartXfer+0x136>
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	6a1b      	ldr	r3, [r3, #32]
 800f5f2:	68ba      	ldr	r2, [r7, #8]
 800f5f4:	8a92      	ldrh	r2, [r2, #20]
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d907      	bls.n	800f60a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f5fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f5fc:	68ba      	ldr	r2, [r7, #8]
 800f5fe:	8a92      	ldrh	r2, [r2, #20]
 800f600:	fb03 f202 	mul.w	r2, r3, r2
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	61da      	str	r2, [r3, #28]
 800f608:	e036      	b.n	800f678 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	6a1a      	ldr	r2, [r3, #32]
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	61da      	str	r2, [r3, #28]
 800f612:	e031      	b.n	800f678 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	6a1b      	ldr	r3, [r3, #32]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d018      	beq.n	800f64e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	6a1b      	ldr	r3, [r3, #32]
 800f620:	68ba      	ldr	r2, [r7, #8]
 800f622:	8a92      	ldrh	r2, [r2, #20]
 800f624:	4413      	add	r3, r2
 800f626:	3b01      	subs	r3, #1
 800f628:	68ba      	ldr	r2, [r7, #8]
 800f62a:	8a92      	ldrh	r2, [r2, #20]
 800f62c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f630:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800f632:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f634:	8b7b      	ldrh	r3, [r7, #26]
 800f636:	429a      	cmp	r2, r3
 800f638:	d90b      	bls.n	800f652 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800f63a:	8b7b      	ldrh	r3, [r7, #26]
 800f63c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f63e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f640:	68ba      	ldr	r2, [r7, #8]
 800f642:	8a92      	ldrh	r2, [r2, #20]
 800f644:	fb03 f202 	mul.w	r2, r3, r2
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	61da      	str	r2, [r3, #28]
 800f64c:	e001      	b.n	800f652 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800f64e:	2301      	movs	r3, #1
 800f650:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	78db      	ldrb	r3, [r3, #3]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d00a      	beq.n	800f670 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f65a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f65c:	68ba      	ldr	r2, [r7, #8]
 800f65e:	8a92      	ldrh	r2, [r2, #20]
 800f660:	fb03 f202 	mul.w	r2, r3, r2
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	61da      	str	r2, [r3, #28]
 800f668:	e006      	b.n	800f678 <USB_HC_StartXfer+0x1a4>
 800f66a:	bf00      	nop
 800f66c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	6a1a      	ldr	r2, [r3, #32]
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	69db      	ldr	r3, [r3, #28]
 800f67c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f680:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f682:	04d9      	lsls	r1, r3, #19
 800f684:	4ba3      	ldr	r3, [pc, #652]	@ (800f914 <USB_HC_StartXfer+0x440>)
 800f686:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f688:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	7d9b      	ldrb	r3, [r3, #22]
 800f68e:	075b      	lsls	r3, r3, #29
 800f690:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f694:	69f9      	ldr	r1, [r7, #28]
 800f696:	0148      	lsls	r0, r1, #5
 800f698:	6a39      	ldr	r1, [r7, #32]
 800f69a:	4401      	add	r1, r0
 800f69c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f6a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f6a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800f6a4:	79fb      	ldrb	r3, [r7, #7]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d009      	beq.n	800f6be <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	6999      	ldr	r1, [r3, #24]
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	015a      	lsls	r2, r3, #5
 800f6b2:	6a3b      	ldr	r3, [r7, #32]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f6ba:	460a      	mov	r2, r1
 800f6bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800f6be:	6a3b      	ldr	r3, [r7, #32]
 800f6c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f6c4:	689b      	ldr	r3, [r3, #8]
 800f6c6:	f003 0301 	and.w	r3, r3, #1
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	bf0c      	ite	eq
 800f6ce:	2301      	moveq	r3, #1
 800f6d0:	2300      	movne	r3, #0
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800f6d6:	69fb      	ldr	r3, [r7, #28]
 800f6d8:	015a      	lsls	r2, r3, #5
 800f6da:	6a3b      	ldr	r3, [r7, #32]
 800f6dc:	4413      	add	r3, r2
 800f6de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	69fa      	ldr	r2, [r7, #28]
 800f6e6:	0151      	lsls	r1, r2, #5
 800f6e8:	6a3a      	ldr	r2, [r7, #32]
 800f6ea:	440a      	add	r2, r1
 800f6ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f6f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f6f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800f6f6:	69fb      	ldr	r3, [r7, #28]
 800f6f8:	015a      	lsls	r2, r3, #5
 800f6fa:	6a3b      	ldr	r3, [r7, #32]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f702:	681a      	ldr	r2, [r3, #0]
 800f704:	7e7b      	ldrb	r3, [r7, #25]
 800f706:	075b      	lsls	r3, r3, #29
 800f708:	69f9      	ldr	r1, [r7, #28]
 800f70a:	0148      	lsls	r0, r1, #5
 800f70c:	6a39      	ldr	r1, [r7, #32]
 800f70e:	4401      	add	r1, r0
 800f710:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800f714:	4313      	orrs	r3, r2
 800f716:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	799b      	ldrb	r3, [r3, #6]
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	f040 80c3 	bne.w	800f8a8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	7c5b      	ldrb	r3, [r3, #17]
 800f726:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800f728:	68ba      	ldr	r2, [r7, #8]
 800f72a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800f72c:	4313      	orrs	r3, r2
 800f72e:	69fa      	ldr	r2, [r7, #28]
 800f730:	0151      	lsls	r1, r2, #5
 800f732:	6a3a      	ldr	r2, [r7, #32]
 800f734:	440a      	add	r2, r1
 800f736:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800f73a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800f73e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	015a      	lsls	r2, r3, #5
 800f744:	6a3b      	ldr	r3, [r7, #32]
 800f746:	4413      	add	r3, r2
 800f748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f74c:	68db      	ldr	r3, [r3, #12]
 800f74e:	69fa      	ldr	r2, [r7, #28]
 800f750:	0151      	lsls	r1, r2, #5
 800f752:	6a3a      	ldr	r2, [r7, #32]
 800f754:	440a      	add	r2, r1
 800f756:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f75a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f75e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	79db      	ldrb	r3, [r3, #7]
 800f764:	2b01      	cmp	r3, #1
 800f766:	d123      	bne.n	800f7b0 <USB_HC_StartXfer+0x2dc>
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	78db      	ldrb	r3, [r3, #3]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d11f      	bne.n	800f7b0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800f770:	69fb      	ldr	r3, [r7, #28]
 800f772:	015a      	lsls	r2, r3, #5
 800f774:	6a3b      	ldr	r3, [r7, #32]
 800f776:	4413      	add	r3, r2
 800f778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	69fa      	ldr	r2, [r7, #28]
 800f780:	0151      	lsls	r1, r2, #5
 800f782:	6a3a      	ldr	r2, [r7, #32]
 800f784:	440a      	add	r2, r1
 800f786:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f78a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f78e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	015a      	lsls	r2, r3, #5
 800f794:	6a3b      	ldr	r3, [r7, #32]
 800f796:	4413      	add	r3, r2
 800f798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f79c:	68db      	ldr	r3, [r3, #12]
 800f79e:	69fa      	ldr	r2, [r7, #28]
 800f7a0:	0151      	lsls	r1, r2, #5
 800f7a2:	6a3a      	ldr	r2, [r7, #32]
 800f7a4:	440a      	add	r2, r1
 800f7a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f7aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7ae:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	7c9b      	ldrb	r3, [r3, #18]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d003      	beq.n	800f7c0 <USB_HC_StartXfer+0x2ec>
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	7c9b      	ldrb	r3, [r3, #18]
 800f7bc:	2b03      	cmp	r3, #3
 800f7be:	d117      	bne.n	800f7f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d113      	bne.n	800f7f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	78db      	ldrb	r3, [r3, #3]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d10f      	bne.n	800f7f0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	015a      	lsls	r2, r3, #5
 800f7d4:	6a3b      	ldr	r3, [r7, #32]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	69fa      	ldr	r2, [r7, #28]
 800f7e0:	0151      	lsls	r1, r2, #5
 800f7e2:	6a3a      	ldr	r2, [r7, #32]
 800f7e4:	440a      	add	r2, r1
 800f7e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f7ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f7ee:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	7c9b      	ldrb	r3, [r3, #18]
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	d162      	bne.n	800f8be <USB_HC_StartXfer+0x3ea>
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	78db      	ldrb	r3, [r3, #3]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d15e      	bne.n	800f8be <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	3b01      	subs	r3, #1
 800f806:	2b03      	cmp	r3, #3
 800f808:	d858      	bhi.n	800f8bc <USB_HC_StartXfer+0x3e8>
 800f80a:	a201      	add	r2, pc, #4	@ (adr r2, 800f810 <USB_HC_StartXfer+0x33c>)
 800f80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f810:	0800f821 	.word	0x0800f821
 800f814:	0800f843 	.word	0x0800f843
 800f818:	0800f865 	.word	0x0800f865
 800f81c:	0800f887 	.word	0x0800f887
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	015a      	lsls	r2, r3, #5
 800f824:	6a3b      	ldr	r3, [r7, #32]
 800f826:	4413      	add	r3, r2
 800f828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	69fa      	ldr	r2, [r7, #28]
 800f830:	0151      	lsls	r1, r2, #5
 800f832:	6a3a      	ldr	r2, [r7, #32]
 800f834:	440a      	add	r2, r1
 800f836:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f83a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f83e:	6053      	str	r3, [r2, #4]
          break;
 800f840:	e03d      	b.n	800f8be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	015a      	lsls	r2, r3, #5
 800f846:	6a3b      	ldr	r3, [r7, #32]
 800f848:	4413      	add	r3, r2
 800f84a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	69fa      	ldr	r2, [r7, #28]
 800f852:	0151      	lsls	r1, r2, #5
 800f854:	6a3a      	ldr	r2, [r7, #32]
 800f856:	440a      	add	r2, r1
 800f858:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f85c:	f043 030e 	orr.w	r3, r3, #14
 800f860:	6053      	str	r3, [r2, #4]
          break;
 800f862:	e02c      	b.n	800f8be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	015a      	lsls	r2, r3, #5
 800f868:	6a3b      	ldr	r3, [r7, #32]
 800f86a:	4413      	add	r3, r2
 800f86c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	69fa      	ldr	r2, [r7, #28]
 800f874:	0151      	lsls	r1, r2, #5
 800f876:	6a3a      	ldr	r2, [r7, #32]
 800f878:	440a      	add	r2, r1
 800f87a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f87e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f882:	6053      	str	r3, [r2, #4]
          break;
 800f884:	e01b      	b.n	800f8be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	015a      	lsls	r2, r3, #5
 800f88a:	6a3b      	ldr	r3, [r7, #32]
 800f88c:	4413      	add	r3, r2
 800f88e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	69fa      	ldr	r2, [r7, #28]
 800f896:	0151      	lsls	r1, r2, #5
 800f898:	6a3a      	ldr	r2, [r7, #32]
 800f89a:	440a      	add	r2, r1
 800f89c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f8a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f8a4:	6053      	str	r3, [r2, #4]
          break;
 800f8a6:	e00a      	b.n	800f8be <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800f8a8:	69fb      	ldr	r3, [r7, #28]
 800f8aa:	015a      	lsls	r2, r3, #5
 800f8ac:	6a3b      	ldr	r3, [r7, #32]
 800f8ae:	4413      	add	r3, r2
 800f8b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	6053      	str	r3, [r2, #4]
 800f8ba:	e000      	b.n	800f8be <USB_HC_StartXfer+0x3ea>
          break;
 800f8bc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	015a      	lsls	r2, r3, #5
 800f8c2:	6a3b      	ldr	r3, [r7, #32]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f8d4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	78db      	ldrb	r3, [r3, #3]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d004      	beq.n	800f8e8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f8e4:	613b      	str	r3, [r7, #16]
 800f8e6:	e003      	b.n	800f8f0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f8ee:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f8f6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	015a      	lsls	r2, r3, #5
 800f8fc:	6a3b      	ldr	r3, [r7, #32]
 800f8fe:	4413      	add	r3, r2
 800f900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f904:	461a      	mov	r2, r3
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800f90a:	79fb      	ldrb	r3, [r7, #7]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d003      	beq.n	800f918 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800f910:	2300      	movs	r3, #0
 800f912:	e055      	b.n	800f9c0 <USB_HC_StartXfer+0x4ec>
 800f914:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	78db      	ldrb	r3, [r3, #3]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d14e      	bne.n	800f9be <USB_HC_StartXfer+0x4ea>
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	6a1b      	ldr	r3, [r3, #32]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d04a      	beq.n	800f9be <USB_HC_StartXfer+0x4ea>
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	79db      	ldrb	r3, [r3, #7]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d146      	bne.n	800f9be <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	7c9b      	ldrb	r3, [r3, #18]
 800f934:	2b03      	cmp	r3, #3
 800f936:	d831      	bhi.n	800f99c <USB_HC_StartXfer+0x4c8>
 800f938:	a201      	add	r2, pc, #4	@ (adr r2, 800f940 <USB_HC_StartXfer+0x46c>)
 800f93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f93e:	bf00      	nop
 800f940:	0800f951 	.word	0x0800f951
 800f944:	0800f975 	.word	0x0800f975
 800f948:	0800f951 	.word	0x0800f951
 800f94c:	0800f975 	.word	0x0800f975
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	6a1b      	ldr	r3, [r3, #32]
 800f954:	3303      	adds	r3, #3
 800f956:	089b      	lsrs	r3, r3, #2
 800f958:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800f95a:	8afa      	ldrh	r2, [r7, #22]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f960:	b29b      	uxth	r3, r3
 800f962:	429a      	cmp	r2, r3
 800f964:	d91c      	bls.n	800f9a0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	699b      	ldr	r3, [r3, #24]
 800f96a:	f043 0220 	orr.w	r2, r3, #32
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	619a      	str	r2, [r3, #24]
        }
        break;
 800f972:	e015      	b.n	800f9a0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	6a1b      	ldr	r3, [r3, #32]
 800f978:	3303      	adds	r3, #3
 800f97a:	089b      	lsrs	r3, r3, #2
 800f97c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800f97e:	8afa      	ldrh	r2, [r7, #22]
 800f980:	6a3b      	ldr	r3, [r7, #32]
 800f982:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f986:	691b      	ldr	r3, [r3, #16]
 800f988:	b29b      	uxth	r3, r3
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d90a      	bls.n	800f9a4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	699b      	ldr	r3, [r3, #24]
 800f992:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	619a      	str	r2, [r3, #24]
        }
        break;
 800f99a:	e003      	b.n	800f9a4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800f99c:	bf00      	nop
 800f99e:	e002      	b.n	800f9a6 <USB_HC_StartXfer+0x4d2>
        break;
 800f9a0:	bf00      	nop
 800f9a2:	e000      	b.n	800f9a6 <USB_HC_StartXfer+0x4d2>
        break;
 800f9a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	6999      	ldr	r1, [r3, #24]
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	785a      	ldrb	r2, [r3, #1]
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	6a1b      	ldr	r3, [r3, #32]
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	9000      	str	r0, [sp, #0]
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f7ff f9cf 	bl	800ed5c <USB_WritePacket>
  }

  return HAL_OK;
 800f9be:	2300      	movs	r3, #0
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3728      	adds	r7, #40	@ 0x28
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b085      	sub	sp, #20
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f9da:	695b      	ldr	r3, [r3, #20]
 800f9dc:	b29b      	uxth	r3, r3
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3714      	adds	r7, #20
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr

0800f9ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800f9ea:	b480      	push	{r7}
 800f9ec:	b089      	sub	sp, #36	@ 0x24
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800f9fa:	78fb      	ldrb	r3, [r7, #3]
 800f9fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800fa02:	69bb      	ldr	r3, [r7, #24]
 800fa04:	015a      	lsls	r2, r3, #5
 800fa06:	69fb      	ldr	r3, [r7, #28]
 800fa08:	4413      	add	r3, r2
 800fa0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	0c9b      	lsrs	r3, r3, #18
 800fa12:	f003 0303 	and.w	r3, r3, #3
 800fa16:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	015a      	lsls	r2, r3, #5
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	4413      	add	r3, r2
 800fa20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	0fdb      	lsrs	r3, r3, #31
 800fa28:	f003 0301 	and.w	r3, r3, #1
 800fa2c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	015a      	lsls	r2, r3, #5
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	4413      	add	r3, r2
 800fa36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fa3a:	685b      	ldr	r3, [r3, #4]
 800fa3c:	0fdb      	lsrs	r3, r3, #31
 800fa3e:	f003 0301 	and.w	r3, r3, #1
 800fa42:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	689b      	ldr	r3, [r3, #8]
 800fa48:	f003 0320 	and.w	r3, r3, #32
 800fa4c:	2b20      	cmp	r3, #32
 800fa4e:	d10d      	bne.n	800fa6c <USB_HC_Halt+0x82>
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d10a      	bne.n	800fa6c <USB_HC_Halt+0x82>
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d005      	beq.n	800fa68 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d002      	beq.n	800fa68 <USB_HC_Halt+0x7e>
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	2b03      	cmp	r3, #3
 800fa66:	d101      	bne.n	800fa6c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	e0d8      	b.n	800fc1e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d002      	beq.n	800fa78 <USB_HC_Halt+0x8e>
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	2b02      	cmp	r3, #2
 800fa76:	d173      	bne.n	800fb60 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800fa78:	69bb      	ldr	r3, [r7, #24]
 800fa7a:	015a      	lsls	r2, r3, #5
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	4413      	add	r3, r2
 800fa80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	69ba      	ldr	r2, [r7, #24]
 800fa88:	0151      	lsls	r1, r2, #5
 800fa8a:	69fa      	ldr	r2, [r7, #28]
 800fa8c:	440a      	add	r2, r1
 800fa8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fa92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fa96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	689b      	ldr	r3, [r3, #8]
 800fa9c:	f003 0320 	and.w	r3, r3, #32
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d14a      	bne.n	800fb3a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faa8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800faac:	2b00      	cmp	r3, #0
 800faae:	d133      	bne.n	800fb18 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	015a      	lsls	r2, r3, #5
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	4413      	add	r3, r2
 800fab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	69ba      	ldr	r2, [r7, #24]
 800fac0:	0151      	lsls	r1, r2, #5
 800fac2:	69fa      	ldr	r2, [r7, #28]
 800fac4:	440a      	add	r2, r1
 800fac6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800faca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800face:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fad0:	69bb      	ldr	r3, [r7, #24]
 800fad2:	015a      	lsls	r2, r3, #5
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	4413      	add	r3, r2
 800fad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	69ba      	ldr	r2, [r7, #24]
 800fae0:	0151      	lsls	r1, r2, #5
 800fae2:	69fa      	ldr	r2, [r7, #28]
 800fae4:	440a      	add	r2, r1
 800fae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800faea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800faee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	3301      	adds	r3, #1
 800faf4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fafc:	d82e      	bhi.n	800fb5c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fafe:	69bb      	ldr	r3, [r7, #24]
 800fb00:	015a      	lsls	r2, r3, #5
 800fb02:	69fb      	ldr	r3, [r7, #28]
 800fb04:	4413      	add	r3, r2
 800fb06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fb10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fb14:	d0ec      	beq.n	800faf0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fb16:	e081      	b.n	800fc1c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fb18:	69bb      	ldr	r3, [r7, #24]
 800fb1a:	015a      	lsls	r2, r3, #5
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	4413      	add	r3, r2
 800fb20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	69ba      	ldr	r2, [r7, #24]
 800fb28:	0151      	lsls	r1, r2, #5
 800fb2a:	69fa      	ldr	r2, [r7, #28]
 800fb2c:	440a      	add	r2, r1
 800fb2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fb32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800fb36:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fb38:	e070      	b.n	800fc1c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fb3a:	69bb      	ldr	r3, [r7, #24]
 800fb3c:	015a      	lsls	r2, r3, #5
 800fb3e:	69fb      	ldr	r3, [r7, #28]
 800fb40:	4413      	add	r3, r2
 800fb42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	69ba      	ldr	r2, [r7, #24]
 800fb4a:	0151      	lsls	r1, r2, #5
 800fb4c:	69fa      	ldr	r2, [r7, #28]
 800fb4e:	440a      	add	r2, r1
 800fb50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fb54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800fb58:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fb5a:	e05f      	b.n	800fc1c <USB_HC_Halt+0x232>
            break;
 800fb5c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fb5e:	e05d      	b.n	800fc1c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800fb60:	69bb      	ldr	r3, [r7, #24]
 800fb62:	015a      	lsls	r2, r3, #5
 800fb64:	69fb      	ldr	r3, [r7, #28]
 800fb66:	4413      	add	r3, r2
 800fb68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	69ba      	ldr	r2, [r7, #24]
 800fb70:	0151      	lsls	r1, r2, #5
 800fb72:	69fa      	ldr	r2, [r7, #28]
 800fb74:	440a      	add	r2, r1
 800fb76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fb7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fb7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fb86:	691b      	ldr	r3, [r3, #16]
 800fb88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d133      	bne.n	800fbf8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800fb90:	69bb      	ldr	r3, [r7, #24]
 800fb92:	015a      	lsls	r2, r3, #5
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	4413      	add	r3, r2
 800fb98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	69ba      	ldr	r2, [r7, #24]
 800fba0:	0151      	lsls	r1, r2, #5
 800fba2:	69fa      	ldr	r2, [r7, #28]
 800fba4:	440a      	add	r2, r1
 800fba6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fbaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fbae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fbb0:	69bb      	ldr	r3, [r7, #24]
 800fbb2:	015a      	lsls	r2, r3, #5
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	69ba      	ldr	r2, [r7, #24]
 800fbc0:	0151      	lsls	r1, r2, #5
 800fbc2:	69fa      	ldr	r2, [r7, #28]
 800fbc4:	440a      	add	r2, r1
 800fbc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fbca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800fbce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fbdc:	d81d      	bhi.n	800fc1a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fbde:	69bb      	ldr	r3, [r7, #24]
 800fbe0:	015a      	lsls	r2, r3, #5
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fbf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fbf4:	d0ec      	beq.n	800fbd0 <USB_HC_Halt+0x1e6>
 800fbf6:	e011      	b.n	800fc1c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fbf8:	69bb      	ldr	r3, [r7, #24]
 800fbfa:	015a      	lsls	r2, r3, #5
 800fbfc:	69fb      	ldr	r3, [r7, #28]
 800fbfe:	4413      	add	r3, r2
 800fc00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	69ba      	ldr	r2, [r7, #24]
 800fc08:	0151      	lsls	r1, r2, #5
 800fc0a:	69fa      	ldr	r2, [r7, #28]
 800fc0c:	440a      	add	r2, r1
 800fc0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fc12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800fc16:	6013      	str	r3, [r2, #0]
 800fc18:	e000      	b.n	800fc1c <USB_HC_Halt+0x232>
          break;
 800fc1a:	bf00      	nop
    }
  }

  return HAL_OK;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3724      	adds	r7, #36	@ 0x24
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr
	...

0800fc2c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b087      	sub	sp, #28
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	460b      	mov	r3, r1
 800fc36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800fc3c:	78fb      	ldrb	r3, [r7, #3]
 800fc3e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800fc40:	2301      	movs	r3, #1
 800fc42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	04da      	lsls	r2, r3, #19
 800fc48:	4b15      	ldr	r3, [pc, #84]	@ (800fca0 <USB_DoPing+0x74>)
 800fc4a:	4013      	ands	r3, r2
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	0151      	lsls	r1, r2, #5
 800fc50:	697a      	ldr	r2, [r7, #20]
 800fc52:	440a      	add	r2, r1
 800fc54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fc58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800fc5c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	015a      	lsls	r2, r3, #5
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	4413      	add	r3, r2
 800fc66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800fc74:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800fc7c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	015a      	lsls	r2, r3, #5
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	4413      	add	r3, r2
 800fc86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800fc90:	2300      	movs	r3, #0
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	371c      	adds	r7, #28
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr
 800fc9e:	bf00      	nop
 800fca0:	1ff80000 	.word	0x1ff80000

0800fca4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b088      	sub	sp, #32
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800fcac:	2300      	movs	r3, #0
 800fcae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f7fe ff92 	bl	800ebe2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fcbe:	2110      	movs	r1, #16
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f7fe ffeb 	bl	800ec9c <USB_FlushTxFifo>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d001      	beq.n	800fcd0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800fccc:	2301      	movs	r3, #1
 800fcce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f7ff f815 	bl	800ed00 <USB_FlushRxFifo>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d001      	beq.n	800fce0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800fce0:	2300      	movs	r3, #0
 800fce2:	61bb      	str	r3, [r7, #24]
 800fce4:	e01f      	b.n	800fd26 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800fce6:	69bb      	ldr	r3, [r7, #24]
 800fce8:	015a      	lsls	r2, r3, #5
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	4413      	add	r3, r2
 800fcee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fcfc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fd0c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	015a      	lsls	r2, r3, #5
 800fd12:	697b      	ldr	r3, [r7, #20]
 800fd14:	4413      	add	r3, r2
 800fd16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800fd20:	69bb      	ldr	r3, [r7, #24]
 800fd22:	3301      	adds	r3, #1
 800fd24:	61bb      	str	r3, [r7, #24]
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	2b0f      	cmp	r3, #15
 800fd2a:	d9dc      	bls.n	800fce6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	61bb      	str	r3, [r7, #24]
 800fd30:	e034      	b.n	800fd9c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800fd32:	69bb      	ldr	r3, [r7, #24]
 800fd34:	015a      	lsls	r2, r3, #5
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	4413      	add	r3, r2
 800fd3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fd48:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800fd50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fd58:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800fd5a:	69bb      	ldr	r3, [r7, #24]
 800fd5c:	015a      	lsls	r2, r3, #5
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	4413      	add	r3, r2
 800fd62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fd66:	461a      	mov	r2, r3
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	3301      	adds	r3, #1
 800fd70:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fd78:	d80c      	bhi.n	800fd94 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fd7a:	69bb      	ldr	r3, [r7, #24]
 800fd7c:	015a      	lsls	r2, r3, #5
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	4413      	add	r3, r2
 800fd82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fd8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fd90:	d0ec      	beq.n	800fd6c <USB_StopHost+0xc8>
 800fd92:	e000      	b.n	800fd96 <USB_StopHost+0xf2>
        break;
 800fd94:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	3301      	adds	r3, #1
 800fd9a:	61bb      	str	r3, [r7, #24]
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	2b0f      	cmp	r3, #15
 800fda0:	d9c7      	bls.n	800fd32 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fda8:	461a      	mov	r2, r3
 800fdaa:	f04f 33ff 	mov.w	r3, #4294967295
 800fdae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f04f 32ff 	mov.w	r2, #4294967295
 800fdb6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f7fe ff01 	bl	800ebc0 <USB_EnableGlobalInt>

  return ret;
 800fdbe:	7ffb      	ldrb	r3, [r7, #31]
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3720      	adds	r7, #32
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fdcc:	4904      	ldr	r1, [pc, #16]	@ (800fde0 <MX_FATFS_Init+0x18>)
 800fdce:	4805      	ldr	r0, [pc, #20]	@ (800fde4 <MX_FATFS_Init+0x1c>)
 800fdd0:	f002 fc64 	bl	801269c <FATFS_LinkDriver>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	4b03      	ldr	r3, [pc, #12]	@ (800fde8 <MX_FATFS_Init+0x20>)
 800fdda:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fddc:	bf00      	nop
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	20000fe4 	.word	0x20000fe4
 800fde4:	08017ed0 	.word	0x08017ed0
 800fde8:	20000fe0 	.word	0x20000fe0

0800fdec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fdf6:	f000 f87b 	bl	800fef0 <BSP_SD_IsDetected>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d001      	beq.n	800fe04 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fe00:	2302      	movs	r3, #2
 800fe02:	e012      	b.n	800fe2a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fe04:	480b      	ldr	r0, [pc, #44]	@ (800fe34 <BSP_SD_Init+0x48>)
 800fe06:	f7fa ffb7 	bl	800ad78 <HAL_SD_Init>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fe0e:	79fb      	ldrb	r3, [r7, #7]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d109      	bne.n	800fe28 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fe14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800fe18:	4806      	ldr	r0, [pc, #24]	@ (800fe34 <BSP_SD_Init+0x48>)
 800fe1a:	f7fb fbff 	bl	800b61c <HAL_SD_ConfigWideBusOperation>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d001      	beq.n	800fe28 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fe24:	2301      	movs	r3, #1
 800fe26:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fe28:	79fb      	ldrb	r3, [r7, #7]
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3708      	adds	r7, #8
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	20000924 	.word	0x20000924

0800fe38 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b086      	sub	sp, #24
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fe44:	2300      	movs	r3, #0
 800fe46:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	68ba      	ldr	r2, [r7, #8]
 800fe4c:	68f9      	ldr	r1, [r7, #12]
 800fe4e:	4806      	ldr	r0, [pc, #24]	@ (800fe68 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fe50:	f7fb f842 	bl	800aed8 <HAL_SD_ReadBlocks_DMA>
 800fe54:	4603      	mov	r3, r0
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d001      	beq.n	800fe5e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fe5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3718      	adds	r7, #24
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	20000924 	.word	0x20000924

0800fe6c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b086      	sub	sp, #24
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	68ba      	ldr	r2, [r7, #8]
 800fe80:	68f9      	ldr	r1, [r7, #12]
 800fe82:	4806      	ldr	r0, [pc, #24]	@ (800fe9c <BSP_SD_WriteBlocks_DMA+0x30>)
 800fe84:	f7fb f90a 	bl	800b09c <HAL_SD_WriteBlocks_DMA>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d001      	beq.n	800fe92 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fe8e:	2301      	movs	r3, #1
 800fe90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fe92:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3718      	adds	r7, #24
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	20000924 	.word	0x20000924

0800fea0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fea4:	4805      	ldr	r0, [pc, #20]	@ (800febc <BSP_SD_GetCardState+0x1c>)
 800fea6:	f7fb fc53 	bl	800b750 <HAL_SD_GetCardState>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b04      	cmp	r3, #4
 800feae:	bf14      	ite	ne
 800feb0:	2301      	movne	r3, #1
 800feb2:	2300      	moveq	r3, #0
 800feb4:	b2db      	uxtb	r3, r3
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	20000924 	.word	0x20000924

0800fec0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fec8:	6879      	ldr	r1, [r7, #4]
 800feca:	4803      	ldr	r0, [pc, #12]	@ (800fed8 <BSP_SD_GetCardInfo+0x18>)
 800fecc:	f7fb fb7a 	bl	800b5c4 <HAL_SD_GetCardInfo>
}
 800fed0:	bf00      	nop
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	20000924 	.word	0x20000924

0800fedc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fee4:	f000 f9b2 	bl	801024c <BSP_SD_ReadCpltCallback>
}
 800fee8:	bf00      	nop
 800feea:	3708      	adds	r7, #8
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fef6:	2301      	movs	r3, #1
 800fef8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fefa:	f000 f80b 	bl	800ff14 <BSP_PlatformIsDetected>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d101      	bne.n	800ff08 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ff04:	2300      	movs	r3, #0
 800ff06:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ff08:	79fb      	ldrb	r3, [r7, #7]
 800ff0a:	b2db      	uxtb	r3, r3
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3708      	adds	r7, #8
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ff1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ff22:	4806      	ldr	r0, [pc, #24]	@ (800ff3c <BSP_PlatformIsDetected+0x28>)
 800ff24:	f7f6 f8e6 	bl	80060f4 <HAL_GPIO_ReadPin>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d001      	beq.n	800ff32 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ff32:	79fb      	ldrb	r3, [r7, #7]
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	40020800 	.word	0x40020800

0800ff40 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ff48:	f002 fbf4 	bl	8012734 <osKernelSysTick>
 800ff4c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ff4e:	e006      	b.n	800ff5e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ff50:	f7ff ffa6 	bl	800fea0 <BSP_SD_GetCardState>
 800ff54:	4603      	mov	r3, r0
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d101      	bne.n	800ff5e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	e009      	b.n	800ff72 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ff5e:	f002 fbe9 	bl	8012734 <osKernelSysTick>
 800ff62:	4602      	mov	r2, r0
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	1ad3      	subs	r3, r2, r3
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d8f0      	bhi.n	800ff50 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ff6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3710      	adds	r7, #16
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
	...

0800ff7c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	4603      	mov	r3, r0
 800ff84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ff86:	4b0b      	ldr	r3, [pc, #44]	@ (800ffb4 <SD_CheckStatus+0x38>)
 800ff88:	2201      	movs	r2, #1
 800ff8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ff8c:	f7ff ff88 	bl	800fea0 <BSP_SD_GetCardState>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d107      	bne.n	800ffa6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ff96:	4b07      	ldr	r3, [pc, #28]	@ (800ffb4 <SD_CheckStatus+0x38>)
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	f023 0301 	bic.w	r3, r3, #1
 800ffa0:	b2da      	uxtb	r2, r3
 800ffa2:	4b04      	ldr	r3, [pc, #16]	@ (800ffb4 <SD_CheckStatus+0x38>)
 800ffa4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ffa6:	4b03      	ldr	r3, [pc, #12]	@ (800ffb4 <SD_CheckStatus+0x38>)
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	b2db      	uxtb	r3, r3
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3708      	adds	r7, #8
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	20000051 	.word	0x20000051

0800ffb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ffb8:	b590      	push	{r4, r7, lr}
 800ffba:	b087      	sub	sp, #28
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ffc2:	4b20      	ldr	r3, [pc, #128]	@ (8010044 <SD_initialize+0x8c>)
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ffc8:	f002 fba8 	bl	801271c <osKernelRunning>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d030      	beq.n	8010034 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ffd2:	f7ff ff0b 	bl	800fdec <BSP_SD_Init>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d107      	bne.n	800ffec <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ffdc:	79fb      	ldrb	r3, [r7, #7]
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7ff ffcc 	bl	800ff7c <SD_CheckStatus>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	4b16      	ldr	r3, [pc, #88]	@ (8010044 <SD_initialize+0x8c>)
 800ffea:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ffec:	4b15      	ldr	r3, [pc, #84]	@ (8010044 <SD_initialize+0x8c>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d01e      	beq.n	8010034 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800fff6:	4b14      	ldr	r3, [pc, #80]	@ (8010048 <SD_initialize+0x90>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d10e      	bne.n	801001c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800fffe:	4b13      	ldr	r3, [pc, #76]	@ (801004c <SD_initialize+0x94>)
 8010000:	f107 0408 	add.w	r4, r7, #8
 8010004:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 801000a:	f107 0308 	add.w	r3, r7, #8
 801000e:	2100      	movs	r1, #0
 8010010:	4618      	mov	r0, r3
 8010012:	f002 fbff 	bl	8012814 <osMessageCreate>
 8010016:	4603      	mov	r3, r0
 8010018:	4a0b      	ldr	r2, [pc, #44]	@ (8010048 <SD_initialize+0x90>)
 801001a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 801001c:	4b0a      	ldr	r3, [pc, #40]	@ (8010048 <SD_initialize+0x90>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d107      	bne.n	8010034 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8010024:	4b07      	ldr	r3, [pc, #28]	@ (8010044 <SD_initialize+0x8c>)
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	b2db      	uxtb	r3, r3
 801002a:	f043 0301 	orr.w	r3, r3, #1
 801002e:	b2da      	uxtb	r2, r3
 8010030:	4b04      	ldr	r3, [pc, #16]	@ (8010044 <SD_initialize+0x8c>)
 8010032:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8010034:	4b03      	ldr	r3, [pc, #12]	@ (8010044 <SD_initialize+0x8c>)
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	b2db      	uxtb	r3, r3
}
 801003a:	4618      	mov	r0, r3
 801003c:	371c      	adds	r7, #28
 801003e:	46bd      	mov	sp, r7
 8010040:	bd90      	pop	{r4, r7, pc}
 8010042:	bf00      	nop
 8010044:	20000051 	.word	0x20000051
 8010048:	20000fe8 	.word	0x20000fe8
 801004c:	08017e64 	.word	0x08017e64

08010050 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	4603      	mov	r3, r0
 8010058:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801005a:	79fb      	ldrb	r3, [r7, #7]
 801005c:	4618      	mov	r0, r3
 801005e:	f7ff ff8d 	bl	800ff7c <SD_CheckStatus>
 8010062:	4603      	mov	r3, r0
}
 8010064:	4618      	mov	r0, r3
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b08a      	sub	sp, #40	@ 0x28
 8010070:	af00      	add	r7, sp, #0
 8010072:	60b9      	str	r1, [r7, #8]
 8010074:	607a      	str	r2, [r7, #4]
 8010076:	603b      	str	r3, [r7, #0]
 8010078:	4603      	mov	r3, r0
 801007a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 801007c:	2301      	movs	r3, #1
 801007e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010082:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010086:	f7ff ff5b 	bl	800ff40 <SD_CheckStatusWithTimeout>
 801008a:	4603      	mov	r3, r0
 801008c:	2b00      	cmp	r3, #0
 801008e:	da02      	bge.n	8010096 <SD_read+0x2a>
  {
    return res;
 8010090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010094:	e032      	b.n	80100fc <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8010096:	683a      	ldr	r2, [r7, #0]
 8010098:	6879      	ldr	r1, [r7, #4]
 801009a:	68b8      	ldr	r0, [r7, #8]
 801009c:	f7ff fecc 	bl	800fe38 <BSP_SD_ReadBlocks_DMA>
 80100a0:	4603      	mov	r3, r0
 80100a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 80100a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d124      	bne.n	80100f8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80100ae:	4b15      	ldr	r3, [pc, #84]	@ (8010104 <SD_read+0x98>)
 80100b0:	6819      	ldr	r1, [r3, #0]
 80100b2:	f107 0314 	add.w	r3, r7, #20
 80100b6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80100ba:	4618      	mov	r0, r3
 80100bc:	f002 fc12 	bl	80128e4 <osMessageGet>

    if (event.status == osEventMessage)
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	2b10      	cmp	r3, #16
 80100c4:	d118      	bne.n	80100f8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	2b01      	cmp	r3, #1
 80100ca:	d115      	bne.n	80100f8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80100cc:	f002 fb32 	bl	8012734 <osKernelSysTick>
 80100d0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80100d2:	e008      	b.n	80100e6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80100d4:	f7ff fee4 	bl	800fea0 <BSP_SD_GetCardState>
 80100d8:	4603      	mov	r3, r0
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d103      	bne.n	80100e6 <SD_read+0x7a>
              {
                res = RES_OK;
 80100de:	2300      	movs	r3, #0
 80100e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80100e4:	e008      	b.n	80100f8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80100e6:	f002 fb25 	bl	8012734 <osKernelSysTick>
 80100ea:	4602      	mov	r2, r0
 80100ec:	6a3b      	ldr	r3, [r7, #32]
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d9ed      	bls.n	80100d4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80100f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3728      	adds	r7, #40	@ 0x28
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	20000fe8 	.word	0x20000fe8

08010108 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b08a      	sub	sp, #40	@ 0x28
 801010c:	af00      	add	r7, sp, #0
 801010e:	60b9      	str	r1, [r7, #8]
 8010110:	607a      	str	r2, [r7, #4]
 8010112:	603b      	str	r3, [r7, #0]
 8010114:	4603      	mov	r3, r0
 8010116:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010118:	2301      	movs	r3, #1
 801011a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801011e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010122:	f7ff ff0d 	bl	800ff40 <SD_CheckStatusWithTimeout>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	da02      	bge.n	8010132 <SD_write+0x2a>
  {
    return res;
 801012c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010130:	e02e      	b.n	8010190 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010132:	683a      	ldr	r2, [r7, #0]
 8010134:	6879      	ldr	r1, [r7, #4]
 8010136:	68b8      	ldr	r0, [r7, #8]
 8010138:	f7ff fe98 	bl	800fe6c <BSP_SD_WriteBlocks_DMA>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d124      	bne.n	801018c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8010142:	4b15      	ldr	r3, [pc, #84]	@ (8010198 <SD_write+0x90>)
 8010144:	6819      	ldr	r1, [r3, #0]
 8010146:	f107 0314 	add.w	r3, r7, #20
 801014a:	f247 5230 	movw	r2, #30000	@ 0x7530
 801014e:	4618      	mov	r0, r3
 8010150:	f002 fbc8 	bl	80128e4 <osMessageGet>

    if (event.status == osEventMessage)
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	2b10      	cmp	r3, #16
 8010158:	d118      	bne.n	801018c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 801015a:	69bb      	ldr	r3, [r7, #24]
 801015c:	2b02      	cmp	r3, #2
 801015e:	d115      	bne.n	801018c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8010160:	f002 fae8 	bl	8012734 <osKernelSysTick>
 8010164:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8010166:	e008      	b.n	801017a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010168:	f7ff fe9a 	bl	800fea0 <BSP_SD_GetCardState>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	d103      	bne.n	801017a <SD_write+0x72>
          {
            res = RES_OK;
 8010172:	2300      	movs	r3, #0
 8010174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8010178:	e008      	b.n	801018c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 801017a:	f002 fadb 	bl	8012734 <osKernelSysTick>
 801017e:	4602      	mov	r2, r0
 8010180:	6a3b      	ldr	r3, [r7, #32]
 8010182:	1ad3      	subs	r3, r2, r3
 8010184:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010188:	4293      	cmp	r3, r2
 801018a:	d9ed      	bls.n	8010168 <SD_write+0x60>
    }

  }
#endif

  return res;
 801018c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010190:	4618      	mov	r0, r3
 8010192:	3728      	adds	r7, #40	@ 0x28
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	20000fe8 	.word	0x20000fe8

0801019c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b08c      	sub	sp, #48	@ 0x30
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	4603      	mov	r3, r0
 80101a4:	603a      	str	r2, [r7, #0]
 80101a6:	71fb      	strb	r3, [r7, #7]
 80101a8:	460b      	mov	r3, r1
 80101aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80101ac:	2301      	movs	r3, #1
 80101ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80101b2:	4b25      	ldr	r3, [pc, #148]	@ (8010248 <SD_ioctl+0xac>)
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	f003 0301 	and.w	r3, r3, #1
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d001      	beq.n	80101c4 <SD_ioctl+0x28>
 80101c0:	2303      	movs	r3, #3
 80101c2:	e03c      	b.n	801023e <SD_ioctl+0xa2>

  switch (cmd)
 80101c4:	79bb      	ldrb	r3, [r7, #6]
 80101c6:	2b03      	cmp	r3, #3
 80101c8:	d834      	bhi.n	8010234 <SD_ioctl+0x98>
 80101ca:	a201      	add	r2, pc, #4	@ (adr r2, 80101d0 <SD_ioctl+0x34>)
 80101cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101d0:	080101e1 	.word	0x080101e1
 80101d4:	080101e9 	.word	0x080101e9
 80101d8:	08010201 	.word	0x08010201
 80101dc:	0801021b 	.word	0x0801021b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80101e0:	2300      	movs	r3, #0
 80101e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80101e6:	e028      	b.n	801023a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80101e8:	f107 030c 	add.w	r3, r7, #12
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7ff fe67 	bl	800fec0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80101f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80101f8:	2300      	movs	r3, #0
 80101fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80101fe:	e01c      	b.n	801023a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010200:	f107 030c 	add.w	r3, r7, #12
 8010204:	4618      	mov	r0, r3
 8010206:	f7ff fe5b 	bl	800fec0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801020a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801020c:	b29a      	uxth	r2, r3
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010212:	2300      	movs	r3, #0
 8010214:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010218:	e00f      	b.n	801023a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801021a:	f107 030c 	add.w	r3, r7, #12
 801021e:	4618      	mov	r0, r3
 8010220:	f7ff fe4e 	bl	800fec0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010226:	0a5a      	lsrs	r2, r3, #9
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801022c:	2300      	movs	r3, #0
 801022e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010232:	e002      	b.n	801023a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010234:	2304      	movs	r3, #4
 8010236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801023a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801023e:	4618      	mov	r0, r3
 8010240:	3730      	adds	r7, #48	@ 0x30
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
 8010246:	bf00      	nop
 8010248:	20000051 	.word	0x20000051

0801024c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8010250:	4b04      	ldr	r3, [pc, #16]	@ (8010264 <BSP_SD_ReadCpltCallback+0x18>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	2200      	movs	r2, #0
 8010256:	2101      	movs	r1, #1
 8010258:	4618      	mov	r0, r3
 801025a:	f002 fb03 	bl	8012864 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 801025e:	bf00      	nop
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop
 8010264:	20000fe8 	.word	0x20000fe8

08010268 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8010268:	b590      	push	{r4, r7, lr}
 801026a:	b089      	sub	sp, #36	@ 0x24
 801026c:	af04      	add	r7, sp, #16
 801026e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8010270:	2301      	movs	r3, #1
 8010272:	2202      	movs	r2, #2
 8010274:	2102      	movs	r1, #2
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f000 fcbd 	bl	8010bf6 <USBH_FindInterface>
 801027c:	4603      	mov	r3, r0
 801027e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8010280:	7bfb      	ldrb	r3, [r7, #15]
 8010282:	2bff      	cmp	r3, #255	@ 0xff
 8010284:	d002      	beq.n	801028c <USBH_CDC_InterfaceInit+0x24>
 8010286:	7bfb      	ldrb	r3, [r7, #15]
 8010288:	2b01      	cmp	r3, #1
 801028a:	d901      	bls.n	8010290 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801028c:	2302      	movs	r3, #2
 801028e:	e13d      	b.n	801050c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8010290:	7bfb      	ldrb	r3, [r7, #15]
 8010292:	4619      	mov	r1, r3
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 fc92 	bl	8010bbe <USBH_SelectInterface>
 801029a:	4603      	mov	r3, r0
 801029c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 801029e:	7bbb      	ldrb	r3, [r7, #14]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d001      	beq.n	80102a8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80102a4:	2302      	movs	r3, #2
 80102a6:	e131      	b.n	801050c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80102ae:	2050      	movs	r0, #80	@ 0x50
 80102b0:	f005 f898 	bl	80153e4 <malloc>
 80102b4:	4603      	mov	r3, r0
 80102b6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80102be:	69db      	ldr	r3, [r3, #28]
 80102c0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d101      	bne.n	80102cc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80102c8:	2302      	movs	r3, #2
 80102ca:	e11f      	b.n	801050c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80102cc:	2250      	movs	r2, #80	@ 0x50
 80102ce:	2100      	movs	r1, #0
 80102d0:	68b8      	ldr	r0, [r7, #8]
 80102d2:	f005 f9b7 	bl	8015644 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80102d6:	7bfb      	ldrb	r3, [r7, #15]
 80102d8:	687a      	ldr	r2, [r7, #4]
 80102da:	211a      	movs	r1, #26
 80102dc:	fb01 f303 	mul.w	r3, r1, r3
 80102e0:	4413      	add	r3, r2
 80102e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	b25b      	sxtb	r3, r3
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	da15      	bge.n	801031a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80102ee:	7bfb      	ldrb	r3, [r7, #15]
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	211a      	movs	r1, #26
 80102f4:	fb01 f303 	mul.w	r3, r1, r3
 80102f8:	4413      	add	r3, r2
 80102fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80102fe:	781a      	ldrb	r2, [r3, #0]
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010304:	7bfb      	ldrb	r3, [r7, #15]
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	211a      	movs	r1, #26
 801030a:	fb01 f303 	mul.w	r3, r1, r3
 801030e:	4413      	add	r3, r2
 8010310:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8010314:	881a      	ldrh	r2, [r3, #0]
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	785b      	ldrb	r3, [r3, #1]
 801031e:	4619      	mov	r1, r3
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f002 f90c 	bl	801253e <USBH_AllocPipe>
 8010326:	4603      	mov	r3, r0
 8010328:	461a      	mov	r2, r3
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	7819      	ldrb	r1, [r3, #0]
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	7858      	ldrb	r0, [r3, #1]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010342:	68ba      	ldr	r2, [r7, #8]
 8010344:	8952      	ldrh	r2, [r2, #10]
 8010346:	9202      	str	r2, [sp, #8]
 8010348:	2203      	movs	r2, #3
 801034a:	9201      	str	r2, [sp, #4]
 801034c:	9300      	str	r3, [sp, #0]
 801034e:	4623      	mov	r3, r4
 8010350:	4602      	mov	r2, r0
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f002 f8c4 	bl	80124e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	2200      	movs	r2, #0
 801035e:	4619      	mov	r1, r3
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f004 ffb9 	bl	80152d8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8010366:	2300      	movs	r3, #0
 8010368:	2200      	movs	r2, #0
 801036a:	210a      	movs	r1, #10
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f000 fc42 	bl	8010bf6 <USBH_FindInterface>
 8010372:	4603      	mov	r3, r0
 8010374:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8010376:	7bfb      	ldrb	r3, [r7, #15]
 8010378:	2bff      	cmp	r3, #255	@ 0xff
 801037a:	d002      	beq.n	8010382 <USBH_CDC_InterfaceInit+0x11a>
 801037c:	7bfb      	ldrb	r3, [r7, #15]
 801037e:	2b01      	cmp	r3, #1
 8010380:	d901      	bls.n	8010386 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8010382:	2302      	movs	r3, #2
 8010384:	e0c2      	b.n	801050c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8010386:	7bfb      	ldrb	r3, [r7, #15]
 8010388:	687a      	ldr	r2, [r7, #4]
 801038a:	211a      	movs	r1, #26
 801038c:	fb01 f303 	mul.w	r3, r1, r3
 8010390:	4413      	add	r3, r2
 8010392:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	b25b      	sxtb	r3, r3
 801039a:	2b00      	cmp	r3, #0
 801039c:	da16      	bge.n	80103cc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801039e:	7bfb      	ldrb	r3, [r7, #15]
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	211a      	movs	r1, #26
 80103a4:	fb01 f303 	mul.w	r3, r1, r3
 80103a8:	4413      	add	r3, r2
 80103aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80103ae:	781a      	ldrb	r2, [r3, #0]
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80103b4:	7bfb      	ldrb	r3, [r7, #15]
 80103b6:	687a      	ldr	r2, [r7, #4]
 80103b8:	211a      	movs	r1, #26
 80103ba:	fb01 f303 	mul.w	r3, r1, r3
 80103be:	4413      	add	r3, r2
 80103c0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80103c4:	881a      	ldrh	r2, [r3, #0]
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	835a      	strh	r2, [r3, #26]
 80103ca:	e015      	b.n	80103f8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80103cc:	7bfb      	ldrb	r3, [r7, #15]
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	211a      	movs	r1, #26
 80103d2:	fb01 f303 	mul.w	r3, r1, r3
 80103d6:	4413      	add	r3, r2
 80103d8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80103dc:	781a      	ldrb	r2, [r3, #0]
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80103e2:	7bfb      	ldrb	r3, [r7, #15]
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	211a      	movs	r1, #26
 80103e8:	fb01 f303 	mul.w	r3, r1, r3
 80103ec:	4413      	add	r3, r2
 80103ee:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80103f2:	881a      	ldrh	r2, [r3, #0]
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80103f8:	7bfb      	ldrb	r3, [r7, #15]
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	211a      	movs	r1, #26
 80103fe:	fb01 f303 	mul.w	r3, r1, r3
 8010402:	4413      	add	r3, r2
 8010404:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	b25b      	sxtb	r3, r3
 801040c:	2b00      	cmp	r3, #0
 801040e:	da16      	bge.n	801043e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8010410:	7bfb      	ldrb	r3, [r7, #15]
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	211a      	movs	r1, #26
 8010416:	fb01 f303 	mul.w	r3, r1, r3
 801041a:	4413      	add	r3, r2
 801041c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8010420:	781a      	ldrb	r2, [r3, #0]
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010426:	7bfb      	ldrb	r3, [r7, #15]
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	211a      	movs	r1, #26
 801042c:	fb01 f303 	mul.w	r3, r1, r3
 8010430:	4413      	add	r3, r2
 8010432:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8010436:	881a      	ldrh	r2, [r3, #0]
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	835a      	strh	r2, [r3, #26]
 801043c:	e015      	b.n	801046a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801043e:	7bfb      	ldrb	r3, [r7, #15]
 8010440:	687a      	ldr	r2, [r7, #4]
 8010442:	211a      	movs	r1, #26
 8010444:	fb01 f303 	mul.w	r3, r1, r3
 8010448:	4413      	add	r3, r2
 801044a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 801044e:	781a      	ldrb	r2, [r3, #0]
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010454:	7bfb      	ldrb	r3, [r7, #15]
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	211a      	movs	r1, #26
 801045a:	fb01 f303 	mul.w	r3, r1, r3
 801045e:	4413      	add	r3, r2
 8010460:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8010464:	881a      	ldrh	r2, [r3, #0]
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	7b9b      	ldrb	r3, [r3, #14]
 801046e:	4619      	mov	r1, r3
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f002 f864 	bl	801253e <USBH_AllocPipe>
 8010476:	4603      	mov	r3, r0
 8010478:	461a      	mov	r2, r3
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	7bdb      	ldrb	r3, [r3, #15]
 8010482:	4619      	mov	r1, r3
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f002 f85a 	bl	801253e <USBH_AllocPipe>
 801048a:	4603      	mov	r3, r0
 801048c:	461a      	mov	r2, r3
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	7b59      	ldrb	r1, [r3, #13]
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	7b98      	ldrb	r0, [r3, #14]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80104a6:	68ba      	ldr	r2, [r7, #8]
 80104a8:	8b12      	ldrh	r2, [r2, #24]
 80104aa:	9202      	str	r2, [sp, #8]
 80104ac:	2202      	movs	r2, #2
 80104ae:	9201      	str	r2, [sp, #4]
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	4623      	mov	r3, r4
 80104b4:	4602      	mov	r2, r0
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f002 f812 	bl	80124e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	7b19      	ldrb	r1, [r3, #12]
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	7bd8      	ldrb	r0, [r3, #15]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80104d0:	68ba      	ldr	r2, [r7, #8]
 80104d2:	8b52      	ldrh	r2, [r2, #26]
 80104d4:	9202      	str	r2, [sp, #8]
 80104d6:	2202      	movs	r2, #2
 80104d8:	9201      	str	r2, [sp, #4]
 80104da:	9300      	str	r3, [sp, #0]
 80104dc:	4623      	mov	r3, r4
 80104de:	4602      	mov	r2, r0
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f001 fffd 	bl	80124e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	2200      	movs	r2, #0
 80104ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	7b5b      	ldrb	r3, [r3, #13]
 80104f2:	2200      	movs	r2, #0
 80104f4:	4619      	mov	r1, r3
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f004 feee 	bl	80152d8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	7b1b      	ldrb	r3, [r3, #12]
 8010500:	2200      	movs	r2, #0
 8010502:	4619      	mov	r1, r3
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f004 fee7 	bl	80152d8 <USBH_LL_SetToggle>

  return USBH_OK;
 801050a:	2300      	movs	r3, #0
}
 801050c:	4618      	mov	r0, r3
 801050e:	3714      	adds	r7, #20
 8010510:	46bd      	mov	sp, r7
 8010512:	bd90      	pop	{r4, r7, pc}

08010514 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010522:	69db      	ldr	r3, [r3, #28]
 8010524:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d00e      	beq.n	801054c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	4619      	mov	r1, r3
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f001 fff2 	bl	801251e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	4619      	mov	r1, r3
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f002 f81d 	bl	8012580 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	2200      	movs	r2, #0
 801054a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	7b1b      	ldrb	r3, [r3, #12]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00e      	beq.n	8010572 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	7b1b      	ldrb	r3, [r3, #12]
 8010558:	4619      	mov	r1, r3
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f001 ffdf 	bl	801251e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	7b1b      	ldrb	r3, [r3, #12]
 8010564:	4619      	mov	r1, r3
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f002 f80a 	bl	8012580 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2200      	movs	r2, #0
 8010570:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	7b5b      	ldrb	r3, [r3, #13]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d00e      	beq.n	8010598 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	7b5b      	ldrb	r3, [r3, #13]
 801057e:	4619      	mov	r1, r3
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f001 ffcc 	bl	801251e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	7b5b      	ldrb	r3, [r3, #13]
 801058a:	4619      	mov	r1, r3
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f001 fff7 	bl	8012580 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2200      	movs	r2, #0
 8010596:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801059e:	69db      	ldr	r3, [r3, #28]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d00b      	beq.n	80105bc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80105aa:	69db      	ldr	r3, [r3, #28]
 80105ac:	4618      	mov	r0, r3
 80105ae:	f004 ff21 	bl	80153f4 <free>
    phost->pActiveClass->pData = 0U;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80105b8:	2200      	movs	r2, #0
 80105ba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80105bc:	2300      	movs	r3, #0
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3710      	adds	r7, #16
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}

080105c6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b084      	sub	sp, #16
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80105d4:	69db      	ldr	r3, [r3, #28]
 80105d6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	3340      	adds	r3, #64	@ 0x40
 80105dc:	4619      	mov	r1, r3
 80105de:	6878      	ldr	r0, [r7, #4]
 80105e0:	f000 f8b1 	bl	8010746 <GetLineCoding>
 80105e4:	4603      	mov	r3, r0
 80105e6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80105e8:	7afb      	ldrb	r3, [r7, #11]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d105      	bne.n	80105fa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80105f4:	2102      	movs	r1, #2
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80105fa:	7afb      	ldrb	r3, [r7, #11]
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3710      	adds	r7, #16
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 801060c:	2301      	movs	r3, #1
 801060e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8010610:	2300      	movs	r3, #0
 8010612:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801061a:	69db      	ldr	r3, [r3, #28]
 801061c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8010624:	2b04      	cmp	r3, #4
 8010626:	d877      	bhi.n	8010718 <USBH_CDC_Process+0x114>
 8010628:	a201      	add	r2, pc, #4	@ (adr r2, 8010630 <USBH_CDC_Process+0x2c>)
 801062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801062e:	bf00      	nop
 8010630:	08010645 	.word	0x08010645
 8010634:	0801064b 	.word	0x0801064b
 8010638:	0801067b 	.word	0x0801067b
 801063c:	080106ef 	.word	0x080106ef
 8010640:	080106fd 	.word	0x080106fd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8010644:	2300      	movs	r3, #0
 8010646:	73fb      	strb	r3, [r7, #15]
      break;
 8010648:	e06d      	b.n	8010726 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801064e:	4619      	mov	r1, r3
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f000 f897 	bl	8010784 <SetLineCoding>
 8010656:	4603      	mov	r3, r0
 8010658:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801065a:	7bbb      	ldrb	r3, [r7, #14]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d104      	bne.n	801066a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	2202      	movs	r2, #2
 8010664:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010668:	e058      	b.n	801071c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801066a:	7bbb      	ldrb	r3, [r7, #14]
 801066c:	2b01      	cmp	r3, #1
 801066e:	d055      	beq.n	801071c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	2204      	movs	r2, #4
 8010674:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8010678:	e050      	b.n	801071c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	3340      	adds	r3, #64	@ 0x40
 801067e:	4619      	mov	r1, r3
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 f860 	bl	8010746 <GetLineCoding>
 8010686:	4603      	mov	r3, r0
 8010688:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801068a:	7bbb      	ldrb	r3, [r7, #14]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d126      	bne.n	80106de <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	2200      	movs	r2, #0
 8010694:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80106a2:	791b      	ldrb	r3, [r3, #4]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d13b      	bne.n	8010720 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80106b2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d133      	bne.n	8010720 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80106c2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d12b      	bne.n	8010720 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80106d0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d124      	bne.n	8010720 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f000 f96a 	bl	80109b0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80106dc:	e020      	b.n	8010720 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80106de:	7bbb      	ldrb	r3, [r7, #14]
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	d01d      	beq.n	8010720 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	2204      	movs	r2, #4
 80106e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80106ec:	e018      	b.n	8010720 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f000 f867 	bl	80107c2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 f8e6 	bl	80108c6 <CDC_ProcessReception>
      break;
 80106fa:	e014      	b.n	8010726 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80106fc:	2100      	movs	r1, #0
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f001 f8ff 	bl	8011902 <USBH_ClrFeature>
 8010704:	4603      	mov	r3, r0
 8010706:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010708:	7bbb      	ldrb	r3, [r7, #14]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d10a      	bne.n	8010724 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	2200      	movs	r2, #0
 8010712:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8010716:	e005      	b.n	8010724 <USBH_CDC_Process+0x120>

    default:
      break;
 8010718:	bf00      	nop
 801071a:	e004      	b.n	8010726 <USBH_CDC_Process+0x122>
      break;
 801071c:	bf00      	nop
 801071e:	e002      	b.n	8010726 <USBH_CDC_Process+0x122>
      break;
 8010720:	bf00      	nop
 8010722:	e000      	b.n	8010726 <USBH_CDC_Process+0x122>
      break;
 8010724:	bf00      	nop

  }

  return status;
 8010726:	7bfb      	ldrb	r3, [r7, #15]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3710      	adds	r7, #16
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8010738:	2300      	movs	r3, #0
}
 801073a:	4618      	mov	r0, r3
 801073c:	370c      	adds	r7, #12
 801073e:	46bd      	mov	sp, r7
 8010740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010744:	4770      	bx	lr

08010746 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8010746:	b580      	push	{r7, lr}
 8010748:	b082      	sub	sp, #8
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
 801074e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	22a1      	movs	r2, #161	@ 0xa1
 8010754:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2221      	movs	r2, #33	@ 0x21
 801075a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2207      	movs	r2, #7
 801076c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	2207      	movs	r2, #7
 8010772:	4619      	mov	r1, r3
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f001 fbf9 	bl	8011f6c <USBH_CtlReq>
 801077a:	4603      	mov	r3, r0
}
 801077c:	4618      	mov	r0, r3
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2221      	movs	r2, #33	@ 0x21
 8010792:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2220      	movs	r2, #32
 8010798:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2200      	movs	r2, #0
 801079e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2200      	movs	r2, #0
 80107a4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2207      	movs	r2, #7
 80107aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	2207      	movs	r2, #7
 80107b0:	4619      	mov	r1, r3
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f001 fbda 	bl	8011f6c <USBH_CtlReq>
 80107b8:	4603      	mov	r3, r0
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3708      	adds	r7, #8
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}

080107c2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b086      	sub	sp, #24
 80107c6:	af02      	add	r7, sp, #8
 80107c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80107d0:	69db      	ldr	r3, [r3, #28]
 80107d2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80107d4:	2300      	movs	r3, #0
 80107d6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80107de:	2b01      	cmp	r3, #1
 80107e0:	d002      	beq.n	80107e8 <CDC_ProcessTransmission+0x26>
 80107e2:	2b02      	cmp	r3, #2
 80107e4:	d023      	beq.n	801082e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80107e6:	e06a      	b.n	80108be <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107ec:	68fa      	ldr	r2, [r7, #12]
 80107ee:	8b12      	ldrh	r2, [r2, #24]
 80107f0:	4293      	cmp	r3, r2
 80107f2:	d90b      	bls.n	801080c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	69d9      	ldr	r1, [r3, #28]
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	8b1a      	ldrh	r2, [r3, #24]
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	7b5b      	ldrb	r3, [r3, #13]
 8010800:	2001      	movs	r0, #1
 8010802:	9000      	str	r0, [sp, #0]
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f001 fe28 	bl	801245a <USBH_BulkSendData>
 801080a:	e00b      	b.n	8010824 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8010814:	b29a      	uxth	r2, r3
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	7b5b      	ldrb	r3, [r3, #13]
 801081a:	2001      	movs	r0, #1
 801081c:	9000      	str	r0, [sp, #0]
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f001 fe1b 	bl	801245a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2202      	movs	r2, #2
 8010828:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 801082c:	e047      	b.n	80108be <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	7b5b      	ldrb	r3, [r3, #13]
 8010832:	4619      	mov	r1, r3
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f004 fd25 	bl	8015284 <USBH_LL_GetURBState>
 801083a:	4603      	mov	r3, r0
 801083c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801083e:	7afb      	ldrb	r3, [r7, #11]
 8010840:	2b01      	cmp	r3, #1
 8010842:	d12e      	bne.n	80108a2 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010848:	68fa      	ldr	r2, [r7, #12]
 801084a:	8b12      	ldrh	r2, [r2, #24]
 801084c:	4293      	cmp	r3, r2
 801084e:	d90e      	bls.n	801086e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010854:	68fa      	ldr	r2, [r7, #12]
 8010856:	8b12      	ldrh	r2, [r2, #24]
 8010858:	1a9a      	subs	r2, r3, r2
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	69db      	ldr	r3, [r3, #28]
 8010862:	68fa      	ldr	r2, [r7, #12]
 8010864:	8b12      	ldrh	r2, [r2, #24]
 8010866:	441a      	add	r2, r3
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	61da      	str	r2, [r3, #28]
 801086c:	e002      	b.n	8010874 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2200      	movs	r2, #0
 8010872:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010878:	2b00      	cmp	r3, #0
 801087a:	d004      	beq.n	8010886 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2201      	movs	r2, #1
 8010880:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8010884:	e006      	b.n	8010894 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2200      	movs	r2, #0
 801088a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 f87a 	bl	8010988 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8010894:	2300      	movs	r3, #0
 8010896:	2200      	movs	r2, #0
 8010898:	2104      	movs	r1, #4
 801089a:	6878      	ldr	r0, [r7, #4]
 801089c:	f000 febc 	bl	8011618 <USBH_OS_PutMessage>
      break;
 80108a0:	e00c      	b.n	80108bc <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 80108a2:	7afb      	ldrb	r3, [r7, #11]
 80108a4:	2b02      	cmp	r3, #2
 80108a6:	d109      	bne.n	80108bc <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2201      	movs	r2, #1
 80108ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 80108b0:	2300      	movs	r3, #0
 80108b2:	2200      	movs	r2, #0
 80108b4:	2104      	movs	r1, #4
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 feae 	bl	8011618 <USBH_OS_PutMessage>
      break;
 80108bc:	bf00      	nop
  }
}
 80108be:	bf00      	nop
 80108c0:	3710      	adds	r7, #16
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}

080108c6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b086      	sub	sp, #24
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80108d4:	69db      	ldr	r3, [r3, #28]
 80108d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80108d8:	2300      	movs	r3, #0
 80108da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80108e2:	2b03      	cmp	r3, #3
 80108e4:	d002      	beq.n	80108ec <CDC_ProcessReception+0x26>
 80108e6:	2b04      	cmp	r3, #4
 80108e8:	d00e      	beq.n	8010908 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80108ea:	e049      	b.n	8010980 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	6a19      	ldr	r1, [r3, #32]
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	8b5a      	ldrh	r2, [r3, #26]
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	7b1b      	ldrb	r3, [r3, #12]
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f001 fdd3 	bl	80124a4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	2204      	movs	r2, #4
 8010902:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8010906:	e03b      	b.n	8010980 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	7b1b      	ldrb	r3, [r3, #12]
 801090c:	4619      	mov	r1, r3
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f004 fcb8 	bl	8015284 <USBH_LL_GetURBState>
 8010914:	4603      	mov	r3, r0
 8010916:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8010918:	7cfb      	ldrb	r3, [r7, #19]
 801091a:	2b01      	cmp	r3, #1
 801091c:	d12f      	bne.n	801097e <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	7b1b      	ldrb	r3, [r3, #12]
 8010922:	4619      	mov	r1, r3
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f004 fc1b 	bl	8015160 <USBH_LL_GetLastXferSize>
 801092a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010930:	68fa      	ldr	r2, [r7, #12]
 8010932:	429a      	cmp	r2, r3
 8010934:	d016      	beq.n	8010964 <CDC_ProcessReception+0x9e>
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	8b5b      	ldrh	r3, [r3, #26]
 801093a:	461a      	mov	r2, r3
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	4293      	cmp	r3, r2
 8010940:	d110      	bne.n	8010964 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	1ad2      	subs	r2, r2, r3
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	6a1a      	ldr	r2, [r3, #32]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	441a      	add	r2, r3
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	2203      	movs	r2, #3
 801095e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8010962:	e006      	b.n	8010972 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	2200      	movs	r2, #0
 8010968:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f000 f815 	bl	801099c <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8010972:	2300      	movs	r3, #0
 8010974:	2200      	movs	r2, #0
 8010976:	2104      	movs	r1, #4
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f000 fe4d 	bl	8011618 <USBH_OS_PutMessage>
      break;
 801097e:	bf00      	nop
  }
}
 8010980:	bf00      	nop
 8010982:	3718      	adds	r7, #24
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8010988:	b480      	push	{r7}
 801098a:	b083      	sub	sp, #12
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010990:	bf00      	nop
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 801099c:	b480      	push	{r7}
 801099e:	b083      	sub	sp, #12
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80109a4:	bf00      	nop
 80109a6:	370c      	adds	r7, #12
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr

080109b0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80109b0:	b480      	push	{r7}
 80109b2:	b083      	sub	sp, #12
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80109b8:	bf00      	nop
 80109ba:	370c      	adds	r7, #12
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr

080109c4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80109c4:	b5b0      	push	{r4, r5, r7, lr}
 80109c6:	b090      	sub	sp, #64	@ 0x40
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	60f8      	str	r0, [r7, #12]
 80109cc:	60b9      	str	r1, [r7, #8]
 80109ce:	4613      	mov	r3, r2
 80109d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d101      	bne.n	80109dc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80109d8:	2302      	movs	r3, #2
 80109da:	e04d      	b.n	8010a78 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	79fa      	ldrb	r2, [r7, #7]
 80109e0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2200      	movs	r2, #0
 80109e8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	2200      	movs	r2, #0
 80109f0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80109f4:	68f8      	ldr	r0, [r7, #12]
 80109f6:	f000 f847 	bl	8010a88 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	2200      	movs	r2, #0
 80109fe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	2200      	movs	r2, #0
 8010a06:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2200      	movs	r2, #0
 8010a16:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d003      	beq.n	8010a28 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	68ba      	ldr	r2, [r7, #8]
 8010a24:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8010a28:	4b15      	ldr	r3, [pc, #84]	@ (8010a80 <USBH_Init+0xbc>)
 8010a2a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8010a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8010a34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010a38:	2100      	movs	r1, #0
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f001 feea 	bl	8012814 <osMessageCreate>
 8010a40:	4602      	mov	r2, r0
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8010a48:	4b0e      	ldr	r3, [pc, #56]	@ (8010a84 <USBH_Init+0xc0>)
 8010a4a:	f107 0414 	add.w	r4, r7, #20
 8010a4e:	461d      	mov	r5, r3
 8010a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010a58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8010a5c:	f107 0314 	add.w	r3, r7, #20
 8010a60:	68f9      	ldr	r1, [r7, #12]
 8010a62:	4618      	mov	r0, r3
 8010a64:	f001 fe76 	bl	8012754 <osThreadCreate>
 8010a68:	4602      	mov	r2, r0
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8010a70:	68f8      	ldr	r0, [r7, #12]
 8010a72:	f004 fac1 	bl	8014ff8 <USBH_LL_Init>

  return USBH_OK;
 8010a76:	2300      	movs	r3, #0
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3740      	adds	r7, #64	@ 0x40
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8010a80:	08017e78 	.word	0x08017e78
 8010a84:	08017e94 	.word	0x08017e94

08010a88 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b084      	sub	sp, #16
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010a90:	2300      	movs	r3, #0
 8010a92:	60fb      	str	r3, [r7, #12]
 8010a94:	e009      	b.n	8010aaa <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	33e0      	adds	r3, #224	@ 0xe0
 8010a9c:	009b      	lsls	r3, r3, #2
 8010a9e:	4413      	add	r3, r2
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	60fb      	str	r3, [r7, #12]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2b0f      	cmp	r3, #15
 8010aae:	d9f2      	bls.n	8010a96 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	60fb      	str	r3, [r7, #12]
 8010ab4:	e009      	b.n	8010aca <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8010ab6:	687a      	ldr	r2, [r7, #4]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	4413      	add	r3, r2
 8010abc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	60fb      	str	r3, [r7, #12]
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ad0:	d3f1      	bcc.n	8010ab6 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2200      	movs	r2, #0
 8010adc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2201      	movs	r2, #1
 8010af0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2240      	movs	r2, #64	@ 0x40
 8010af6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2200      	movs	r2, #0
 8010afc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2200      	movs	r2, #0
 8010b02:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2201      	movs	r2, #1
 8010b0a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2200      	movs	r2, #0
 8010b12:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	331c      	adds	r3, #28
 8010b22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010b26:	2100      	movs	r1, #0
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f004 fd8b 	bl	8015644 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b38:	2100      	movs	r1, #0
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f004 fd82 	bl	8015644 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010b46:	2212      	movs	r2, #18
 8010b48:	2100      	movs	r1, #0
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f004 fd7a 	bl	8015644 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010b56:	223e      	movs	r2, #62	@ 0x3e
 8010b58:	2100      	movs	r1, #0
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f004 fd72 	bl	8015644 <memset>

  return USBH_OK;
 8010b60:	2300      	movs	r3, #0
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3710      	adds	r7, #16
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010b6a:	b480      	push	{r7}
 8010b6c:	b085      	sub	sp, #20
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	6078      	str	r0, [r7, #4]
 8010b72:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010b74:	2300      	movs	r3, #0
 8010b76:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d016      	beq.n	8010bac <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d10e      	bne.n	8010ba6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010b8e:	1c59      	adds	r1, r3, #1
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8010b96:	687a      	ldr	r2, [r7, #4]
 8010b98:	33de      	adds	r3, #222	@ 0xde
 8010b9a:	6839      	ldr	r1, [r7, #0]
 8010b9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	73fb      	strb	r3, [r7, #15]
 8010ba4:	e004      	b.n	8010bb0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010ba6:	2302      	movs	r3, #2
 8010ba8:	73fb      	strb	r3, [r7, #15]
 8010baa:	e001      	b.n	8010bb0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010bac:	2302      	movs	r3, #2
 8010bae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3714      	adds	r7, #20
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr

08010bbe <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010bbe:	b480      	push	{r7}
 8010bc0:	b085      	sub	sp, #20
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
 8010bc6:	460b      	mov	r3, r1
 8010bc8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8010bd4:	78fa      	ldrb	r2, [r7, #3]
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d204      	bcs.n	8010be4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	78fa      	ldrb	r2, [r7, #3]
 8010bde:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8010be2:	e001      	b.n	8010be8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010be4:	2302      	movs	r3, #2
 8010be6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3714      	adds	r7, #20
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr

08010bf6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010bf6:	b480      	push	{r7}
 8010bf8:	b087      	sub	sp, #28
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	6078      	str	r0, [r7, #4]
 8010bfe:	4608      	mov	r0, r1
 8010c00:	4611      	mov	r1, r2
 8010c02:	461a      	mov	r2, r3
 8010c04:	4603      	mov	r3, r0
 8010c06:	70fb      	strb	r3, [r7, #3]
 8010c08:	460b      	mov	r3, r1
 8010c0a:	70bb      	strb	r3, [r7, #2]
 8010c0c:	4613      	mov	r3, r2
 8010c0e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010c10:	2300      	movs	r3, #0
 8010c12:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010c14:	2300      	movs	r3, #0
 8010c16:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010c1e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010c20:	e025      	b.n	8010c6e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010c22:	7dfb      	ldrb	r3, [r7, #23]
 8010c24:	221a      	movs	r2, #26
 8010c26:	fb02 f303 	mul.w	r3, r2, r3
 8010c2a:	3308      	adds	r3, #8
 8010c2c:	68fa      	ldr	r2, [r7, #12]
 8010c2e:	4413      	add	r3, r2
 8010c30:	3302      	adds	r3, #2
 8010c32:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	795b      	ldrb	r3, [r3, #5]
 8010c38:	78fa      	ldrb	r2, [r7, #3]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d002      	beq.n	8010c44 <USBH_FindInterface+0x4e>
 8010c3e:	78fb      	ldrb	r3, [r7, #3]
 8010c40:	2bff      	cmp	r3, #255	@ 0xff
 8010c42:	d111      	bne.n	8010c68 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010c48:	78ba      	ldrb	r2, [r7, #2]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d002      	beq.n	8010c54 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010c4e:	78bb      	ldrb	r3, [r7, #2]
 8010c50:	2bff      	cmp	r3, #255	@ 0xff
 8010c52:	d109      	bne.n	8010c68 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010c58:	787a      	ldrb	r2, [r7, #1]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d002      	beq.n	8010c64 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010c5e:	787b      	ldrb	r3, [r7, #1]
 8010c60:	2bff      	cmp	r3, #255	@ 0xff
 8010c62:	d101      	bne.n	8010c68 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8010c64:	7dfb      	ldrb	r3, [r7, #23]
 8010c66:	e006      	b.n	8010c76 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8010c68:	7dfb      	ldrb	r3, [r7, #23]
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010c6e:	7dfb      	ldrb	r3, [r7, #23]
 8010c70:	2b01      	cmp	r3, #1
 8010c72:	d9d6      	bls.n	8010c22 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8010c74:	23ff      	movs	r3, #255	@ 0xff
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	371c      	adds	r7, #28
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr

08010c82 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8010c82:	b580      	push	{r7, lr}
 8010c84:	b082      	sub	sp, #8
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f004 f9f0 	bl	8015070 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8010c90:	2101      	movs	r1, #1
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f004 fb09 	bl	80152aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010c98:	2300      	movs	r3, #0
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3708      	adds	r7, #8
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
	...

08010ca4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b088      	sub	sp, #32
 8010ca8:	af04      	add	r7, sp, #16
 8010caa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8010cac:	2302      	movs	r3, #2
 8010cae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	d102      	bne.n	8010cc6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2203      	movs	r2, #3
 8010cc4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	781b      	ldrb	r3, [r3, #0]
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	2b0b      	cmp	r3, #11
 8010cce:	f200 81f5 	bhi.w	80110bc <USBH_Process+0x418>
 8010cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8010cd8 <USBH_Process+0x34>)
 8010cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd8:	08010d09 	.word	0x08010d09
 8010cdc:	08010d47 	.word	0x08010d47
 8010ce0:	08010dbd 	.word	0x08010dbd
 8010ce4:	0801104b 	.word	0x0801104b
 8010ce8:	080110bd 	.word	0x080110bd
 8010cec:	08010e69 	.word	0x08010e69
 8010cf0:	08010fe5 	.word	0x08010fe5
 8010cf4:	08010eab 	.word	0x08010eab
 8010cf8:	08010ed7 	.word	0x08010ed7
 8010cfc:	08010eff 	.word	0x08010eff
 8010d00:	08010f4d 	.word	0x08010f4d
 8010d04:	08011033 	.word	0x08011033
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8010d0e:	b2db      	uxtb	r3, r3
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	f000 81d5 	beq.w	80110c0 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2201      	movs	r2, #1
 8010d1a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8010d1c:	20c8      	movs	r0, #200	@ 0xc8
 8010d1e:	f004 fb0e 	bl	801533e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f004 fa01 	bl	801512a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2200      	movs	r2, #0
 8010d34:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010d38:	2300      	movs	r3, #0
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	2101      	movs	r1, #1
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f000 fc6a 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8010d44:	e1bc      	b.n	80110c0 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d107      	bne.n	8010d62 <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2200      	movs	r2, #0
 8010d56:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2202      	movs	r2, #2
 8010d5e:	701a      	strb	r2, [r3, #0]
 8010d60:	e025      	b.n	8010dae <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8010d68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010d6c:	d914      	bls.n	8010d98 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010d74:	3301      	adds	r3, #1
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010d84:	2b03      	cmp	r3, #3
 8010d86:	d903      	bls.n	8010d90 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	220d      	movs	r2, #13
 8010d8c:	701a      	strb	r2, [r3, #0]
 8010d8e:	e00e      	b.n	8010dae <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2200      	movs	r2, #0
 8010d94:	701a      	strb	r2, [r3, #0]
 8010d96:	e00a      	b.n	8010dae <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8010d9e:	f103 020a 	add.w	r2, r3, #10
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8010da8:	200a      	movs	r0, #10
 8010daa:	f004 fac8 	bl	801533e <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010dae:	2300      	movs	r3, #0
 8010db0:	2200      	movs	r2, #0
 8010db2:	2101      	movs	r1, #1
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 fc2f 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8010dba:	e188      	b.n	80110ce <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d005      	beq.n	8010dd2 <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010dcc:	2104      	movs	r1, #4
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8010dd2:	2064      	movs	r0, #100	@ 0x64
 8010dd4:	f004 fab3 	bl	801533e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f004 f97f 	bl	80150dc <USBH_LL_GetSpeed>
 8010dde:	4603      	mov	r3, r0
 8010de0:	461a      	mov	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2205      	movs	r2, #5
 8010dec:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8010dee:	2100      	movs	r1, #0
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f001 fba4 	bl	801253e <USBH_AllocPipe>
 8010df6:	4603      	mov	r3, r0
 8010df8:	461a      	mov	r2, r3
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8010dfe:	2180      	movs	r1, #128	@ 0x80
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f001 fb9c 	bl	801253e <USBH_AllocPipe>
 8010e06:	4603      	mov	r3, r0
 8010e08:	461a      	mov	r2, r3
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	7919      	ldrb	r1, [r3, #4]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010e1e:	687a      	ldr	r2, [r7, #4]
 8010e20:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010e22:	9202      	str	r2, [sp, #8]
 8010e24:	2200      	movs	r2, #0
 8010e26:	9201      	str	r2, [sp, #4]
 8010e28:	9300      	str	r3, [sp, #0]
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2280      	movs	r2, #128	@ 0x80
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f001 fb56 	bl	80124e0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	7959      	ldrb	r1, [r3, #5]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010e48:	9202      	str	r2, [sp, #8]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	9201      	str	r2, [sp, #4]
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	4603      	mov	r3, r0
 8010e52:	2200      	movs	r2, #0
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f001 fb43 	bl	80124e0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	2101      	movs	r1, #1
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f000 fbd9 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8010e66:	e132      	b.n	80110ce <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f000 f935 	bl	80110d8 <USBH_HandleEnum>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8010e72:	7bbb      	ldrb	r3, [r7, #14]
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	f040 8124 	bne.w	80110c4 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8010e8a:	2b01      	cmp	r3, #1
 8010e8c:	d103      	bne.n	8010e96 <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2208      	movs	r2, #8
 8010e92:	701a      	strb	r2, [r3, #0]
 8010e94:	e002      	b.n	8010e9c <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2207      	movs	r2, #7
 8010e9a:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	2105      	movs	r1, #5
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 fbb8 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8010ea8:	e10c      	b.n	80110c4 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f000 8109 	beq.w	80110c8 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010ebc:	2101      	movs	r1, #1
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2208      	movs	r2, #8
 8010ec6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010ec8:	2300      	movs	r3, #0
 8010eca:	2200      	movs	r2, #0
 8010ecc:	2105      	movs	r1, #5
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f000 fba2 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8010ed4:	e0f8      	b.n	80110c8 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8010edc:	4619      	mov	r1, r3
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f000 fcc8 	bl	8011874 <USBH_SetCfg>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d102      	bne.n	8010ef0 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2209      	movs	r2, #9
 8010eee:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	2101      	movs	r1, #1
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 fb8e 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8010efc:	e0e7      	b.n	80110ce <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8010f04:	f003 0320 	and.w	r3, r3, #32
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d015      	beq.n	8010f38 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f000 fcd3 	bl	80118ba <USBH_SetFeature>
 8010f14:	4603      	mov	r3, r0
 8010f16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8010f18:	7bbb      	ldrb	r3, [r7, #14]
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d103      	bne.n	8010f28 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	220a      	movs	r2, #10
 8010f24:	701a      	strb	r2, [r3, #0]
 8010f26:	e00a      	b.n	8010f3e <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8010f28:	7bbb      	ldrb	r3, [r7, #14]
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	2b03      	cmp	r3, #3
 8010f2e:	d106      	bne.n	8010f3e <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	220a      	movs	r2, #10
 8010f34:	701a      	strb	r2, [r3, #0]
 8010f36:	e002      	b.n	8010f3e <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	220a      	movs	r2, #10
 8010f3c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010f3e:	2300      	movs	r3, #0
 8010f40:	2200      	movs	r2, #0
 8010f42:	2101      	movs	r1, #1
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 fb67 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8010f4a:	e0c0      	b.n	80110ce <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d03f      	beq.n	8010fd6 <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010f5e:	2300      	movs	r3, #0
 8010f60:	73fb      	strb	r3, [r7, #15]
 8010f62:	e016      	b.n	8010f92 <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8010f64:	7bfa      	ldrb	r2, [r7, #15]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	32de      	adds	r2, #222	@ 0xde
 8010f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f6e:	791a      	ldrb	r2, [r3, #4]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d108      	bne.n	8010f8c <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 8010f7a:	7bfa      	ldrb	r2, [r7, #15]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	32de      	adds	r2, #222	@ 0xde
 8010f80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8010f8a:	e005      	b.n	8010f98 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010f8c:	7bfb      	ldrb	r3, [r7, #15]
 8010f8e:	3301      	adds	r3, #1
 8010f90:	73fb      	strb	r3, [r7, #15]
 8010f92:	7bfb      	ldrb	r3, [r7, #15]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d0e5      	beq.n	8010f64 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d016      	beq.n	8010fd0 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010fa8:	689b      	ldr	r3, [r3, #8]
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	4798      	blx	r3
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d109      	bne.n	8010fc8 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2206      	movs	r2, #6
 8010fb8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010fc0:	2103      	movs	r1, #3
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	4798      	blx	r3
 8010fc6:	e006      	b.n	8010fd6 <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	220d      	movs	r2, #13
 8010fcc:	701a      	strb	r2, [r3, #0]
 8010fce:	e002      	b.n	8010fd6 <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	220d      	movs	r2, #13
 8010fd4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	2200      	movs	r2, #0
 8010fda:	2105      	movs	r1, #5
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f000 fb1b 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8010fe2:	e074      	b.n	80110ce <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d017      	beq.n	801101e <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010ff4:	691b      	ldr	r3, [r3, #16]
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	4798      	blx	r3
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8010ffe:	7bbb      	ldrb	r3, [r7, #14]
 8011000:	b2db      	uxtb	r3, r3
 8011002:	2b00      	cmp	r3, #0
 8011004:	d103      	bne.n	801100e <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	220b      	movs	r2, #11
 801100a:	701a      	strb	r2, [r3, #0]
 801100c:	e00a      	b.n	8011024 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 801100e:	7bbb      	ldrb	r3, [r7, #14]
 8011010:	b2db      	uxtb	r3, r3
 8011012:	2b02      	cmp	r3, #2
 8011014:	d106      	bne.n	8011024 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	220d      	movs	r2, #13
 801101a:	701a      	strb	r2, [r3, #0]
 801101c:	e002      	b.n	8011024 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	220d      	movs	r2, #13
 8011022:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8011024:	2300      	movs	r3, #0
 8011026:	2200      	movs	r2, #0
 8011028:	2105      	movs	r1, #5
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f000 faf4 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8011030:	e04d      	b.n	80110ce <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011038:	2b00      	cmp	r3, #0
 801103a:	d047      	beq.n	80110cc <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011042:	695b      	ldr	r3, [r3, #20]
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	4798      	blx	r3
      }
      break;
 8011048:	e040      	b.n	80110cc <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2200      	movs	r2, #0
 801104e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7ff fd18 	bl	8010a88 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801105e:	2b00      	cmp	r3, #0
 8011060:	d009      	beq.n	8011076 <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2200      	movs	r2, #0
 8011072:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801107c:	2b00      	cmp	r3, #0
 801107e:	d005      	beq.n	801108c <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011086:	2105      	movs	r1, #5
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8011092:	b2db      	uxtb	r3, r3
 8011094:	2b01      	cmp	r3, #1
 8011096:	d107      	bne.n	80110a8 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2200      	movs	r2, #0
 801109c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f7ff fdee 	bl	8010c82 <USBH_Start>
 80110a6:	e002      	b.n	80110ae <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f003 ffe1 	bl	8015070 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80110ae:	2300      	movs	r3, #0
 80110b0:	2200      	movs	r2, #0
 80110b2:	2101      	movs	r1, #1
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f000 faaf 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80110ba:	e008      	b.n	80110ce <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 80110bc:	bf00      	nop
 80110be:	e006      	b.n	80110ce <USBH_Process+0x42a>
      break;
 80110c0:	bf00      	nop
 80110c2:	e004      	b.n	80110ce <USBH_Process+0x42a>
      break;
 80110c4:	bf00      	nop
 80110c6:	e002      	b.n	80110ce <USBH_Process+0x42a>
    break;
 80110c8:	bf00      	nop
 80110ca:	e000      	b.n	80110ce <USBH_Process+0x42a>
      break;
 80110cc:	bf00      	nop
  }
  return USBH_OK;
 80110ce:	2300      	movs	r3, #0
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b088      	sub	sp, #32
 80110dc:	af04      	add	r7, sp, #16
 80110de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80110e0:	2301      	movs	r3, #1
 80110e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80110e4:	2301      	movs	r3, #1
 80110e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	785b      	ldrb	r3, [r3, #1]
 80110ec:	2b07      	cmp	r3, #7
 80110ee:	f200 81db 	bhi.w	80114a8 <USBH_HandleEnum+0x3d0>
 80110f2:	a201      	add	r2, pc, #4	@ (adr r2, 80110f8 <USBH_HandleEnum+0x20>)
 80110f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f8:	08011119 	.word	0x08011119
 80110fc:	080111d3 	.word	0x080111d3
 8011100:	0801123d 	.word	0x0801123d
 8011104:	080112c7 	.word	0x080112c7
 8011108:	08011331 	.word	0x08011331
 801110c:	080113a1 	.word	0x080113a1
 8011110:	0801140b 	.word	0x0801140b
 8011114:	08011469 	.word	0x08011469
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8011118:	2108      	movs	r1, #8
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 fac7 	bl	80116ae <USBH_Get_DevDesc>
 8011120:	4603      	mov	r3, r0
 8011122:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011124:	7bbb      	ldrb	r3, [r7, #14]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d12e      	bne.n	8011188 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2201      	movs	r2, #1
 8011138:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	7919      	ldrb	r1, [r3, #4]
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801114a:	687a      	ldr	r2, [r7, #4]
 801114c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801114e:	9202      	str	r2, [sp, #8]
 8011150:	2200      	movs	r2, #0
 8011152:	9201      	str	r2, [sp, #4]
 8011154:	9300      	str	r3, [sp, #0]
 8011156:	4603      	mov	r3, r0
 8011158:	2280      	movs	r2, #128	@ 0x80
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	f001 f9c0 	bl	80124e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	7959      	ldrb	r1, [r3, #5]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011174:	9202      	str	r2, [sp, #8]
 8011176:	2200      	movs	r2, #0
 8011178:	9201      	str	r2, [sp, #4]
 801117a:	9300      	str	r3, [sp, #0]
 801117c:	4603      	mov	r3, r0
 801117e:	2200      	movs	r2, #0
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f001 f9ad 	bl	80124e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8011186:	e191      	b.n	80114ac <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011188:	7bbb      	ldrb	r3, [r7, #14]
 801118a:	2b03      	cmp	r3, #3
 801118c:	f040 818e 	bne.w	80114ac <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011196:	3301      	adds	r3, #1
 8011198:	b2da      	uxtb	r2, r3
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80111a6:	2b03      	cmp	r3, #3
 80111a8:	d903      	bls.n	80111b2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	220d      	movs	r2, #13
 80111ae:	701a      	strb	r2, [r3, #0]
      break;
 80111b0:	e17c      	b.n	80114ac <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	795b      	ldrb	r3, [r3, #5]
 80111b6:	4619      	mov	r1, r3
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f001 f9e1 	bl	8012580 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	791b      	ldrb	r3, [r3, #4]
 80111c2:	4619      	mov	r1, r3
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f001 f9db 	bl	8012580 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2200      	movs	r2, #0
 80111ce:	701a      	strb	r2, [r3, #0]
      break;
 80111d0:	e16c      	b.n	80114ac <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80111d2:	2112      	movs	r1, #18
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 fa6a 	bl	80116ae <USBH_Get_DevDesc>
 80111da:	4603      	mov	r3, r0
 80111dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80111de:	7bbb      	ldrb	r3, [r7, #14]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d103      	bne.n	80111ec <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2202      	movs	r2, #2
 80111e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80111ea:	e161      	b.n	80114b0 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80111ec:	7bbb      	ldrb	r3, [r7, #14]
 80111ee:	2b03      	cmp	r3, #3
 80111f0:	f040 815e 	bne.w	80114b0 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80111fa:	3301      	adds	r3, #1
 80111fc:	b2da      	uxtb	r2, r3
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801120a:	2b03      	cmp	r3, #3
 801120c:	d903      	bls.n	8011216 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	220d      	movs	r2, #13
 8011212:	701a      	strb	r2, [r3, #0]
      break;
 8011214:	e14c      	b.n	80114b0 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	795b      	ldrb	r3, [r3, #5]
 801121a:	4619      	mov	r1, r3
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f001 f9af 	bl	8012580 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	791b      	ldrb	r3, [r3, #4]
 8011226:	4619      	mov	r1, r3
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f001 f9a9 	bl	8012580 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2200      	movs	r2, #0
 8011232:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2200      	movs	r2, #0
 8011238:	701a      	strb	r2, [r3, #0]
      break;
 801123a:	e139      	b.n	80114b0 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 801123c:	2101      	movs	r1, #1
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 faf4 	bl	801182c <USBH_SetAddress>
 8011244:	4603      	mov	r3, r0
 8011246:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011248:	7bbb      	ldrb	r3, [r7, #14]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d130      	bne.n	80112b0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 801124e:	2002      	movs	r0, #2
 8011250:	f004 f875 	bl	801533e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2201      	movs	r2, #1
 8011258:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2203      	movs	r2, #3
 8011260:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	7919      	ldrb	r1, [r3, #4]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8011276:	9202      	str	r2, [sp, #8]
 8011278:	2200      	movs	r2, #0
 801127a:	9201      	str	r2, [sp, #4]
 801127c:	9300      	str	r3, [sp, #0]
 801127e:	4603      	mov	r3, r0
 8011280:	2280      	movs	r2, #128	@ 0x80
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f001 f92c 	bl	80124e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	7959      	ldrb	r1, [r3, #5]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011298:	687a      	ldr	r2, [r7, #4]
 801129a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801129c:	9202      	str	r2, [sp, #8]
 801129e:	2200      	movs	r2, #0
 80112a0:	9201      	str	r2, [sp, #4]
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	4603      	mov	r3, r0
 80112a6:	2200      	movs	r2, #0
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f001 f919 	bl	80124e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80112ae:	e101      	b.n	80114b4 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80112b0:	7bbb      	ldrb	r3, [r7, #14]
 80112b2:	2b03      	cmp	r3, #3
 80112b4:	f040 80fe 	bne.w	80114b4 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	220d      	movs	r2, #13
 80112bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2200      	movs	r2, #0
 80112c2:	705a      	strb	r2, [r3, #1]
      break;
 80112c4:	e0f6      	b.n	80114b4 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80112c6:	2109      	movs	r1, #9
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f000 fa1c 	bl	8011706 <USBH_Get_CfgDesc>
 80112ce:	4603      	mov	r3, r0
 80112d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80112d2:	7bbb      	ldrb	r3, [r7, #14]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d103      	bne.n	80112e0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2204      	movs	r2, #4
 80112dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80112de:	e0eb      	b.n	80114b8 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80112e0:	7bbb      	ldrb	r3, [r7, #14]
 80112e2:	2b03      	cmp	r3, #3
 80112e4:	f040 80e8 	bne.w	80114b8 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80112ee:	3301      	adds	r3, #1
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80112fe:	2b03      	cmp	r3, #3
 8011300:	d903      	bls.n	801130a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	220d      	movs	r2, #13
 8011306:	701a      	strb	r2, [r3, #0]
      break;
 8011308:	e0d6      	b.n	80114b8 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	795b      	ldrb	r3, [r3, #5]
 801130e:	4619      	mov	r1, r3
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f001 f935 	bl	8012580 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	791b      	ldrb	r3, [r3, #4]
 801131a:	4619      	mov	r1, r3
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f001 f92f 	bl	8012580 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	701a      	strb	r2, [r3, #0]
      break;
 801132e:	e0c3      	b.n	80114b8 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8011336:	4619      	mov	r1, r3
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f000 f9e4 	bl	8011706 <USBH_Get_CfgDesc>
 801133e:	4603      	mov	r3, r0
 8011340:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011342:	7bbb      	ldrb	r3, [r7, #14]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d103      	bne.n	8011350 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2205      	movs	r2, #5
 801134c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801134e:	e0b5      	b.n	80114bc <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011350:	7bbb      	ldrb	r3, [r7, #14]
 8011352:	2b03      	cmp	r3, #3
 8011354:	f040 80b2 	bne.w	80114bc <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801135e:	3301      	adds	r3, #1
 8011360:	b2da      	uxtb	r2, r3
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801136e:	2b03      	cmp	r3, #3
 8011370:	d903      	bls.n	801137a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	220d      	movs	r2, #13
 8011376:	701a      	strb	r2, [r3, #0]
      break;
 8011378:	e0a0      	b.n	80114bc <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	795b      	ldrb	r3, [r3, #5]
 801137e:	4619      	mov	r1, r3
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f001 f8fd 	bl	8012580 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	791b      	ldrb	r3, [r3, #4]
 801138a:	4619      	mov	r1, r3
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f001 f8f7 	bl	8012580 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2200      	movs	r2, #0
 8011396:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2200      	movs	r2, #0
 801139c:	701a      	strb	r2, [r3, #0]
      break;
 801139e:	e08d      	b.n	80114bc <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d025      	beq.n	80113f6 <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80113b6:	23ff      	movs	r3, #255	@ 0xff
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f000 f9ce 	bl	801175a <USBH_Get_StringDesc>
 80113be:	4603      	mov	r3, r0
 80113c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80113c2:	7bbb      	ldrb	r3, [r7, #14]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d109      	bne.n	80113dc <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2206      	movs	r2, #6
 80113cc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80113ce:	2300      	movs	r3, #0
 80113d0:	2200      	movs	r2, #0
 80113d2:	2105      	movs	r1, #5
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f000 f91f 	bl	8011618 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80113da:	e071      	b.n	80114c0 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80113dc:	7bbb      	ldrb	r3, [r7, #14]
 80113de:	2b03      	cmp	r3, #3
 80113e0:	d16e      	bne.n	80114c0 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2206      	movs	r2, #6
 80113e6:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80113e8:	2300      	movs	r3, #0
 80113ea:	2200      	movs	r2, #0
 80113ec:	2105      	movs	r1, #5
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f000 f912 	bl	8011618 <USBH_OS_PutMessage>
      break;
 80113f4:	e064      	b.n	80114c0 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2206      	movs	r2, #6
 80113fa:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80113fc:	2300      	movs	r3, #0
 80113fe:	2200      	movs	r2, #0
 8011400:	2105      	movs	r1, #5
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f000 f908 	bl	8011618 <USBH_OS_PutMessage>
      break;
 8011408:	e05a      	b.n	80114c0 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8011410:	2b00      	cmp	r3, #0
 8011412:	d01f      	beq.n	8011454 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8011420:	23ff      	movs	r3, #255	@ 0xff
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f000 f999 	bl	801175a <USBH_Get_StringDesc>
 8011428:	4603      	mov	r3, r0
 801142a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801142c:	7bbb      	ldrb	r3, [r7, #14]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d103      	bne.n	801143a <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2207      	movs	r2, #7
 8011436:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8011438:	e044      	b.n	80114c4 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801143a:	7bbb      	ldrb	r3, [r7, #14]
 801143c:	2b03      	cmp	r3, #3
 801143e:	d141      	bne.n	80114c4 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2207      	movs	r2, #7
 8011444:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8011446:	2300      	movs	r3, #0
 8011448:	2200      	movs	r2, #0
 801144a:	2105      	movs	r1, #5
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f000 f8e3 	bl	8011618 <USBH_OS_PutMessage>
      break;
 8011452:	e037      	b.n	80114c4 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2207      	movs	r2, #7
 8011458:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801145a:	2300      	movs	r3, #0
 801145c:	2200      	movs	r2, #0
 801145e:	2105      	movs	r1, #5
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f000 f8d9 	bl	8011618 <USBH_OS_PutMessage>
      break;
 8011466:	e02d      	b.n	80114c4 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 801146e:	2b00      	cmp	r3, #0
 8011470:	d017      	beq.n	80114a2 <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801147e:	23ff      	movs	r3, #255	@ 0xff
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f000 f96a 	bl	801175a <USBH_Get_StringDesc>
 8011486:	4603      	mov	r3, r0
 8011488:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801148a:	7bbb      	ldrb	r3, [r7, #14]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d102      	bne.n	8011496 <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8011490:	2300      	movs	r3, #0
 8011492:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8011494:	e018      	b.n	80114c8 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011496:	7bbb      	ldrb	r3, [r7, #14]
 8011498:	2b03      	cmp	r3, #3
 801149a:	d115      	bne.n	80114c8 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 801149c:	2300      	movs	r3, #0
 801149e:	73fb      	strb	r3, [r7, #15]
      break;
 80114a0:	e012      	b.n	80114c8 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 80114a2:	2300      	movs	r3, #0
 80114a4:	73fb      	strb	r3, [r7, #15]
      break;
 80114a6:	e00f      	b.n	80114c8 <USBH_HandleEnum+0x3f0>

    default:
      break;
 80114a8:	bf00      	nop
 80114aa:	e00e      	b.n	80114ca <USBH_HandleEnum+0x3f2>
      break;
 80114ac:	bf00      	nop
 80114ae:	e00c      	b.n	80114ca <USBH_HandleEnum+0x3f2>
      break;
 80114b0:	bf00      	nop
 80114b2:	e00a      	b.n	80114ca <USBH_HandleEnum+0x3f2>
      break;
 80114b4:	bf00      	nop
 80114b6:	e008      	b.n	80114ca <USBH_HandleEnum+0x3f2>
      break;
 80114b8:	bf00      	nop
 80114ba:	e006      	b.n	80114ca <USBH_HandleEnum+0x3f2>
      break;
 80114bc:	bf00      	nop
 80114be:	e004      	b.n	80114ca <USBH_HandleEnum+0x3f2>
      break;
 80114c0:	bf00      	nop
 80114c2:	e002      	b.n	80114ca <USBH_HandleEnum+0x3f2>
      break;
 80114c4:	bf00      	nop
 80114c6:	e000      	b.n	80114ca <USBH_HandleEnum+0x3f2>
      break;
 80114c8:	bf00      	nop
  }
  return Status;
 80114ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	3710      	adds	r7, #16
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}

080114d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80114d4:	b480      	push	{r7}
 80114d6:	b083      	sub	sp, #12
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	683a      	ldr	r2, [r7, #0]
 80114e2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80114e6:	bf00      	nop
 80114e8:	370c      	adds	r7, #12
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr

080114f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80114f2:	b580      	push	{r7, lr}
 80114f4:	b082      	sub	sp, #8
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011500:	1c5a      	adds	r2, r3, #1
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f000 f804 	bl	8011516 <USBH_HandleSof>
}
 801150e:	bf00      	nop
 8011510:	3708      	adds	r7, #8
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}

08011516 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8011516:	b580      	push	{r7, lr}
 8011518:	b082      	sub	sp, #8
 801151a:	af00      	add	r7, sp, #0
 801151c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	781b      	ldrb	r3, [r3, #0]
 8011522:	b2db      	uxtb	r3, r3
 8011524:	2b0b      	cmp	r3, #11
 8011526:	d10a      	bne.n	801153e <USBH_HandleSof+0x28>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801152e:	2b00      	cmp	r3, #0
 8011530:	d005      	beq.n	801153e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011538:	699b      	ldr	r3, [r3, #24]
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	4798      	blx	r3
  }
}
 801153e:	bf00      	nop
 8011540:	3708      	adds	r7, #8
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}

08011546 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8011546:	b580      	push	{r7, lr}
 8011548:	b082      	sub	sp, #8
 801154a:	af00      	add	r7, sp, #0
 801154c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2201      	movs	r2, #1
 8011552:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011556:	2300      	movs	r3, #0
 8011558:	2200      	movs	r2, #0
 801155a:	2101      	movs	r1, #1
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f000 f85b 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8011562:	bf00      	nop
}
 8011564:	3708      	adds	r7, #8
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801156a:	b480      	push	{r7}
 801156c:	b083      	sub	sp, #12
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2201      	movs	r2, #1
 801157e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8011582:	bf00      	nop
}
 8011584:	370c      	adds	r7, #12
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr

0801158e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801158e:	b580      	push	{r7, lr}
 8011590:	b082      	sub	sp, #8
 8011592:	af00      	add	r7, sp, #0
 8011594:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2201      	movs	r2, #1
 801159a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2200      	movs	r2, #0
 80115a2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2200      	movs	r2, #0
 80115aa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80115ae:	2300      	movs	r3, #0
 80115b0:	2200      	movs	r2, #0
 80115b2:	2101      	movs	r1, #1
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f000 f82f 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80115ba:	2300      	movs	r3, #0
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3708      	adds	r7, #8
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b082      	sub	sp, #8
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2201      	movs	r2, #1
 80115d0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2200      	movs	r2, #0
 80115d8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2200      	movs	r2, #0
 80115e0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f003 fd5e 	bl	80150a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	791b      	ldrb	r3, [r3, #4]
 80115ee:	4619      	mov	r1, r3
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 ffc5 	bl	8012580 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	795b      	ldrb	r3, [r3, #5]
 80115fa:	4619      	mov	r1, r3
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f000 ffbf 	bl	8012580 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011602:	2300      	movs	r3, #0
 8011604:	2200      	movs	r2, #0
 8011606:	2101      	movs	r1, #1
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f000 f805 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 801160e:	2300      	movs	r3, #0
}
 8011610:	4618      	mov	r0, r3
 8011612:	3708      	adds	r7, #8
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b086      	sub	sp, #24
 801161c:	af00      	add	r7, sp, #0
 801161e:	60f8      	str	r0, [r7, #12]
 8011620:	607a      	str	r2, [r7, #4]
 8011622:	603b      	str	r3, [r7, #0]
 8011624:	460b      	mov	r3, r1
 8011626:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8011628:	7afa      	ldrb	r2, [r7, #11]
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8011636:	4618      	mov	r0, r3
 8011638:	f001 f9c8 	bl	80129cc <osMessageWaiting>
 801163c:	4603      	mov	r3, r0
 801163e:	f1c3 0310 	rsb	r3, r3, #16
 8011642:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d009      	beq.n	801165e <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	4619      	mov	r1, r3
 801165a:	f001 f903 	bl	8012864 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 801165e:	bf00      	nop
 8011660:	3718      	adds	r7, #24
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}

08011666 <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8011666:	b580      	push	{r7, lr}
 8011668:	b086      	sub	sp, #24
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8011674:	f107 030c 	add.w	r3, r7, #12
 8011678:	f04f 32ff 	mov.w	r2, #4294967295
 801167c:	4618      	mov	r0, r3
 801167e:	f001 f931 	bl	80128e4 <osMessageGet>
    if (event.status == osEventMessage)
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	2b10      	cmp	r3, #16
 8011686:	d1f2      	bne.n	801166e <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f7ff fb0b 	bl	8010ca4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 801168e:	e7ee      	b.n	801166e <USBH_Process_OS+0x8>

08011690 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011698:	2300      	movs	r3, #0
 801169a:	2200      	movs	r2, #0
 801169c:	2101      	movs	r1, #1
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f7ff ffba 	bl	8011618 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80116a4:	2300      	movs	r3, #0
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3708      	adds	r7, #8
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}

080116ae <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80116ae:	b580      	push	{r7, lr}
 80116b0:	b086      	sub	sp, #24
 80116b2:	af02      	add	r7, sp, #8
 80116b4:	6078      	str	r0, [r7, #4]
 80116b6:	460b      	mov	r3, r1
 80116b8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80116ba:	887b      	ldrh	r3, [r7, #2]
 80116bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80116c0:	d901      	bls.n	80116c6 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80116c2:	2303      	movs	r3, #3
 80116c4:	e01b      	b.n	80116fe <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80116cc:	887b      	ldrh	r3, [r7, #2]
 80116ce:	9300      	str	r3, [sp, #0]
 80116d0:	4613      	mov	r3, r2
 80116d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80116d6:	2100      	movs	r1, #0
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f000 f872 	bl	80117c2 <USBH_GetDescriptor>
 80116de:	4603      	mov	r3, r0
 80116e0:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80116e2:	7bfb      	ldrb	r3, [r7, #15]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d109      	bne.n	80116fc <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80116ee:	887a      	ldrh	r2, [r7, #2]
 80116f0:	4619      	mov	r1, r3
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f000 f92a 	bl	801194c <USBH_ParseDevDesc>
 80116f8:	4603      	mov	r3, r0
 80116fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80116fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3710      	adds	r7, #16
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}

08011706 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8011706:	b580      	push	{r7, lr}
 8011708:	b086      	sub	sp, #24
 801170a:	af02      	add	r7, sp, #8
 801170c:	6078      	str	r0, [r7, #4]
 801170e:	460b      	mov	r3, r1
 8011710:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	331c      	adds	r3, #28
 8011716:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8011718:	887b      	ldrh	r3, [r7, #2]
 801171a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801171e:	d901      	bls.n	8011724 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8011720:	2303      	movs	r3, #3
 8011722:	e016      	b.n	8011752 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8011724:	887b      	ldrh	r3, [r7, #2]
 8011726:	9300      	str	r3, [sp, #0]
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801172e:	2100      	movs	r1, #0
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f000 f846 	bl	80117c2 <USBH_GetDescriptor>
 8011736:	4603      	mov	r3, r0
 8011738:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801173a:	7bfb      	ldrb	r3, [r7, #15]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d107      	bne.n	8011750 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8011740:	887b      	ldrh	r3, [r7, #2]
 8011742:	461a      	mov	r2, r3
 8011744:	68b9      	ldr	r1, [r7, #8]
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f000 f9b0 	bl	8011aac <USBH_ParseCfgDesc>
 801174c:	4603      	mov	r3, r0
 801174e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011750:	7bfb      	ldrb	r3, [r7, #15]
}
 8011752:	4618      	mov	r0, r3
 8011754:	3710      	adds	r7, #16
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}

0801175a <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 801175a:	b580      	push	{r7, lr}
 801175c:	b088      	sub	sp, #32
 801175e:	af02      	add	r7, sp, #8
 8011760:	60f8      	str	r0, [r7, #12]
 8011762:	607a      	str	r2, [r7, #4]
 8011764:	461a      	mov	r2, r3
 8011766:	460b      	mov	r3, r1
 8011768:	72fb      	strb	r3, [r7, #11]
 801176a:	4613      	mov	r3, r2
 801176c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 801176e:	893b      	ldrh	r3, [r7, #8]
 8011770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011774:	d802      	bhi.n	801177c <USBH_Get_StringDesc+0x22>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d101      	bne.n	8011780 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 801177c:	2303      	movs	r3, #3
 801177e:	e01c      	b.n	80117ba <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8011780:	7afb      	ldrb	r3, [r7, #11]
 8011782:	b29b      	uxth	r3, r3
 8011784:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8011788:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8011790:	893b      	ldrh	r3, [r7, #8]
 8011792:	9300      	str	r3, [sp, #0]
 8011794:	460b      	mov	r3, r1
 8011796:	2100      	movs	r1, #0
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f000 f812 	bl	80117c2 <USBH_GetDescriptor>
 801179e:	4603      	mov	r3, r0
 80117a0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80117a2:	7dfb      	ldrb	r3, [r7, #23]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d107      	bne.n	80117b8 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80117ae:	893a      	ldrh	r2, [r7, #8]
 80117b0:	6879      	ldr	r1, [r7, #4]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f000 fb8d 	bl	8011ed2 <USBH_ParseStringDesc>
  }

  return status;
 80117b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3718      	adds	r7, #24
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b084      	sub	sp, #16
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	60f8      	str	r0, [r7, #12]
 80117ca:	607b      	str	r3, [r7, #4]
 80117cc:	460b      	mov	r3, r1
 80117ce:	72fb      	strb	r3, [r7, #11]
 80117d0:	4613      	mov	r3, r2
 80117d2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	789b      	ldrb	r3, [r3, #2]
 80117d8:	2b01      	cmp	r3, #1
 80117da:	d11c      	bne.n	8011816 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80117dc:	7afb      	ldrb	r3, [r7, #11]
 80117de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80117e2:	b2da      	uxtb	r2, r3
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	2206      	movs	r2, #6
 80117ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	893a      	ldrh	r2, [r7, #8]
 80117f2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80117f4:	893b      	ldrh	r3, [r7, #8]
 80117f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80117fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80117fe:	d104      	bne.n	801180a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f240 4209 	movw	r2, #1033	@ 0x409
 8011806:	829a      	strh	r2, [r3, #20]
 8011808:	e002      	b.n	8011810 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	2200      	movs	r2, #0
 801180e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	8b3a      	ldrh	r2, [r7, #24]
 8011814:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8011816:	8b3b      	ldrh	r3, [r7, #24]
 8011818:	461a      	mov	r2, r3
 801181a:	6879      	ldr	r1, [r7, #4]
 801181c:	68f8      	ldr	r0, [r7, #12]
 801181e:	f000 fba5 	bl	8011f6c <USBH_CtlReq>
 8011822:	4603      	mov	r3, r0
}
 8011824:	4618      	mov	r0, r3
 8011826:	3710      	adds	r7, #16
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	460b      	mov	r3, r1
 8011836:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	789b      	ldrb	r3, [r3, #2]
 801183c:	2b01      	cmp	r3, #1
 801183e:	d10f      	bne.n	8011860 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2200      	movs	r2, #0
 8011844:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2205      	movs	r2, #5
 801184a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801184c:	78fb      	ldrb	r3, [r7, #3]
 801184e:	b29a      	uxth	r2, r3
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2200      	movs	r2, #0
 8011858:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2200      	movs	r2, #0
 801185e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011860:	2200      	movs	r2, #0
 8011862:	2100      	movs	r1, #0
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f000 fb81 	bl	8011f6c <USBH_CtlReq>
 801186a:	4603      	mov	r3, r0
}
 801186c:	4618      	mov	r0, r3
 801186e:	3708      	adds	r7, #8
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	460b      	mov	r3, r1
 801187e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	789b      	ldrb	r3, [r3, #2]
 8011884:	2b01      	cmp	r3, #1
 8011886:	d10e      	bne.n	80118a6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2209      	movs	r2, #9
 8011892:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	887a      	ldrh	r2, [r7, #2]
 8011898:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2200      	movs	r2, #0
 801189e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2200      	movs	r2, #0
 80118a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80118a6:	2200      	movs	r2, #0
 80118a8:	2100      	movs	r1, #0
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f000 fb5e 	bl	8011f6c <USBH_CtlReq>
 80118b0:	4603      	mov	r3, r0
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3708      	adds	r7, #8
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}

080118ba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80118ba:	b580      	push	{r7, lr}
 80118bc:	b082      	sub	sp, #8
 80118be:	af00      	add	r7, sp, #0
 80118c0:	6078      	str	r0, [r7, #4]
 80118c2:	460b      	mov	r3, r1
 80118c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	789b      	ldrb	r3, [r3, #2]
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	d10f      	bne.n	80118ee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2200      	movs	r2, #0
 80118d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2203      	movs	r2, #3
 80118d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80118da:	78fb      	ldrb	r3, [r7, #3]
 80118dc:	b29a      	uxth	r2, r3
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2200      	movs	r2, #0
 80118e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2200      	movs	r2, #0
 80118ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80118ee:	2200      	movs	r2, #0
 80118f0:	2100      	movs	r1, #0
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f000 fb3a 	bl	8011f6c <USBH_CtlReq>
 80118f8:	4603      	mov	r3, r0
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3708      	adds	r7, #8
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}

08011902 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8011902:	b580      	push	{r7, lr}
 8011904:	b082      	sub	sp, #8
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
 801190a:	460b      	mov	r3, r1
 801190c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	789b      	ldrb	r3, [r3, #2]
 8011912:	2b01      	cmp	r3, #1
 8011914:	d10f      	bne.n	8011936 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2202      	movs	r2, #2
 801191a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2201      	movs	r2, #1
 8011920:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2200      	movs	r2, #0
 8011926:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8011928:	78fb      	ldrb	r3, [r7, #3]
 801192a:	b29a      	uxth	r2, r3
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2200      	movs	r2, #0
 8011934:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011936:	2200      	movs	r2, #0
 8011938:	2100      	movs	r1, #0
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f000 fb16 	bl	8011f6c <USBH_CtlReq>
 8011940:	4603      	mov	r3, r0
}
 8011942:	4618      	mov	r0, r3
 8011944:	3708      	adds	r7, #8
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}
	...

0801194c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801194c:	b480      	push	{r7}
 801194e:	b087      	sub	sp, #28
 8011950:	af00      	add	r7, sp, #0
 8011952:	60f8      	str	r0, [r7, #12]
 8011954:	60b9      	str	r1, [r7, #8]
 8011956:	4613      	mov	r3, r2
 8011958:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8011960:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8011962:	2300      	movs	r3, #0
 8011964:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d101      	bne.n	8011970 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 801196c:	2302      	movs	r3, #2
 801196e:	e094      	b.n	8011a9a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	781a      	ldrb	r2, [r3, #0]
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	785a      	ldrb	r2, [r3, #1]
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	3302      	adds	r3, #2
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	461a      	mov	r2, r3
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	3303      	adds	r3, #3
 801198c:	781b      	ldrb	r3, [r3, #0]
 801198e:	021b      	lsls	r3, r3, #8
 8011990:	b29b      	uxth	r3, r3
 8011992:	4313      	orrs	r3, r2
 8011994:	b29a      	uxth	r2, r3
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	791a      	ldrb	r2, [r3, #4]
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	795a      	ldrb	r2, [r3, #5]
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	799a      	ldrb	r2, [r3, #6]
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	79da      	ldrb	r2, [r3, #7]
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d004      	beq.n	80119ce <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80119ca:	2b01      	cmp	r3, #1
 80119cc:	d11b      	bne.n	8011a06 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	79db      	ldrb	r3, [r3, #7]
 80119d2:	2b20      	cmp	r3, #32
 80119d4:	dc0f      	bgt.n	80119f6 <USBH_ParseDevDesc+0xaa>
 80119d6:	2b08      	cmp	r3, #8
 80119d8:	db0f      	blt.n	80119fa <USBH_ParseDevDesc+0xae>
 80119da:	3b08      	subs	r3, #8
 80119dc:	4a32      	ldr	r2, [pc, #200]	@ (8011aa8 <USBH_ParseDevDesc+0x15c>)
 80119de:	fa22 f303 	lsr.w	r3, r2, r3
 80119e2:	f003 0301 	and.w	r3, r3, #1
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	bf14      	ite	ne
 80119ea:	2301      	movne	r3, #1
 80119ec:	2300      	moveq	r3, #0
 80119ee:	b2db      	uxtb	r3, r3
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d106      	bne.n	8011a02 <USBH_ParseDevDesc+0xb6>
 80119f4:	e001      	b.n	80119fa <USBH_ParseDevDesc+0xae>
 80119f6:	2b40      	cmp	r3, #64	@ 0x40
 80119f8:	d003      	beq.n	8011a02 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	2208      	movs	r2, #8
 80119fe:	71da      	strb	r2, [r3, #7]
        break;
 8011a00:	e000      	b.n	8011a04 <USBH_ParseDevDesc+0xb8>
        break;
 8011a02:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8011a04:	e00e      	b.n	8011a24 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011a0c:	2b02      	cmp	r3, #2
 8011a0e:	d107      	bne.n	8011a20 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	79db      	ldrb	r3, [r3, #7]
 8011a14:	2b08      	cmp	r3, #8
 8011a16:	d005      	beq.n	8011a24 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	2208      	movs	r2, #8
 8011a1c:	71da      	strb	r2, [r3, #7]
 8011a1e:	e001      	b.n	8011a24 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8011a20:	2303      	movs	r3, #3
 8011a22:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8011a24:	88fb      	ldrh	r3, [r7, #6]
 8011a26:	2b08      	cmp	r3, #8
 8011a28:	d936      	bls.n	8011a98 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	3308      	adds	r3, #8
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	461a      	mov	r2, r3
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	3309      	adds	r3, #9
 8011a36:	781b      	ldrb	r3, [r3, #0]
 8011a38:	021b      	lsls	r3, r3, #8
 8011a3a:	b29b      	uxth	r3, r3
 8011a3c:	4313      	orrs	r3, r2
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	330a      	adds	r3, #10
 8011a48:	781b      	ldrb	r3, [r3, #0]
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	330b      	adds	r3, #11
 8011a50:	781b      	ldrb	r3, [r3, #0]
 8011a52:	021b      	lsls	r3, r3, #8
 8011a54:	b29b      	uxth	r3, r3
 8011a56:	4313      	orrs	r3, r2
 8011a58:	b29a      	uxth	r2, r3
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	330c      	adds	r3, #12
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	461a      	mov	r2, r3
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	330d      	adds	r3, #13
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	021b      	lsls	r3, r3, #8
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	4313      	orrs	r3, r2
 8011a72:	b29a      	uxth	r2, r3
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	7b9a      	ldrb	r2, [r3, #14]
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	7bda      	ldrb	r2, [r3, #15]
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	7c1a      	ldrb	r2, [r3, #16]
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	7c5a      	ldrb	r2, [r3, #17]
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8011a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	371c      	adds	r7, #28
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa4:	4770      	bx	lr
 8011aa6:	bf00      	nop
 8011aa8:	01000101 	.word	0x01000101

08011aac <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b08c      	sub	sp, #48	@ 0x30
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	60f8      	str	r0, [r7, #12]
 8011ab4:	60b9      	str	r1, [r7, #8]
 8011ab6:	4613      	mov	r3, r2
 8011ab8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8011ac0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d101      	bne.n	8011ade <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8011ada:	2302      	movs	r3, #2
 8011adc:	e0de      	b.n	8011c9c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8011ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	2b09      	cmp	r3, #9
 8011ae8:	d002      	beq.n	8011af0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8011aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aec:	2209      	movs	r2, #9
 8011aee:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	781a      	ldrb	r2, [r3, #0]
 8011af4:	6a3b      	ldr	r3, [r7, #32]
 8011af6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	785a      	ldrb	r2, [r3, #1]
 8011afc:	6a3b      	ldr	r3, [r7, #32]
 8011afe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	3302      	adds	r3, #2
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	461a      	mov	r2, r3
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	3303      	adds	r3, #3
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	021b      	lsls	r3, r3, #8
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	4313      	orrs	r3, r2
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b1a:	bf28      	it	cs
 8011b1c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8011b20:	b29a      	uxth	r2, r3
 8011b22:	6a3b      	ldr	r3, [r7, #32]
 8011b24:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	791a      	ldrb	r2, [r3, #4]
 8011b2a:	6a3b      	ldr	r3, [r7, #32]
 8011b2c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	795a      	ldrb	r2, [r3, #5]
 8011b32:	6a3b      	ldr	r3, [r7, #32]
 8011b34:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	799a      	ldrb	r2, [r3, #6]
 8011b3a:	6a3b      	ldr	r3, [r7, #32]
 8011b3c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	79da      	ldrb	r2, [r3, #7]
 8011b42:	6a3b      	ldr	r3, [r7, #32]
 8011b44:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	7a1a      	ldrb	r2, [r3, #8]
 8011b4a:	6a3b      	ldr	r3, [r7, #32]
 8011b4c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8011b4e:	88fb      	ldrh	r3, [r7, #6]
 8011b50:	2b09      	cmp	r3, #9
 8011b52:	f240 80a1 	bls.w	8011c98 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8011b56:	2309      	movs	r3, #9
 8011b58:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011b5e:	e085      	b.n	8011c6c <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011b60:	f107 0316 	add.w	r3, r7, #22
 8011b64:	4619      	mov	r1, r3
 8011b66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b68:	f000 f9e6 	bl	8011f38 <USBH_GetNextDesc>
 8011b6c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8011b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b70:	785b      	ldrb	r3, [r3, #1]
 8011b72:	2b04      	cmp	r3, #4
 8011b74:	d17a      	bne.n	8011c6c <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8011b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	2b09      	cmp	r3, #9
 8011b7c:	d002      	beq.n	8011b84 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8011b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b80:	2209      	movs	r2, #9
 8011b82:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8011b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b88:	221a      	movs	r2, #26
 8011b8a:	fb02 f303 	mul.w	r3, r2, r3
 8011b8e:	3308      	adds	r3, #8
 8011b90:	6a3a      	ldr	r2, [r7, #32]
 8011b92:	4413      	add	r3, r2
 8011b94:	3302      	adds	r3, #2
 8011b96:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011b98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b9a:	69f8      	ldr	r0, [r7, #28]
 8011b9c:	f000 f882 	bl	8011ca4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011baa:	e043      	b.n	8011c34 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011bac:	f107 0316 	add.w	r3, r7, #22
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011bb4:	f000 f9c0 	bl	8011f38 <USBH_GetNextDesc>
 8011bb8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bbc:	785b      	ldrb	r3, [r3, #1]
 8011bbe:	2b05      	cmp	r3, #5
 8011bc0:	d138      	bne.n	8011c34 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8011bc2:	69fb      	ldr	r3, [r7, #28]
 8011bc4:	795b      	ldrb	r3, [r3, #5]
 8011bc6:	2b01      	cmp	r3, #1
 8011bc8:	d113      	bne.n	8011bf2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8011bca:	69fb      	ldr	r3, [r7, #28]
 8011bcc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8011bce:	2b02      	cmp	r3, #2
 8011bd0:	d003      	beq.n	8011bda <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8011bd2:	69fb      	ldr	r3, [r7, #28]
 8011bd4:	799b      	ldrb	r3, [r3, #6]
 8011bd6:	2b03      	cmp	r3, #3
 8011bd8:	d10b      	bne.n	8011bf2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011bda:	69fb      	ldr	r3, [r7, #28]
 8011bdc:	79db      	ldrb	r3, [r3, #7]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d10b      	bne.n	8011bfa <USBH_ParseCfgDesc+0x14e>
 8011be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	2b09      	cmp	r3, #9
 8011be8:	d007      	beq.n	8011bfa <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8011bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bec:	2209      	movs	r2, #9
 8011bee:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011bf0:	e003      	b.n	8011bfa <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8011bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bf4:	2207      	movs	r2, #7
 8011bf6:	701a      	strb	r2, [r3, #0]
 8011bf8:	e000      	b.n	8011bfc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011bfa:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8011bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c00:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011c04:	3201      	adds	r2, #1
 8011c06:	00d2      	lsls	r2, r2, #3
 8011c08:	211a      	movs	r1, #26
 8011c0a:	fb01 f303 	mul.w	r3, r1, r3
 8011c0e:	4413      	add	r3, r2
 8011c10:	3308      	adds	r3, #8
 8011c12:	6a3a      	ldr	r2, [r7, #32]
 8011c14:	4413      	add	r3, r2
 8011c16:	3304      	adds	r3, #4
 8011c18:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8011c1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011c1c:	69b9      	ldr	r1, [r7, #24]
 8011c1e:	68f8      	ldr	r0, [r7, #12]
 8011c20:	f000 f86f 	bl	8011d02 <USBH_ParseEPDesc>
 8011c24:	4603      	mov	r3, r0
 8011c26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8011c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011c2e:	3301      	adds	r3, #1
 8011c30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011c34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011c38:	2b01      	cmp	r3, #1
 8011c3a:	d80a      	bhi.n	8011c52 <USBH_ParseCfgDesc+0x1a6>
 8011c3c:	69fb      	ldr	r3, [r7, #28]
 8011c3e:	791b      	ldrb	r3, [r3, #4]
 8011c40:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d204      	bcs.n	8011c52 <USBH_ParseCfgDesc+0x1a6>
 8011c48:	6a3b      	ldr	r3, [r7, #32]
 8011c4a:	885a      	ldrh	r2, [r3, #2]
 8011c4c:	8afb      	ldrh	r3, [r7, #22]
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d8ac      	bhi.n	8011bac <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8011c52:	69fb      	ldr	r3, [r7, #28]
 8011c54:	791b      	ldrb	r3, [r3, #4]
 8011c56:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d201      	bcs.n	8011c62 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8011c5e:	2303      	movs	r3, #3
 8011c60:	e01c      	b.n	8011c9c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8011c62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c66:	3301      	adds	r3, #1
 8011c68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d805      	bhi.n	8011c80 <USBH_ParseCfgDesc+0x1d4>
 8011c74:	6a3b      	ldr	r3, [r7, #32]
 8011c76:	885a      	ldrh	r2, [r3, #2]
 8011c78:	8afb      	ldrh	r3, [r7, #22]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	f63f af70 	bhi.w	8011b60 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8011c80:	6a3b      	ldr	r3, [r7, #32]
 8011c82:	791b      	ldrb	r3, [r3, #4]
 8011c84:	2b02      	cmp	r3, #2
 8011c86:	bf28      	it	cs
 8011c88:	2302      	movcs	r3, #2
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011c90:	429a      	cmp	r2, r3
 8011c92:	d201      	bcs.n	8011c98 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8011c94:	2303      	movs	r3, #3
 8011c96:	e001      	b.n	8011c9c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8011c98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3730      	adds	r7, #48	@ 0x30
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b083      	sub	sp, #12
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	781a      	ldrb	r2, [r3, #0]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	785a      	ldrb	r2, [r3, #1]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	789a      	ldrb	r2, [r3, #2]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	78da      	ldrb	r2, [r3, #3]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	791a      	ldrb	r2, [r3, #4]
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	795a      	ldrb	r2, [r3, #5]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	799a      	ldrb	r2, [r3, #6]
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	79da      	ldrb	r2, [r3, #7]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	7a1a      	ldrb	r2, [r3, #8]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	721a      	strb	r2, [r3, #8]
}
 8011cf6:	bf00      	nop
 8011cf8:	370c      	adds	r7, #12
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d00:	4770      	bx	lr

08011d02 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8011d02:	b480      	push	{r7}
 8011d04:	b087      	sub	sp, #28
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	60f8      	str	r0, [r7, #12]
 8011d0a:	60b9      	str	r1, [r7, #8]
 8011d0c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	781a      	ldrb	r2, [r3, #0]
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	785a      	ldrb	r2, [r3, #1]
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	789a      	ldrb	r2, [r3, #2]
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	78da      	ldrb	r2, [r3, #3]
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	3304      	adds	r3, #4
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	461a      	mov	r2, r3
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	3305      	adds	r3, #5
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	021b      	lsls	r3, r3, #8
 8011d42:	b29b      	uxth	r3, r3
 8011d44:	4313      	orrs	r3, r2
 8011d46:	b29a      	uxth	r2, r3
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	799a      	ldrb	r2, [r3, #6]
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	889b      	ldrh	r3, [r3, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d009      	beq.n	8011d70 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8011d5c:	68bb      	ldr	r3, [r7, #8]
 8011d5e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8011d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011d64:	d804      	bhi.n	8011d70 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8011d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d6e:	d901      	bls.n	8011d74 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8011d70:	2303      	movs	r3, #3
 8011d72:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d136      	bne.n	8011dec <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	78db      	ldrb	r3, [r3, #3]
 8011d82:	f003 0303 	and.w	r3, r3, #3
 8011d86:	2b02      	cmp	r3, #2
 8011d88:	d108      	bne.n	8011d9c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	889b      	ldrh	r3, [r3, #4]
 8011d8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d92:	f240 8097 	bls.w	8011ec4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011d96:	2303      	movs	r3, #3
 8011d98:	75fb      	strb	r3, [r7, #23]
 8011d9a:	e093      	b.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	78db      	ldrb	r3, [r3, #3]
 8011da0:	f003 0303 	and.w	r3, r3, #3
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d107      	bne.n	8011db8 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	889b      	ldrh	r3, [r3, #4]
 8011dac:	2b40      	cmp	r3, #64	@ 0x40
 8011dae:	f240 8089 	bls.w	8011ec4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011db2:	2303      	movs	r3, #3
 8011db4:	75fb      	strb	r3, [r7, #23]
 8011db6:	e085      	b.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	78db      	ldrb	r3, [r3, #3]
 8011dbc:	f003 0303 	and.w	r3, r3, #3
 8011dc0:	2b01      	cmp	r3, #1
 8011dc2:	d005      	beq.n	8011dd0 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	78db      	ldrb	r3, [r3, #3]
 8011dc8:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011dcc:	2b03      	cmp	r3, #3
 8011dce:	d10a      	bne.n	8011de6 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	799b      	ldrb	r3, [r3, #6]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d003      	beq.n	8011de0 <USBH_ParseEPDesc+0xde>
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	799b      	ldrb	r3, [r3, #6]
 8011ddc:	2b10      	cmp	r3, #16
 8011dde:	d970      	bls.n	8011ec2 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8011de0:	2303      	movs	r3, #3
 8011de2:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011de4:	e06d      	b.n	8011ec2 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011de6:	2303      	movs	r3, #3
 8011de8:	75fb      	strb	r3, [r7, #23]
 8011dea:	e06b      	b.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	d13c      	bne.n	8011e70 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	78db      	ldrb	r3, [r3, #3]
 8011dfa:	f003 0303 	and.w	r3, r3, #3
 8011dfe:	2b02      	cmp	r3, #2
 8011e00:	d005      	beq.n	8011e0e <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	78db      	ldrb	r3, [r3, #3]
 8011e06:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d106      	bne.n	8011e1c <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	889b      	ldrh	r3, [r3, #4]
 8011e12:	2b40      	cmp	r3, #64	@ 0x40
 8011e14:	d956      	bls.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011e16:	2303      	movs	r3, #3
 8011e18:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011e1a:	e053      	b.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	78db      	ldrb	r3, [r3, #3]
 8011e20:	f003 0303 	and.w	r3, r3, #3
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d10e      	bne.n	8011e46 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	799b      	ldrb	r3, [r3, #6]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d007      	beq.n	8011e40 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8011e34:	2b10      	cmp	r3, #16
 8011e36:	d803      	bhi.n	8011e40 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8011e3c:	2b40      	cmp	r3, #64	@ 0x40
 8011e3e:	d941      	bls.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011e40:	2303      	movs	r3, #3
 8011e42:	75fb      	strb	r3, [r7, #23]
 8011e44:	e03e      	b.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	78db      	ldrb	r3, [r3, #3]
 8011e4a:	f003 0303 	and.w	r3, r3, #3
 8011e4e:	2b03      	cmp	r3, #3
 8011e50:	d10b      	bne.n	8011e6a <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	799b      	ldrb	r3, [r3, #6]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d004      	beq.n	8011e64 <USBH_ParseEPDesc+0x162>
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	889b      	ldrh	r3, [r3, #4]
 8011e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011e62:	d32f      	bcc.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011e64:	2303      	movs	r3, #3
 8011e66:	75fb      	strb	r3, [r7, #23]
 8011e68:	e02c      	b.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011e6a:	2303      	movs	r3, #3
 8011e6c:	75fb      	strb	r3, [r7, #23]
 8011e6e:	e029      	b.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011e76:	2b02      	cmp	r3, #2
 8011e78:	d120      	bne.n	8011ebc <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	78db      	ldrb	r3, [r3, #3]
 8011e7e:	f003 0303 	and.w	r3, r3, #3
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d106      	bne.n	8011e94 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	889b      	ldrh	r3, [r3, #4]
 8011e8a:	2b08      	cmp	r3, #8
 8011e8c:	d01a      	beq.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011e8e:	2303      	movs	r3, #3
 8011e90:	75fb      	strb	r3, [r7, #23]
 8011e92:	e017      	b.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	78db      	ldrb	r3, [r3, #3]
 8011e98:	f003 0303 	and.w	r3, r3, #3
 8011e9c:	2b03      	cmp	r3, #3
 8011e9e:	d10a      	bne.n	8011eb6 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	799b      	ldrb	r3, [r3, #6]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d003      	beq.n	8011eb0 <USBH_ParseEPDesc+0x1ae>
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	889b      	ldrh	r3, [r3, #4]
 8011eac:	2b08      	cmp	r3, #8
 8011eae:	d909      	bls.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011eb0:	2303      	movs	r3, #3
 8011eb2:	75fb      	strb	r3, [r7, #23]
 8011eb4:	e006      	b.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011eb6:	2303      	movs	r3, #3
 8011eb8:	75fb      	strb	r3, [r7, #23]
 8011eba:	e003      	b.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8011ebc:	2303      	movs	r3, #3
 8011ebe:	75fb      	strb	r3, [r7, #23]
 8011ec0:	e000      	b.n	8011ec4 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011ec2:	bf00      	nop
  }

  return status;
 8011ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	371c      	adds	r7, #28
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed0:	4770      	bx	lr

08011ed2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8011ed2:	b480      	push	{r7}
 8011ed4:	b087      	sub	sp, #28
 8011ed6:	af00      	add	r7, sp, #0
 8011ed8:	60f8      	str	r0, [r7, #12]
 8011eda:	60b9      	str	r1, [r7, #8]
 8011edc:	4613      	mov	r3, r2
 8011ede:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	781b      	ldrb	r3, [r3, #0]
 8011ee6:	2b03      	cmp	r3, #3
 8011ee8:	d120      	bne.n	8011f2c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	1e9a      	subs	r2, r3, #2
 8011ef0:	88fb      	ldrh	r3, [r7, #6]
 8011ef2:	4293      	cmp	r3, r2
 8011ef4:	bf28      	it	cs
 8011ef6:	4613      	movcs	r3, r2
 8011ef8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	3302      	adds	r3, #2
 8011efe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8011f00:	2300      	movs	r3, #0
 8011f02:	82fb      	strh	r3, [r7, #22]
 8011f04:	e00b      	b.n	8011f1e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8011f06:	8afb      	ldrh	r3, [r7, #22]
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	4413      	add	r3, r2
 8011f0c:	781a      	ldrb	r2, [r3, #0]
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	701a      	strb	r2, [r3, #0]
      pdest++;
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	3301      	adds	r3, #1
 8011f16:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8011f18:	8afb      	ldrh	r3, [r7, #22]
 8011f1a:	3302      	adds	r3, #2
 8011f1c:	82fb      	strh	r3, [r7, #22]
 8011f1e:	8afa      	ldrh	r2, [r7, #22]
 8011f20:	8abb      	ldrh	r3, [r7, #20]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d3ef      	bcc.n	8011f06 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	2200      	movs	r2, #0
 8011f2a:	701a      	strb	r2, [r3, #0]
  }
}
 8011f2c:	bf00      	nop
 8011f2e:	371c      	adds	r7, #28
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr

08011f38 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b085      	sub	sp, #20
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	881b      	ldrh	r3, [r3, #0]
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	7812      	ldrb	r2, [r2, #0]
 8011f4a:	4413      	add	r3, r2
 8011f4c:	b29a      	uxth	r2, r3
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	781b      	ldrb	r3, [r3, #0]
 8011f56:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	4413      	add	r3, r2
 8011f5c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011f5e:	68fb      	ldr	r3, [r7, #12]
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3714      	adds	r7, #20
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr

08011f6c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b086      	sub	sp, #24
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	60f8      	str	r0, [r7, #12]
 8011f74:	60b9      	str	r1, [r7, #8]
 8011f76:	4613      	mov	r3, r2
 8011f78:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	789b      	ldrb	r3, [r3, #2]
 8011f82:	2b01      	cmp	r3, #1
 8011f84:	d002      	beq.n	8011f8c <USBH_CtlReq+0x20>
 8011f86:	2b02      	cmp	r3, #2
 8011f88:	d015      	beq.n	8011fb6 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8011f8a:	e033      	b.n	8011ff4 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	68ba      	ldr	r2, [r7, #8]
 8011f90:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	88fa      	ldrh	r2, [r7, #6]
 8011f96:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2201      	movs	r2, #1
 8011f9c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	2202      	movs	r2, #2
 8011fa2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011fa8:	2300      	movs	r3, #0
 8011faa:	2200      	movs	r2, #0
 8011fac:	2103      	movs	r1, #3
 8011fae:	68f8      	ldr	r0, [r7, #12]
 8011fb0:	f7ff fb32 	bl	8011618 <USBH_OS_PutMessage>
      break;
 8011fb4:	e01e      	b.n	8011ff4 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 8011fb6:	68f8      	ldr	r0, [r7, #12]
 8011fb8:	f000 f822 	bl	8012000 <USBH_HandleControl>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8011fc0:	7dfb      	ldrb	r3, [r7, #23]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d002      	beq.n	8011fcc <USBH_CtlReq+0x60>
 8011fc6:	7dfb      	ldrb	r3, [r7, #23]
 8011fc8:	2b03      	cmp	r3, #3
 8011fca:	d106      	bne.n	8011fda <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	2201      	movs	r2, #1
 8011fd0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	761a      	strb	r2, [r3, #24]
 8011fd8:	e005      	b.n	8011fe6 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 8011fda:	7dfb      	ldrb	r3, [r7, #23]
 8011fdc:	2b02      	cmp	r3, #2
 8011fde:	d102      	bne.n	8011fe6 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	2201      	movs	r2, #1
 8011fe4:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	2200      	movs	r2, #0
 8011fea:	2103      	movs	r1, #3
 8011fec:	68f8      	ldr	r0, [r7, #12]
 8011fee:	f7ff fb13 	bl	8011618 <USBH_OS_PutMessage>
      break;
 8011ff2:	bf00      	nop
  }
  return status;
 8011ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3718      	adds	r7, #24
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
	...

08012000 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b086      	sub	sp, #24
 8012004:	af02      	add	r7, sp, #8
 8012006:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8012008:	2301      	movs	r3, #1
 801200a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801200c:	2300      	movs	r3, #0
 801200e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	7e1b      	ldrb	r3, [r3, #24]
 8012014:	3b01      	subs	r3, #1
 8012016:	2b0a      	cmp	r3, #10
 8012018:	f200 81b2 	bhi.w	8012380 <USBH_HandleControl+0x380>
 801201c:	a201      	add	r2, pc, #4	@ (adr r2, 8012024 <USBH_HandleControl+0x24>)
 801201e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012022:	bf00      	nop
 8012024:	08012051 	.word	0x08012051
 8012028:	0801206b 	.word	0x0801206b
 801202c:	080120ed 	.word	0x080120ed
 8012030:	08012113 	.word	0x08012113
 8012034:	08012171 	.word	0x08012171
 8012038:	0801219b 	.word	0x0801219b
 801203c:	0801221d 	.word	0x0801221d
 8012040:	0801223f 	.word	0x0801223f
 8012044:	080122a1 	.word	0x080122a1
 8012048:	080122c7 	.word	0x080122c7
 801204c:	08012329 	.word	0x08012329
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f103 0110 	add.w	r1, r3, #16
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	795b      	ldrb	r3, [r3, #5]
 801205a:	461a      	mov	r2, r3
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 f99f 	bl	80123a0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2202      	movs	r2, #2
 8012066:	761a      	strb	r2, [r3, #24]
      break;
 8012068:	e195      	b.n	8012396 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	795b      	ldrb	r3, [r3, #5]
 801206e:	4619      	mov	r1, r3
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f003 f907 	bl	8015284 <USBH_LL_GetURBState>
 8012076:	4603      	mov	r3, r0
 8012078:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801207a:	7bbb      	ldrb	r3, [r7, #14]
 801207c:	2b01      	cmp	r3, #1
 801207e:	d124      	bne.n	80120ca <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	7c1b      	ldrb	r3, [r3, #16]
 8012084:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012088:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	8adb      	ldrh	r3, [r3, #22]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d00a      	beq.n	80120a8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8012092:	7b7b      	ldrb	r3, [r7, #13]
 8012094:	2b80      	cmp	r3, #128	@ 0x80
 8012096:	d103      	bne.n	80120a0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2203      	movs	r2, #3
 801209c:	761a      	strb	r2, [r3, #24]
 801209e:	e00d      	b.n	80120bc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2205      	movs	r2, #5
 80120a4:	761a      	strb	r2, [r3, #24]
 80120a6:	e009      	b.n	80120bc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80120a8:	7b7b      	ldrb	r3, [r7, #13]
 80120aa:	2b80      	cmp	r3, #128	@ 0x80
 80120ac:	d103      	bne.n	80120b6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2209      	movs	r2, #9
 80120b2:	761a      	strb	r2, [r3, #24]
 80120b4:	e002      	b.n	80120bc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2207      	movs	r2, #7
 80120ba:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80120bc:	2300      	movs	r3, #0
 80120be:	2200      	movs	r2, #0
 80120c0:	2103      	movs	r1, #3
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f7ff faa8 	bl	8011618 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80120c8:	e15c      	b.n	8012384 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80120ca:	7bbb      	ldrb	r3, [r7, #14]
 80120cc:	2b04      	cmp	r3, #4
 80120ce:	d003      	beq.n	80120d8 <USBH_HandleControl+0xd8>
 80120d0:	7bbb      	ldrb	r3, [r7, #14]
 80120d2:	2b02      	cmp	r3, #2
 80120d4:	f040 8156 	bne.w	8012384 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	220b      	movs	r2, #11
 80120dc:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80120de:	2300      	movs	r3, #0
 80120e0:	2200      	movs	r2, #0
 80120e2:	2103      	movs	r1, #3
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f7ff fa97 	bl	8011618 <USBH_OS_PutMessage>
      break;
 80120ea:	e14b      	b.n	8012384 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	6899      	ldr	r1, [r3, #8]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	899a      	ldrh	r2, [r3, #12]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	791b      	ldrb	r3, [r3, #4]
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f000 f98a 	bl	801241e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2204      	movs	r2, #4
 801210e:	761a      	strb	r2, [r3, #24]
      break;
 8012110:	e141      	b.n	8012396 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	791b      	ldrb	r3, [r3, #4]
 8012116:	4619      	mov	r1, r3
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f003 f8b3 	bl	8015284 <USBH_LL_GetURBState>
 801211e:	4603      	mov	r3, r0
 8012120:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8012122:	7bbb      	ldrb	r3, [r7, #14]
 8012124:	2b01      	cmp	r3, #1
 8012126:	d109      	bne.n	801213c <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2209      	movs	r2, #9
 801212c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801212e:	2300      	movs	r3, #0
 8012130:	2200      	movs	r2, #0
 8012132:	2103      	movs	r1, #3
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f7ff fa6f 	bl	8011618 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801213a:	e125      	b.n	8012388 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 801213c:	7bbb      	ldrb	r3, [r7, #14]
 801213e:	2b05      	cmp	r3, #5
 8012140:	d108      	bne.n	8012154 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 8012142:	2303      	movs	r3, #3
 8012144:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8012146:	2300      	movs	r3, #0
 8012148:	2200      	movs	r2, #0
 801214a:	2103      	movs	r1, #3
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f7ff fa63 	bl	8011618 <USBH_OS_PutMessage>
      break;
 8012152:	e119      	b.n	8012388 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 8012154:	7bbb      	ldrb	r3, [r7, #14]
 8012156:	2b04      	cmp	r3, #4
 8012158:	f040 8116 	bne.w	8012388 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	220b      	movs	r2, #11
 8012160:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8012162:	2300      	movs	r3, #0
 8012164:	2200      	movs	r2, #0
 8012166:	2103      	movs	r1, #3
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f7ff fa55 	bl	8011618 <USBH_OS_PutMessage>
      break;
 801216e:	e10b      	b.n	8012388 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6899      	ldr	r1, [r3, #8]
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	899a      	ldrh	r2, [r3, #12]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	795b      	ldrb	r3, [r3, #5]
 801217c:	2001      	movs	r0, #1
 801217e:	9000      	str	r0, [sp, #0]
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f000 f927 	bl	80123d4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801218c:	b29a      	uxth	r2, r3
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2206      	movs	r2, #6
 8012196:	761a      	strb	r2, [r3, #24]
      break;
 8012198:	e0fd      	b.n	8012396 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	795b      	ldrb	r3, [r3, #5]
 801219e:	4619      	mov	r1, r3
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f003 f86f 	bl	8015284 <USBH_LL_GetURBState>
 80121a6:	4603      	mov	r3, r0
 80121a8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80121aa:	7bbb      	ldrb	r3, [r7, #14]
 80121ac:	2b01      	cmp	r3, #1
 80121ae:	d109      	bne.n	80121c4 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2207      	movs	r2, #7
 80121b4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80121b6:	2300      	movs	r3, #0
 80121b8:	2200      	movs	r2, #0
 80121ba:	2103      	movs	r1, #3
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7ff fa2b 	bl	8011618 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80121c2:	e0e3      	b.n	801238c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 80121c4:	7bbb      	ldrb	r3, [r7, #14]
 80121c6:	2b05      	cmp	r3, #5
 80121c8:	d10b      	bne.n	80121e2 <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	220c      	movs	r2, #12
 80121ce:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80121d0:	2303      	movs	r3, #3
 80121d2:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80121d4:	2300      	movs	r3, #0
 80121d6:	2200      	movs	r2, #0
 80121d8:	2103      	movs	r1, #3
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7ff fa1c 	bl	8011618 <USBH_OS_PutMessage>
      break;
 80121e0:	e0d4      	b.n	801238c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 80121e2:	7bbb      	ldrb	r3, [r7, #14]
 80121e4:	2b02      	cmp	r3, #2
 80121e6:	d109      	bne.n	80121fc <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2205      	movs	r2, #5
 80121ec:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80121ee:	2300      	movs	r3, #0
 80121f0:	2200      	movs	r2, #0
 80121f2:	2103      	movs	r1, #3
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f7ff fa0f 	bl	8011618 <USBH_OS_PutMessage>
      break;
 80121fa:	e0c7      	b.n	801238c <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 80121fc:	7bbb      	ldrb	r3, [r7, #14]
 80121fe:	2b04      	cmp	r3, #4
 8012200:	f040 80c4 	bne.w	801238c <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	220b      	movs	r2, #11
 8012208:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801220a:	2302      	movs	r3, #2
 801220c:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801220e:	2300      	movs	r3, #0
 8012210:	2200      	movs	r2, #0
 8012212:	2103      	movs	r1, #3
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f7ff f9ff 	bl	8011618 <USBH_OS_PutMessage>
      break;
 801221a:	e0b7      	b.n	801238c <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	791b      	ldrb	r3, [r3, #4]
 8012220:	2200      	movs	r2, #0
 8012222:	2100      	movs	r1, #0
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f000 f8fa 	bl	801241e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012230:	b29a      	uxth	r2, r3
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2208      	movs	r2, #8
 801223a:	761a      	strb	r2, [r3, #24]

      break;
 801223c:	e0ab      	b.n	8012396 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	791b      	ldrb	r3, [r3, #4]
 8012242:	4619      	mov	r1, r3
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f003 f81d 	bl	8015284 <USBH_LL_GetURBState>
 801224a:	4603      	mov	r3, r0
 801224c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801224e:	7bbb      	ldrb	r3, [r7, #14]
 8012250:	2b01      	cmp	r3, #1
 8012252:	d10b      	bne.n	801226c <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	220d      	movs	r2, #13
 8012258:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801225a:	2300      	movs	r3, #0
 801225c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801225e:	2300      	movs	r3, #0
 8012260:	2200      	movs	r2, #0
 8012262:	2103      	movs	r1, #3
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f7ff f9d7 	bl	8011618 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801226a:	e091      	b.n	8012390 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 801226c:	7bbb      	ldrb	r3, [r7, #14]
 801226e:	2b04      	cmp	r3, #4
 8012270:	d109      	bne.n	8012286 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	220b      	movs	r2, #11
 8012276:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8012278:	2300      	movs	r3, #0
 801227a:	2200      	movs	r2, #0
 801227c:	2103      	movs	r1, #3
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f7ff f9ca 	bl	8011618 <USBH_OS_PutMessage>
      break;
 8012284:	e084      	b.n	8012390 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 8012286:	7bbb      	ldrb	r3, [r7, #14]
 8012288:	2b05      	cmp	r3, #5
 801228a:	f040 8081 	bne.w	8012390 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 801228e:	2303      	movs	r3, #3
 8012290:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8012292:	2300      	movs	r3, #0
 8012294:	2200      	movs	r2, #0
 8012296:	2103      	movs	r1, #3
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f7ff f9bd 	bl	8011618 <USBH_OS_PutMessage>
      break;
 801229e:	e077      	b.n	8012390 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	795b      	ldrb	r3, [r3, #5]
 80122a4:	2201      	movs	r2, #1
 80122a6:	9200      	str	r2, [sp, #0]
 80122a8:	2200      	movs	r2, #0
 80122aa:	2100      	movs	r1, #0
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f000 f891 	bl	80123d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80122b8:	b29a      	uxth	r2, r3
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	220a      	movs	r2, #10
 80122c2:	761a      	strb	r2, [r3, #24]
      break;
 80122c4:	e067      	b.n	8012396 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	795b      	ldrb	r3, [r3, #5]
 80122ca:	4619      	mov	r1, r3
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f002 ffd9 	bl	8015284 <USBH_LL_GetURBState>
 80122d2:	4603      	mov	r3, r0
 80122d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80122d6:	7bbb      	ldrb	r3, [r7, #14]
 80122d8:	2b01      	cmp	r3, #1
 80122da:	d10b      	bne.n	80122f4 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 80122dc:	2300      	movs	r3, #0
 80122de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	220d      	movs	r2, #13
 80122e4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80122e6:	2300      	movs	r3, #0
 80122e8:	2200      	movs	r2, #0
 80122ea:	2103      	movs	r1, #3
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f7ff f993 	bl	8011618 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80122f2:	e04f      	b.n	8012394 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 80122f4:	7bbb      	ldrb	r3, [r7, #14]
 80122f6:	2b02      	cmp	r3, #2
 80122f8:	d109      	bne.n	801230e <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	2209      	movs	r2, #9
 80122fe:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8012300:	2300      	movs	r3, #0
 8012302:	2200      	movs	r2, #0
 8012304:	2103      	movs	r1, #3
 8012306:	6878      	ldr	r0, [r7, #4]
 8012308:	f7ff f986 	bl	8011618 <USBH_OS_PutMessage>
      break;
 801230c:	e042      	b.n	8012394 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 801230e:	7bbb      	ldrb	r3, [r7, #14]
 8012310:	2b04      	cmp	r3, #4
 8012312:	d13f      	bne.n	8012394 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	220b      	movs	r2, #11
 8012318:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801231a:	2300      	movs	r3, #0
 801231c:	2200      	movs	r2, #0
 801231e:	2103      	movs	r1, #3
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f7ff f979 	bl	8011618 <USBH_OS_PutMessage>
      break;
 8012326:	e035      	b.n	8012394 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	7e5b      	ldrb	r3, [r3, #25]
 801232c:	3301      	adds	r3, #1
 801232e:	b2da      	uxtb	r2, r3
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	765a      	strb	r2, [r3, #25]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	7e5b      	ldrb	r3, [r3, #25]
 8012338:	2b02      	cmp	r3, #2
 801233a:	d806      	bhi.n	801234a <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2201      	movs	r2, #1
 8012340:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2201      	movs	r2, #1
 8012346:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8012348:	e025      	b.n	8012396 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012350:	2106      	movs	r1, #6
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2200      	movs	r2, #0
 801235a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	795b      	ldrb	r3, [r3, #5]
 8012360:	4619      	mov	r1, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f000 f90c 	bl	8012580 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	791b      	ldrb	r3, [r3, #4]
 801236c:	4619      	mov	r1, r3
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 f906 	bl	8012580 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2200      	movs	r2, #0
 8012378:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801237a:	2302      	movs	r3, #2
 801237c:	73fb      	strb	r3, [r7, #15]
      break;
 801237e:	e00a      	b.n	8012396 <USBH_HandleControl+0x396>

    default:
      break;
 8012380:	bf00      	nop
 8012382:	e008      	b.n	8012396 <USBH_HandleControl+0x396>
      break;
 8012384:	bf00      	nop
 8012386:	e006      	b.n	8012396 <USBH_HandleControl+0x396>
      break;
 8012388:	bf00      	nop
 801238a:	e004      	b.n	8012396 <USBH_HandleControl+0x396>
      break;
 801238c:	bf00      	nop
 801238e:	e002      	b.n	8012396 <USBH_HandleControl+0x396>
      break;
 8012390:	bf00      	nop
 8012392:	e000      	b.n	8012396 <USBH_HandleControl+0x396>
      break;
 8012394:	bf00      	nop
  }

  return status;
 8012396:	7bfb      	ldrb	r3, [r7, #15]
}
 8012398:	4618      	mov	r0, r3
 801239a:	3710      	adds	r7, #16
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}

080123a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b088      	sub	sp, #32
 80123a4:	af04      	add	r7, sp, #16
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	4613      	mov	r3, r2
 80123ac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80123ae:	79f9      	ldrb	r1, [r7, #7]
 80123b0:	2300      	movs	r3, #0
 80123b2:	9303      	str	r3, [sp, #12]
 80123b4:	2308      	movs	r3, #8
 80123b6:	9302      	str	r3, [sp, #8]
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	9301      	str	r3, [sp, #4]
 80123bc:	2300      	movs	r3, #0
 80123be:	9300      	str	r3, [sp, #0]
 80123c0:	2300      	movs	r3, #0
 80123c2:	2200      	movs	r2, #0
 80123c4:	68f8      	ldr	r0, [r7, #12]
 80123c6:	f002 ff2c 	bl	8015222 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80123ca:	2300      	movs	r3, #0
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3710      	adds	r7, #16
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b088      	sub	sp, #32
 80123d8:	af04      	add	r7, sp, #16
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	4611      	mov	r1, r2
 80123e0:	461a      	mov	r2, r3
 80123e2:	460b      	mov	r3, r1
 80123e4:	80fb      	strh	r3, [r7, #6]
 80123e6:	4613      	mov	r3, r2
 80123e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d001      	beq.n	80123f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80123f4:	2300      	movs	r3, #0
 80123f6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80123f8:	7979      	ldrb	r1, [r7, #5]
 80123fa:	7e3b      	ldrb	r3, [r7, #24]
 80123fc:	9303      	str	r3, [sp, #12]
 80123fe:	88fb      	ldrh	r3, [r7, #6]
 8012400:	9302      	str	r3, [sp, #8]
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	9301      	str	r3, [sp, #4]
 8012406:	2301      	movs	r3, #1
 8012408:	9300      	str	r3, [sp, #0]
 801240a:	2300      	movs	r3, #0
 801240c:	2200      	movs	r2, #0
 801240e:	68f8      	ldr	r0, [r7, #12]
 8012410:	f002 ff07 	bl	8015222 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8012414:	2300      	movs	r3, #0
}
 8012416:	4618      	mov	r0, r3
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}

0801241e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801241e:	b580      	push	{r7, lr}
 8012420:	b088      	sub	sp, #32
 8012422:	af04      	add	r7, sp, #16
 8012424:	60f8      	str	r0, [r7, #12]
 8012426:	60b9      	str	r1, [r7, #8]
 8012428:	4611      	mov	r1, r2
 801242a:	461a      	mov	r2, r3
 801242c:	460b      	mov	r3, r1
 801242e:	80fb      	strh	r3, [r7, #6]
 8012430:	4613      	mov	r3, r2
 8012432:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012434:	7979      	ldrb	r1, [r7, #5]
 8012436:	2300      	movs	r3, #0
 8012438:	9303      	str	r3, [sp, #12]
 801243a:	88fb      	ldrh	r3, [r7, #6]
 801243c:	9302      	str	r3, [sp, #8]
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	9301      	str	r3, [sp, #4]
 8012442:	2301      	movs	r3, #1
 8012444:	9300      	str	r3, [sp, #0]
 8012446:	2300      	movs	r3, #0
 8012448:	2201      	movs	r2, #1
 801244a:	68f8      	ldr	r0, [r7, #12]
 801244c:	f002 fee9 	bl	8015222 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8012450:	2300      	movs	r3, #0

}
 8012452:	4618      	mov	r0, r3
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}

0801245a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801245a:	b580      	push	{r7, lr}
 801245c:	b088      	sub	sp, #32
 801245e:	af04      	add	r7, sp, #16
 8012460:	60f8      	str	r0, [r7, #12]
 8012462:	60b9      	str	r1, [r7, #8]
 8012464:	4611      	mov	r1, r2
 8012466:	461a      	mov	r2, r3
 8012468:	460b      	mov	r3, r1
 801246a:	80fb      	strh	r3, [r7, #6]
 801246c:	4613      	mov	r3, r2
 801246e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012476:	2b00      	cmp	r3, #0
 8012478:	d001      	beq.n	801247e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801247a:	2300      	movs	r3, #0
 801247c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801247e:	7979      	ldrb	r1, [r7, #5]
 8012480:	7e3b      	ldrb	r3, [r7, #24]
 8012482:	9303      	str	r3, [sp, #12]
 8012484:	88fb      	ldrh	r3, [r7, #6]
 8012486:	9302      	str	r3, [sp, #8]
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	9301      	str	r3, [sp, #4]
 801248c:	2301      	movs	r3, #1
 801248e:	9300      	str	r3, [sp, #0]
 8012490:	2302      	movs	r3, #2
 8012492:	2200      	movs	r2, #0
 8012494:	68f8      	ldr	r0, [r7, #12]
 8012496:	f002 fec4 	bl	8015222 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801249a:	2300      	movs	r3, #0
}
 801249c:	4618      	mov	r0, r3
 801249e:	3710      	adds	r7, #16
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b088      	sub	sp, #32
 80124a8:	af04      	add	r7, sp, #16
 80124aa:	60f8      	str	r0, [r7, #12]
 80124ac:	60b9      	str	r1, [r7, #8]
 80124ae:	4611      	mov	r1, r2
 80124b0:	461a      	mov	r2, r3
 80124b2:	460b      	mov	r3, r1
 80124b4:	80fb      	strh	r3, [r7, #6]
 80124b6:	4613      	mov	r3, r2
 80124b8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80124ba:	7979      	ldrb	r1, [r7, #5]
 80124bc:	2300      	movs	r3, #0
 80124be:	9303      	str	r3, [sp, #12]
 80124c0:	88fb      	ldrh	r3, [r7, #6]
 80124c2:	9302      	str	r3, [sp, #8]
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	9301      	str	r3, [sp, #4]
 80124c8:	2301      	movs	r3, #1
 80124ca:	9300      	str	r3, [sp, #0]
 80124cc:	2302      	movs	r3, #2
 80124ce:	2201      	movs	r2, #1
 80124d0:	68f8      	ldr	r0, [r7, #12]
 80124d2:	f002 fea6 	bl	8015222 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80124d6:	2300      	movs	r3, #0
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3710      	adds	r7, #16
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b086      	sub	sp, #24
 80124e4:	af04      	add	r7, sp, #16
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	4608      	mov	r0, r1
 80124ea:	4611      	mov	r1, r2
 80124ec:	461a      	mov	r2, r3
 80124ee:	4603      	mov	r3, r0
 80124f0:	70fb      	strb	r3, [r7, #3]
 80124f2:	460b      	mov	r3, r1
 80124f4:	70bb      	strb	r3, [r7, #2]
 80124f6:	4613      	mov	r3, r2
 80124f8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80124fa:	7878      	ldrb	r0, [r7, #1]
 80124fc:	78ba      	ldrb	r2, [r7, #2]
 80124fe:	78f9      	ldrb	r1, [r7, #3]
 8012500:	8b3b      	ldrh	r3, [r7, #24]
 8012502:	9302      	str	r3, [sp, #8]
 8012504:	7d3b      	ldrb	r3, [r7, #20]
 8012506:	9301      	str	r3, [sp, #4]
 8012508:	7c3b      	ldrb	r3, [r7, #16]
 801250a:	9300      	str	r3, [sp, #0]
 801250c:	4603      	mov	r3, r0
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f002 fe39 	bl	8015186 <USBH_LL_OpenPipe>

  return USBH_OK;
 8012514:	2300      	movs	r3, #0
}
 8012516:	4618      	mov	r0, r3
 8012518:	3708      	adds	r7, #8
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}

0801251e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801251e:	b580      	push	{r7, lr}
 8012520:	b082      	sub	sp, #8
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]
 8012526:	460b      	mov	r3, r1
 8012528:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801252a:	78fb      	ldrb	r3, [r7, #3]
 801252c:	4619      	mov	r1, r3
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f002 fe58 	bl	80151e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8012534:	2300      	movs	r3, #0
}
 8012536:	4618      	mov	r0, r3
 8012538:	3708      	adds	r7, #8
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}

0801253e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801253e:	b580      	push	{r7, lr}
 8012540:	b084      	sub	sp, #16
 8012542:	af00      	add	r7, sp, #0
 8012544:	6078      	str	r0, [r7, #4]
 8012546:	460b      	mov	r3, r1
 8012548:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f000 f836 	bl	80125bc <USBH_GetFreePipe>
 8012550:	4603      	mov	r3, r0
 8012552:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8012554:	89fb      	ldrh	r3, [r7, #14]
 8012556:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801255a:	4293      	cmp	r3, r2
 801255c:	d00a      	beq.n	8012574 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801255e:	78fa      	ldrb	r2, [r7, #3]
 8012560:	89fb      	ldrh	r3, [r7, #14]
 8012562:	f003 030f 	and.w	r3, r3, #15
 8012566:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801256a:	6879      	ldr	r1, [r7, #4]
 801256c:	33e0      	adds	r3, #224	@ 0xe0
 801256e:	009b      	lsls	r3, r3, #2
 8012570:	440b      	add	r3, r1
 8012572:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8012574:	89fb      	ldrh	r3, [r7, #14]
 8012576:	b2db      	uxtb	r3, r3
}
 8012578:	4618      	mov	r0, r3
 801257a:	3710      	adds	r7, #16
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	460b      	mov	r3, r1
 801258a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 801258c:	78fb      	ldrb	r3, [r7, #3]
 801258e:	2b0f      	cmp	r3, #15
 8012590:	d80d      	bhi.n	80125ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8012592:	78fb      	ldrb	r3, [r7, #3]
 8012594:	687a      	ldr	r2, [r7, #4]
 8012596:	33e0      	adds	r3, #224	@ 0xe0
 8012598:	009b      	lsls	r3, r3, #2
 801259a:	4413      	add	r3, r2
 801259c:	685a      	ldr	r2, [r3, #4]
 801259e:	78fb      	ldrb	r3, [r7, #3]
 80125a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80125a4:	6879      	ldr	r1, [r7, #4]
 80125a6:	33e0      	adds	r3, #224	@ 0xe0
 80125a8:	009b      	lsls	r3, r3, #2
 80125aa:	440b      	add	r3, r1
 80125ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80125ae:	2300      	movs	r3, #0
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	370c      	adds	r7, #12
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr

080125bc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80125bc:	b480      	push	{r7}
 80125be:	b085      	sub	sp, #20
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80125c4:	2300      	movs	r3, #0
 80125c6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80125c8:	2300      	movs	r3, #0
 80125ca:	73fb      	strb	r3, [r7, #15]
 80125cc:	e00f      	b.n	80125ee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80125ce:	7bfb      	ldrb	r3, [r7, #15]
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	33e0      	adds	r3, #224	@ 0xe0
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	4413      	add	r3, r2
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d102      	bne.n	80125e8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80125e2:	7bfb      	ldrb	r3, [r7, #15]
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	e007      	b.n	80125f8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80125e8:	7bfb      	ldrb	r3, [r7, #15]
 80125ea:	3301      	adds	r3, #1
 80125ec:	73fb      	strb	r3, [r7, #15]
 80125ee:	7bfb      	ldrb	r3, [r7, #15]
 80125f0:	2b0f      	cmp	r3, #15
 80125f2:	d9ec      	bls.n	80125ce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80125f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3714      	adds	r7, #20
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr

08012604 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012604:	b480      	push	{r7}
 8012606:	b087      	sub	sp, #28
 8012608:	af00      	add	r7, sp, #0
 801260a:	60f8      	str	r0, [r7, #12]
 801260c:	60b9      	str	r1, [r7, #8]
 801260e:	4613      	mov	r3, r2
 8012610:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012612:	2301      	movs	r3, #1
 8012614:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012616:	2300      	movs	r3, #0
 8012618:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801261a:	4b1f      	ldr	r3, [pc, #124]	@ (8012698 <FATFS_LinkDriverEx+0x94>)
 801261c:	7a5b      	ldrb	r3, [r3, #9]
 801261e:	b2db      	uxtb	r3, r3
 8012620:	2b00      	cmp	r3, #0
 8012622:	d131      	bne.n	8012688 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012624:	4b1c      	ldr	r3, [pc, #112]	@ (8012698 <FATFS_LinkDriverEx+0x94>)
 8012626:	7a5b      	ldrb	r3, [r3, #9]
 8012628:	b2db      	uxtb	r3, r3
 801262a:	461a      	mov	r2, r3
 801262c:	4b1a      	ldr	r3, [pc, #104]	@ (8012698 <FATFS_LinkDriverEx+0x94>)
 801262e:	2100      	movs	r1, #0
 8012630:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012632:	4b19      	ldr	r3, [pc, #100]	@ (8012698 <FATFS_LinkDriverEx+0x94>)
 8012634:	7a5b      	ldrb	r3, [r3, #9]
 8012636:	b2db      	uxtb	r3, r3
 8012638:	4a17      	ldr	r2, [pc, #92]	@ (8012698 <FATFS_LinkDriverEx+0x94>)
 801263a:	009b      	lsls	r3, r3, #2
 801263c:	4413      	add	r3, r2
 801263e:	68fa      	ldr	r2, [r7, #12]
 8012640:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012642:	4b15      	ldr	r3, [pc, #84]	@ (8012698 <FATFS_LinkDriverEx+0x94>)
 8012644:	7a5b      	ldrb	r3, [r3, #9]
 8012646:	b2db      	uxtb	r3, r3
 8012648:	461a      	mov	r2, r3
 801264a:	4b13      	ldr	r3, [pc, #76]	@ (8012698 <FATFS_LinkDriverEx+0x94>)
 801264c:	4413      	add	r3, r2
 801264e:	79fa      	ldrb	r2, [r7, #7]
 8012650:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012652:	4b11      	ldr	r3, [pc, #68]	@ (8012698 <FATFS_LinkDriverEx+0x94>)
 8012654:	7a5b      	ldrb	r3, [r3, #9]
 8012656:	b2db      	uxtb	r3, r3
 8012658:	1c5a      	adds	r2, r3, #1
 801265a:	b2d1      	uxtb	r1, r2
 801265c:	4a0e      	ldr	r2, [pc, #56]	@ (8012698 <FATFS_LinkDriverEx+0x94>)
 801265e:	7251      	strb	r1, [r2, #9]
 8012660:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012662:	7dbb      	ldrb	r3, [r7, #22]
 8012664:	3330      	adds	r3, #48	@ 0x30
 8012666:	b2da      	uxtb	r2, r3
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	3301      	adds	r3, #1
 8012670:	223a      	movs	r2, #58	@ 0x3a
 8012672:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	3302      	adds	r3, #2
 8012678:	222f      	movs	r2, #47	@ 0x2f
 801267a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	3303      	adds	r3, #3
 8012680:	2200      	movs	r2, #0
 8012682:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012684:	2300      	movs	r3, #0
 8012686:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012688:	7dfb      	ldrb	r3, [r7, #23]
}
 801268a:	4618      	mov	r0, r3
 801268c:	371c      	adds	r7, #28
 801268e:	46bd      	mov	sp, r7
 8012690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012694:	4770      	bx	lr
 8012696:	bf00      	nop
 8012698:	20000fec 	.word	0x20000fec

0801269c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80126a6:	2200      	movs	r2, #0
 80126a8:	6839      	ldr	r1, [r7, #0]
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f7ff ffaa 	bl	8012604 <FATFS_LinkDriverEx>
 80126b0:	4603      	mov	r3, r0
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3708      	adds	r7, #8
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}

080126ba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80126ba:	b480      	push	{r7}
 80126bc:	b085      	sub	sp, #20
 80126be:	af00      	add	r7, sp, #0
 80126c0:	4603      	mov	r3, r0
 80126c2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80126c4:	2300      	movs	r3, #0
 80126c6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80126c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126cc:	2b84      	cmp	r3, #132	@ 0x84
 80126ce:	d005      	beq.n	80126dc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80126d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	4413      	add	r3, r2
 80126d8:	3303      	adds	r3, #3
 80126da:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80126dc:	68fb      	ldr	r3, [r7, #12]
}
 80126de:	4618      	mov	r0, r3
 80126e0:	3714      	adds	r7, #20
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr

080126ea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80126ea:	b480      	push	{r7}
 80126ec:	b083      	sub	sp, #12
 80126ee:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126f0:	f3ef 8305 	mrs	r3, IPSR
 80126f4:	607b      	str	r3, [r7, #4]
  return(result);
 80126f6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	bf14      	ite	ne
 80126fc:	2301      	movne	r3, #1
 80126fe:	2300      	moveq	r3, #0
 8012700:	b2db      	uxtb	r3, r3
}
 8012702:	4618      	mov	r0, r3
 8012704:	370c      	adds	r7, #12
 8012706:	46bd      	mov	sp, r7
 8012708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270c:	4770      	bx	lr

0801270e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801270e:	b580      	push	{r7, lr}
 8012710:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012712:	f001 f9cd 	bl	8013ab0 <vTaskStartScheduler>
  
  return osOK;
 8012716:	2300      	movs	r3, #0
}
 8012718:	4618      	mov	r0, r3
 801271a:	bd80      	pop	{r7, pc}

0801271c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8012720:	f001 fe2e 	bl	8014380 <xTaskGetSchedulerState>
 8012724:	4603      	mov	r3, r0
 8012726:	2b01      	cmp	r3, #1
 8012728:	d101      	bne.n	801272e <osKernelRunning+0x12>
    return 0;
 801272a:	2300      	movs	r3, #0
 801272c:	e000      	b.n	8012730 <osKernelRunning+0x14>
  else
    return 1;
 801272e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8012730:	4618      	mov	r0, r3
 8012732:	bd80      	pop	{r7, pc}

08012734 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8012738:	f7ff ffd7 	bl	80126ea <inHandlerMode>
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	d003      	beq.n	801274a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8012742:	f001 fad9 	bl	8013cf8 <xTaskGetTickCountFromISR>
 8012746:	4603      	mov	r3, r0
 8012748:	e002      	b.n	8012750 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801274a:	f001 fac5 	bl	8013cd8 <xTaskGetTickCount>
 801274e:	4603      	mov	r3, r0
  }
}
 8012750:	4618      	mov	r0, r3
 8012752:	bd80      	pop	{r7, pc}

08012754 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012756:	b089      	sub	sp, #36	@ 0x24
 8012758:	af04      	add	r7, sp, #16
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	695b      	ldr	r3, [r3, #20]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d020      	beq.n	80127a8 <osThreadCreate+0x54>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	699b      	ldr	r3, [r3, #24]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d01c      	beq.n	80127a8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	685c      	ldr	r4, [r3, #4]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	691e      	ldr	r6, [r3, #16]
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012780:	4618      	mov	r0, r3
 8012782:	f7ff ff9a 	bl	80126ba <makeFreeRtosPriority>
 8012786:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	695b      	ldr	r3, [r3, #20]
 801278c:	687a      	ldr	r2, [r7, #4]
 801278e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012790:	9202      	str	r2, [sp, #8]
 8012792:	9301      	str	r3, [sp, #4]
 8012794:	9100      	str	r1, [sp, #0]
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	4632      	mov	r2, r6
 801279a:	4629      	mov	r1, r5
 801279c:	4620      	mov	r0, r4
 801279e:	f000 ffa5 	bl	80136ec <xTaskCreateStatic>
 80127a2:	4603      	mov	r3, r0
 80127a4:	60fb      	str	r3, [r7, #12]
 80127a6:	e01c      	b.n	80127e2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	685c      	ldr	r4, [r3, #4]
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80127b4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80127bc:	4618      	mov	r0, r3
 80127be:	f7ff ff7c 	bl	80126ba <makeFreeRtosPriority>
 80127c2:	4602      	mov	r2, r0
 80127c4:	f107 030c 	add.w	r3, r7, #12
 80127c8:	9301      	str	r3, [sp, #4]
 80127ca:	9200      	str	r2, [sp, #0]
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	4632      	mov	r2, r6
 80127d0:	4629      	mov	r1, r5
 80127d2:	4620      	mov	r0, r4
 80127d4:	f000 fff0 	bl	80137b8 <xTaskCreate>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b01      	cmp	r3, #1
 80127dc:	d001      	beq.n	80127e2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80127de:	2300      	movs	r3, #0
 80127e0:	e000      	b.n	80127e4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80127e2:	68fb      	ldr	r3, [r7, #12]
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3714      	adds	r7, #20
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080127ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b084      	sub	sp, #16
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d001      	beq.n	8012802 <osDelay+0x16>
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	e000      	b.n	8012804 <osDelay+0x18>
 8012802:	2301      	movs	r3, #1
 8012804:	4618      	mov	r0, r3
 8012806:	f001 f91b 	bl	8013a40 <vTaskDelay>
  
  return osOK;
 801280a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801280c:	4618      	mov	r0, r3
 801280e:	3710      	adds	r7, #16
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012814:	b590      	push	{r4, r7, lr}
 8012816:	b085      	sub	sp, #20
 8012818:	af02      	add	r7, sp, #8
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	689b      	ldr	r3, [r3, #8]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d011      	beq.n	801284a <osMessageCreate+0x36>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	68db      	ldr	r3, [r3, #12]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d00d      	beq.n	801284a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6818      	ldr	r0, [r3, #0]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6859      	ldr	r1, [r3, #4]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	689a      	ldr	r2, [r3, #8]
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	2400      	movs	r4, #0
 8012840:	9400      	str	r4, [sp, #0]
 8012842:	f000 f9f9 	bl	8012c38 <xQueueGenericCreateStatic>
 8012846:	4603      	mov	r3, r0
 8012848:	e008      	b.n	801285c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6818      	ldr	r0, [r3, #0]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	685b      	ldr	r3, [r3, #4]
 8012852:	2200      	movs	r2, #0
 8012854:	4619      	mov	r1, r3
 8012856:	f000 fa76 	bl	8012d46 <xQueueGenericCreate>
 801285a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801285c:	4618      	mov	r0, r3
 801285e:	370c      	adds	r7, #12
 8012860:	46bd      	mov	sp, r7
 8012862:	bd90      	pop	{r4, r7, pc}

08012864 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b086      	sub	sp, #24
 8012868:	af00      	add	r7, sp, #0
 801286a:	60f8      	str	r0, [r7, #12]
 801286c:	60b9      	str	r1, [r7, #8]
 801286e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012870:	2300      	movs	r3, #0
 8012872:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d101      	bne.n	8012882 <osMessagePut+0x1e>
    ticks = 1;
 801287e:	2301      	movs	r3, #1
 8012880:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012882:	f7ff ff32 	bl	80126ea <inHandlerMode>
 8012886:	4603      	mov	r3, r0
 8012888:	2b00      	cmp	r3, #0
 801288a:	d018      	beq.n	80128be <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801288c:	f107 0210 	add.w	r2, r7, #16
 8012890:	f107 0108 	add.w	r1, r7, #8
 8012894:	2300      	movs	r3, #0
 8012896:	68f8      	ldr	r0, [r7, #12]
 8012898:	f000 fbc2 	bl	8013020 <xQueueGenericSendFromISR>
 801289c:	4603      	mov	r3, r0
 801289e:	2b01      	cmp	r3, #1
 80128a0:	d001      	beq.n	80128a6 <osMessagePut+0x42>
      return osErrorOS;
 80128a2:	23ff      	movs	r3, #255	@ 0xff
 80128a4:	e018      	b.n	80128d8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d014      	beq.n	80128d6 <osMessagePut+0x72>
 80128ac:	4b0c      	ldr	r3, [pc, #48]	@ (80128e0 <osMessagePut+0x7c>)
 80128ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128b2:	601a      	str	r2, [r3, #0]
 80128b4:	f3bf 8f4f 	dsb	sy
 80128b8:	f3bf 8f6f 	isb	sy
 80128bc:	e00b      	b.n	80128d6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80128be:	f107 0108 	add.w	r1, r7, #8
 80128c2:	2300      	movs	r3, #0
 80128c4:	697a      	ldr	r2, [r7, #20]
 80128c6:	68f8      	ldr	r0, [r7, #12]
 80128c8:	f000 faa0 	bl	8012e0c <xQueueGenericSend>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d001      	beq.n	80128d6 <osMessagePut+0x72>
      return osErrorOS;
 80128d2:	23ff      	movs	r3, #255	@ 0xff
 80128d4:	e000      	b.n	80128d8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80128d6:	2300      	movs	r3, #0
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3718      	adds	r7, #24
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	e000ed04 	.word	0xe000ed04

080128e4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80128e4:	b590      	push	{r4, r7, lr}
 80128e6:	b08b      	sub	sp, #44	@ 0x2c
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	60f8      	str	r0, [r7, #12]
 80128ec:	60b9      	str	r1, [r7, #8]
 80128ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80128f4:	2300      	movs	r3, #0
 80128f6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d10a      	bne.n	8012914 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80128fe:	2380      	movs	r3, #128	@ 0x80
 8012900:	617b      	str	r3, [r7, #20]
    return event;
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	461c      	mov	r4, r3
 8012906:	f107 0314 	add.w	r3, r7, #20
 801290a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801290e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012912:	e054      	b.n	80129be <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012914:	2300      	movs	r3, #0
 8012916:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012918:	2300      	movs	r3, #0
 801291a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012922:	d103      	bne.n	801292c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012924:	f04f 33ff 	mov.w	r3, #4294967295
 8012928:	627b      	str	r3, [r7, #36]	@ 0x24
 801292a:	e009      	b.n	8012940 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d006      	beq.n	8012940 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8012936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012938:	2b00      	cmp	r3, #0
 801293a:	d101      	bne.n	8012940 <osMessageGet+0x5c>
      ticks = 1;
 801293c:	2301      	movs	r3, #1
 801293e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012940:	f7ff fed3 	bl	80126ea <inHandlerMode>
 8012944:	4603      	mov	r3, r0
 8012946:	2b00      	cmp	r3, #0
 8012948:	d01c      	beq.n	8012984 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801294a:	f107 0220 	add.w	r2, r7, #32
 801294e:	f107 0314 	add.w	r3, r7, #20
 8012952:	3304      	adds	r3, #4
 8012954:	4619      	mov	r1, r3
 8012956:	68b8      	ldr	r0, [r7, #8]
 8012958:	f000 fcee 	bl	8013338 <xQueueReceiveFromISR>
 801295c:	4603      	mov	r3, r0
 801295e:	2b01      	cmp	r3, #1
 8012960:	d102      	bne.n	8012968 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012962:	2310      	movs	r3, #16
 8012964:	617b      	str	r3, [r7, #20]
 8012966:	e001      	b.n	801296c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012968:	2300      	movs	r3, #0
 801296a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801296c:	6a3b      	ldr	r3, [r7, #32]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d01d      	beq.n	80129ae <osMessageGet+0xca>
 8012972:	4b15      	ldr	r3, [pc, #84]	@ (80129c8 <osMessageGet+0xe4>)
 8012974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012978:	601a      	str	r2, [r3, #0]
 801297a:	f3bf 8f4f 	dsb	sy
 801297e:	f3bf 8f6f 	isb	sy
 8012982:	e014      	b.n	80129ae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012984:	f107 0314 	add.w	r3, r7, #20
 8012988:	3304      	adds	r3, #4
 801298a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801298c:	4619      	mov	r1, r3
 801298e:	68b8      	ldr	r0, [r7, #8]
 8012990:	f000 fbea 	bl	8013168 <xQueueReceive>
 8012994:	4603      	mov	r3, r0
 8012996:	2b01      	cmp	r3, #1
 8012998:	d102      	bne.n	80129a0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801299a:	2310      	movs	r3, #16
 801299c:	617b      	str	r3, [r7, #20]
 801299e:	e006      	b.n	80129ae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80129a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d101      	bne.n	80129aa <osMessageGet+0xc6>
 80129a6:	2300      	movs	r3, #0
 80129a8:	e000      	b.n	80129ac <osMessageGet+0xc8>
 80129aa:	2340      	movs	r3, #64	@ 0x40
 80129ac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	461c      	mov	r4, r3
 80129b2:	f107 0314 	add.w	r3, r7, #20
 80129b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80129ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80129be:	68f8      	ldr	r0, [r7, #12]
 80129c0:	372c      	adds	r7, #44	@ 0x2c
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd90      	pop	{r4, r7, pc}
 80129c6:	bf00      	nop
 80129c8:	e000ed04 	.word	0xe000ed04

080129cc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b082      	sub	sp, #8
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80129d4:	f7ff fe89 	bl	80126ea <inHandlerMode>
 80129d8:	4603      	mov	r3, r0
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d004      	beq.n	80129e8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f000 fd53 	bl	801348a <uxQueueMessagesWaitingFromISR>
 80129e4:	4603      	mov	r3, r0
 80129e6:	e003      	b.n	80129f0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f000 fd2d 	bl	8013448 <uxQueueMessagesWaiting>
 80129ee:	4603      	mov	r3, r0
  }
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	3708      	adds	r7, #8
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}

080129f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80129f8:	b480      	push	{r7}
 80129fa:	b083      	sub	sp, #12
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f103 0208 	add.w	r2, r3, #8
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8012a10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f103 0208 	add.w	r2, r3, #8
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f103 0208 	add.w	r2, r3, #8
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012a2c:	bf00      	nop
 8012a2e:	370c      	adds	r7, #12
 8012a30:	46bd      	mov	sp, r7
 8012a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a36:	4770      	bx	lr

08012a38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2200      	movs	r2, #0
 8012a44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012a46:	bf00      	nop
 8012a48:	370c      	adds	r7, #12
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a50:	4770      	bx	lr

08012a52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012a52:	b480      	push	{r7}
 8012a54:	b085      	sub	sp, #20
 8012a56:	af00      	add	r7, sp, #0
 8012a58:	6078      	str	r0, [r7, #4]
 8012a5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	685b      	ldr	r3, [r3, #4]
 8012a60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	68fa      	ldr	r2, [r7, #12]
 8012a66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	689a      	ldr	r2, [r3, #8]
 8012a6c:	683b      	ldr	r3, [r7, #0]
 8012a6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	689b      	ldr	r3, [r3, #8]
 8012a74:	683a      	ldr	r2, [r7, #0]
 8012a76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	683a      	ldr	r2, [r7, #0]
 8012a7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	1c5a      	adds	r2, r3, #1
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	601a      	str	r2, [r3, #0]
}
 8012a8e:	bf00      	nop
 8012a90:	3714      	adds	r7, #20
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr

08012a9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012a9a:	b480      	push	{r7}
 8012a9c:	b085      	sub	sp, #20
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	6078      	str	r0, [r7, #4]
 8012aa2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ab0:	d103      	bne.n	8012aba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	691b      	ldr	r3, [r3, #16]
 8012ab6:	60fb      	str	r3, [r7, #12]
 8012ab8:	e00c      	b.n	8012ad4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	3308      	adds	r3, #8
 8012abe:	60fb      	str	r3, [r7, #12]
 8012ac0:	e002      	b.n	8012ac8 <vListInsert+0x2e>
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	60fb      	str	r3, [r7, #12]
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	685b      	ldr	r3, [r3, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	68ba      	ldr	r2, [r7, #8]
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d2f6      	bcs.n	8012ac2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	685a      	ldr	r2, [r3, #4]
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	683a      	ldr	r2, [r7, #0]
 8012ae2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	68fa      	ldr	r2, [r7, #12]
 8012ae8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	683a      	ldr	r2, [r7, #0]
 8012aee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	1c5a      	adds	r2, r3, #1
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	601a      	str	r2, [r3, #0]
}
 8012b00:	bf00      	nop
 8012b02:	3714      	adds	r7, #20
 8012b04:	46bd      	mov	sp, r7
 8012b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0a:	4770      	bx	lr

08012b0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b085      	sub	sp, #20
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	691b      	ldr	r3, [r3, #16]
 8012b18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	687a      	ldr	r2, [r7, #4]
 8012b20:	6892      	ldr	r2, [r2, #8]
 8012b22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	689b      	ldr	r3, [r3, #8]
 8012b28:	687a      	ldr	r2, [r7, #4]
 8012b2a:	6852      	ldr	r2, [r2, #4]
 8012b2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	687a      	ldr	r2, [r7, #4]
 8012b34:	429a      	cmp	r2, r3
 8012b36:	d103      	bne.n	8012b40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	689a      	ldr	r2, [r3, #8]
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2200      	movs	r2, #0
 8012b44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	1e5a      	subs	r2, r3, #1
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	681b      	ldr	r3, [r3, #0]
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	3714      	adds	r7, #20
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d10d      	bne.n	8012b90 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b78:	b672      	cpsid	i
 8012b7a:	f383 8811 	msr	BASEPRI, r3
 8012b7e:	f3bf 8f6f 	isb	sy
 8012b82:	f3bf 8f4f 	dsb	sy
 8012b86:	b662      	cpsie	i
 8012b88:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012b8a:	bf00      	nop
 8012b8c:	bf00      	nop
 8012b8e:	e7fd      	b.n	8012b8c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8012b90:	f001 fe14 	bl	80147bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	681a      	ldr	r2, [r3, #0]
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b9c:	68f9      	ldr	r1, [r7, #12]
 8012b9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012ba0:	fb01 f303 	mul.w	r3, r1, r3
 8012ba4:	441a      	add	r2, r3
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	2200      	movs	r2, #0
 8012bae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	681a      	ldr	r2, [r3, #0]
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	681a      	ldr	r2, [r3, #0]
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bc0:	3b01      	subs	r3, #1
 8012bc2:	68f9      	ldr	r1, [r7, #12]
 8012bc4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012bc6:	fb01 f303 	mul.w	r3, r1, r3
 8012bca:	441a      	add	r2, r3
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	22ff      	movs	r2, #255	@ 0xff
 8012bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	22ff      	movs	r2, #255	@ 0xff
 8012bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d114      	bne.n	8012c10 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	691b      	ldr	r3, [r3, #16]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d01a      	beq.n	8012c24 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	3310      	adds	r3, #16
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f001 f9fa 	bl	8013fec <xTaskRemoveFromEventList>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d012      	beq.n	8012c24 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8012c34 <xQueueGenericReset+0xd4>)
 8012c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c04:	601a      	str	r2, [r3, #0]
 8012c06:	f3bf 8f4f 	dsb	sy
 8012c0a:	f3bf 8f6f 	isb	sy
 8012c0e:	e009      	b.n	8012c24 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	3310      	adds	r3, #16
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7ff feef 	bl	80129f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	3324      	adds	r3, #36	@ 0x24
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7ff feea 	bl	80129f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012c24:	f001 fe00 	bl	8014828 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012c28:	2301      	movs	r3, #1
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	3710      	adds	r7, #16
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bd80      	pop	{r7, pc}
 8012c32:	bf00      	nop
 8012c34:	e000ed04 	.word	0xe000ed04

08012c38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b08e      	sub	sp, #56	@ 0x38
 8012c3c:	af02      	add	r7, sp, #8
 8012c3e:	60f8      	str	r0, [r7, #12]
 8012c40:	60b9      	str	r1, [r7, #8]
 8012c42:	607a      	str	r2, [r7, #4]
 8012c44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d10d      	bne.n	8012c68 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8012c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c50:	b672      	cpsid	i
 8012c52:	f383 8811 	msr	BASEPRI, r3
 8012c56:	f3bf 8f6f 	isb	sy
 8012c5a:	f3bf 8f4f 	dsb	sy
 8012c5e:	b662      	cpsie	i
 8012c60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012c62:	bf00      	nop
 8012c64:	bf00      	nop
 8012c66:	e7fd      	b.n	8012c64 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d10d      	bne.n	8012c8a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8012c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c72:	b672      	cpsid	i
 8012c74:	f383 8811 	msr	BASEPRI, r3
 8012c78:	f3bf 8f6f 	isb	sy
 8012c7c:	f3bf 8f4f 	dsb	sy
 8012c80:	b662      	cpsie	i
 8012c82:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012c84:	bf00      	nop
 8012c86:	bf00      	nop
 8012c88:	e7fd      	b.n	8012c86 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d002      	beq.n	8012c96 <xQueueGenericCreateStatic+0x5e>
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d001      	beq.n	8012c9a <xQueueGenericCreateStatic+0x62>
 8012c96:	2301      	movs	r3, #1
 8012c98:	e000      	b.n	8012c9c <xQueueGenericCreateStatic+0x64>
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d10d      	bne.n	8012cbc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8012ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ca4:	b672      	cpsid	i
 8012ca6:	f383 8811 	msr	BASEPRI, r3
 8012caa:	f3bf 8f6f 	isb	sy
 8012cae:	f3bf 8f4f 	dsb	sy
 8012cb2:	b662      	cpsie	i
 8012cb4:	623b      	str	r3, [r7, #32]
}
 8012cb6:	bf00      	nop
 8012cb8:	bf00      	nop
 8012cba:	e7fd      	b.n	8012cb8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d102      	bne.n	8012cc8 <xQueueGenericCreateStatic+0x90>
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d101      	bne.n	8012ccc <xQueueGenericCreateStatic+0x94>
 8012cc8:	2301      	movs	r3, #1
 8012cca:	e000      	b.n	8012cce <xQueueGenericCreateStatic+0x96>
 8012ccc:	2300      	movs	r3, #0
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d10d      	bne.n	8012cee <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8012cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cd6:	b672      	cpsid	i
 8012cd8:	f383 8811 	msr	BASEPRI, r3
 8012cdc:	f3bf 8f6f 	isb	sy
 8012ce0:	f3bf 8f4f 	dsb	sy
 8012ce4:	b662      	cpsie	i
 8012ce6:	61fb      	str	r3, [r7, #28]
}
 8012ce8:	bf00      	nop
 8012cea:	bf00      	nop
 8012cec:	e7fd      	b.n	8012cea <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012cee:	2348      	movs	r3, #72	@ 0x48
 8012cf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	2b48      	cmp	r3, #72	@ 0x48
 8012cf6:	d00d      	beq.n	8012d14 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8012cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cfc:	b672      	cpsid	i
 8012cfe:	f383 8811 	msr	BASEPRI, r3
 8012d02:	f3bf 8f6f 	isb	sy
 8012d06:	f3bf 8f4f 	dsb	sy
 8012d0a:	b662      	cpsie	i
 8012d0c:	61bb      	str	r3, [r7, #24]
}
 8012d0e:	bf00      	nop
 8012d10:	bf00      	nop
 8012d12:	e7fd      	b.n	8012d10 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012d14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d00d      	beq.n	8012d3c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d22:	2201      	movs	r2, #1
 8012d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012d28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d2e:	9300      	str	r3, [sp, #0]
 8012d30:	4613      	mov	r3, r2
 8012d32:	687a      	ldr	r2, [r7, #4]
 8012d34:	68b9      	ldr	r1, [r7, #8]
 8012d36:	68f8      	ldr	r0, [r7, #12]
 8012d38:	f000 f848 	bl	8012dcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3730      	adds	r7, #48	@ 0x30
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}

08012d46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012d46:	b580      	push	{r7, lr}
 8012d48:	b08a      	sub	sp, #40	@ 0x28
 8012d4a:	af02      	add	r7, sp, #8
 8012d4c:	60f8      	str	r0, [r7, #12]
 8012d4e:	60b9      	str	r1, [r7, #8]
 8012d50:	4613      	mov	r3, r2
 8012d52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d10d      	bne.n	8012d76 <xQueueGenericCreate+0x30>
	__asm volatile
 8012d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d5e:	b672      	cpsid	i
 8012d60:	f383 8811 	msr	BASEPRI, r3
 8012d64:	f3bf 8f6f 	isb	sy
 8012d68:	f3bf 8f4f 	dsb	sy
 8012d6c:	b662      	cpsie	i
 8012d6e:	613b      	str	r3, [r7, #16]
}
 8012d70:	bf00      	nop
 8012d72:	bf00      	nop
 8012d74:	e7fd      	b.n	8012d72 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d102      	bne.n	8012d82 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	61fb      	str	r3, [r7, #28]
 8012d80:	e004      	b.n	8012d8c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	68ba      	ldr	r2, [r7, #8]
 8012d86:	fb02 f303 	mul.w	r3, r2, r3
 8012d8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	3348      	adds	r3, #72	@ 0x48
 8012d90:	4618      	mov	r0, r3
 8012d92:	f001 fe41 	bl	8014a18 <pvPortMalloc>
 8012d96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d011      	beq.n	8012dc2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012d9e:	69bb      	ldr	r3, [r7, #24]
 8012da0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	3348      	adds	r3, #72	@ 0x48
 8012da6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012da8:	69bb      	ldr	r3, [r7, #24]
 8012daa:	2200      	movs	r2, #0
 8012dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012db0:	79fa      	ldrb	r2, [r7, #7]
 8012db2:	69bb      	ldr	r3, [r7, #24]
 8012db4:	9300      	str	r3, [sp, #0]
 8012db6:	4613      	mov	r3, r2
 8012db8:	697a      	ldr	r2, [r7, #20]
 8012dba:	68b9      	ldr	r1, [r7, #8]
 8012dbc:	68f8      	ldr	r0, [r7, #12]
 8012dbe:	f000 f805 	bl	8012dcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012dc2:	69bb      	ldr	r3, [r7, #24]
	}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3720      	adds	r7, #32
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b084      	sub	sp, #16
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	60f8      	str	r0, [r7, #12]
 8012dd4:	60b9      	str	r1, [r7, #8]
 8012dd6:	607a      	str	r2, [r7, #4]
 8012dd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d103      	bne.n	8012de8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012de0:	69bb      	ldr	r3, [r7, #24]
 8012de2:	69ba      	ldr	r2, [r7, #24]
 8012de4:	601a      	str	r2, [r3, #0]
 8012de6:	e002      	b.n	8012dee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012dee:	69bb      	ldr	r3, [r7, #24]
 8012df0:	68fa      	ldr	r2, [r7, #12]
 8012df2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	68ba      	ldr	r2, [r7, #8]
 8012df8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012dfa:	2101      	movs	r1, #1
 8012dfc:	69b8      	ldr	r0, [r7, #24]
 8012dfe:	f7ff feaf 	bl	8012b60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012e02:	bf00      	nop
 8012e04:	3710      	adds	r7, #16
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
	...

08012e0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b08e      	sub	sp, #56	@ 0x38
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	60f8      	str	r0, [r7, #12]
 8012e14:	60b9      	str	r1, [r7, #8]
 8012e16:	607a      	str	r2, [r7, #4]
 8012e18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d10d      	bne.n	8012e44 <xQueueGenericSend+0x38>
	__asm volatile
 8012e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e2c:	b672      	cpsid	i
 8012e2e:	f383 8811 	msr	BASEPRI, r3
 8012e32:	f3bf 8f6f 	isb	sy
 8012e36:	f3bf 8f4f 	dsb	sy
 8012e3a:	b662      	cpsie	i
 8012e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012e3e:	bf00      	nop
 8012e40:	bf00      	nop
 8012e42:	e7fd      	b.n	8012e40 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d103      	bne.n	8012e52 <xQueueGenericSend+0x46>
 8012e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d101      	bne.n	8012e56 <xQueueGenericSend+0x4a>
 8012e52:	2301      	movs	r3, #1
 8012e54:	e000      	b.n	8012e58 <xQueueGenericSend+0x4c>
 8012e56:	2300      	movs	r3, #0
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d10d      	bne.n	8012e78 <xQueueGenericSend+0x6c>
	__asm volatile
 8012e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e60:	b672      	cpsid	i
 8012e62:	f383 8811 	msr	BASEPRI, r3
 8012e66:	f3bf 8f6f 	isb	sy
 8012e6a:	f3bf 8f4f 	dsb	sy
 8012e6e:	b662      	cpsie	i
 8012e70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012e72:	bf00      	nop
 8012e74:	bf00      	nop
 8012e76:	e7fd      	b.n	8012e74 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	2b02      	cmp	r3, #2
 8012e7c:	d103      	bne.n	8012e86 <xQueueGenericSend+0x7a>
 8012e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e82:	2b01      	cmp	r3, #1
 8012e84:	d101      	bne.n	8012e8a <xQueueGenericSend+0x7e>
 8012e86:	2301      	movs	r3, #1
 8012e88:	e000      	b.n	8012e8c <xQueueGenericSend+0x80>
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d10d      	bne.n	8012eac <xQueueGenericSend+0xa0>
	__asm volatile
 8012e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e94:	b672      	cpsid	i
 8012e96:	f383 8811 	msr	BASEPRI, r3
 8012e9a:	f3bf 8f6f 	isb	sy
 8012e9e:	f3bf 8f4f 	dsb	sy
 8012ea2:	b662      	cpsie	i
 8012ea4:	623b      	str	r3, [r7, #32]
}
 8012ea6:	bf00      	nop
 8012ea8:	bf00      	nop
 8012eaa:	e7fd      	b.n	8012ea8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012eac:	f001 fa68 	bl	8014380 <xTaskGetSchedulerState>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d102      	bne.n	8012ebc <xQueueGenericSend+0xb0>
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d101      	bne.n	8012ec0 <xQueueGenericSend+0xb4>
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	e000      	b.n	8012ec2 <xQueueGenericSend+0xb6>
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d10d      	bne.n	8012ee2 <xQueueGenericSend+0xd6>
	__asm volatile
 8012ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012eca:	b672      	cpsid	i
 8012ecc:	f383 8811 	msr	BASEPRI, r3
 8012ed0:	f3bf 8f6f 	isb	sy
 8012ed4:	f3bf 8f4f 	dsb	sy
 8012ed8:	b662      	cpsie	i
 8012eda:	61fb      	str	r3, [r7, #28]
}
 8012edc:	bf00      	nop
 8012ede:	bf00      	nop
 8012ee0:	e7fd      	b.n	8012ede <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012ee2:	f001 fc6b 	bl	80147bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ee8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d302      	bcc.n	8012ef8 <xQueueGenericSend+0xec>
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	2b02      	cmp	r3, #2
 8012ef6:	d129      	bne.n	8012f4c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012ef8:	683a      	ldr	r2, [r7, #0]
 8012efa:	68b9      	ldr	r1, [r7, #8]
 8012efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012efe:	f000 fae5 	bl	80134cc <prvCopyDataToQueue>
 8012f02:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d010      	beq.n	8012f2e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f0e:	3324      	adds	r3, #36	@ 0x24
 8012f10:	4618      	mov	r0, r3
 8012f12:	f001 f86b 	bl	8013fec <xTaskRemoveFromEventList>
 8012f16:	4603      	mov	r3, r0
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d013      	beq.n	8012f44 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012f1c:	4b3f      	ldr	r3, [pc, #252]	@ (801301c <xQueueGenericSend+0x210>)
 8012f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f22:	601a      	str	r2, [r3, #0]
 8012f24:	f3bf 8f4f 	dsb	sy
 8012f28:	f3bf 8f6f 	isb	sy
 8012f2c:	e00a      	b.n	8012f44 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d007      	beq.n	8012f44 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012f34:	4b39      	ldr	r3, [pc, #228]	@ (801301c <xQueueGenericSend+0x210>)
 8012f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f3a:	601a      	str	r2, [r3, #0]
 8012f3c:	f3bf 8f4f 	dsb	sy
 8012f40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012f44:	f001 fc70 	bl	8014828 <vPortExitCritical>
				return pdPASS;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	e063      	b.n	8013014 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d103      	bne.n	8012f5a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012f52:	f001 fc69 	bl	8014828 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012f56:	2300      	movs	r3, #0
 8012f58:	e05c      	b.n	8013014 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d106      	bne.n	8012f6e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012f60:	f107 0314 	add.w	r3, r7, #20
 8012f64:	4618      	mov	r0, r3
 8012f66:	f001 f8a7 	bl	80140b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012f6e:	f001 fc5b 	bl	8014828 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012f72:	f000 fe03 	bl	8013b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012f76:	f001 fc21 	bl	80147bc <vPortEnterCritical>
 8012f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012f80:	b25b      	sxtb	r3, r3
 8012f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f86:	d103      	bne.n	8012f90 <xQueueGenericSend+0x184>
 8012f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012f96:	b25b      	sxtb	r3, r3
 8012f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f9c:	d103      	bne.n	8012fa6 <xQueueGenericSend+0x19a>
 8012f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012fa6:	f001 fc3f 	bl	8014828 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012faa:	1d3a      	adds	r2, r7, #4
 8012fac:	f107 0314 	add.w	r3, r7, #20
 8012fb0:	4611      	mov	r1, r2
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f001 f896 	bl	80140e4 <xTaskCheckForTimeOut>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d124      	bne.n	8013008 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012fbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012fc0:	f000 fb7c 	bl	80136bc <prvIsQueueFull>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d018      	beq.n	8012ffc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fcc:	3310      	adds	r3, #16
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	4611      	mov	r1, r2
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f000 ffe2 	bl	8013f9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012fd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012fda:	f000 fb07 	bl	80135ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012fde:	f000 fddb 	bl	8013b98 <xTaskResumeAll>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	f47f af7c 	bne.w	8012ee2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8012fea:	4b0c      	ldr	r3, [pc, #48]	@ (801301c <xQueueGenericSend+0x210>)
 8012fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ff0:	601a      	str	r2, [r3, #0]
 8012ff2:	f3bf 8f4f 	dsb	sy
 8012ff6:	f3bf 8f6f 	isb	sy
 8012ffa:	e772      	b.n	8012ee2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012ffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012ffe:	f000 faf5 	bl	80135ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013002:	f000 fdc9 	bl	8013b98 <xTaskResumeAll>
 8013006:	e76c      	b.n	8012ee2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013008:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801300a:	f000 faef 	bl	80135ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801300e:	f000 fdc3 	bl	8013b98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013012:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013014:	4618      	mov	r0, r3
 8013016:	3738      	adds	r7, #56	@ 0x38
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}
 801301c:	e000ed04 	.word	0xe000ed04

08013020 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b08e      	sub	sp, #56	@ 0x38
 8013024:	af00      	add	r7, sp, #0
 8013026:	60f8      	str	r0, [r7, #12]
 8013028:	60b9      	str	r1, [r7, #8]
 801302a:	607a      	str	r2, [r7, #4]
 801302c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013034:	2b00      	cmp	r3, #0
 8013036:	d10d      	bne.n	8013054 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8013038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801303c:	b672      	cpsid	i
 801303e:	f383 8811 	msr	BASEPRI, r3
 8013042:	f3bf 8f6f 	isb	sy
 8013046:	f3bf 8f4f 	dsb	sy
 801304a:	b662      	cpsie	i
 801304c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801304e:	bf00      	nop
 8013050:	bf00      	nop
 8013052:	e7fd      	b.n	8013050 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d103      	bne.n	8013062 <xQueueGenericSendFromISR+0x42>
 801305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801305e:	2b00      	cmp	r3, #0
 8013060:	d101      	bne.n	8013066 <xQueueGenericSendFromISR+0x46>
 8013062:	2301      	movs	r3, #1
 8013064:	e000      	b.n	8013068 <xQueueGenericSendFromISR+0x48>
 8013066:	2300      	movs	r3, #0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d10d      	bne.n	8013088 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 801306c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013070:	b672      	cpsid	i
 8013072:	f383 8811 	msr	BASEPRI, r3
 8013076:	f3bf 8f6f 	isb	sy
 801307a:	f3bf 8f4f 	dsb	sy
 801307e:	b662      	cpsie	i
 8013080:	623b      	str	r3, [r7, #32]
}
 8013082:	bf00      	nop
 8013084:	bf00      	nop
 8013086:	e7fd      	b.n	8013084 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	2b02      	cmp	r3, #2
 801308c:	d103      	bne.n	8013096 <xQueueGenericSendFromISR+0x76>
 801308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013092:	2b01      	cmp	r3, #1
 8013094:	d101      	bne.n	801309a <xQueueGenericSendFromISR+0x7a>
 8013096:	2301      	movs	r3, #1
 8013098:	e000      	b.n	801309c <xQueueGenericSendFromISR+0x7c>
 801309a:	2300      	movs	r3, #0
 801309c:	2b00      	cmp	r3, #0
 801309e:	d10d      	bne.n	80130bc <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80130a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130a4:	b672      	cpsid	i
 80130a6:	f383 8811 	msr	BASEPRI, r3
 80130aa:	f3bf 8f6f 	isb	sy
 80130ae:	f3bf 8f4f 	dsb	sy
 80130b2:	b662      	cpsie	i
 80130b4:	61fb      	str	r3, [r7, #28]
}
 80130b6:	bf00      	nop
 80130b8:	bf00      	nop
 80130ba:	e7fd      	b.n	80130b8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80130bc:	f001 fc66 	bl	801498c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80130c0:	f3ef 8211 	mrs	r2, BASEPRI
 80130c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130c8:	b672      	cpsid	i
 80130ca:	f383 8811 	msr	BASEPRI, r3
 80130ce:	f3bf 8f6f 	isb	sy
 80130d2:	f3bf 8f4f 	dsb	sy
 80130d6:	b662      	cpsie	i
 80130d8:	61ba      	str	r2, [r7, #24]
 80130da:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80130dc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80130de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80130e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80130e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d302      	bcc.n	80130f2 <xQueueGenericSendFromISR+0xd2>
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	2b02      	cmp	r3, #2
 80130f0:	d12c      	bne.n	801314c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80130f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80130f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80130fc:	683a      	ldr	r2, [r7, #0]
 80130fe:	68b9      	ldr	r1, [r7, #8]
 8013100:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013102:	f000 f9e3 	bl	80134cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013106:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801310e:	d112      	bne.n	8013136 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013114:	2b00      	cmp	r3, #0
 8013116:	d016      	beq.n	8013146 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801311a:	3324      	adds	r3, #36	@ 0x24
 801311c:	4618      	mov	r0, r3
 801311e:	f000 ff65 	bl	8013fec <xTaskRemoveFromEventList>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d00e      	beq.n	8013146 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d00b      	beq.n	8013146 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2201      	movs	r2, #1
 8013132:	601a      	str	r2, [r3, #0]
 8013134:	e007      	b.n	8013146 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013136:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801313a:	3301      	adds	r3, #1
 801313c:	b2db      	uxtb	r3, r3
 801313e:	b25a      	sxtb	r2, r3
 8013140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013142:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013146:	2301      	movs	r3, #1
 8013148:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801314a:	e001      	b.n	8013150 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801314c:	2300      	movs	r3, #0
 801314e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013152:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801315a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801315c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801315e:	4618      	mov	r0, r3
 8013160:	3738      	adds	r7, #56	@ 0x38
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}
	...

08013168 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b08c      	sub	sp, #48	@ 0x30
 801316c:	af00      	add	r7, sp, #0
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013174:	2300      	movs	r3, #0
 8013176:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801317e:	2b00      	cmp	r3, #0
 8013180:	d10d      	bne.n	801319e <xQueueReceive+0x36>
	__asm volatile
 8013182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013186:	b672      	cpsid	i
 8013188:	f383 8811 	msr	BASEPRI, r3
 801318c:	f3bf 8f6f 	isb	sy
 8013190:	f3bf 8f4f 	dsb	sy
 8013194:	b662      	cpsie	i
 8013196:	623b      	str	r3, [r7, #32]
}
 8013198:	bf00      	nop
 801319a:	bf00      	nop
 801319c:	e7fd      	b.n	801319a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801319e:	68bb      	ldr	r3, [r7, #8]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d103      	bne.n	80131ac <xQueueReceive+0x44>
 80131a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d101      	bne.n	80131b0 <xQueueReceive+0x48>
 80131ac:	2301      	movs	r3, #1
 80131ae:	e000      	b.n	80131b2 <xQueueReceive+0x4a>
 80131b0:	2300      	movs	r3, #0
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d10d      	bne.n	80131d2 <xQueueReceive+0x6a>
	__asm volatile
 80131b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ba:	b672      	cpsid	i
 80131bc:	f383 8811 	msr	BASEPRI, r3
 80131c0:	f3bf 8f6f 	isb	sy
 80131c4:	f3bf 8f4f 	dsb	sy
 80131c8:	b662      	cpsie	i
 80131ca:	61fb      	str	r3, [r7, #28]
}
 80131cc:	bf00      	nop
 80131ce:	bf00      	nop
 80131d0:	e7fd      	b.n	80131ce <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80131d2:	f001 f8d5 	bl	8014380 <xTaskGetSchedulerState>
 80131d6:	4603      	mov	r3, r0
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d102      	bne.n	80131e2 <xQueueReceive+0x7a>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d101      	bne.n	80131e6 <xQueueReceive+0x7e>
 80131e2:	2301      	movs	r3, #1
 80131e4:	e000      	b.n	80131e8 <xQueueReceive+0x80>
 80131e6:	2300      	movs	r3, #0
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d10d      	bne.n	8013208 <xQueueReceive+0xa0>
	__asm volatile
 80131ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131f0:	b672      	cpsid	i
 80131f2:	f383 8811 	msr	BASEPRI, r3
 80131f6:	f3bf 8f6f 	isb	sy
 80131fa:	f3bf 8f4f 	dsb	sy
 80131fe:	b662      	cpsie	i
 8013200:	61bb      	str	r3, [r7, #24]
}
 8013202:	bf00      	nop
 8013204:	bf00      	nop
 8013206:	e7fd      	b.n	8013204 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013208:	f001 fad8 	bl	80147bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801320e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013210:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013214:	2b00      	cmp	r3, #0
 8013216:	d01f      	beq.n	8013258 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013218:	68b9      	ldr	r1, [r7, #8]
 801321a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801321c:	f000 f9c0 	bl	80135a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013222:	1e5a      	subs	r2, r3, #1
 8013224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013226:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801322a:	691b      	ldr	r3, [r3, #16]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d00f      	beq.n	8013250 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013232:	3310      	adds	r3, #16
 8013234:	4618      	mov	r0, r3
 8013236:	f000 fed9 	bl	8013fec <xTaskRemoveFromEventList>
 801323a:	4603      	mov	r3, r0
 801323c:	2b00      	cmp	r3, #0
 801323e:	d007      	beq.n	8013250 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013240:	4b3c      	ldr	r3, [pc, #240]	@ (8013334 <xQueueReceive+0x1cc>)
 8013242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013246:	601a      	str	r2, [r3, #0]
 8013248:	f3bf 8f4f 	dsb	sy
 801324c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013250:	f001 faea 	bl	8014828 <vPortExitCritical>
				return pdPASS;
 8013254:	2301      	movs	r3, #1
 8013256:	e069      	b.n	801332c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d103      	bne.n	8013266 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801325e:	f001 fae3 	bl	8014828 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013262:	2300      	movs	r3, #0
 8013264:	e062      	b.n	801332c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013268:	2b00      	cmp	r3, #0
 801326a:	d106      	bne.n	801327a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801326c:	f107 0310 	add.w	r3, r7, #16
 8013270:	4618      	mov	r0, r3
 8013272:	f000 ff21 	bl	80140b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013276:	2301      	movs	r3, #1
 8013278:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801327a:	f001 fad5 	bl	8014828 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801327e:	f000 fc7d 	bl	8013b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013282:	f001 fa9b 	bl	80147bc <vPortEnterCritical>
 8013286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801328c:	b25b      	sxtb	r3, r3
 801328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013292:	d103      	bne.n	801329c <xQueueReceive+0x134>
 8013294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013296:	2200      	movs	r2, #0
 8013298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801329e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80132a2:	b25b      	sxtb	r3, r3
 80132a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132a8:	d103      	bne.n	80132b2 <xQueueReceive+0x14a>
 80132aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ac:	2200      	movs	r2, #0
 80132ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80132b2:	f001 fab9 	bl	8014828 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80132b6:	1d3a      	adds	r2, r7, #4
 80132b8:	f107 0310 	add.w	r3, r7, #16
 80132bc:	4611      	mov	r1, r2
 80132be:	4618      	mov	r0, r3
 80132c0:	f000 ff10 	bl	80140e4 <xTaskCheckForTimeOut>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d123      	bne.n	8013312 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80132ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80132cc:	f000 f9e0 	bl	8013690 <prvIsQueueEmpty>
 80132d0:	4603      	mov	r3, r0
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d017      	beq.n	8013306 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80132d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132d8:	3324      	adds	r3, #36	@ 0x24
 80132da:	687a      	ldr	r2, [r7, #4]
 80132dc:	4611      	mov	r1, r2
 80132de:	4618      	mov	r0, r3
 80132e0:	f000 fe5c 	bl	8013f9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80132e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80132e6:	f000 f981 	bl	80135ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80132ea:	f000 fc55 	bl	8013b98 <xTaskResumeAll>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d189      	bne.n	8013208 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80132f4:	4b0f      	ldr	r3, [pc, #60]	@ (8013334 <xQueueReceive+0x1cc>)
 80132f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80132fa:	601a      	str	r2, [r3, #0]
 80132fc:	f3bf 8f4f 	dsb	sy
 8013300:	f3bf 8f6f 	isb	sy
 8013304:	e780      	b.n	8013208 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013308:	f000 f970 	bl	80135ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801330c:	f000 fc44 	bl	8013b98 <xTaskResumeAll>
 8013310:	e77a      	b.n	8013208 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013314:	f000 f96a 	bl	80135ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013318:	f000 fc3e 	bl	8013b98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801331c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801331e:	f000 f9b7 	bl	8013690 <prvIsQueueEmpty>
 8013322:	4603      	mov	r3, r0
 8013324:	2b00      	cmp	r3, #0
 8013326:	f43f af6f 	beq.w	8013208 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801332a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801332c:	4618      	mov	r0, r3
 801332e:	3730      	adds	r7, #48	@ 0x30
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	e000ed04 	.word	0xe000ed04

08013338 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b08e      	sub	sp, #56	@ 0x38
 801333c:	af00      	add	r7, sp, #0
 801333e:	60f8      	str	r0, [r7, #12]
 8013340:	60b9      	str	r1, [r7, #8]
 8013342:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801334a:	2b00      	cmp	r3, #0
 801334c:	d10d      	bne.n	801336a <xQueueReceiveFromISR+0x32>
	__asm volatile
 801334e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013352:	b672      	cpsid	i
 8013354:	f383 8811 	msr	BASEPRI, r3
 8013358:	f3bf 8f6f 	isb	sy
 801335c:	f3bf 8f4f 	dsb	sy
 8013360:	b662      	cpsie	i
 8013362:	623b      	str	r3, [r7, #32]
}
 8013364:	bf00      	nop
 8013366:	bf00      	nop
 8013368:	e7fd      	b.n	8013366 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d103      	bne.n	8013378 <xQueueReceiveFromISR+0x40>
 8013370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013374:	2b00      	cmp	r3, #0
 8013376:	d101      	bne.n	801337c <xQueueReceiveFromISR+0x44>
 8013378:	2301      	movs	r3, #1
 801337a:	e000      	b.n	801337e <xQueueReceiveFromISR+0x46>
 801337c:	2300      	movs	r3, #0
 801337e:	2b00      	cmp	r3, #0
 8013380:	d10d      	bne.n	801339e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8013382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013386:	b672      	cpsid	i
 8013388:	f383 8811 	msr	BASEPRI, r3
 801338c:	f3bf 8f6f 	isb	sy
 8013390:	f3bf 8f4f 	dsb	sy
 8013394:	b662      	cpsie	i
 8013396:	61fb      	str	r3, [r7, #28]
}
 8013398:	bf00      	nop
 801339a:	bf00      	nop
 801339c:	e7fd      	b.n	801339a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801339e:	f001 faf5 	bl	801498c <vPortValidateInterruptPriority>
	__asm volatile
 80133a2:	f3ef 8211 	mrs	r2, BASEPRI
 80133a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133aa:	b672      	cpsid	i
 80133ac:	f383 8811 	msr	BASEPRI, r3
 80133b0:	f3bf 8f6f 	isb	sy
 80133b4:	f3bf 8f4f 	dsb	sy
 80133b8:	b662      	cpsie	i
 80133ba:	61ba      	str	r2, [r7, #24]
 80133bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80133be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d02f      	beq.n	801342e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80133ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80133d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133d8:	68b9      	ldr	r1, [r7, #8]
 80133da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80133dc:	f000 f8e0 	bl	80135a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e2:	1e5a      	subs	r2, r3, #1
 80133e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80133e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80133ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133f0:	d112      	bne.n	8013418 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133f4:	691b      	ldr	r3, [r3, #16]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d016      	beq.n	8013428 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133fc:	3310      	adds	r3, #16
 80133fe:	4618      	mov	r0, r3
 8013400:	f000 fdf4 	bl	8013fec <xTaskRemoveFromEventList>
 8013404:	4603      	mov	r3, r0
 8013406:	2b00      	cmp	r3, #0
 8013408:	d00e      	beq.n	8013428 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d00b      	beq.n	8013428 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2201      	movs	r2, #1
 8013414:	601a      	str	r2, [r3, #0]
 8013416:	e007      	b.n	8013428 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801341c:	3301      	adds	r3, #1
 801341e:	b2db      	uxtb	r3, r3
 8013420:	b25a      	sxtb	r2, r3
 8013422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013428:	2301      	movs	r3, #1
 801342a:	637b      	str	r3, [r7, #52]	@ 0x34
 801342c:	e001      	b.n	8013432 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 801342e:	2300      	movs	r3, #0
 8013430:	637b      	str	r3, [r7, #52]	@ 0x34
 8013432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013434:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	f383 8811 	msr	BASEPRI, r3
}
 801343c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801343e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013440:	4618      	mov	r0, r3
 8013442:	3738      	adds	r7, #56	@ 0x38
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b084      	sub	sp, #16
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d10d      	bne.n	8013472 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8013456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801345a:	b672      	cpsid	i
 801345c:	f383 8811 	msr	BASEPRI, r3
 8013460:	f3bf 8f6f 	isb	sy
 8013464:	f3bf 8f4f 	dsb	sy
 8013468:	b662      	cpsie	i
 801346a:	60bb      	str	r3, [r7, #8]
}
 801346c:	bf00      	nop
 801346e:	bf00      	nop
 8013470:	e7fd      	b.n	801346e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8013472:	f001 f9a3 	bl	80147bc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801347a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801347c:	f001 f9d4 	bl	8014828 <vPortExitCritical>

	return uxReturn;
 8013480:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013482:	4618      	mov	r0, r3
 8013484:	3710      	adds	r7, #16
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}

0801348a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801348a:	b480      	push	{r7}
 801348c:	b087      	sub	sp, #28
 801348e:	af00      	add	r7, sp, #0
 8013490:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d10d      	bne.n	80134b8 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 801349c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134a0:	b672      	cpsid	i
 80134a2:	f383 8811 	msr	BASEPRI, r3
 80134a6:	f3bf 8f6f 	isb	sy
 80134aa:	f3bf 8f4f 	dsb	sy
 80134ae:	b662      	cpsie	i
 80134b0:	60fb      	str	r3, [r7, #12]
}
 80134b2:	bf00      	nop
 80134b4:	bf00      	nop
 80134b6:	e7fd      	b.n	80134b4 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134bc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80134be:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80134c0:	4618      	mov	r0, r3
 80134c2:	371c      	adds	r7, #28
 80134c4:	46bd      	mov	sp, r7
 80134c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ca:	4770      	bx	lr

080134cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b086      	sub	sp, #24
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	60b9      	str	r1, [r7, #8]
 80134d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80134d8:	2300      	movs	r3, #0
 80134da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d10d      	bne.n	8013506 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d14d      	bne.n	801358e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	689b      	ldr	r3, [r3, #8]
 80134f6:	4618      	mov	r0, r3
 80134f8:	f000 ff60 	bl	80143bc <xTaskPriorityDisinherit>
 80134fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	2200      	movs	r2, #0
 8013502:	609a      	str	r2, [r3, #8]
 8013504:	e043      	b.n	801358e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d119      	bne.n	8013540 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	6858      	ldr	r0, [r3, #4]
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013514:	461a      	mov	r2, r3
 8013516:	68b9      	ldr	r1, [r7, #8]
 8013518:	f002 f914 	bl	8015744 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	685a      	ldr	r2, [r3, #4]
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013524:	441a      	add	r2, r3
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	685a      	ldr	r2, [r3, #4]
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	689b      	ldr	r3, [r3, #8]
 8013532:	429a      	cmp	r2, r3
 8013534:	d32b      	bcc.n	801358e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	605a      	str	r2, [r3, #4]
 801353e:	e026      	b.n	801358e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	68d8      	ldr	r0, [r3, #12]
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013548:	461a      	mov	r2, r3
 801354a:	68b9      	ldr	r1, [r7, #8]
 801354c:	f002 f8fa 	bl	8015744 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	68da      	ldr	r2, [r3, #12]
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013558:	425b      	negs	r3, r3
 801355a:	441a      	add	r2, r3
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	68da      	ldr	r2, [r3, #12]
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	429a      	cmp	r2, r3
 801356a:	d207      	bcs.n	801357c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	689a      	ldr	r2, [r3, #8]
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013574:	425b      	negs	r3, r3
 8013576:	441a      	add	r2, r3
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2b02      	cmp	r3, #2
 8013580:	d105      	bne.n	801358e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d002      	beq.n	801358e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	3b01      	subs	r3, #1
 801358c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	1c5a      	adds	r2, r3, #1
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013596:	697b      	ldr	r3, [r7, #20]
}
 8013598:	4618      	mov	r0, r3
 801359a:	3718      	adds	r7, #24
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}

080135a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b082      	sub	sp, #8
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d018      	beq.n	80135e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	68da      	ldr	r2, [r3, #12]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135ba:	441a      	add	r2, r3
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	68da      	ldr	r2, [r3, #12]
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	689b      	ldr	r3, [r3, #8]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d303      	bcc.n	80135d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	68d9      	ldr	r1, [r3, #12]
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135dc:	461a      	mov	r2, r3
 80135de:	6838      	ldr	r0, [r7, #0]
 80135e0:	f002 f8b0 	bl	8015744 <memcpy>
	}
}
 80135e4:	bf00      	nop
 80135e6:	3708      	adds	r7, #8
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}

080135ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b084      	sub	sp, #16
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80135f4:	f001 f8e2 	bl	80147bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80135fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013600:	e011      	b.n	8013626 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013606:	2b00      	cmp	r3, #0
 8013608:	d012      	beq.n	8013630 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	3324      	adds	r3, #36	@ 0x24
 801360e:	4618      	mov	r0, r3
 8013610:	f000 fcec 	bl	8013fec <xTaskRemoveFromEventList>
 8013614:	4603      	mov	r3, r0
 8013616:	2b00      	cmp	r3, #0
 8013618:	d001      	beq.n	801361e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801361a:	f000 fdcb 	bl	80141b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801361e:	7bfb      	ldrb	r3, [r7, #15]
 8013620:	3b01      	subs	r3, #1
 8013622:	b2db      	uxtb	r3, r3
 8013624:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801362a:	2b00      	cmp	r3, #0
 801362c:	dce9      	bgt.n	8013602 <prvUnlockQueue+0x16>
 801362e:	e000      	b.n	8013632 <prvUnlockQueue+0x46>
					break;
 8013630:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	22ff      	movs	r2, #255	@ 0xff
 8013636:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801363a:	f001 f8f5 	bl	8014828 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801363e:	f001 f8bd 	bl	80147bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013648:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801364a:	e011      	b.n	8013670 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	691b      	ldr	r3, [r3, #16]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d012      	beq.n	801367a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	3310      	adds	r3, #16
 8013658:	4618      	mov	r0, r3
 801365a:	f000 fcc7 	bl	8013fec <xTaskRemoveFromEventList>
 801365e:	4603      	mov	r3, r0
 8013660:	2b00      	cmp	r3, #0
 8013662:	d001      	beq.n	8013668 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013664:	f000 fda6 	bl	80141b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013668:	7bbb      	ldrb	r3, [r7, #14]
 801366a:	3b01      	subs	r3, #1
 801366c:	b2db      	uxtb	r3, r3
 801366e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013674:	2b00      	cmp	r3, #0
 8013676:	dce9      	bgt.n	801364c <prvUnlockQueue+0x60>
 8013678:	e000      	b.n	801367c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801367a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	22ff      	movs	r2, #255	@ 0xff
 8013680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013684:	f001 f8d0 	bl	8014828 <vPortExitCritical>
}
 8013688:	bf00      	nop
 801368a:	3710      	adds	r7, #16
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}

08013690 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b084      	sub	sp, #16
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013698:	f001 f890 	bl	80147bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d102      	bne.n	80136aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80136a4:	2301      	movs	r3, #1
 80136a6:	60fb      	str	r3, [r7, #12]
 80136a8:	e001      	b.n	80136ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80136aa:	2300      	movs	r3, #0
 80136ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136ae:	f001 f8bb 	bl	8014828 <vPortExitCritical>

	return xReturn;
 80136b2:	68fb      	ldr	r3, [r7, #12]
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3710      	adds	r7, #16
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136c4:	f001 f87a 	bl	80147bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d102      	bne.n	80136da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80136d4:	2301      	movs	r3, #1
 80136d6:	60fb      	str	r3, [r7, #12]
 80136d8:	e001      	b.n	80136de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80136da:	2300      	movs	r3, #0
 80136dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136de:	f001 f8a3 	bl	8014828 <vPortExitCritical>

	return xReturn;
 80136e2:	68fb      	ldr	r3, [r7, #12]
}
 80136e4:	4618      	mov	r0, r3
 80136e6:	3710      	adds	r7, #16
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}

080136ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b08e      	sub	sp, #56	@ 0x38
 80136f0:	af04      	add	r7, sp, #16
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	60b9      	str	r1, [r7, #8]
 80136f6:	607a      	str	r2, [r7, #4]
 80136f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80136fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d10d      	bne.n	801371c <xTaskCreateStatic+0x30>
	__asm volatile
 8013700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013704:	b672      	cpsid	i
 8013706:	f383 8811 	msr	BASEPRI, r3
 801370a:	f3bf 8f6f 	isb	sy
 801370e:	f3bf 8f4f 	dsb	sy
 8013712:	b662      	cpsie	i
 8013714:	623b      	str	r3, [r7, #32]
}
 8013716:	bf00      	nop
 8013718:	bf00      	nop
 801371a:	e7fd      	b.n	8013718 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801371c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801371e:	2b00      	cmp	r3, #0
 8013720:	d10d      	bne.n	801373e <xTaskCreateStatic+0x52>
	__asm volatile
 8013722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013726:	b672      	cpsid	i
 8013728:	f383 8811 	msr	BASEPRI, r3
 801372c:	f3bf 8f6f 	isb	sy
 8013730:	f3bf 8f4f 	dsb	sy
 8013734:	b662      	cpsie	i
 8013736:	61fb      	str	r3, [r7, #28]
}
 8013738:	bf00      	nop
 801373a:	bf00      	nop
 801373c:	e7fd      	b.n	801373a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801373e:	2358      	movs	r3, #88	@ 0x58
 8013740:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013742:	693b      	ldr	r3, [r7, #16]
 8013744:	2b58      	cmp	r3, #88	@ 0x58
 8013746:	d00d      	beq.n	8013764 <xTaskCreateStatic+0x78>
	__asm volatile
 8013748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801374c:	b672      	cpsid	i
 801374e:	f383 8811 	msr	BASEPRI, r3
 8013752:	f3bf 8f6f 	isb	sy
 8013756:	f3bf 8f4f 	dsb	sy
 801375a:	b662      	cpsie	i
 801375c:	61bb      	str	r3, [r7, #24]
}
 801375e:	bf00      	nop
 8013760:	bf00      	nop
 8013762:	e7fd      	b.n	8013760 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013764:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013768:	2b00      	cmp	r3, #0
 801376a:	d01e      	beq.n	80137aa <xTaskCreateStatic+0xbe>
 801376c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801376e:	2b00      	cmp	r3, #0
 8013770:	d01b      	beq.n	80137aa <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013774:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801377a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801377e:	2202      	movs	r2, #2
 8013780:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013784:	2300      	movs	r3, #0
 8013786:	9303      	str	r3, [sp, #12]
 8013788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801378a:	9302      	str	r3, [sp, #8]
 801378c:	f107 0314 	add.w	r3, r7, #20
 8013790:	9301      	str	r3, [sp, #4]
 8013792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013794:	9300      	str	r3, [sp, #0]
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	687a      	ldr	r2, [r7, #4]
 801379a:	68b9      	ldr	r1, [r7, #8]
 801379c:	68f8      	ldr	r0, [r7, #12]
 801379e:	f000 f850 	bl	8013842 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80137a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80137a4:	f000 f8e2 	bl	801396c <prvAddNewTaskToReadyList>
 80137a8:	e001      	b.n	80137ae <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80137aa:	2300      	movs	r3, #0
 80137ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80137ae:	697b      	ldr	r3, [r7, #20]
	}
 80137b0:	4618      	mov	r0, r3
 80137b2:	3728      	adds	r7, #40	@ 0x28
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b08c      	sub	sp, #48	@ 0x30
 80137bc:	af04      	add	r7, sp, #16
 80137be:	60f8      	str	r0, [r7, #12]
 80137c0:	60b9      	str	r1, [r7, #8]
 80137c2:	603b      	str	r3, [r7, #0]
 80137c4:	4613      	mov	r3, r2
 80137c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80137c8:	88fb      	ldrh	r3, [r7, #6]
 80137ca:	009b      	lsls	r3, r3, #2
 80137cc:	4618      	mov	r0, r3
 80137ce:	f001 f923 	bl	8014a18 <pvPortMalloc>
 80137d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d00e      	beq.n	80137f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80137da:	2058      	movs	r0, #88	@ 0x58
 80137dc:	f001 f91c 	bl	8014a18 <pvPortMalloc>
 80137e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80137e2:	69fb      	ldr	r3, [r7, #28]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d003      	beq.n	80137f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80137e8:	69fb      	ldr	r3, [r7, #28]
 80137ea:	697a      	ldr	r2, [r7, #20]
 80137ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80137ee:	e005      	b.n	80137fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80137f0:	6978      	ldr	r0, [r7, #20]
 80137f2:	f001 f9e3 	bl	8014bbc <vPortFree>
 80137f6:	e001      	b.n	80137fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80137f8:	2300      	movs	r3, #0
 80137fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d017      	beq.n	8013832 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013802:	69fb      	ldr	r3, [r7, #28]
 8013804:	2200      	movs	r2, #0
 8013806:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801380a:	88fa      	ldrh	r2, [r7, #6]
 801380c:	2300      	movs	r3, #0
 801380e:	9303      	str	r3, [sp, #12]
 8013810:	69fb      	ldr	r3, [r7, #28]
 8013812:	9302      	str	r3, [sp, #8]
 8013814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013816:	9301      	str	r3, [sp, #4]
 8013818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	68b9      	ldr	r1, [r7, #8]
 8013820:	68f8      	ldr	r0, [r7, #12]
 8013822:	f000 f80e 	bl	8013842 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013826:	69f8      	ldr	r0, [r7, #28]
 8013828:	f000 f8a0 	bl	801396c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801382c:	2301      	movs	r3, #1
 801382e:	61bb      	str	r3, [r7, #24]
 8013830:	e002      	b.n	8013838 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013832:	f04f 33ff 	mov.w	r3, #4294967295
 8013836:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013838:	69bb      	ldr	r3, [r7, #24]
	}
 801383a:	4618      	mov	r0, r3
 801383c:	3720      	adds	r7, #32
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}

08013842 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013842:	b580      	push	{r7, lr}
 8013844:	b088      	sub	sp, #32
 8013846:	af00      	add	r7, sp, #0
 8013848:	60f8      	str	r0, [r7, #12]
 801384a:	60b9      	str	r1, [r7, #8]
 801384c:	607a      	str	r2, [r7, #4]
 801384e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013852:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	009b      	lsls	r3, r3, #2
 8013858:	461a      	mov	r2, r3
 801385a:	21a5      	movs	r1, #165	@ 0xa5
 801385c:	f001 fef2 	bl	8015644 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013864:	6879      	ldr	r1, [r7, #4]
 8013866:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801386a:	440b      	add	r3, r1
 801386c:	009b      	lsls	r3, r3, #2
 801386e:	4413      	add	r3, r2
 8013870:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	f023 0307 	bic.w	r3, r3, #7
 8013878:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801387a:	69bb      	ldr	r3, [r7, #24]
 801387c:	f003 0307 	and.w	r3, r3, #7
 8013880:	2b00      	cmp	r3, #0
 8013882:	d00d      	beq.n	80138a0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8013884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013888:	b672      	cpsid	i
 801388a:	f383 8811 	msr	BASEPRI, r3
 801388e:	f3bf 8f6f 	isb	sy
 8013892:	f3bf 8f4f 	dsb	sy
 8013896:	b662      	cpsie	i
 8013898:	617b      	str	r3, [r7, #20]
}
 801389a:	bf00      	nop
 801389c:	bf00      	nop
 801389e:	e7fd      	b.n	801389c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d01f      	beq.n	80138e6 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80138a6:	2300      	movs	r3, #0
 80138a8:	61fb      	str	r3, [r7, #28]
 80138aa:	e012      	b.n	80138d2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80138ac:	68ba      	ldr	r2, [r7, #8]
 80138ae:	69fb      	ldr	r3, [r7, #28]
 80138b0:	4413      	add	r3, r2
 80138b2:	7819      	ldrb	r1, [r3, #0]
 80138b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	4413      	add	r3, r2
 80138ba:	3334      	adds	r3, #52	@ 0x34
 80138bc:	460a      	mov	r2, r1
 80138be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80138c0:	68ba      	ldr	r2, [r7, #8]
 80138c2:	69fb      	ldr	r3, [r7, #28]
 80138c4:	4413      	add	r3, r2
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d006      	beq.n	80138da <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80138cc:	69fb      	ldr	r3, [r7, #28]
 80138ce:	3301      	adds	r3, #1
 80138d0:	61fb      	str	r3, [r7, #28]
 80138d2:	69fb      	ldr	r3, [r7, #28]
 80138d4:	2b0f      	cmp	r3, #15
 80138d6:	d9e9      	bls.n	80138ac <prvInitialiseNewTask+0x6a>
 80138d8:	e000      	b.n	80138dc <prvInitialiseNewTask+0x9a>
			{
				break;
 80138da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80138dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138de:	2200      	movs	r2, #0
 80138e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80138e4:	e003      	b.n	80138ee <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80138e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138e8:	2200      	movs	r2, #0
 80138ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80138ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138f0:	2b06      	cmp	r3, #6
 80138f2:	d901      	bls.n	80138f8 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80138f4:	2306      	movs	r3, #6
 80138f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80138f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80138fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013902:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013906:	2200      	movs	r2, #0
 8013908:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801390a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801390c:	3304      	adds	r3, #4
 801390e:	4618      	mov	r0, r3
 8013910:	f7ff f892 	bl	8012a38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013916:	3318      	adds	r3, #24
 8013918:	4618      	mov	r0, r3
 801391a:	f7ff f88d 	bl	8012a38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013922:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013926:	f1c3 0207 	rsb	r2, r3, #7
 801392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801392c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013932:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8013934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013936:	2200      	movs	r2, #0
 8013938:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801393c:	2200      	movs	r2, #0
 801393e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013942:	2200      	movs	r2, #0
 8013944:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013948:	683a      	ldr	r2, [r7, #0]
 801394a:	68f9      	ldr	r1, [r7, #12]
 801394c:	69b8      	ldr	r0, [r7, #24]
 801394e:	f000 fe27 	bl	80145a0 <pxPortInitialiseStack>
 8013952:	4602      	mov	r2, r0
 8013954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013956:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801395a:	2b00      	cmp	r3, #0
 801395c:	d002      	beq.n	8013964 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801395e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013962:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013964:	bf00      	nop
 8013966:	3720      	adds	r7, #32
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}

0801396c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013974:	f000 ff22 	bl	80147bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013978:	4b2a      	ldr	r3, [pc, #168]	@ (8013a24 <prvAddNewTaskToReadyList+0xb8>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	3301      	adds	r3, #1
 801397e:	4a29      	ldr	r2, [pc, #164]	@ (8013a24 <prvAddNewTaskToReadyList+0xb8>)
 8013980:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013982:	4b29      	ldr	r3, [pc, #164]	@ (8013a28 <prvAddNewTaskToReadyList+0xbc>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d109      	bne.n	801399e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801398a:	4a27      	ldr	r2, [pc, #156]	@ (8013a28 <prvAddNewTaskToReadyList+0xbc>)
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013990:	4b24      	ldr	r3, [pc, #144]	@ (8013a24 <prvAddNewTaskToReadyList+0xb8>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	2b01      	cmp	r3, #1
 8013996:	d110      	bne.n	80139ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013998:	f000 fc32 	bl	8014200 <prvInitialiseTaskLists>
 801399c:	e00d      	b.n	80139ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801399e:	4b23      	ldr	r3, [pc, #140]	@ (8013a2c <prvAddNewTaskToReadyList+0xc0>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d109      	bne.n	80139ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80139a6:	4b20      	ldr	r3, [pc, #128]	@ (8013a28 <prvAddNewTaskToReadyList+0xbc>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d802      	bhi.n	80139ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80139b4:	4a1c      	ldr	r2, [pc, #112]	@ (8013a28 <prvAddNewTaskToReadyList+0xbc>)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80139ba:	4b1d      	ldr	r3, [pc, #116]	@ (8013a30 <prvAddNewTaskToReadyList+0xc4>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	3301      	adds	r3, #1
 80139c0:	4a1b      	ldr	r2, [pc, #108]	@ (8013a30 <prvAddNewTaskToReadyList+0xc4>)
 80139c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139c8:	2201      	movs	r2, #1
 80139ca:	409a      	lsls	r2, r3
 80139cc:	4b19      	ldr	r3, [pc, #100]	@ (8013a34 <prvAddNewTaskToReadyList+0xc8>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	4313      	orrs	r3, r2
 80139d2:	4a18      	ldr	r2, [pc, #96]	@ (8013a34 <prvAddNewTaskToReadyList+0xc8>)
 80139d4:	6013      	str	r3, [r2, #0]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80139da:	4613      	mov	r3, r2
 80139dc:	009b      	lsls	r3, r3, #2
 80139de:	4413      	add	r3, r2
 80139e0:	009b      	lsls	r3, r3, #2
 80139e2:	4a15      	ldr	r2, [pc, #84]	@ (8013a38 <prvAddNewTaskToReadyList+0xcc>)
 80139e4:	441a      	add	r2, r3
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	3304      	adds	r3, #4
 80139ea:	4619      	mov	r1, r3
 80139ec:	4610      	mov	r0, r2
 80139ee:	f7ff f830 	bl	8012a52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80139f2:	f000 ff19 	bl	8014828 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80139f6:	4b0d      	ldr	r3, [pc, #52]	@ (8013a2c <prvAddNewTaskToReadyList+0xc0>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d00e      	beq.n	8013a1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80139fe:	4b0a      	ldr	r3, [pc, #40]	@ (8013a28 <prvAddNewTaskToReadyList+0xbc>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	d207      	bcs.n	8013a1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8013a3c <prvAddNewTaskToReadyList+0xd0>)
 8013a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a12:	601a      	str	r2, [r3, #0]
 8013a14:	f3bf 8f4f 	dsb	sy
 8013a18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a1c:	bf00      	nop
 8013a1e:	3708      	adds	r7, #8
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}
 8013a24:	200010f8 	.word	0x200010f8
 8013a28:	20000ff8 	.word	0x20000ff8
 8013a2c:	20001104 	.word	0x20001104
 8013a30:	20001114 	.word	0x20001114
 8013a34:	20001100 	.word	0x20001100
 8013a38:	20000ffc 	.word	0x20000ffc
 8013a3c:	e000ed04 	.word	0xe000ed04

08013a40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b084      	sub	sp, #16
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d01a      	beq.n	8013a88 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013a52:	4b15      	ldr	r3, [pc, #84]	@ (8013aa8 <vTaskDelay+0x68>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d00d      	beq.n	8013a76 <vTaskDelay+0x36>
	__asm volatile
 8013a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a5e:	b672      	cpsid	i
 8013a60:	f383 8811 	msr	BASEPRI, r3
 8013a64:	f3bf 8f6f 	isb	sy
 8013a68:	f3bf 8f4f 	dsb	sy
 8013a6c:	b662      	cpsie	i
 8013a6e:	60bb      	str	r3, [r7, #8]
}
 8013a70:	bf00      	nop
 8013a72:	bf00      	nop
 8013a74:	e7fd      	b.n	8013a72 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8013a76:	f000 f881 	bl	8013b7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013a7a:	2100      	movs	r1, #0
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f000 fd29 	bl	80144d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013a82:	f000 f889 	bl	8013b98 <xTaskResumeAll>
 8013a86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d107      	bne.n	8013a9e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8013a8e:	4b07      	ldr	r3, [pc, #28]	@ (8013aac <vTaskDelay+0x6c>)
 8013a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a94:	601a      	str	r2, [r3, #0]
 8013a96:	f3bf 8f4f 	dsb	sy
 8013a9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013a9e:	bf00      	nop
 8013aa0:	3710      	adds	r7, #16
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	20001120 	.word	0x20001120
 8013aac:	e000ed04 	.word	0xe000ed04

08013ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b08a      	sub	sp, #40	@ 0x28
 8013ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013aba:	2300      	movs	r3, #0
 8013abc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013abe:	463a      	mov	r2, r7
 8013ac0:	1d39      	adds	r1, r7, #4
 8013ac2:	f107 0308 	add.w	r3, r7, #8
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7ec fe10 	bl	80006ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013acc:	6839      	ldr	r1, [r7, #0]
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	9202      	str	r2, [sp, #8]
 8013ad4:	9301      	str	r3, [sp, #4]
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	9300      	str	r3, [sp, #0]
 8013ada:	2300      	movs	r3, #0
 8013adc:	460a      	mov	r2, r1
 8013ade:	4921      	ldr	r1, [pc, #132]	@ (8013b64 <vTaskStartScheduler+0xb4>)
 8013ae0:	4821      	ldr	r0, [pc, #132]	@ (8013b68 <vTaskStartScheduler+0xb8>)
 8013ae2:	f7ff fe03 	bl	80136ec <xTaskCreateStatic>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	4a20      	ldr	r2, [pc, #128]	@ (8013b6c <vTaskStartScheduler+0xbc>)
 8013aea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013aec:	4b1f      	ldr	r3, [pc, #124]	@ (8013b6c <vTaskStartScheduler+0xbc>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d002      	beq.n	8013afa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013af4:	2301      	movs	r3, #1
 8013af6:	617b      	str	r3, [r7, #20]
 8013af8:	e001      	b.n	8013afe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013afa:	2300      	movs	r3, #0
 8013afc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013afe:	697b      	ldr	r3, [r7, #20]
 8013b00:	2b01      	cmp	r3, #1
 8013b02:	d118      	bne.n	8013b36 <vTaskStartScheduler+0x86>
	__asm volatile
 8013b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b08:	b672      	cpsid	i
 8013b0a:	f383 8811 	msr	BASEPRI, r3
 8013b0e:	f3bf 8f6f 	isb	sy
 8013b12:	f3bf 8f4f 	dsb	sy
 8013b16:	b662      	cpsie	i
 8013b18:	613b      	str	r3, [r7, #16]
}
 8013b1a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013b1c:	4b14      	ldr	r3, [pc, #80]	@ (8013b70 <vTaskStartScheduler+0xc0>)
 8013b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013b24:	4b13      	ldr	r3, [pc, #76]	@ (8013b74 <vTaskStartScheduler+0xc4>)
 8013b26:	2201      	movs	r2, #1
 8013b28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013b2a:	4b13      	ldr	r3, [pc, #76]	@ (8013b78 <vTaskStartScheduler+0xc8>)
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013b30:	f000 fdc6 	bl	80146c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013b34:	e011      	b.n	8013b5a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b3c:	d10d      	bne.n	8013b5a <vTaskStartScheduler+0xaa>
	__asm volatile
 8013b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b42:	b672      	cpsid	i
 8013b44:	f383 8811 	msr	BASEPRI, r3
 8013b48:	f3bf 8f6f 	isb	sy
 8013b4c:	f3bf 8f4f 	dsb	sy
 8013b50:	b662      	cpsie	i
 8013b52:	60fb      	str	r3, [r7, #12]
}
 8013b54:	bf00      	nop
 8013b56:	bf00      	nop
 8013b58:	e7fd      	b.n	8013b56 <vTaskStartScheduler+0xa6>
}
 8013b5a:	bf00      	nop
 8013b5c:	3718      	adds	r7, #24
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	bf00      	nop
 8013b64:	08017eb0 	.word	0x08017eb0
 8013b68:	080141cd 	.word	0x080141cd
 8013b6c:	2000111c 	.word	0x2000111c
 8013b70:	20001118 	.word	0x20001118
 8013b74:	20001104 	.word	0x20001104
 8013b78:	200010fc 	.word	0x200010fc

08013b7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013b7c:	b480      	push	{r7}
 8013b7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013b80:	4b04      	ldr	r3, [pc, #16]	@ (8013b94 <vTaskSuspendAll+0x18>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	3301      	adds	r3, #1
 8013b86:	4a03      	ldr	r2, [pc, #12]	@ (8013b94 <vTaskSuspendAll+0x18>)
 8013b88:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013b8a:	bf00      	nop
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b92:	4770      	bx	lr
 8013b94:	20001120 	.word	0x20001120

08013b98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b084      	sub	sp, #16
 8013b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013ba6:	4b43      	ldr	r3, [pc, #268]	@ (8013cb4 <xTaskResumeAll+0x11c>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d10d      	bne.n	8013bca <xTaskResumeAll+0x32>
	__asm volatile
 8013bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bb2:	b672      	cpsid	i
 8013bb4:	f383 8811 	msr	BASEPRI, r3
 8013bb8:	f3bf 8f6f 	isb	sy
 8013bbc:	f3bf 8f4f 	dsb	sy
 8013bc0:	b662      	cpsie	i
 8013bc2:	603b      	str	r3, [r7, #0]
}
 8013bc4:	bf00      	nop
 8013bc6:	bf00      	nop
 8013bc8:	e7fd      	b.n	8013bc6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013bca:	f000 fdf7 	bl	80147bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013bce:	4b39      	ldr	r3, [pc, #228]	@ (8013cb4 <xTaskResumeAll+0x11c>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	3b01      	subs	r3, #1
 8013bd4:	4a37      	ldr	r2, [pc, #220]	@ (8013cb4 <xTaskResumeAll+0x11c>)
 8013bd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013bd8:	4b36      	ldr	r3, [pc, #216]	@ (8013cb4 <xTaskResumeAll+0x11c>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d161      	bne.n	8013ca4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013be0:	4b35      	ldr	r3, [pc, #212]	@ (8013cb8 <xTaskResumeAll+0x120>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d05d      	beq.n	8013ca4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013be8:	e02e      	b.n	8013c48 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bea:	4b34      	ldr	r3, [pc, #208]	@ (8013cbc <xTaskResumeAll+0x124>)
 8013bec:	68db      	ldr	r3, [r3, #12]
 8013bee:	68db      	ldr	r3, [r3, #12]
 8013bf0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	3318      	adds	r3, #24
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7fe ff88 	bl	8012b0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	3304      	adds	r3, #4
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7fe ff83 	bl	8012b0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c0a:	2201      	movs	r2, #1
 8013c0c:	409a      	lsls	r2, r3
 8013c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8013cc0 <xTaskResumeAll+0x128>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	4313      	orrs	r3, r2
 8013c14:	4a2a      	ldr	r2, [pc, #168]	@ (8013cc0 <xTaskResumeAll+0x128>)
 8013c16:	6013      	str	r3, [r2, #0]
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c1c:	4613      	mov	r3, r2
 8013c1e:	009b      	lsls	r3, r3, #2
 8013c20:	4413      	add	r3, r2
 8013c22:	009b      	lsls	r3, r3, #2
 8013c24:	4a27      	ldr	r2, [pc, #156]	@ (8013cc4 <xTaskResumeAll+0x12c>)
 8013c26:	441a      	add	r2, r3
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	3304      	adds	r3, #4
 8013c2c:	4619      	mov	r1, r3
 8013c2e:	4610      	mov	r0, r2
 8013c30:	f7fe ff0f 	bl	8012a52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c38:	4b23      	ldr	r3, [pc, #140]	@ (8013cc8 <xTaskResumeAll+0x130>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d302      	bcc.n	8013c48 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8013c42:	4b22      	ldr	r3, [pc, #136]	@ (8013ccc <xTaskResumeAll+0x134>)
 8013c44:	2201      	movs	r2, #1
 8013c46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c48:	4b1c      	ldr	r3, [pc, #112]	@ (8013cbc <xTaskResumeAll+0x124>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d1cc      	bne.n	8013bea <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d001      	beq.n	8013c5a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013c56:	f000 fb73 	bl	8014340 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8013cd0 <xTaskResumeAll+0x138>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d010      	beq.n	8013c88 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013c66:	f000 f859 	bl	8013d1c <xTaskIncrementTick>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d002      	beq.n	8013c76 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8013c70:	4b16      	ldr	r3, [pc, #88]	@ (8013ccc <xTaskResumeAll+0x134>)
 8013c72:	2201      	movs	r2, #1
 8013c74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	3b01      	subs	r3, #1
 8013c7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d1f1      	bne.n	8013c66 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8013c82:	4b13      	ldr	r3, [pc, #76]	@ (8013cd0 <xTaskResumeAll+0x138>)
 8013c84:	2200      	movs	r2, #0
 8013c86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013c88:	4b10      	ldr	r3, [pc, #64]	@ (8013ccc <xTaskResumeAll+0x134>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d009      	beq.n	8013ca4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013c90:	2301      	movs	r3, #1
 8013c92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013c94:	4b0f      	ldr	r3, [pc, #60]	@ (8013cd4 <xTaskResumeAll+0x13c>)
 8013c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c9a:	601a      	str	r2, [r3, #0]
 8013c9c:	f3bf 8f4f 	dsb	sy
 8013ca0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013ca4:	f000 fdc0 	bl	8014828 <vPortExitCritical>

	return xAlreadyYielded;
 8013ca8:	68bb      	ldr	r3, [r7, #8]
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	3710      	adds	r7, #16
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}
 8013cb2:	bf00      	nop
 8013cb4:	20001120 	.word	0x20001120
 8013cb8:	200010f8 	.word	0x200010f8
 8013cbc:	200010b8 	.word	0x200010b8
 8013cc0:	20001100 	.word	0x20001100
 8013cc4:	20000ffc 	.word	0x20000ffc
 8013cc8:	20000ff8 	.word	0x20000ff8
 8013ccc:	2000110c 	.word	0x2000110c
 8013cd0:	20001108 	.word	0x20001108
 8013cd4:	e000ed04 	.word	0xe000ed04

08013cd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013cd8:	b480      	push	{r7}
 8013cda:	b083      	sub	sp, #12
 8013cdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013cde:	4b05      	ldr	r3, [pc, #20]	@ (8013cf4 <xTaskGetTickCount+0x1c>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013ce4:	687b      	ldr	r3, [r7, #4]
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	370c      	adds	r7, #12
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr
 8013cf2:	bf00      	nop
 8013cf4:	200010fc 	.word	0x200010fc

08013cf8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cfe:	f000 fe45 	bl	801498c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013d02:	2300      	movs	r3, #0
 8013d04:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013d06:	4b04      	ldr	r3, [pc, #16]	@ (8013d18 <xTaskGetTickCountFromISR+0x20>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013d0c:	683b      	ldr	r3, [r7, #0]
}
 8013d0e:	4618      	mov	r0, r3
 8013d10:	3708      	adds	r7, #8
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}
 8013d16:	bf00      	nop
 8013d18:	200010fc 	.word	0x200010fc

08013d1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b086      	sub	sp, #24
 8013d20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013d22:	2300      	movs	r3, #0
 8013d24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d26:	4b50      	ldr	r3, [pc, #320]	@ (8013e68 <xTaskIncrementTick+0x14c>)
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	f040 808b 	bne.w	8013e46 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013d30:	4b4e      	ldr	r3, [pc, #312]	@ (8013e6c <xTaskIncrementTick+0x150>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	3301      	adds	r3, #1
 8013d36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013d38:	4a4c      	ldr	r2, [pc, #304]	@ (8013e6c <xTaskIncrementTick+0x150>)
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d123      	bne.n	8013d8c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8013d44:	4b4a      	ldr	r3, [pc, #296]	@ (8013e70 <xTaskIncrementTick+0x154>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d00d      	beq.n	8013d6a <xTaskIncrementTick+0x4e>
	__asm volatile
 8013d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d52:	b672      	cpsid	i
 8013d54:	f383 8811 	msr	BASEPRI, r3
 8013d58:	f3bf 8f6f 	isb	sy
 8013d5c:	f3bf 8f4f 	dsb	sy
 8013d60:	b662      	cpsie	i
 8013d62:	603b      	str	r3, [r7, #0]
}
 8013d64:	bf00      	nop
 8013d66:	bf00      	nop
 8013d68:	e7fd      	b.n	8013d66 <xTaskIncrementTick+0x4a>
 8013d6a:	4b41      	ldr	r3, [pc, #260]	@ (8013e70 <xTaskIncrementTick+0x154>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	60fb      	str	r3, [r7, #12]
 8013d70:	4b40      	ldr	r3, [pc, #256]	@ (8013e74 <xTaskIncrementTick+0x158>)
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	4a3e      	ldr	r2, [pc, #248]	@ (8013e70 <xTaskIncrementTick+0x154>)
 8013d76:	6013      	str	r3, [r2, #0]
 8013d78:	4a3e      	ldr	r2, [pc, #248]	@ (8013e74 <xTaskIncrementTick+0x158>)
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	6013      	str	r3, [r2, #0]
 8013d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8013e78 <xTaskIncrementTick+0x15c>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	3301      	adds	r3, #1
 8013d84:	4a3c      	ldr	r2, [pc, #240]	@ (8013e78 <xTaskIncrementTick+0x15c>)
 8013d86:	6013      	str	r3, [r2, #0]
 8013d88:	f000 fada 	bl	8014340 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8013e7c <xTaskIncrementTick+0x160>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	693a      	ldr	r2, [r7, #16]
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d348      	bcc.n	8013e28 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d96:	4b36      	ldr	r3, [pc, #216]	@ (8013e70 <xTaskIncrementTick+0x154>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d104      	bne.n	8013daa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013da0:	4b36      	ldr	r3, [pc, #216]	@ (8013e7c <xTaskIncrementTick+0x160>)
 8013da2:	f04f 32ff 	mov.w	r2, #4294967295
 8013da6:	601a      	str	r2, [r3, #0]
					break;
 8013da8:	e03e      	b.n	8013e28 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013daa:	4b31      	ldr	r3, [pc, #196]	@ (8013e70 <xTaskIncrementTick+0x154>)
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	68db      	ldr	r3, [r3, #12]
 8013db0:	68db      	ldr	r3, [r3, #12]
 8013db2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	685b      	ldr	r3, [r3, #4]
 8013db8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013dba:	693a      	ldr	r2, [r7, #16]
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d203      	bcs.n	8013dca <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8013e7c <xTaskIncrementTick+0x160>)
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013dc8:	e02e      	b.n	8013e28 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	3304      	adds	r3, #4
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f7fe fe9c 	bl	8012b0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d004      	beq.n	8013de6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	3318      	adds	r3, #24
 8013de0:	4618      	mov	r0, r3
 8013de2:	f7fe fe93 	bl	8012b0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013dea:	2201      	movs	r2, #1
 8013dec:	409a      	lsls	r2, r3
 8013dee:	4b24      	ldr	r3, [pc, #144]	@ (8013e80 <xTaskIncrementTick+0x164>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	4313      	orrs	r3, r2
 8013df4:	4a22      	ldr	r2, [pc, #136]	@ (8013e80 <xTaskIncrementTick+0x164>)
 8013df6:	6013      	str	r3, [r2, #0]
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013dfc:	4613      	mov	r3, r2
 8013dfe:	009b      	lsls	r3, r3, #2
 8013e00:	4413      	add	r3, r2
 8013e02:	009b      	lsls	r3, r3, #2
 8013e04:	4a1f      	ldr	r2, [pc, #124]	@ (8013e84 <xTaskIncrementTick+0x168>)
 8013e06:	441a      	add	r2, r3
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	3304      	adds	r3, #4
 8013e0c:	4619      	mov	r1, r3
 8013e0e:	4610      	mov	r0, r2
 8013e10:	f7fe fe1f 	bl	8012a52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013e14:	68bb      	ldr	r3, [r7, #8]
 8013e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e18:	4b1b      	ldr	r3, [pc, #108]	@ (8013e88 <xTaskIncrementTick+0x16c>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d3b9      	bcc.n	8013d96 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8013e22:	2301      	movs	r3, #1
 8013e24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e26:	e7b6      	b.n	8013d96 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013e28:	4b17      	ldr	r3, [pc, #92]	@ (8013e88 <xTaskIncrementTick+0x16c>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e2e:	4915      	ldr	r1, [pc, #84]	@ (8013e84 <xTaskIncrementTick+0x168>)
 8013e30:	4613      	mov	r3, r2
 8013e32:	009b      	lsls	r3, r3, #2
 8013e34:	4413      	add	r3, r2
 8013e36:	009b      	lsls	r3, r3, #2
 8013e38:	440b      	add	r3, r1
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	2b01      	cmp	r3, #1
 8013e3e:	d907      	bls.n	8013e50 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8013e40:	2301      	movs	r3, #1
 8013e42:	617b      	str	r3, [r7, #20]
 8013e44:	e004      	b.n	8013e50 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013e46:	4b11      	ldr	r3, [pc, #68]	@ (8013e8c <xTaskIncrementTick+0x170>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8013e8c <xTaskIncrementTick+0x170>)
 8013e4e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013e50:	4b0f      	ldr	r3, [pc, #60]	@ (8013e90 <xTaskIncrementTick+0x174>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d001      	beq.n	8013e5c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8013e58:	2301      	movs	r3, #1
 8013e5a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013e5c:	697b      	ldr	r3, [r7, #20]
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	3718      	adds	r7, #24
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}
 8013e66:	bf00      	nop
 8013e68:	20001120 	.word	0x20001120
 8013e6c:	200010fc 	.word	0x200010fc
 8013e70:	200010b0 	.word	0x200010b0
 8013e74:	200010b4 	.word	0x200010b4
 8013e78:	20001110 	.word	0x20001110
 8013e7c:	20001118 	.word	0x20001118
 8013e80:	20001100 	.word	0x20001100
 8013e84:	20000ffc 	.word	0x20000ffc
 8013e88:	20000ff8 	.word	0x20000ff8
 8013e8c:	20001108 	.word	0x20001108
 8013e90:	2000110c 	.word	0x2000110c

08013e94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b088      	sub	sp, #32
 8013e98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8013f88 <vTaskSwitchContext+0xf4>)
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d003      	beq.n	8013eaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8013f8c <vTaskSwitchContext+0xf8>)
 8013ea4:	2201      	movs	r2, #1
 8013ea6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013ea8:	e069      	b.n	8013f7e <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8013eaa:	4b38      	ldr	r3, [pc, #224]	@ (8013f8c <vTaskSwitchContext+0xf8>)
 8013eac:	2200      	movs	r2, #0
 8013eae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8013eb0:	4b37      	ldr	r3, [pc, #220]	@ (8013f90 <vTaskSwitchContext+0xfc>)
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013eb6:	61fb      	str	r3, [r7, #28]
 8013eb8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8013ebc:	61bb      	str	r3, [r7, #24]
 8013ebe:	69fb      	ldr	r3, [r7, #28]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	69ba      	ldr	r2, [r7, #24]
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	d111      	bne.n	8013eec <vTaskSwitchContext+0x58>
 8013ec8:	69fb      	ldr	r3, [r7, #28]
 8013eca:	3304      	adds	r3, #4
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	69ba      	ldr	r2, [r7, #24]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d10b      	bne.n	8013eec <vTaskSwitchContext+0x58>
 8013ed4:	69fb      	ldr	r3, [r7, #28]
 8013ed6:	3308      	adds	r3, #8
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	69ba      	ldr	r2, [r7, #24]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	d105      	bne.n	8013eec <vTaskSwitchContext+0x58>
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	330c      	adds	r3, #12
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	69ba      	ldr	r2, [r7, #24]
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	d008      	beq.n	8013efe <vTaskSwitchContext+0x6a>
 8013eec:	4b28      	ldr	r3, [pc, #160]	@ (8013f90 <vTaskSwitchContext+0xfc>)
 8013eee:	681a      	ldr	r2, [r3, #0]
 8013ef0:	4b27      	ldr	r3, [pc, #156]	@ (8013f90 <vTaskSwitchContext+0xfc>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	3334      	adds	r3, #52	@ 0x34
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	4610      	mov	r0, r2
 8013efa:	f7ec fbe4 	bl	80006c6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013efe:	4b25      	ldr	r3, [pc, #148]	@ (8013f94 <vTaskSwitchContext+0x100>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	fab3 f383 	clz	r3, r3
 8013f0a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013f0c:	7afb      	ldrb	r3, [r7, #11]
 8013f0e:	f1c3 031f 	rsb	r3, r3, #31
 8013f12:	617b      	str	r3, [r7, #20]
 8013f14:	4920      	ldr	r1, [pc, #128]	@ (8013f98 <vTaskSwitchContext+0x104>)
 8013f16:	697a      	ldr	r2, [r7, #20]
 8013f18:	4613      	mov	r3, r2
 8013f1a:	009b      	lsls	r3, r3, #2
 8013f1c:	4413      	add	r3, r2
 8013f1e:	009b      	lsls	r3, r3, #2
 8013f20:	440b      	add	r3, r1
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d10d      	bne.n	8013f44 <vTaskSwitchContext+0xb0>
	__asm volatile
 8013f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f2c:	b672      	cpsid	i
 8013f2e:	f383 8811 	msr	BASEPRI, r3
 8013f32:	f3bf 8f6f 	isb	sy
 8013f36:	f3bf 8f4f 	dsb	sy
 8013f3a:	b662      	cpsie	i
 8013f3c:	607b      	str	r3, [r7, #4]
}
 8013f3e:	bf00      	nop
 8013f40:	bf00      	nop
 8013f42:	e7fd      	b.n	8013f40 <vTaskSwitchContext+0xac>
 8013f44:	697a      	ldr	r2, [r7, #20]
 8013f46:	4613      	mov	r3, r2
 8013f48:	009b      	lsls	r3, r3, #2
 8013f4a:	4413      	add	r3, r2
 8013f4c:	009b      	lsls	r3, r3, #2
 8013f4e:	4a12      	ldr	r2, [pc, #72]	@ (8013f98 <vTaskSwitchContext+0x104>)
 8013f50:	4413      	add	r3, r2
 8013f52:	613b      	str	r3, [r7, #16]
 8013f54:	693b      	ldr	r3, [r7, #16]
 8013f56:	685b      	ldr	r3, [r3, #4]
 8013f58:	685a      	ldr	r2, [r3, #4]
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	605a      	str	r2, [r3, #4]
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	685a      	ldr	r2, [r3, #4]
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	3308      	adds	r3, #8
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d104      	bne.n	8013f74 <vTaskSwitchContext+0xe0>
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	685b      	ldr	r3, [r3, #4]
 8013f6e:	685a      	ldr	r2, [r3, #4]
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	605a      	str	r2, [r3, #4]
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	685b      	ldr	r3, [r3, #4]
 8013f78:	68db      	ldr	r3, [r3, #12]
 8013f7a:	4a05      	ldr	r2, [pc, #20]	@ (8013f90 <vTaskSwitchContext+0xfc>)
 8013f7c:	6013      	str	r3, [r2, #0]
}
 8013f7e:	bf00      	nop
 8013f80:	3720      	adds	r7, #32
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}
 8013f86:	bf00      	nop
 8013f88:	20001120 	.word	0x20001120
 8013f8c:	2000110c 	.word	0x2000110c
 8013f90:	20000ff8 	.word	0x20000ff8
 8013f94:	20001100 	.word	0x20001100
 8013f98:	20000ffc 	.word	0x20000ffc

08013f9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b084      	sub	sp, #16
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d10d      	bne.n	8013fc8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8013fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fb0:	b672      	cpsid	i
 8013fb2:	f383 8811 	msr	BASEPRI, r3
 8013fb6:	f3bf 8f6f 	isb	sy
 8013fba:	f3bf 8f4f 	dsb	sy
 8013fbe:	b662      	cpsie	i
 8013fc0:	60fb      	str	r3, [r7, #12]
}
 8013fc2:	bf00      	nop
 8013fc4:	bf00      	nop
 8013fc6:	e7fd      	b.n	8013fc4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013fc8:	4b07      	ldr	r3, [pc, #28]	@ (8013fe8 <vTaskPlaceOnEventList+0x4c>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	3318      	adds	r3, #24
 8013fce:	4619      	mov	r1, r3
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f7fe fd62 	bl	8012a9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013fd6:	2101      	movs	r1, #1
 8013fd8:	6838      	ldr	r0, [r7, #0]
 8013fda:	f000 fa7b 	bl	80144d4 <prvAddCurrentTaskToDelayedList>
}
 8013fde:	bf00      	nop
 8013fe0:	3710      	adds	r7, #16
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
 8013fe6:	bf00      	nop
 8013fe8:	20000ff8 	.word	0x20000ff8

08013fec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b086      	sub	sp, #24
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	68db      	ldr	r3, [r3, #12]
 8013ff8:	68db      	ldr	r3, [r3, #12]
 8013ffa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d10d      	bne.n	801401e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8014002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014006:	b672      	cpsid	i
 8014008:	f383 8811 	msr	BASEPRI, r3
 801400c:	f3bf 8f6f 	isb	sy
 8014010:	f3bf 8f4f 	dsb	sy
 8014014:	b662      	cpsie	i
 8014016:	60fb      	str	r3, [r7, #12]
}
 8014018:	bf00      	nop
 801401a:	bf00      	nop
 801401c:	e7fd      	b.n	801401a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	3318      	adds	r3, #24
 8014022:	4618      	mov	r0, r3
 8014024:	f7fe fd72 	bl	8012b0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014028:	4b1d      	ldr	r3, [pc, #116]	@ (80140a0 <xTaskRemoveFromEventList+0xb4>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d11c      	bne.n	801406a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	3304      	adds	r3, #4
 8014034:	4618      	mov	r0, r3
 8014036:	f7fe fd69 	bl	8012b0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801403e:	2201      	movs	r2, #1
 8014040:	409a      	lsls	r2, r3
 8014042:	4b18      	ldr	r3, [pc, #96]	@ (80140a4 <xTaskRemoveFromEventList+0xb8>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	4313      	orrs	r3, r2
 8014048:	4a16      	ldr	r2, [pc, #88]	@ (80140a4 <xTaskRemoveFromEventList+0xb8>)
 801404a:	6013      	str	r3, [r2, #0]
 801404c:	693b      	ldr	r3, [r7, #16]
 801404e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014050:	4613      	mov	r3, r2
 8014052:	009b      	lsls	r3, r3, #2
 8014054:	4413      	add	r3, r2
 8014056:	009b      	lsls	r3, r3, #2
 8014058:	4a13      	ldr	r2, [pc, #76]	@ (80140a8 <xTaskRemoveFromEventList+0xbc>)
 801405a:	441a      	add	r2, r3
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	3304      	adds	r3, #4
 8014060:	4619      	mov	r1, r3
 8014062:	4610      	mov	r0, r2
 8014064:	f7fe fcf5 	bl	8012a52 <vListInsertEnd>
 8014068:	e005      	b.n	8014076 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	3318      	adds	r3, #24
 801406e:	4619      	mov	r1, r3
 8014070:	480e      	ldr	r0, [pc, #56]	@ (80140ac <xTaskRemoveFromEventList+0xc0>)
 8014072:	f7fe fcee 	bl	8012a52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801407a:	4b0d      	ldr	r3, [pc, #52]	@ (80140b0 <xTaskRemoveFromEventList+0xc4>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014080:	429a      	cmp	r2, r3
 8014082:	d905      	bls.n	8014090 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014084:	2301      	movs	r3, #1
 8014086:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014088:	4b0a      	ldr	r3, [pc, #40]	@ (80140b4 <xTaskRemoveFromEventList+0xc8>)
 801408a:	2201      	movs	r2, #1
 801408c:	601a      	str	r2, [r3, #0]
 801408e:	e001      	b.n	8014094 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014090:	2300      	movs	r3, #0
 8014092:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014094:	697b      	ldr	r3, [r7, #20]
}
 8014096:	4618      	mov	r0, r3
 8014098:	3718      	adds	r7, #24
 801409a:	46bd      	mov	sp, r7
 801409c:	bd80      	pop	{r7, pc}
 801409e:	bf00      	nop
 80140a0:	20001120 	.word	0x20001120
 80140a4:	20001100 	.word	0x20001100
 80140a8:	20000ffc 	.word	0x20000ffc
 80140ac:	200010b8 	.word	0x200010b8
 80140b0:	20000ff8 	.word	0x20000ff8
 80140b4:	2000110c 	.word	0x2000110c

080140b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80140b8:	b480      	push	{r7}
 80140ba:	b083      	sub	sp, #12
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80140c0:	4b06      	ldr	r3, [pc, #24]	@ (80140dc <vTaskInternalSetTimeOutState+0x24>)
 80140c2:	681a      	ldr	r2, [r3, #0]
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80140c8:	4b05      	ldr	r3, [pc, #20]	@ (80140e0 <vTaskInternalSetTimeOutState+0x28>)
 80140ca:	681a      	ldr	r2, [r3, #0]
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	605a      	str	r2, [r3, #4]
}
 80140d0:	bf00      	nop
 80140d2:	370c      	adds	r7, #12
 80140d4:	46bd      	mov	sp, r7
 80140d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140da:	4770      	bx	lr
 80140dc:	20001110 	.word	0x20001110
 80140e0:	200010fc 	.word	0x200010fc

080140e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b088      	sub	sp, #32
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d10d      	bne.n	8014110 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80140f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140f8:	b672      	cpsid	i
 80140fa:	f383 8811 	msr	BASEPRI, r3
 80140fe:	f3bf 8f6f 	isb	sy
 8014102:	f3bf 8f4f 	dsb	sy
 8014106:	b662      	cpsie	i
 8014108:	613b      	str	r3, [r7, #16]
}
 801410a:	bf00      	nop
 801410c:	bf00      	nop
 801410e:	e7fd      	b.n	801410c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d10d      	bne.n	8014132 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8014116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801411a:	b672      	cpsid	i
 801411c:	f383 8811 	msr	BASEPRI, r3
 8014120:	f3bf 8f6f 	isb	sy
 8014124:	f3bf 8f4f 	dsb	sy
 8014128:	b662      	cpsie	i
 801412a:	60fb      	str	r3, [r7, #12]
}
 801412c:	bf00      	nop
 801412e:	bf00      	nop
 8014130:	e7fd      	b.n	801412e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8014132:	f000 fb43 	bl	80147bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014136:	4b1d      	ldr	r3, [pc, #116]	@ (80141ac <xTaskCheckForTimeOut+0xc8>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	685b      	ldr	r3, [r3, #4]
 8014140:	69ba      	ldr	r2, [r7, #24]
 8014142:	1ad3      	subs	r3, r2, r3
 8014144:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801414e:	d102      	bne.n	8014156 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014150:	2300      	movs	r3, #0
 8014152:	61fb      	str	r3, [r7, #28]
 8014154:	e023      	b.n	801419e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681a      	ldr	r2, [r3, #0]
 801415a:	4b15      	ldr	r3, [pc, #84]	@ (80141b0 <xTaskCheckForTimeOut+0xcc>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	429a      	cmp	r2, r3
 8014160:	d007      	beq.n	8014172 <xTaskCheckForTimeOut+0x8e>
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	685b      	ldr	r3, [r3, #4]
 8014166:	69ba      	ldr	r2, [r7, #24]
 8014168:	429a      	cmp	r2, r3
 801416a:	d302      	bcc.n	8014172 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801416c:	2301      	movs	r3, #1
 801416e:	61fb      	str	r3, [r7, #28]
 8014170:	e015      	b.n	801419e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014172:	683b      	ldr	r3, [r7, #0]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	697a      	ldr	r2, [r7, #20]
 8014178:	429a      	cmp	r2, r3
 801417a:	d20b      	bcs.n	8014194 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	681a      	ldr	r2, [r3, #0]
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	1ad2      	subs	r2, r2, r3
 8014184:	683b      	ldr	r3, [r7, #0]
 8014186:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f7ff ff95 	bl	80140b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801418e:	2300      	movs	r3, #0
 8014190:	61fb      	str	r3, [r7, #28]
 8014192:	e004      	b.n	801419e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8014194:	683b      	ldr	r3, [r7, #0]
 8014196:	2200      	movs	r2, #0
 8014198:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801419a:	2301      	movs	r3, #1
 801419c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801419e:	f000 fb43 	bl	8014828 <vPortExitCritical>

	return xReturn;
 80141a2:	69fb      	ldr	r3, [r7, #28]
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3720      	adds	r7, #32
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}
 80141ac:	200010fc 	.word	0x200010fc
 80141b0:	20001110 	.word	0x20001110

080141b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80141b4:	b480      	push	{r7}
 80141b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80141b8:	4b03      	ldr	r3, [pc, #12]	@ (80141c8 <vTaskMissedYield+0x14>)
 80141ba:	2201      	movs	r2, #1
 80141bc:	601a      	str	r2, [r3, #0]
}
 80141be:	bf00      	nop
 80141c0:	46bd      	mov	sp, r7
 80141c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c6:	4770      	bx	lr
 80141c8:	2000110c 	.word	0x2000110c

080141cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b082      	sub	sp, #8
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80141d4:	f000 f854 	bl	8014280 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80141d8:	4b07      	ldr	r3, [pc, #28]	@ (80141f8 <prvIdleTask+0x2c>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	2b01      	cmp	r3, #1
 80141de:	d907      	bls.n	80141f0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80141e0:	4b06      	ldr	r3, [pc, #24]	@ (80141fc <prvIdleTask+0x30>)
 80141e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80141e6:	601a      	str	r2, [r3, #0]
 80141e8:	f3bf 8f4f 	dsb	sy
 80141ec:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80141f0:	f7ec fa62 	bl	80006b8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80141f4:	e7ee      	b.n	80141d4 <prvIdleTask+0x8>
 80141f6:	bf00      	nop
 80141f8:	20000ffc 	.word	0x20000ffc
 80141fc:	e000ed04 	.word	0xe000ed04

08014200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b082      	sub	sp, #8
 8014204:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014206:	2300      	movs	r3, #0
 8014208:	607b      	str	r3, [r7, #4]
 801420a:	e00c      	b.n	8014226 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801420c:	687a      	ldr	r2, [r7, #4]
 801420e:	4613      	mov	r3, r2
 8014210:	009b      	lsls	r3, r3, #2
 8014212:	4413      	add	r3, r2
 8014214:	009b      	lsls	r3, r3, #2
 8014216:	4a12      	ldr	r2, [pc, #72]	@ (8014260 <prvInitialiseTaskLists+0x60>)
 8014218:	4413      	add	r3, r2
 801421a:	4618      	mov	r0, r3
 801421c:	f7fe fbec 	bl	80129f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	3301      	adds	r3, #1
 8014224:	607b      	str	r3, [r7, #4]
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2b06      	cmp	r3, #6
 801422a:	d9ef      	bls.n	801420c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801422c:	480d      	ldr	r0, [pc, #52]	@ (8014264 <prvInitialiseTaskLists+0x64>)
 801422e:	f7fe fbe3 	bl	80129f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014232:	480d      	ldr	r0, [pc, #52]	@ (8014268 <prvInitialiseTaskLists+0x68>)
 8014234:	f7fe fbe0 	bl	80129f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014238:	480c      	ldr	r0, [pc, #48]	@ (801426c <prvInitialiseTaskLists+0x6c>)
 801423a:	f7fe fbdd 	bl	80129f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801423e:	480c      	ldr	r0, [pc, #48]	@ (8014270 <prvInitialiseTaskLists+0x70>)
 8014240:	f7fe fbda 	bl	80129f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014244:	480b      	ldr	r0, [pc, #44]	@ (8014274 <prvInitialiseTaskLists+0x74>)
 8014246:	f7fe fbd7 	bl	80129f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801424a:	4b0b      	ldr	r3, [pc, #44]	@ (8014278 <prvInitialiseTaskLists+0x78>)
 801424c:	4a05      	ldr	r2, [pc, #20]	@ (8014264 <prvInitialiseTaskLists+0x64>)
 801424e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014250:	4b0a      	ldr	r3, [pc, #40]	@ (801427c <prvInitialiseTaskLists+0x7c>)
 8014252:	4a05      	ldr	r2, [pc, #20]	@ (8014268 <prvInitialiseTaskLists+0x68>)
 8014254:	601a      	str	r2, [r3, #0]
}
 8014256:	bf00      	nop
 8014258:	3708      	adds	r7, #8
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
 801425e:	bf00      	nop
 8014260:	20000ffc 	.word	0x20000ffc
 8014264:	20001088 	.word	0x20001088
 8014268:	2000109c 	.word	0x2000109c
 801426c:	200010b8 	.word	0x200010b8
 8014270:	200010cc 	.word	0x200010cc
 8014274:	200010e4 	.word	0x200010e4
 8014278:	200010b0 	.word	0x200010b0
 801427c:	200010b4 	.word	0x200010b4

08014280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014286:	e019      	b.n	80142bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014288:	f000 fa98 	bl	80147bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801428c:	4b10      	ldr	r3, [pc, #64]	@ (80142d0 <prvCheckTasksWaitingTermination+0x50>)
 801428e:	68db      	ldr	r3, [r3, #12]
 8014290:	68db      	ldr	r3, [r3, #12]
 8014292:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	3304      	adds	r3, #4
 8014298:	4618      	mov	r0, r3
 801429a:	f7fe fc37 	bl	8012b0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801429e:	4b0d      	ldr	r3, [pc, #52]	@ (80142d4 <prvCheckTasksWaitingTermination+0x54>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	3b01      	subs	r3, #1
 80142a4:	4a0b      	ldr	r2, [pc, #44]	@ (80142d4 <prvCheckTasksWaitingTermination+0x54>)
 80142a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80142a8:	4b0b      	ldr	r3, [pc, #44]	@ (80142d8 <prvCheckTasksWaitingTermination+0x58>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	3b01      	subs	r3, #1
 80142ae:	4a0a      	ldr	r2, [pc, #40]	@ (80142d8 <prvCheckTasksWaitingTermination+0x58>)
 80142b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80142b2:	f000 fab9 	bl	8014828 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	f000 f810 	bl	80142dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80142bc:	4b06      	ldr	r3, [pc, #24]	@ (80142d8 <prvCheckTasksWaitingTermination+0x58>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d1e1      	bne.n	8014288 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80142c4:	bf00      	nop
 80142c6:	bf00      	nop
 80142c8:	3708      	adds	r7, #8
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}
 80142ce:	bf00      	nop
 80142d0:	200010cc 	.word	0x200010cc
 80142d4:	200010f8 	.word	0x200010f8
 80142d8:	200010e0 	.word	0x200010e0

080142dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b084      	sub	sp, #16
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d108      	bne.n	8014300 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80142f2:	4618      	mov	r0, r3
 80142f4:	f000 fc62 	bl	8014bbc <vPortFree>
				vPortFree( pxTCB );
 80142f8:	6878      	ldr	r0, [r7, #4]
 80142fa:	f000 fc5f 	bl	8014bbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80142fe:	e01b      	b.n	8014338 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8014306:	2b01      	cmp	r3, #1
 8014308:	d103      	bne.n	8014312 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	f000 fc56 	bl	8014bbc <vPortFree>
	}
 8014310:	e012      	b.n	8014338 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8014318:	2b02      	cmp	r3, #2
 801431a:	d00d      	beq.n	8014338 <prvDeleteTCB+0x5c>
	__asm volatile
 801431c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014320:	b672      	cpsid	i
 8014322:	f383 8811 	msr	BASEPRI, r3
 8014326:	f3bf 8f6f 	isb	sy
 801432a:	f3bf 8f4f 	dsb	sy
 801432e:	b662      	cpsie	i
 8014330:	60fb      	str	r3, [r7, #12]
}
 8014332:	bf00      	nop
 8014334:	bf00      	nop
 8014336:	e7fd      	b.n	8014334 <prvDeleteTCB+0x58>
	}
 8014338:	bf00      	nop
 801433a:	3710      	adds	r7, #16
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}

08014340 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014340:	b480      	push	{r7}
 8014342:	b083      	sub	sp, #12
 8014344:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014346:	4b0c      	ldr	r3, [pc, #48]	@ (8014378 <prvResetNextTaskUnblockTime+0x38>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d104      	bne.n	801435a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014350:	4b0a      	ldr	r3, [pc, #40]	@ (801437c <prvResetNextTaskUnblockTime+0x3c>)
 8014352:	f04f 32ff 	mov.w	r2, #4294967295
 8014356:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014358:	e008      	b.n	801436c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801435a:	4b07      	ldr	r3, [pc, #28]	@ (8014378 <prvResetNextTaskUnblockTime+0x38>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	68db      	ldr	r3, [r3, #12]
 8014362:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	685b      	ldr	r3, [r3, #4]
 8014368:	4a04      	ldr	r2, [pc, #16]	@ (801437c <prvResetNextTaskUnblockTime+0x3c>)
 801436a:	6013      	str	r3, [r2, #0]
}
 801436c:	bf00      	nop
 801436e:	370c      	adds	r7, #12
 8014370:	46bd      	mov	sp, r7
 8014372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014376:	4770      	bx	lr
 8014378:	200010b0 	.word	0x200010b0
 801437c:	20001118 	.word	0x20001118

08014380 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014380:	b480      	push	{r7}
 8014382:	b083      	sub	sp, #12
 8014384:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014386:	4b0b      	ldr	r3, [pc, #44]	@ (80143b4 <xTaskGetSchedulerState+0x34>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d102      	bne.n	8014394 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801438e:	2301      	movs	r3, #1
 8014390:	607b      	str	r3, [r7, #4]
 8014392:	e008      	b.n	80143a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014394:	4b08      	ldr	r3, [pc, #32]	@ (80143b8 <xTaskGetSchedulerState+0x38>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d102      	bne.n	80143a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801439c:	2302      	movs	r3, #2
 801439e:	607b      	str	r3, [r7, #4]
 80143a0:	e001      	b.n	80143a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80143a2:	2300      	movs	r3, #0
 80143a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80143a6:	687b      	ldr	r3, [r7, #4]
	}
 80143a8:	4618      	mov	r0, r3
 80143aa:	370c      	adds	r7, #12
 80143ac:	46bd      	mov	sp, r7
 80143ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b2:	4770      	bx	lr
 80143b4:	20001104 	.word	0x20001104
 80143b8:	20001120 	.word	0x20001120

080143bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b086      	sub	sp, #24
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80143c8:	2300      	movs	r3, #0
 80143ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d074      	beq.n	80144bc <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80143d2:	4b3d      	ldr	r3, [pc, #244]	@ (80144c8 <xTaskPriorityDisinherit+0x10c>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	693a      	ldr	r2, [r7, #16]
 80143d8:	429a      	cmp	r2, r3
 80143da:	d00d      	beq.n	80143f8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80143dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143e0:	b672      	cpsid	i
 80143e2:	f383 8811 	msr	BASEPRI, r3
 80143e6:	f3bf 8f6f 	isb	sy
 80143ea:	f3bf 8f4f 	dsb	sy
 80143ee:	b662      	cpsie	i
 80143f0:	60fb      	str	r3, [r7, #12]
}
 80143f2:	bf00      	nop
 80143f4:	bf00      	nop
 80143f6:	e7fd      	b.n	80143f4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80143f8:	693b      	ldr	r3, [r7, #16]
 80143fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d10d      	bne.n	801441c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8014400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014404:	b672      	cpsid	i
 8014406:	f383 8811 	msr	BASEPRI, r3
 801440a:	f3bf 8f6f 	isb	sy
 801440e:	f3bf 8f4f 	dsb	sy
 8014412:	b662      	cpsie	i
 8014414:	60bb      	str	r3, [r7, #8]
}
 8014416:	bf00      	nop
 8014418:	bf00      	nop
 801441a:	e7fd      	b.n	8014418 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014420:	1e5a      	subs	r2, r3, #1
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801442e:	429a      	cmp	r2, r3
 8014430:	d044      	beq.n	80144bc <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014436:	2b00      	cmp	r3, #0
 8014438:	d140      	bne.n	80144bc <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	3304      	adds	r3, #4
 801443e:	4618      	mov	r0, r3
 8014440:	f7fe fb64 	bl	8012b0c <uxListRemove>
 8014444:	4603      	mov	r3, r0
 8014446:	2b00      	cmp	r3, #0
 8014448:	d115      	bne.n	8014476 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801444a:	693b      	ldr	r3, [r7, #16]
 801444c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801444e:	491f      	ldr	r1, [pc, #124]	@ (80144cc <xTaskPriorityDisinherit+0x110>)
 8014450:	4613      	mov	r3, r2
 8014452:	009b      	lsls	r3, r3, #2
 8014454:	4413      	add	r3, r2
 8014456:	009b      	lsls	r3, r3, #2
 8014458:	440b      	add	r3, r1
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d10a      	bne.n	8014476 <xTaskPriorityDisinherit+0xba>
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014464:	2201      	movs	r2, #1
 8014466:	fa02 f303 	lsl.w	r3, r2, r3
 801446a:	43da      	mvns	r2, r3
 801446c:	4b18      	ldr	r3, [pc, #96]	@ (80144d0 <xTaskPriorityDisinherit+0x114>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	4013      	ands	r3, r2
 8014472:	4a17      	ldr	r2, [pc, #92]	@ (80144d0 <xTaskPriorityDisinherit+0x114>)
 8014474:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801447e:	693b      	ldr	r3, [r7, #16]
 8014480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014482:	f1c3 0207 	rsb	r2, r3, #7
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801448e:	2201      	movs	r2, #1
 8014490:	409a      	lsls	r2, r3
 8014492:	4b0f      	ldr	r3, [pc, #60]	@ (80144d0 <xTaskPriorityDisinherit+0x114>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	4313      	orrs	r3, r2
 8014498:	4a0d      	ldr	r2, [pc, #52]	@ (80144d0 <xTaskPriorityDisinherit+0x114>)
 801449a:	6013      	str	r3, [r2, #0]
 801449c:	693b      	ldr	r3, [r7, #16]
 801449e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144a0:	4613      	mov	r3, r2
 80144a2:	009b      	lsls	r3, r3, #2
 80144a4:	4413      	add	r3, r2
 80144a6:	009b      	lsls	r3, r3, #2
 80144a8:	4a08      	ldr	r2, [pc, #32]	@ (80144cc <xTaskPriorityDisinherit+0x110>)
 80144aa:	441a      	add	r2, r3
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	3304      	adds	r3, #4
 80144b0:	4619      	mov	r1, r3
 80144b2:	4610      	mov	r0, r2
 80144b4:	f7fe facd 	bl	8012a52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80144b8:	2301      	movs	r3, #1
 80144ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80144bc:	697b      	ldr	r3, [r7, #20]
	}
 80144be:	4618      	mov	r0, r3
 80144c0:	3718      	adds	r7, #24
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}
 80144c6:	bf00      	nop
 80144c8:	20000ff8 	.word	0x20000ff8
 80144cc:	20000ffc 	.word	0x20000ffc
 80144d0:	20001100 	.word	0x20001100

080144d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b084      	sub	sp, #16
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
 80144dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80144de:	4b29      	ldr	r3, [pc, #164]	@ (8014584 <prvAddCurrentTaskToDelayedList+0xb0>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144e4:	4b28      	ldr	r3, [pc, #160]	@ (8014588 <prvAddCurrentTaskToDelayedList+0xb4>)
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	3304      	adds	r3, #4
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7fe fb0e 	bl	8012b0c <uxListRemove>
 80144f0:	4603      	mov	r3, r0
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d10b      	bne.n	801450e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80144f6:	4b24      	ldr	r3, [pc, #144]	@ (8014588 <prvAddCurrentTaskToDelayedList+0xb4>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144fc:	2201      	movs	r2, #1
 80144fe:	fa02 f303 	lsl.w	r3, r2, r3
 8014502:	43da      	mvns	r2, r3
 8014504:	4b21      	ldr	r3, [pc, #132]	@ (801458c <prvAddCurrentTaskToDelayedList+0xb8>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	4013      	ands	r3, r2
 801450a:	4a20      	ldr	r2, [pc, #128]	@ (801458c <prvAddCurrentTaskToDelayedList+0xb8>)
 801450c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014514:	d10a      	bne.n	801452c <prvAddCurrentTaskToDelayedList+0x58>
 8014516:	683b      	ldr	r3, [r7, #0]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d007      	beq.n	801452c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801451c:	4b1a      	ldr	r3, [pc, #104]	@ (8014588 <prvAddCurrentTaskToDelayedList+0xb4>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	3304      	adds	r3, #4
 8014522:	4619      	mov	r1, r3
 8014524:	481a      	ldr	r0, [pc, #104]	@ (8014590 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014526:	f7fe fa94 	bl	8012a52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801452a:	e026      	b.n	801457a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801452c:	68fa      	ldr	r2, [r7, #12]
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	4413      	add	r3, r2
 8014532:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014534:	4b14      	ldr	r3, [pc, #80]	@ (8014588 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	68ba      	ldr	r2, [r7, #8]
 801453a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801453c:	68ba      	ldr	r2, [r7, #8]
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	429a      	cmp	r2, r3
 8014542:	d209      	bcs.n	8014558 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014544:	4b13      	ldr	r3, [pc, #76]	@ (8014594 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014546:	681a      	ldr	r2, [r3, #0]
 8014548:	4b0f      	ldr	r3, [pc, #60]	@ (8014588 <prvAddCurrentTaskToDelayedList+0xb4>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	3304      	adds	r3, #4
 801454e:	4619      	mov	r1, r3
 8014550:	4610      	mov	r0, r2
 8014552:	f7fe faa2 	bl	8012a9a <vListInsert>
}
 8014556:	e010      	b.n	801457a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014558:	4b0f      	ldr	r3, [pc, #60]	@ (8014598 <prvAddCurrentTaskToDelayedList+0xc4>)
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	4b0a      	ldr	r3, [pc, #40]	@ (8014588 <prvAddCurrentTaskToDelayedList+0xb4>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	3304      	adds	r3, #4
 8014562:	4619      	mov	r1, r3
 8014564:	4610      	mov	r0, r2
 8014566:	f7fe fa98 	bl	8012a9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801456a:	4b0c      	ldr	r3, [pc, #48]	@ (801459c <prvAddCurrentTaskToDelayedList+0xc8>)
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	68ba      	ldr	r2, [r7, #8]
 8014570:	429a      	cmp	r2, r3
 8014572:	d202      	bcs.n	801457a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014574:	4a09      	ldr	r2, [pc, #36]	@ (801459c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014576:	68bb      	ldr	r3, [r7, #8]
 8014578:	6013      	str	r3, [r2, #0]
}
 801457a:	bf00      	nop
 801457c:	3710      	adds	r7, #16
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}
 8014582:	bf00      	nop
 8014584:	200010fc 	.word	0x200010fc
 8014588:	20000ff8 	.word	0x20000ff8
 801458c:	20001100 	.word	0x20001100
 8014590:	200010e4 	.word	0x200010e4
 8014594:	200010b4 	.word	0x200010b4
 8014598:	200010b0 	.word	0x200010b0
 801459c:	20001118 	.word	0x20001118

080145a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80145a0:	b480      	push	{r7}
 80145a2:	b085      	sub	sp, #20
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	60f8      	str	r0, [r7, #12]
 80145a8:	60b9      	str	r1, [r7, #8]
 80145aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	3b04      	subs	r3, #4
 80145b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80145b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	3b04      	subs	r3, #4
 80145be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	f023 0201 	bic.w	r2, r3, #1
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	3b04      	subs	r3, #4
 80145ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80145d0:	4a0c      	ldr	r2, [pc, #48]	@ (8014604 <pxPortInitialiseStack+0x64>)
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	3b14      	subs	r3, #20
 80145da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	3b04      	subs	r3, #4
 80145e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	f06f 0202 	mvn.w	r2, #2
 80145ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	3b20      	subs	r3, #32
 80145f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80145f6:	68fb      	ldr	r3, [r7, #12]
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3714      	adds	r7, #20
 80145fc:	46bd      	mov	sp, r7
 80145fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014602:	4770      	bx	lr
 8014604:	08014609 	.word	0x08014609

08014608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014608:	b480      	push	{r7}
 801460a:	b085      	sub	sp, #20
 801460c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801460e:	2300      	movs	r3, #0
 8014610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014612:	4b15      	ldr	r3, [pc, #84]	@ (8014668 <prvTaskExitError+0x60>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801461a:	d00d      	beq.n	8014638 <prvTaskExitError+0x30>
	__asm volatile
 801461c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014620:	b672      	cpsid	i
 8014622:	f383 8811 	msr	BASEPRI, r3
 8014626:	f3bf 8f6f 	isb	sy
 801462a:	f3bf 8f4f 	dsb	sy
 801462e:	b662      	cpsie	i
 8014630:	60fb      	str	r3, [r7, #12]
}
 8014632:	bf00      	nop
 8014634:	bf00      	nop
 8014636:	e7fd      	b.n	8014634 <prvTaskExitError+0x2c>
	__asm volatile
 8014638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801463c:	b672      	cpsid	i
 801463e:	f383 8811 	msr	BASEPRI, r3
 8014642:	f3bf 8f6f 	isb	sy
 8014646:	f3bf 8f4f 	dsb	sy
 801464a:	b662      	cpsie	i
 801464c:	60bb      	str	r3, [r7, #8]
}
 801464e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014650:	bf00      	nop
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d0fc      	beq.n	8014652 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014658:	bf00      	nop
 801465a:	bf00      	nop
 801465c:	3714      	adds	r7, #20
 801465e:	46bd      	mov	sp, r7
 8014660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014664:	4770      	bx	lr
 8014666:	bf00      	nop
 8014668:	20000074 	.word	0x20000074
 801466c:	00000000 	.word	0x00000000

08014670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014670:	4b07      	ldr	r3, [pc, #28]	@ (8014690 <pxCurrentTCBConst2>)
 8014672:	6819      	ldr	r1, [r3, #0]
 8014674:	6808      	ldr	r0, [r1, #0]
 8014676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801467a:	f380 8809 	msr	PSP, r0
 801467e:	f3bf 8f6f 	isb	sy
 8014682:	f04f 0000 	mov.w	r0, #0
 8014686:	f380 8811 	msr	BASEPRI, r0
 801468a:	4770      	bx	lr
 801468c:	f3af 8000 	nop.w

08014690 <pxCurrentTCBConst2>:
 8014690:	20000ff8 	.word	0x20000ff8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014694:	bf00      	nop
 8014696:	bf00      	nop

08014698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014698:	4808      	ldr	r0, [pc, #32]	@ (80146bc <prvPortStartFirstTask+0x24>)
 801469a:	6800      	ldr	r0, [r0, #0]
 801469c:	6800      	ldr	r0, [r0, #0]
 801469e:	f380 8808 	msr	MSP, r0
 80146a2:	f04f 0000 	mov.w	r0, #0
 80146a6:	f380 8814 	msr	CONTROL, r0
 80146aa:	b662      	cpsie	i
 80146ac:	b661      	cpsie	f
 80146ae:	f3bf 8f4f 	dsb	sy
 80146b2:	f3bf 8f6f 	isb	sy
 80146b6:	df00      	svc	0
 80146b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80146ba:	bf00      	nop
 80146bc:	e000ed08 	.word	0xe000ed08

080146c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b084      	sub	sp, #16
 80146c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80146c6:	4b37      	ldr	r3, [pc, #220]	@ (80147a4 <xPortStartScheduler+0xe4>)
 80146c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	b2db      	uxtb	r3, r3
 80146d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	22ff      	movs	r2, #255	@ 0xff
 80146d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	781b      	ldrb	r3, [r3, #0]
 80146dc:	b2db      	uxtb	r3, r3
 80146de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80146e0:	78fb      	ldrb	r3, [r7, #3]
 80146e2:	b2db      	uxtb	r3, r3
 80146e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80146e8:	b2da      	uxtb	r2, r3
 80146ea:	4b2f      	ldr	r3, [pc, #188]	@ (80147a8 <xPortStartScheduler+0xe8>)
 80146ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80146ee:	4b2f      	ldr	r3, [pc, #188]	@ (80147ac <xPortStartScheduler+0xec>)
 80146f0:	2207      	movs	r2, #7
 80146f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80146f4:	e009      	b.n	801470a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80146f6:	4b2d      	ldr	r3, [pc, #180]	@ (80147ac <xPortStartScheduler+0xec>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	3b01      	subs	r3, #1
 80146fc:	4a2b      	ldr	r2, [pc, #172]	@ (80147ac <xPortStartScheduler+0xec>)
 80146fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014700:	78fb      	ldrb	r3, [r7, #3]
 8014702:	b2db      	uxtb	r3, r3
 8014704:	005b      	lsls	r3, r3, #1
 8014706:	b2db      	uxtb	r3, r3
 8014708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801470a:	78fb      	ldrb	r3, [r7, #3]
 801470c:	b2db      	uxtb	r3, r3
 801470e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014712:	2b80      	cmp	r3, #128	@ 0x80
 8014714:	d0ef      	beq.n	80146f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014716:	4b25      	ldr	r3, [pc, #148]	@ (80147ac <xPortStartScheduler+0xec>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	f1c3 0307 	rsb	r3, r3, #7
 801471e:	2b04      	cmp	r3, #4
 8014720:	d00d      	beq.n	801473e <xPortStartScheduler+0x7e>
	__asm volatile
 8014722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014726:	b672      	cpsid	i
 8014728:	f383 8811 	msr	BASEPRI, r3
 801472c:	f3bf 8f6f 	isb	sy
 8014730:	f3bf 8f4f 	dsb	sy
 8014734:	b662      	cpsie	i
 8014736:	60bb      	str	r3, [r7, #8]
}
 8014738:	bf00      	nop
 801473a:	bf00      	nop
 801473c:	e7fd      	b.n	801473a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801473e:	4b1b      	ldr	r3, [pc, #108]	@ (80147ac <xPortStartScheduler+0xec>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	021b      	lsls	r3, r3, #8
 8014744:	4a19      	ldr	r2, [pc, #100]	@ (80147ac <xPortStartScheduler+0xec>)
 8014746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014748:	4b18      	ldr	r3, [pc, #96]	@ (80147ac <xPortStartScheduler+0xec>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014750:	4a16      	ldr	r2, [pc, #88]	@ (80147ac <xPortStartScheduler+0xec>)
 8014752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	b2da      	uxtb	r2, r3
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801475c:	4b14      	ldr	r3, [pc, #80]	@ (80147b0 <xPortStartScheduler+0xf0>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	4a13      	ldr	r2, [pc, #76]	@ (80147b0 <xPortStartScheduler+0xf0>)
 8014762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014768:	4b11      	ldr	r3, [pc, #68]	@ (80147b0 <xPortStartScheduler+0xf0>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	4a10      	ldr	r2, [pc, #64]	@ (80147b0 <xPortStartScheduler+0xf0>)
 801476e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014774:	f000 f8dc 	bl	8014930 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014778:	4b0e      	ldr	r3, [pc, #56]	@ (80147b4 <xPortStartScheduler+0xf4>)
 801477a:	2200      	movs	r2, #0
 801477c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801477e:	f000 f8fb 	bl	8014978 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014782:	4b0d      	ldr	r3, [pc, #52]	@ (80147b8 <xPortStartScheduler+0xf8>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	4a0c      	ldr	r2, [pc, #48]	@ (80147b8 <xPortStartScheduler+0xf8>)
 8014788:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801478c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801478e:	f7ff ff83 	bl	8014698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014792:	f7ff fb7f 	bl	8013e94 <vTaskSwitchContext>
	prvTaskExitError();
 8014796:	f7ff ff37 	bl	8014608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801479a:	2300      	movs	r3, #0
}
 801479c:	4618      	mov	r0, r3
 801479e:	3710      	adds	r7, #16
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}
 80147a4:	e000e400 	.word	0xe000e400
 80147a8:	20001124 	.word	0x20001124
 80147ac:	20001128 	.word	0x20001128
 80147b0:	e000ed20 	.word	0xe000ed20
 80147b4:	20000074 	.word	0x20000074
 80147b8:	e000ef34 	.word	0xe000ef34

080147bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80147bc:	b480      	push	{r7}
 80147be:	b083      	sub	sp, #12
 80147c0:	af00      	add	r7, sp, #0
	__asm volatile
 80147c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147c6:	b672      	cpsid	i
 80147c8:	f383 8811 	msr	BASEPRI, r3
 80147cc:	f3bf 8f6f 	isb	sy
 80147d0:	f3bf 8f4f 	dsb	sy
 80147d4:	b662      	cpsie	i
 80147d6:	607b      	str	r3, [r7, #4]
}
 80147d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80147da:	4b11      	ldr	r3, [pc, #68]	@ (8014820 <vPortEnterCritical+0x64>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	3301      	adds	r3, #1
 80147e0:	4a0f      	ldr	r2, [pc, #60]	@ (8014820 <vPortEnterCritical+0x64>)
 80147e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80147e4:	4b0e      	ldr	r3, [pc, #56]	@ (8014820 <vPortEnterCritical+0x64>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	2b01      	cmp	r3, #1
 80147ea:	d112      	bne.n	8014812 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80147ec:	4b0d      	ldr	r3, [pc, #52]	@ (8014824 <vPortEnterCritical+0x68>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	b2db      	uxtb	r3, r3
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d00d      	beq.n	8014812 <vPortEnterCritical+0x56>
	__asm volatile
 80147f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147fa:	b672      	cpsid	i
 80147fc:	f383 8811 	msr	BASEPRI, r3
 8014800:	f3bf 8f6f 	isb	sy
 8014804:	f3bf 8f4f 	dsb	sy
 8014808:	b662      	cpsie	i
 801480a:	603b      	str	r3, [r7, #0]
}
 801480c:	bf00      	nop
 801480e:	bf00      	nop
 8014810:	e7fd      	b.n	801480e <vPortEnterCritical+0x52>
	}
}
 8014812:	bf00      	nop
 8014814:	370c      	adds	r7, #12
 8014816:	46bd      	mov	sp, r7
 8014818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481c:	4770      	bx	lr
 801481e:	bf00      	nop
 8014820:	20000074 	.word	0x20000074
 8014824:	e000ed04 	.word	0xe000ed04

08014828 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014828:	b480      	push	{r7}
 801482a:	b083      	sub	sp, #12
 801482c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801482e:	4b13      	ldr	r3, [pc, #76]	@ (801487c <vPortExitCritical+0x54>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d10d      	bne.n	8014852 <vPortExitCritical+0x2a>
	__asm volatile
 8014836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801483a:	b672      	cpsid	i
 801483c:	f383 8811 	msr	BASEPRI, r3
 8014840:	f3bf 8f6f 	isb	sy
 8014844:	f3bf 8f4f 	dsb	sy
 8014848:	b662      	cpsie	i
 801484a:	607b      	str	r3, [r7, #4]
}
 801484c:	bf00      	nop
 801484e:	bf00      	nop
 8014850:	e7fd      	b.n	801484e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8014852:	4b0a      	ldr	r3, [pc, #40]	@ (801487c <vPortExitCritical+0x54>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	3b01      	subs	r3, #1
 8014858:	4a08      	ldr	r2, [pc, #32]	@ (801487c <vPortExitCritical+0x54>)
 801485a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801485c:	4b07      	ldr	r3, [pc, #28]	@ (801487c <vPortExitCritical+0x54>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d105      	bne.n	8014870 <vPortExitCritical+0x48>
 8014864:	2300      	movs	r3, #0
 8014866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	f383 8811 	msr	BASEPRI, r3
}
 801486e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014870:	bf00      	nop
 8014872:	370c      	adds	r7, #12
 8014874:	46bd      	mov	sp, r7
 8014876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487a:	4770      	bx	lr
 801487c:	20000074 	.word	0x20000074

08014880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014880:	f3ef 8009 	mrs	r0, PSP
 8014884:	f3bf 8f6f 	isb	sy
 8014888:	4b15      	ldr	r3, [pc, #84]	@ (80148e0 <pxCurrentTCBConst>)
 801488a:	681a      	ldr	r2, [r3, #0]
 801488c:	f01e 0f10 	tst.w	lr, #16
 8014890:	bf08      	it	eq
 8014892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801489a:	6010      	str	r0, [r2, #0]
 801489c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80148a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80148a4:	b672      	cpsid	i
 80148a6:	f380 8811 	msr	BASEPRI, r0
 80148aa:	f3bf 8f4f 	dsb	sy
 80148ae:	f3bf 8f6f 	isb	sy
 80148b2:	b662      	cpsie	i
 80148b4:	f7ff faee 	bl	8013e94 <vTaskSwitchContext>
 80148b8:	f04f 0000 	mov.w	r0, #0
 80148bc:	f380 8811 	msr	BASEPRI, r0
 80148c0:	bc09      	pop	{r0, r3}
 80148c2:	6819      	ldr	r1, [r3, #0]
 80148c4:	6808      	ldr	r0, [r1, #0]
 80148c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148ca:	f01e 0f10 	tst.w	lr, #16
 80148ce:	bf08      	it	eq
 80148d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80148d4:	f380 8809 	msr	PSP, r0
 80148d8:	f3bf 8f6f 	isb	sy
 80148dc:	4770      	bx	lr
 80148de:	bf00      	nop

080148e0 <pxCurrentTCBConst>:
 80148e0:	20000ff8 	.word	0x20000ff8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80148e4:	bf00      	nop
 80148e6:	bf00      	nop

080148e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b082      	sub	sp, #8
 80148ec:	af00      	add	r7, sp, #0
	__asm volatile
 80148ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148f2:	b672      	cpsid	i
 80148f4:	f383 8811 	msr	BASEPRI, r3
 80148f8:	f3bf 8f6f 	isb	sy
 80148fc:	f3bf 8f4f 	dsb	sy
 8014900:	b662      	cpsie	i
 8014902:	607b      	str	r3, [r7, #4]
}
 8014904:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014906:	f7ff fa09 	bl	8013d1c <xTaskIncrementTick>
 801490a:	4603      	mov	r3, r0
 801490c:	2b00      	cmp	r3, #0
 801490e:	d003      	beq.n	8014918 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014910:	4b06      	ldr	r3, [pc, #24]	@ (801492c <SysTick_Handler+0x44>)
 8014912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014916:	601a      	str	r2, [r3, #0]
 8014918:	2300      	movs	r3, #0
 801491a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	f383 8811 	msr	BASEPRI, r3
}
 8014922:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014924:	bf00      	nop
 8014926:	3708      	adds	r7, #8
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}
 801492c:	e000ed04 	.word	0xe000ed04

08014930 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014930:	b480      	push	{r7}
 8014932:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014934:	4b0b      	ldr	r3, [pc, #44]	@ (8014964 <vPortSetupTimerInterrupt+0x34>)
 8014936:	2200      	movs	r2, #0
 8014938:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801493a:	4b0b      	ldr	r3, [pc, #44]	@ (8014968 <vPortSetupTimerInterrupt+0x38>)
 801493c:	2200      	movs	r2, #0
 801493e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014940:	4b0a      	ldr	r3, [pc, #40]	@ (801496c <vPortSetupTimerInterrupt+0x3c>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	4a0a      	ldr	r2, [pc, #40]	@ (8014970 <vPortSetupTimerInterrupt+0x40>)
 8014946:	fba2 2303 	umull	r2, r3, r2, r3
 801494a:	099b      	lsrs	r3, r3, #6
 801494c:	4a09      	ldr	r2, [pc, #36]	@ (8014974 <vPortSetupTimerInterrupt+0x44>)
 801494e:	3b01      	subs	r3, #1
 8014950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014952:	4b04      	ldr	r3, [pc, #16]	@ (8014964 <vPortSetupTimerInterrupt+0x34>)
 8014954:	2207      	movs	r2, #7
 8014956:	601a      	str	r2, [r3, #0]
}
 8014958:	bf00      	nop
 801495a:	46bd      	mov	sp, r7
 801495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014960:	4770      	bx	lr
 8014962:	bf00      	nop
 8014964:	e000e010 	.word	0xe000e010
 8014968:	e000e018 	.word	0xe000e018
 801496c:	20000000 	.word	0x20000000
 8014970:	10624dd3 	.word	0x10624dd3
 8014974:	e000e014 	.word	0xe000e014

08014978 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014978:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014988 <vPortEnableVFP+0x10>
 801497c:	6801      	ldr	r1, [r0, #0]
 801497e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014982:	6001      	str	r1, [r0, #0]
 8014984:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014986:	bf00      	nop
 8014988:	e000ed88 	.word	0xe000ed88

0801498c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801498c:	b480      	push	{r7}
 801498e:	b085      	sub	sp, #20
 8014990:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014992:	f3ef 8305 	mrs	r3, IPSR
 8014996:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	2b0f      	cmp	r3, #15
 801499c:	d917      	bls.n	80149ce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801499e:	4a1a      	ldr	r2, [pc, #104]	@ (8014a08 <vPortValidateInterruptPriority+0x7c>)
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	4413      	add	r3, r2
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80149a8:	4b18      	ldr	r3, [pc, #96]	@ (8014a0c <vPortValidateInterruptPriority+0x80>)
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	7afa      	ldrb	r2, [r7, #11]
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d20d      	bcs.n	80149ce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80149b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149b6:	b672      	cpsid	i
 80149b8:	f383 8811 	msr	BASEPRI, r3
 80149bc:	f3bf 8f6f 	isb	sy
 80149c0:	f3bf 8f4f 	dsb	sy
 80149c4:	b662      	cpsie	i
 80149c6:	607b      	str	r3, [r7, #4]
}
 80149c8:	bf00      	nop
 80149ca:	bf00      	nop
 80149cc:	e7fd      	b.n	80149ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80149ce:	4b10      	ldr	r3, [pc, #64]	@ (8014a10 <vPortValidateInterruptPriority+0x84>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80149d6:	4b0f      	ldr	r3, [pc, #60]	@ (8014a14 <vPortValidateInterruptPriority+0x88>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	429a      	cmp	r2, r3
 80149dc:	d90d      	bls.n	80149fa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80149de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149e2:	b672      	cpsid	i
 80149e4:	f383 8811 	msr	BASEPRI, r3
 80149e8:	f3bf 8f6f 	isb	sy
 80149ec:	f3bf 8f4f 	dsb	sy
 80149f0:	b662      	cpsie	i
 80149f2:	603b      	str	r3, [r7, #0]
}
 80149f4:	bf00      	nop
 80149f6:	bf00      	nop
 80149f8:	e7fd      	b.n	80149f6 <vPortValidateInterruptPriority+0x6a>
	}
 80149fa:	bf00      	nop
 80149fc:	3714      	adds	r7, #20
 80149fe:	46bd      	mov	sp, r7
 8014a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a04:	4770      	bx	lr
 8014a06:	bf00      	nop
 8014a08:	e000e3f0 	.word	0xe000e3f0
 8014a0c:	20001124 	.word	0x20001124
 8014a10:	e000ed0c 	.word	0xe000ed0c
 8014a14:	20001128 	.word	0x20001128

08014a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b08a      	sub	sp, #40	@ 0x28
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014a20:	2300      	movs	r3, #0
 8014a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014a24:	f7ff f8aa 	bl	8013b7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014a28:	4b5f      	ldr	r3, [pc, #380]	@ (8014ba8 <pvPortMalloc+0x190>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d101      	bne.n	8014a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014a30:	f000 f924 	bl	8014c7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014a34:	4b5d      	ldr	r3, [pc, #372]	@ (8014bac <pvPortMalloc+0x194>)
 8014a36:	681a      	ldr	r2, [r3, #0]
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	4013      	ands	r3, r2
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	f040 8094 	bne.w	8014b6a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d020      	beq.n	8014a8a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8014a48:	2208      	movs	r2, #8
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	4413      	add	r3, r2
 8014a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f003 0307 	and.w	r3, r3, #7
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d017      	beq.n	8014a8a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	f023 0307 	bic.w	r3, r3, #7
 8014a60:	3308      	adds	r3, #8
 8014a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	f003 0307 	and.w	r3, r3, #7
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d00d      	beq.n	8014a8a <pvPortMalloc+0x72>
	__asm volatile
 8014a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a72:	b672      	cpsid	i
 8014a74:	f383 8811 	msr	BASEPRI, r3
 8014a78:	f3bf 8f6f 	isb	sy
 8014a7c:	f3bf 8f4f 	dsb	sy
 8014a80:	b662      	cpsie	i
 8014a82:	617b      	str	r3, [r7, #20]
}
 8014a84:	bf00      	nop
 8014a86:	bf00      	nop
 8014a88:	e7fd      	b.n	8014a86 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d06c      	beq.n	8014b6a <pvPortMalloc+0x152>
 8014a90:	4b47      	ldr	r3, [pc, #284]	@ (8014bb0 <pvPortMalloc+0x198>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	687a      	ldr	r2, [r7, #4]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d867      	bhi.n	8014b6a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014a9a:	4b46      	ldr	r3, [pc, #280]	@ (8014bb4 <pvPortMalloc+0x19c>)
 8014a9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014a9e:	4b45      	ldr	r3, [pc, #276]	@ (8014bb4 <pvPortMalloc+0x19c>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014aa4:	e004      	b.n	8014ab0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8014aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014aa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ab2:	685b      	ldr	r3, [r3, #4]
 8014ab4:	687a      	ldr	r2, [r7, #4]
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d903      	bls.n	8014ac2 <pvPortMalloc+0xaa>
 8014aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d1f1      	bne.n	8014aa6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014ac2:	4b39      	ldr	r3, [pc, #228]	@ (8014ba8 <pvPortMalloc+0x190>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ac8:	429a      	cmp	r2, r3
 8014aca:	d04e      	beq.n	8014b6a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014acc:	6a3b      	ldr	r3, [r7, #32]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	2208      	movs	r2, #8
 8014ad2:	4413      	add	r3, r2
 8014ad4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ad8:	681a      	ldr	r2, [r3, #0]
 8014ada:	6a3b      	ldr	r3, [r7, #32]
 8014adc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ae0:	685a      	ldr	r2, [r3, #4]
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	1ad2      	subs	r2, r2, r3
 8014ae6:	2308      	movs	r3, #8
 8014ae8:	005b      	lsls	r3, r3, #1
 8014aea:	429a      	cmp	r2, r3
 8014aec:	d922      	bls.n	8014b34 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	4413      	add	r3, r2
 8014af4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014af6:	69bb      	ldr	r3, [r7, #24]
 8014af8:	f003 0307 	and.w	r3, r3, #7
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d00d      	beq.n	8014b1c <pvPortMalloc+0x104>
	__asm volatile
 8014b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b04:	b672      	cpsid	i
 8014b06:	f383 8811 	msr	BASEPRI, r3
 8014b0a:	f3bf 8f6f 	isb	sy
 8014b0e:	f3bf 8f4f 	dsb	sy
 8014b12:	b662      	cpsie	i
 8014b14:	613b      	str	r3, [r7, #16]
}
 8014b16:	bf00      	nop
 8014b18:	bf00      	nop
 8014b1a:	e7fd      	b.n	8014b18 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b1e:	685a      	ldr	r2, [r3, #4]
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	1ad2      	subs	r2, r2, r3
 8014b24:	69bb      	ldr	r3, [r7, #24]
 8014b26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b2a:	687a      	ldr	r2, [r7, #4]
 8014b2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014b2e:	69b8      	ldr	r0, [r7, #24]
 8014b30:	f000 f906 	bl	8014d40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014b34:	4b1e      	ldr	r3, [pc, #120]	@ (8014bb0 <pvPortMalloc+0x198>)
 8014b36:	681a      	ldr	r2, [r3, #0]
 8014b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b3a:	685b      	ldr	r3, [r3, #4]
 8014b3c:	1ad3      	subs	r3, r2, r3
 8014b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8014bb0 <pvPortMalloc+0x198>)
 8014b40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014b42:	4b1b      	ldr	r3, [pc, #108]	@ (8014bb0 <pvPortMalloc+0x198>)
 8014b44:	681a      	ldr	r2, [r3, #0]
 8014b46:	4b1c      	ldr	r3, [pc, #112]	@ (8014bb8 <pvPortMalloc+0x1a0>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d203      	bcs.n	8014b56 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014b4e:	4b18      	ldr	r3, [pc, #96]	@ (8014bb0 <pvPortMalloc+0x198>)
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	4a19      	ldr	r2, [pc, #100]	@ (8014bb8 <pvPortMalloc+0x1a0>)
 8014b54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b58:	685a      	ldr	r2, [r3, #4]
 8014b5a:	4b14      	ldr	r3, [pc, #80]	@ (8014bac <pvPortMalloc+0x194>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	431a      	orrs	r2, r3
 8014b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b66:	2200      	movs	r2, #0
 8014b68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014b6a:	f7ff f815 	bl	8013b98 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8014b6e:	69fb      	ldr	r3, [r7, #28]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d101      	bne.n	8014b78 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8014b74:	f7eb fdb2 	bl	80006dc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014b78:	69fb      	ldr	r3, [r7, #28]
 8014b7a:	f003 0307 	and.w	r3, r3, #7
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d00d      	beq.n	8014b9e <pvPortMalloc+0x186>
	__asm volatile
 8014b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b86:	b672      	cpsid	i
 8014b88:	f383 8811 	msr	BASEPRI, r3
 8014b8c:	f3bf 8f6f 	isb	sy
 8014b90:	f3bf 8f4f 	dsb	sy
 8014b94:	b662      	cpsie	i
 8014b96:	60fb      	str	r3, [r7, #12]
}
 8014b98:	bf00      	nop
 8014b9a:	bf00      	nop
 8014b9c:	e7fd      	b.n	8014b9a <pvPortMalloc+0x182>
	return pvReturn;
 8014b9e:	69fb      	ldr	r3, [r7, #28]
}
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	3728      	adds	r7, #40	@ 0x28
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}
 8014ba8:	20009134 	.word	0x20009134
 8014bac:	20009140 	.word	0x20009140
 8014bb0:	20009138 	.word	0x20009138
 8014bb4:	2000912c 	.word	0x2000912c
 8014bb8:	2000913c 	.word	0x2000913c

08014bbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b086      	sub	sp, #24
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d04e      	beq.n	8014c6c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014bce:	2308      	movs	r3, #8
 8014bd0:	425b      	negs	r3, r3
 8014bd2:	697a      	ldr	r2, [r7, #20]
 8014bd4:	4413      	add	r3, r2
 8014bd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014bdc:	693b      	ldr	r3, [r7, #16]
 8014bde:	685a      	ldr	r2, [r3, #4]
 8014be0:	4b24      	ldr	r3, [pc, #144]	@ (8014c74 <vPortFree+0xb8>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	4013      	ands	r3, r2
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d10d      	bne.n	8014c06 <vPortFree+0x4a>
	__asm volatile
 8014bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bee:	b672      	cpsid	i
 8014bf0:	f383 8811 	msr	BASEPRI, r3
 8014bf4:	f3bf 8f6f 	isb	sy
 8014bf8:	f3bf 8f4f 	dsb	sy
 8014bfc:	b662      	cpsie	i
 8014bfe:	60fb      	str	r3, [r7, #12]
}
 8014c00:	bf00      	nop
 8014c02:	bf00      	nop
 8014c04:	e7fd      	b.n	8014c02 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d00d      	beq.n	8014c2a <vPortFree+0x6e>
	__asm volatile
 8014c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c12:	b672      	cpsid	i
 8014c14:	f383 8811 	msr	BASEPRI, r3
 8014c18:	f3bf 8f6f 	isb	sy
 8014c1c:	f3bf 8f4f 	dsb	sy
 8014c20:	b662      	cpsie	i
 8014c22:	60bb      	str	r3, [r7, #8]
}
 8014c24:	bf00      	nop
 8014c26:	bf00      	nop
 8014c28:	e7fd      	b.n	8014c26 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014c2a:	693b      	ldr	r3, [r7, #16]
 8014c2c:	685a      	ldr	r2, [r3, #4]
 8014c2e:	4b11      	ldr	r3, [pc, #68]	@ (8014c74 <vPortFree+0xb8>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	4013      	ands	r3, r2
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d019      	beq.n	8014c6c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d115      	bne.n	8014c6c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	685a      	ldr	r2, [r3, #4]
 8014c44:	4b0b      	ldr	r3, [pc, #44]	@ (8014c74 <vPortFree+0xb8>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	43db      	mvns	r3, r3
 8014c4a:	401a      	ands	r2, r3
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014c50:	f7fe ff94 	bl	8013b7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	685a      	ldr	r2, [r3, #4]
 8014c58:	4b07      	ldr	r3, [pc, #28]	@ (8014c78 <vPortFree+0xbc>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	4413      	add	r3, r2
 8014c5e:	4a06      	ldr	r2, [pc, #24]	@ (8014c78 <vPortFree+0xbc>)
 8014c60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014c62:	6938      	ldr	r0, [r7, #16]
 8014c64:	f000 f86c 	bl	8014d40 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014c68:	f7fe ff96 	bl	8013b98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014c6c:	bf00      	nop
 8014c6e:	3718      	adds	r7, #24
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}
 8014c74:	20009140 	.word	0x20009140
 8014c78:	20009138 	.word	0x20009138

08014c7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b085      	sub	sp, #20
 8014c80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014c86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014c88:	4b27      	ldr	r3, [pc, #156]	@ (8014d28 <prvHeapInit+0xac>)
 8014c8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	f003 0307 	and.w	r3, r3, #7
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d00c      	beq.n	8014cb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	3307      	adds	r3, #7
 8014c9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	f023 0307 	bic.w	r3, r3, #7
 8014ca2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014ca4:	68ba      	ldr	r2, [r7, #8]
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	1ad3      	subs	r3, r2, r3
 8014caa:	4a1f      	ldr	r2, [pc, #124]	@ (8014d28 <prvHeapInit+0xac>)
 8014cac:	4413      	add	r3, r2
 8014cae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8014d2c <prvHeapInit+0xb0>)
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014cba:	4b1c      	ldr	r3, [pc, #112]	@ (8014d2c <prvHeapInit+0xb0>)
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	68ba      	ldr	r2, [r7, #8]
 8014cc4:	4413      	add	r3, r2
 8014cc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014cc8:	2208      	movs	r2, #8
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	1a9b      	subs	r3, r3, r2
 8014cce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	f023 0307 	bic.w	r3, r3, #7
 8014cd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	4a15      	ldr	r2, [pc, #84]	@ (8014d30 <prvHeapInit+0xb4>)
 8014cdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014cde:	4b14      	ldr	r3, [pc, #80]	@ (8014d30 <prvHeapInit+0xb4>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014ce6:	4b12      	ldr	r3, [pc, #72]	@ (8014d30 <prvHeapInit+0xb4>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2200      	movs	r2, #0
 8014cec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	68fa      	ldr	r2, [r7, #12]
 8014cf6:	1ad2      	subs	r2, r2, r3
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8014d30 <prvHeapInit+0xb4>)
 8014cfe:	681a      	ldr	r2, [r3, #0]
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d04:	683b      	ldr	r3, [r7, #0]
 8014d06:	685b      	ldr	r3, [r3, #4]
 8014d08:	4a0a      	ldr	r2, [pc, #40]	@ (8014d34 <prvHeapInit+0xb8>)
 8014d0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	685b      	ldr	r3, [r3, #4]
 8014d10:	4a09      	ldr	r2, [pc, #36]	@ (8014d38 <prvHeapInit+0xbc>)
 8014d12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014d14:	4b09      	ldr	r3, [pc, #36]	@ (8014d3c <prvHeapInit+0xc0>)
 8014d16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8014d1a:	601a      	str	r2, [r3, #0]
}
 8014d1c:	bf00      	nop
 8014d1e:	3714      	adds	r7, #20
 8014d20:	46bd      	mov	sp, r7
 8014d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d26:	4770      	bx	lr
 8014d28:	2000112c 	.word	0x2000112c
 8014d2c:	2000912c 	.word	0x2000912c
 8014d30:	20009134 	.word	0x20009134
 8014d34:	2000913c 	.word	0x2000913c
 8014d38:	20009138 	.word	0x20009138
 8014d3c:	20009140 	.word	0x20009140

08014d40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014d40:	b480      	push	{r7}
 8014d42:	b085      	sub	sp, #20
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014d48:	4b28      	ldr	r3, [pc, #160]	@ (8014dec <prvInsertBlockIntoFreeList+0xac>)
 8014d4a:	60fb      	str	r3, [r7, #12]
 8014d4c:	e002      	b.n	8014d54 <prvInsertBlockIntoFreeList+0x14>
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	60fb      	str	r3, [r7, #12]
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	687a      	ldr	r2, [r7, #4]
 8014d5a:	429a      	cmp	r2, r3
 8014d5c:	d8f7      	bhi.n	8014d4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	685b      	ldr	r3, [r3, #4]
 8014d66:	68ba      	ldr	r2, [r7, #8]
 8014d68:	4413      	add	r3, r2
 8014d6a:	687a      	ldr	r2, [r7, #4]
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d108      	bne.n	8014d82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	685a      	ldr	r2, [r3, #4]
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	685b      	ldr	r3, [r3, #4]
 8014d78:	441a      	add	r2, r3
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	685b      	ldr	r3, [r3, #4]
 8014d8a:	68ba      	ldr	r2, [r7, #8]
 8014d8c:	441a      	add	r2, r3
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	429a      	cmp	r2, r3
 8014d94:	d118      	bne.n	8014dc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	681a      	ldr	r2, [r3, #0]
 8014d9a:	4b15      	ldr	r3, [pc, #84]	@ (8014df0 <prvInsertBlockIntoFreeList+0xb0>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d00d      	beq.n	8014dbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	685a      	ldr	r2, [r3, #4]
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	685b      	ldr	r3, [r3, #4]
 8014dac:	441a      	add	r2, r3
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	681a      	ldr	r2, [r3, #0]
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	601a      	str	r2, [r3, #0]
 8014dbc:	e008      	b.n	8014dd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8014df0 <prvInsertBlockIntoFreeList+0xb0>)
 8014dc0:	681a      	ldr	r2, [r3, #0]
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	601a      	str	r2, [r3, #0]
 8014dc6:	e003      	b.n	8014dd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	681a      	ldr	r2, [r3, #0]
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014dd0:	68fa      	ldr	r2, [r7, #12]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d002      	beq.n	8014dde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	687a      	ldr	r2, [r7, #4]
 8014ddc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014dde:	bf00      	nop
 8014de0:	3714      	adds	r7, #20
 8014de2:	46bd      	mov	sp, r7
 8014de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de8:	4770      	bx	lr
 8014dea:	bf00      	nop
 8014dec:	2000912c 	.word	0x2000912c
 8014df0:	20009134 	.word	0x20009134

08014df4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8014df8:	2201      	movs	r2, #1
 8014dfa:	490e      	ldr	r1, [pc, #56]	@ (8014e34 <MX_USB_HOST_Init+0x40>)
 8014dfc:	480e      	ldr	r0, [pc, #56]	@ (8014e38 <MX_USB_HOST_Init+0x44>)
 8014dfe:	f7fb fde1 	bl	80109c4 <USBH_Init>
 8014e02:	4603      	mov	r3, r0
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d001      	beq.n	8014e0c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8014e08:	f7ed fb9e 	bl	8002548 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8014e0c:	490b      	ldr	r1, [pc, #44]	@ (8014e3c <MX_USB_HOST_Init+0x48>)
 8014e0e:	480a      	ldr	r0, [pc, #40]	@ (8014e38 <MX_USB_HOST_Init+0x44>)
 8014e10:	f7fb feab 	bl	8010b6a <USBH_RegisterClass>
 8014e14:	4603      	mov	r3, r0
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d001      	beq.n	8014e1e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8014e1a:	f7ed fb95 	bl	8002548 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8014e1e:	4806      	ldr	r0, [pc, #24]	@ (8014e38 <MX_USB_HOST_Init+0x44>)
 8014e20:	f7fb ff2f 	bl	8010c82 <USBH_Start>
 8014e24:	4603      	mov	r3, r0
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d001      	beq.n	8014e2e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8014e2a:	f7ed fb8d 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8014e2e:	bf00      	nop
 8014e30:	bd80      	pop	{r7, pc}
 8014e32:	bf00      	nop
 8014e34:	08014e41 	.word	0x08014e41
 8014e38:	20009144 	.word	0x20009144
 8014e3c:	20000054 	.word	0x20000054

08014e40 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8014e40:	b480      	push	{r7}
 8014e42:	b083      	sub	sp, #12
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
 8014e48:	460b      	mov	r3, r1
 8014e4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8014e4c:	78fb      	ldrb	r3, [r7, #3]
 8014e4e:	3b01      	subs	r3, #1
 8014e50:	2b04      	cmp	r3, #4
 8014e52:	d819      	bhi.n	8014e88 <USBH_UserProcess+0x48>
 8014e54:	a201      	add	r2, pc, #4	@ (adr r2, 8014e5c <USBH_UserProcess+0x1c>)
 8014e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e5a:	bf00      	nop
 8014e5c:	08014e89 	.word	0x08014e89
 8014e60:	08014e79 	.word	0x08014e79
 8014e64:	08014e89 	.word	0x08014e89
 8014e68:	08014e81 	.word	0x08014e81
 8014e6c:	08014e71 	.word	0x08014e71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8014e70:	4b09      	ldr	r3, [pc, #36]	@ (8014e98 <USBH_UserProcess+0x58>)
 8014e72:	2203      	movs	r2, #3
 8014e74:	701a      	strb	r2, [r3, #0]
  break;
 8014e76:	e008      	b.n	8014e8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8014e78:	4b07      	ldr	r3, [pc, #28]	@ (8014e98 <USBH_UserProcess+0x58>)
 8014e7a:	2202      	movs	r2, #2
 8014e7c:	701a      	strb	r2, [r3, #0]
  break;
 8014e7e:	e004      	b.n	8014e8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014e80:	4b05      	ldr	r3, [pc, #20]	@ (8014e98 <USBH_UserProcess+0x58>)
 8014e82:	2201      	movs	r2, #1
 8014e84:	701a      	strb	r2, [r3, #0]
  break;
 8014e86:	e000      	b.n	8014e8a <USBH_UserProcess+0x4a>

  default:
  break;
 8014e88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8014e8a:	bf00      	nop
 8014e8c:	370c      	adds	r7, #12
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e94:	4770      	bx	lr
 8014e96:	bf00      	nop
 8014e98:	20009528 	.word	0x20009528

08014e9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b08a      	sub	sp, #40	@ 0x28
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014ea4:	f107 0314 	add.w	r3, r7, #20
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	601a      	str	r2, [r3, #0]
 8014eac:	605a      	str	r2, [r3, #4]
 8014eae:	609a      	str	r2, [r3, #8]
 8014eb0:	60da      	str	r2, [r3, #12]
 8014eb2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014ebc:	d13c      	bne.n	8014f38 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014ebe:	4b20      	ldr	r3, [pc, #128]	@ (8014f40 <HAL_HCD_MspInit+0xa4>)
 8014ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8014f40 <HAL_HCD_MspInit+0xa4>)
 8014ec4:	f043 0301 	orr.w	r3, r3, #1
 8014ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8014eca:	4b1d      	ldr	r3, [pc, #116]	@ (8014f40 <HAL_HCD_MspInit+0xa4>)
 8014ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ece:	f003 0301 	and.w	r3, r3, #1
 8014ed2:	613b      	str	r3, [r7, #16]
 8014ed4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8014ed6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8014eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014edc:	2302      	movs	r3, #2
 8014ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014ee4:	2303      	movs	r3, #3
 8014ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014ee8:	230a      	movs	r3, #10
 8014eea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014eec:	f107 0314 	add.w	r3, r7, #20
 8014ef0:	4619      	mov	r1, r3
 8014ef2:	4814      	ldr	r0, [pc, #80]	@ (8014f44 <HAL_HCD_MspInit+0xa8>)
 8014ef4:	f7f0 ff52 	bl	8005d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014ef8:	4b11      	ldr	r3, [pc, #68]	@ (8014f40 <HAL_HCD_MspInit+0xa4>)
 8014efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014efc:	4a10      	ldr	r2, [pc, #64]	@ (8014f40 <HAL_HCD_MspInit+0xa4>)
 8014efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014f02:	6353      	str	r3, [r2, #52]	@ 0x34
 8014f04:	4b0e      	ldr	r3, [pc, #56]	@ (8014f40 <HAL_HCD_MspInit+0xa4>)
 8014f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014f0c:	60fb      	str	r3, [r7, #12]
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	4b0b      	ldr	r3, [pc, #44]	@ (8014f40 <HAL_HCD_MspInit+0xa4>)
 8014f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f14:	4a0a      	ldr	r2, [pc, #40]	@ (8014f40 <HAL_HCD_MspInit+0xa4>)
 8014f16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8014f1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8014f1c:	4b08      	ldr	r3, [pc, #32]	@ (8014f40 <HAL_HCD_MspInit+0xa4>)
 8014f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014f24:	60bb      	str	r3, [r7, #8]
 8014f26:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014f28:	2200      	movs	r2, #0
 8014f2a:	2105      	movs	r1, #5
 8014f2c:	2043      	movs	r0, #67	@ 0x43
 8014f2e:	f7ef ffcb 	bl	8004ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014f32:	2043      	movs	r0, #67	@ 0x43
 8014f34:	f7ef ffe4 	bl	8004f00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014f38:	bf00      	nop
 8014f3a:	3728      	adds	r7, #40	@ 0x28
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	bd80      	pop	{r7, pc}
 8014f40:	40023800 	.word	0x40023800
 8014f44:	40020000 	.word	0x40020000

08014f48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b082      	sub	sp, #8
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014f56:	4618      	mov	r0, r3
 8014f58:	f7fc facb 	bl	80114f2 <USBH_LL_IncTimer>
}
 8014f5c:	bf00      	nop
 8014f5e:	3708      	adds	r7, #8
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b082      	sub	sp, #8
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7fc fb0b 	bl	801158e <USBH_LL_Connect>
}
 8014f78:	bf00      	nop
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}

08014f80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b082      	sub	sp, #8
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7fc fb18 	bl	80115c4 <USBH_LL_Disconnect>
}
 8014f94:	bf00      	nop
 8014f96:	3708      	adds	r7, #8
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}

08014f9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b082      	sub	sp, #8
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
 8014fa4:	460b      	mov	r3, r1
 8014fa6:	70fb      	strb	r3, [r7, #3]
 8014fa8:	4613      	mov	r3, r2
 8014faa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f7fc fb6c 	bl	8011690 <USBH_LL_NotifyURBChange>
#endif
}
 8014fb8:	bf00      	nop
 8014fba:	3708      	adds	r7, #8
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7fc fab9 	bl	8011546 <USBH_LL_PortEnabled>
}
 8014fd4:	bf00      	nop
 8014fd6:	3708      	adds	r7, #8
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	bd80      	pop	{r7, pc}

08014fdc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b082      	sub	sp, #8
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014fea:	4618      	mov	r0, r3
 8014fec:	f7fc fabd 	bl	801156a <USBH_LL_PortDisabled>
}
 8014ff0:	bf00      	nop
 8014ff2:	3708      	adds	r7, #8
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}

08014ff8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b082      	sub	sp, #8
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8015006:	2b01      	cmp	r3, #1
 8015008:	d12a      	bne.n	8015060 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801500a:	4a18      	ldr	r2, [pc, #96]	@ (801506c <USBH_LL_Init+0x74>)
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	4a15      	ldr	r2, [pc, #84]	@ (801506c <USBH_LL_Init+0x74>)
 8015016:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801501a:	4b14      	ldr	r3, [pc, #80]	@ (801506c <USBH_LL_Init+0x74>)
 801501c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8015020:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015022:	4b12      	ldr	r3, [pc, #72]	@ (801506c <USBH_LL_Init+0x74>)
 8015024:	2208      	movs	r2, #8
 8015026:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015028:	4b10      	ldr	r3, [pc, #64]	@ (801506c <USBH_LL_Init+0x74>)
 801502a:	2201      	movs	r2, #1
 801502c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801502e:	4b0f      	ldr	r3, [pc, #60]	@ (801506c <USBH_LL_Init+0x74>)
 8015030:	2200      	movs	r2, #0
 8015032:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015034:	4b0d      	ldr	r3, [pc, #52]	@ (801506c <USBH_LL_Init+0x74>)
 8015036:	2202      	movs	r2, #2
 8015038:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801503a:	4b0c      	ldr	r3, [pc, #48]	@ (801506c <USBH_LL_Init+0x74>)
 801503c:	2200      	movs	r2, #0
 801503e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015040:	480a      	ldr	r0, [pc, #40]	@ (801506c <USBH_LL_Init+0x74>)
 8015042:	f7f1 f888 	bl	8006156 <HAL_HCD_Init>
 8015046:	4603      	mov	r3, r0
 8015048:	2b00      	cmp	r3, #0
 801504a:	d001      	beq.n	8015050 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801504c:	f7ed fa7c 	bl	8002548 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015050:	4806      	ldr	r0, [pc, #24]	@ (801506c <USBH_LL_Init+0x74>)
 8015052:	f7f1 fce9 	bl	8006a28 <HAL_HCD_GetCurrentFrame>
 8015056:	4603      	mov	r3, r0
 8015058:	4619      	mov	r1, r3
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	f7fc fa3a 	bl	80114d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015060:	2300      	movs	r3, #0
}
 8015062:	4618      	mov	r0, r3
 8015064:	3708      	adds	r7, #8
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}
 801506a:	bf00      	nop
 801506c:	2000952c 	.word	0x2000952c

08015070 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b084      	sub	sp, #16
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015078:	2300      	movs	r3, #0
 801507a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801507c:	2300      	movs	r3, #0
 801507e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015086:	4618      	mov	r0, r3
 8015088:	f7f1 fc56 	bl	8006938 <HAL_HCD_Start>
 801508c:	4603      	mov	r3, r0
 801508e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015090:	7bfb      	ldrb	r3, [r7, #15]
 8015092:	4618      	mov	r0, r3
 8015094:	f000 f95e 	bl	8015354 <USBH_Get_USB_Status>
 8015098:	4603      	mov	r3, r0
 801509a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801509c:	7bbb      	ldrb	r3, [r7, #14]
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3710      	adds	r7, #16
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}

080150a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80150a6:	b580      	push	{r7, lr}
 80150a8:	b084      	sub	sp, #16
 80150aa:	af00      	add	r7, sp, #0
 80150ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150ae:	2300      	movs	r3, #0
 80150b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80150b2:	2300      	movs	r3, #0
 80150b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80150bc:	4618      	mov	r0, r3
 80150be:	f7f1 fc5e 	bl	800697e <HAL_HCD_Stop>
 80150c2:	4603      	mov	r3, r0
 80150c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80150c6:	7bfb      	ldrb	r3, [r7, #15]
 80150c8:	4618      	mov	r0, r3
 80150ca:	f000 f943 	bl	8015354 <USBH_Get_USB_Status>
 80150ce:	4603      	mov	r3, r0
 80150d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80150d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	3710      	adds	r7, #16
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}

080150dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b084      	sub	sp, #16
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80150e4:	2301      	movs	r3, #1
 80150e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80150ee:	4618      	mov	r0, r3
 80150f0:	f7f1 fca8 	bl	8006a44 <HAL_HCD_GetCurrentSpeed>
 80150f4:	4603      	mov	r3, r0
 80150f6:	2b02      	cmp	r3, #2
 80150f8:	d00c      	beq.n	8015114 <USBH_LL_GetSpeed+0x38>
 80150fa:	2b02      	cmp	r3, #2
 80150fc:	d80d      	bhi.n	801511a <USBH_LL_GetSpeed+0x3e>
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d002      	beq.n	8015108 <USBH_LL_GetSpeed+0x2c>
 8015102:	2b01      	cmp	r3, #1
 8015104:	d003      	beq.n	801510e <USBH_LL_GetSpeed+0x32>
 8015106:	e008      	b.n	801511a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015108:	2300      	movs	r3, #0
 801510a:	73fb      	strb	r3, [r7, #15]
    break;
 801510c:	e008      	b.n	8015120 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801510e:	2301      	movs	r3, #1
 8015110:	73fb      	strb	r3, [r7, #15]
    break;
 8015112:	e005      	b.n	8015120 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015114:	2302      	movs	r3, #2
 8015116:	73fb      	strb	r3, [r7, #15]
    break;
 8015118:	e002      	b.n	8015120 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801511a:	2301      	movs	r3, #1
 801511c:	73fb      	strb	r3, [r7, #15]
    break;
 801511e:	bf00      	nop
  }
  return  speed;
 8015120:	7bfb      	ldrb	r3, [r7, #15]
}
 8015122:	4618      	mov	r0, r3
 8015124:	3710      	adds	r7, #16
 8015126:	46bd      	mov	sp, r7
 8015128:	bd80      	pop	{r7, pc}

0801512a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801512a:	b580      	push	{r7, lr}
 801512c:	b084      	sub	sp, #16
 801512e:	af00      	add	r7, sp, #0
 8015130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015132:	2300      	movs	r3, #0
 8015134:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015136:	2300      	movs	r3, #0
 8015138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015140:	4618      	mov	r0, r3
 8015142:	f7f1 fc39 	bl	80069b8 <HAL_HCD_ResetPort>
 8015146:	4603      	mov	r3, r0
 8015148:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801514a:	7bfb      	ldrb	r3, [r7, #15]
 801514c:	4618      	mov	r0, r3
 801514e:	f000 f901 	bl	8015354 <USBH_Get_USB_Status>
 8015152:	4603      	mov	r3, r0
 8015154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015156:	7bbb      	ldrb	r3, [r7, #14]
}
 8015158:	4618      	mov	r0, r3
 801515a:	3710      	adds	r7, #16
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}

08015160 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	460b      	mov	r3, r1
 801516a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015172:	78fa      	ldrb	r2, [r7, #3]
 8015174:	4611      	mov	r1, r2
 8015176:	4618      	mov	r0, r3
 8015178:	f7f1 fc41 	bl	80069fe <HAL_HCD_HC_GetXferCount>
 801517c:	4603      	mov	r3, r0
}
 801517e:	4618      	mov	r0, r3
 8015180:	3708      	adds	r7, #8
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}

08015186 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015186:	b590      	push	{r4, r7, lr}
 8015188:	b089      	sub	sp, #36	@ 0x24
 801518a:	af04      	add	r7, sp, #16
 801518c:	6078      	str	r0, [r7, #4]
 801518e:	4608      	mov	r0, r1
 8015190:	4611      	mov	r1, r2
 8015192:	461a      	mov	r2, r3
 8015194:	4603      	mov	r3, r0
 8015196:	70fb      	strb	r3, [r7, #3]
 8015198:	460b      	mov	r3, r1
 801519a:	70bb      	strb	r3, [r7, #2]
 801519c:	4613      	mov	r3, r2
 801519e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151a0:	2300      	movs	r3, #0
 80151a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80151a4:	2300      	movs	r3, #0
 80151a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80151ae:	787c      	ldrb	r4, [r7, #1]
 80151b0:	78ba      	ldrb	r2, [r7, #2]
 80151b2:	78f9      	ldrb	r1, [r7, #3]
 80151b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80151b6:	9302      	str	r3, [sp, #8]
 80151b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80151bc:	9301      	str	r3, [sp, #4]
 80151be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80151c2:	9300      	str	r3, [sp, #0]
 80151c4:	4623      	mov	r3, r4
 80151c6:	f7f1 f82d 	bl	8006224 <HAL_HCD_HC_Init>
 80151ca:	4603      	mov	r3, r0
 80151cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80151ce:	7bfb      	ldrb	r3, [r7, #15]
 80151d0:	4618      	mov	r0, r3
 80151d2:	f000 f8bf 	bl	8015354 <USBH_Get_USB_Status>
 80151d6:	4603      	mov	r3, r0
 80151d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80151da:	7bbb      	ldrb	r3, [r7, #14]
}
 80151dc:	4618      	mov	r0, r3
 80151de:	3714      	adds	r7, #20
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd90      	pop	{r4, r7, pc}

080151e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b084      	sub	sp, #16
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	460b      	mov	r3, r1
 80151ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151f0:	2300      	movs	r3, #0
 80151f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80151f4:	2300      	movs	r3, #0
 80151f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80151fe:	78fa      	ldrb	r2, [r7, #3]
 8015200:	4611      	mov	r1, r2
 8015202:	4618      	mov	r0, r3
 8015204:	f7f1 f8c6 	bl	8006394 <HAL_HCD_HC_Halt>
 8015208:	4603      	mov	r3, r0
 801520a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801520c:	7bfb      	ldrb	r3, [r7, #15]
 801520e:	4618      	mov	r0, r3
 8015210:	f000 f8a0 	bl	8015354 <USBH_Get_USB_Status>
 8015214:	4603      	mov	r3, r0
 8015216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015218:	7bbb      	ldrb	r3, [r7, #14]
}
 801521a:	4618      	mov	r0, r3
 801521c:	3710      	adds	r7, #16
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}

08015222 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8015222:	b590      	push	{r4, r7, lr}
 8015224:	b089      	sub	sp, #36	@ 0x24
 8015226:	af04      	add	r7, sp, #16
 8015228:	6078      	str	r0, [r7, #4]
 801522a:	4608      	mov	r0, r1
 801522c:	4611      	mov	r1, r2
 801522e:	461a      	mov	r2, r3
 8015230:	4603      	mov	r3, r0
 8015232:	70fb      	strb	r3, [r7, #3]
 8015234:	460b      	mov	r3, r1
 8015236:	70bb      	strb	r3, [r7, #2]
 8015238:	4613      	mov	r3, r2
 801523a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801523c:	2300      	movs	r3, #0
 801523e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015240:	2300      	movs	r3, #0
 8015242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801524a:	787c      	ldrb	r4, [r7, #1]
 801524c:	78ba      	ldrb	r2, [r7, #2]
 801524e:	78f9      	ldrb	r1, [r7, #3]
 8015250:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8015254:	9303      	str	r3, [sp, #12]
 8015256:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015258:	9302      	str	r3, [sp, #8]
 801525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801525c:	9301      	str	r3, [sp, #4]
 801525e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015262:	9300      	str	r3, [sp, #0]
 8015264:	4623      	mov	r3, r4
 8015266:	f7f1 f8b9 	bl	80063dc <HAL_HCD_HC_SubmitRequest>
 801526a:	4603      	mov	r3, r0
 801526c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801526e:	7bfb      	ldrb	r3, [r7, #15]
 8015270:	4618      	mov	r0, r3
 8015272:	f000 f86f 	bl	8015354 <USBH_Get_USB_Status>
 8015276:	4603      	mov	r3, r0
 8015278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801527a:	7bbb      	ldrb	r3, [r7, #14]
}
 801527c:	4618      	mov	r0, r3
 801527e:	3714      	adds	r7, #20
 8015280:	46bd      	mov	sp, r7
 8015282:	bd90      	pop	{r4, r7, pc}

08015284 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b082      	sub	sp, #8
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
 801528c:	460b      	mov	r3, r1
 801528e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015296:	78fa      	ldrb	r2, [r7, #3]
 8015298:	4611      	mov	r1, r2
 801529a:	4618      	mov	r0, r3
 801529c:	f7f1 fb9a 	bl	80069d4 <HAL_HCD_HC_GetURBState>
 80152a0:	4603      	mov	r3, r0
}
 80152a2:	4618      	mov	r0, r3
 80152a4:	3708      	adds	r7, #8
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bd80      	pop	{r7, pc}

080152aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80152aa:	b580      	push	{r7, lr}
 80152ac:	b082      	sub	sp, #8
 80152ae:	af00      	add	r7, sp, #0
 80152b0:	6078      	str	r0, [r7, #4]
 80152b2:	460b      	mov	r3, r1
 80152b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80152bc:	2b01      	cmp	r3, #1
 80152be:	d103      	bne.n	80152c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80152c0:	78fb      	ldrb	r3, [r7, #3]
 80152c2:	4618      	mov	r0, r3
 80152c4:	f000 f872 	bl	80153ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80152c8:	20c8      	movs	r0, #200	@ 0xc8
 80152ca:	f7ef fa89 	bl	80047e0 <HAL_Delay>
  return USBH_OK;
 80152ce:	2300      	movs	r3, #0
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	3708      	adds	r7, #8
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}

080152d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80152d8:	b480      	push	{r7}
 80152da:	b085      	sub	sp, #20
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
 80152e0:	460b      	mov	r3, r1
 80152e2:	70fb      	strb	r3, [r7, #3]
 80152e4:	4613      	mov	r3, r2
 80152e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80152ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80152f0:	78fa      	ldrb	r2, [r7, #3]
 80152f2:	68f9      	ldr	r1, [r7, #12]
 80152f4:	4613      	mov	r3, r2
 80152f6:	011b      	lsls	r3, r3, #4
 80152f8:	1a9b      	subs	r3, r3, r2
 80152fa:	009b      	lsls	r3, r3, #2
 80152fc:	440b      	add	r3, r1
 80152fe:	3317      	adds	r3, #23
 8015300:	781b      	ldrb	r3, [r3, #0]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d00a      	beq.n	801531c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015306:	78fa      	ldrb	r2, [r7, #3]
 8015308:	68f9      	ldr	r1, [r7, #12]
 801530a:	4613      	mov	r3, r2
 801530c:	011b      	lsls	r3, r3, #4
 801530e:	1a9b      	subs	r3, r3, r2
 8015310:	009b      	lsls	r3, r3, #2
 8015312:	440b      	add	r3, r1
 8015314:	333c      	adds	r3, #60	@ 0x3c
 8015316:	78ba      	ldrb	r2, [r7, #2]
 8015318:	701a      	strb	r2, [r3, #0]
 801531a:	e009      	b.n	8015330 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801531c:	78fa      	ldrb	r2, [r7, #3]
 801531e:	68f9      	ldr	r1, [r7, #12]
 8015320:	4613      	mov	r3, r2
 8015322:	011b      	lsls	r3, r3, #4
 8015324:	1a9b      	subs	r3, r3, r2
 8015326:	009b      	lsls	r3, r3, #2
 8015328:	440b      	add	r3, r1
 801532a:	333d      	adds	r3, #61	@ 0x3d
 801532c:	78ba      	ldrb	r2, [r7, #2]
 801532e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8015330:	2300      	movs	r3, #0
}
 8015332:	4618      	mov	r0, r3
 8015334:	3714      	adds	r7, #20
 8015336:	46bd      	mov	sp, r7
 8015338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533c:	4770      	bx	lr

0801533e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801533e:	b580      	push	{r7, lr}
 8015340:	b082      	sub	sp, #8
 8015342:	af00      	add	r7, sp, #0
 8015344:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f7ef fa4a 	bl	80047e0 <HAL_Delay>
}
 801534c:	bf00      	nop
 801534e:	3708      	adds	r7, #8
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}

08015354 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015354:	b480      	push	{r7}
 8015356:	b085      	sub	sp, #20
 8015358:	af00      	add	r7, sp, #0
 801535a:	4603      	mov	r3, r0
 801535c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801535e:	2300      	movs	r3, #0
 8015360:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015362:	79fb      	ldrb	r3, [r7, #7]
 8015364:	2b03      	cmp	r3, #3
 8015366:	d817      	bhi.n	8015398 <USBH_Get_USB_Status+0x44>
 8015368:	a201      	add	r2, pc, #4	@ (adr r2, 8015370 <USBH_Get_USB_Status+0x1c>)
 801536a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801536e:	bf00      	nop
 8015370:	08015381 	.word	0x08015381
 8015374:	08015387 	.word	0x08015387
 8015378:	0801538d 	.word	0x0801538d
 801537c:	08015393 	.word	0x08015393
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8015380:	2300      	movs	r3, #0
 8015382:	73fb      	strb	r3, [r7, #15]
    break;
 8015384:	e00b      	b.n	801539e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8015386:	2302      	movs	r3, #2
 8015388:	73fb      	strb	r3, [r7, #15]
    break;
 801538a:	e008      	b.n	801539e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801538c:	2301      	movs	r3, #1
 801538e:	73fb      	strb	r3, [r7, #15]
    break;
 8015390:	e005      	b.n	801539e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8015392:	2302      	movs	r3, #2
 8015394:	73fb      	strb	r3, [r7, #15]
    break;
 8015396:	e002      	b.n	801539e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8015398:	2302      	movs	r3, #2
 801539a:	73fb      	strb	r3, [r7, #15]
    break;
 801539c:	bf00      	nop
  }
  return usb_status;
 801539e:	7bfb      	ldrb	r3, [r7, #15]
}
 80153a0:	4618      	mov	r0, r3
 80153a2:	3714      	adds	r7, #20
 80153a4:	46bd      	mov	sp, r7
 80153a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153aa:	4770      	bx	lr

080153ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b084      	sub	sp, #16
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	4603      	mov	r3, r0
 80153b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80153b6:	79fb      	ldrb	r3, [r7, #7]
 80153b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80153ba:	79fb      	ldrb	r3, [r7, #7]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d102      	bne.n	80153c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80153c0:	2300      	movs	r3, #0
 80153c2:	73fb      	strb	r3, [r7, #15]
 80153c4:	e001      	b.n	80153ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80153c6:	2301      	movs	r3, #1
 80153c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80153ca:	7bfb      	ldrb	r3, [r7, #15]
 80153cc:	461a      	mov	r2, r3
 80153ce:	2120      	movs	r1, #32
 80153d0:	4803      	ldr	r0, [pc, #12]	@ (80153e0 <MX_DriverVbusFS+0x34>)
 80153d2:	f7f0 fea7 	bl	8006124 <HAL_GPIO_WritePin>
}
 80153d6:	bf00      	nop
 80153d8:	3710      	adds	r7, #16
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}
 80153de:	bf00      	nop
 80153e0:	40020c00 	.word	0x40020c00

080153e4 <malloc>:
 80153e4:	4b02      	ldr	r3, [pc, #8]	@ (80153f0 <malloc+0xc>)
 80153e6:	4601      	mov	r1, r0
 80153e8:	6818      	ldr	r0, [r3, #0]
 80153ea:	f000 b82d 	b.w	8015448 <_malloc_r>
 80153ee:	bf00      	nop
 80153f0:	20000078 	.word	0x20000078

080153f4 <free>:
 80153f4:	4b02      	ldr	r3, [pc, #8]	@ (8015400 <free+0xc>)
 80153f6:	4601      	mov	r1, r0
 80153f8:	6818      	ldr	r0, [r3, #0]
 80153fa:	f000 b9b1 	b.w	8015760 <_free_r>
 80153fe:	bf00      	nop
 8015400:	20000078 	.word	0x20000078

08015404 <sbrk_aligned>:
 8015404:	b570      	push	{r4, r5, r6, lr}
 8015406:	4e0f      	ldr	r6, [pc, #60]	@ (8015444 <sbrk_aligned+0x40>)
 8015408:	460c      	mov	r4, r1
 801540a:	6831      	ldr	r1, [r6, #0]
 801540c:	4605      	mov	r5, r0
 801540e:	b911      	cbnz	r1, 8015416 <sbrk_aligned+0x12>
 8015410:	f000 f95c 	bl	80156cc <_sbrk_r>
 8015414:	6030      	str	r0, [r6, #0]
 8015416:	4621      	mov	r1, r4
 8015418:	4628      	mov	r0, r5
 801541a:	f000 f957 	bl	80156cc <_sbrk_r>
 801541e:	1c43      	adds	r3, r0, #1
 8015420:	d103      	bne.n	801542a <sbrk_aligned+0x26>
 8015422:	f04f 34ff 	mov.w	r4, #4294967295
 8015426:	4620      	mov	r0, r4
 8015428:	bd70      	pop	{r4, r5, r6, pc}
 801542a:	1cc4      	adds	r4, r0, #3
 801542c:	f024 0403 	bic.w	r4, r4, #3
 8015430:	42a0      	cmp	r0, r4
 8015432:	d0f8      	beq.n	8015426 <sbrk_aligned+0x22>
 8015434:	1a21      	subs	r1, r4, r0
 8015436:	4628      	mov	r0, r5
 8015438:	f000 f948 	bl	80156cc <_sbrk_r>
 801543c:	3001      	adds	r0, #1
 801543e:	d1f2      	bne.n	8015426 <sbrk_aligned+0x22>
 8015440:	e7ef      	b.n	8015422 <sbrk_aligned+0x1e>
 8015442:	bf00      	nop
 8015444:	2000990c 	.word	0x2000990c

08015448 <_malloc_r>:
 8015448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801544c:	1ccd      	adds	r5, r1, #3
 801544e:	f025 0503 	bic.w	r5, r5, #3
 8015452:	3508      	adds	r5, #8
 8015454:	2d0c      	cmp	r5, #12
 8015456:	bf38      	it	cc
 8015458:	250c      	movcc	r5, #12
 801545a:	2d00      	cmp	r5, #0
 801545c:	4606      	mov	r6, r0
 801545e:	db01      	blt.n	8015464 <_malloc_r+0x1c>
 8015460:	42a9      	cmp	r1, r5
 8015462:	d904      	bls.n	801546e <_malloc_r+0x26>
 8015464:	230c      	movs	r3, #12
 8015466:	6033      	str	r3, [r6, #0]
 8015468:	2000      	movs	r0, #0
 801546a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801546e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015544 <_malloc_r+0xfc>
 8015472:	f000 f869 	bl	8015548 <__malloc_lock>
 8015476:	f8d8 3000 	ldr.w	r3, [r8]
 801547a:	461c      	mov	r4, r3
 801547c:	bb44      	cbnz	r4, 80154d0 <_malloc_r+0x88>
 801547e:	4629      	mov	r1, r5
 8015480:	4630      	mov	r0, r6
 8015482:	f7ff ffbf 	bl	8015404 <sbrk_aligned>
 8015486:	1c43      	adds	r3, r0, #1
 8015488:	4604      	mov	r4, r0
 801548a:	d158      	bne.n	801553e <_malloc_r+0xf6>
 801548c:	f8d8 4000 	ldr.w	r4, [r8]
 8015490:	4627      	mov	r7, r4
 8015492:	2f00      	cmp	r7, #0
 8015494:	d143      	bne.n	801551e <_malloc_r+0xd6>
 8015496:	2c00      	cmp	r4, #0
 8015498:	d04b      	beq.n	8015532 <_malloc_r+0xea>
 801549a:	6823      	ldr	r3, [r4, #0]
 801549c:	4639      	mov	r1, r7
 801549e:	4630      	mov	r0, r6
 80154a0:	eb04 0903 	add.w	r9, r4, r3
 80154a4:	f000 f912 	bl	80156cc <_sbrk_r>
 80154a8:	4581      	cmp	r9, r0
 80154aa:	d142      	bne.n	8015532 <_malloc_r+0xea>
 80154ac:	6821      	ldr	r1, [r4, #0]
 80154ae:	1a6d      	subs	r5, r5, r1
 80154b0:	4629      	mov	r1, r5
 80154b2:	4630      	mov	r0, r6
 80154b4:	f7ff ffa6 	bl	8015404 <sbrk_aligned>
 80154b8:	3001      	adds	r0, #1
 80154ba:	d03a      	beq.n	8015532 <_malloc_r+0xea>
 80154bc:	6823      	ldr	r3, [r4, #0]
 80154be:	442b      	add	r3, r5
 80154c0:	6023      	str	r3, [r4, #0]
 80154c2:	f8d8 3000 	ldr.w	r3, [r8]
 80154c6:	685a      	ldr	r2, [r3, #4]
 80154c8:	bb62      	cbnz	r2, 8015524 <_malloc_r+0xdc>
 80154ca:	f8c8 7000 	str.w	r7, [r8]
 80154ce:	e00f      	b.n	80154f0 <_malloc_r+0xa8>
 80154d0:	6822      	ldr	r2, [r4, #0]
 80154d2:	1b52      	subs	r2, r2, r5
 80154d4:	d420      	bmi.n	8015518 <_malloc_r+0xd0>
 80154d6:	2a0b      	cmp	r2, #11
 80154d8:	d917      	bls.n	801550a <_malloc_r+0xc2>
 80154da:	1961      	adds	r1, r4, r5
 80154dc:	42a3      	cmp	r3, r4
 80154de:	6025      	str	r5, [r4, #0]
 80154e0:	bf18      	it	ne
 80154e2:	6059      	strne	r1, [r3, #4]
 80154e4:	6863      	ldr	r3, [r4, #4]
 80154e6:	bf08      	it	eq
 80154e8:	f8c8 1000 	streq.w	r1, [r8]
 80154ec:	5162      	str	r2, [r4, r5]
 80154ee:	604b      	str	r3, [r1, #4]
 80154f0:	4630      	mov	r0, r6
 80154f2:	f000 f82f 	bl	8015554 <__malloc_unlock>
 80154f6:	f104 000b 	add.w	r0, r4, #11
 80154fa:	1d23      	adds	r3, r4, #4
 80154fc:	f020 0007 	bic.w	r0, r0, #7
 8015500:	1ac2      	subs	r2, r0, r3
 8015502:	bf1c      	itt	ne
 8015504:	1a1b      	subne	r3, r3, r0
 8015506:	50a3      	strne	r3, [r4, r2]
 8015508:	e7af      	b.n	801546a <_malloc_r+0x22>
 801550a:	6862      	ldr	r2, [r4, #4]
 801550c:	42a3      	cmp	r3, r4
 801550e:	bf0c      	ite	eq
 8015510:	f8c8 2000 	streq.w	r2, [r8]
 8015514:	605a      	strne	r2, [r3, #4]
 8015516:	e7eb      	b.n	80154f0 <_malloc_r+0xa8>
 8015518:	4623      	mov	r3, r4
 801551a:	6864      	ldr	r4, [r4, #4]
 801551c:	e7ae      	b.n	801547c <_malloc_r+0x34>
 801551e:	463c      	mov	r4, r7
 8015520:	687f      	ldr	r7, [r7, #4]
 8015522:	e7b6      	b.n	8015492 <_malloc_r+0x4a>
 8015524:	461a      	mov	r2, r3
 8015526:	685b      	ldr	r3, [r3, #4]
 8015528:	42a3      	cmp	r3, r4
 801552a:	d1fb      	bne.n	8015524 <_malloc_r+0xdc>
 801552c:	2300      	movs	r3, #0
 801552e:	6053      	str	r3, [r2, #4]
 8015530:	e7de      	b.n	80154f0 <_malloc_r+0xa8>
 8015532:	230c      	movs	r3, #12
 8015534:	6033      	str	r3, [r6, #0]
 8015536:	4630      	mov	r0, r6
 8015538:	f000 f80c 	bl	8015554 <__malloc_unlock>
 801553c:	e794      	b.n	8015468 <_malloc_r+0x20>
 801553e:	6005      	str	r5, [r0, #0]
 8015540:	e7d6      	b.n	80154f0 <_malloc_r+0xa8>
 8015542:	bf00      	nop
 8015544:	20009910 	.word	0x20009910

08015548 <__malloc_lock>:
 8015548:	4801      	ldr	r0, [pc, #4]	@ (8015550 <__malloc_lock+0x8>)
 801554a:	f000 b8f9 	b.w	8015740 <__retarget_lock_acquire_recursive>
 801554e:	bf00      	nop
 8015550:	20009a50 	.word	0x20009a50

08015554 <__malloc_unlock>:
 8015554:	4801      	ldr	r0, [pc, #4]	@ (801555c <__malloc_unlock+0x8>)
 8015556:	f000 b8f4 	b.w	8015742 <__retarget_lock_release_recursive>
 801555a:	bf00      	nop
 801555c:	20009a50 	.word	0x20009a50

08015560 <sniprintf>:
 8015560:	b40c      	push	{r2, r3}
 8015562:	b530      	push	{r4, r5, lr}
 8015564:	4b18      	ldr	r3, [pc, #96]	@ (80155c8 <sniprintf+0x68>)
 8015566:	1e0c      	subs	r4, r1, #0
 8015568:	681d      	ldr	r5, [r3, #0]
 801556a:	b09d      	sub	sp, #116	@ 0x74
 801556c:	da08      	bge.n	8015580 <sniprintf+0x20>
 801556e:	238b      	movs	r3, #139	@ 0x8b
 8015570:	602b      	str	r3, [r5, #0]
 8015572:	f04f 30ff 	mov.w	r0, #4294967295
 8015576:	b01d      	add	sp, #116	@ 0x74
 8015578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801557c:	b002      	add	sp, #8
 801557e:	4770      	bx	lr
 8015580:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015584:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015588:	f04f 0300 	mov.w	r3, #0
 801558c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801558e:	bf14      	ite	ne
 8015590:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015594:	4623      	moveq	r3, r4
 8015596:	9304      	str	r3, [sp, #16]
 8015598:	9307      	str	r3, [sp, #28]
 801559a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801559e:	9002      	str	r0, [sp, #8]
 80155a0:	9006      	str	r0, [sp, #24]
 80155a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80155a6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80155a8:	ab21      	add	r3, sp, #132	@ 0x84
 80155aa:	a902      	add	r1, sp, #8
 80155ac:	4628      	mov	r0, r5
 80155ae:	9301      	str	r3, [sp, #4]
 80155b0:	f000 f97c 	bl	80158ac <_svfiprintf_r>
 80155b4:	1c43      	adds	r3, r0, #1
 80155b6:	bfbc      	itt	lt
 80155b8:	238b      	movlt	r3, #139	@ 0x8b
 80155ba:	602b      	strlt	r3, [r5, #0]
 80155bc:	2c00      	cmp	r4, #0
 80155be:	d0da      	beq.n	8015576 <sniprintf+0x16>
 80155c0:	9b02      	ldr	r3, [sp, #8]
 80155c2:	2200      	movs	r2, #0
 80155c4:	701a      	strb	r2, [r3, #0]
 80155c6:	e7d6      	b.n	8015576 <sniprintf+0x16>
 80155c8:	20000078 	.word	0x20000078

080155cc <_vsniprintf_r>:
 80155cc:	b530      	push	{r4, r5, lr}
 80155ce:	4614      	mov	r4, r2
 80155d0:	2c00      	cmp	r4, #0
 80155d2:	b09b      	sub	sp, #108	@ 0x6c
 80155d4:	4605      	mov	r5, r0
 80155d6:	461a      	mov	r2, r3
 80155d8:	da05      	bge.n	80155e6 <_vsniprintf_r+0x1a>
 80155da:	238b      	movs	r3, #139	@ 0x8b
 80155dc:	6003      	str	r3, [r0, #0]
 80155de:	f04f 30ff 	mov.w	r0, #4294967295
 80155e2:	b01b      	add	sp, #108	@ 0x6c
 80155e4:	bd30      	pop	{r4, r5, pc}
 80155e6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80155ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 80155ee:	f04f 0300 	mov.w	r3, #0
 80155f2:	9319      	str	r3, [sp, #100]	@ 0x64
 80155f4:	bf14      	ite	ne
 80155f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80155fa:	4623      	moveq	r3, r4
 80155fc:	9302      	str	r3, [sp, #8]
 80155fe:	9305      	str	r3, [sp, #20]
 8015600:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015604:	9100      	str	r1, [sp, #0]
 8015606:	9104      	str	r1, [sp, #16]
 8015608:	f8ad 300e 	strh.w	r3, [sp, #14]
 801560c:	4669      	mov	r1, sp
 801560e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015610:	f000 f94c 	bl	80158ac <_svfiprintf_r>
 8015614:	1c43      	adds	r3, r0, #1
 8015616:	bfbc      	itt	lt
 8015618:	238b      	movlt	r3, #139	@ 0x8b
 801561a:	602b      	strlt	r3, [r5, #0]
 801561c:	2c00      	cmp	r4, #0
 801561e:	d0e0      	beq.n	80155e2 <_vsniprintf_r+0x16>
 8015620:	9b00      	ldr	r3, [sp, #0]
 8015622:	2200      	movs	r2, #0
 8015624:	701a      	strb	r2, [r3, #0]
 8015626:	e7dc      	b.n	80155e2 <_vsniprintf_r+0x16>

08015628 <vsniprintf>:
 8015628:	b507      	push	{r0, r1, r2, lr}
 801562a:	9300      	str	r3, [sp, #0]
 801562c:	4613      	mov	r3, r2
 801562e:	460a      	mov	r2, r1
 8015630:	4601      	mov	r1, r0
 8015632:	4803      	ldr	r0, [pc, #12]	@ (8015640 <vsniprintf+0x18>)
 8015634:	6800      	ldr	r0, [r0, #0]
 8015636:	f7ff ffc9 	bl	80155cc <_vsniprintf_r>
 801563a:	b003      	add	sp, #12
 801563c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015640:	20000078 	.word	0x20000078

08015644 <memset>:
 8015644:	4402      	add	r2, r0
 8015646:	4603      	mov	r3, r0
 8015648:	4293      	cmp	r3, r2
 801564a:	d100      	bne.n	801564e <memset+0xa>
 801564c:	4770      	bx	lr
 801564e:	f803 1b01 	strb.w	r1, [r3], #1
 8015652:	e7f9      	b.n	8015648 <memset+0x4>

08015654 <strncmp>:
 8015654:	b510      	push	{r4, lr}
 8015656:	b16a      	cbz	r2, 8015674 <strncmp+0x20>
 8015658:	3901      	subs	r1, #1
 801565a:	1884      	adds	r4, r0, r2
 801565c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015660:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015664:	429a      	cmp	r2, r3
 8015666:	d103      	bne.n	8015670 <strncmp+0x1c>
 8015668:	42a0      	cmp	r0, r4
 801566a:	d001      	beq.n	8015670 <strncmp+0x1c>
 801566c:	2a00      	cmp	r2, #0
 801566e:	d1f5      	bne.n	801565c <strncmp+0x8>
 8015670:	1ad0      	subs	r0, r2, r3
 8015672:	bd10      	pop	{r4, pc}
 8015674:	4610      	mov	r0, r2
 8015676:	e7fc      	b.n	8015672 <strncmp+0x1e>

08015678 <strncpy>:
 8015678:	b510      	push	{r4, lr}
 801567a:	3901      	subs	r1, #1
 801567c:	4603      	mov	r3, r0
 801567e:	b132      	cbz	r2, 801568e <strncpy+0x16>
 8015680:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015684:	f803 4b01 	strb.w	r4, [r3], #1
 8015688:	3a01      	subs	r2, #1
 801568a:	2c00      	cmp	r4, #0
 801568c:	d1f7      	bne.n	801567e <strncpy+0x6>
 801568e:	441a      	add	r2, r3
 8015690:	2100      	movs	r1, #0
 8015692:	4293      	cmp	r3, r2
 8015694:	d100      	bne.n	8015698 <strncpy+0x20>
 8015696:	bd10      	pop	{r4, pc}
 8015698:	f803 1b01 	strb.w	r1, [r3], #1
 801569c:	e7f9      	b.n	8015692 <strncpy+0x1a>

0801569e <strstr>:
 801569e:	780a      	ldrb	r2, [r1, #0]
 80156a0:	b570      	push	{r4, r5, r6, lr}
 80156a2:	b96a      	cbnz	r2, 80156c0 <strstr+0x22>
 80156a4:	bd70      	pop	{r4, r5, r6, pc}
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d109      	bne.n	80156be <strstr+0x20>
 80156aa:	460c      	mov	r4, r1
 80156ac:	4605      	mov	r5, r0
 80156ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d0f6      	beq.n	80156a4 <strstr+0x6>
 80156b6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80156ba:	429e      	cmp	r6, r3
 80156bc:	d0f7      	beq.n	80156ae <strstr+0x10>
 80156be:	3001      	adds	r0, #1
 80156c0:	7803      	ldrb	r3, [r0, #0]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d1ef      	bne.n	80156a6 <strstr+0x8>
 80156c6:	4618      	mov	r0, r3
 80156c8:	e7ec      	b.n	80156a4 <strstr+0x6>
	...

080156cc <_sbrk_r>:
 80156cc:	b538      	push	{r3, r4, r5, lr}
 80156ce:	4d06      	ldr	r5, [pc, #24]	@ (80156e8 <_sbrk_r+0x1c>)
 80156d0:	2300      	movs	r3, #0
 80156d2:	4604      	mov	r4, r0
 80156d4:	4608      	mov	r0, r1
 80156d6:	602b      	str	r3, [r5, #0]
 80156d8:	f7ee f896 	bl	8003808 <_sbrk>
 80156dc:	1c43      	adds	r3, r0, #1
 80156de:	d102      	bne.n	80156e6 <_sbrk_r+0x1a>
 80156e0:	682b      	ldr	r3, [r5, #0]
 80156e2:	b103      	cbz	r3, 80156e6 <_sbrk_r+0x1a>
 80156e4:	6023      	str	r3, [r4, #0]
 80156e6:	bd38      	pop	{r3, r4, r5, pc}
 80156e8:	20009a4c 	.word	0x20009a4c

080156ec <__errno>:
 80156ec:	4b01      	ldr	r3, [pc, #4]	@ (80156f4 <__errno+0x8>)
 80156ee:	6818      	ldr	r0, [r3, #0]
 80156f0:	4770      	bx	lr
 80156f2:	bf00      	nop
 80156f4:	20000078 	.word	0x20000078

080156f8 <__libc_init_array>:
 80156f8:	b570      	push	{r4, r5, r6, lr}
 80156fa:	4d0d      	ldr	r5, [pc, #52]	@ (8015730 <__libc_init_array+0x38>)
 80156fc:	4c0d      	ldr	r4, [pc, #52]	@ (8015734 <__libc_init_array+0x3c>)
 80156fe:	1b64      	subs	r4, r4, r5
 8015700:	10a4      	asrs	r4, r4, #2
 8015702:	2600      	movs	r6, #0
 8015704:	42a6      	cmp	r6, r4
 8015706:	d109      	bne.n	801571c <__libc_init_array+0x24>
 8015708:	4d0b      	ldr	r5, [pc, #44]	@ (8015738 <__libc_init_array+0x40>)
 801570a:	4c0c      	ldr	r4, [pc, #48]	@ (801573c <__libc_init_array+0x44>)
 801570c:	f000 fba6 	bl	8015e5c <_init>
 8015710:	1b64      	subs	r4, r4, r5
 8015712:	10a4      	asrs	r4, r4, #2
 8015714:	2600      	movs	r6, #0
 8015716:	42a6      	cmp	r6, r4
 8015718:	d105      	bne.n	8015726 <__libc_init_array+0x2e>
 801571a:	bd70      	pop	{r4, r5, r6, pc}
 801571c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015720:	4798      	blx	r3
 8015722:	3601      	adds	r6, #1
 8015724:	e7ee      	b.n	8015704 <__libc_init_array+0xc>
 8015726:	f855 3b04 	ldr.w	r3, [r5], #4
 801572a:	4798      	blx	r3
 801572c:	3601      	adds	r6, #1
 801572e:	e7f2      	b.n	8015716 <__libc_init_array+0x1e>
 8015730:	08017f20 	.word	0x08017f20
 8015734:	08017f20 	.word	0x08017f20
 8015738:	08017f20 	.word	0x08017f20
 801573c:	08017f24 	.word	0x08017f24

08015740 <__retarget_lock_acquire_recursive>:
 8015740:	4770      	bx	lr

08015742 <__retarget_lock_release_recursive>:
 8015742:	4770      	bx	lr

08015744 <memcpy>:
 8015744:	440a      	add	r2, r1
 8015746:	4291      	cmp	r1, r2
 8015748:	f100 33ff 	add.w	r3, r0, #4294967295
 801574c:	d100      	bne.n	8015750 <memcpy+0xc>
 801574e:	4770      	bx	lr
 8015750:	b510      	push	{r4, lr}
 8015752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015756:	f803 4f01 	strb.w	r4, [r3, #1]!
 801575a:	4291      	cmp	r1, r2
 801575c:	d1f9      	bne.n	8015752 <memcpy+0xe>
 801575e:	bd10      	pop	{r4, pc}

08015760 <_free_r>:
 8015760:	b538      	push	{r3, r4, r5, lr}
 8015762:	4605      	mov	r5, r0
 8015764:	2900      	cmp	r1, #0
 8015766:	d041      	beq.n	80157ec <_free_r+0x8c>
 8015768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801576c:	1f0c      	subs	r4, r1, #4
 801576e:	2b00      	cmp	r3, #0
 8015770:	bfb8      	it	lt
 8015772:	18e4      	addlt	r4, r4, r3
 8015774:	f7ff fee8 	bl	8015548 <__malloc_lock>
 8015778:	4a1d      	ldr	r2, [pc, #116]	@ (80157f0 <_free_r+0x90>)
 801577a:	6813      	ldr	r3, [r2, #0]
 801577c:	b933      	cbnz	r3, 801578c <_free_r+0x2c>
 801577e:	6063      	str	r3, [r4, #4]
 8015780:	6014      	str	r4, [r2, #0]
 8015782:	4628      	mov	r0, r5
 8015784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015788:	f7ff bee4 	b.w	8015554 <__malloc_unlock>
 801578c:	42a3      	cmp	r3, r4
 801578e:	d908      	bls.n	80157a2 <_free_r+0x42>
 8015790:	6820      	ldr	r0, [r4, #0]
 8015792:	1821      	adds	r1, r4, r0
 8015794:	428b      	cmp	r3, r1
 8015796:	bf01      	itttt	eq
 8015798:	6819      	ldreq	r1, [r3, #0]
 801579a:	685b      	ldreq	r3, [r3, #4]
 801579c:	1809      	addeq	r1, r1, r0
 801579e:	6021      	streq	r1, [r4, #0]
 80157a0:	e7ed      	b.n	801577e <_free_r+0x1e>
 80157a2:	461a      	mov	r2, r3
 80157a4:	685b      	ldr	r3, [r3, #4]
 80157a6:	b10b      	cbz	r3, 80157ac <_free_r+0x4c>
 80157a8:	42a3      	cmp	r3, r4
 80157aa:	d9fa      	bls.n	80157a2 <_free_r+0x42>
 80157ac:	6811      	ldr	r1, [r2, #0]
 80157ae:	1850      	adds	r0, r2, r1
 80157b0:	42a0      	cmp	r0, r4
 80157b2:	d10b      	bne.n	80157cc <_free_r+0x6c>
 80157b4:	6820      	ldr	r0, [r4, #0]
 80157b6:	4401      	add	r1, r0
 80157b8:	1850      	adds	r0, r2, r1
 80157ba:	4283      	cmp	r3, r0
 80157bc:	6011      	str	r1, [r2, #0]
 80157be:	d1e0      	bne.n	8015782 <_free_r+0x22>
 80157c0:	6818      	ldr	r0, [r3, #0]
 80157c2:	685b      	ldr	r3, [r3, #4]
 80157c4:	6053      	str	r3, [r2, #4]
 80157c6:	4408      	add	r0, r1
 80157c8:	6010      	str	r0, [r2, #0]
 80157ca:	e7da      	b.n	8015782 <_free_r+0x22>
 80157cc:	d902      	bls.n	80157d4 <_free_r+0x74>
 80157ce:	230c      	movs	r3, #12
 80157d0:	602b      	str	r3, [r5, #0]
 80157d2:	e7d6      	b.n	8015782 <_free_r+0x22>
 80157d4:	6820      	ldr	r0, [r4, #0]
 80157d6:	1821      	adds	r1, r4, r0
 80157d8:	428b      	cmp	r3, r1
 80157da:	bf04      	itt	eq
 80157dc:	6819      	ldreq	r1, [r3, #0]
 80157de:	685b      	ldreq	r3, [r3, #4]
 80157e0:	6063      	str	r3, [r4, #4]
 80157e2:	bf04      	itt	eq
 80157e4:	1809      	addeq	r1, r1, r0
 80157e6:	6021      	streq	r1, [r4, #0]
 80157e8:	6054      	str	r4, [r2, #4]
 80157ea:	e7ca      	b.n	8015782 <_free_r+0x22>
 80157ec:	bd38      	pop	{r3, r4, r5, pc}
 80157ee:	bf00      	nop
 80157f0:	20009910 	.word	0x20009910

080157f4 <__ssputs_r>:
 80157f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157f8:	688e      	ldr	r6, [r1, #8]
 80157fa:	461f      	mov	r7, r3
 80157fc:	42be      	cmp	r6, r7
 80157fe:	680b      	ldr	r3, [r1, #0]
 8015800:	4682      	mov	sl, r0
 8015802:	460c      	mov	r4, r1
 8015804:	4690      	mov	r8, r2
 8015806:	d82d      	bhi.n	8015864 <__ssputs_r+0x70>
 8015808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801580c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015810:	d026      	beq.n	8015860 <__ssputs_r+0x6c>
 8015812:	6965      	ldr	r5, [r4, #20]
 8015814:	6909      	ldr	r1, [r1, #16]
 8015816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801581a:	eba3 0901 	sub.w	r9, r3, r1
 801581e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015822:	1c7b      	adds	r3, r7, #1
 8015824:	444b      	add	r3, r9
 8015826:	106d      	asrs	r5, r5, #1
 8015828:	429d      	cmp	r5, r3
 801582a:	bf38      	it	cc
 801582c:	461d      	movcc	r5, r3
 801582e:	0553      	lsls	r3, r2, #21
 8015830:	d527      	bpl.n	8015882 <__ssputs_r+0x8e>
 8015832:	4629      	mov	r1, r5
 8015834:	f7ff fe08 	bl	8015448 <_malloc_r>
 8015838:	4606      	mov	r6, r0
 801583a:	b360      	cbz	r0, 8015896 <__ssputs_r+0xa2>
 801583c:	6921      	ldr	r1, [r4, #16]
 801583e:	464a      	mov	r2, r9
 8015840:	f7ff ff80 	bl	8015744 <memcpy>
 8015844:	89a3      	ldrh	r3, [r4, #12]
 8015846:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801584a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801584e:	81a3      	strh	r3, [r4, #12]
 8015850:	6126      	str	r6, [r4, #16]
 8015852:	6165      	str	r5, [r4, #20]
 8015854:	444e      	add	r6, r9
 8015856:	eba5 0509 	sub.w	r5, r5, r9
 801585a:	6026      	str	r6, [r4, #0]
 801585c:	60a5      	str	r5, [r4, #8]
 801585e:	463e      	mov	r6, r7
 8015860:	42be      	cmp	r6, r7
 8015862:	d900      	bls.n	8015866 <__ssputs_r+0x72>
 8015864:	463e      	mov	r6, r7
 8015866:	6820      	ldr	r0, [r4, #0]
 8015868:	4632      	mov	r2, r6
 801586a:	4641      	mov	r1, r8
 801586c:	f000 faa6 	bl	8015dbc <memmove>
 8015870:	68a3      	ldr	r3, [r4, #8]
 8015872:	1b9b      	subs	r3, r3, r6
 8015874:	60a3      	str	r3, [r4, #8]
 8015876:	6823      	ldr	r3, [r4, #0]
 8015878:	4433      	add	r3, r6
 801587a:	6023      	str	r3, [r4, #0]
 801587c:	2000      	movs	r0, #0
 801587e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015882:	462a      	mov	r2, r5
 8015884:	f000 fab4 	bl	8015df0 <_realloc_r>
 8015888:	4606      	mov	r6, r0
 801588a:	2800      	cmp	r0, #0
 801588c:	d1e0      	bne.n	8015850 <__ssputs_r+0x5c>
 801588e:	6921      	ldr	r1, [r4, #16]
 8015890:	4650      	mov	r0, sl
 8015892:	f7ff ff65 	bl	8015760 <_free_r>
 8015896:	230c      	movs	r3, #12
 8015898:	f8ca 3000 	str.w	r3, [sl]
 801589c:	89a3      	ldrh	r3, [r4, #12]
 801589e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80158a2:	81a3      	strh	r3, [r4, #12]
 80158a4:	f04f 30ff 	mov.w	r0, #4294967295
 80158a8:	e7e9      	b.n	801587e <__ssputs_r+0x8a>
	...

080158ac <_svfiprintf_r>:
 80158ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158b0:	4698      	mov	r8, r3
 80158b2:	898b      	ldrh	r3, [r1, #12]
 80158b4:	061b      	lsls	r3, r3, #24
 80158b6:	b09d      	sub	sp, #116	@ 0x74
 80158b8:	4607      	mov	r7, r0
 80158ba:	460d      	mov	r5, r1
 80158bc:	4614      	mov	r4, r2
 80158be:	d510      	bpl.n	80158e2 <_svfiprintf_r+0x36>
 80158c0:	690b      	ldr	r3, [r1, #16]
 80158c2:	b973      	cbnz	r3, 80158e2 <_svfiprintf_r+0x36>
 80158c4:	2140      	movs	r1, #64	@ 0x40
 80158c6:	f7ff fdbf 	bl	8015448 <_malloc_r>
 80158ca:	6028      	str	r0, [r5, #0]
 80158cc:	6128      	str	r0, [r5, #16]
 80158ce:	b930      	cbnz	r0, 80158de <_svfiprintf_r+0x32>
 80158d0:	230c      	movs	r3, #12
 80158d2:	603b      	str	r3, [r7, #0]
 80158d4:	f04f 30ff 	mov.w	r0, #4294967295
 80158d8:	b01d      	add	sp, #116	@ 0x74
 80158da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158de:	2340      	movs	r3, #64	@ 0x40
 80158e0:	616b      	str	r3, [r5, #20]
 80158e2:	2300      	movs	r3, #0
 80158e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80158e6:	2320      	movs	r3, #32
 80158e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80158ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80158f0:	2330      	movs	r3, #48	@ 0x30
 80158f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015a90 <_svfiprintf_r+0x1e4>
 80158f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80158fa:	f04f 0901 	mov.w	r9, #1
 80158fe:	4623      	mov	r3, r4
 8015900:	469a      	mov	sl, r3
 8015902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015906:	b10a      	cbz	r2, 801590c <_svfiprintf_r+0x60>
 8015908:	2a25      	cmp	r2, #37	@ 0x25
 801590a:	d1f9      	bne.n	8015900 <_svfiprintf_r+0x54>
 801590c:	ebba 0b04 	subs.w	fp, sl, r4
 8015910:	d00b      	beq.n	801592a <_svfiprintf_r+0x7e>
 8015912:	465b      	mov	r3, fp
 8015914:	4622      	mov	r2, r4
 8015916:	4629      	mov	r1, r5
 8015918:	4638      	mov	r0, r7
 801591a:	f7ff ff6b 	bl	80157f4 <__ssputs_r>
 801591e:	3001      	adds	r0, #1
 8015920:	f000 80a7 	beq.w	8015a72 <_svfiprintf_r+0x1c6>
 8015924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015926:	445a      	add	r2, fp
 8015928:	9209      	str	r2, [sp, #36]	@ 0x24
 801592a:	f89a 3000 	ldrb.w	r3, [sl]
 801592e:	2b00      	cmp	r3, #0
 8015930:	f000 809f 	beq.w	8015a72 <_svfiprintf_r+0x1c6>
 8015934:	2300      	movs	r3, #0
 8015936:	f04f 32ff 	mov.w	r2, #4294967295
 801593a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801593e:	f10a 0a01 	add.w	sl, sl, #1
 8015942:	9304      	str	r3, [sp, #16]
 8015944:	9307      	str	r3, [sp, #28]
 8015946:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801594a:	931a      	str	r3, [sp, #104]	@ 0x68
 801594c:	4654      	mov	r4, sl
 801594e:	2205      	movs	r2, #5
 8015950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015954:	484e      	ldr	r0, [pc, #312]	@ (8015a90 <_svfiprintf_r+0x1e4>)
 8015956:	f7ea fc73 	bl	8000240 <memchr>
 801595a:	9a04      	ldr	r2, [sp, #16]
 801595c:	b9d8      	cbnz	r0, 8015996 <_svfiprintf_r+0xea>
 801595e:	06d0      	lsls	r0, r2, #27
 8015960:	bf44      	itt	mi
 8015962:	2320      	movmi	r3, #32
 8015964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015968:	0711      	lsls	r1, r2, #28
 801596a:	bf44      	itt	mi
 801596c:	232b      	movmi	r3, #43	@ 0x2b
 801596e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015972:	f89a 3000 	ldrb.w	r3, [sl]
 8015976:	2b2a      	cmp	r3, #42	@ 0x2a
 8015978:	d015      	beq.n	80159a6 <_svfiprintf_r+0xfa>
 801597a:	9a07      	ldr	r2, [sp, #28]
 801597c:	4654      	mov	r4, sl
 801597e:	2000      	movs	r0, #0
 8015980:	f04f 0c0a 	mov.w	ip, #10
 8015984:	4621      	mov	r1, r4
 8015986:	f811 3b01 	ldrb.w	r3, [r1], #1
 801598a:	3b30      	subs	r3, #48	@ 0x30
 801598c:	2b09      	cmp	r3, #9
 801598e:	d94b      	bls.n	8015a28 <_svfiprintf_r+0x17c>
 8015990:	b1b0      	cbz	r0, 80159c0 <_svfiprintf_r+0x114>
 8015992:	9207      	str	r2, [sp, #28]
 8015994:	e014      	b.n	80159c0 <_svfiprintf_r+0x114>
 8015996:	eba0 0308 	sub.w	r3, r0, r8
 801599a:	fa09 f303 	lsl.w	r3, r9, r3
 801599e:	4313      	orrs	r3, r2
 80159a0:	9304      	str	r3, [sp, #16]
 80159a2:	46a2      	mov	sl, r4
 80159a4:	e7d2      	b.n	801594c <_svfiprintf_r+0xa0>
 80159a6:	9b03      	ldr	r3, [sp, #12]
 80159a8:	1d19      	adds	r1, r3, #4
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	9103      	str	r1, [sp, #12]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	bfbb      	ittet	lt
 80159b2:	425b      	neglt	r3, r3
 80159b4:	f042 0202 	orrlt.w	r2, r2, #2
 80159b8:	9307      	strge	r3, [sp, #28]
 80159ba:	9307      	strlt	r3, [sp, #28]
 80159bc:	bfb8      	it	lt
 80159be:	9204      	strlt	r2, [sp, #16]
 80159c0:	7823      	ldrb	r3, [r4, #0]
 80159c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80159c4:	d10a      	bne.n	80159dc <_svfiprintf_r+0x130>
 80159c6:	7863      	ldrb	r3, [r4, #1]
 80159c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80159ca:	d132      	bne.n	8015a32 <_svfiprintf_r+0x186>
 80159cc:	9b03      	ldr	r3, [sp, #12]
 80159ce:	1d1a      	adds	r2, r3, #4
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	9203      	str	r2, [sp, #12]
 80159d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80159d8:	3402      	adds	r4, #2
 80159da:	9305      	str	r3, [sp, #20]
 80159dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015aa0 <_svfiprintf_r+0x1f4>
 80159e0:	7821      	ldrb	r1, [r4, #0]
 80159e2:	2203      	movs	r2, #3
 80159e4:	4650      	mov	r0, sl
 80159e6:	f7ea fc2b 	bl	8000240 <memchr>
 80159ea:	b138      	cbz	r0, 80159fc <_svfiprintf_r+0x150>
 80159ec:	9b04      	ldr	r3, [sp, #16]
 80159ee:	eba0 000a 	sub.w	r0, r0, sl
 80159f2:	2240      	movs	r2, #64	@ 0x40
 80159f4:	4082      	lsls	r2, r0
 80159f6:	4313      	orrs	r3, r2
 80159f8:	3401      	adds	r4, #1
 80159fa:	9304      	str	r3, [sp, #16]
 80159fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a00:	4824      	ldr	r0, [pc, #144]	@ (8015a94 <_svfiprintf_r+0x1e8>)
 8015a02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015a06:	2206      	movs	r2, #6
 8015a08:	f7ea fc1a 	bl	8000240 <memchr>
 8015a0c:	2800      	cmp	r0, #0
 8015a0e:	d036      	beq.n	8015a7e <_svfiprintf_r+0x1d2>
 8015a10:	4b21      	ldr	r3, [pc, #132]	@ (8015a98 <_svfiprintf_r+0x1ec>)
 8015a12:	bb1b      	cbnz	r3, 8015a5c <_svfiprintf_r+0x1b0>
 8015a14:	9b03      	ldr	r3, [sp, #12]
 8015a16:	3307      	adds	r3, #7
 8015a18:	f023 0307 	bic.w	r3, r3, #7
 8015a1c:	3308      	adds	r3, #8
 8015a1e:	9303      	str	r3, [sp, #12]
 8015a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a22:	4433      	add	r3, r6
 8015a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a26:	e76a      	b.n	80158fe <_svfiprintf_r+0x52>
 8015a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8015a2c:	460c      	mov	r4, r1
 8015a2e:	2001      	movs	r0, #1
 8015a30:	e7a8      	b.n	8015984 <_svfiprintf_r+0xd8>
 8015a32:	2300      	movs	r3, #0
 8015a34:	3401      	adds	r4, #1
 8015a36:	9305      	str	r3, [sp, #20]
 8015a38:	4619      	mov	r1, r3
 8015a3a:	f04f 0c0a 	mov.w	ip, #10
 8015a3e:	4620      	mov	r0, r4
 8015a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a44:	3a30      	subs	r2, #48	@ 0x30
 8015a46:	2a09      	cmp	r2, #9
 8015a48:	d903      	bls.n	8015a52 <_svfiprintf_r+0x1a6>
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d0c6      	beq.n	80159dc <_svfiprintf_r+0x130>
 8015a4e:	9105      	str	r1, [sp, #20]
 8015a50:	e7c4      	b.n	80159dc <_svfiprintf_r+0x130>
 8015a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a56:	4604      	mov	r4, r0
 8015a58:	2301      	movs	r3, #1
 8015a5a:	e7f0      	b.n	8015a3e <_svfiprintf_r+0x192>
 8015a5c:	ab03      	add	r3, sp, #12
 8015a5e:	9300      	str	r3, [sp, #0]
 8015a60:	462a      	mov	r2, r5
 8015a62:	4b0e      	ldr	r3, [pc, #56]	@ (8015a9c <_svfiprintf_r+0x1f0>)
 8015a64:	a904      	add	r1, sp, #16
 8015a66:	4638      	mov	r0, r7
 8015a68:	f3af 8000 	nop.w
 8015a6c:	1c42      	adds	r2, r0, #1
 8015a6e:	4606      	mov	r6, r0
 8015a70:	d1d6      	bne.n	8015a20 <_svfiprintf_r+0x174>
 8015a72:	89ab      	ldrh	r3, [r5, #12]
 8015a74:	065b      	lsls	r3, r3, #25
 8015a76:	f53f af2d 	bmi.w	80158d4 <_svfiprintf_r+0x28>
 8015a7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015a7c:	e72c      	b.n	80158d8 <_svfiprintf_r+0x2c>
 8015a7e:	ab03      	add	r3, sp, #12
 8015a80:	9300      	str	r3, [sp, #0]
 8015a82:	462a      	mov	r2, r5
 8015a84:	4b05      	ldr	r3, [pc, #20]	@ (8015a9c <_svfiprintf_r+0x1f0>)
 8015a86:	a904      	add	r1, sp, #16
 8015a88:	4638      	mov	r0, r7
 8015a8a:	f000 f879 	bl	8015b80 <_printf_i>
 8015a8e:	e7ed      	b.n	8015a6c <_svfiprintf_r+0x1c0>
 8015a90:	08017ee4 	.word	0x08017ee4
 8015a94:	08017eee 	.word	0x08017eee
 8015a98:	00000000 	.word	0x00000000
 8015a9c:	080157f5 	.word	0x080157f5
 8015aa0:	08017eea 	.word	0x08017eea

08015aa4 <_printf_common>:
 8015aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015aa8:	4616      	mov	r6, r2
 8015aaa:	4698      	mov	r8, r3
 8015aac:	688a      	ldr	r2, [r1, #8]
 8015aae:	690b      	ldr	r3, [r1, #16]
 8015ab0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015ab4:	4293      	cmp	r3, r2
 8015ab6:	bfb8      	it	lt
 8015ab8:	4613      	movlt	r3, r2
 8015aba:	6033      	str	r3, [r6, #0]
 8015abc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015ac0:	4607      	mov	r7, r0
 8015ac2:	460c      	mov	r4, r1
 8015ac4:	b10a      	cbz	r2, 8015aca <_printf_common+0x26>
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	6033      	str	r3, [r6, #0]
 8015aca:	6823      	ldr	r3, [r4, #0]
 8015acc:	0699      	lsls	r1, r3, #26
 8015ace:	bf42      	ittt	mi
 8015ad0:	6833      	ldrmi	r3, [r6, #0]
 8015ad2:	3302      	addmi	r3, #2
 8015ad4:	6033      	strmi	r3, [r6, #0]
 8015ad6:	6825      	ldr	r5, [r4, #0]
 8015ad8:	f015 0506 	ands.w	r5, r5, #6
 8015adc:	d106      	bne.n	8015aec <_printf_common+0x48>
 8015ade:	f104 0a19 	add.w	sl, r4, #25
 8015ae2:	68e3      	ldr	r3, [r4, #12]
 8015ae4:	6832      	ldr	r2, [r6, #0]
 8015ae6:	1a9b      	subs	r3, r3, r2
 8015ae8:	42ab      	cmp	r3, r5
 8015aea:	dc26      	bgt.n	8015b3a <_printf_common+0x96>
 8015aec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015af0:	6822      	ldr	r2, [r4, #0]
 8015af2:	3b00      	subs	r3, #0
 8015af4:	bf18      	it	ne
 8015af6:	2301      	movne	r3, #1
 8015af8:	0692      	lsls	r2, r2, #26
 8015afa:	d42b      	bmi.n	8015b54 <_printf_common+0xb0>
 8015afc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015b00:	4641      	mov	r1, r8
 8015b02:	4638      	mov	r0, r7
 8015b04:	47c8      	blx	r9
 8015b06:	3001      	adds	r0, #1
 8015b08:	d01e      	beq.n	8015b48 <_printf_common+0xa4>
 8015b0a:	6823      	ldr	r3, [r4, #0]
 8015b0c:	6922      	ldr	r2, [r4, #16]
 8015b0e:	f003 0306 	and.w	r3, r3, #6
 8015b12:	2b04      	cmp	r3, #4
 8015b14:	bf02      	ittt	eq
 8015b16:	68e5      	ldreq	r5, [r4, #12]
 8015b18:	6833      	ldreq	r3, [r6, #0]
 8015b1a:	1aed      	subeq	r5, r5, r3
 8015b1c:	68a3      	ldr	r3, [r4, #8]
 8015b1e:	bf0c      	ite	eq
 8015b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015b24:	2500      	movne	r5, #0
 8015b26:	4293      	cmp	r3, r2
 8015b28:	bfc4      	itt	gt
 8015b2a:	1a9b      	subgt	r3, r3, r2
 8015b2c:	18ed      	addgt	r5, r5, r3
 8015b2e:	2600      	movs	r6, #0
 8015b30:	341a      	adds	r4, #26
 8015b32:	42b5      	cmp	r5, r6
 8015b34:	d11a      	bne.n	8015b6c <_printf_common+0xc8>
 8015b36:	2000      	movs	r0, #0
 8015b38:	e008      	b.n	8015b4c <_printf_common+0xa8>
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	4652      	mov	r2, sl
 8015b3e:	4641      	mov	r1, r8
 8015b40:	4638      	mov	r0, r7
 8015b42:	47c8      	blx	r9
 8015b44:	3001      	adds	r0, #1
 8015b46:	d103      	bne.n	8015b50 <_printf_common+0xac>
 8015b48:	f04f 30ff 	mov.w	r0, #4294967295
 8015b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b50:	3501      	adds	r5, #1
 8015b52:	e7c6      	b.n	8015ae2 <_printf_common+0x3e>
 8015b54:	18e1      	adds	r1, r4, r3
 8015b56:	1c5a      	adds	r2, r3, #1
 8015b58:	2030      	movs	r0, #48	@ 0x30
 8015b5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015b5e:	4422      	add	r2, r4
 8015b60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015b64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015b68:	3302      	adds	r3, #2
 8015b6a:	e7c7      	b.n	8015afc <_printf_common+0x58>
 8015b6c:	2301      	movs	r3, #1
 8015b6e:	4622      	mov	r2, r4
 8015b70:	4641      	mov	r1, r8
 8015b72:	4638      	mov	r0, r7
 8015b74:	47c8      	blx	r9
 8015b76:	3001      	adds	r0, #1
 8015b78:	d0e6      	beq.n	8015b48 <_printf_common+0xa4>
 8015b7a:	3601      	adds	r6, #1
 8015b7c:	e7d9      	b.n	8015b32 <_printf_common+0x8e>
	...

08015b80 <_printf_i>:
 8015b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b84:	7e0f      	ldrb	r7, [r1, #24]
 8015b86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015b88:	2f78      	cmp	r7, #120	@ 0x78
 8015b8a:	4691      	mov	r9, r2
 8015b8c:	4680      	mov	r8, r0
 8015b8e:	460c      	mov	r4, r1
 8015b90:	469a      	mov	sl, r3
 8015b92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015b96:	d807      	bhi.n	8015ba8 <_printf_i+0x28>
 8015b98:	2f62      	cmp	r7, #98	@ 0x62
 8015b9a:	d80a      	bhi.n	8015bb2 <_printf_i+0x32>
 8015b9c:	2f00      	cmp	r7, #0
 8015b9e:	f000 80d1 	beq.w	8015d44 <_printf_i+0x1c4>
 8015ba2:	2f58      	cmp	r7, #88	@ 0x58
 8015ba4:	f000 80b8 	beq.w	8015d18 <_printf_i+0x198>
 8015ba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015bac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015bb0:	e03a      	b.n	8015c28 <_printf_i+0xa8>
 8015bb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015bb6:	2b15      	cmp	r3, #21
 8015bb8:	d8f6      	bhi.n	8015ba8 <_printf_i+0x28>
 8015bba:	a101      	add	r1, pc, #4	@ (adr r1, 8015bc0 <_printf_i+0x40>)
 8015bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015bc0:	08015c19 	.word	0x08015c19
 8015bc4:	08015c2d 	.word	0x08015c2d
 8015bc8:	08015ba9 	.word	0x08015ba9
 8015bcc:	08015ba9 	.word	0x08015ba9
 8015bd0:	08015ba9 	.word	0x08015ba9
 8015bd4:	08015ba9 	.word	0x08015ba9
 8015bd8:	08015c2d 	.word	0x08015c2d
 8015bdc:	08015ba9 	.word	0x08015ba9
 8015be0:	08015ba9 	.word	0x08015ba9
 8015be4:	08015ba9 	.word	0x08015ba9
 8015be8:	08015ba9 	.word	0x08015ba9
 8015bec:	08015d2b 	.word	0x08015d2b
 8015bf0:	08015c57 	.word	0x08015c57
 8015bf4:	08015ce5 	.word	0x08015ce5
 8015bf8:	08015ba9 	.word	0x08015ba9
 8015bfc:	08015ba9 	.word	0x08015ba9
 8015c00:	08015d4d 	.word	0x08015d4d
 8015c04:	08015ba9 	.word	0x08015ba9
 8015c08:	08015c57 	.word	0x08015c57
 8015c0c:	08015ba9 	.word	0x08015ba9
 8015c10:	08015ba9 	.word	0x08015ba9
 8015c14:	08015ced 	.word	0x08015ced
 8015c18:	6833      	ldr	r3, [r6, #0]
 8015c1a:	1d1a      	adds	r2, r3, #4
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	6032      	str	r2, [r6, #0]
 8015c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015c24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015c28:	2301      	movs	r3, #1
 8015c2a:	e09c      	b.n	8015d66 <_printf_i+0x1e6>
 8015c2c:	6833      	ldr	r3, [r6, #0]
 8015c2e:	6820      	ldr	r0, [r4, #0]
 8015c30:	1d19      	adds	r1, r3, #4
 8015c32:	6031      	str	r1, [r6, #0]
 8015c34:	0606      	lsls	r6, r0, #24
 8015c36:	d501      	bpl.n	8015c3c <_printf_i+0xbc>
 8015c38:	681d      	ldr	r5, [r3, #0]
 8015c3a:	e003      	b.n	8015c44 <_printf_i+0xc4>
 8015c3c:	0645      	lsls	r5, r0, #25
 8015c3e:	d5fb      	bpl.n	8015c38 <_printf_i+0xb8>
 8015c40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015c44:	2d00      	cmp	r5, #0
 8015c46:	da03      	bge.n	8015c50 <_printf_i+0xd0>
 8015c48:	232d      	movs	r3, #45	@ 0x2d
 8015c4a:	426d      	negs	r5, r5
 8015c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015c50:	4858      	ldr	r0, [pc, #352]	@ (8015db4 <_printf_i+0x234>)
 8015c52:	230a      	movs	r3, #10
 8015c54:	e011      	b.n	8015c7a <_printf_i+0xfa>
 8015c56:	6821      	ldr	r1, [r4, #0]
 8015c58:	6833      	ldr	r3, [r6, #0]
 8015c5a:	0608      	lsls	r0, r1, #24
 8015c5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015c60:	d402      	bmi.n	8015c68 <_printf_i+0xe8>
 8015c62:	0649      	lsls	r1, r1, #25
 8015c64:	bf48      	it	mi
 8015c66:	b2ad      	uxthmi	r5, r5
 8015c68:	2f6f      	cmp	r7, #111	@ 0x6f
 8015c6a:	4852      	ldr	r0, [pc, #328]	@ (8015db4 <_printf_i+0x234>)
 8015c6c:	6033      	str	r3, [r6, #0]
 8015c6e:	bf14      	ite	ne
 8015c70:	230a      	movne	r3, #10
 8015c72:	2308      	moveq	r3, #8
 8015c74:	2100      	movs	r1, #0
 8015c76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015c7a:	6866      	ldr	r6, [r4, #4]
 8015c7c:	60a6      	str	r6, [r4, #8]
 8015c7e:	2e00      	cmp	r6, #0
 8015c80:	db05      	blt.n	8015c8e <_printf_i+0x10e>
 8015c82:	6821      	ldr	r1, [r4, #0]
 8015c84:	432e      	orrs	r6, r5
 8015c86:	f021 0104 	bic.w	r1, r1, #4
 8015c8a:	6021      	str	r1, [r4, #0]
 8015c8c:	d04b      	beq.n	8015d26 <_printf_i+0x1a6>
 8015c8e:	4616      	mov	r6, r2
 8015c90:	fbb5 f1f3 	udiv	r1, r5, r3
 8015c94:	fb03 5711 	mls	r7, r3, r1, r5
 8015c98:	5dc7      	ldrb	r7, [r0, r7]
 8015c9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015c9e:	462f      	mov	r7, r5
 8015ca0:	42bb      	cmp	r3, r7
 8015ca2:	460d      	mov	r5, r1
 8015ca4:	d9f4      	bls.n	8015c90 <_printf_i+0x110>
 8015ca6:	2b08      	cmp	r3, #8
 8015ca8:	d10b      	bne.n	8015cc2 <_printf_i+0x142>
 8015caa:	6823      	ldr	r3, [r4, #0]
 8015cac:	07df      	lsls	r7, r3, #31
 8015cae:	d508      	bpl.n	8015cc2 <_printf_i+0x142>
 8015cb0:	6923      	ldr	r3, [r4, #16]
 8015cb2:	6861      	ldr	r1, [r4, #4]
 8015cb4:	4299      	cmp	r1, r3
 8015cb6:	bfde      	ittt	le
 8015cb8:	2330      	movle	r3, #48	@ 0x30
 8015cba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015cbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015cc2:	1b92      	subs	r2, r2, r6
 8015cc4:	6122      	str	r2, [r4, #16]
 8015cc6:	f8cd a000 	str.w	sl, [sp]
 8015cca:	464b      	mov	r3, r9
 8015ccc:	aa03      	add	r2, sp, #12
 8015cce:	4621      	mov	r1, r4
 8015cd0:	4640      	mov	r0, r8
 8015cd2:	f7ff fee7 	bl	8015aa4 <_printf_common>
 8015cd6:	3001      	adds	r0, #1
 8015cd8:	d14a      	bne.n	8015d70 <_printf_i+0x1f0>
 8015cda:	f04f 30ff 	mov.w	r0, #4294967295
 8015cde:	b004      	add	sp, #16
 8015ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ce4:	6823      	ldr	r3, [r4, #0]
 8015ce6:	f043 0320 	orr.w	r3, r3, #32
 8015cea:	6023      	str	r3, [r4, #0]
 8015cec:	4832      	ldr	r0, [pc, #200]	@ (8015db8 <_printf_i+0x238>)
 8015cee:	2778      	movs	r7, #120	@ 0x78
 8015cf0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015cf4:	6823      	ldr	r3, [r4, #0]
 8015cf6:	6831      	ldr	r1, [r6, #0]
 8015cf8:	061f      	lsls	r7, r3, #24
 8015cfa:	f851 5b04 	ldr.w	r5, [r1], #4
 8015cfe:	d402      	bmi.n	8015d06 <_printf_i+0x186>
 8015d00:	065f      	lsls	r7, r3, #25
 8015d02:	bf48      	it	mi
 8015d04:	b2ad      	uxthmi	r5, r5
 8015d06:	6031      	str	r1, [r6, #0]
 8015d08:	07d9      	lsls	r1, r3, #31
 8015d0a:	bf44      	itt	mi
 8015d0c:	f043 0320 	orrmi.w	r3, r3, #32
 8015d10:	6023      	strmi	r3, [r4, #0]
 8015d12:	b11d      	cbz	r5, 8015d1c <_printf_i+0x19c>
 8015d14:	2310      	movs	r3, #16
 8015d16:	e7ad      	b.n	8015c74 <_printf_i+0xf4>
 8015d18:	4826      	ldr	r0, [pc, #152]	@ (8015db4 <_printf_i+0x234>)
 8015d1a:	e7e9      	b.n	8015cf0 <_printf_i+0x170>
 8015d1c:	6823      	ldr	r3, [r4, #0]
 8015d1e:	f023 0320 	bic.w	r3, r3, #32
 8015d22:	6023      	str	r3, [r4, #0]
 8015d24:	e7f6      	b.n	8015d14 <_printf_i+0x194>
 8015d26:	4616      	mov	r6, r2
 8015d28:	e7bd      	b.n	8015ca6 <_printf_i+0x126>
 8015d2a:	6833      	ldr	r3, [r6, #0]
 8015d2c:	6825      	ldr	r5, [r4, #0]
 8015d2e:	6961      	ldr	r1, [r4, #20]
 8015d30:	1d18      	adds	r0, r3, #4
 8015d32:	6030      	str	r0, [r6, #0]
 8015d34:	062e      	lsls	r6, r5, #24
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	d501      	bpl.n	8015d3e <_printf_i+0x1be>
 8015d3a:	6019      	str	r1, [r3, #0]
 8015d3c:	e002      	b.n	8015d44 <_printf_i+0x1c4>
 8015d3e:	0668      	lsls	r0, r5, #25
 8015d40:	d5fb      	bpl.n	8015d3a <_printf_i+0x1ba>
 8015d42:	8019      	strh	r1, [r3, #0]
 8015d44:	2300      	movs	r3, #0
 8015d46:	6123      	str	r3, [r4, #16]
 8015d48:	4616      	mov	r6, r2
 8015d4a:	e7bc      	b.n	8015cc6 <_printf_i+0x146>
 8015d4c:	6833      	ldr	r3, [r6, #0]
 8015d4e:	1d1a      	adds	r2, r3, #4
 8015d50:	6032      	str	r2, [r6, #0]
 8015d52:	681e      	ldr	r6, [r3, #0]
 8015d54:	6862      	ldr	r2, [r4, #4]
 8015d56:	2100      	movs	r1, #0
 8015d58:	4630      	mov	r0, r6
 8015d5a:	f7ea fa71 	bl	8000240 <memchr>
 8015d5e:	b108      	cbz	r0, 8015d64 <_printf_i+0x1e4>
 8015d60:	1b80      	subs	r0, r0, r6
 8015d62:	6060      	str	r0, [r4, #4]
 8015d64:	6863      	ldr	r3, [r4, #4]
 8015d66:	6123      	str	r3, [r4, #16]
 8015d68:	2300      	movs	r3, #0
 8015d6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015d6e:	e7aa      	b.n	8015cc6 <_printf_i+0x146>
 8015d70:	6923      	ldr	r3, [r4, #16]
 8015d72:	4632      	mov	r2, r6
 8015d74:	4649      	mov	r1, r9
 8015d76:	4640      	mov	r0, r8
 8015d78:	47d0      	blx	sl
 8015d7a:	3001      	adds	r0, #1
 8015d7c:	d0ad      	beq.n	8015cda <_printf_i+0x15a>
 8015d7e:	6823      	ldr	r3, [r4, #0]
 8015d80:	079b      	lsls	r3, r3, #30
 8015d82:	d413      	bmi.n	8015dac <_printf_i+0x22c>
 8015d84:	68e0      	ldr	r0, [r4, #12]
 8015d86:	9b03      	ldr	r3, [sp, #12]
 8015d88:	4298      	cmp	r0, r3
 8015d8a:	bfb8      	it	lt
 8015d8c:	4618      	movlt	r0, r3
 8015d8e:	e7a6      	b.n	8015cde <_printf_i+0x15e>
 8015d90:	2301      	movs	r3, #1
 8015d92:	4632      	mov	r2, r6
 8015d94:	4649      	mov	r1, r9
 8015d96:	4640      	mov	r0, r8
 8015d98:	47d0      	blx	sl
 8015d9a:	3001      	adds	r0, #1
 8015d9c:	d09d      	beq.n	8015cda <_printf_i+0x15a>
 8015d9e:	3501      	adds	r5, #1
 8015da0:	68e3      	ldr	r3, [r4, #12]
 8015da2:	9903      	ldr	r1, [sp, #12]
 8015da4:	1a5b      	subs	r3, r3, r1
 8015da6:	42ab      	cmp	r3, r5
 8015da8:	dcf2      	bgt.n	8015d90 <_printf_i+0x210>
 8015daa:	e7eb      	b.n	8015d84 <_printf_i+0x204>
 8015dac:	2500      	movs	r5, #0
 8015dae:	f104 0619 	add.w	r6, r4, #25
 8015db2:	e7f5      	b.n	8015da0 <_printf_i+0x220>
 8015db4:	08017ef5 	.word	0x08017ef5
 8015db8:	08017f06 	.word	0x08017f06

08015dbc <memmove>:
 8015dbc:	4288      	cmp	r0, r1
 8015dbe:	b510      	push	{r4, lr}
 8015dc0:	eb01 0402 	add.w	r4, r1, r2
 8015dc4:	d902      	bls.n	8015dcc <memmove+0x10>
 8015dc6:	4284      	cmp	r4, r0
 8015dc8:	4623      	mov	r3, r4
 8015dca:	d807      	bhi.n	8015ddc <memmove+0x20>
 8015dcc:	1e43      	subs	r3, r0, #1
 8015dce:	42a1      	cmp	r1, r4
 8015dd0:	d008      	beq.n	8015de4 <memmove+0x28>
 8015dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015dda:	e7f8      	b.n	8015dce <memmove+0x12>
 8015ddc:	4402      	add	r2, r0
 8015dde:	4601      	mov	r1, r0
 8015de0:	428a      	cmp	r2, r1
 8015de2:	d100      	bne.n	8015de6 <memmove+0x2a>
 8015de4:	bd10      	pop	{r4, pc}
 8015de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015dee:	e7f7      	b.n	8015de0 <memmove+0x24>

08015df0 <_realloc_r>:
 8015df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015df4:	4607      	mov	r7, r0
 8015df6:	4614      	mov	r4, r2
 8015df8:	460d      	mov	r5, r1
 8015dfa:	b921      	cbnz	r1, 8015e06 <_realloc_r+0x16>
 8015dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e00:	4611      	mov	r1, r2
 8015e02:	f7ff bb21 	b.w	8015448 <_malloc_r>
 8015e06:	b92a      	cbnz	r2, 8015e14 <_realloc_r+0x24>
 8015e08:	f7ff fcaa 	bl	8015760 <_free_r>
 8015e0c:	4625      	mov	r5, r4
 8015e0e:	4628      	mov	r0, r5
 8015e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e14:	f000 f81a 	bl	8015e4c <_malloc_usable_size_r>
 8015e18:	4284      	cmp	r4, r0
 8015e1a:	4606      	mov	r6, r0
 8015e1c:	d802      	bhi.n	8015e24 <_realloc_r+0x34>
 8015e1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015e22:	d8f4      	bhi.n	8015e0e <_realloc_r+0x1e>
 8015e24:	4621      	mov	r1, r4
 8015e26:	4638      	mov	r0, r7
 8015e28:	f7ff fb0e 	bl	8015448 <_malloc_r>
 8015e2c:	4680      	mov	r8, r0
 8015e2e:	b908      	cbnz	r0, 8015e34 <_realloc_r+0x44>
 8015e30:	4645      	mov	r5, r8
 8015e32:	e7ec      	b.n	8015e0e <_realloc_r+0x1e>
 8015e34:	42b4      	cmp	r4, r6
 8015e36:	4622      	mov	r2, r4
 8015e38:	4629      	mov	r1, r5
 8015e3a:	bf28      	it	cs
 8015e3c:	4632      	movcs	r2, r6
 8015e3e:	f7ff fc81 	bl	8015744 <memcpy>
 8015e42:	4629      	mov	r1, r5
 8015e44:	4638      	mov	r0, r7
 8015e46:	f7ff fc8b 	bl	8015760 <_free_r>
 8015e4a:	e7f1      	b.n	8015e30 <_realloc_r+0x40>

08015e4c <_malloc_usable_size_r>:
 8015e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e50:	1f18      	subs	r0, r3, #4
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	bfbc      	itt	lt
 8015e56:	580b      	ldrlt	r3, [r1, r0]
 8015e58:	18c0      	addlt	r0, r0, r3
 8015e5a:	4770      	bx	lr

08015e5c <_init>:
 8015e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e5e:	bf00      	nop
 8015e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e62:	bc08      	pop	{r3}
 8015e64:	469e      	mov	lr, r3
 8015e66:	4770      	bx	lr

08015e68 <_fini>:
 8015e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e6a:	bf00      	nop
 8015e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e6e:	bc08      	pop	{r3}
 8015e70:	469e      	mov	lr, r3
 8015e72:	4770      	bx	lr
