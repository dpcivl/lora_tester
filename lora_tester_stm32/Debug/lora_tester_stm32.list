
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a5a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002018  0801a774  0801a774  0001b774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c78c  0801c78c  0001e220  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c78c  0801c78c  0001d78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c794  0801c794  0001e220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c794  0801c794  0001d794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c798  0801c798  0001d798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0801c79c  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000e0  0801c87c  0001e0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000180  0801c91c  0001e180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a090  20000220  0801c9bc  0001e220  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000a2b0  0801c9bc  0001e2b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001e220  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045b75  00000000  00000000  0001e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009c97  00000000  00000000  00063dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003960  00000000  00000000  0006da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002c8b  00000000  00000000  000713c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000394ea  00000000  00000000  0007404b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00050606  00000000  00000000  000ad535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012d4ac  00000000  00000000  000fdb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022afe7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f7fc  00000000  00000000  0022b02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0023a828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a75c 	.word	0x0801a75c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0801a75c 	.word	0x0801a75c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f003 ffc0 	bl	80045b0 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f019 fc92 	bl	8019f68 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f019 fbe6 	bl	8019e40 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f003 ff90 	bl	80045b0 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 f861 	bl	8004758 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f003 ff82 	bl	80045b0 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f003 ff7a 	bl	80045b0 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f003 ff75 	bl	80045b0 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	0801a774 	.word	0x0801a774
 80006d4:	0801a790 	.word	0x0801a790
 80006d8:	0801a798 	.word	0x0801a798
 80006dc:	0801a7b0 	.word	0x0801a7b0
 80006e0:	0801a7e0 	.word	0x0801a7e0
 80006e4:	0801a818 	.word	0x0801a818

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	0801a884 	.word	0x0801a884
 800076c:	0801a88c 	.word	0x0801a88c
 8000770:	0801a898 	.word	0x0801a898
 8000774:	0801a8a0 	.word	0x0801a8a0
 8000778:	0801a8ac 	.word	0x0801a8ac
 800077c:	0801a8bc 	.word	0x0801a8bc
 8000780:	0801a8cc 	.word	0x0801a8cc
 8000784:	0801a8e0 	.word	0x0801a8e0
 8000788:	0801a8f4 	.word	0x0801a8f4
 800078c:	0801a900 	.word	0x0801a900
 8000790:	0801a908 	.word	0x0801a908
 8000794:	0801a910 	.word	0x0801a910

08000798 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d032      	beq.n	800080e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <LoraStarter_InitWithDefaults+0x80>)
 80007b8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ba:	2205      	movs	r2, #5
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <LoraStarter_InitWithDefaults+0x32>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	e000      	b.n	80007cc <LoraStarter_InitWithDefaults+0x34>
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <LoraStarter_InitWithDefaults+0x84>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <LoraStarter_InitWithDefaults+0x88>)
 80007da:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4907      	ldr	r1, [pc, #28]	@ (8000824 <LoraStarter_InitWithDefaults+0x8c>)
 8000806:	2001      	movs	r0, #1
 8000808:	f003 fed2 	bl	80045b0 <LOGGER_SendFormatted>
 800080c:	e000      	b.n	8000810 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800080e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	0801a934 	.word	0x0801a934
 8000820:	000493e0 	.word	0x000493e0
 8000824:	0801a93c 	.word	0x0801a93c

08000828 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b0bf      	sub	sp, #252	@ 0xfc
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8283 	beq.w	8000d40 <LoraStarter_Process+0x518>

    LoraState old_state = ctx->state;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b08      	cmp	r3, #8
 8000848:	f200 825b 	bhi.w	8000d02 <LoraStarter_Process+0x4da>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <LoraStarter_Process+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000879 	.word	0x08000879
 8000858:	080008c7 	.word	0x080008c7
 800085c:	0800091d 	.word	0x0800091d
 8000860:	080009d7 	.word	0x080009d7
 8000864:	080009ed 	.word	0x080009ed
 8000868:	08000a3b 	.word	0x08000a3b
 800086c:	08000af9 	.word	0x08000af9
 8000870:	08000c29 	.word	0x08000c29
 8000874:	08000c8f 	.word	0x08000c8f
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <LoraStarter_Process+0x70>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <LoraStarter_Process+0x7e>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4aaa      	ldr	r2, [pc, #680]	@ (8000b4c <LoraStarter_Process+0x324>)
 80008a4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008bc:	49a4      	ldr	r1, [pc, #656]	@ (8000b50 <LoraStarter_Process+0x328>)
 80008be:	2001      	movs	r0, #1
 80008c0:	f003 fe76 	bl	80045b0 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 80008c4:	e224      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	da20      	bge.n	8000914 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68d8      	ldr	r0, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	460a      	mov	r2, r1
 80008f0:	4998      	ldr	r1, [pc, #608]	@ (8000b54 <LoraStarter_Process+0x32c>)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f003 fe5c 	bl	80045b0 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe80 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000912:	e1fd      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
            break;
 800091a:	e1f9      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 81f1 	beq.w	8000d06 <LoraStarter_Process+0x4de>
                if (is_response_ok(uart_rx)) {
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 fa91 	bl	8000e4c <is_response_ok>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d010      	beq.n	8000952 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	461a      	mov	r2, r3
 8000938:	4987      	ldr	r1, [pc, #540]	@ (8000b58 <LoraStarter_Process+0x330>)
 800093a:	2000      	movs	r0, #0
 800093c:	f003 fe38 	bl	80045b0 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000950:	e1d9      	b.n	8000d06 <LoraStarter_Process+0x4de>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000952:	4982      	ldr	r1, [pc, #520]	@ (8000b5c <LoraStarter_Process+0x334>)
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f019 fb22 	bl	8019f9e <strstr>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <LoraStarter_Process+0x148>
 8000960:	497f      	ldr	r1, [pc, #508]	@ (8000b60 <LoraStarter_Process+0x338>)
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f019 fb1b 	bl	8019f9e <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 81cb 	beq.w	8000d06 <LoraStarter_Process+0x4de>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	497a      	ldr	r1, [pc, #488]	@ (8000b64 <LoraStarter_Process+0x33c>)
 800097a:	2002      	movs	r0, #2
 800097c:	f003 fe18 	bl	80045b0 <LOGGER_SendFormatted>
                    ctx->error_count++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	2b02      	cmp	r3, #2
 8000990:	dc0d      	bgt.n	80009ae <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	3301      	adds	r3, #1
 800099e:	4972      	ldr	r1, [pc, #456]	@ (8000b68 <LoraStarter_Process+0x340>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f003 fe05 	bl	80045b0 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
            break;
 80009ac:	e1ab      	b.n	8000d06 <LoraStarter_Process+0x4de>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	461a      	mov	r2, r3
 80009b6:	496d      	ldr	r1, [pc, #436]	@ (8000b6c <LoraStarter_Process+0x344>)
 80009b8:	2002      	movs	r0, #2
 80009ba:	f003 fdf9 	bl	80045b0 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
            break;
 80009d4:	e197      	b.n	8000d06 <LoraStarter_Process+0x4de>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 80009d6:	4966      	ldr	r1, [pc, #408]	@ (8000b70 <LoraStarter_Process+0x348>)
 80009d8:	2001      	movs	r0, #1
 80009da:	f003 fde9 	bl	80045b0 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 80009de:	4865      	ldr	r0, [pc, #404]	@ (8000b74 <LoraStarter_Process+0x34c>)
 80009e0:	f7ff fe14 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	701a      	strb	r2, [r3, #0]
            break;
 80009ea:	e191      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 818b 	beq.w	8000d0a <LoraStarter_Process+0x4e2>
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f000 fa91 	bl	8000f1c <is_join_response_ok>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 8184 	beq.w	8000d0a <LoraStarter_Process+0x4e2>
                LORA_LOG_JOIN_SUCCESS();
 8000a02:	495d      	ldr	r1, [pc, #372]	@ (8000b78 <LoraStarter_Process+0x350>)
 8000a04:	2001      	movs	r0, #1
 8000a06:	f003 fdd3 	bl	80045b0 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_INFO("[LoRa] Starting periodic send with message: %s", ctx->send_message);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4952      	ldr	r1, [pc, #328]	@ (8000b7c <LoraStarter_Process+0x354>)
 8000a32:	2001      	movs	r0, #1
 8000a34:	f003 fdbc 	bl	80045b0 <LOGGER_SendFormatted>
            }
            break;
 8000a38:	e167      	b.n	8000d0a <LoraStarter_Process+0x4e2>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <LoraStarter_Process+0x220>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	e000      	b.n	8000a4a <LoraStarter_Process+0x222>
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <LoraStarter_Process+0x324>)
 8000a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000a4e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000a52:	f7ff fbe7 	bl	8000224 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a62:	e014      	b.n	8000a8e <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	18d0      	adds	r0, r2, r3
 8000a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4940      	ldr	r1, [pc, #256]	@ (8000b80 <LoraStarter_Process+0x358>)
 8000a80:	f019 fa14 	bl	8019eac <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da03      	bge.n	8000aa2 <LoraStarter_Process+0x27a>
 8000a9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a9e:	2b1e      	cmp	r3, #30
 8000aa0:	dde0      	ble.n	8000a64 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	33f0      	adds	r3, #240	@ 0xf0
 8000aaa:	443b      	add	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000aba:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <LoraStarter_Process+0x35c>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	f019 f9bf 	bl	8019e40 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <LoraStarter_Process+0x360>)
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f003 fd71 	bl	80045b0 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000ace:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd9a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2206      	movs	r2, #6
 8000adc:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4927      	ldr	r1, [pc, #156]	@ (8000b8c <LoraStarter_Process+0x364>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f003 fd5d 	bl	80045b0 <LOGGER_SendFormatted>
            }
            break;
 8000af6:	e10b      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 8107 	beq.w	8000d0e <LoraStarter_Process+0x4e6>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f000 fa8f 	bl	8001024 <ResponseHandler_ParseSendResponse>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000b0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d03f      	beq.n	8000b94 <LoraStarter_Process+0x36c>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f300 8080 	bgt.w	8000c1a <LoraStarter_Process+0x3f2>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <LoraStarter_Process+0x2fc>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d04c      	beq.n	8000bbc <LoraStarter_Process+0x394>
 8000b22:	e07a      	b.n	8000c1a <LoraStarter_Process+0x3f2>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000b24:	491a      	ldr	r1, [pc, #104]	@ (8000b90 <LoraStarter_Process+0x368>)
 8000b26:	2001      	movs	r0, #1
 8000b28:	f003 fd42 	bl	80045b0 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b40:	f003 fccc 	bl	80044dc <TIME_GetCurrentMs>
 8000b44:	4602      	mov	r2, r0
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
                        break;
 8000b4a:	e06c      	b.n	8000c26 <LoraStarter_Process+0x3fe>
 8000b4c:	0801a97c 	.word	0x0801a97c
 8000b50:	0801a984 	.word	0x0801a984
 8000b54:	0801a9bc 	.word	0x0801a9bc
 8000b58:	0801a9e0 	.word	0x0801a9e0
 8000b5c:	0801a908 	.word	0x0801a908
 8000b60:	0801aa00 	.word	0x0801aa00
 8000b64:	0801aa18 	.word	0x0801aa18
 8000b68:	0801aa38 	.word	0x0801aa38
 8000b6c:	0801aa64 	.word	0x0801aa64
 8000b70:	0801aaa0 	.word	0x0801aaa0
 8000b74:	0801aabc 	.word	0x0801aabc
 8000b78:	0801aac8 	.word	0x0801aac8
 8000b7c:	0801aae0 	.word	0x0801aae0
 8000b80:	0801ab10 	.word	0x0801ab10
 8000b84:	0801ab18 	.word	0x0801ab18
 8000b88:	0801ab28 	.word	0x0801ab28
 8000b8c:	0801ab40 	.word	0x0801ab40
 8000b90:	0801ab58 	.word	0x0801ab58
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b94:	496c      	ldr	r1, [pc, #432]	@ (8000d48 <LoraStarter_Process+0x520>)
 8000b96:	2002      	movs	r0, #2
 8000b98:	f003 fd0a 	bl	80045b0 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000bb0:	f003 fc94 	bl	80044dc <TIME_GetCurrentMs>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
                        break;
 8000bba:	e034      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000bbc:	4a63      	ldr	r2, [pc, #396]	@ (8000d4c <LoraStarter_Process+0x524>)
 8000bbe:	4964      	ldr	r1, [pc, #400]	@ (8000d50 <LoraStarter_Process+0x528>)
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f003 fcf5 	bl	80045b0 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	495f      	ldr	r1, [pc, #380]	@ (8000d54 <LoraStarter_Process+0x52c>)
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f003 fce9 	bl	80045b0 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <LoraStarter_Process+0x3ca>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	da0b      	bge.n	8000c0a <LoraStarter_Process+0x3e2>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	4957      	ldr	r1, [pc, #348]	@ (8000d58 <LoraStarter_Process+0x530>)
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f003 fcd7 	bl	80045b0 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2208      	movs	r2, #8
 8000c06:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000c08:	e00d      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000c0a:	4954      	ldr	r1, [pc, #336]	@ (8000d5c <LoraStarter_Process+0x534>)
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f003 fccf 	bl	80045b0 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	220a      	movs	r2, #10
 8000c16:	701a      	strb	r2, [r3, #0]
                        break;
 8000c18:	e005      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	4950      	ldr	r1, [pc, #320]	@ (8000d60 <LoraStarter_Process+0x538>)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f003 fcc6 	bl	80045b0 <LOGGER_SendFormatted>
                        break;
 8000c24:	bf00      	nop
                }
            }
            break;
 8000c26:	e072      	b.n	8000d0e <LoraStarter_Process+0x4e6>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c28:	f003 fc58 	bl	80044dc <TIME_GetCurrentMs>
 8000c2c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <LoraStarter_Process+0x416>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	e001      	b.n	8000c42 <LoraStarter_Process+0x41a>
 8000c3e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d809      	bhi.n	8000c6c <LoraStarter_Process+0x444>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000c58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c5c:	4941      	ldr	r1, [pc, #260]	@ (8000d64 <LoraStarter_Process+0x53c>)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f003 fca6 	bl	80045b0 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2205      	movs	r2, #5
 8000c68:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000c6a:	e051      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c7a:	4413      	add	r3, r2
 8000c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000c80:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c84:	4938      	ldr	r1, [pc, #224]	@ (8000d68 <LoraStarter_Process+0x540>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f003 fc92 	bl	80045b0 <LOGGER_SendFormatted>
            break;
 8000c8c:	e040      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c8e:	f003 fc25 	bl	80044dc <TIME_GetCurrentMs>
 8000c92:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10b      	bne.n	8000cb6 <LoraStarter_Process+0x48e>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000c9e:	4933      	ldr	r1, [pc, #204]	@ (8000d6c <LoraStarter_Process+0x544>)
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f003 fc85 	bl	80045b0 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000cb4:	e02c      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d30e      	bcc.n	8000ce6 <LoraStarter_Process+0x4be>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4928      	ldr	r1, [pc, #160]	@ (8000d70 <LoraStarter_Process+0x548>)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f003 fc6d 	bl	80045b0 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	701a      	strb	r2, [r3, #0]
            break;
 8000ce4:	e014      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	491e      	ldr	r1, [pc, #120]	@ (8000d74 <LoraStarter_Process+0x54c>)
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f003 fc58 	bl	80045b0 <LOGGER_SendFormatted>
            break;
 8000d00:	e006      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000d02:	bf00      	nop
 8000d04:	e004      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d06:	bf00      	nop
 8000d08:	e002      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d0a:	bf00      	nop
 8000d0c:	e000      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d0e:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d012      	beq.n	8000d42 <LoraStarter_Process+0x51a>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000d1c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fce1 	bl	80006e8 <get_state_name>
 8000d26:	4604      	mov	r4, r0
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <get_state_name>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4622      	mov	r2, r4
 8000d36:	4910      	ldr	r1, [pc, #64]	@ (8000d78 <LoraStarter_Process+0x550>)
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f003 fc39 	bl	80045b0 <LOGGER_SendFormatted>
 8000d3e:	e000      	b.n	8000d42 <LoraStarter_Process+0x51a>
    if (ctx == NULL) return;
 8000d40:	bf00      	nop
    }
}
 8000d42:	37f4      	adds	r7, #244	@ 0xf4
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	0801ab70 	.word	0x0801ab70
 8000d4c:	0801ab84 	.word	0x0801ab84
 8000d50:	0801ab94 	.word	0x0801ab94
 8000d54:	0801abac 	.word	0x0801abac
 8000d58:	0801abc4 	.word	0x0801abc4
 8000d5c:	0801abe0 	.word	0x0801abe0
 8000d60:	0801ac04 	.word	0x0801ac04
 8000d64:	0801ac20 	.word	0x0801ac20
 8000d68:	0801ac5c 	.word	0x0801ac5c
 8000d6c:	0801ac90 	.word	0x0801ac90
 8000d70:	0801aca8 	.word	0x0801aca8
 8000d74:	0801acd0 	.word	0x0801acd0
 8000d78:	0801ad04 	.word	0x0801ad04

08000d7c <Network_SendBinary>:
    
    return NETWORK_OK;
}

int Network_SendBinary(const void* data, size_t size)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    if (!g_connected) {
 8000d86:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <Network_SendBinary+0x8c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	f083 0301 	eor.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <Network_SendBinary+0x1e>
        return NETWORK_NOT_CONNECTED;
 8000d94:	f06f 0301 	mvn.w	r3, #1
 8000d98:	e032      	b.n	8000e00 <Network_SendBinary+0x84>
    }
    
    if (data == NULL || size == 0) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <Network_SendBinary+0x2a>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <Network_SendBinary+0x30>
        return NETWORK_INVALID_PARAM;
 8000da6:	f06f 0303 	mvn.w	r3, #3
 8000daa:	e029      	b.n	8000e00 <Network_SendBinary+0x84>
    }
    
    // 백엔드에 따른 분기 처리
    switch (g_backend) {
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <Network_SendBinary+0x90>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <Network_SendBinary+0x3e>
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d002      	beq.n	8000dbe <Network_SendBinary+0x42>
 8000db8:	e020      	b.n	8000dfc <Network_SendBinary+0x80>
        case NETWORK_BACKEND_SOCKET:
            // 실제 구현에서는 소켓을 통한 데이터 전송
            // 지금은 테스트를 위한 최소 구현
            return NETWORK_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e020      	b.n	8000e00 <Network_SendBinary+0x84>
            
        case NETWORK_BACKEND_SD_CARD:
            {
                int result = SDStorage_WriteLog(data, size);
 8000dbe:	6839      	ldr	r1, [r7, #0]
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 f9df 	bl	8001184 <SDStorage_WriteLog>
 8000dc6:	60f8      	str	r0, [r7, #12]
                switch (result) {
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00b      	beq.n	8000de6 <Network_SendBinary+0x6a>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	dc10      	bgt.n	8000df6 <Network_SendBinary+0x7a>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f113 0f05 	cmn.w	r3, #5
 8000dda:	d009      	beq.n	8000df0 <Network_SendBinary+0x74>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f113 0f02 	cmn.w	r3, #2
 8000de2:	d002      	beq.n	8000dea <Network_SendBinary+0x6e>
 8000de4:	e007      	b.n	8000df6 <Network_SendBinary+0x7a>
                    case SDSTORAGE_OK:
                        return NETWORK_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e00a      	b.n	8000e00 <Network_SendBinary+0x84>
                    case SDSTORAGE_NOT_READY:
                        return NETWORK_NOT_CONNECTED;
 8000dea:	f06f 0301 	mvn.w	r3, #1
 8000dee:	e007      	b.n	8000e00 <Network_SendBinary+0x84>
                    case SDSTORAGE_INVALID_PARAM:
                        return NETWORK_INVALID_PARAM;
 8000df0:	f06f 0303 	mvn.w	r3, #3
 8000df4:	e004      	b.n	8000e00 <Network_SendBinary+0x84>
                    case SDSTORAGE_DISK_FULL:
                    case SDSTORAGE_FILE_ERROR:
                    default:
                        return NETWORK_ERROR;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e001      	b.n	8000e00 <Network_SendBinary+0x84>
                }
            }
            
        default:
            return NETWORK_ERROR;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000023c 	.word	0x2000023c
 8000e0c:	2000023d 	.word	0x2000023d

08000e10 <Network_IsConnected>:

bool Network_IsConnected(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    if (g_backend == NETWORK_BACKEND_SD_CARD) {
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <Network_IsConnected+0x34>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d10f      	bne.n	8000e3c <Network_IsConnected+0x2c>
        return g_connected && SDStorage_IsReady();
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <Network_IsConnected+0x38>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <Network_IsConnected+0x22>
 8000e24:	f000 fa1a 	bl	800125c <SDStorage_IsReady>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <Network_IsConnected+0x22>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <Network_IsConnected+0x24>
 8000e32:	2300      	movs	r3, #0
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	e001      	b.n	8000e40 <Network_IsConnected+0x30>
    }
    return g_connected;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	@ (8000e48 <Network_IsConnected+0x38>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000023d 	.word	0x2000023d
 8000e48:	2000023c 	.word	0x2000023c

08000e4c <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000e5a:	4925      	ldr	r1, [pc, #148]	@ (8000ef0 <is_response_ok+0xa4>)
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f003 fba7 	bl	80045b0 <LOGGER_SendFormatted>
        return false;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e03f      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4922      	ldr	r1, [pc, #136]	@ (8000ef4 <is_response_ok+0xa8>)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f003 fba0 	bl	80045b0 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000e70:	4921      	ldr	r1, [pc, #132]	@ (8000ef8 <is_response_ok+0xac>)
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff f9cc 	bl	8000210 <strcmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d105      	bne.n	8000e8a <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000e7e:	491f      	ldr	r1, [pc, #124]	@ (8000efc <is_response_ok+0xb0>)
 8000e80:	2000      	movs	r0, #0
 8000e82:	f003 fb95 	bl	80045b0 <LOGGER_SendFormatted>
        return true;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e02d      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000e8a:	491d      	ldr	r1, [pc, #116]	@ (8000f00 <is_response_ok+0xb4>)
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff f9bf 	bl	8000210 <strcmp>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d105      	bne.n	8000ea4 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000e98:	491a      	ldr	r1, [pc, #104]	@ (8000f04 <is_response_ok+0xb8>)
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f003 fb88 	bl	80045b0 <LOGGER_SendFormatted>
        return true;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e020      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000ea4:	4918      	ldr	r1, [pc, #96]	@ (8000f08 <is_response_ok+0xbc>)
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff f9b2 	bl	8000210 <strcmp>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d105      	bne.n	8000ebe <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000eb2:	4916      	ldr	r1, [pc, #88]	@ (8000f0c <is_response_ok+0xc0>)
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f003 fb7b 	bl	80045b0 <LOGGER_SendFormatted>
        return true;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e013      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000ebe:	4914      	ldr	r1, [pc, #80]	@ (8000f10 <is_response_ok+0xc4>)
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f019 f86c 	bl	8019f9e <strstr>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4911      	ldr	r1, [pc, #68]	@ (8000f14 <is_response_ok+0xc8>)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f003 fb6d 	bl	80045b0 <LOGGER_SendFormatted>
        return true;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e005      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	490e      	ldr	r1, [pc, #56]	@ (8000f18 <is_response_ok+0xcc>)
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f003 fb66 	bl	80045b0 <LOGGER_SendFormatted>
    return false;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	0801ad24 	.word	0x0801ad24
 8000ef4:	0801ad54 	.word	0x0801ad54
 8000ef8:	0801ad84 	.word	0x0801ad84
 8000efc:	0801ad88 	.word	0x0801ad88
 8000f00:	0801adb0 	.word	0x0801adb0
 8000f04:	0801adb8 	.word	0x0801adb8
 8000f08:	0801adec 	.word	0x0801adec
 8000f0c:	0801adf0 	.word	0x0801adf0
 8000f10:	0801ae24 	.word	0x0801ae24
 8000f14:	0801ae2c 	.word	0x0801ae2c
 8000f18:	0801ae60 	.word	0x0801ae60

08000f1c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f28:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f2c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000f2e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f32:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d105      	bne.n	8000f48 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000f3c:	4934      	ldr	r1, [pc, #208]	@ (8001010 <is_join_response_ok+0xf4>)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f003 fb36 	bl	80045b0 <LOGGER_SendFormatted>
        return false;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e05e      	b.n	8001006 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000f48:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f4c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4930      	ldr	r1, [pc, #192]	@ (8001014 <is_join_response_ok+0xf8>)
 8000f54:	2000      	movs	r0, #0
 8000f56:	f003 fb2b 	bl	80045b0 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000f5a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f5e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f62:	f107 0008 	add.w	r0, r7, #8
 8000f66:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	f019 f804 	bl	8019f78 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000f70:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f74:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000f86:	e013      	b.n	8000fb0 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000f88:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b0d      	cmp	r3, #13
 8000f90:	d004      	beq.n	8000f9c <is_join_response_ok+0x80>
 8000f92:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b0a      	cmp	r3, #10
 8000f9a:	d104      	bne.n	8000fa6 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000f9c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
            break;
 8000fa4:	e009      	b.n	8000fba <is_join_response_ok+0x9e>
        }
        pos++;
 8000fa6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000faa:	3301      	adds	r3, #1
 8000fac:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000fb0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1e6      	bne.n	8000f88 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4916      	ldr	r1, [pc, #88]	@ (8001018 <is_join_response_ok+0xfc>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff f925 	bl	8000210 <strcmp>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf0c      	ite	eq
 8000fcc:	2301      	moveq	r3, #1
 8000fce:	2300      	movne	r3, #0
 8000fd0:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000fd4:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d009      	beq.n	8000ff0 <is_join_response_ok+0xd4>
        LOG_INFO("[ResponseHandler] JOIN response confirmed: %s", response);
 8000fdc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fe0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	490d      	ldr	r1, [pc, #52]	@ (800101c <is_join_response_ok+0x100>)
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f003 fae1 	bl	80045b0 <LOGGER_SendFormatted>
 8000fee:	e008      	b.n	8001002 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8000ff0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ff4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4909      	ldr	r1, [pc, #36]	@ (8001020 <is_join_response_ok+0x104>)
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f003 fad7 	bl	80045b0 <LOGGER_SendFormatted>
    }
    
    return result;
 8001002:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8001006:	4618      	mov	r0, r3
 8001008:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0801ae8c 	.word	0x0801ae8c
 8001014:	0801aec4 	.word	0x0801aec4
 8001018:	0801aef4 	.word	0x0801aef4
 800101c:	0801af00 	.word	0x0801af00
 8001020:	0801af30 	.word	0x0801af30

08001024 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d105      	bne.n	800103e <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8001032:	491e      	ldr	r1, [pc, #120]	@ (80010ac <ResponseHandler_ParseSendResponse+0x88>)
 8001034:	2000      	movs	r0, #0
 8001036:	f003 fabb 	bl	80045b0 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 800103a:	2303      	movs	r3, #3
 800103c:	e031      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	491b      	ldr	r1, [pc, #108]	@ (80010b0 <ResponseHandler_ParseSendResponse+0x8c>)
 8001042:	2000      	movs	r0, #0
 8001044:	f003 fab4 	bl	80045b0 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8001048:	491a      	ldr	r1, [pc, #104]	@ (80010b4 <ResponseHandler_ParseSendResponse+0x90>)
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f018 ffa7 	bl	8019f9e <strstr>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_INFO("[ResponseHandler] SEND response: CONFIRMED_OK");
 8001056:	4918      	ldr	r1, [pc, #96]	@ (80010b8 <ResponseHandler_ParseSendResponse+0x94>)
 8001058:	2001      	movs	r0, #1
 800105a:	f003 faa9 	bl	80045b0 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e01f      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8001062:	4916      	ldr	r1, [pc, #88]	@ (80010bc <ResponseHandler_ParseSendResponse+0x98>)
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f018 ff9a 	bl	8019f9e <strstr>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8001070:	4913      	ldr	r1, [pc, #76]	@ (80010c0 <ResponseHandler_ParseSendResponse+0x9c>)
 8001072:	2002      	movs	r0, #2
 8001074:	f003 fa9c 	bl	80045b0 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e012      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 800107c:	4911      	ldr	r1, [pc, #68]	@ (80010c4 <ResponseHandler_ParseSendResponse+0xa0>)
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff f8c6 	bl	8000210 <strcmp>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d105      	bne.n	8001096 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 800108a:	490f      	ldr	r1, [pc, #60]	@ (80010c8 <ResponseHandler_ParseSendResponse+0xa4>)
 800108c:	2002      	movs	r0, #2
 800108e:	f003 fa8f 	bl	80045b0 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8001092:	2302      	movs	r3, #2
 8001094:	e005      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	490c      	ldr	r1, [pc, #48]	@ (80010cc <ResponseHandler_ParseSendResponse+0xa8>)
 800109a:	2000      	movs	r0, #0
 800109c:	f003 fa88 	bl	80045b0 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 80010a0:	2303      	movs	r3, #3
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	0801af5c 	.word	0x0801af5c
 80010b0:	0801af90 	.word	0x0801af90
 80010b4:	0801afc0 	.word	0x0801afc0
 80010b8:	0801afd8 	.word	0x0801afd8
 80010bc:	0801b008 	.word	0x0801b008
 80010c0:	0801b024 	.word	0x0801b024
 80010c4:	0801b058 	.word	0x0801b058
 80010c8:	0801b060 	.word	0x0801b060
 80010cc:	0801b08c 	.word	0x0801b08c

080010d0 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
static uint32_t _get_current_timestamp(void);

int SDStorage_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 (즉시 마운트로 변경)
    FRESULT mount_result = f_mount(&SDFatFS, SDPath, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	491f      	ldr	r1, [pc, #124]	@ (8001158 <SDStorage_Init+0x88>)
 80010da:	4820      	ldr	r0, [pc, #128]	@ (800115c <SDStorage_Init+0x8c>)
 80010dc:	f014 fc8e 	bl	80159fc <f_mount>
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
    if (mount_result != FR_OK) {
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <SDStorage_Init+0x2c>
        LOG_ERROR("[SDStorage] f_mount failed: %d", mount_result);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	461a      	mov	r2, r3
 80010ee:	491c      	ldr	r1, [pc, #112]	@ (8001160 <SDStorage_Init+0x90>)
 80010f0:	2003      	movs	r0, #3
 80010f2:	f003 fa5d 	bl	80045b0 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e028      	b.n	800114e <SDStorage_Init+0x7e>
    }
    
    LOG_INFO("[SDStorage] f_mount successful");
 80010fc:	4919      	ldr	r1, [pc, #100]	@ (8001164 <SDStorage_Init+0x94>)
 80010fe:	2001      	movs	r0, #1
 8001100:	f003 fa56 	bl	80045b0 <LOGGER_SendFormatted>
    
    // SD 카드 상태 확인 생략 (f_getfree는 FreeRTOS 환경에서 시스템 멈춤 유발)
    // 실제 파일 작업 시에 오류로 SD 상태 확인
    LOG_INFO("[SDStorage] Skipping capacity check - will verify during file operations");
 8001104:	4918      	ldr	r1, [pc, #96]	@ (8001168 <SDStorage_Init+0x98>)
 8001106:	2001      	movs	r0, #1
 8001108:	f003 fa52 	bl	80045b0 <LOGGER_SendFormatted>
    // PC/테스트 환경: 시뮬레이션
    // 실제로는 파일 시스템이 준비되었다고 가정
#endif

    // 로그 디렉토리 생성
    LOG_INFO("[SDStorage] Creating log directory...");
 800110c:	4917      	ldr	r1, [pc, #92]	@ (800116c <SDStorage_Init+0x9c>)
 800110e:	2001      	movs	r0, #1
 8001110:	f003 fa4e 	bl	80045b0 <LOGGER_SendFormatted>
    if (_create_log_directory() != SDSTORAGE_OK) {
 8001114:	f000 f8f0 	bl	80012f8 <_create_log_directory>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <SDStorage_Init+0x5c>
        LOG_ERROR("[SDStorage] Failed to create log directory");
 800111e:	4914      	ldr	r1, [pc, #80]	@ (8001170 <SDStorage_Init+0xa0>)
 8001120:	2003      	movs	r0, #3
 8001122:	f003 fa45 	bl	80045b0 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e010      	b.n	800114e <SDStorage_Init+0x7e>
    }
    
    g_sd_ready = true;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <SDStorage_Init+0xa4>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <SDStorage_Init+0xa8>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 8001138:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800113c:	2100      	movs	r1, #0
 800113e:	480f      	ldr	r0, [pc, #60]	@ (800117c <SDStorage_Init+0xac>)
 8001140:	f018 ff12 	bl	8019f68 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 8001144:	490e      	ldr	r1, [pc, #56]	@ (8001180 <SDStorage_Init+0xb0>)
 8001146:	2001      	movs	r0, #1
 8001148:	f003 fa32 	bl	80045b0 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200015a4 	.word	0x200015a4
 800115c:	200015a8 	.word	0x200015a8
 8001160:	0801b0bc 	.word	0x0801b0bc
 8001164:	0801b0dc 	.word	0x0801b0dc
 8001168:	0801b0fc 	.word	0x0801b0fc
 800116c:	0801b148 	.word	0x0801b148
 8001170:	0801b170 	.word	0x0801b170
 8001174:	2000023e 	.word	0x2000023e
 8001178:	20000340 	.word	0x20000340
 800117c:	20000240 	.word	0x20000240
 8001180:	0801b19c 	.word	0x0801b19c

08001184 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
    if (!g_sd_ready) {
 800118e:	4b2e      	ldr	r3, [pc, #184]	@ (8001248 <SDStorage_WriteLog+0xc4>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	f083 0301 	eor.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <SDStorage_WriteLog+0x1e>
        return SDSTORAGE_NOT_READY;
 800119c:	f06f 0301 	mvn.w	r3, #1
 80011a0:	e04e      	b.n	8001240 <SDStorage_WriteLog+0xbc>
    }
    
    if (data == NULL || size == 0) {
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <SDStorage_WriteLog+0x2a>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_INVALID_PARAM;
 80011ae:	f06f 0304 	mvn.w	r3, #4
 80011b2:	e045      	b.n	8001240 <SDStorage_WriteLog+0xbc>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <SDStorage_WriteLog+0xc8>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <SDStorage_WriteLog+0x46>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <SDStorage_WriteLog+0xcc>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 80011c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80011c8:	d907      	bls.n	80011da <SDStorage_WriteLog+0x56>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 80011ca:	f000 f853 	bl	8001274 <SDStorage_CreateNewLogFile>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <SDStorage_WriteLog+0x56>
            return SDSTORAGE_FILE_ERROR;
 80011d4:	f06f 0302 	mvn.w	r3, #2
 80011d8:	e032      	b.n	8001240 <SDStorage_WriteLog+0xbc>
        }
    }

#ifdef STM32F746xx
    // STM32 환경: FatFs를 사용한 파일 쓰기
    if (!g_file_open) {
 80011da:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <SDStorage_WriteLog+0xd0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	f083 0301 	eor.w	r3, r3, #1
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00d      	beq.n	8001204 <SDStorage_WriteLog+0x80>
        if (f_open(&g_log_file, g_current_log_file, FA_WRITE | FA_OPEN_APPEND) != FR_OK) {
 80011e8:	2232      	movs	r2, #50	@ 0x32
 80011ea:	4918      	ldr	r1, [pc, #96]	@ (800124c <SDStorage_WriteLog+0xc8>)
 80011ec:	481a      	ldr	r0, [pc, #104]	@ (8001258 <SDStorage_WriteLog+0xd4>)
 80011ee:	f014 fc69 	bl	8015ac4 <f_open>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <SDStorage_WriteLog+0x7a>
            return SDSTORAGE_FILE_ERROR;
 80011f8:	f06f 0302 	mvn.w	r3, #2
 80011fc:	e020      	b.n	8001240 <SDStorage_WriteLog+0xbc>
        }
        g_file_open = true;
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <SDStorage_WriteLog+0xd0>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
    }
    
    UINT bytes_written;
    if (f_write(&g_log_file, data, size, &bytes_written) != FR_OK) {
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4812      	ldr	r0, [pc, #72]	@ (8001258 <SDStorage_WriteLog+0xd4>)
 800120e:	f014 fe1a 	bl	8015e46 <f_write>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <SDStorage_WriteLog+0x9a>
        return SDSTORAGE_FILE_ERROR;
 8001218:	f06f 0302 	mvn.w	r3, #2
 800121c:	e010      	b.n	8001240 <SDStorage_WriteLog+0xbc>
    }
    
    if (bytes_written != size) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d002      	beq.n	800122c <SDStorage_WriteLog+0xa8>
        return SDSTORAGE_DISK_FULL;
 8001226:	f06f 0303 	mvn.w	r3, #3
 800122a:	e009      	b.n	8001240 <SDStorage_WriteLog+0xbc>
    }
    
    // 즉시 플러시하여 데이터 안정성 확보
    f_sync(&g_log_file);
 800122c:	480a      	ldr	r0, [pc, #40]	@ (8001258 <SDStorage_WriteLog+0xd4>)
 800122e:	f014 ffae 	bl	801618e <f_sync>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 8001232:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <SDStorage_WriteLog+0xcc>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	4413      	add	r3, r2
 800123a:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <SDStorage_WriteLog+0xcc>)
 800123c:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000023e 	.word	0x2000023e
 800124c:	20000240 	.word	0x20000240
 8001250:	20000340 	.word	0x20000340
 8001254:	20000574 	.word	0x20000574
 8001258:	20000344 	.word	0x20000344

0800125c <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
    return g_sd_ready;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <SDStorage_IsReady+0x14>)
 8001262:	781b      	ldrb	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2000023e 	.word	0x2000023e

08001274 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <SDStorage_CreateNewLogFile+0x70>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	f083 0301 	eor.w	r3, r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <SDStorage_CreateNewLogFile+0x18>
        return SDSTORAGE_NOT_READY;
 8001286:	f06f 0301 	mvn.w	r3, #1
 800128a:	e029      	b.n	80012e0 <SDStorage_CreateNewLogFile+0x6c>
    }
    
    // 이전 파일이 열려있다면 닫기
#ifdef STM32F746xx
    if (g_file_open) {
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <SDStorage_CreateNewLogFile+0x74>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d005      	beq.n	80012a0 <SDStorage_CreateNewLogFile+0x2c>
        f_close(&g_log_file);
 8001294:	4815      	ldr	r0, [pc, #84]	@ (80012ec <SDStorage_CreateNewLogFile+0x78>)
 8001296:	f015 f803 	bl	80162a0 <f_close>
        g_file_open = false;
 800129a:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <SDStorage_CreateNewLogFile+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
        g_log_file = NULL;
    }
#endif
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 80012a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012a4:	4812      	ldr	r0, [pc, #72]	@ (80012f0 <SDStorage_CreateNewLogFile+0x7c>)
 80012a6:	f000 f831 	bl	800130c <_generate_log_filename>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <SDStorage_CreateNewLogFile+0x42>
        return SDSTORAGE_ERROR;
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
 80012b4:	e014      	b.n	80012e0 <SDStorage_CreateNewLogFile+0x6c>
    }
    
    // 파일 생성 확인
#ifdef STM32F746xx
    if (f_open(&g_log_file, g_current_log_file, FA_CREATE_NEW | FA_WRITE) != FR_OK) {
 80012b6:	2206      	movs	r2, #6
 80012b8:	490d      	ldr	r1, [pc, #52]	@ (80012f0 <SDStorage_CreateNewLogFile+0x7c>)
 80012ba:	480c      	ldr	r0, [pc, #48]	@ (80012ec <SDStorage_CreateNewLogFile+0x78>)
 80012bc:	f014 fc02 	bl	8015ac4 <f_open>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <SDStorage_CreateNewLogFile+0x58>
        return SDSTORAGE_FILE_ERROR;
 80012c6:	f06f 0302 	mvn.w	r3, #2
 80012ca:	e009      	b.n	80012e0 <SDStorage_CreateNewLogFile+0x6c>
    }
    f_close(&g_log_file);
 80012cc:	4807      	ldr	r0, [pc, #28]	@ (80012ec <SDStorage_CreateNewLogFile+0x78>)
 80012ce:	f014 ffe7 	bl	80162a0 <f_close>
    g_file_open = false;
 80012d2:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <SDStorage_CreateNewLogFile+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    // 실제 파일 생성 없이 성공으로 처리
#endif
    
    g_current_log_size = 0;
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <SDStorage_CreateNewLogFile+0x80>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000023e 	.word	0x2000023e
 80012e8:	20000574 	.word	0x20000574
 80012ec:	20000344 	.word	0x20000344
 80012f0:	20000240 	.word	0x20000240
 80012f4:	20000340 	.word	0x20000340

080012f8 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // STM32: FatFs 디렉토리 생성
    f_mkdir(SDSTORAGE_LOG_DIR);  // 이미 존재해도 에러 무시
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <_create_log_directory+0x10>)
 80012fe:	f014 fffe 	bl	80162fe <f_mkdir>
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    // 실제로는 디렉토리 생성 시뮬레이션
#endif
    return SDSTORAGE_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	bd80      	pop	{r7, pc}
 8001308:	0801b1d0 	.word	0x0801b1d0

0800130c <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	b095      	sub	sp, #84	@ 0x54
 8001310:	af08      	add	r7, sp, #32
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
    uint32_t timestamp = _get_current_timestamp();
 8001316:	f000 f86f 	bl	80013f8 <_get_current_timestamp>
 800131a:	6278      	str	r0, [r7, #36]	@ 0x24
    
    // YYYYMMDD_HHMMSS 형식으로 타임스탬프 생성
    uint16_t year = 2025;   // 기본값
 800131c:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 8001320:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t month = 1, day = 1, hour = 0, minute = 0, second = 0;
 8001322:	2301      	movs	r3, #1
 8001324:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001328:	2301      	movs	r3, #1
 800132a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800132e:	2300      	movs	r3, #0
 8001330:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001334:	2300      	movs	r3, #0
 8001336:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800133a:	2300      	movs	r3, #0
 800133c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
#ifdef STM32F746xx
    // STM32: RTC에서 실제 시간 읽기
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2200      	movs	r2, #0
 8001346:	4619      	mov	r1, r3
 8001348:	4826      	ldr	r0, [pc, #152]	@ (80013e4 <_generate_log_filename+0xd8>)
 800134a:	f00a f8ef 	bl	800b52c <HAL_RTC_GetTime>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d11c      	bne.n	800138e <_generate_log_filename+0x82>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK) {
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	2200      	movs	r2, #0
 800135a:	4619      	mov	r1, r3
 800135c:	4821      	ldr	r0, [pc, #132]	@ (80013e4 <_generate_log_filename+0xd8>)
 800135e:	f00a f9c7 	bl	800b6f0 <HAL_RTC_GetDate>
 8001362:	4603      	mov	r3, r0
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 8001364:	2b00      	cmp	r3, #0
 8001366:	d112      	bne.n	800138e <_generate_log_filename+0x82>
        year = 2000 + sDate.Year;
 8001368:	7afb      	ldrb	r3, [r7, #11]
 800136a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800136e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        month = sDate.Month;
 8001370:	7a7b      	ldrb	r3, [r7, #9]
 8001372:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        day = sDate.Date;
 8001376:	7abb      	ldrb	r3, [r7, #10]
 8001378:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        hour = sTime.Hours;
 800137c:	7b3b      	ldrb	r3, [r7, #12]
 800137e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        minute = sTime.Minutes;
 8001382:	7b7b      	ldrb	r3, [r7, #13]
 8001384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        second = sTime.Seconds;
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    hour = 10;
    minute = 30;
    second = timestamp % 60;  // 타임스탬프 기반 변화
#endif
    
    int result = snprintf(filename, max_len, 
 800138e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001390:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001394:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001398:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800139c:	f897 402a 	ldrb.w	r4, [r7, #42]	@ 0x2a
 80013a0:	f897 5029 	ldrb.w	r5, [r7, #41]	@ 0x29
 80013a4:	4e10      	ldr	r6, [pc, #64]	@ (80013e8 <_generate_log_filename+0xdc>)
 80013a6:	9607      	str	r6, [sp, #28]
 80013a8:	9506      	str	r5, [sp, #24]
 80013aa:	9405      	str	r4, [sp, #20]
 80013ac:	9004      	str	r0, [sp, #16]
 80013ae:	9103      	str	r1, [sp, #12]
 80013b0:	9202      	str	r2, [sp, #8]
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <_generate_log_filename+0xe0>)
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <_generate_log_filename+0xe4>)
 80013ba:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <_generate_log_filename+0xe8>)
 80013bc:	6839      	ldr	r1, [r7, #0]
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f018 fd3e 	bl	8019e40 <sniprintf>
 80013c4:	6238      	str	r0, [r7, #32]
                         SDSTORAGE_LOG_DIR,
                         SDSTORAGE_LOG_PREFIX,
                         year, month, day, hour, minute, second,
                         SDSTORAGE_LOG_EXTENSION);
    
    if (result < 0 || (size_t)result >= max_len) {
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db03      	blt.n	80013d4 <_generate_log_filename+0xc8>
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d802      	bhi.n	80013da <_generate_log_filename+0xce>
        return SDSTORAGE_ERROR;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	e000      	b.n	80013dc <_generate_log_filename+0xd0>
    }
    
    return SDSTORAGE_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3734      	adds	r7, #52	@ 0x34
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e4:	20000b50 	.word	0x20000b50
 80013e8:	0801b200 	.word	0x0801b200
 80013ec:	0801b208 	.word	0x0801b208
 80013f0:	0801b1d0 	.word	0x0801b1d0
 80013f4:	0801b1dc 	.word	0x0801b1dc

080013f8 <_get_current_timestamp>:

static uint32_t _get_current_timestamp(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    return HAL_GetTick();
 80013fc:	f003 fe68 	bl	80050d0 <HAL_GetTick>
 8001400:	4603      	mov	r3, r0
#else
    return (uint32_t)time(NULL);
#endif
 8001402:	4618      	mov	r0, r3
 8001404:	bd80      	pop	{r7, pc}

08001406 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <vApplicationGetIdleTaskMemory+0x2c>)
 8001448:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	4a06      	ldr	r2, [pc, #24]	@ (8001468 <vApplicationGetIdleTaskMemory+0x30>)
 800144e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2280      	movs	r2, #128	@ 0x80
 8001454:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000578 	.word	0x20000578
 8001468:	200005d0 	.word	0x200005d0

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b5b0      	push	{r4, r5, r7, lr}
 800146e:	b08e      	sub	sp, #56	@ 0x38
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 8001472:	4b78      	ldr	r3, [pc, #480]	@ (8001654 <main+0x1e8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a76      	ldr	r2, [pc, #472]	@ (8001654 <main+0x1e8>)
 800147a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f003 fe07 	bl	800508e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f914 	bl	80016ac <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001484:	f000 f984 	bl	8001790 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001488:	f001 f946 	bl	8002718 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 800148c:	f001 fe02 	bl	8003094 <MX_DMA_Init>
//  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
  MX_ADC3_Init();
 8001490:	f000 f9b0 	bl	80017f4 <MX_ADC3_Init>
  MX_CRC_Init();
 8001494:	f000 fa00 	bl	8001898 <MX_CRC_Init>
  MX_DCMI_Init();
 8001498:	f000 fa20 	bl	80018dc <MX_DCMI_Init>
  MX_DMA2D_Init();
 800149c:	f000 fa52 	bl	8001944 <MX_DMA2D_Init>
  MX_ETH_Init();
 80014a0:	f000 fa82 	bl	80019a8 <MX_ETH_Init>
  MX_FMC_Init();
 80014a4:	f001 f8e8 	bl	8002678 <MX_FMC_Init>
  MX_I2C1_Init();
 80014a8:	f000 facc 	bl	8001a44 <MX_I2C1_Init>
  MX_I2C3_Init();
 80014ac:	f000 fb0a 	bl	8001ac4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80014b0:	f000 fb48 	bl	8001b44 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80014b4:	f000 fbc8 	bl	8001c48 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80014b8:	f000 fbf2 	bl	8001ca0 <MX_RTC_Init>
  MX_SAI2_Init();
 80014bc:	f000 fc94 	bl	8001de8 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80014c0:	f000 fd3a 	bl	8001f38 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80014c4:	f000 fd5e 	bl	8001f84 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80014c8:	f000 fd8c 	bl	8001fe4 <MX_SPI2_Init>
  MX_TIM1_Init();
 80014cc:	f000 fdc8 	bl	8002060 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014d0:	f000 fe72 	bl	80021b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014d4:	f000 fee6 	bl	80022a4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80014d8:	f000 ff5c 	bl	8002394 <MX_TIM5_Init>
  MX_TIM8_Init();
 80014dc:	f000 ffd2 	bl	8002484 <MX_TIM8_Init>
  MX_TIM12_Init();
 80014e0:	f001 f824 	bl	800252c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80014e4:	f001 f868 	bl	80025b8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80014e8:	f001 f896 	bl	8002618 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 80014ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001658 <main+0x1ec>)
 80014ee:	4a5b      	ldr	r2, [pc, #364]	@ (800165c <main+0x1f0>)
 80014f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80014f2:	4b5a      	ldr	r3, [pc, #360]	@ (800165c <main+0x1f0>)
 80014f4:	4a58      	ldr	r2, [pc, #352]	@ (8001658 <main+0x1ec>)
 80014f6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 80014f8:	4b57      	ldr	r3, [pc, #348]	@ (8001658 <main+0x1ec>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b56      	ldr	r3, [pc, #344]	@ (8001658 <main+0x1ec>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0210 	orr.w	r2, r2, #16
 8001506:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8001508:	f010 f91c 	bl	8011744 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 800150c:	2100      	movs	r1, #0
 800150e:	4854      	ldr	r0, [pc, #336]	@ (8001660 <main+0x1f4>)
 8001510:	f002 fff2 	bl	80044f8 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8001514:	4b4f      	ldr	r3, [pc, #316]	@ (8001654 <main+0x1e8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4952      	ldr	r1, [pc, #328]	@ (8001664 <main+0x1f8>)
 800151c:	2001      	movs	r0, #1
 800151e:	f003 f847 	bl	80045b0 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 8001522:	4b51      	ldr	r3, [pc, #324]	@ (8001668 <main+0x1fc>)
 8001524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <main+0xca>
 800152e:	494f      	ldr	r1, [pc, #316]	@ (800166c <main+0x200>)
 8001530:	2002      	movs	r0, #2
 8001532:	f003 f83d 	bl	80045b0 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 8001536:	4b4c      	ldr	r3, [pc, #304]	@ (8001668 <main+0x1fc>)
 8001538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800153a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <main+0xde>
 8001542:	494b      	ldr	r1, [pc, #300]	@ (8001670 <main+0x204>)
 8001544:	2002      	movs	r0, #2
 8001546:	f003 f833 	bl	80045b0 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 800154a:	4b47      	ldr	r3, [pc, #284]	@ (8001668 <main+0x1fc>)
 800154c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800154e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <main+0xf2>
 8001556:	4947      	ldr	r1, [pc, #284]	@ (8001674 <main+0x208>)
 8001558:	2002      	movs	r0, #2
 800155a:	f003 f829 	bl	80045b0 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 800155e:	4b42      	ldr	r3, [pc, #264]	@ (8001668 <main+0x1fc>)
 8001560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <main+0x106>
 800156a:	4943      	ldr	r1, [pc, #268]	@ (8001678 <main+0x20c>)
 800156c:	2002      	movs	r0, #2
 800156e:	f003 f81f 	bl	80045b0 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 8001572:	4b3d      	ldr	r3, [pc, #244]	@ (8001668 <main+0x1fc>)
 8001574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001576:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <main+0x11a>
 800157e:	493f      	ldr	r1, [pc, #252]	@ (800167c <main+0x210>)
 8001580:	2002      	movs	r0, #2
 8001582:	f003 f815 	bl	80045b0 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 8001586:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <main+0x1fc>)
 8001588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800158a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <main+0x12e>
 8001592:	493b      	ldr	r1, [pc, #236]	@ (8001680 <main+0x214>)
 8001594:	2002      	movs	r0, #2
 8001596:	f003 f80b 	bl	80045b0 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 800159a:	4b33      	ldr	r3, [pc, #204]	@ (8001668 <main+0x1fc>)
 800159c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800159e:	2b00      	cmp	r3, #0
 80015a0:	da03      	bge.n	80015aa <main+0x13e>
 80015a2:	4938      	ldr	r1, [pc, #224]	@ (8001684 <main+0x218>)
 80015a4:	2002      	movs	r0, #2
 80015a6:	f003 f803 	bl	80045b0 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 80015aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001668 <main+0x1fc>)
 80015ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001668 <main+0x1fc>)
 80015b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015b4:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 새로운 초기화 순서: SD 먼저, 그 다음 UART =====
  
  // 1. SD 카드 초기화 (가장 먼저 - 블로킹 방지를 위해)
  LOG_INFO("🔄 Initializing SD card storage (priority initialization)...");
 80015b6:	4934      	ldr	r1, [pc, #208]	@ (8001688 <main+0x21c>)
 80015b8:	2001      	movs	r0, #1
 80015ba:	f002 fff9 	bl	80045b0 <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 80015be:	f7ff fd87 	bl	80010d0 <SDStorage_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4a31      	ldr	r2, [pc, #196]	@ (800168c <main+0x220>)
 80015c6:	6013      	str	r3, [r2, #0]
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 80015c8:	4b30      	ldr	r3, [pc, #192]	@ (800168c <main+0x220>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d104      	bne.n	80015da <main+0x16e>
    LOG_INFO("✅ SD card initialized successfully - ready for dual logging");
 80015d0:	492f      	ldr	r1, [pc, #188]	@ (8001690 <main+0x224>)
 80015d2:	2001      	movs	r0, #1
 80015d4:	f002 ffec 	bl	80045b0 <LOGGER_SendFormatted>
 80015d8:	e006      	b.n	80015e8 <main+0x17c>
  } else {
    LOG_WARN("⚠️ SD card init failed (code: %d) - terminal logging only", g_sd_initialization_result);
 80015da:	4b2c      	ldr	r3, [pc, #176]	@ (800168c <main+0x220>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	492c      	ldr	r1, [pc, #176]	@ (8001694 <main+0x228>)
 80015e2:	2002      	movs	r0, #2
 80015e4:	f002 ffe4 	bl	80045b0 <LOGGER_SendFormatted>
  }
  
  // 2. UART6 DMA 초기화 (SD 초기화 완료 후)
  LOG_INFO("🔄 Initializing UART DMA after SD preparation...");
 80015e8:	492b      	ldr	r1, [pc, #172]	@ (8001698 <main+0x22c>)
 80015ea:	2001      	movs	r0, #1
 80015ec:	f002 ffe0 	bl	80045b0 <LOGGER_SendFormatted>
  MX_USART6_DMA_Init();
 80015f0:	f001 fd76 	bl	80030e0 <MX_USART6_DMA_Init>
  
  // IDLE 인터럽트 활성화 (메시지 끝 감지용)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <main+0x1ec>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <main+0x1ec>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0210 	orr.w	r2, r2, #16
 8001602:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001604:	4b25      	ldr	r3, [pc, #148]	@ (800169c <main+0x230>)
 8001606:	f107 041c 	add.w	r4, r7, #28
 800160a:	461d      	mov	r5, r3
 800160c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f015 f870 	bl	8016704 <osThreadCreate>
 8001624:	4603      	mov	r3, r0
 8001626:	4a1e      	ldr	r2, [pc, #120]	@ (80016a0 <main+0x234>)
 8001628:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 생성 - 백그라운드에서 계속 실행 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 2048);
 800162a:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <main+0x238>)
 800162c:	463c      	mov	r4, r7
 800162e:	461d      	mov	r5, r3
 8001630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001634:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001638:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 800163c:	463b      	mov	r3, r7
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f015 f85f 	bl	8016704 <osThreadCreate>
 8001646:	4603      	mov	r3, r0
 8001648:	4a17      	ldr	r2, [pc, #92]	@ (80016a8 <main+0x23c>)
 800164a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800164c:	f015 f837 	bl	80166be <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <main+0x1e4>
 8001654:	20001328 	.word	0x20001328
 8001658:	20000ffc 	.word	0x20000ffc
 800165c:	200012c8 	.word	0x200012c8
 8001660:	0801b214 	.word	0x0801b214
 8001664:	0801b21c 	.word	0x0801b21c
 8001668:	40023800 	.word	0x40023800
 800166c:	0801b240 	.word	0x0801b240
 8001670:	0801b258 	.word	0x0801b258
 8001674:	0801b270 	.word	0x0801b270
 8001678:	0801b288 	.word	0x0801b288
 800167c:	0801b298 	.word	0x0801b298
 8001680:	0801b2b0 	.word	0x0801b2b0
 8001684:	0801b2d0 	.word	0x0801b2d0
 8001688:	0801b2e8 	.word	0x0801b2e8
 800168c:	20000014 	.word	0x20000014
 8001690:	0801b328 	.word	0x0801b328
 8001694:	0801b368 	.word	0x0801b368
 8001698:	0801b3a8 	.word	0x0801b3a8
 800169c:	0801b3e8 	.word	0x0801b3e8
 80016a0:	200010b8 	.word	0x200010b8
 80016a4:	0801b410 	.word	0x0801b410
 80016a8:	200010bc 	.word	0x200010bc

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	@ 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	2230      	movs	r2, #48	@ 0x30
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f018 fc54 	bl	8019f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016d0:	f008 fb02 	bl	8009cd8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <SystemClock_Config+0xdc>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <SystemClock_Config+0xdc>)
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <SystemClock_Config+0xdc>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ec:	4b27      	ldr	r3, [pc, #156]	@ (800178c <SystemClock_Config+0xe0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a26      	ldr	r2, [pc, #152]	@ (800178c <SystemClock_Config+0xe0>)
 80016f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b24      	ldr	r3, [pc, #144]	@ (800178c <SystemClock_Config+0xe0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001704:	2309      	movs	r3, #9
 8001706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001708:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800170e:	2301      	movs	r3, #1
 8001710:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001712:	2302      	movs	r3, #2
 8001714:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001716:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800171a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800171c:	2319      	movs	r3, #25
 800171e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001720:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001724:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001726:	2302      	movs	r3, #2
 8001728:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800172a:	2309      	movs	r3, #9
 800172c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	4618      	mov	r0, r3
 8001734:	f008 fbf2 	bl	8009f1c <HAL_RCC_OscConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800173e:	f001 fca3 	bl	8003088 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001742:	f008 fad9 	bl	8009cf8 <HAL_PWREx_EnableOverDrive>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800174c:	f001 fc9c 	bl	8003088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001750:	230f      	movs	r3, #15
 8001752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001754:	2302      	movs	r3, #2
 8001756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800175c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2106      	movs	r1, #6
 800176e:	4618      	mov	r0, r3
 8001770:	f008 fe78 	bl	800a464 <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800177a:	f001 fc85 	bl	8003088 <Error_Handler>
  }
}
 800177e:	bf00      	nop
 8001780:	3750      	adds	r7, #80	@ 0x50
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000

08001790 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0a2      	sub	sp, #136	@ 0x88
 8001794:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2284      	movs	r2, #132	@ 0x84
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f018 fbe3 	bl	8019f68 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80017a2:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <PeriphCommonClock_Config+0x60>)
 80017a4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80017a6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80017ac:	2305      	movs	r3, #5
 80017ae:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80017b4:	2303      	movs	r3, #3
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80017bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017c0:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80017c2:	2300      	movs	r3, #0
 80017c4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80017c6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80017ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4618      	mov	r0, r3
 80017d8:	f009 f85c 	bl	800a894 <HAL_RCCEx_PeriphCLKConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80017e2:	f001 fc51 	bl	8003088 <Error_Handler>
  }
}
 80017e6:	bf00      	nop
 80017e8:	3788      	adds	r7, #136	@ 0x88
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	00b00008 	.word	0x00b00008

080017f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001806:	4b21      	ldr	r3, [pc, #132]	@ (800188c <MX_ADC3_Init+0x98>)
 8001808:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <MX_ADC3_Init+0x9c>)
 800180a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800180c:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <MX_ADC3_Init+0x98>)
 800180e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001812:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001814:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <MX_ADC3_Init+0x98>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800181a:	4b1c      	ldr	r3, [pc, #112]	@ (800188c <MX_ADC3_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001820:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <MX_ADC3_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001826:	4b19      	ldr	r3, [pc, #100]	@ (800188c <MX_ADC3_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800182e:	4b17      	ldr	r3, [pc, #92]	@ (800188c <MX_ADC3_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <MX_ADC3_Init+0x98>)
 8001836:	4a17      	ldr	r2, [pc, #92]	@ (8001894 <MX_ADC3_Init+0xa0>)
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <MX_ADC3_Init+0x98>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <MX_ADC3_Init+0x98>)
 8001842:	2201      	movs	r2, #1
 8001844:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <MX_ADC3_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <MX_ADC3_Init+0x98>)
 8001850:	2201      	movs	r2, #1
 8001852:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <MX_ADC3_Init+0x98>)
 8001856:	f003 fc6b 	bl	8005130 <HAL_ADC_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001860:	f001 fc12 	bl	8003088 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001864:	2304      	movs	r3, #4
 8001866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001868:	2301      	movs	r3, #1
 800186a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	@ (800188c <MX_ADC3_Init+0x98>)
 8001876:	f003 fc9f 	bl	80051b8 <HAL_ADC_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001880:	f001 fc02 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000808 	.word	0x20000808
 8001890:	40012200 	.word	0x40012200
 8001894:	0f000001 	.word	0x0f000001

08001898 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800189c:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <MX_CRC_Init+0x3c>)
 800189e:	4a0e      	ldr	r2, [pc, #56]	@ (80018d8 <MX_CRC_Init+0x40>)
 80018a0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MX_CRC_Init+0x3c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <MX_CRC_Init+0x3c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <MX_CRC_Init+0x3c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <MX_CRC_Init+0x3c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <MX_CRC_Init+0x3c>)
 80018bc:	2201      	movs	r2, #1
 80018be:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <MX_CRC_Init+0x3c>)
 80018c2:	f003 ffaf 	bl	8005824 <HAL_CRC_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80018cc:	f001 fbdc 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000850 	.word	0x20000850
 80018d8:	40023000 	.word	0x40023000

080018dc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80018e0:	4b16      	ldr	r3, [pc, #88]	@ (800193c <MX_DCMI_Init+0x60>)
 80018e2:	4a17      	ldr	r2, [pc, #92]	@ (8001940 <MX_DCMI_Init+0x64>)
 80018e4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <MX_DCMI_Init+0x60>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <MX_DCMI_Init+0x60>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80018f2:	4b12      	ldr	r3, [pc, #72]	@ (800193c <MX_DCMI_Init+0x60>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80018f8:	4b10      	ldr	r3, [pc, #64]	@ (800193c <MX_DCMI_Init+0x60>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <MX_DCMI_Init+0x60>)
 8001900:	2200      	movs	r2, #0
 8001902:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001904:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <MX_DCMI_Init+0x60>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <MX_DCMI_Init+0x60>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001910:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <MX_DCMI_Init+0x60>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <MX_DCMI_Init+0x60>)
 8001918:	2200      	movs	r2, #0
 800191a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800191c:	4b07      	ldr	r3, [pc, #28]	@ (800193c <MX_DCMI_Init+0x60>)
 800191e:	2200      	movs	r2, #0
 8001920:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <MX_DCMI_Init+0x60>)
 8001924:	2200      	movs	r2, #0
 8001926:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	@ (800193c <MX_DCMI_Init+0x60>)
 800192a:	f004 f86d 	bl	8005a08 <HAL_DCMI_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001934:	f001 fba8 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000874 	.word	0x20000874
 8001940:	50050000 	.word	0x50050000

08001944 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001948:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <MX_DMA2D_Init+0x5c>)
 800194a:	4a16      	ldr	r2, [pc, #88]	@ (80019a4 <MX_DMA2D_Init+0x60>)
 800194c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800194e:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <MX_DMA2D_Init+0x5c>)
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <MX_DMA2D_Init+0x5c>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800195a:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <MX_DMA2D_Init+0x5c>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <MX_DMA2D_Init+0x5c>)
 8001962:	2200      	movs	r2, #0
 8001964:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <MX_DMA2D_Init+0x5c>)
 8001968:	2200      	movs	r2, #0
 800196a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <MX_DMA2D_Init+0x5c>)
 800196e:	2200      	movs	r2, #0
 8001970:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <MX_DMA2D_Init+0x5c>)
 8001974:	2200      	movs	r2, #0
 8001976:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001978:	4809      	ldr	r0, [pc, #36]	@ (80019a0 <MX_DMA2D_Init+0x5c>)
 800197a:	f004 fd33 	bl	80063e4 <HAL_DMA2D_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001984:	f001 fb80 	bl	8003088 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001988:	2101      	movs	r1, #1
 800198a:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <MX_DMA2D_Init+0x5c>)
 800198c:	f004 fe84 	bl	8006698 <HAL_DMA2D_ConfigLayer>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001996:	f001 fb77 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200008c4 	.word	0x200008c4
 80019a4:	4002b000 	.word	0x4002b000

080019a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <MX_ETH_Init+0x84>)
 80019ae:	4a20      	ldr	r2, [pc, #128]	@ (8001a30 <MX_ETH_Init+0x88>)
 80019b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <MX_ETH_Init+0x8c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80019b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <MX_ETH_Init+0x8c>)
 80019ba:	2280      	movs	r2, #128	@ 0x80
 80019bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80019be:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <MX_ETH_Init+0x8c>)
 80019c0:	22e1      	movs	r2, #225	@ 0xe1
 80019c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <MX_ETH_Init+0x8c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <MX_ETH_Init+0x8c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80019d0:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <MX_ETH_Init+0x8c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <MX_ETH_Init+0x84>)
 80019d8:	4a16      	ldr	r2, [pc, #88]	@ (8001a34 <MX_ETH_Init+0x8c>)
 80019da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80019dc:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <MX_ETH_Init+0x84>)
 80019de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019e2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_ETH_Init+0x84>)
 80019e6:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <MX_ETH_Init+0x90>)
 80019e8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <MX_ETH_Init+0x84>)
 80019ec:	4a13      	ldr	r2, [pc, #76]	@ (8001a3c <MX_ETH_Init+0x94>)
 80019ee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80019f0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <MX_ETH_Init+0x84>)
 80019f2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80019f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80019f8:	480c      	ldr	r0, [pc, #48]	@ (8001a2c <MX_ETH_Init+0x84>)
 80019fa:	f004 fedf 	bl	80067bc <HAL_ETH_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001a04:	f001 fb40 	bl	8003088 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001a08:	2238      	movs	r2, #56	@ 0x38
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	480c      	ldr	r0, [pc, #48]	@ (8001a40 <MX_ETH_Init+0x98>)
 8001a0e:	f018 faab 	bl	8019f68 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	@ (8001a40 <MX_ETH_Init+0x98>)
 8001a14:	2221      	movs	r2, #33	@ 0x21
 8001a16:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001a18:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <MX_ETH_Init+0x98>)
 8001a1a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001a1e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001a20:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <MX_ETH_Init+0x98>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000904 	.word	0x20000904
 8001a30:	40028000 	.word	0x40028000
 8001a34:	2000132c 	.word	0x2000132c
 8001a38:	20000180 	.word	0x20000180
 8001a3c:	200000e0 	.word	0x200000e0
 8001a40:	200007d0 	.word	0x200007d0

08001a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <MX_I2C1_Init+0x74>)
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001abc <MX_I2C1_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <MX_I2C1_Init+0x74>)
 8001a50:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac0 <MX_I2C1_Init+0x7c>)
 8001a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <MX_I2C1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <MX_I2C1_Init+0x74>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <MX_I2C1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a66:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <MX_I2C1_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <MX_I2C1_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a72:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <MX_I2C1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <MX_I2C1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a7e:	480e      	ldr	r0, [pc, #56]	@ (8001ab8 <MX_I2C1_Init+0x74>)
 8001a80:	f007 fce4 	bl	800944c <HAL_I2C_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a8a:	f001 fafd 	bl	8003088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4809      	ldr	r0, [pc, #36]	@ (8001ab8 <MX_I2C1_Init+0x74>)
 8001a92:	f007 fd77 	bl	8009584 <HAL_I2CEx_ConfigAnalogFilter>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a9c:	f001 faf4 	bl	8003088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <MX_I2C1_Init+0x74>)
 8001aa4:	f007 fdb9 	bl	800961a <HAL_I2CEx_ConfigDigitalFilter>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001aae:	f001 faeb 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200009b4 	.word	0x200009b4
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	00c0eaff 	.word	0x00c0eaff

08001ac4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <MX_I2C3_Init+0x74>)
 8001aca:	4a1c      	ldr	r2, [pc, #112]	@ (8001b3c <MX_I2C3_Init+0x78>)
 8001acc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <MX_I2C3_Init+0x74>)
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b40 <MX_I2C3_Init+0x7c>)
 8001ad2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <MX_I2C3_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ada:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <MX_I2C3_Init+0x74>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae0:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <MX_I2C3_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001ae6:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <MX_I2C3_Init+0x74>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <MX_I2C3_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <MX_I2C3_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <MX_I2C3_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001afe:	480e      	ldr	r0, [pc, #56]	@ (8001b38 <MX_I2C3_Init+0x74>)
 8001b00:	f007 fca4 	bl	800944c <HAL_I2C_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001b0a:	f001 fabd 	bl	8003088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4809      	ldr	r0, [pc, #36]	@ (8001b38 <MX_I2C3_Init+0x74>)
 8001b12:	f007 fd37 	bl	8009584 <HAL_I2CEx_ConfigAnalogFilter>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001b1c:	f001 fab4 	bl	8003088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b20:	2100      	movs	r1, #0
 8001b22:	4805      	ldr	r0, [pc, #20]	@ (8001b38 <MX_I2C3_Init+0x74>)
 8001b24:	f007 fd79 	bl	800961a <HAL_I2CEx_ConfigDigitalFilter>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b2e:	f001 faab 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000a08 	.word	0x20000a08
 8001b3c:	40005c00 	.word	0x40005c00
 8001b40:	00c0eaff 	.word	0x00c0eaff

08001b44 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	@ 0x38
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2234      	movs	r2, #52	@ 0x34
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f018 fa09 	bl	8019f68 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b56:	4b3a      	ldr	r3, [pc, #232]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001b58:	4a3a      	ldr	r2, [pc, #232]	@ (8001c44 <MX_LTDC_Init+0x100>)
 8001b5a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b5c:	4b38      	ldr	r3, [pc, #224]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b62:	4b37      	ldr	r3, [pc, #220]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b68:	4b35      	ldr	r3, [pc, #212]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b6e:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001b74:	4b32      	ldr	r3, [pc, #200]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001b76:	2228      	movs	r2, #40	@ 0x28
 8001b78:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001b7a:	4b31      	ldr	r3, [pc, #196]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001b7c:	2209      	movs	r2, #9
 8001b7e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001b80:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001b82:	2235      	movs	r2, #53	@ 0x35
 8001b84:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001b86:	4b2e      	ldr	r3, [pc, #184]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001b88:	220b      	movs	r2, #11
 8001b8a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001b8e:	f240 2215 	movw	r2, #533	@ 0x215
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001b94:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001b96:	f240 121b 	movw	r2, #283	@ 0x11b
 8001b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001b9c:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001b9e:	f240 2235 	movw	r2, #565	@ 0x235
 8001ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001ba4:	4b26      	ldr	r3, [pc, #152]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001ba6:	f240 121d 	movw	r2, #285	@ 0x11d
 8001baa:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001bac:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001bbc:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001bc4:	481e      	ldr	r0, [pc, #120]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001bc6:	f007 fd74 	bl	80096b2 <HAL_LTDC_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001bd0:	f001 fa5a 	bl	8003088 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001bd8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001bdc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001be2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001be6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001be8:	2302      	movs	r3, #2
 8001bea:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001bec:	23ff      	movs	r3, #255	@ 0xff
 8001bee:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bf4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bf8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001bfe:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001c04:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001c0a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <MX_LTDC_Init+0xfc>)
 8001c2a:	f007 fea1 	bl	8009970 <HAL_LTDC_ConfigLayer>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001c34:	f001 fa28 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	3738      	adds	r7, #56	@ 0x38
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000a5c 	.word	0x20000a5c
 8001c44:	40016800 	.word	0x40016800

08001c48 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c4e:	4a13      	ldr	r2, [pc, #76]	@ (8001c9c <MX_QUADSPI_Init+0x54>)
 8001c50:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c60:	2210      	movs	r2, #16
 8001c62:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c66:	2218      	movs	r2, #24
 8001c68:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c6c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001c70:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c78:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c84:	4804      	ldr	r0, [pc, #16]	@ (8001c98 <MX_QUADSPI_Init+0x50>)
 8001c86:	f008 f887 	bl	8009d98 <HAL_QSPI_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001c90:	f001 f9fa 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000b04 	.word	0x20000b04
 8001c9c:	a0001000 	.word	0xa0001000

08001ca0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b090      	sub	sp, #64	@ 0x40
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ca6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001cba:	463b      	mov	r3, r7
 8001cbc:	2228      	movs	r2, #40	@ 0x28
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f018 f951 	bl	8019f68 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cc6:	4b46      	ldr	r3, [pc, #280]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001cc8:	4a46      	ldr	r2, [pc, #280]	@ (8001de4 <MX_RTC_Init+0x144>)
 8001cca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ccc:	4b44      	ldr	r3, [pc, #272]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cd2:	4b43      	ldr	r3, [pc, #268]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001cd4:	227f      	movs	r2, #127	@ 0x7f
 8001cd6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001cd8:	4b41      	ldr	r3, [pc, #260]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001cda:	22ff      	movs	r2, #255	@ 0xff
 8001cdc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cde:	4b40      	ldr	r3, [pc, #256]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cea:	4b3d      	ldr	r3, [pc, #244]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cf0:	483b      	ldr	r0, [pc, #236]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001cf2:	f009 faff 	bl	800b2f4 <HAL_RTC_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001cfc:	f001 f9c4 	bl	8003088 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4619      	mov	r1, r3
 8001d22:	482f      	ldr	r0, [pc, #188]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001d24:	f009 fb68 	bl	800b3f8 <HAL_RTC_SetTime>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001d2e:	f001 f9ab 	bl	8003088 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4619      	mov	r1, r3
 8001d52:	4823      	ldr	r0, [pc, #140]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001d54:	f009 fc48 	bl	800b5e8 <HAL_RTC_SetDate>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d5e:	f001 f993 	bl	8003088 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d92:	463b      	mov	r3, r7
 8001d94:	2201      	movs	r2, #1
 8001d96:	4619      	mov	r1, r3
 8001d98:	4811      	ldr	r0, [pc, #68]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001d9a:	f009 fcf9 	bl	800b790 <HAL_RTC_SetAlarm>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001da4:	f001 f970 	bl	8003088 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001dae:	463b      	mov	r3, r7
 8001db0:	2201      	movs	r2, #1
 8001db2:	4619      	mov	r1, r3
 8001db4:	480a      	ldr	r0, [pc, #40]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001db6:	f009 fceb 	bl	800b790 <HAL_RTC_SetAlarm>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001dc0:	f001 f962 	bl	8003088 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_RTC_Init+0x140>)
 8001dca:	f009 fec9 	bl	800bb60 <HAL_RTCEx_SetTimeStamp>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001dd4:	f001 f958 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3740      	adds	r7, #64	@ 0x40
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000b50 	.word	0x20000b50
 8001de4:	40002800 	.word	0x40002800

08001de8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001dec:	4b4d      	ldr	r3, [pc, #308]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001dee:	4a4e      	ldr	r2, [pc, #312]	@ (8001f28 <MX_SAI2_Init+0x140>)
 8001df0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001df2:	4b4c      	ldr	r3, [pc, #304]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001df8:	4b4a      	ldr	r3, [pc, #296]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001dfe:	4b49      	ldr	r3, [pc, #292]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e00:	2240      	movs	r2, #64	@ 0x40
 8001e02:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e04:	4b47      	ldr	r3, [pc, #284]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001e0a:	4b46      	ldr	r3, [pc, #280]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e10:	4b44      	ldr	r3, [pc, #272]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e16:	4b43      	ldr	r3, [pc, #268]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001e1c:	4b41      	ldr	r3, [pc, #260]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e22:	4b40      	ldr	r3, [pc, #256]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001e28:	4b3e      	ldr	r3, [pc, #248]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e2a:	4a40      	ldr	r2, [pc, #256]	@ (8001f2c <MX_SAI2_Init+0x144>)
 8001e2c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e34:	4b3b      	ldr	r3, [pc, #236]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e40:	4b38      	ldr	r3, [pc, #224]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001e46:	4b37      	ldr	r3, [pc, #220]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e48:	2208      	movs	r2, #8
 8001e4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001e4c:	4b35      	ldr	r3, [pc, #212]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e52:	4b34      	ldr	r3, [pc, #208]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e58:	4b32      	ldr	r3, [pc, #200]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e5e:	4b31      	ldr	r3, [pc, #196]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001e64:	4b2f      	ldr	r3, [pc, #188]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001e70:	4b2c      	ldr	r3, [pc, #176]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001e76:	4b2b      	ldr	r3, [pc, #172]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001e7c:	4829      	ldr	r0, [pc, #164]	@ (8001f24 <MX_SAI2_Init+0x13c>)
 8001e7e:	f009 fed7 	bl	800bc30 <HAL_SAI_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001e88:	f001 f8fe 	bl	8003088 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001e8c:	4b28      	ldr	r3, [pc, #160]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001e8e:	4a29      	ldr	r2, [pc, #164]	@ (8001f34 <MX_SAI2_Init+0x14c>)
 8001e90:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e92:	4b27      	ldr	r3, [pc, #156]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001e98:	4b25      	ldr	r3, [pc, #148]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001e9e:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001ea0:	2240      	movs	r2, #64	@ 0x40
 8001ea2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ea4:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ece:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001edc:	2208      	movs	r2, #8
 8001ede:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001eec:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001efe:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001f04:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001f10:	4807      	ldr	r0, [pc, #28]	@ (8001f30 <MX_SAI2_Init+0x148>)
 8001f12:	f009 fe8d 	bl	800bc30 <HAL_SAI_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001f1c:	f001 f8b4 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000b70 	.word	0x20000b70
 8001f28:	40015c04 	.word	0x40015c04
 8001f2c:	0002ee00 	.word	0x0002ee00
 8001f30:	20000bf4 	.word	0x20000bf4
 8001f34:	40015c24 	.word	0x40015c24

08001f38 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <MX_SDMMC1_SD_Init+0x44>)
 8001f3e:	4a10      	ldr	r2, [pc, #64]	@ (8001f80 <MX_SDMMC1_SD_Init+0x48>)
 8001f40:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <MX_SDMMC1_SD_Init+0x44>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <MX_SDMMC1_SD_Init+0x44>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <MX_SDMMC1_SD_Init+0x44>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <MX_SDMMC1_SD_Init+0x44>)
 8001f56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f5a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f5c:	4b07      	ldr	r3, [pc, #28]	@ (8001f7c <MX_SDMMC1_SD_Init+0x44>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <MX_SDMMC1_SD_Init+0x44>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001f68:	4804      	ldr	r0, [pc, #16]	@ (8001f7c <MX_SDMMC1_SD_Init+0x44>)
 8001f6a:	f00a f817 	bl	800bf9c <HAL_SD_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8001f74:	f001 f888 	bl	8003088 <Error_Handler>
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000c78 	.word	0x20000c78
 8001f80:	40012c00 	.word	0x40012c00

08001f84 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001f88:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <MX_SPDIFRX_Init+0x5c>)
 8001f8a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001f8e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001f90:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <MX_SPDIFRX_Init+0x5c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001f96:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <MX_SPDIFRX_Init+0x5c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <MX_SPDIFRX_Init+0x5c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <MX_SPDIFRX_Init+0x5c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <MX_SPDIFRX_Init+0x5c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <MX_SPDIFRX_Init+0x5c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <MX_SPDIFRX_Init+0x5c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <MX_SPDIFRX_Init+0x5c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <MX_SPDIFRX_Init+0x5c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <MX_SPDIFRX_Init+0x5c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	@ (8001fe0 <MX_SPDIFRX_Init+0x5c>)
 8001fce:	f00a feaf 	bl	800cd30 <HAL_SPDIFRX_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001fd8:	f001 f856 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000cfc 	.word	0x20000cfc

08001fe4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <MX_SPI2_Init+0x74>)
 8001fea:	4a1c      	ldr	r2, [pc, #112]	@ (800205c <MX_SPI2_Init+0x78>)
 8001fec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <MX_SPI2_Init+0x74>)
 8001ff0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ff4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff6:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <MX_SPI2_Init+0x74>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ffc:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <MX_SPI2_Init+0x74>)
 8001ffe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002002:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002004:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <MX_SPI2_Init+0x74>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800200a:	4b13      	ldr	r3, [pc, #76]	@ (8002058 <MX_SPI2_Init+0x74>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002010:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <MX_SPI2_Init+0x74>)
 8002012:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002016:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <MX_SPI2_Init+0x74>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800201e:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <MX_SPI2_Init+0x74>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002024:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <MX_SPI2_Init+0x74>)
 8002026:	2200      	movs	r2, #0
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800202a:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <MX_SPI2_Init+0x74>)
 800202c:	2200      	movs	r2, #0
 800202e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002030:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <MX_SPI2_Init+0x74>)
 8002032:	2207      	movs	r2, #7
 8002034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <MX_SPI2_Init+0x74>)
 8002038:	2200      	movs	r2, #0
 800203a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <MX_SPI2_Init+0x74>)
 800203e:	2208      	movs	r2, #8
 8002040:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	@ (8002058 <MX_SPI2_Init+0x74>)
 8002044:	f00a fed0 	bl	800cde8 <HAL_SPI_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800204e:	f001 f81b 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000d48 	.word	0x20000d48
 800205c:	40003800 	.word	0x40003800

08002060 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b09a      	sub	sp, #104	@ 0x68
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002066:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002080:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	615a      	str	r2, [r3, #20]
 8002092:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	222c      	movs	r2, #44	@ 0x2c
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f017 ff64 	bl	8019f68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020a0:	4b43      	ldr	r3, [pc, #268]	@ (80021b0 <MX_TIM1_Init+0x150>)
 80020a2:	4a44      	ldr	r2, [pc, #272]	@ (80021b4 <MX_TIM1_Init+0x154>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020a6:	4b42      	ldr	r3, [pc, #264]	@ (80021b0 <MX_TIM1_Init+0x150>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b40      	ldr	r3, [pc, #256]	@ (80021b0 <MX_TIM1_Init+0x150>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020b2:	4b3f      	ldr	r3, [pc, #252]	@ (80021b0 <MX_TIM1_Init+0x150>)
 80020b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ba:	4b3d      	ldr	r3, [pc, #244]	@ (80021b0 <MX_TIM1_Init+0x150>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020c0:	4b3b      	ldr	r3, [pc, #236]	@ (80021b0 <MX_TIM1_Init+0x150>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c6:	4b3a      	ldr	r3, [pc, #232]	@ (80021b0 <MX_TIM1_Init+0x150>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020cc:	4838      	ldr	r0, [pc, #224]	@ (80021b0 <MX_TIM1_Init+0x150>)
 80020ce:	f00a ff36 	bl	800cf3e <HAL_TIM_Base_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80020d8:	f000 ffd6 	bl	8003088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80020e6:	4619      	mov	r1, r3
 80020e8:	4831      	ldr	r0, [pc, #196]	@ (80021b0 <MX_TIM1_Init+0x150>)
 80020ea:	f00b fa69 	bl	800d5c0 <HAL_TIM_ConfigClockSource>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80020f4:	f000 ffc8 	bl	8003088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020f8:	482d      	ldr	r0, [pc, #180]	@ (80021b0 <MX_TIM1_Init+0x150>)
 80020fa:	f00a ffef 	bl	800d0dc <HAL_TIM_PWM_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002104:	f000 ffc0 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002114:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002118:	4619      	mov	r1, r3
 800211a:	4825      	ldr	r0, [pc, #148]	@ (80021b0 <MX_TIM1_Init+0x150>)
 800211c:	f00b fee0 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002126:	f000 ffaf 	bl	8003088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800212a:	2360      	movs	r3, #96	@ 0x60
 800212c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002132:	2300      	movs	r3, #0
 8002134:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002136:	2300      	movs	r3, #0
 8002138:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002146:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800214a:	2200      	movs	r2, #0
 800214c:	4619      	mov	r1, r3
 800214e:	4818      	ldr	r0, [pc, #96]	@ (80021b0 <MX_TIM1_Init+0x150>)
 8002150:	f00b f922 	bl	800d398 <HAL_TIM_PWM_ConfigChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800215a:	f000 ff95 	bl	8003088 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002172:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002176:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002180:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	4619      	mov	r1, r3
 8002192:	4807      	ldr	r0, [pc, #28]	@ (80021b0 <MX_TIM1_Init+0x150>)
 8002194:	f00b ff32 	bl	800dffc <HAL_TIMEx_ConfigBreakDeadTime>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800219e:	f000 ff73 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021a2:	4803      	ldr	r0, [pc, #12]	@ (80021b0 <MX_TIM1_Init+0x150>)
 80021a4:	f001 fdd8 	bl	8003d58 <HAL_TIM_MspPostInit>

}
 80021a8:	bf00      	nop
 80021aa:	3768      	adds	r7, #104	@ 0x68
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000dac 	.word	0x20000dac
 80021b4:	40010000 	.word	0x40010000

080021b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08e      	sub	sp, #56	@ 0x38
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d8:	463b      	mov	r3, r7
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	611a      	str	r2, [r3, #16]
 80021e6:	615a      	str	r2, [r3, #20]
 80021e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021ea:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <MX_TIM2_Init+0xe8>)
 80021ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021f2:	4b2b      	ldr	r3, [pc, #172]	@ (80022a0 <MX_TIM2_Init+0xe8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f8:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <MX_TIM2_Init+0xe8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021fe:	4b28      	ldr	r3, [pc, #160]	@ (80022a0 <MX_TIM2_Init+0xe8>)
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002206:	4b26      	ldr	r3, [pc, #152]	@ (80022a0 <MX_TIM2_Init+0xe8>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220c:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <MX_TIM2_Init+0xe8>)
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002212:	4823      	ldr	r0, [pc, #140]	@ (80022a0 <MX_TIM2_Init+0xe8>)
 8002214:	f00a fe93 	bl	800cf3e <HAL_TIM_Base_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800221e:	f000 ff33 	bl	8003088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002226:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002228:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800222c:	4619      	mov	r1, r3
 800222e:	481c      	ldr	r0, [pc, #112]	@ (80022a0 <MX_TIM2_Init+0xe8>)
 8002230:	f00b f9c6 	bl	800d5c0 <HAL_TIM_ConfigClockSource>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800223a:	f000 ff25 	bl	8003088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800223e:	4818      	ldr	r0, [pc, #96]	@ (80022a0 <MX_TIM2_Init+0xe8>)
 8002240:	f00a ff4c 	bl	800d0dc <HAL_TIM_PWM_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800224a:	f000 ff1d 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	4619      	mov	r1, r3
 800225c:	4810      	ldr	r0, [pc, #64]	@ (80022a0 <MX_TIM2_Init+0xe8>)
 800225e:	f00b fe3f 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002268:	f000 ff0e 	bl	8003088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800226c:	2360      	movs	r3, #96	@ 0x60
 800226e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800227c:	463b      	mov	r3, r7
 800227e:	2200      	movs	r2, #0
 8002280:	4619      	mov	r1, r3
 8002282:	4807      	ldr	r0, [pc, #28]	@ (80022a0 <MX_TIM2_Init+0xe8>)
 8002284:	f00b f888 	bl	800d398 <HAL_TIM_PWM_ConfigChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800228e:	f000 fefb 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002292:	4803      	ldr	r0, [pc, #12]	@ (80022a0 <MX_TIM2_Init+0xe8>)
 8002294:	f001 fd60 	bl	8003d58 <HAL_TIM_MspPostInit>

}
 8002298:	bf00      	nop
 800229a:	3738      	adds	r7, #56	@ 0x38
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000df8 	.word	0x20000df8

080022a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08e      	sub	sp, #56	@ 0x38
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b8:	f107 031c 	add.w	r3, r7, #28
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c4:	463b      	mov	r3, r7
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	611a      	str	r2, [r3, #16]
 80022d2:	615a      	str	r2, [r3, #20]
 80022d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022d6:	4b2d      	ldr	r3, [pc, #180]	@ (800238c <MX_TIM3_Init+0xe8>)
 80022d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002390 <MX_TIM3_Init+0xec>)
 80022da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022dc:	4b2b      	ldr	r3, [pc, #172]	@ (800238c <MX_TIM3_Init+0xe8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e2:	4b2a      	ldr	r3, [pc, #168]	@ (800238c <MX_TIM3_Init+0xe8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022e8:	4b28      	ldr	r3, [pc, #160]	@ (800238c <MX_TIM3_Init+0xe8>)
 80022ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f0:	4b26      	ldr	r3, [pc, #152]	@ (800238c <MX_TIM3_Init+0xe8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f6:	4b25      	ldr	r3, [pc, #148]	@ (800238c <MX_TIM3_Init+0xe8>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022fc:	4823      	ldr	r0, [pc, #140]	@ (800238c <MX_TIM3_Init+0xe8>)
 80022fe:	f00a fe1e 	bl	800cf3e <HAL_TIM_Base_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002308:	f000 febe 	bl	8003088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800230c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002310:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002312:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002316:	4619      	mov	r1, r3
 8002318:	481c      	ldr	r0, [pc, #112]	@ (800238c <MX_TIM3_Init+0xe8>)
 800231a:	f00b f951 	bl	800d5c0 <HAL_TIM_ConfigClockSource>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002324:	f000 feb0 	bl	8003088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002328:	4818      	ldr	r0, [pc, #96]	@ (800238c <MX_TIM3_Init+0xe8>)
 800232a:	f00a fed7 	bl	800d0dc <HAL_TIM_PWM_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002334:	f000 fea8 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	4811      	ldr	r0, [pc, #68]	@ (800238c <MX_TIM3_Init+0xe8>)
 8002348:	f00b fdca 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002352:	f000 fe99 	bl	8003088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002356:	2360      	movs	r3, #96	@ 0x60
 8002358:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002366:	463b      	mov	r3, r7
 8002368:	2200      	movs	r2, #0
 800236a:	4619      	mov	r1, r3
 800236c:	4807      	ldr	r0, [pc, #28]	@ (800238c <MX_TIM3_Init+0xe8>)
 800236e:	f00b f813 	bl	800d398 <HAL_TIM_PWM_ConfigChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002378:	f000 fe86 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800237c:	4803      	ldr	r0, [pc, #12]	@ (800238c <MX_TIM3_Init+0xe8>)
 800237e:	f001 fceb 	bl	8003d58 <HAL_TIM_MspPostInit>

}
 8002382:	bf00      	nop
 8002384:	3738      	adds	r7, #56	@ 0x38
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000e44 	.word	0x20000e44
 8002390:	40000400 	.word	0x40000400

08002394 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08e      	sub	sp, #56	@ 0x38
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800239a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b4:	463b      	mov	r3, r7
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
 80023c0:	611a      	str	r2, [r3, #16]
 80023c2:	615a      	str	r2, [r3, #20]
 80023c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023c6:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <MX_TIM5_Init+0xe8>)
 80023c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002480 <MX_TIM5_Init+0xec>)
 80023ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023cc:	4b2b      	ldr	r3, [pc, #172]	@ (800247c <MX_TIM5_Init+0xe8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d2:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <MX_TIM5_Init+0xe8>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80023d8:	4b28      	ldr	r3, [pc, #160]	@ (800247c <MX_TIM5_Init+0xe8>)
 80023da:	f04f 32ff 	mov.w	r2, #4294967295
 80023de:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e0:	4b26      	ldr	r3, [pc, #152]	@ (800247c <MX_TIM5_Init+0xe8>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e6:	4b25      	ldr	r3, [pc, #148]	@ (800247c <MX_TIM5_Init+0xe8>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023ec:	4823      	ldr	r0, [pc, #140]	@ (800247c <MX_TIM5_Init+0xe8>)
 80023ee:	f00a fda6 	bl	800cf3e <HAL_TIM_Base_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80023f8:	f000 fe46 	bl	8003088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002406:	4619      	mov	r1, r3
 8002408:	481c      	ldr	r0, [pc, #112]	@ (800247c <MX_TIM5_Init+0xe8>)
 800240a:	f00b f8d9 	bl	800d5c0 <HAL_TIM_ConfigClockSource>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002414:	f000 fe38 	bl	8003088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002418:	4818      	ldr	r0, [pc, #96]	@ (800247c <MX_TIM5_Init+0xe8>)
 800241a:	f00a fe5f 	bl	800d0dc <HAL_TIM_PWM_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002424:	f000 fe30 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002430:	f107 031c 	add.w	r3, r7, #28
 8002434:	4619      	mov	r1, r3
 8002436:	4811      	ldr	r0, [pc, #68]	@ (800247c <MX_TIM5_Init+0xe8>)
 8002438:	f00b fd52 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002442:	f000 fe21 	bl	8003088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002446:	2360      	movs	r3, #96	@ 0x60
 8002448:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002456:	463b      	mov	r3, r7
 8002458:	220c      	movs	r2, #12
 800245a:	4619      	mov	r1, r3
 800245c:	4807      	ldr	r0, [pc, #28]	@ (800247c <MX_TIM5_Init+0xe8>)
 800245e:	f00a ff9b 	bl	800d398 <HAL_TIM_PWM_ConfigChannel>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002468:	f000 fe0e 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800246c:	4803      	ldr	r0, [pc, #12]	@ (800247c <MX_TIM5_Init+0xe8>)
 800246e:	f001 fc73 	bl	8003d58 <HAL_TIM_MspPostInit>

}
 8002472:	bf00      	nop
 8002474:	3738      	adds	r7, #56	@ 0x38
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000e90 	.word	0x20000e90
 8002480:	40000c00 	.word	0x40000c00

08002484 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80024a2:	4b20      	ldr	r3, [pc, #128]	@ (8002524 <MX_TIM8_Init+0xa0>)
 80024a4:	4a20      	ldr	r2, [pc, #128]	@ (8002528 <MX_TIM8_Init+0xa4>)
 80024a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80024a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <MX_TIM8_Init+0xa0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <MX_TIM8_Init+0xa0>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <MX_TIM8_Init+0xa0>)
 80024b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <MX_TIM8_Init+0xa0>)
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80024c2:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <MX_TIM8_Init+0xa0>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c8:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <MX_TIM8_Init+0xa0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80024ce:	4815      	ldr	r0, [pc, #84]	@ (8002524 <MX_TIM8_Init+0xa0>)
 80024d0:	f00a fd35 	bl	800cf3e <HAL_TIM_Base_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80024da:	f000 fdd5 	bl	8003088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	4619      	mov	r1, r3
 80024ea:	480e      	ldr	r0, [pc, #56]	@ (8002524 <MX_TIM8_Init+0xa0>)
 80024ec:	f00b f868 	bl	800d5c0 <HAL_TIM_ConfigClockSource>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80024f6:	f000 fdc7 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4806      	ldr	r0, [pc, #24]	@ (8002524 <MX_TIM8_Init+0xa0>)
 800250c:	f00b fce8 	bl	800dee0 <HAL_TIMEx_MasterConfigSynchronization>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002516:	f000 fdb7 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800251a:	bf00      	nop
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000edc 	.word	0x20000edc
 8002528:	40010400 	.word	0x40010400

0800252c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
 8002540:	615a      	str	r2, [r3, #20]
 8002542:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002544:	4b1a      	ldr	r3, [pc, #104]	@ (80025b0 <MX_TIM12_Init+0x84>)
 8002546:	4a1b      	ldr	r2, [pc, #108]	@ (80025b4 <MX_TIM12_Init+0x88>)
 8002548:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800254a:	4b19      	ldr	r3, [pc, #100]	@ (80025b0 <MX_TIM12_Init+0x84>)
 800254c:	2200      	movs	r2, #0
 800254e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002550:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <MX_TIM12_Init+0x84>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002556:	4b16      	ldr	r3, [pc, #88]	@ (80025b0 <MX_TIM12_Init+0x84>)
 8002558:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800255c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255e:	4b14      	ldr	r3, [pc, #80]	@ (80025b0 <MX_TIM12_Init+0x84>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002564:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <MX_TIM12_Init+0x84>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800256a:	4811      	ldr	r0, [pc, #68]	@ (80025b0 <MX_TIM12_Init+0x84>)
 800256c:	f00a fdb6 	bl	800d0dc <HAL_TIM_PWM_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002576:	f000 fd87 	bl	8003088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800257a:	2360      	movs	r3, #96	@ 0x60
 800257c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	2200      	movs	r2, #0
 800258e:	4619      	mov	r1, r3
 8002590:	4807      	ldr	r0, [pc, #28]	@ (80025b0 <MX_TIM12_Init+0x84>)
 8002592:	f00a ff01 	bl	800d398 <HAL_TIM_PWM_ConfigChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800259c:	f000 fd74 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80025a0:	4803      	ldr	r0, [pc, #12]	@ (80025b0 <MX_TIM12_Init+0x84>)
 80025a2:	f001 fbd9 	bl	8003d58 <HAL_TIM_MspPostInit>

}
 80025a6:	bf00      	nop
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000f28 	.word	0x20000f28
 80025b4:	40001800 	.word	0x40001800

080025b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025bc:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025be:	4a15      	ldr	r2, [pc, #84]	@ (8002614 <MX_USART1_UART_Init+0x5c>)
 80025c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025c2:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025ca:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025de:	220c      	movs	r2, #12
 80025e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e8:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ee:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f4:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025fa:	4805      	ldr	r0, [pc, #20]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025fc:	f00b fd9a 	bl	800e134 <HAL_UART_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002606:	f000 fd3f 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000f74 	.word	0x20000f74
 8002614:	40011000 	.word	0x40011000

08002618 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800261c:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <MX_USART6_UART_Init+0x58>)
 800261e:	4a15      	ldr	r2, [pc, #84]	@ (8002674 <MX_USART6_UART_Init+0x5c>)
 8002620:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002622:	4b13      	ldr	r3, [pc, #76]	@ (8002670 <MX_USART6_UART_Init+0x58>)
 8002624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002628:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800262a:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <MX_USART6_UART_Init+0x58>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002630:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <MX_USART6_UART_Init+0x58>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002636:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <MX_USART6_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800263c:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <MX_USART6_UART_Init+0x58>)
 800263e:	220c      	movs	r2, #12
 8002640:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <MX_USART6_UART_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <MX_USART6_UART_Init+0x58>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800264e:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <MX_USART6_UART_Init+0x58>)
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <MX_USART6_UART_Init+0x58>)
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800265a:	4805      	ldr	r0, [pc, #20]	@ (8002670 <MX_USART6_UART_Init+0x58>)
 800265c:	f00b fd6a 	bl	800e134 <HAL_UART_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002666:	f000 fd0f 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000ffc 	.word	0x20000ffc
 8002674:	40011400 	.word	0x40011400

08002678 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
 800268c:	615a      	str	r2, [r3, #20]
 800268e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002690:	4b1f      	ldr	r3, [pc, #124]	@ (8002710 <MX_FMC_Init+0x98>)
 8002692:	4a20      	ldr	r2, [pc, #128]	@ (8002714 <MX_FMC_Init+0x9c>)
 8002694:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002696:	4b1e      	ldr	r3, [pc, #120]	@ (8002710 <MX_FMC_Init+0x98>)
 8002698:	2200      	movs	r2, #0
 800269a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800269c:	4b1c      	ldr	r3, [pc, #112]	@ (8002710 <MX_FMC_Init+0x98>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80026a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <MX_FMC_Init+0x98>)
 80026a4:	2204      	movs	r2, #4
 80026a6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80026a8:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <MX_FMC_Init+0x98>)
 80026aa:	2210      	movs	r2, #16
 80026ac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80026ae:	4b18      	ldr	r3, [pc, #96]	@ (8002710 <MX_FMC_Init+0x98>)
 80026b0:	2240      	movs	r2, #64	@ 0x40
 80026b2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80026b4:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <MX_FMC_Init+0x98>)
 80026b6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80026ba:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80026bc:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <MX_FMC_Init+0x98>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80026c2:	4b13      	ldr	r3, [pc, #76]	@ (8002710 <MX_FMC_Init+0x98>)
 80026c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026c8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80026ca:	4b11      	ldr	r3, [pc, #68]	@ (8002710 <MX_FMC_Init+0x98>)
 80026cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80026d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <MX_FMC_Init+0x98>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80026d8:	2302      	movs	r3, #2
 80026da:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80026dc:	2307      	movs	r3, #7
 80026de:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80026e0:	2304      	movs	r3, #4
 80026e2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80026e4:	2307      	movs	r3, #7
 80026e6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80026e8:	2303      	movs	r3, #3
 80026ea:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80026ec:	2302      	movs	r3, #2
 80026ee:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80026f0:	2302      	movs	r3, #2
 80026f2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	4619      	mov	r1, r3
 80026f8:	4805      	ldr	r0, [pc, #20]	@ (8002710 <MX_FMC_Init+0x98>)
 80026fa:	f00a fae5 	bl	800ccc8 <HAL_SDRAM_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002704:	f000 fcc0 	bl	8003088 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002708:	bf00      	nop
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20001084 	.word	0x20001084
 8002714:	a0000140 	.word	0xa0000140

08002718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b090      	sub	sp, #64	@ 0x40
 800271c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800272e:	4bb0      	ldr	r3, [pc, #704]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	4aaf      	ldr	r2, [pc, #700]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002734:	f043 0310 	orr.w	r3, r3, #16
 8002738:	6313      	str	r3, [r2, #48]	@ 0x30
 800273a:	4bad      	ldr	r3, [pc, #692]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002746:	4baa      	ldr	r3, [pc, #680]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	4aa9      	ldr	r2, [pc, #676]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 800274c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002750:	6313      	str	r3, [r2, #48]	@ 0x30
 8002752:	4ba7      	ldr	r3, [pc, #668]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	4ba4      	ldr	r3, [pc, #656]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	4aa3      	ldr	r2, [pc, #652]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	@ 0x30
 800276a:	4ba1      	ldr	r3, [pc, #644]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	623b      	str	r3, [r7, #32]
 8002774:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002776:	4b9e      	ldr	r3, [pc, #632]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	4a9d      	ldr	r2, [pc, #628]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 800277c:	f043 0308 	orr.w	r3, r3, #8
 8002780:	6313      	str	r3, [r2, #48]	@ 0x30
 8002782:	4b9b      	ldr	r3, [pc, #620]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800278e:	4b98      	ldr	r3, [pc, #608]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	4a97      	ldr	r2, [pc, #604]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6313      	str	r3, [r2, #48]	@ 0x30
 800279a:	4b95      	ldr	r3, [pc, #596]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	4b92      	ldr	r3, [pc, #584]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	4a91      	ldr	r2, [pc, #580]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b2:	4b8f      	ldr	r3, [pc, #572]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80027be:	4b8c      	ldr	r3, [pc, #560]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	4a8b      	ldr	r2, [pc, #556]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 80027c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ca:	4b89      	ldr	r3, [pc, #548]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80027d6:	4b86      	ldr	r3, [pc, #536]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	4a85      	ldr	r2, [pc, #532]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 80027dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e2:	4b83      	ldr	r3, [pc, #524]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80027ee:	4b80      	ldr	r3, [pc, #512]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	4a7f      	ldr	r2, [pc, #508]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 80027f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fa:	4b7d      	ldr	r3, [pc, #500]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002806:	4b7a      	ldr	r3, [pc, #488]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a79      	ldr	r2, [pc, #484]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 800280c:	f043 0320 	orr.w	r3, r3, #32
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b77      	ldr	r3, [pc, #476]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800281e:	4b74      	ldr	r3, [pc, #464]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	4a73      	ldr	r2, [pc, #460]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 8002824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002828:	6313      	str	r3, [r2, #48]	@ 0x30
 800282a:	4b71      	ldr	r3, [pc, #452]	@ (80029f0 <MX_GPIO_Init+0x2d8>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002836:	2201      	movs	r2, #1
 8002838:	2120      	movs	r1, #32
 800283a:	486e      	ldr	r0, [pc, #440]	@ (80029f4 <MX_GPIO_Init+0x2dc>)
 800283c:	f004 fcb8 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002840:	2200      	movs	r2, #0
 8002842:	210c      	movs	r1, #12
 8002844:	486c      	ldr	r0, [pc, #432]	@ (80029f8 <MX_GPIO_Init+0x2e0>)
 8002846:	f004 fcb3 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800284a:	2201      	movs	r2, #1
 800284c:	2108      	movs	r1, #8
 800284e:	486b      	ldr	r0, [pc, #428]	@ (80029fc <MX_GPIO_Init+0x2e4>)
 8002850:	f004 fcae 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002854:	2201      	movs	r2, #1
 8002856:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800285a:	4867      	ldr	r0, [pc, #412]	@ (80029f8 <MX_GPIO_Init+0x2e0>)
 800285c:	f004 fca8 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002860:	2200      	movs	r2, #0
 8002862:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002866:	4866      	ldr	r0, [pc, #408]	@ (8002a00 <MX_GPIO_Init+0x2e8>)
 8002868:	f004 fca2 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800286c:	2200      	movs	r2, #0
 800286e:	21c8      	movs	r1, #200	@ 0xc8
 8002870:	4864      	ldr	r0, [pc, #400]	@ (8002a04 <MX_GPIO_Init+0x2ec>)
 8002872:	f004 fc9d 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002876:	2308      	movs	r3, #8
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287a:	2300      	movs	r3, #0
 800287c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002882:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002886:	4619      	mov	r1, r3
 8002888:	485f      	ldr	r0, [pc, #380]	@ (8002a08 <MX_GPIO_Init+0x2f0>)
 800288a:	f004 fae5 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800288e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002892:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289c:	2303      	movs	r3, #3
 800289e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028a0:	230a      	movs	r3, #10
 80028a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028a8:	4619      	mov	r1, r3
 80028aa:	4858      	ldr	r0, [pc, #352]	@ (8002a0c <MX_GPIO_Init+0x2f4>)
 80028ac:	f004 fad4 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80028b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b6:	2300      	movs	r3, #0
 80028b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80028be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028c2:	4619      	mov	r1, r3
 80028c4:	4852      	ldr	r0, [pc, #328]	@ (8002a10 <MX_GPIO_Init+0x2f8>)
 80028c6:	f004 fac7 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80028ca:	2340      	movs	r3, #64	@ 0x40
 80028cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028ce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80028d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80028d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028dc:	4619      	mov	r1, r3
 80028de:	4845      	ldr	r0, [pc, #276]	@ (80029f4 <MX_GPIO_Init+0x2dc>)
 80028e0:	f004 faba 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80028e4:	2320      	movs	r3, #32
 80028e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e8:	2301      	movs	r3, #1
 80028ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80028f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028f8:	4619      	mov	r1, r3
 80028fa:	483e      	ldr	r0, [pc, #248]	@ (80029f4 <MX_GPIO_Init+0x2dc>)
 80028fc:	f004 faac 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002900:	f241 030c 	movw	r3, #4108	@ 0x100c
 8002904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002906:	2301      	movs	r3, #1
 8002908:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	2300      	movs	r3, #0
 8002910:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002916:	4619      	mov	r1, r3
 8002918:	4837      	ldr	r0, [pc, #220]	@ (80029f8 <MX_GPIO_Init+0x2e0>)
 800291a:	f004 fa9d 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800291e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800292c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002930:	4619      	mov	r1, r3
 8002932:	4838      	ldr	r0, [pc, #224]	@ (8002a14 <MX_GPIO_Init+0x2fc>)
 8002934:	f004 fa90 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002938:	2308      	movs	r3, #8
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002948:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800294c:	4619      	mov	r1, r3
 800294e:	482b      	ldr	r0, [pc, #172]	@ (80029fc <MX_GPIO_Init+0x2e4>)
 8002950:	f004 fa82 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002954:	2310      	movs	r3, #16
 8002956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002958:	2300      	movs	r3, #0
 800295a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002960:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002964:	4619      	mov	r1, r3
 8002966:	4823      	ldr	r0, [pc, #140]	@ (80029f4 <MX_GPIO_Init+0x2dc>)
 8002968:	f004 fa76 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800296c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002972:	2300      	movs	r3, #0
 8002974:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800297a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800297e:	4619      	mov	r1, r3
 8002980:	481f      	ldr	r0, [pc, #124]	@ (8002a00 <MX_GPIO_Init+0x2e8>)
 8002982:	f004 fa69 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002986:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800298a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298c:	2301      	movs	r3, #1
 800298e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800299c:	4619      	mov	r1, r3
 800299e:	4818      	ldr	r0, [pc, #96]	@ (8002a00 <MX_GPIO_Init+0x2e8>)
 80029a0:	f004 fa5a 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80029a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80029aa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80029ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80029b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029b8:	4619      	mov	r1, r3
 80029ba:	480f      	ldr	r0, [pc, #60]	@ (80029f8 <MX_GPIO_Init+0x2e0>)
 80029bc:	f004 fa4c 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80029c0:	2310      	movs	r3, #16
 80029c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80029d0:	230a      	movs	r3, #10
 80029d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80029d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029d8:	4619      	mov	r1, r3
 80029da:	4809      	ldr	r0, [pc, #36]	@ (8002a00 <MX_GPIO_Init+0x2e8>)
 80029dc:	f004 fa3c 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80029e0:	23c8      	movs	r3, #200	@ 0xc8
 80029e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ec:	e014      	b.n	8002a18 <MX_GPIO_Init+0x300>
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40020c00 	.word	0x40020c00
 80029f8:	40022000 	.word	0x40022000
 80029fc:	40022800 	.word	0x40022800
 8002a00:	40021c00 	.word	0x40021c00
 8002a04:	40021800 	.word	0x40021800
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40022400 	.word	0x40022400
 8002a14:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a20:	4619      	mov	r1, r3
 8002a22:	4819      	ldr	r0, [pc, #100]	@ (8002a88 <MX_GPIO_Init+0x370>)
 8002a24:	f004 fa18 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002a28:	2305      	movs	r3, #5
 8002a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a38:	230a      	movs	r3, #10
 8002a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a40:	4619      	mov	r1, r3
 8002a42:	4812      	ldr	r0, [pc, #72]	@ (8002a8c <MX_GPIO_Init+0x374>)
 8002a44:	f004 fa08 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002a48:	2304      	movs	r3, #4
 8002a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002a54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a58:	4619      	mov	r1, r3
 8002a5a:	480b      	ldr	r0, [pc, #44]	@ (8002a88 <MX_GPIO_Init+0x370>)
 8002a5c:	f004 f9fc 	bl	8006e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002a60:	2328      	movs	r3, #40	@ 0x28
 8002a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a70:	230a      	movs	r3, #10
 8002a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4805      	ldr	r0, [pc, #20]	@ (8002a90 <MX_GPIO_Init+0x378>)
 8002a7c:	f004 f9ec 	bl	8006e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a80:	bf00      	nop
 8002a82:	3740      	adds	r7, #64	@ 0x40
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021800 	.word	0x40021800
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	40020000 	.word	0x40020000

08002a94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b094      	sub	sp, #80	@ 0x50
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002a9c:	f016 fe1a 	bl	80196d4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 8002aa0:	498e      	ldr	r1, [pc, #568]	@ (8002cdc <StartDefaultTask+0x248>)
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f001 fd84 	bl	80045b0 <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8002aa8:	498d      	ldr	r1, [pc, #564]	@ (8002ce0 <StartDefaultTask+0x24c>)
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f001 fd80 	bl	80045b0 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8002ab0:	4b8c      	ldr	r3, [pc, #560]	@ (8002ce4 <StartDefaultTask+0x250>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a8c      	ldr	r2, [pc, #560]	@ (8002ce8 <StartDefaultTask+0x254>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0c9b      	lsrs	r3, r3, #18
 8002abc:	461a      	mov	r2, r3
 8002abe:	498b      	ldr	r1, [pc, #556]	@ (8002cec <StartDefaultTask+0x258>)
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f001 fd75 	bl	80045b0 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8002ac6:	498a      	ldr	r1, [pc, #552]	@ (8002cf0 <StartDefaultTask+0x25c>)
 8002ac8:	2001      	movs	r0, #1
 8002aca:	f001 fd71 	bl	80045b0 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8002ace:	4989      	ldr	r1, [pc, #548]	@ (8002cf4 <StartDefaultTask+0x260>)
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f001 fd6d 	bl	80045b0 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8002ad6:	4988      	ldr	r1, [pc, #544]	@ (8002cf8 <StartDefaultTask+0x264>)
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f001 fd69 	bl	80045b0 <LOGGER_SendFormatted>
  
  // UART 연결 테스트
  LOG_INFO("📤 [TX_TASK] Testing UART6 connection...");
 8002ade:	4987      	ldr	r1, [pc, #540]	@ (8002cfc <StartDefaultTask+0x268>)
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f001 fd65 	bl	80045b0 <LOGGER_SendFormatted>
  
  UartStatus uart_status = UART_Connect("UART6");
 8002ae6:	4886      	ldr	r0, [pc, #536]	@ (8002d00 <StartDefaultTask+0x26c>)
 8002ae8:	f001 fdfe 	bl	80046e8 <UART_Connect>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (uart_status == UART_STATUS_OK) {
 8002af2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <StartDefaultTask+0x7a>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 connection SUCCESS");
 8002afa:	4982      	ldr	r1, [pc, #520]	@ (8002d04 <StartDefaultTask+0x270>)
 8002afc:	2001      	movs	r0, #1
 8002afe:	f001 fd57 	bl	80045b0 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  // UART 연결 상태 확인
  if (UART_IsConnected()) {
 8002b02:	f001 fec7 	bl	8004894 <UART_IsConnected>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d034      	beq.n	8002b76 <StartDefaultTask+0xe2>
 8002b0c:	e00b      	b.n	8002b26 <StartDefaultTask+0x92>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 connection FAILED (status: %d)", uart_status);
 8002b0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b12:	461a      	mov	r2, r3
 8002b14:	497c      	ldr	r1, [pc, #496]	@ (8002d08 <StartDefaultTask+0x274>)
 8002b16:	2003      	movs	r0, #3
 8002b18:	f001 fd4a 	bl	80045b0 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002b1c:	497b      	ldr	r1, [pc, #492]	@ (8002d0c <StartDefaultTask+0x278>)
 8002b1e:	2003      	movs	r0, #3
 8002b20:	f001 fd46 	bl	80045b0 <LOGGER_SendFormatted>
    goto idle_loop;
 8002b24:	e0c3      	b.n	8002cae <StartDefaultTask+0x21a>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 is CONNECTED and ready");
 8002b26:	497a      	ldr	r1, [pc, #488]	@ (8002d10 <StartDefaultTask+0x27c>)
 8002b28:	2001      	movs	r0, #1
 8002b2a:	f001 fd41 	bl	80045b0 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8002b2e:	4979      	ldr	r1, [pc, #484]	@ (8002d14 <StartDefaultTask+0x280>)
 8002b30:	2001      	movs	r0, #1
 8002b32:	f001 fd3d 	bl	80045b0 <LOGGER_SendFormatted>
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (10 seconds)...");
 8002b36:	4978      	ldr	r1, [pc, #480]	@ (8002d18 <StartDefaultTask+0x284>)
 8002b38:	2001      	movs	r0, #1
 8002b3a:	f001 fd39 	bl	80045b0 <LOGGER_SendFormatted>
  osDelay(10000); // 10초 대기 (LoRa 모듈 부팅 완료 대기)
 8002b3e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002b42:	f013 fe2b 	bl	801679c <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 8002b46:	f107 030c 	add.w	r3, r7, #12
 8002b4a:	4974      	ldr	r1, [pc, #464]	@ (8002d1c <StartDefaultTask+0x288>)
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fe23 	bl	8000798 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 8002b52:	4973      	ldr	r1, [pc, #460]	@ (8002d20 <StartDefaultTask+0x28c>)
 8002b54:	2001      	movs	r0, #1
 8002b56:	f001 fd2b 	bl	80045b0 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	460b      	mov	r3, r1
 8002b64:	496f      	ldr	r1, [pc, #444]	@ (8002d24 <StartDefaultTask+0x290>)
 8002b66:	2001      	movs	r0, #1
 8002b68:	f001 fd22 	bl	80045b0 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 카드 상태 확인 후 로깅 설정
  extern int g_sd_initialization_result; // main()에서 설정된 SD 결과
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8002b6c:	4b6e      	ldr	r3, [pc, #440]	@ (8002d28 <StartDefaultTask+0x294>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d110      	bne.n	8002b96 <StartDefaultTask+0x102>
 8002b74:	e008      	b.n	8002b88 <StartDefaultTask+0xf4>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
 8002b76:	496d      	ldr	r1, [pc, #436]	@ (8002d2c <StartDefaultTask+0x298>)
 8002b78:	2003      	movs	r0, #3
 8002b7a:	f001 fd19 	bl	80045b0 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002b7e:	4963      	ldr	r1, [pc, #396]	@ (8002d0c <StartDefaultTask+0x278>)
 8002b80:	2003      	movs	r0, #3
 8002b82:	f001 fd15 	bl	80045b0 <LOGGER_SendFormatted>
    goto idle_loop;
 8002b86:	e092      	b.n	8002cae <StartDefaultTask+0x21a>
    LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 8002b88:	4969      	ldr	r1, [pc, #420]	@ (8002d30 <StartDefaultTask+0x29c>)
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f001 fd10 	bl	80045b0 <LOGGER_SendFormatted>
    SDStorage_CreateNewLogFile();
 8002b90:	f7fe fb70 	bl	8001274 <SDStorage_CreateNewLogFile>
 8002b94:	e003      	b.n	8002b9e <StartDefaultTask+0x10a>
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 8002b96:	4967      	ldr	r1, [pc, #412]	@ (8002d34 <StartDefaultTask+0x2a0>)
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f001 fd09 	bl	80045b0 <LOGGER_SendFormatted>
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	647b      	str	r3, [r7, #68]	@ 0x44
    if (lora_new_response) {
 8002ba2:	4b65      	ldr	r3, [pc, #404]	@ (8002d38 <StartDefaultTask+0x2a4>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <StartDefaultTask+0x12c>
      rx_data = lora_rx_response;
 8002bac:	4b63      	ldr	r3, [pc, #396]	@ (8002d3c <StartDefaultTask+0x2a8>)
 8002bae:	647b      	str	r3, [r7, #68]	@ 0x44
      lora_new_response = false; // 플래그 클리어
 8002bb0:	4b61      	ldr	r3, [pc, #388]	@ (8002d38 <StartDefaultTask+0x2a4>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
      LOG_DEBUG("[TX_TASK] Processing LoRa response: %.20s...", rx_data);
 8002bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bb8:	4961      	ldr	r1, [pc, #388]	@ (8002d40 <StartDefaultTask+0x2ac>)
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f001 fcf8 	bl	80045b0 <LOGGER_SendFormatted>
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fe2e 	bl	8000828 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅
    LOG_DEBUG("[TX_TASK] LoRa State: %d, cmd_index: %d/%d", 
 8002bcc:	7b3b      	ldrb	r3, [r7, #12]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	460a      	mov	r2, r1
 8002bda:	495a      	ldr	r1, [pc, #360]	@ (8002d44 <StartDefaultTask+0x2b0>)
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f001 fce7 	bl	80045b0 <LOGGER_SendFormatted>
              lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
    
    switch(lora_ctx.state) {
 8002be2:	7b3b      	ldrb	r3, [r7, #12]
 8002be4:	2b0a      	cmp	r3, #10
 8002be6:	d85c      	bhi.n	8002ca2 <StartDefaultTask+0x20e>
 8002be8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf0 <StartDefaultTask+0x15c>)
 8002bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bee:	bf00      	nop
 8002bf0:	08002c1d 	.word	0x08002c1d
 8002bf4:	08002c27 	.word	0x08002c27
 8002bf8:	08002c3f 	.word	0x08002c3f
 8002bfc:	08002c57 	.word	0x08002c57
 8002c00:	08002c61 	.word	0x08002c61
 8002c04:	08002c57 	.word	0x08002c57
 8002c08:	08002c61 	.word	0x08002c61
 8002c0c:	08002c6b 	.word	0x08002c6b
 8002c10:	08002c81 	.word	0x08002c81
 8002c14:	08002c8b 	.word	0x08002c8b
 8002c18:	08002c8b 	.word	0x08002c8b
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 8002c1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c20:	f013 fdbc 	bl	801679c <osDelay>
        break;
 8002c24:	e042      	b.n	8002cac <StartDefaultTask+0x218>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4946      	ldr	r1, [pc, #280]	@ (8002d48 <StartDefaultTask+0x2b4>)
 8002c2e:	2001      	movs	r0, #1
 8002c30:	f001 fcbe 	bl	80045b0 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 8002c34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c38:	f013 fdb0 	bl	801679c <osDelay>
        break;
 8002c3c:	e036      	b.n	8002cac <StartDefaultTask+0x218>
      case LORA_STATE_WAIT_OK:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for OK response to command %d", 
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	3301      	adds	r3, #1
 8002c42:	461a      	mov	r2, r3
 8002c44:	4941      	ldr	r1, [pc, #260]	@ (8002d4c <StartDefaultTask+0x2b8>)
 8002c46:	2000      	movs	r0, #0
 8002c48:	f001 fcb2 	bl	80045b0 <LOGGER_SendFormatted>
                 lora_ctx.cmd_index + 1);
        osDelay(2000); // OK 응답 대기 중 2초 간격
 8002c4c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c50:	f013 fda4 	bl	801679c <osDelay>
        break;
 8002c54:	e02a      	b.n	8002cac <StartDefaultTask+0x218>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 8002c56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c5a:	f013 fd9f 	bl	801679c <osDelay>
        break;
 8002c5e:	e025      	b.n	8002cac <StartDefaultTask+0x218>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 8002c60:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002c64:	f013 fd9a 	bl	801679c <osDelay>
        break;
 8002c68:	e020      	b.n	8002cac <StartDefaultTask+0x218>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for send interval (%u ms)", lora_ctx.send_interval_ms);
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4938      	ldr	r1, [pc, #224]	@ (8002d50 <StartDefaultTask+0x2bc>)
 8002c70:	2000      	movs	r0, #0
 8002c72:	f001 fc9d 	bl	80045b0 <LOGGER_SendFormatted>
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8002c76:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002c7a:	f013 fd8f 	bl	801679c <osDelay>
        break;
 8002c7e:	e015      	b.n	8002cac <StartDefaultTask+0x218>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8002c80:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002c84:	f013 fd8a 	bl	801679c <osDelay>
        break;
 8002c88:	e010      	b.n	8002cac <StartDefaultTask+0x218>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8002c8a:	7b3b      	ldrb	r3, [r7, #12]
 8002c8c:	2b09      	cmp	r3, #9
 8002c8e:	d101      	bne.n	8002c94 <StartDefaultTask+0x200>
 8002c90:	4b30      	ldr	r3, [pc, #192]	@ (8002d54 <StartDefaultTask+0x2c0>)
 8002c92:	e000      	b.n	8002c96 <StartDefaultTask+0x202>
 8002c94:	4b30      	ldr	r3, [pc, #192]	@ (8002d58 <StartDefaultTask+0x2c4>)
 8002c96:	461a      	mov	r2, r3
 8002c98:	4930      	ldr	r1, [pc, #192]	@ (8002d5c <StartDefaultTask+0x2c8>)
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f001 fc88 	bl	80045b0 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 8002ca0:	e005      	b.n	8002cae <StartDefaultTask+0x21a>
      default:
        osDelay(1000);
 8002ca2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ca6:	f013 fd79 	bl	801679c <osDelay>
        break;
 8002caa:	bf00      	nop
  {
 8002cac:	e777      	b.n	8002b9e <StartDefaultTask+0x10a>
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8002cae:	492c      	ldr	r1, [pc, #176]	@ (8002d60 <StartDefaultTask+0x2cc>)
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f001 fc7d 	bl	80045b0 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	643b      	str	r3, [r7, #64]	@ 0x40
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 8002cba:	f247 5030 	movw	r0, #30000	@ 0x7530
 8002cbe:	f013 fd6d 	bl	801679c <osDelay>
    idle_counter++;
 8002cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	643b      	str	r3, [r7, #64]	@ 0x40
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8002cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cca:	085b      	lsrs	r3, r3, #1
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4925      	ldr	r1, [pc, #148]	@ (8002d64 <StartDefaultTask+0x2d0>)
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	f001 fc6d 	bl	80045b0 <LOGGER_SendFormatted>
    osDelay(30000);
 8002cd6:	bf00      	nop
 8002cd8:	e7ef      	b.n	8002cba <StartDefaultTask+0x226>
 8002cda:	bf00      	nop
 8002cdc:	0801b42c 	.word	0x0801b42c
 8002ce0:	0801b474 	.word	0x0801b474
 8002ce4:	20000018 	.word	0x20000018
 8002ce8:	431bde83 	.word	0x431bde83
 8002cec:	0801b4a0 	.word	0x0801b4a0
 8002cf0:	0801b4b8 	.word	0x0801b4b8
 8002cf4:	0801b4e0 	.word	0x0801b4e0
 8002cf8:	0801b52c 	.word	0x0801b52c
 8002cfc:	0801b568 	.word	0x0801b568
 8002d00:	0801b594 	.word	0x0801b594
 8002d04:	0801b59c 	.word	0x0801b59c
 8002d08:	0801b5c8 	.word	0x0801b5c8
 8002d0c:	0801b600 	.word	0x0801b600
 8002d10:	0801b644 	.word	0x0801b644
 8002d14:	0801b6a0 	.word	0x0801b6a0
 8002d18:	0801b6d8 	.word	0x0801b6d8
 8002d1c:	0801b718 	.word	0x0801b718
 8002d20:	0801b720 	.word	0x0801b720
 8002d24:	0801b73c 	.word	0x0801b73c
 8002d28:	20000014 	.word	0x20000014
 8002d2c:	0801b674 	.word	0x0801b674
 8002d30:	0801b76c 	.word	0x0801b76c
 8002d34:	0801b7a4 	.word	0x0801b7a4
 8002d38:	200012c4 	.word	0x200012c4
 8002d3c:	200010c4 	.word	0x200010c4
 8002d40:	0801b7ec 	.word	0x0801b7ec
 8002d44:	0801b81c 	.word	0x0801b81c
 8002d48:	0801b848 	.word	0x0801b848
 8002d4c:	0801b870 	.word	0x0801b870
 8002d50:	0801b8a4 	.word	0x0801b8a4
 8002d54:	0801b8d4 	.word	0x0801b8d4
 8002d58:	0801b8dc 	.word	0x0801b8dc
 8002d5c:	0801b8e4 	.word	0x0801b8e4
 8002d60:	0801b91c 	.word	0x0801b91c
 8002d64:	0801b944 	.word	0x0801b944

08002d68 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8002d6e:	af02      	add	r7, sp, #8
 8002d70:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002d74:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002d78:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8002d7a:	49a4      	ldr	r1, [pc, #656]	@ (800300c <StartReceiveTask+0x2a4>)
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f001 fc17 	bl	80045b0 <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8002d82:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d86:	f013 fd09 	bl	801679c <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8002d8a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002d8e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8002d96:	f107 0208 	add.w	r2, r7, #8
 8002d9a:	f107 030c 	add.w	r3, r7, #12
 8002d9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002da2:	4618      	mov	r0, r3
 8002da4:	f001 fd1c 	bl	80047e0 <UART_Receive>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8002dae:	4b98      	ldr	r3, [pc, #608]	@ (8003010 <StartReceiveTask+0x2a8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	4a96      	ldr	r2, [pc, #600]	@ (8003010 <StartReceiveTask+0x2a8>)
 8002db6:	6013      	str	r3, [r2, #0]
    if (debug_counter % 200 == 0 && status != UART_STATUS_TIMEOUT) {  // 10초마다, 타임아웃 제외
 8002db8:	4b95      	ldr	r3, [pc, #596]	@ (8003010 <StartReceiveTask+0x2a8>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b95      	ldr	r3, [pc, #596]	@ (8003014 <StartReceiveTask+0x2ac>)
 8002dbe:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc2:	099b      	lsrs	r3, r3, #6
 8002dc4:	21c8      	movs	r1, #200	@ 0xc8
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d116      	bne.n	8002dfe <StartReceiveTask+0x96>
 8002dd0:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d012      	beq.n	8002dfe <StartReceiveTask+0x96>
      LOG_INFO("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 8002dd8:	4b8d      	ldr	r3, [pc, #564]	@ (8003010 <StartReceiveTask+0x2a8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a8d      	ldr	r2, [pc, #564]	@ (8003014 <StartReceiveTask+0x2ac>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	099a      	lsrs	r2, r3, #6
 8002de4:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8002de8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002dec:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	460b      	mov	r3, r1
 8002df6:	4988      	ldr	r1, [pc, #544]	@ (8003018 <StartReceiveTask+0x2b0>)
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f001 fbd9 	bl	80045b0 <LOGGER_SendFormatted>
               debug_counter / 200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8002dfe:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 80fd 	bne.w	8003002 <StartReceiveTask+0x29a>
 8002e08:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002e0c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f340 80f5 	ble.w	8003002 <StartReceiveTask+0x29a>
      // 수신 완료 - TDD ResponseHandler로 분석
      LOG_INFO("📥 RECV: '%s' (%d bytes)", local_buffer, local_bytes_received);
 8002e18:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002e1c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f107 020c 	add.w	r2, r7, #12
 8002e26:	497d      	ldr	r1, [pc, #500]	@ (800301c <StartReceiveTask+0x2b4>)
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f001 fbc1 	bl	80045b0 <LOGGER_SendFormatted>
      
      // TDD ResponseHandler를 사용하여 응답 분석
      if (is_response_ok(local_buffer)) {
 8002e2e:	f107 030c 	add.w	r3, r7, #12
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe f80a 	bl	8000e4c <is_response_ok>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <StartReceiveTask+0xe0>
        LOG_INFO("✅ OK response");
 8002e3e:	4978      	ldr	r1, [pc, #480]	@ (8003020 <StartReceiveTask+0x2b8>)
 8002e40:	2001      	movs	r0, #1
 8002e42:	f001 fbb5 	bl	80045b0 <LOGGER_SendFormatted>
 8002e46:	e04a      	b.n	8002ede <StartReceiveTask+0x176>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	4975      	ldr	r1, [pc, #468]	@ (8003024 <StartReceiveTask+0x2bc>)
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f017 f8a5 	bl	8019f9e <strstr>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <StartReceiveTask+0xfc>
        LOG_INFO("✅ JOIN response");
 8002e5a:	4973      	ldr	r1, [pc, #460]	@ (8003028 <StartReceiveTask+0x2c0>)
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f001 fba7 	bl	80045b0 <LOGGER_SendFormatted>
 8002e62:	e03c      	b.n	8002ede <StartReceiveTask+0x176>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8002e64:	f107 030c 	add.w	r3, r7, #12
 8002e68:	4970      	ldr	r1, [pc, #448]	@ (800302c <StartReceiveTask+0x2c4>)
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f017 f897 	bl	8019f9e <strstr>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <StartReceiveTask+0x118>
        LOG_INFO("📡 LoRa module boot message (ignored)");
 8002e76:	496e      	ldr	r1, [pc, #440]	@ (8003030 <StartReceiveTask+0x2c8>)
 8002e78:	2001      	movs	r0, #1
 8002e7a:	f001 fb99 	bl	80045b0 <LOGGER_SendFormatted>
 8002e7e:	e02e      	b.n	8002ede <StartReceiveTask+0x176>
      } else {
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8002e80:	f107 030c 	add.w	r3, r7, #12
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe f8cd 	bl	8001024 <ResponseHandler_ParseSendResponse>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        switch (response_type) {
 8002e90:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d822      	bhi.n	8002ede <StartReceiveTask+0x176>
 8002e98:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea0 <StartReceiveTask+0x138>)
 8002e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9e:	bf00      	nop
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002ebb 	.word	0x08002ebb
 8002ea8:	08002ec5 	.word	0x08002ec5
 8002eac:	08002ecf 	.word	0x08002ecf
          case RESPONSE_OK:
            LOG_INFO("✅ OK");
 8002eb0:	4960      	ldr	r1, [pc, #384]	@ (8003034 <StartReceiveTask+0x2cc>)
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f001 fb7c 	bl	80045b0 <LOGGER_SendFormatted>
            break;
 8002eb8:	e011      	b.n	8002ede <StartReceiveTask+0x176>
          case RESPONSE_ERROR:
            LOG_WARN("⚠️ ERROR");
 8002eba:	495f      	ldr	r1, [pc, #380]	@ (8003038 <StartReceiveTask+0x2d0>)
 8002ebc:	2002      	movs	r0, #2
 8002ebe:	f001 fb77 	bl	80045b0 <LOGGER_SendFormatted>
            break;
 8002ec2:	e00c      	b.n	8002ede <StartReceiveTask+0x176>
          case RESPONSE_TIMEOUT:
            LOG_WARN("⚠️ TIMEOUT");
 8002ec4:	495d      	ldr	r1, [pc, #372]	@ (800303c <StartReceiveTask+0x2d4>)
 8002ec6:	2002      	movs	r0, #2
 8002ec8:	f001 fb72 	bl	80045b0 <LOGGER_SendFormatted>
            break;
 8002ecc:	e007      	b.n	8002ede <StartReceiveTask+0x176>
          case RESPONSE_UNKNOWN:
            LOG_INFO("❓ UNKNOWN format: %.20s...", local_buffer);  // 처음 20자만 표시
 8002ece:	f107 030c 	add.w	r3, r7, #12
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	495a      	ldr	r1, [pc, #360]	@ (8003040 <StartReceiveTask+0x2d8>)
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	f001 fb6a 	bl	80045b0 <LOGGER_SendFormatted>
            break;
 8002edc:	bf00      	nop
        }
      }
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 8002ede:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002ee2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f107 030c 	add.w	r3, r7, #12
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4854      	ldr	r0, [pc, #336]	@ (8003044 <StartReceiveTask+0x2dc>)
 8002ef2:	f017 f8a7 	bl	801a044 <memcpy>
      rx_bytes_received = local_bytes_received;
 8002ef6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002efa:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a51      	ldr	r2, [pc, #324]	@ (8003048 <StartReceiveTask+0x2e0>)
 8002f02:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd ff9c 	bl	8000e4c <is_response_ok>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <StartReceiveTask+0x1ba>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8002f20:	e03f      	b.n	8002fa2 <StartReceiveTask+0x23a>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	493f      	ldr	r1, [pc, #252]	@ (8003024 <StartReceiveTask+0x2bc>)
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f017 f838 	bl	8019f9e <strstr>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <StartReceiveTask+0x1d4>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8002f3a:	e032      	b.n	8002fa2 <StartReceiveTask+0x23a>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 8002f3c:	f107 030c 	add.w	r3, r7, #12
 8002f40:	4942      	ldr	r1, [pc, #264]	@ (800304c <StartReceiveTask+0x2e4>)
 8002f42:	4618      	mov	r0, r3
 8002f44:	f017 f82b 	bl	8019f9e <strstr>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <StartReceiveTask+0x1ee>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8002f54:	e025      	b.n	8002fa2 <StartReceiveTask+0x23a>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8002f56:	f107 030c 	add.w	r3, r7, #12
 8002f5a:	4934      	ldr	r1, [pc, #208]	@ (800302c <StartReceiveTask+0x2c4>)
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f017 f81e 	bl	8019f9e <strstr>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d108      	bne.n	8002f7a <StartReceiveTask+0x212>
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	4938      	ldr	r1, [pc, #224]	@ (8003050 <StartReceiveTask+0x2e8>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f017 f815 	bl	8019f9e <strstr>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d004      	beq.n	8002f84 <StartReceiveTask+0x21c>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 8002f7a:	4936      	ldr	r1, [pc, #216]	@ (8003054 <StartReceiveTask+0x2ec>)
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f001 fb17 	bl	80045b0 <LOGGER_SendFormatted>
 8002f82:	e00e      	b.n	8002fa2 <StartReceiveTask+0x23a>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8002f84:	f107 030c 	add.w	r3, r7, #12
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe f84b 	bl	8001024 <ResponseHandler_ParseSendResponse>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (response_type != RESPONSE_UNKNOWN) {
 8002f94:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d002      	beq.n	8002fa2 <StartReceiveTask+0x23a>
          is_lora_command_response = true;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 8002fa2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01d      	beq.n	8002fe6 <StartReceiveTask+0x27e>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8002faa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002fae:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4826      	ldr	r0, [pc, #152]	@ (8003058 <StartReceiveTask+0x2f0>)
 8002fbe:	f017 f841 	bl	801a044 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 8002fc2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002fc6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a22      	ldr	r2, [pc, #136]	@ (8003058 <StartReceiveTask+0x2f0>)
 8002fce:	2100      	movs	r1, #0
 8002fd0:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 8002fd2:	4b22      	ldr	r3, [pc, #136]	@ (800305c <StartReceiveTask+0x2f4>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8002fd8:	f107 030c 	add.w	r3, r7, #12
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4920      	ldr	r1, [pc, #128]	@ (8003060 <StartReceiveTask+0x2f8>)
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f001 fae5 	bl	80045b0 <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 8002fe6:	f107 030c 	add.w	r3, r7, #12
 8002fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f016 ffb9 	bl	8019f68 <memset>
      local_bytes_received = 0;
 8002ff6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002ffa:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8003002:	2032      	movs	r0, #50	@ 0x32
 8003004:	f013 fbca 	bl	801679c <osDelay>
  {
 8003008:	e6c5      	b.n	8002d96 <StartReceiveTask+0x2e>
 800300a:	bf00      	nop
 800300c:	0801b974 	.word	0x0801b974
 8003010:	20001334 	.word	0x20001334
 8003014:	51eb851f 	.word	0x51eb851f
 8003018:	0801b99c 	.word	0x0801b99c
 800301c:	0801b9d0 	.word	0x0801b9d0
 8003020:	0801b9ec 	.word	0x0801b9ec
 8003024:	0801b9fc 	.word	0x0801b9fc
 8003028:	0801ba08 	.word	0x0801ba08
 800302c:	0801ba1c 	.word	0x0801ba1c
 8003030:	0801ba28 	.word	0x0801ba28
 8003034:	0801ba50 	.word	0x0801ba50
 8003038:	0801ba58 	.word	0x0801ba58
 800303c:	0801ba68 	.word	0x0801ba68
 8003040:	0801ba78 	.word	0x0801ba78
 8003044:	20001398 	.word	0x20001398
 8003048:	200010c0 	.word	0x200010c0
 800304c:	0801ba98 	.word	0x0801ba98
 8003050:	0801baa0 	.word	0x0801baa0
 8003054:	0801bab0 	.word	0x0801bab0
 8003058:	200010c4 	.word	0x200010c4
 800305c:	200012c4 	.word	0x200012c4
 8003060:	0801baec 	.word	0x0801baec

08003064 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d101      	bne.n	800307a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003076:	f002 f817 	bl	80050a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40001000 	.word	0x40001000

08003088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800308c:	b672      	cpsid	i
}
 800308e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <Error_Handler+0x8>

08003094 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800309a:	4b10      	ldr	r3, [pc, #64]	@ (80030dc <MX_DMA_Init+0x48>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	4a0f      	ldr	r2, [pc, #60]	@ (80030dc <MX_DMA_Init+0x48>)
 80030a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a6:	4b0d      	ldr	r3, [pc, #52]	@ (80030dc <MX_DMA_Init+0x48>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ae:	607b      	str	r3, [r7, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80030b2:	2200      	movs	r2, #0
 80030b4:	2105      	movs	r1, #5
 80030b6:	2039      	movs	r0, #57	@ 0x39
 80030b8:	f002 fb8a 	bl	80057d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80030bc:	2039      	movs	r0, #57	@ 0x39
 80030be:	f002 fba3 	bl	8005808 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2105      	movs	r1, #5
 80030c6:	2047      	movs	r0, #71	@ 0x47
 80030c8:	f002 fb82 	bl	80057d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80030cc:	2047      	movs	r0, #71	@ 0x47
 80030ce:	f002 fb9b 	bl	8005808 <HAL_NVIC_EnableIRQ>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800

080030e0 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 80030e4:	4b18      	ldr	r3, [pc, #96]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 80030e6:	4a19      	ldr	r2, [pc, #100]	@ (800314c <MX_USART6_DMA_Init+0x6c>)
 80030e8:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80030ea:	4b17      	ldr	r3, [pc, #92]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 80030ec:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80030f0:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030f2:	4b15      	ldr	r3, [pc, #84]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f8:	4b13      	ldr	r3, [pc, #76]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030fe:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 8003100:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003104:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003106:	4b10      	ldr	r3, [pc, #64]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 8003108:	2200      	movs	r2, #0
 800310a:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800310c:	4b0e      	ldr	r3, [pc, #56]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 800310e:	2200      	movs	r2, #0
 8003110:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 8003112:	4b0d      	ldr	r3, [pc, #52]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 8003114:	2200      	movs	r2, #0
 8003116:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003118:	4b0b      	ldr	r3, [pc, #44]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 800311a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800311e:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003120:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 8003122:	2200      	movs	r2, #0
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003126:	4808      	ldr	r0, [pc, #32]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 8003128:	f002 fce8 	bl	8005afc <HAL_DMA_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_USART6_DMA_Init+0x56>
  {
    Error_Handler();
 8003132:	f7ff ffa9 	bl	8003088 <Error_Handler>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <MX_USART6_DMA_Init+0x70>)
 8003138:	4a03      	ldr	r2, [pc, #12]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 800313a:	675a      	str	r2, [r3, #116]	@ 0x74
 800313c:	4b02      	ldr	r3, [pc, #8]	@ (8003148 <MX_USART6_DMA_Init+0x68>)
 800313e:	4a04      	ldr	r2, [pc, #16]	@ (8003150 <MX_USART6_DMA_Init+0x70>)
 8003140:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200012c8 	.word	0x200012c8
 800314c:	40026428 	.word	0x40026428
 8003150:	20000ffc 	.word	0x20000ffc

08003154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <HAL_MspInit+0x4c>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	4a10      	ldr	r2, [pc, #64]	@ (80031a0 <HAL_MspInit+0x4c>)
 8003160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	@ 0x40
 8003166:	4b0e      	ldr	r3, [pc, #56]	@ (80031a0 <HAL_MspInit+0x4c>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003172:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <HAL_MspInit+0x4c>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	4a0a      	ldr	r2, [pc, #40]	@ (80031a0 <HAL_MspInit+0x4c>)
 8003178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800317c:	6453      	str	r3, [r2, #68]	@ 0x44
 800317e:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <HAL_MspInit+0x4c>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	210f      	movs	r1, #15
 800318e:	f06f 0001 	mvn.w	r0, #1
 8003192:	f002 fb1d 	bl	80057d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800

080031a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	@ 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a21      	ldr	r2, [pc, #132]	@ (8003248 <HAL_ADC_MspInit+0xa4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d13c      	bne.n	8003240 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80031c6:	4b21      	ldr	r3, [pc, #132]	@ (800324c <HAL_ADC_MspInit+0xa8>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	4a20      	ldr	r2, [pc, #128]	@ (800324c <HAL_ADC_MspInit+0xa8>)
 80031cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031d2:	4b1e      	ldr	r3, [pc, #120]	@ (800324c <HAL_ADC_MspInit+0xa8>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031de:	4b1b      	ldr	r3, [pc, #108]	@ (800324c <HAL_ADC_MspInit+0xa8>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	4a1a      	ldr	r2, [pc, #104]	@ (800324c <HAL_ADC_MspInit+0xa8>)
 80031e4:	f043 0320 	orr.w	r3, r3, #32
 80031e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ea:	4b18      	ldr	r3, [pc, #96]	@ (800324c <HAL_ADC_MspInit+0xa8>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f6:	4b15      	ldr	r3, [pc, #84]	@ (800324c <HAL_ADC_MspInit+0xa8>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	4a14      	ldr	r2, [pc, #80]	@ (800324c <HAL_ADC_MspInit+0xa8>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6313      	str	r3, [r2, #48]	@ 0x30
 8003202:	4b12      	ldr	r3, [pc, #72]	@ (800324c <HAL_ADC_MspInit+0xa8>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800320e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8003212:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003214:	2303      	movs	r3, #3
 8003216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	4619      	mov	r1, r3
 8003222:	480b      	ldr	r0, [pc, #44]	@ (8003250 <HAL_ADC_MspInit+0xac>)
 8003224:	f003 fe18 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003228:	2301      	movs	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800322c:	2303      	movs	r3, #3
 800322e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	4619      	mov	r1, r3
 800323a:	4806      	ldr	r0, [pc, #24]	@ (8003254 <HAL_ADC_MspInit+0xb0>)
 800323c:	f003 fe0c 	bl	8006e58 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8003240:	bf00      	nop
 8003242:	3728      	adds	r7, #40	@ 0x28
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40012200 	.word	0x40012200
 800324c:	40023800 	.word	0x40023800
 8003250:	40021400 	.word	0x40021400
 8003254:	40020000 	.word	0x40020000

08003258 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <HAL_CRC_MspInit+0x38>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10b      	bne.n	8003282 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800326a:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <HAL_CRC_MspInit+0x3c>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_CRC_MspInit+0x3c>)
 8003270:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003274:	6313      	str	r3, [r2, #48]	@ 0x30
 8003276:	4b07      	ldr	r3, [pc, #28]	@ (8003294 <HAL_CRC_MspInit+0x3c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40023000 	.word	0x40023000
 8003294:	40023800 	.word	0x40023800

08003298 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08e      	sub	sp, #56	@ 0x38
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a50      	ldr	r2, [pc, #320]	@ (80033f8 <HAL_DCMI_MspInit+0x160>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	f040 809a 	bne.w	80033f0 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80032bc:	4b4f      	ldr	r3, [pc, #316]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 80032be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c0:	4a4e      	ldr	r2, [pc, #312]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80032c8:	4b4c      	ldr	r3, [pc, #304]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 80032ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032d4:	4b49      	ldr	r3, [pc, #292]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	4a48      	ldr	r2, [pc, #288]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 80032da:	f043 0310 	orr.w	r3, r3, #16
 80032de:	6313      	str	r3, [r2, #48]	@ 0x30
 80032e0:	4b46      	ldr	r3, [pc, #280]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ec:	4b43      	ldr	r3, [pc, #268]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	4a42      	ldr	r2, [pc, #264]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 80032f2:	f043 0308 	orr.w	r3, r3, #8
 80032f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f8:	4b40      	ldr	r3, [pc, #256]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003304:	4b3d      	ldr	r3, [pc, #244]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 8003306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003308:	4a3c      	ldr	r2, [pc, #240]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 800330a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800330e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003310:	4b3a      	ldr	r3, [pc, #232]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 8003312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800331c:	4b37      	ldr	r3, [pc, #220]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 800331e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003320:	4a36      	ldr	r2, [pc, #216]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 8003322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003326:	6313      	str	r3, [r2, #48]	@ 0x30
 8003328:	4b34      	ldr	r3, [pc, #208]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003334:	4b31      	ldr	r3, [pc, #196]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003338:	4a30      	ldr	r2, [pc, #192]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003340:	4b2e      	ldr	r3, [pc, #184]	@ (80033fc <HAL_DCMI_MspInit+0x164>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800334c:	2360      	movs	r3, #96	@ 0x60
 800334e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003358:	2300      	movs	r3, #0
 800335a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800335c:	230d      	movs	r3, #13
 800335e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003364:	4619      	mov	r1, r3
 8003366:	4826      	ldr	r0, [pc, #152]	@ (8003400 <HAL_DCMI_MspInit+0x168>)
 8003368:	f003 fd76 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800336c:	2308      	movs	r3, #8
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003378:	2300      	movs	r3, #0
 800337a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800337c:	230d      	movs	r3, #13
 800337e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003380:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003384:	4619      	mov	r1, r3
 8003386:	481f      	ldr	r0, [pc, #124]	@ (8003404 <HAL_DCMI_MspInit+0x16c>)
 8003388:	f003 fd66 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800338c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800339e:	230d      	movs	r3, #13
 80033a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80033a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033a6:	4619      	mov	r1, r3
 80033a8:	4817      	ldr	r0, [pc, #92]	@ (8003408 <HAL_DCMI_MspInit+0x170>)
 80033aa:	f003 fd55 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80033ae:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033bc:	2300      	movs	r3, #0
 80033be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80033c0:	230d      	movs	r3, #13
 80033c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80033c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c8:	4619      	mov	r1, r3
 80033ca:	4810      	ldr	r0, [pc, #64]	@ (800340c <HAL_DCMI_MspInit+0x174>)
 80033cc:	f003 fd44 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80033d0:	2350      	movs	r3, #80	@ 0x50
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033dc:	2300      	movs	r3, #0
 80033de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80033e0:	230d      	movs	r3, #13
 80033e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033e8:	4619      	mov	r1, r3
 80033ea:	4809      	ldr	r0, [pc, #36]	@ (8003410 <HAL_DCMI_MspInit+0x178>)
 80033ec:	f003 fd34 	bl	8006e58 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80033f0:	bf00      	nop
 80033f2:	3738      	adds	r7, #56	@ 0x38
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	50050000 	.word	0x50050000
 80033fc:	40023800 	.word	0x40023800
 8003400:	40021000 	.word	0x40021000
 8003404:	40020c00 	.word	0x40020c00
 8003408:	40021800 	.word	0x40021800
 800340c:	40021c00 	.word	0x40021c00
 8003410:	40020000 	.word	0x40020000

08003414 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0d      	ldr	r2, [pc, #52]	@ (8003458 <HAL_DMA2D_MspInit+0x44>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d113      	bne.n	800344e <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <HAL_DMA2D_MspInit+0x48>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4a0c      	ldr	r2, [pc, #48]	@ (800345c <HAL_DMA2D_MspInit+0x48>)
 800342c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003430:	6313      	str	r3, [r2, #48]	@ 0x30
 8003432:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <HAL_DMA2D_MspInit+0x48>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800343e:	2200      	movs	r2, #0
 8003440:	2105      	movs	r1, #5
 8003442:	205a      	movs	r0, #90	@ 0x5a
 8003444:	f002 f9c4 	bl	80057d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003448:	205a      	movs	r0, #90	@ 0x5a
 800344a:	f002 f9dd 	bl	8005808 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	4002b000 	.word	0x4002b000
 800345c:	40023800 	.word	0x40023800

08003460 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08e      	sub	sp, #56	@ 0x38
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a3f      	ldr	r2, [pc, #252]	@ (800357c <HAL_ETH_MspInit+0x11c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d178      	bne.n	8003574 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003482:	4b3f      	ldr	r3, [pc, #252]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	4a3e      	ldr	r2, [pc, #248]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 8003488:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800348c:	6313      	str	r3, [r2, #48]	@ 0x30
 800348e:	4b3c      	ldr	r3, [pc, #240]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003496:	623b      	str	r3, [r7, #32]
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	4b39      	ldr	r3, [pc, #228]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	4a38      	ldr	r2, [pc, #224]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 80034a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034a6:	4b36      	ldr	r3, [pc, #216]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	4b33      	ldr	r3, [pc, #204]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	4a32      	ldr	r2, [pc, #200]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 80034b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034be:	4b30      	ldr	r3, [pc, #192]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034c6:	61bb      	str	r3, [r7, #24]
 80034c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80034ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 80034d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e2:	4b27      	ldr	r3, [pc, #156]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	4a26      	ldr	r2, [pc, #152]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 80034e8:	f043 0304 	orr.w	r3, r3, #4
 80034ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ee:	4b24      	ldr	r3, [pc, #144]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	4b21      	ldr	r3, [pc, #132]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	4a20      	ldr	r2, [pc, #128]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6313      	str	r3, [r2, #48]	@ 0x30
 8003506:	4b1e      	ldr	r3, [pc, #120]	@ (8003580 <HAL_ETH_MspInit+0x120>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003512:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	2302      	movs	r3, #2
 800351a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003520:	2303      	movs	r3, #3
 8003522:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003524:	230b      	movs	r3, #11
 8003526:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800352c:	4619      	mov	r1, r3
 800352e:	4815      	ldr	r0, [pc, #84]	@ (8003584 <HAL_ETH_MspInit+0x124>)
 8003530:	f003 fc92 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003534:	2332      	movs	r3, #50	@ 0x32
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003538:	2302      	movs	r3, #2
 800353a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003540:	2303      	movs	r3, #3
 8003542:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003544:	230b      	movs	r3, #11
 8003546:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800354c:	4619      	mov	r1, r3
 800354e:	480e      	ldr	r0, [pc, #56]	@ (8003588 <HAL_ETH_MspInit+0x128>)
 8003550:	f003 fc82 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003554:	2386      	movs	r3, #134	@ 0x86
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003558:	2302      	movs	r3, #2
 800355a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003560:	2303      	movs	r3, #3
 8003562:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003564:	230b      	movs	r3, #11
 8003566:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800356c:	4619      	mov	r1, r3
 800356e:	4807      	ldr	r0, [pc, #28]	@ (800358c <HAL_ETH_MspInit+0x12c>)
 8003570:	f003 fc72 	bl	8006e58 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8003574:	bf00      	nop
 8003576:	3738      	adds	r7, #56	@ 0x38
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40028000 	.word	0x40028000
 8003580:	40023800 	.word	0x40023800
 8003584:	40021800 	.word	0x40021800
 8003588:	40020800 	.word	0x40020800
 800358c:	40020000 	.word	0x40020000

08003590 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b0ac      	sub	sp, #176	@ 0xb0
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035a8:	f107 0318 	add.w	r3, r7, #24
 80035ac:	2284      	movs	r2, #132	@ 0x84
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f016 fcd9 	bl	8019f68 <memset>
  if(hi2c->Instance==I2C1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a44      	ldr	r2, [pc, #272]	@ (80036cc <HAL_I2C_MspInit+0x13c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d13d      	bne.n	800363c <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80035c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80035c6:	2300      	movs	r3, #0
 80035c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ca:	f107 0318 	add.w	r3, r7, #24
 80035ce:	4618      	mov	r0, r3
 80035d0:	f007 f960 	bl	800a894 <HAL_RCCEx_PeriphCLKConfig>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80035da:	f7ff fd55 	bl	8003088 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035de:	4b3c      	ldr	r3, [pc, #240]	@ (80036d0 <HAL_I2C_MspInit+0x140>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	4a3b      	ldr	r2, [pc, #236]	@ (80036d0 <HAL_I2C_MspInit+0x140>)
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ea:	4b39      	ldr	r3, [pc, #228]	@ (80036d0 <HAL_I2C_MspInit+0x140>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80035f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035fe:	2312      	movs	r3, #18
 8003600:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003604:	2301      	movs	r3, #1
 8003606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360a:	2300      	movs	r3, #0
 800360c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003610:	2304      	movs	r3, #4
 8003612:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003616:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800361a:	4619      	mov	r1, r3
 800361c:	482d      	ldr	r0, [pc, #180]	@ (80036d4 <HAL_I2C_MspInit+0x144>)
 800361e:	f003 fc1b 	bl	8006e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003622:	4b2b      	ldr	r3, [pc, #172]	@ (80036d0 <HAL_I2C_MspInit+0x140>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	4a2a      	ldr	r2, [pc, #168]	@ (80036d0 <HAL_I2C_MspInit+0x140>)
 8003628:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800362c:	6413      	str	r3, [r2, #64]	@ 0x40
 800362e:	4b28      	ldr	r3, [pc, #160]	@ (80036d0 <HAL_I2C_MspInit+0x140>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800363a:	e042      	b.n	80036c2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a25      	ldr	r2, [pc, #148]	@ (80036d8 <HAL_I2C_MspInit+0x148>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d13d      	bne.n	80036c2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003646:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800364a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800364c:	2300      	movs	r3, #0
 800364e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003652:	f107 0318 	add.w	r3, r7, #24
 8003656:	4618      	mov	r0, r3
 8003658:	f007 f91c 	bl	800a894 <HAL_RCCEx_PeriphCLKConfig>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003662:	f7ff fd11 	bl	8003088 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003666:	4b1a      	ldr	r3, [pc, #104]	@ (80036d0 <HAL_I2C_MspInit+0x140>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	4a19      	ldr	r2, [pc, #100]	@ (80036d0 <HAL_I2C_MspInit+0x140>)
 800366c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003670:	6313      	str	r3, [r2, #48]	@ 0x30
 8003672:	4b17      	ldr	r3, [pc, #92]	@ (80036d0 <HAL_I2C_MspInit+0x140>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800367e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003682:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003686:	2312      	movs	r3, #18
 8003688:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800368c:	2301      	movs	r3, #1
 800368e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003692:	2303      	movs	r3, #3
 8003694:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003698:	2304      	movs	r3, #4
 800369a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800369e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80036a2:	4619      	mov	r1, r3
 80036a4:	480d      	ldr	r0, [pc, #52]	@ (80036dc <HAL_I2C_MspInit+0x14c>)
 80036a6:	f003 fbd7 	bl	8006e58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80036aa:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_I2C_MspInit+0x140>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	4a08      	ldr	r2, [pc, #32]	@ (80036d0 <HAL_I2C_MspInit+0x140>)
 80036b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b6:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <HAL_I2C_MspInit+0x140>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
}
 80036c2:	bf00      	nop
 80036c4:	37b0      	adds	r7, #176	@ 0xb0
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40005400 	.word	0x40005400
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40005c00 	.word	0x40005c00
 80036dc:	40021c00 	.word	0x40021c00

080036e0 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08e      	sub	sp, #56	@ 0x38
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a55      	ldr	r2, [pc, #340]	@ (8003854 <HAL_LTDC_MspInit+0x174>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	f040 80a3 	bne.w	800384a <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003704:	4b54      	ldr	r3, [pc, #336]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 8003706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003708:	4a53      	ldr	r2, [pc, #332]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 800370a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800370e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003710:	4b51      	ldr	r3, [pc, #324]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 8003712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003714:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003718:	623b      	str	r3, [r7, #32]
 800371a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800371c:	4b4e      	ldr	r3, [pc, #312]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003720:	4a4d      	ldr	r2, [pc, #308]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 8003722:	f043 0310 	orr.w	r3, r3, #16
 8003726:	6313      	str	r3, [r2, #48]	@ 0x30
 8003728:	4b4b      	ldr	r3, [pc, #300]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003734:	4b48      	ldr	r3, [pc, #288]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	4a47      	ldr	r2, [pc, #284]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 800373a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800373e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003740:	4b45      	ldr	r3, [pc, #276]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800374c:	4b42      	ldr	r3, [pc, #264]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003750:	4a41      	ldr	r2, [pc, #260]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 8003752:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003756:	6313      	str	r3, [r2, #48]	@ 0x30
 8003758:	4b3f      	ldr	r3, [pc, #252]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 800375a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003764:	4b3c      	ldr	r3, [pc, #240]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 8003766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003768:	4a3b      	ldr	r2, [pc, #236]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 800376a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800376e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003770:	4b39      	ldr	r3, [pc, #228]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 8003772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800377c:	4b36      	ldr	r3, [pc, #216]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	4a35      	ldr	r2, [pc, #212]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 8003782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003786:	6313      	str	r3, [r2, #48]	@ 0x30
 8003788:	4b33      	ldr	r3, [pc, #204]	@ (8003858 <HAL_LTDC_MspInit+0x178>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003794:	2310      	movs	r3, #16
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a0:	2300      	movs	r3, #0
 80037a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037a4:	230e      	movs	r3, #14
 80037a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80037a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ac:	4619      	mov	r1, r3
 80037ae:	482b      	ldr	r0, [pc, #172]	@ (800385c <HAL_LTDC_MspInit+0x17c>)
 80037b0:	f003 fb52 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80037b4:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2300      	movs	r3, #0
 80037c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037c6:	230e      	movs	r3, #14
 80037c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80037ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ce:	4619      	mov	r1, r3
 80037d0:	4823      	ldr	r0, [pc, #140]	@ (8003860 <HAL_LTDC_MspInit+0x180>)
 80037d2:	f003 fb41 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80037d6:	23f7      	movs	r3, #247	@ 0xf7
 80037d8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e2:	2300      	movs	r3, #0
 80037e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037e6:	230e      	movs	r3, #14
 80037e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80037ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ee:	4619      	mov	r1, r3
 80037f0:	481c      	ldr	r0, [pc, #112]	@ (8003864 <HAL_LTDC_MspInit+0x184>)
 80037f2:	f003 fb31 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80037f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fc:	2302      	movs	r3, #2
 80037fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003804:	2300      	movs	r3, #0
 8003806:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003808:	2309      	movs	r3, #9
 800380a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800380c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003810:	4619      	mov	r1, r3
 8003812:	4815      	ldr	r0, [pc, #84]	@ (8003868 <HAL_LTDC_MspInit+0x188>)
 8003814:	f003 fb20 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003818:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381e:	2302      	movs	r3, #2
 8003820:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003826:	2300      	movs	r3, #0
 8003828:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800382a:	230e      	movs	r3, #14
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800382e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003832:	4619      	mov	r1, r3
 8003834:	480d      	ldr	r0, [pc, #52]	@ (800386c <HAL_LTDC_MspInit+0x18c>)
 8003836:	f003 fb0f 	bl	8006e58 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800383a:	2200      	movs	r2, #0
 800383c:	2105      	movs	r1, #5
 800383e:	2058      	movs	r0, #88	@ 0x58
 8003840:	f001 ffc6 	bl	80057d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003844:	2058      	movs	r0, #88	@ 0x58
 8003846:	f001 ffdf 	bl	8005808 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800384a:	bf00      	nop
 800384c:	3738      	adds	r7, #56	@ 0x38
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40016800 	.word	0x40016800
 8003858:	40023800 	.word	0x40023800
 800385c:	40021000 	.word	0x40021000
 8003860:	40022400 	.word	0x40022400
 8003864:	40022800 	.word	0x40022800
 8003868:	40021800 	.word	0x40021800
 800386c:	40022000 	.word	0x40022000

08003870 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	@ 0x30
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	f107 031c 	add.w	r3, r7, #28
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a3b      	ldr	r2, [pc, #236]	@ (800397c <HAL_QSPI_MspInit+0x10c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d170      	bne.n	8003974 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003892:	4b3b      	ldr	r3, [pc, #236]	@ (8003980 <HAL_QSPI_MspInit+0x110>)
 8003894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003896:	4a3a      	ldr	r2, [pc, #232]	@ (8003980 <HAL_QSPI_MspInit+0x110>)
 8003898:	f043 0302 	orr.w	r3, r3, #2
 800389c:	6393      	str	r3, [r2, #56]	@ 0x38
 800389e:	4b38      	ldr	r3, [pc, #224]	@ (8003980 <HAL_QSPI_MspInit+0x110>)
 80038a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038aa:	4b35      	ldr	r3, [pc, #212]	@ (8003980 <HAL_QSPI_MspInit+0x110>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	4a34      	ldr	r2, [pc, #208]	@ (8003980 <HAL_QSPI_MspInit+0x110>)
 80038b0:	f043 0310 	orr.w	r3, r3, #16
 80038b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038b6:	4b32      	ldr	r3, [pc, #200]	@ (8003980 <HAL_QSPI_MspInit+0x110>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003980 <HAL_QSPI_MspInit+0x110>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003980 <HAL_QSPI_MspInit+0x110>)
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003980 <HAL_QSPI_MspInit+0x110>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038da:	4b29      	ldr	r3, [pc, #164]	@ (8003980 <HAL_QSPI_MspInit+0x110>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	4a28      	ldr	r2, [pc, #160]	@ (8003980 <HAL_QSPI_MspInit+0x110>)
 80038e0:	f043 0308 	orr.w	r3, r3, #8
 80038e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038e6:	4b26      	ldr	r3, [pc, #152]	@ (8003980 <HAL_QSPI_MspInit+0x110>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80038f2:	2304      	movs	r3, #4
 80038f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fe:	2303      	movs	r3, #3
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003902:	2309      	movs	r3, #9
 8003904:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003906:	f107 031c 	add.w	r3, r7, #28
 800390a:	4619      	mov	r1, r3
 800390c:	481d      	ldr	r0, [pc, #116]	@ (8003984 <HAL_QSPI_MspInit+0x114>)
 800390e:	f003 faa3 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003912:	2340      	movs	r3, #64	@ 0x40
 8003914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	2302      	movs	r3, #2
 8003918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800391e:	2303      	movs	r3, #3
 8003920:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003922:	230a      	movs	r3, #10
 8003924:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003926:	f107 031c 	add.w	r3, r7, #28
 800392a:	4619      	mov	r1, r3
 800392c:	4816      	ldr	r0, [pc, #88]	@ (8003988 <HAL_QSPI_MspInit+0x118>)
 800392e:	f003 fa93 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003932:	2304      	movs	r3, #4
 8003934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003936:	2302      	movs	r3, #2
 8003938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393e:	2303      	movs	r3, #3
 8003940:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003942:	2309      	movs	r3, #9
 8003944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003946:	f107 031c 	add.w	r3, r7, #28
 800394a:	4619      	mov	r1, r3
 800394c:	480e      	ldr	r0, [pc, #56]	@ (8003988 <HAL_QSPI_MspInit+0x118>)
 800394e:	f003 fa83 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003952:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	2303      	movs	r3, #3
 8003962:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003964:	2309      	movs	r3, #9
 8003966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003968:	f107 031c 	add.w	r3, r7, #28
 800396c:	4619      	mov	r1, r3
 800396e:	4807      	ldr	r0, [pc, #28]	@ (800398c <HAL_QSPI_MspInit+0x11c>)
 8003970:	f003 fa72 	bl	8006e58 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003974:	bf00      	nop
 8003976:	3730      	adds	r7, #48	@ 0x30
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	a0001000 	.word	0xa0001000
 8003980:	40023800 	.word	0x40023800
 8003984:	40021000 	.word	0x40021000
 8003988:	40020400 	.word	0x40020400
 800398c:	40020c00 	.word	0x40020c00

08003990 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b0a4      	sub	sp, #144	@ 0x90
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003998:	f107 030c 	add.w	r3, r7, #12
 800399c:	2284      	movs	r2, #132	@ 0x84
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f016 fae1 	bl	8019f68 <memset>
  if(hrtc->Instance==RTC)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a0e      	ldr	r2, [pc, #56]	@ (80039e4 <HAL_RTC_MspInit+0x54>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d114      	bne.n	80039da <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80039b0:	2320      	movs	r3, #32
 80039b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80039b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039ba:	f107 030c 	add.w	r3, r7, #12
 80039be:	4618      	mov	r0, r3
 80039c0:	f006 ff68 	bl	800a894 <HAL_RCCEx_PeriphCLKConfig>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80039ca:	f7ff fb5d 	bl	8003088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_RTC_MspInit+0x58>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d2:	4a05      	ldr	r2, [pc, #20]	@ (80039e8 <HAL_RTC_MspInit+0x58>)
 80039d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039d8:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80039da:	bf00      	nop
 80039dc:	3790      	adds	r7, #144	@ 0x90
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40002800 	.word	0x40002800
 80039e8:	40023800 	.word	0x40023800

080039ec <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	@ 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a25      	ldr	r2, [pc, #148]	@ (8003aa0 <HAL_SD_MspInit+0xb4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d144      	bne.n	8003a98 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003a0e:	4b25      	ldr	r3, [pc, #148]	@ (8003aa4 <HAL_SD_MspInit+0xb8>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	4a24      	ldr	r2, [pc, #144]	@ (8003aa4 <HAL_SD_MspInit+0xb8>)
 8003a14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a1a:	4b22      	ldr	r3, [pc, #136]	@ (8003aa4 <HAL_SD_MspInit+0xb8>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a26:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa4 <HAL_SD_MspInit+0xb8>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa4 <HAL_SD_MspInit+0xb8>)
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a32:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa4 <HAL_SD_MspInit+0xb8>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a3e:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <HAL_SD_MspInit+0xb8>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	4a18      	ldr	r2, [pc, #96]	@ (8003aa4 <HAL_SD_MspInit+0xb8>)
 8003a44:	f043 0308 	orr.w	r3, r3, #8
 8003a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a4a:	4b16      	ldr	r3, [pc, #88]	@ (8003aa4 <HAL_SD_MspInit+0xb8>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003a56:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003a5a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a64:	2303      	movs	r3, #3
 8003a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003a68:	230c      	movs	r3, #12
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	4619      	mov	r1, r3
 8003a72:	480d      	ldr	r0, [pc, #52]	@ (8003aa8 <HAL_SD_MspInit+0xbc>)
 8003a74:	f003 f9f0 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003a78:	2304      	movs	r3, #4
 8003a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a84:	2303      	movs	r3, #3
 8003a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003a88:	230c      	movs	r3, #12
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003a8c:	f107 0314 	add.w	r3, r7, #20
 8003a90:	4619      	mov	r1, r3
 8003a92:	4806      	ldr	r0, [pc, #24]	@ (8003aac <HAL_SD_MspInit+0xc0>)
 8003a94:	f003 f9e0 	bl	8006e58 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003a98:	bf00      	nop
 8003a9a:	3728      	adds	r7, #40	@ 0x28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40020800 	.word	0x40020800
 8003aac:	40020c00 	.word	0x40020c00

08003ab0 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b0aa      	sub	sp, #168	@ 0xa8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	2284      	movs	r2, #132	@ 0x84
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f016 fa49 	bl	8019f68 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8003ade:	d143      	bne.n	8003b68 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003ae0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ae4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8003ae6:	2364      	movs	r3, #100	@ 0x64
 8003ae8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8003aea:	2302      	movs	r3, #2
 8003aec:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003aee:	2302      	movs	r3, #2
 8003af0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003af2:	2302      	movs	r3, #2
 8003af4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003afa:	f107 0310 	add.w	r3, r7, #16
 8003afe:	4618      	mov	r0, r3
 8003b00:	f006 fec8 	bl	800a894 <HAL_RCCEx_PeriphCLKConfig>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8003b0a:	f7ff fabd 	bl	8003088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003b0e:	4b18      	ldr	r3, [pc, #96]	@ (8003b70 <HAL_SPDIFRX_MspInit+0xc0>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	4a17      	ldr	r2, [pc, #92]	@ (8003b70 <HAL_SPDIFRX_MspInit+0xc0>)
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1a:	4b15      	ldr	r3, [pc, #84]	@ (8003b70 <HAL_SPDIFRX_MspInit+0xc0>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b26:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <HAL_SPDIFRX_MspInit+0xc0>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	4a11      	ldr	r2, [pc, #68]	@ (8003b70 <HAL_SPDIFRX_MspInit+0xc0>)
 8003b2c:	f043 0308 	orr.w	r3, r3, #8
 8003b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b32:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <HAL_SPDIFRX_MspInit+0xc0>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003b3e:	2380      	movs	r3, #128	@ 0x80
 8003b40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b44:	2302      	movs	r3, #2
 8003b46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003b56:	2308      	movs	r3, #8
 8003b58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003b5c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003b60:	4619      	mov	r1, r3
 8003b62:	4804      	ldr	r0, [pc, #16]	@ (8003b74 <HAL_SPDIFRX_MspInit+0xc4>)
 8003b64:	f003 f978 	bl	8006e58 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8003b68:	bf00      	nop
 8003b6a:	37a8      	adds	r7, #168	@ 0xa8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40020c00 	.word	0x40020c00

08003b78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	@ 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a25      	ldr	r2, [pc, #148]	@ (8003c2c <HAL_SPI_MspInit+0xb4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d144      	bne.n	8003c24 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b9a:	4b25      	ldr	r3, [pc, #148]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	4a24      	ldr	r2, [pc, #144]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ba6:	4b22      	ldr	r3, [pc, #136]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bca:	4b19      	ldr	r3, [pc, #100]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	4a18      	ldr	r2, [pc, #96]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bd6:	4b16      	ldr	r3, [pc, #88]	@ (8003c30 <HAL_SPI_MspInit+0xb8>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003be2:	2302      	movs	r3, #2
 8003be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be6:	2302      	movs	r3, #2
 8003be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bf2:	2305      	movs	r3, #5
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003bf6:	f107 0314 	add.w	r3, r7, #20
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	480d      	ldr	r0, [pc, #52]	@ (8003c34 <HAL_SPI_MspInit+0xbc>)
 8003bfe:	f003 f92b 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003c02:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c10:	2300      	movs	r3, #0
 8003c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c14:	2305      	movs	r3, #5
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4806      	ldr	r0, [pc, #24]	@ (8003c38 <HAL_SPI_MspInit+0xc0>)
 8003c20:	f003 f91a 	bl	8006e58 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003c24:	bf00      	nop
 8003c26:	3728      	adds	r7, #40	@ 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40003800 	.word	0x40003800
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40022000 	.word	0x40022000
 8003c38:	40020400 	.word	0x40020400

08003c3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	@ 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2e      	ldr	r2, [pc, #184]	@ (8003d04 <HAL_TIM_Base_MspInit+0xc8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10c      	bne.n	8003c68 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	4a2d      	ldr	r2, [pc, #180]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c66:	e046      	b.n	8003cf6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c70:	d10c      	bne.n	8003c8c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c72:	4b25      	ldr	r3, [pc, #148]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	4a24      	ldr	r2, [pc, #144]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c7e:	4b22      	ldr	r3, [pc, #136]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	69bb      	ldr	r3, [r7, #24]
}
 8003c8a:	e034      	b.n	8003cf6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1e      	ldr	r2, [pc, #120]	@ (8003d0c <HAL_TIM_Base_MspInit+0xd0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10c      	bne.n	8003cb0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c96:	4b1c      	ldr	r3, [pc, #112]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ca2:	4b19      	ldr	r3, [pc, #100]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	697b      	ldr	r3, [r7, #20]
}
 8003cae:	e022      	b.n	8003cf6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a16      	ldr	r2, [pc, #88]	@ (8003d10 <HAL_TIM_Base_MspInit+0xd4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003cba:	4b13      	ldr	r3, [pc, #76]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	4a12      	ldr	r2, [pc, #72]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003cc0:	f043 0308 	orr.w	r3, r3, #8
 8003cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
}
 8003cd2:	e010      	b.n	8003cf6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8003d14 <HAL_TIM_Base_MspInit+0xd8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003cde:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	4a09      	ldr	r2, [pc, #36]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cea:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <HAL_TIM_Base_MspInit+0xcc>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
}
 8003cf6:	bf00      	nop
 8003cf8:	3724      	adds	r7, #36	@ 0x24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40010000 	.word	0x40010000
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000c00 	.word	0x40000c00
 8003d14:	40010400 	.word	0x40010400

08003d18 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0a      	ldr	r2, [pc, #40]	@ (8003d50 <HAL_TIM_PWM_MspInit+0x38>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d10b      	bne.n	8003d42 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d54 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	4a09      	ldr	r2, [pc, #36]	@ (8003d54 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d36:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40001800 	.word	0x40001800
 8003d54:	40023800 	.word	0x40023800

08003d58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	@ 0x30
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d60:	f107 031c 	add.w	r3, r7, #28
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
 8003d6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a56      	ldr	r2, [pc, #344]	@ (8003ed0 <HAL_TIM_MspPostInit+0x178>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d11d      	bne.n	8003db6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7a:	4b56      	ldr	r3, [pc, #344]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7e:	4a55      	ldr	r2, [pc, #340]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d86:	4b53      	ldr	r3, [pc, #332]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003d92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da0:	2300      	movs	r3, #0
 8003da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003da4:	2301      	movs	r3, #1
 8003da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003da8:	f107 031c 	add.w	r3, r7, #28
 8003dac:	4619      	mov	r1, r3
 8003dae:	484a      	ldr	r0, [pc, #296]	@ (8003ed8 <HAL_TIM_MspPostInit+0x180>)
 8003db0:	f003 f852 	bl	8006e58 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003db4:	e087      	b.n	8003ec6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dbe:	d11d      	bne.n	8003dfc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc0:	4b44      	ldr	r3, [pc, #272]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc4:	4a43      	ldr	r2, [pc, #268]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dcc:	4b41      	ldr	r3, [pc, #260]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003dd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dde:	2302      	movs	r3, #2
 8003de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de6:	2300      	movs	r3, #0
 8003de8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dea:	2301      	movs	r3, #1
 8003dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003dee:	f107 031c 	add.w	r3, r7, #28
 8003df2:	4619      	mov	r1, r3
 8003df4:	4838      	ldr	r0, [pc, #224]	@ (8003ed8 <HAL_TIM_MspPostInit+0x180>)
 8003df6:	f003 f82f 	bl	8006e58 <HAL_GPIO_Init>
}
 8003dfa:	e064      	b.n	8003ec6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a36      	ldr	r2, [pc, #216]	@ (8003edc <HAL_TIM_MspPostInit+0x184>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d11c      	bne.n	8003e40 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e06:	4b33      	ldr	r3, [pc, #204]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	4a32      	ldr	r2, [pc, #200]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003e0c:	f043 0302 	orr.w	r3, r3, #2
 8003e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e12:	4b30      	ldr	r3, [pc, #192]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003e1e:	2310      	movs	r3, #16
 8003e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e22:	2302      	movs	r3, #2
 8003e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003e32:	f107 031c 	add.w	r3, r7, #28
 8003e36:	4619      	mov	r1, r3
 8003e38:	4829      	ldr	r0, [pc, #164]	@ (8003ee0 <HAL_TIM_MspPostInit+0x188>)
 8003e3a:	f003 f80d 	bl	8006e58 <HAL_GPIO_Init>
}
 8003e3e:	e042      	b.n	8003ec6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a27      	ldr	r2, [pc, #156]	@ (8003ee4 <HAL_TIM_MspPostInit+0x18c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d11c      	bne.n	8003e84 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e4a:	4b22      	ldr	r3, [pc, #136]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	4a21      	ldr	r2, [pc, #132]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e56:	4b1f      	ldr	r3, [pc, #124]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003e62:	2301      	movs	r3, #1
 8003e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003e72:	2302      	movs	r3, #2
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003e76:	f107 031c 	add.w	r3, r7, #28
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	481a      	ldr	r0, [pc, #104]	@ (8003ee8 <HAL_TIM_MspPostInit+0x190>)
 8003e7e:	f002 ffeb 	bl	8006e58 <HAL_GPIO_Init>
}
 8003e82:	e020      	b.n	8003ec6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a18      	ldr	r2, [pc, #96]	@ (8003eec <HAL_TIM_MspPostInit+0x194>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d11b      	bne.n	8003ec6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e8e:	4b11      	ldr	r3, [pc, #68]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	4a10      	ldr	r2, [pc, #64]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ed4 <HAL_TIM_MspPostInit+0x17c>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003ea6:	2340      	movs	r3, #64	@ 0x40
 8003ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003eb6:	2309      	movs	r3, #9
 8003eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003eba:	f107 031c 	add.w	r3, r7, #28
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	480b      	ldr	r0, [pc, #44]	@ (8003ef0 <HAL_TIM_MspPostInit+0x198>)
 8003ec2:	f002 ffc9 	bl	8006e58 <HAL_GPIO_Init>
}
 8003ec6:	bf00      	nop
 8003ec8:	3730      	adds	r7, #48	@ 0x30
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40020400 	.word	0x40020400
 8003ee4:	40000c00 	.word	0x40000c00
 8003ee8:	40022000 	.word	0x40022000
 8003eec:	40001800 	.word	0x40001800
 8003ef0:	40021c00 	.word	0x40021c00

08003ef4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b0ae      	sub	sp, #184	@ 0xb8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f0c:	f107 0320 	add.w	r3, r7, #32
 8003f10:	2284      	movs	r2, #132	@ 0x84
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f016 f827 	bl	8019f68 <memset>
  if(huart->Instance==USART1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a53      	ldr	r2, [pc, #332]	@ (800406c <HAL_UART_MspInit+0x178>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d15d      	bne.n	8003fe0 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f24:	2340      	movs	r3, #64	@ 0x40
 8003f26:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f2c:	f107 0320 	add.w	r3, r7, #32
 8003f30:	4618      	mov	r0, r3
 8003f32:	f006 fcaf 	bl	800a894 <HAL_RCCEx_PeriphCLKConfig>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f3c:	f7ff f8a4 	bl	8003088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f40:	4b4b      	ldr	r3, [pc, #300]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 8003f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f44:	4a4a      	ldr	r2, [pc, #296]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 8003f46:	f043 0310 	orr.w	r3, r3, #16
 8003f4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f4c:	4b48      	ldr	r3, [pc, #288]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f58:	4b45      	ldr	r3, [pc, #276]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5c:	4a44      	ldr	r2, [pc, #272]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 8003f5e:	f043 0302 	orr.w	r3, r3, #2
 8003f62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f64:	4b42      	ldr	r3, [pc, #264]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 8003f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f70:	4b3f      	ldr	r3, [pc, #252]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f74:	4a3e      	ldr	r2, [pc, #248]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003f88:	2380      	movs	r3, #128	@ 0x80
 8003f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fa0:	2307      	movs	r3, #7
 8003fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003fa6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4831      	ldr	r0, [pc, #196]	@ (8004074 <HAL_UART_MspInit+0x180>)
 8003fae:	f002 ff53 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003fb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fcc:	2307      	movs	r3, #7
 8003fce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003fd2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4827      	ldr	r0, [pc, #156]	@ (8004078 <HAL_UART_MspInit+0x184>)
 8003fda:	f002 ff3d 	bl	8006e58 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8003fde:	e040      	b.n	8004062 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a25      	ldr	r2, [pc, #148]	@ (800407c <HAL_UART_MspInit+0x188>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d13b      	bne.n	8004062 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003fea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003fee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ff4:	f107 0320 	add.w	r3, r7, #32
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f006 fc4b 	bl	800a894 <HAL_RCCEx_PeriphCLKConfig>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8004004:	f7ff f840 	bl	8003088 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004008:	4b19      	ldr	r3, [pc, #100]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 800400a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400c:	4a18      	ldr	r2, [pc, #96]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	6453      	str	r3, [r2, #68]	@ 0x44
 8004014:	4b16      	ldr	r3, [pc, #88]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 8004016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004020:	4b13      	ldr	r3, [pc, #76]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	4a12      	ldr	r2, [pc, #72]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	6313      	str	r3, [r2, #48]	@ 0x30
 800402c:	4b10      	ldr	r3, [pc, #64]	@ (8004070 <HAL_UART_MspInit+0x17c>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004038:	23c0      	movs	r3, #192	@ 0xc0
 800403a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403e:	2302      	movs	r3, #2
 8004040:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004044:	2300      	movs	r3, #0
 8004046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404a:	2303      	movs	r3, #3
 800404c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004050:	2308      	movs	r3, #8
 8004052:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004056:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800405a:	4619      	mov	r1, r3
 800405c:	4808      	ldr	r0, [pc, #32]	@ (8004080 <HAL_UART_MspInit+0x18c>)
 800405e:	f002 fefb 	bl	8006e58 <HAL_GPIO_Init>
}
 8004062:	bf00      	nop
 8004064:	37b8      	adds	r7, #184	@ 0xb8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40011000 	.word	0x40011000
 8004070:	40023800 	.word	0x40023800
 8004074:	40020400 	.word	0x40020400
 8004078:	40020000 	.word	0x40020000
 800407c:	40011400 	.word	0x40011400
 8004080:	40020800 	.word	0x40020800

08004084 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004098:	4b3a      	ldr	r3, [pc, #232]	@ (8004184 <HAL_FMC_MspInit+0x100>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d16d      	bne.n	800417c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80040a0:	4b38      	ldr	r3, [pc, #224]	@ (8004184 <HAL_FMC_MspInit+0x100>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80040a6:	4b38      	ldr	r3, [pc, #224]	@ (8004188 <HAL_FMC_MspInit+0x104>)
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	4a37      	ldr	r2, [pc, #220]	@ (8004188 <HAL_FMC_MspInit+0x104>)
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	6393      	str	r3, [r2, #56]	@ 0x38
 80040b2:	4b35      	ldr	r3, [pc, #212]	@ (8004188 <HAL_FMC_MspInit+0x104>)
 80040b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80040be:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80040c2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c4:	2302      	movs	r3, #2
 80040c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040cc:	2303      	movs	r3, #3
 80040ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040d0:	230c      	movs	r3, #12
 80040d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040d4:	1d3b      	adds	r3, r7, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	482c      	ldr	r0, [pc, #176]	@ (800418c <HAL_FMC_MspInit+0x108>)
 80040da:	f002 febd 	bl	8006e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80040de:	f248 1333 	movw	r3, #33075	@ 0x8133
 80040e2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e4:	2302      	movs	r3, #2
 80040e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ec:	2303      	movs	r3, #3
 80040ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040f0:	230c      	movs	r3, #12
 80040f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	4619      	mov	r1, r3
 80040f8:	4825      	ldr	r0, [pc, #148]	@ (8004190 <HAL_FMC_MspInit+0x10c>)
 80040fa:	f002 fead 	bl	8006e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80040fe:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004102:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	2302      	movs	r3, #2
 8004106:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410c:	2303      	movs	r3, #3
 800410e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004110:	230c      	movs	r3, #12
 8004112:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004114:	1d3b      	adds	r3, r7, #4
 8004116:	4619      	mov	r1, r3
 8004118:	481e      	ldr	r0, [pc, #120]	@ (8004194 <HAL_FMC_MspInit+0x110>)
 800411a:	f002 fe9d 	bl	8006e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800411e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004122:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004124:	2302      	movs	r3, #2
 8004126:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800412c:	2303      	movs	r3, #3
 800412e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004130:	230c      	movs	r3, #12
 8004132:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	4619      	mov	r1, r3
 8004138:	4817      	ldr	r0, [pc, #92]	@ (8004198 <HAL_FMC_MspInit+0x114>)
 800413a:	f002 fe8d 	bl	8006e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800413e:	2328      	movs	r3, #40	@ 0x28
 8004140:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004142:	2302      	movs	r3, #2
 8004144:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800414a:	2303      	movs	r3, #3
 800414c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800414e:	230c      	movs	r3, #12
 8004150:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4811      	ldr	r0, [pc, #68]	@ (800419c <HAL_FMC_MspInit+0x118>)
 8004158:	f002 fe7e 	bl	8006e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800415c:	2308      	movs	r3, #8
 800415e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004160:	2302      	movs	r3, #2
 8004162:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004168:	2303      	movs	r3, #3
 800416a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800416c:	230c      	movs	r3, #12
 800416e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004170:	1d3b      	adds	r3, r7, #4
 8004172:	4619      	mov	r1, r3
 8004174:	480a      	ldr	r0, [pc, #40]	@ (80041a0 <HAL_FMC_MspInit+0x11c>)
 8004176:	f002 fe6f 	bl	8006e58 <HAL_GPIO_Init>
 800417a:	e000      	b.n	800417e <HAL_FMC_MspInit+0xfa>
    return;
 800417c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20001338 	.word	0x20001338
 8004188:	40023800 	.word	0x40023800
 800418c:	40021000 	.word	0x40021000
 8004190:	40021800 	.word	0x40021800
 8004194:	40020c00 	.word	0x40020c00
 8004198:	40021400 	.word	0x40021400
 800419c:	40021c00 	.word	0x40021c00
 80041a0:	40020800 	.word	0x40020800

080041a4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80041ac:	f7ff ff6a 	bl	8004084 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	@ 0x28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004274 <HAL_SAI_MspInit+0xbc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d124      	bne.n	8004214 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80041ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004278 <HAL_SAI_MspInit+0xc0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80041d2:	4b2a      	ldr	r3, [pc, #168]	@ (800427c <HAL_SAI_MspInit+0xc4>)
 80041d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d6:	4a29      	ldr	r2, [pc, #164]	@ (800427c <HAL_SAI_MspInit+0xc4>)
 80041d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80041de:	4b27      	ldr	r3, [pc, #156]	@ (800427c <HAL_SAI_MspInit+0xc4>)
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80041ea:	4b23      	ldr	r3, [pc, #140]	@ (8004278 <HAL_SAI_MspInit+0xc0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3301      	adds	r3, #1
 80041f0:	4a21      	ldr	r2, [pc, #132]	@ (8004278 <HAL_SAI_MspInit+0xc0>)
 80041f2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80041f4:	23f0      	movs	r3, #240	@ 0xf0
 80041f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f8:	2302      	movs	r3, #2
 80041fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004200:	2300      	movs	r3, #0
 8004202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004204:	230a      	movs	r3, #10
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004208:	f107 0314 	add.w	r3, r7, #20
 800420c:	4619      	mov	r1, r3
 800420e:	481c      	ldr	r0, [pc, #112]	@ (8004280 <HAL_SAI_MspInit+0xc8>)
 8004210:	f002 fe22 	bl	8006e58 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1a      	ldr	r2, [pc, #104]	@ (8004284 <HAL_SAI_MspInit+0xcc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d125      	bne.n	800426a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800421e:	4b16      	ldr	r3, [pc, #88]	@ (8004278 <HAL_SAI_MspInit+0xc0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004226:	4b15      	ldr	r3, [pc, #84]	@ (800427c <HAL_SAI_MspInit+0xc4>)
 8004228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422a:	4a14      	ldr	r2, [pc, #80]	@ (800427c <HAL_SAI_MspInit+0xc4>)
 800422c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004230:	6453      	str	r3, [r2, #68]	@ 0x44
 8004232:	4b12      	ldr	r3, [pc, #72]	@ (800427c <HAL_SAI_MspInit+0xc4>)
 8004234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800423e:	4b0e      	ldr	r3, [pc, #56]	@ (8004278 <HAL_SAI_MspInit+0xc0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3301      	adds	r3, #1
 8004244:	4a0c      	ldr	r2, [pc, #48]	@ (8004278 <HAL_SAI_MspInit+0xc0>)
 8004246:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800424c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424e:	2302      	movs	r3, #2
 8004250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004256:	2300      	movs	r3, #0
 8004258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800425a:	230a      	movs	r3, #10
 800425c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800425e:	f107 0314 	add.w	r3, r7, #20
 8004262:	4619      	mov	r1, r3
 8004264:	4808      	ldr	r0, [pc, #32]	@ (8004288 <HAL_SAI_MspInit+0xd0>)
 8004266:	f002 fdf7 	bl	8006e58 <HAL_GPIO_Init>

    }
}
 800426a:	bf00      	nop
 800426c:	3728      	adds	r7, #40	@ 0x28
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40015c04 	.word	0x40015c04
 8004278:	2000133c 	.word	0x2000133c
 800427c:	40023800 	.word	0x40023800
 8004280:	40022000 	.word	0x40022000
 8004284:	40015c24 	.word	0x40015c24
 8004288:	40021800 	.word	0x40021800

0800428c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08e      	sub	sp, #56	@ 0x38
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800429c:	4b33      	ldr	r3, [pc, #204]	@ (800436c <HAL_InitTick+0xe0>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	4a32      	ldr	r2, [pc, #200]	@ (800436c <HAL_InitTick+0xe0>)
 80042a2:	f043 0310 	orr.w	r3, r3, #16
 80042a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80042a8:	4b30      	ldr	r3, [pc, #192]	@ (800436c <HAL_InitTick+0xe0>)
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80042b4:	f107 0210 	add.w	r2, r7, #16
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f006 fab6 	bl	800a830 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80042c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d103      	bne.n	80042d6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80042ce:	f006 fa87 	bl	800a7e0 <HAL_RCC_GetPCLK1Freq>
 80042d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80042d4:	e004      	b.n	80042e0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80042d6:	f006 fa83 	bl	800a7e0 <HAL_RCC_GetPCLK1Freq>
 80042da:	4603      	mov	r3, r0
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e2:	4a23      	ldr	r2, [pc, #140]	@ (8004370 <HAL_InitTick+0xe4>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	0c9b      	lsrs	r3, r3, #18
 80042ea:	3b01      	subs	r3, #1
 80042ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80042ee:	4b21      	ldr	r3, [pc, #132]	@ (8004374 <HAL_InitTick+0xe8>)
 80042f0:	4a21      	ldr	r2, [pc, #132]	@ (8004378 <HAL_InitTick+0xec>)
 80042f2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80042f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004374 <HAL_InitTick+0xe8>)
 80042f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80042fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80042fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004374 <HAL_InitTick+0xe8>)
 80042fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004300:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004302:	4b1c      	ldr	r3, [pc, #112]	@ (8004374 <HAL_InitTick+0xe8>)
 8004304:	2200      	movs	r2, #0
 8004306:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004308:	4b1a      	ldr	r3, [pc, #104]	@ (8004374 <HAL_InitTick+0xe8>)
 800430a:	2200      	movs	r2, #0
 800430c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800430e:	4b19      	ldr	r3, [pc, #100]	@ (8004374 <HAL_InitTick+0xe8>)
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004314:	4817      	ldr	r0, [pc, #92]	@ (8004374 <HAL_InitTick+0xe8>)
 8004316:	f008 fe12 	bl	800cf3e <HAL_TIM_Base_Init>
 800431a:	4603      	mov	r3, r0
 800431c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004320:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004324:	2b00      	cmp	r3, #0
 8004326:	d11b      	bne.n	8004360 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004328:	4812      	ldr	r0, [pc, #72]	@ (8004374 <HAL_InitTick+0xe8>)
 800432a:	f008 fe5f 	bl	800cfec <HAL_TIM_Base_Start_IT>
 800432e:	4603      	mov	r3, r0
 8004330:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004334:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004338:	2b00      	cmp	r3, #0
 800433a:	d111      	bne.n	8004360 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800433c:	2036      	movs	r0, #54	@ 0x36
 800433e:	f001 fa63 	bl	8005808 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b0f      	cmp	r3, #15
 8004346:	d808      	bhi.n	800435a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004348:	2200      	movs	r2, #0
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	2036      	movs	r0, #54	@ 0x36
 800434e:	f001 fa3f 	bl	80057d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004352:	4a0a      	ldr	r2, [pc, #40]	@ (800437c <HAL_InitTick+0xf0>)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	e002      	b.n	8004360 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004360:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004364:	4618      	mov	r0, r3
 8004366:	3738      	adds	r7, #56	@ 0x38
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40023800 	.word	0x40023800
 8004370:	431bde83 	.word	0x431bde83
 8004374:	20001340 	.word	0x20001340
 8004378:	40001000 	.word	0x40001000
 800437c:	20000064 	.word	0x20000064

08004380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <NMI_Handler+0x4>

08004388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800438c:	bf00      	nop
 800438e:	e7fd      	b.n	800438c <HardFault_Handler+0x4>

08004390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004394:	bf00      	nop
 8004396:	e7fd      	b.n	8004394 <MemManage_Handler+0x4>

08004398 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800439c:	bf00      	nop
 800439e:	e7fd      	b.n	800439c <BusFault_Handler+0x4>

080043a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043a4:	bf00      	nop
 80043a6:	e7fd      	b.n	80043a4 <UsageFault_Handler+0x4>

080043a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80043bc:	4802      	ldr	r0, [pc, #8]	@ (80043c8 <TIM6_DAC_IRQHandler+0x10>)
 80043be:	f008 fee4 	bl	800d18a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20001340 	.word	0x20001340

080043cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80043d0:	4802      	ldr	r0, [pc, #8]	@ (80043dc <OTG_FS_IRQHandler+0x10>)
 80043d2:	f003 f9e7 	bl	80077a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20009d88 	.word	0x20009d88

080043e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80043e4:	4802      	ldr	r0, [pc, #8]	@ (80043f0 <LTDC_IRQHandler+0x10>)
 80043e6:	f005 fa01 	bl	80097ec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000a5c 	.word	0x20000a5c

080043f4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80043f8:	4802      	ldr	r0, [pc, #8]	@ (8004404 <DMA2D_IRQHandler+0x10>)
 80043fa:	f002 f83d 	bl	8006478 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80043fe:	bf00      	nop
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200008c4 	.word	0x200008c4

08004408 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800440c:	4802      	ldr	r0, [pc, #8]	@ (8004418 <DMA2_Stream1_IRQHandler+0x10>)
 800440e:	f001 fd73 	bl	8005ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	200012c8 	.word	0x200012c8

0800441c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8004420:	4b09      	ldr	r3, [pc, #36]	@ (8004448 <USART6_IRQHandler+0x2c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b10      	cmp	r3, #16
 800442c:	d106      	bne.n	800443c <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 800442e:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <USART6_IRQHandler+0x2c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2210      	movs	r2, #16
 8004434:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 8004436:	4804      	ldr	r0, [pc, #16]	@ (8004448 <USART6_IRQHandler+0x2c>)
 8004438:	f000 fd6c 	bl	8004f14 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800443c:	4802      	ldr	r0, [pc, #8]	@ (8004448 <USART6_IRQHandler+0x2c>)
 800443e:	f00a f8ef 	bl	800e620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000ffc 	.word	0x20000ffc

0800444c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004454:	4a14      	ldr	r2, [pc, #80]	@ (80044a8 <_sbrk+0x5c>)
 8004456:	4b15      	ldr	r3, [pc, #84]	@ (80044ac <_sbrk+0x60>)
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004460:	4b13      	ldr	r3, [pc, #76]	@ (80044b0 <_sbrk+0x64>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d102      	bne.n	800446e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004468:	4b11      	ldr	r3, [pc, #68]	@ (80044b0 <_sbrk+0x64>)
 800446a:	4a12      	ldr	r2, [pc, #72]	@ (80044b4 <_sbrk+0x68>)
 800446c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800446e:	4b10      	ldr	r3, [pc, #64]	@ (80044b0 <_sbrk+0x64>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	d207      	bcs.n	800448c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800447c:	f015 fdb6 	bl	8019fec <__errno>
 8004480:	4603      	mov	r3, r0
 8004482:	220c      	movs	r2, #12
 8004484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	e009      	b.n	80044a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800448c:	4b08      	ldr	r3, [pc, #32]	@ (80044b0 <_sbrk+0x64>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004492:	4b07      	ldr	r3, [pc, #28]	@ (80044b0 <_sbrk+0x64>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4413      	add	r3, r2
 800449a:	4a05      	ldr	r2, [pc, #20]	@ (80044b0 <_sbrk+0x64>)
 800449c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800449e:	68fb      	ldr	r3, [r7, #12]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20050000 	.word	0x20050000
 80044ac:	00000400 	.word	0x00000400
 80044b0:	2000138c 	.word	0x2000138c
 80044b4:	2000a2b0 	.word	0x2000a2b0

080044b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044bc:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <SystemInit+0x20>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c2:	4a05      	ldr	r2, [pc, #20]	@ (80044d8 <SystemInit+0x20>)
 80044c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044cc:	bf00      	nop
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 80044e0:	f000 f803 	bl	80044ea <TIME_Platform_GetCurrentMs>
 80044e4:	4603      	mov	r3, r0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	bd80      	pop	{r7, pc}

080044ea <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 80044ee:	f000 fdef 	bl	80050d0 <HAL_GetTick>
 80044f2:	4603      	mov	r3, r0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <LOGGER_Connect+0x16>
 8004508:	f04f 33ff 	mov.w	r3, #4294967295
 800450c:	e016      	b.n	800453c <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 800450e:	223f      	movs	r2, #63	@ 0x3f
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	480c      	ldr	r0, [pc, #48]	@ (8004544 <LOGGER_Connect+0x4c>)
 8004514:	f015 fd30 	bl	8019f78 <strncpy>
    current_config.server_port = port;
 8004518:	4a0b      	ldr	r2, [pc, #44]	@ (8004548 <LOGGER_Connect+0x50>)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 800451e:	6839      	ldr	r1, [r7, #0]
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f8a5 	bl	8004670 <LOGGER_Platform_Connect>
 8004526:	4603      	mov	r3, r0
 8004528:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 800452a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <LOGGER_Connect+0x40>
        logger_connected = true;
 8004532:	4b06      	ldr	r3, [pc, #24]	@ (800454c <LOGGER_Connect+0x54>)
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8004538:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	2000001f 	.word	0x2000001f
 8004548:	2000001c 	.word	0x2000001c
 800454c:	20001390 	.word	0x20001390

08004550 <LOGGER_Send>:
        logger_connected = false;
    }
    return status;
}

LoggerStatus LOGGER_Send(const char* message) {
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
    if (!logger_connected || message == NULL) return LOGGER_STATUS_ERROR;
 8004558:	4b14      	ldr	r3, [pc, #80]	@ (80045ac <LOGGER_Send+0x5c>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	f083 0301 	eor.w	r3, r3, #1
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d102      	bne.n	800456c <LOGGER_Send+0x1c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <LOGGER_Send+0x22>
 800456c:	f04f 33ff 	mov.w	r3, #4294967295
 8004570:	e017      	b.n	80045a2 <LOGGER_Send+0x52>
    
    // Network 모듈을 통해 로그 전송 (SD카드 또는 소켓)
    if (Network_IsConnected()) {
 8004572:	f7fc fc4d 	bl	8000e10 <Network_IsConnected>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00e      	beq.n	800459a <LOGGER_Send+0x4a>
        int result = Network_SendBinary(message, strlen(message) + 1); // null terminator 포함
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fb fe51 	bl	8000224 <strlen>
 8004582:	4603      	mov	r3, r0
 8004584:	3301      	adds	r3, #1
 8004586:	4619      	mov	r1, r3
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fc fbf7 	bl	8000d7c <Network_SendBinary>
 800458e:	60f8      	str	r0, [r7, #12]
        if (result == NETWORK_OK) {
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <LOGGER_Send+0x4a>
            return LOGGER_STATUS_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e003      	b.n	80045a2 <LOGGER_Send+0x52>
        }
    }
    
    // Network 모듈 사용 실패 시 기존 플랫폼 방식 사용
    return LOGGER_Platform_Send(message);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f874 	bl	8004688 <LOGGER_Platform_Send>
 80045a0:	4603      	mov	r3, r0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20001390 	.word	0x20001390

080045b0 <LOGGER_SendFormatted>:

bool LOGGER_IsConnected(void) {
    return logger_connected;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 80045b0:	b40e      	push	{r1, r2, r3}
 80045b2:	b590      	push	{r4, r7, lr}
 80045b4:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4602      	mov	r2, r0
 80045bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045c0:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80045c4:	701a      	strb	r2, [r3, #0]
    if (level < current_config.level) return;
 80045c6:	4b27      	ldr	r3, [pc, #156]	@ (8004664 <LOGGER_SendFormatted+0xb4>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80045ce:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 80045d2:	7812      	ldrb	r2, [r2, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d33c      	bcc.n	8004652 <LOGGER_SendFormatted+0xa2>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 80045d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045dc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80045e0:	4a21      	ldr	r2, [pc, #132]	@ (8004668 <LOGGER_SendFormatted+0xb8>)
 80045e2:	461c      	mov	r4, r3
 80045e4:	4613      	mov	r3, r2
 80045e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 80045ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045f0:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80045f4:	781a      	ldrb	r2, [r3, #0]
 80045f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045fa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80045fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004602:	f107 001c 	add.w	r0, r7, #28
 8004606:	4a19      	ldr	r2, [pc, #100]	@ (800466c <LOGGER_SendFormatted+0xbc>)
 8004608:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800460c:	f015 fc18 	bl	8019e40 <sniprintf>
 8004610:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 8004614:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8004618:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800461c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004620:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 8004622:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004626:	f107 021c 	add.w	r2, r7, #28
 800462a:	18d0      	adds	r0, r2, r3
 800462c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004630:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8004634:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004638:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8004642:	f015 fc83 	bl	8019f4c <vsniprintf>
    va_end(args);
    
    LOGGER_Send(buffer);
 8004646:	f107 031c 	add.w	r3, r7, #28
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ff80 	bl	8004550 <LOGGER_Send>
 8004650:	e000      	b.n	8004654 <LOGGER_SendFormatted+0xa4>
    if (level < current_config.level) return;
 8004652:	bf00      	nop
}
 8004654:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004658:	46bd      	mov	sp, r7
 800465a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800465e:	b003      	add	sp, #12
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	2000001c 	.word	0x2000001c
 8004668:	0801bb58 	.word	0x0801bb58
 800466c:	0801bb68 	.word	0x0801bb68

08004670 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <LOGGER_Platform_Send+0x14>
 8004696:	f04f 33ff 	mov.w	r3, #4294967295
 800469a:	e01c      	b.n	80046d6 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fb fdc1 	bl	8000224 <strlen>
 80046a2:	4603      	mov	r3, r0
 80046a4:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	dd12      	ble.n	80046d2 <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	480a      	ldr	r0, [pc, #40]	@ (80046e0 <LOGGER_Platform_Send+0x58>)
 80046b8:	f009 fd8a 	bl	800e1d0 <HAL_UART_Transmit>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 80046c2:	2364      	movs	r3, #100	@ 0x64
 80046c4:	2202      	movs	r2, #2
 80046c6:	4907      	ldr	r1, [pc, #28]	@ (80046e4 <LOGGER_Platform_Send+0x5c>)
 80046c8:	4805      	ldr	r0, [pc, #20]	@ (80046e0 <LOGGER_Platform_Send+0x58>)
 80046ca:	f009 fd81 	bl	800e1d0 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e001      	b.n	80046d6 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 80046d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20000f74 	.word	0x20000f74
 80046e4:	0801bb6c 	.word	0x0801bb6c

080046e8 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d105      	bne.n	8004702 <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 80046f6:	4913      	ldr	r1, [pc, #76]	@ (8004744 <UART_Connect+0x5c>)
 80046f8:	2003      	movs	r0, #3
 80046fa:	f7ff ff59 	bl	80045b0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e01c      	b.n	800473c <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4910      	ldr	r1, [pc, #64]	@ (8004748 <UART_Connect+0x60>)
 8004706:	2001      	movs	r0, #1
 8004708:	f7ff ff52 	bl	80045b0 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f8fb 	bl	8004908 <UART_Platform_Connect>
 8004712:	4603      	mov	r3, r0
 8004714:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d108      	bne.n	800472e <UART_Connect+0x46>
        uart_connected = true;
 800471c:	4b0b      	ldr	r3, [pc, #44]	@ (800474c <UART_Connect+0x64>)
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	490a      	ldr	r1, [pc, #40]	@ (8004750 <UART_Connect+0x68>)
 8004726:	2001      	movs	r0, #1
 8004728:	f7ff ff42 	bl	80045b0 <LOGGER_SendFormatted>
 800472c:	e005      	b.n	800473a <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	4908      	ldr	r1, [pc, #32]	@ (8004754 <UART_Connect+0x6c>)
 8004734:	2003      	movs	r0, #3
 8004736:	f7ff ff3b 	bl	80045b0 <LOGGER_SendFormatted>
    }

    return status;
 800473a:	7bfb      	ldrb	r3, [r7, #15]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	0801bb70 	.word	0x0801bb70
 8004748:	0801bb94 	.word	0x0801bb94
 800474c:	20001391 	.word	0x20001391
 8004750:	0801bbac 	.word	0x0801bbac
 8004754:	0801bbd0 	.word	0x0801bbd0

08004758 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8004760:	4b19      	ldr	r3, [pc, #100]	@ (80047c8 <UART_Send+0x70>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f083 0301 	eor.w	r3, r3, #1
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 800476e:	4917      	ldr	r1, [pc, #92]	@ (80047cc <UART_Send+0x74>)
 8004770:	2003      	movs	r0, #3
 8004772:	f7ff ff1d 	bl	80045b0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e022      	b.n	80047c0 <UART_Send+0x68>
    }

    if (data == NULL) {
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d105      	bne.n	800478c <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8004780:	4913      	ldr	r1, [pc, #76]	@ (80047d0 <UART_Send+0x78>)
 8004782:	2003      	movs	r0, #3
 8004784:	f7ff ff14 	bl	80045b0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e019      	b.n	80047c0 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	4911      	ldr	r1, [pc, #68]	@ (80047d4 <UART_Send+0x7c>)
 8004790:	2000      	movs	r0, #0
 8004792:	f7ff ff0d 	bl	80045b0 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f99e 	bl	8004ad8 <UART_Platform_Send>
 800479c:	4603      	mov	r3, r0
 800479e:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d105      	bne.n	80047b2 <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	490b      	ldr	r1, [pc, #44]	@ (80047d8 <UART_Send+0x80>)
 80047aa:	2000      	movs	r0, #0
 80047ac:	f7ff ff00 	bl	80045b0 <LOGGER_SendFormatted>
 80047b0:	e005      	b.n	80047be <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	4909      	ldr	r1, [pc, #36]	@ (80047dc <UART_Send+0x84>)
 80047b8:	2003      	movs	r0, #3
 80047ba:	f7ff fef9 	bl	80045b0 <LOGGER_SendFormatted>
    }

    return status;
 80047be:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20001391 	.word	0x20001391
 80047cc:	0801bbfc 	.word	0x0801bbfc
 80047d0:	0801bc20 	.word	0x0801bc20
 80047d4:	0801bc40 	.word	0x0801bc40
 80047d8:	0801bc58 	.word	0x0801bc58
 80047dc:	0801bc74 	.word	0x0801bc74

080047e0 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 80047ec:	4b22      	ldr	r3, [pc, #136]	@ (8004878 <UART_Receive+0x98>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	f083 0301 	eor.w	r3, r3, #1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 80047fa:	4920      	ldr	r1, [pc, #128]	@ (800487c <UART_Receive+0x9c>)
 80047fc:	2003      	movs	r0, #3
 80047fe:	f7ff fed7 	bl	80045b0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e034      	b.n	8004870 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <UART_Receive+0x38>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	dd02      	ble.n	8004818 <UART_Receive+0x38>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d105      	bne.n	8004824 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8004818:	4919      	ldr	r1, [pc, #100]	@ (8004880 <UART_Receive+0xa0>)
 800481a:	2003      	movs	r0, #3
 800481c:	f7ff fec8 	bl	80045b0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e025      	b.n	8004870 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	4917      	ldr	r1, [pc, #92]	@ (8004884 <UART_Receive+0xa4>)
 8004828:	2000      	movs	r0, #0
 800482a:	f7ff fec1 	bl	80045b0 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f98c 	bl	8004b50 <UART_Platform_Receive>
 8004838:	4603      	mov	r3, r0
 800483a:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 800483c:	7dfb      	ldrb	r3, [r7, #23]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d107      	bne.n	8004852 <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	490f      	ldr	r1, [pc, #60]	@ (8004888 <UART_Receive+0xa8>)
 800484a:	2000      	movs	r0, #0
 800484c:	f7ff feb0 	bl	80045b0 <LOGGER_SendFormatted>
 8004850:	e00d      	b.n	800486e <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 8004852:	7dfb      	ldrb	r3, [r7, #23]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d104      	bne.n	8004862 <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8004858:	490c      	ldr	r1, [pc, #48]	@ (800488c <UART_Receive+0xac>)
 800485a:	2000      	movs	r0, #0
 800485c:	f7ff fea8 	bl	80045b0 <LOGGER_SendFormatted>
 8004860:	e005      	b.n	800486e <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	461a      	mov	r2, r3
 8004866:	490a      	ldr	r1, [pc, #40]	@ (8004890 <UART_Receive+0xb0>)
 8004868:	2003      	movs	r0, #3
 800486a:	f7ff fea1 	bl	80045b0 <LOGGER_SendFormatted>
    }

    return status;
 800486e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20001391 	.word	0x20001391
 800487c:	0801bc98 	.word	0x0801bc98
 8004880:	0801bcc0 	.word	0x0801bcc0
 8004884:	0801bcec 	.word	0x0801bcec
 8004888:	0801bd14 	.word	0x0801bd14
 800488c:	0801bd34 	.word	0x0801bd34
 8004890:	0801bd4c 	.word	0x0801bd4c

08004894 <UART_IsConnected>:
    LOG_DEBUG("[UART] Configuration saved (not connected)");
    return UART_STATUS_OK;
}

bool UART_IsConnected(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
    return uart_connected;
 8004898:	4b03      	ldr	r3, [pc, #12]	@ (80048a8 <UART_IsConnected+0x14>)
 800489a:	781b      	ldrb	r3, [r3, #0]
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20001391 	.word	0x20001391

080048ac <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 80048b6:	e007      	b.n	80048c8 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 80048b8:	4b12      	ldr	r3, [pc, #72]	@ (8004904 <flush_rx_buffer+0x58>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3301      	adds	r3, #1
 80048c6:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 80048c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004904 <flush_rx_buffer+0x58>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d106      	bne.n	80048e4 <flush_rx_buffer+0x38>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b63      	cmp	r3, #99	@ 0x63
 80048da:	dded      	ble.n	80048b8 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80048dc:	e002      	b.n	80048e4 <flush_rx_buffer+0x38>
        flush_count++;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3301      	adds	r3, #1
 80048e2:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80048e4:	1cf9      	adds	r1, r7, #3
 80048e6:	2301      	movs	r3, #1
 80048e8:	2201      	movs	r2, #1
 80048ea:	4806      	ldr	r0, [pc, #24]	@ (8004904 <flush_rx_buffer+0x58>)
 80048ec:	f009 fcf9 	bl	800e2e2 <HAL_UART_Receive>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <flush_rx_buffer+0x50>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b63      	cmp	r3, #99	@ 0x63
 80048fa:	ddf0      	ble.n	80048de <flush_rx_buffer+0x32>
    }
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20000ffc 	.word	0x20000ffc

08004908 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8004910:	4b5b      	ldr	r3, [pc, #364]	@ (8004a80 <UART_Platform_Connect+0x178>)
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8004916:	4b5b      	ldr	r3, [pc, #364]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 8004918:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800491a:	4b5a      	ldr	r3, [pc, #360]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 800491c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004920:	4959      	ldr	r1, [pc, #356]	@ (8004a88 <UART_Platform_Connect+0x180>)
 8004922:	2001      	movs	r0, #1
 8004924:	f7ff fe44 	bl	80045b0 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8004928:	4b56      	ldr	r3, [pc, #344]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 800492a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00e      	beq.n	800494e <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8004930:	4956      	ldr	r1, [pc, #344]	@ (8004a8c <UART_Platform_Connect+0x184>)
 8004932:	2001      	movs	r0, #1
 8004934:	f7ff fe3c 	bl	80045b0 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8004938:	4b52      	ldr	r3, [pc, #328]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 800493a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	4952      	ldr	r1, [pc, #328]	@ (8004a90 <UART_Platform_Connect+0x188>)
 8004946:	2001      	movs	r0, #1
 8004948:	f7ff fe32 	bl	80045b0 <LOGGER_SendFormatted>
 800494c:	e018      	b.n	8004980 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 800494e:	4951      	ldr	r1, [pc, #324]	@ (8004a94 <UART_Platform_Connect+0x18c>)
 8004950:	2003      	movs	r0, #3
 8004952:	f7ff fe2d 	bl	80045b0 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8004956:	4b4b      	ldr	r3, [pc, #300]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 8004958:	4a4f      	ldr	r2, [pc, #316]	@ (8004a98 <UART_Platform_Connect+0x190>)
 800495a:	675a      	str	r2, [r3, #116]	@ 0x74
 800495c:	4b4e      	ldr	r3, [pc, #312]	@ (8004a98 <UART_Platform_Connect+0x190>)
 800495e:	4a49      	ldr	r2, [pc, #292]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 8004960:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8004962:	4b48      	ldr	r3, [pc, #288]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 8004964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004966:	2b00      	cmp	r3, #0
 8004968:	d004      	beq.n	8004974 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 800496a:	494c      	ldr	r1, [pc, #304]	@ (8004a9c <UART_Platform_Connect+0x194>)
 800496c:	2001      	movs	r0, #1
 800496e:	f7ff fe1f 	bl	80045b0 <LOGGER_SendFormatted>
 8004972:	e005      	b.n	8004980 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8004974:	494a      	ldr	r1, [pc, #296]	@ (8004aa0 <UART_Platform_Connect+0x198>)
 8004976:	2003      	movs	r0, #3
 8004978:	f7ff fe1a 	bl	80045b0 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e07a      	b.n	8004a76 <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8004980:	4b48      	ldr	r3, [pc, #288]	@ (8004aa4 <UART_Platform_Connect+0x19c>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d009      	beq.n	800499c <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8004988:	483e      	ldr	r0, [pc, #248]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 800498a:	f009 fdb6 	bl	800e4fa <HAL_UART_DMAStop>
        dma_receiving = false;
 800498e:	4b45      	ldr	r3, [pc, #276]	@ (8004aa4 <UART_Platform_Connect+0x19c>)
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8004994:	4944      	ldr	r1, [pc, #272]	@ (8004aa8 <UART_Platform_Connect+0x1a0>)
 8004996:	2001      	movs	r0, #1
 8004998:	f7ff fe0a 	bl	80045b0 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 800499c:	4b39      	ldr	r3, [pc, #228]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 800499e:	2220      	movs	r2, #32
 80049a0:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 80049a2:	4b38      	ldr	r3, [pc, #224]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 80049a4:	2220      	movs	r2, #32
 80049a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 80049aa:	4b36      	ldr	r3, [pc, #216]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 80049ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d026      	beq.n	8004a00 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 80049b2:	4b34      	ldr	r3, [pc, #208]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 80049b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d01a      	beq.n	80049f6 <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 80049c0:	493a      	ldr	r1, [pc, #232]	@ (8004aac <UART_Platform_Connect+0x1a4>)
 80049c2:	2001      	movs	r0, #1
 80049c4:	f7ff fdf4 	bl	80045b0 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 80049c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 80049ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049cc:	4618      	mov	r0, r3
 80049ce:	f001 f943 	bl	8005c58 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 80049d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 80049d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 f890 	bl	8005afc <HAL_DMA_Init>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 80049e2:	4933      	ldr	r1, [pc, #204]	@ (8004ab0 <UART_Platform_Connect+0x1a8>)
 80049e4:	2003      	movs	r0, #3
 80049e6:	f7ff fde3 	bl	80045b0 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e043      	b.n	8004a76 <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 80049ee:	4931      	ldr	r1, [pc, #196]	@ (8004ab4 <UART_Platform_Connect+0x1ac>)
 80049f0:	2001      	movs	r0, #1
 80049f2:	f7ff fddd 	bl	80045b0 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 80049f6:	4b23      	ldr	r3, [pc, #140]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 80049f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8004a00:	f7ff ff54 	bl	80048ac <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8004a04:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab8 <UART_Platform_Connect+0x1b0>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8004a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8004abc <UART_Platform_Connect+0x1b4>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8004a10:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac0 <UART_Platform_Connect+0x1b8>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8004a16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4829      	ldr	r0, [pc, #164]	@ (8004ac4 <UART_Platform_Connect+0x1bc>)
 8004a1e:	f015 faa3 	bl	8019f68 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 8004a22:	4929      	ldr	r1, [pc, #164]	@ (8004ac8 <UART_Platform_Connect+0x1c0>)
 8004a24:	2001      	movs	r0, #1
 8004a26:	f7ff fdc3 	bl	80045b0 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a2e:	4925      	ldr	r1, [pc, #148]	@ (8004ac4 <UART_Platform_Connect+0x1bc>)
 8004a30:	4814      	ldr	r0, [pc, #80]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 8004a32:	f009 fd1e 	bl	800e472 <HAL_UART_Receive_DMA>
 8004a36:	4603      	mov	r3, r0
 8004a38:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8004a40:	4b18      	ldr	r3, [pc, #96]	@ (8004aa4 <UART_Platform_Connect+0x19c>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8004a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a4a:	4920      	ldr	r1, [pc, #128]	@ (8004acc <UART_Platform_Connect+0x1c4>)
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	f7ff fdaf 	bl	80045b0 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e00f      	b.n	8004a76 <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	491d      	ldr	r1, [pc, #116]	@ (8004ad0 <UART_Platform_Connect+0x1c8>)
 8004a5c:	2003      	movs	r0, #3
 8004a5e:	f7ff fda7 	bl	80045b0 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8004a62:	4b08      	ldr	r3, [pc, #32]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 8004a64:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004a66:	4b07      	ldr	r3, [pc, #28]	@ (8004a84 <UART_Platform_Connect+0x17c>)
 8004a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a6c:	4919      	ldr	r1, [pc, #100]	@ (8004ad4 <UART_Platform_Connect+0x1cc>)
 8004a6e:	2003      	movs	r0, #3
 8004a70:	f7ff fd9e 	bl	80045b0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004a74:	2301      	movs	r3, #1
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20001598 	.word	0x20001598
 8004a84:	20000ffc 	.word	0x20000ffc
 8004a88:	0801bf48 	.word	0x0801bf48
 8004a8c:	0801bf74 	.word	0x0801bf74
 8004a90:	0801bf9c 	.word	0x0801bf9c
 8004a94:	0801bfb8 	.word	0x0801bfb8
 8004a98:	200012c8 	.word	0x200012c8
 8004a9c:	0801bff4 	.word	0x0801bff4
 8004aa0:	0801c020 	.word	0x0801c020
 8004aa4:	20001599 	.word	0x20001599
 8004aa8:	0801c04c 	.word	0x0801c04c
 8004aac:	0801c078 	.word	0x0801c078
 8004ab0:	0801c0a8 	.word	0x0801c0a8
 8004ab4:	0801c0d4 	.word	0x0801c0d4
 8004ab8:	20001392 	.word	0x20001392
 8004abc:	20001393 	.word	0x20001393
 8004ac0:	20001394 	.word	0x20001394
 8004ac4:	20001398 	.word	0x20001398
 8004ac8:	0801c100 	.word	0x0801c100
 8004acc:	0801c128 	.word	0x0801c128
 8004ad0:	0801c16c 	.word	0x0801c16c
 8004ad4:	0801c1a8 	.word	0x0801c1a8

08004ad8 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d006      	beq.n	8004af4 <UART_Platform_Send+0x1c>
 8004ae6:	4b17      	ldr	r3, [pc, #92]	@ (8004b44 <UART_Platform_Send+0x6c>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	f083 0301 	eor.w	r3, r3, #1
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <UART_Platform_Send+0x20>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e021      	b.n	8004b3c <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fb fb93 	bl	8000224 <strlen>
 8004afe:	4603      	mov	r3, r0
 8004b00:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <UART_Platform_Send+0x34>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e017      	b.n	8004b3c <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8004b0c:	f7ff fece 	bl	80048ac <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	480b      	ldr	r0, [pc, #44]	@ (8004b48 <UART_Platform_Send+0x70>)
 8004b1c:	f009 fb58 	bl	800e1d0 <HAL_UART_Transmit>
 8004b20:	4603      	mov	r3, r0
 8004b22:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8004b24:	7afb      	ldrb	r3, [r7, #11]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e006      	b.n	8004b3c <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8004b2e:	7afb      	ldrb	r3, [r7, #11]
 8004b30:	461a      	mov	r2, r3
 8004b32:	4906      	ldr	r1, [pc, #24]	@ (8004b4c <UART_Platform_Send+0x74>)
 8004b34:	2003      	movs	r0, #3
 8004b36:	f7ff fd3b 	bl	80045b0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004b3a:	2301      	movs	r3, #1
    }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20001598 	.word	0x20001598
 8004b48:	20000ffc 	.word	0x20000ffc
 8004b4c:	0801c208 	.word	0x0801c208

08004b50 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	@ 0x28
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <UART_Platform_Receive+0x26>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d006      	beq.n	8004b76 <UART_Platform_Receive+0x26>
 8004b68:	4b74      	ldr	r3, [pc, #464]	@ (8004d3c <UART_Platform_Receive+0x1ec>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	f083 0301 	eor.w	r3, r3, #1
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0dc      	b.n	8004d34 <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	dc04      	bgt.n	8004b8a <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e0d4      	b.n	8004d34 <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8004b90:	4b6b      	ldr	r3, [pc, #428]	@ (8004d40 <UART_Platform_Receive+0x1f0>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f083 0301 	eor.w	r3, r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e0c8      	b.n	8004d34 <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8004ba2:	4b68      	ldr	r3, [pc, #416]	@ (8004d44 <UART_Platform_Receive+0x1f4>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 8004bac:	4b65      	ldr	r3, [pc, #404]	@ (8004d44 <UART_Platform_Receive+0x1f4>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8004bb2:	4965      	ldr	r1, [pc, #404]	@ (8004d48 <UART_Platform_Receive+0x1f8>)
 8004bb4:	2002      	movs	r0, #2
 8004bb6:	f7ff fcfb 	bl	80045b0 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e0ba      	b.n	8004d34 <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 8004bbe:	4b63      	ldr	r3, [pc, #396]	@ (8004d4c <UART_Platform_Receive+0x1fc>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80b4 	beq.w	8004d32 <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 8004bca:	4b60      	ldr	r3, [pc, #384]	@ (8004d4c <UART_Platform_Receive+0x1fc>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 8004bd0:	4b5f      	ldr	r3, [pc, #380]	@ (8004d50 <UART_Platform_Receive+0x200>)
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	837b      	strh	r3, [r7, #26]
        LOG_INFO("[UART_STM32] DMA received %d bytes", received_length);
 8004bd6:	8b7b      	ldrh	r3, [r7, #26]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	495e      	ldr	r1, [pc, #376]	@ (8004d54 <UART_Platform_Receive+0x204>)
 8004bdc:	2001      	movs	r0, #1
 8004bde:	f7ff fce7 	bl	80045b0 <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8004be2:	8b7b      	ldrh	r3, [r7, #26]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 809e 	beq.w	8004d26 <UART_Platform_Receive+0x1d6>
 8004bea:	8b7b      	ldrh	r3, [r7, #26]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	f340 8099 	ble.w	8004d26 <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8004bf4:	8b7b      	ldrh	r3, [r7, #26]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	4957      	ldr	r1, [pc, #348]	@ (8004d58 <UART_Platform_Receive+0x208>)
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f015 fa22 	bl	801a044 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8004c00:	8b7b      	ldrh	r3, [r7, #26]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4413      	add	r3, r2
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 8004c0a:	8b7a      	ldrh	r2, [r7, #26]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_INFO("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8004c10:	8b7a      	ldrh	r2, [r7, #26]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4951      	ldr	r1, [pc, #324]	@ (8004d5c <UART_Platform_Receive+0x20c>)
 8004c16:	2001      	movs	r0, #1
 8004c18:	f7ff fcca 	bl	80045b0 <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8004c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c20:	2100      	movs	r1, #0
 8004c22:	484d      	ldr	r0, [pc, #308]	@ (8004d58 <UART_Platform_Receive+0x208>)
 8004c24:	f015 f9a0 	bl	8019f68 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8004c28:	484d      	ldr	r0, [pc, #308]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004c2a:	f009 fc66 	bl	800e4fa <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8004c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2201      	movs	r2, #1
 8004c34:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8004c36:	4b4a      	ldr	r3, [pc, #296]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8004c3e:	4b48      	ldr	r3, [pc, #288]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2204      	movs	r2, #4
 8004c44:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8004c46:	4b46      	ldr	r3, [pc, #280]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8004c4e:	4b44      	ldr	r3, [pc, #272]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2210      	movs	r2, #16
 8004c54:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8004c56:	4b42      	ldr	r3, [pc, #264]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d025      	beq.n	8004caa <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 8004c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c62:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8004c64:	e00b      	b.n	8004c7e <UART_Platform_Receive+0x12e>
                    timeout--;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	e002      	b.n	8004c78 <UART_Platform_Receive+0x128>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	3301      	adds	r3, #1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2b63      	cmp	r3, #99	@ 0x63
 8004c7c:	ddf9      	ble.n	8004c72 <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8004c7e:	4b38      	ldr	r3, [pc, #224]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d002      	beq.n	8004c92 <UART_Platform_Receive+0x142>
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	dce9      	bgt.n	8004c66 <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d108      	bne.n	8004caa <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8004c98:	4932      	ldr	r1, [pc, #200]	@ (8004d64 <UART_Platform_Receive+0x214>)
 8004c9a:	2002      	movs	r0, #2
 8004c9c:	f7ff fc88 	bl	80045b0 <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8004ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 8004caa:	4b2d      	ldr	r3, [pc, #180]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004cac:	2220      	movs	r2, #32
 8004cae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 8004cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	e002      	b.n	8004cc4 <UART_Platform_Receive+0x174>
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	ddf7      	ble.n	8004cbe <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004cce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cd2:	4921      	ldr	r1, [pc, #132]	@ (8004d58 <UART_Platform_Receive+0x208>)
 8004cd4:	4822      	ldr	r0, [pc, #136]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004cd6:	f009 fbcc 	bl	800e472 <HAL_UART_Receive_DMA>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 8004cde:	7e7b      	ldrb	r3, [r7, #25]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 8004ce4:	4920      	ldr	r1, [pc, #128]	@ (8004d68 <UART_Platform_Receive+0x218>)
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	f7ff fc62 	bl	80045b0 <LOGGER_SendFormatted>
 8004cec:	e019      	b.n	8004d22 <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 8004cee:	7e7a      	ldrb	r2, [r7, #25]
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004cf2:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	491b      	ldr	r1, [pc, #108]	@ (8004d6c <UART_Platform_Receive+0x21c>)
 8004d00:	2002      	movs	r0, #2
 8004d02:	f7ff fc55 	bl	80045b0 <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8004d06:	4b16      	ldr	r3, [pc, #88]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 8004d0e:	4b14      	ldr	r3, [pc, #80]	@ (8004d60 <UART_Platform_Receive+0x210>)
 8004d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4915      	ldr	r1, [pc, #84]	@ (8004d70 <UART_Platform_Receive+0x220>)
 8004d1c:	2002      	movs	r0, #2
 8004d1e:	f7ff fc47 	bl	80045b0 <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e006      	b.n	8004d34 <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 8004d26:	8b7a      	ldrh	r2, [r7, #26]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4912      	ldr	r1, [pc, #72]	@ (8004d74 <UART_Platform_Receive+0x224>)
 8004d2c:	2002      	movs	r0, #2
 8004d2e:	f7ff fc3f 	bl	80045b0 <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8004d32:	2302      	movs	r3, #2
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20001598 	.word	0x20001598
 8004d40:	20001599 	.word	0x20001599
 8004d44:	20001393 	.word	0x20001393
 8004d48:	0801c240 	.word	0x0801c240
 8004d4c:	20001392 	.word	0x20001392
 8004d50:	20001394 	.word	0x20001394
 8004d54:	0801c270 	.word	0x0801c270
 8004d58:	20001398 	.word	0x20001398
 8004d5c:	0801c294 	.word	0x0801c294
 8004d60:	20000ffc 	.word	0x20000ffc
 8004d64:	0801c2c0 	.word	0x0801c2c0
 8004d68:	0801c2fc 	.word	0x0801c2fc
 8004d6c:	0801c32c 	.word	0x0801c32c
 8004d70:	0801c374 	.word	0x0801c374
 8004d74:	0801c390 	.word	0x0801c390

08004d78 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a0a      	ldr	r2, [pc, #40]	@ (8004db0 <HAL_UART_RxCpltCallback+0x38>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10e      	bne.n	8004da8 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004db4 <HAL_UART_RxCpltCallback+0x3c>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8004d90:	4b09      	ldr	r3, [pc, #36]	@ (8004db8 <HAL_UART_RxCpltCallback+0x40>)
 8004d92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d96:	801a      	strh	r2, [r3, #0]
    LOG_INFO("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8004d98:	4b07      	ldr	r3, [pc, #28]	@ (8004db8 <HAL_UART_RxCpltCallback+0x40>)
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4906      	ldr	r1, [pc, #24]	@ (8004dbc <HAL_UART_RxCpltCallback+0x44>)
 8004da2:	2001      	movs	r0, #1
 8004da4:	f7ff fc04 	bl	80045b0 <LOGGER_SendFormatted>
  }
}
 8004da8:	bf00      	nop
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40011400 	.word	0x40011400
 8004db4:	20001392 	.word	0x20001392
 8004db8:	20001394 	.word	0x20001394
 8004dbc:	0801c3cc 	.word	0x0801c3cc

08004dc0 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a05      	ldr	r2, [pc, #20]	@ (8004de4 <HAL_UART_RxHalfCpltCallback+0x24>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d103      	bne.n	8004dda <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 8004dd2:	4905      	ldr	r1, [pc, #20]	@ (8004de8 <HAL_UART_RxHalfCpltCallback+0x28>)
 8004dd4:	2002      	movs	r0, #2
 8004dd6:	f7ff fbeb 	bl	80045b0 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40011400 	.word	0x40011400
 8004de8:	0801c404 	.word	0x0801c404

08004dec <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a3c      	ldr	r2, [pc, #240]	@ (8004eec <HAL_UART_ErrorCallback+0x100>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d171      	bne.n	8004ee2 <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 8004dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8004ef0 <HAL_UART_ErrorCallback+0x104>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 8004e04:	493b      	ldr	r1, [pc, #236]	@ (8004ef4 <HAL_UART_ErrorCallback+0x108>)
 8004e06:	2002      	movs	r0, #2
 8004e08:	f7ff fbd2 	bl	80045b0 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d107      	bne.n	8004e2a <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2208      	movs	r2, #8
 8004e20:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 8004e22:	4935      	ldr	r1, [pc, #212]	@ (8004ef8 <HAL_UART_ErrorCallback+0x10c>)
 8004e24:	2002      	movs	r0, #2
 8004e26:	f7ff fbc3 	bl	80045b0 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d107      	bne.n	8004e48 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 8004e40:	492e      	ldr	r1, [pc, #184]	@ (8004efc <HAL_UART_ErrorCallback+0x110>)
 8004e42:	2002      	movs	r0, #2
 8004e44:	f7ff fbb4 	bl	80045b0 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d107      	bne.n	8004e66 <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 8004e5e:	4928      	ldr	r1, [pc, #160]	@ (8004f00 <HAL_UART_ErrorCallback+0x114>)
 8004e60:	2002      	movs	r0, #2
 8004e62:	f7ff fba5 	bl	80045b0 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d107      	bne.n	8004e84 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8004e7c:	4921      	ldr	r1, [pc, #132]	@ (8004f04 <HAL_UART_ErrorCallback+0x118>)
 8004e7e:	2002      	movs	r0, #2
 8004e80:	f7ff fb96 	bl	80045b0 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f009 fb38 	bl	800e4fa <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8004eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4815      	ldr	r0, [pc, #84]	@ (8004f08 <HAL_UART_ErrorCallback+0x11c>)
 8004eb2:	f015 f859 	bl	8019f68 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eba:	4913      	ldr	r1, [pc, #76]	@ (8004f08 <HAL_UART_ErrorCallback+0x11c>)
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f009 fad8 	bl	800e472 <HAL_UART_Receive_DMA>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d104      	bne.n	8004ed6 <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8004ecc:	490f      	ldr	r1, [pc, #60]	@ (8004f0c <HAL_UART_ErrorCallback+0x120>)
 8004ece:	2001      	movs	r0, #1
 8004ed0:	f7ff fb6e 	bl	80045b0 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 8004ed4:	e005      	b.n	8004ee2 <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	490d      	ldr	r1, [pc, #52]	@ (8004f10 <HAL_UART_ErrorCallback+0x124>)
 8004edc:	2003      	movs	r0, #3
 8004ede:	f7ff fb67 	bl	80045b0 <LOGGER_SendFormatted>
}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40011400 	.word	0x40011400
 8004ef0:	20001393 	.word	0x20001393
 8004ef4:	0801c450 	.word	0x0801c450
 8004ef8:	0801c47c 	.word	0x0801c47c
 8004efc:	0801c498 	.word	0x0801c498
 8004f00:	0801c4b4 	.word	0x0801c4b4
 8004f04:	0801c4d0 	.word	0x0801c4d0
 8004f08:	20001398 	.word	0x20001398
 8004f0c:	0801c4ec 	.word	0x0801c4ec
 8004f10:	0801c520 	.word	0x0801c520

08004f14 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a3e      	ldr	r2, [pc, #248]	@ (800501c <USER_UART_IDLECallback+0x108>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d175      	bne.n	8005012 <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d103      	bne.n	8004f40 <USER_UART_IDLECallback+0x2c>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d103      	bne.n	8004f56 <USER_UART_IDLECallback+0x42>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d103      	bne.n	8004f6c <USER_UART_IDLECallback+0x58>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f043 0304 	orr.w	r3, r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d103      	bne.n	8004f82 <USER_UART_IDLECallback+0x6e>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f043 0308 	orr.w	r3, r3, #8
 8004f80:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8004f8c:	897b      	ldrh	r3, [r7, #10]
 8004f8e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	4b22      	ldr	r3, [pc, #136]	@ (8005020 <USER_UART_IDLECallback+0x10c>)
 8004f96:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8004f98:	4b21      	ldr	r3, [pc, #132]	@ (8005020 <USER_UART_IDLECallback+0x10c>)
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d033      	beq.n	800500a <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 8004fa2:	4b20      	ldr	r3, [pc, #128]	@ (8005024 <USER_UART_IDLECallback+0x110>)
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 8004fae:	4b1c      	ldr	r3, [pc, #112]	@ (8005020 <USER_UART_IDLECallback+0x10c>)
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	491b      	ldr	r1, [pc, #108]	@ (8005028 <USER_UART_IDLECallback+0x114>)
 8004fba:	2002      	movs	r0, #2
 8004fbc:	f7ff faf8 	bl	80045b0 <LOGGER_SendFormatted>
 8004fc0:	e007      	b.n	8004fd2 <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_INFO("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 8004fc2:	4b17      	ldr	r3, [pc, #92]	@ (8005020 <USER_UART_IDLECallback+0x10c>)
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4918      	ldr	r1, [pc, #96]	@ (800502c <USER_UART_IDLECallback+0x118>)
 8004fcc:	2001      	movs	r0, #1
 8004fce:	f7ff faef 	bl	80045b0 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 8004fd2:	4b13      	ldr	r3, [pc, #76]	@ (8005020 <USER_UART_IDLECallback+0x10c>)
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d912      	bls.n	8005002 <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8004fdc:	4b14      	ldr	r3, [pc, #80]	@ (8005030 <USER_UART_IDLECallback+0x11c>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4b13      	ldr	r3, [pc, #76]	@ (8005030 <USER_UART_IDLECallback+0x11c>)
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <USER_UART_IDLECallback+0x11c>)
 8004fea:	789b      	ldrb	r3, [r3, #2]
 8004fec:	461a      	mov	r2, r3
 8004fee:	4b10      	ldr	r3, [pc, #64]	@ (8005030 <USER_UART_IDLECallback+0x11c>)
 8004ff0:	78db      	ldrb	r3, [r3, #3]
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	9200      	str	r2, [sp, #0]
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	490e      	ldr	r1, [pc, #56]	@ (8005034 <USER_UART_IDLECallback+0x120>)
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7ff fad7 	bl	80045b0 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f009 fa79 	bl	800e4fa <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8005008:	e003      	b.n	8005012 <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 800500a:	490b      	ldr	r1, [pc, #44]	@ (8005038 <USER_UART_IDLECallback+0x124>)
 800500c:	2000      	movs	r0, #0
 800500e:	f7ff facf 	bl	80045b0 <LOGGER_SendFormatted>
}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40011400 	.word	0x40011400
 8005020:	20001394 	.word	0x20001394
 8005024:	20001392 	.word	0x20001392
 8005028:	0801c558 	.word	0x0801c558
 800502c:	0801c598 	.word	0x0801c598
 8005030:	20001398 	.word	0x20001398
 8005034:	0801c5c0 	.word	0x0801c5c0
 8005038:	0801c5ec 	.word	0x0801c5ec

0800503c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800503c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005074 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005040:	f7ff fa3a 	bl	80044b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005044:	480c      	ldr	r0, [pc, #48]	@ (8005078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005046:	490d      	ldr	r1, [pc, #52]	@ (800507c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005048:	4a0d      	ldr	r2, [pc, #52]	@ (8005080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800504a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800504c:	e002      	b.n	8005054 <LoopCopyDataInit>

0800504e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800504e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005052:	3304      	adds	r3, #4

08005054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005058:	d3f9      	bcc.n	800504e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800505a:	4a0a      	ldr	r2, [pc, #40]	@ (8005084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800505c:	4c0a      	ldr	r4, [pc, #40]	@ (8005088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800505e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005060:	e001      	b.n	8005066 <LoopFillZerobss>

08005062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005064:	3204      	adds	r2, #4

08005066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005068:	d3fb      	bcc.n	8005062 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800506a:	f014 ffc5 	bl	8019ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800506e:	f7fc f9fd 	bl	800146c <main>
  bx  lr    
 8005072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005074:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800507c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8005080:	0801c79c 	.word	0x0801c79c
  ldr r2, =_sbss
 8005084:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8005088:	2000a2b0 	.word	0x2000a2b0

0800508c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800508c:	e7fe      	b.n	800508c <ADC_IRQHandler>

0800508e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005092:	2003      	movs	r0, #3
 8005094:	f000 fb91 	bl	80057ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005098:	2000      	movs	r0, #0
 800509a:	f7ff f8f7 	bl	800428c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800509e:	f7fe f859 	bl	8003154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050ac:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <HAL_IncTick+0x20>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	4b06      	ldr	r3, [pc, #24]	@ (80050cc <HAL_IncTick+0x24>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4413      	add	r3, r2
 80050b8:	4a04      	ldr	r2, [pc, #16]	@ (80050cc <HAL_IncTick+0x24>)
 80050ba:	6013      	str	r3, [r2, #0]
}
 80050bc:	bf00      	nop
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20000068 	.word	0x20000068
 80050cc:	2000159c 	.word	0x2000159c

080050d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return uwTick;
 80050d4:	4b03      	ldr	r3, [pc, #12]	@ (80050e4 <HAL_GetTick+0x14>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	2000159c 	.word	0x2000159c

080050e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050f0:	f7ff ffee 	bl	80050d0 <HAL_GetTick>
 80050f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d005      	beq.n	800510e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005102:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <HAL_Delay+0x44>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800510e:	bf00      	nop
 8005110:	f7ff ffde 	bl	80050d0 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	429a      	cmp	r2, r3
 800511e:	d8f7      	bhi.n	8005110 <HAL_Delay+0x28>
  {
  }
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000068 	.word	0x20000068

08005130 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e031      	b.n	80051aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fe f828 	bl	80031a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b00      	cmp	r3, #0
 800516c:	d116      	bne.n	800519c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005172:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <HAL_ADC_Init+0x84>)
 8005174:	4013      	ands	r3, r2
 8005176:	f043 0202 	orr.w	r2, r3, #2
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f974 	bl	800546c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	641a      	str	r2, [r3, #64]	@ 0x40
 800519a:	e001      	b.n	80051a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	ffffeefd 	.word	0xffffeefd

080051b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x1c>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e13a      	b.n	800544a <HAL_ADC_ConfigChannel+0x292>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b09      	cmp	r3, #9
 80051e2:	d93a      	bls.n	800525a <HAL_ADC_ConfigChannel+0xa2>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ec:	d035      	beq.n	800525a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68d9      	ldr	r1, [r3, #12]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	4613      	mov	r3, r2
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	4413      	add	r3, r2
 8005202:	3b1e      	subs	r3, #30
 8005204:	2207      	movs	r2, #7
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43da      	mvns	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	400a      	ands	r2, r1
 8005212:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a8f      	ldr	r2, [pc, #572]	@ (8005458 <HAL_ADC_ConfigChannel+0x2a0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d10a      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68d9      	ldr	r1, [r3, #12]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	061a      	lsls	r2, r3, #24
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005232:	e039      	b.n	80052a8 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68d9      	ldr	r1, [r3, #12]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	4618      	mov	r0, r3
 8005246:	4603      	mov	r3, r0
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	4403      	add	r3, r0
 800524c:	3b1e      	subs	r3, #30
 800524e:	409a      	lsls	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005258:	e026      	b.n	80052a8 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6919      	ldr	r1, [r3, #16]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	4613      	mov	r3, r2
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	4413      	add	r3, r2
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2207      	movs	r2, #7
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	43da      	mvns	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	400a      	ands	r2, r1
 8005280:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6919      	ldr	r1, [r3, #16]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	4618      	mov	r0, r3
 8005294:	4603      	mov	r3, r0
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	4403      	add	r3, r0
 800529a:	f003 031f 	and.w	r3, r3, #31
 800529e:	409a      	lsls	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b06      	cmp	r3, #6
 80052ae:	d824      	bhi.n	80052fa <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	3b05      	subs	r3, #5
 80052c2:	221f      	movs	r2, #31
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	43da      	mvns	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	400a      	ands	r2, r1
 80052d0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	4618      	mov	r0, r3
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	3b05      	subs	r3, #5
 80052ec:	fa00 f203 	lsl.w	r2, r0, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80052f8:	e04c      	b.n	8005394 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b0c      	cmp	r3, #12
 8005300:	d824      	bhi.n	800534c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	3b23      	subs	r3, #35	@ 0x23
 8005314:	221f      	movs	r2, #31
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	43da      	mvns	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	400a      	ands	r2, r1
 8005322:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	4618      	mov	r0, r3
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	3b23      	subs	r3, #35	@ 0x23
 800533e:	fa00 f203 	lsl.w	r2, r0, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	631a      	str	r2, [r3, #48]	@ 0x30
 800534a:	e023      	b.n	8005394 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	3b41      	subs	r3, #65	@ 0x41
 800535e:	221f      	movs	r2, #31
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	43da      	mvns	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	400a      	ands	r2, r1
 800536c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	4618      	mov	r0, r3
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	3b41      	subs	r3, #65	@ 0x41
 8005388:	fa00 f203 	lsl.w	r2, r0, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a30      	ldr	r2, [pc, #192]	@ (800545c <HAL_ADC_ConfigChannel+0x2a4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d10a      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x1fc>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053a6:	d105      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80053a8:	4b2d      	ldr	r3, [pc, #180]	@ (8005460 <HAL_ADC_ConfigChannel+0x2a8>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005460 <HAL_ADC_ConfigChannel+0x2a8>)
 80053ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a28      	ldr	r2, [pc, #160]	@ (800545c <HAL_ADC_ConfigChannel+0x2a4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d10f      	bne.n	80053de <HAL_ADC_ConfigChannel+0x226>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b12      	cmp	r3, #18
 80053c4:	d10b      	bne.n	80053de <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80053c6:	4b26      	ldr	r3, [pc, #152]	@ (8005460 <HAL_ADC_ConfigChannel+0x2a8>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4a25      	ldr	r2, [pc, #148]	@ (8005460 <HAL_ADC_ConfigChannel+0x2a8>)
 80053cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80053d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80053d2:	4b23      	ldr	r3, [pc, #140]	@ (8005460 <HAL_ADC_ConfigChannel+0x2a8>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4a22      	ldr	r2, [pc, #136]	@ (8005460 <HAL_ADC_ConfigChannel+0x2a8>)
 80053d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1e      	ldr	r2, [pc, #120]	@ (800545c <HAL_ADC_ConfigChannel+0x2a4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d12b      	bne.n	8005440 <HAL_ADC_ConfigChannel+0x288>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005458 <HAL_ADC_ConfigChannel+0x2a0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d003      	beq.n	80053fa <HAL_ADC_ConfigChannel+0x242>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b11      	cmp	r3, #17
 80053f8:	d122      	bne.n	8005440 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80053fa:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <HAL_ADC_ConfigChannel+0x2a8>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	4a18      	ldr	r2, [pc, #96]	@ (8005460 <HAL_ADC_ConfigChannel+0x2a8>)
 8005400:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005404:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005406:	4b16      	ldr	r3, [pc, #88]	@ (8005460 <HAL_ADC_ConfigChannel+0x2a8>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4a15      	ldr	r2, [pc, #84]	@ (8005460 <HAL_ADC_ConfigChannel+0x2a8>)
 800540c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005410:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a10      	ldr	r2, [pc, #64]	@ (8005458 <HAL_ADC_ConfigChannel+0x2a0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d111      	bne.n	8005440 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800541c:	4b11      	ldr	r3, [pc, #68]	@ (8005464 <HAL_ADC_ConfigChannel+0x2ac>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a11      	ldr	r2, [pc, #68]	@ (8005468 <HAL_ADC_ConfigChannel+0x2b0>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	0c9a      	lsrs	r2, r3, #18
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005432:	e002      	b.n	800543a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3b01      	subs	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f9      	bne.n	8005434 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	10000012 	.word	0x10000012
 800545c:	40012000 	.word	0x40012000
 8005460:	40012300 	.word	0x40012300
 8005464:	20000018 	.word	0x20000018
 8005468:	431bde83 	.word	0x431bde83

0800546c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005474:	4b78      	ldr	r3, [pc, #480]	@ (8005658 <ADC_Init+0x1ec>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a77      	ldr	r2, [pc, #476]	@ (8005658 <ADC_Init+0x1ec>)
 800547a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800547e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005480:	4b75      	ldr	r3, [pc, #468]	@ (8005658 <ADC_Init+0x1ec>)
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	4973      	ldr	r1, [pc, #460]	@ (8005658 <ADC_Init+0x1ec>)
 800548a:	4313      	orrs	r3, r2
 800548c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800549c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6859      	ldr	r1, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	021a      	lsls	r2, r3, #8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80054c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6859      	ldr	r1, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6899      	ldr	r1, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fa:	4a58      	ldr	r2, [pc, #352]	@ (800565c <ADC_Init+0x1f0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d022      	beq.n	8005546 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800550e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6899      	ldr	r1, [r3, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6899      	ldr	r1, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	609a      	str	r2, [r3, #8]
 8005544:	e00f      	b.n	8005566 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005564:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0202 	bic.w	r2, r2, #2
 8005574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6899      	ldr	r1, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	005a      	lsls	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01b      	beq.n	80055cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80055b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6859      	ldr	r1, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	3b01      	subs	r3, #1
 80055c0:	035a      	lsls	r2, r3, #13
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
 80055ca:	e007      	b.n	80055dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80055ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	051a      	lsls	r2, r3, #20
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6899      	ldr	r1, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800561e:	025a      	lsls	r2, r3, #9
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6899      	ldr	r1, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	029a      	lsls	r2, r3, #10
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	609a      	str	r2, [r3, #8]
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	40012300 	.word	0x40012300
 800565c:	0f000001 	.word	0x0f000001

08005660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005670:	4b0b      	ldr	r3, [pc, #44]	@ (80056a0 <__NVIC_SetPriorityGrouping+0x40>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800567c:	4013      	ands	r3, r2
 800567e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005688:	4b06      	ldr	r3, [pc, #24]	@ (80056a4 <__NVIC_SetPriorityGrouping+0x44>)
 800568a:	4313      	orrs	r3, r2
 800568c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800568e:	4a04      	ldr	r2, [pc, #16]	@ (80056a0 <__NVIC_SetPriorityGrouping+0x40>)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	60d3      	str	r3, [r2, #12]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	e000ed00 	.word	0xe000ed00
 80056a4:	05fa0000 	.word	0x05fa0000

080056a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056ac:	4b04      	ldr	r3, [pc, #16]	@ (80056c0 <__NVIC_GetPriorityGrouping+0x18>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	0a1b      	lsrs	r3, r3, #8
 80056b2:	f003 0307 	and.w	r3, r3, #7
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	e000ed00 	.word	0xe000ed00

080056c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	db0b      	blt.n	80056ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	f003 021f 	and.w	r2, r3, #31
 80056dc:	4907      	ldr	r1, [pc, #28]	@ (80056fc <__NVIC_EnableIRQ+0x38>)
 80056de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	2001      	movs	r0, #1
 80056e6:	fa00 f202 	lsl.w	r2, r0, r2
 80056ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	e000e100 	.word	0xe000e100

08005700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	6039      	str	r1, [r7, #0]
 800570a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800570c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005710:	2b00      	cmp	r3, #0
 8005712:	db0a      	blt.n	800572a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	490c      	ldr	r1, [pc, #48]	@ (800574c <__NVIC_SetPriority+0x4c>)
 800571a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571e:	0112      	lsls	r2, r2, #4
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	440b      	add	r3, r1
 8005724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005728:	e00a      	b.n	8005740 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	b2da      	uxtb	r2, r3
 800572e:	4908      	ldr	r1, [pc, #32]	@ (8005750 <__NVIC_SetPriority+0x50>)
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	3b04      	subs	r3, #4
 8005738:	0112      	lsls	r2, r2, #4
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	440b      	add	r3, r1
 800573e:	761a      	strb	r2, [r3, #24]
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	e000e100 	.word	0xe000e100
 8005750:	e000ed00 	.word	0xe000ed00

08005754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005754:	b480      	push	{r7}
 8005756:	b089      	sub	sp, #36	@ 0x24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f1c3 0307 	rsb	r3, r3, #7
 800576e:	2b04      	cmp	r3, #4
 8005770:	bf28      	it	cs
 8005772:	2304      	movcs	r3, #4
 8005774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	3304      	adds	r3, #4
 800577a:	2b06      	cmp	r3, #6
 800577c:	d902      	bls.n	8005784 <NVIC_EncodePriority+0x30>
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3b03      	subs	r3, #3
 8005782:	e000      	b.n	8005786 <NVIC_EncodePriority+0x32>
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005788:	f04f 32ff 	mov.w	r2, #4294967295
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43da      	mvns	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	401a      	ands	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800579c:	f04f 31ff 	mov.w	r1, #4294967295
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	fa01 f303 	lsl.w	r3, r1, r3
 80057a6:	43d9      	mvns	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ac:	4313      	orrs	r3, r2
         );
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3724      	adds	r7, #36	@ 0x24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff ff4c 	bl	8005660 <__NVIC_SetPriorityGrouping>
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057e2:	f7ff ff61 	bl	80056a8 <__NVIC_GetPriorityGrouping>
 80057e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	6978      	ldr	r0, [r7, #20]
 80057ee:	f7ff ffb1 	bl	8005754 <NVIC_EncodePriority>
 80057f2:	4602      	mov	r2, r0
 80057f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057f8:	4611      	mov	r1, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff ff80 	bl	8005700 <__NVIC_SetPriority>
}
 8005800:	bf00      	nop
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff ff54 	bl	80056c4 <__NVIC_EnableIRQ>
}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e054      	b.n	80058e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	7f5b      	ldrb	r3, [r3, #29]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fd fd06 	bl	8003258 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	791b      	ldrb	r3, [r3, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10c      	bne.n	8005874 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a22      	ldr	r2, [pc, #136]	@ (80058e8 <HAL_CRC_Init+0xc4>)
 8005860:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0218 	bic.w	r2, r2, #24
 8005870:	609a      	str	r2, [r3, #8]
 8005872:	e00c      	b.n	800588e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6899      	ldr	r1, [r3, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	461a      	mov	r2, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f834 	bl	80058ec <HAL_CRCEx_Polynomial_Set>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e028      	b.n	80058e0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	795b      	ldrb	r3, [r3, #5]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d105      	bne.n	80058a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f04f 32ff 	mov.w	r2, #4294967295
 800589e:	611a      	str	r2, [r3, #16]
 80058a0:	e004      	b.n	80058ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6912      	ldr	r2, [r2, #16]
 80058aa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695a      	ldr	r2, [r3, #20]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	04c11db7 	.word	0x04c11db7

080058ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80058fc:	231f      	movs	r3, #31
 80058fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	75fb      	strb	r3, [r7, #23]
 800590e:	e063      	b.n	80059d8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005910:	bf00      	nop
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1e5a      	subs	r2, r3, #1
 8005916:	613a      	str	r2, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d009      	beq.n	8005930 <HAL_CRCEx_Polynomial_Set+0x44>
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	fa22 f303 	lsr.w	r3, r2, r3
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0f0      	beq.n	8005912 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b18      	cmp	r3, #24
 8005934:	d846      	bhi.n	80059c4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005936:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <HAL_CRCEx_Polynomial_Set+0x50>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	080059cb 	.word	0x080059cb
 8005940:	080059c5 	.word	0x080059c5
 8005944:	080059c5 	.word	0x080059c5
 8005948:	080059c5 	.word	0x080059c5
 800594c:	080059c5 	.word	0x080059c5
 8005950:	080059c5 	.word	0x080059c5
 8005954:	080059c5 	.word	0x080059c5
 8005958:	080059c5 	.word	0x080059c5
 800595c:	080059b9 	.word	0x080059b9
 8005960:	080059c5 	.word	0x080059c5
 8005964:	080059c5 	.word	0x080059c5
 8005968:	080059c5 	.word	0x080059c5
 800596c:	080059c5 	.word	0x080059c5
 8005970:	080059c5 	.word	0x080059c5
 8005974:	080059c5 	.word	0x080059c5
 8005978:	080059c5 	.word	0x080059c5
 800597c:	080059ad 	.word	0x080059ad
 8005980:	080059c5 	.word	0x080059c5
 8005984:	080059c5 	.word	0x080059c5
 8005988:	080059c5 	.word	0x080059c5
 800598c:	080059c5 	.word	0x080059c5
 8005990:	080059c5 	.word	0x080059c5
 8005994:	080059c5 	.word	0x080059c5
 8005998:	080059c5 	.word	0x080059c5
 800599c:	080059a1 	.word	0x080059a1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2b06      	cmp	r3, #6
 80059a4:	d913      	bls.n	80059ce <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80059aa:	e010      	b.n	80059ce <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	2b07      	cmp	r3, #7
 80059b0:	d90f      	bls.n	80059d2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80059b6:	e00c      	b.n	80059d2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b0f      	cmp	r3, #15
 80059bc:	d90b      	bls.n	80059d6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80059c2:	e008      	b.n	80059d6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
        break;
 80059c8:	e006      	b.n	80059d8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80059ca:	bf00      	nop
 80059cc:	e004      	b.n	80059d8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80059ce:	bf00      	nop
 80059d0:	e002      	b.n	80059d8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80059d2:	bf00      	nop
 80059d4:	e000      	b.n	80059d8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80059d6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10d      	bne.n	80059fa <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f023 0118 	bic.w	r1, r3, #24
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e069      	b.n	8005aee <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fd fc36 	bl	8003298 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6819      	ldr	r1, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8005af8 <HAL_DCMI_Init+0xf0>)
 8005a4e:	400b      	ands	r3, r1
 8005a50:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6819      	ldr	r1, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005a66:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005a72:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005a7e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005a8a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a90:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005a96:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d112      	bne.n	8005ace <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	7f1b      	ldrb	r3, [r3, #28]
 8005aac:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	7f5b      	ldrb	r3, [r3, #29]
 8005ab2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005ab4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	7f9b      	ldrb	r3, [r3, #30]
 8005aba:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005abc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	7fdb      	ldrb	r3, [r3, #31]
 8005ac4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005aca:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005acc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 021e 	orr.w	r2, r2, #30
 8005adc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	ffe0f007 	.word	0xffe0f007

08005afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b08:	f7ff fae2 	bl	80050d0 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e099      	b.n	8005c4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0201 	bic.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b38:	e00f      	b.n	8005b5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b3a:	f7ff fac9 	bl	80050d0 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b05      	cmp	r3, #5
 8005b46:	d908      	bls.n	8005b5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2203      	movs	r2, #3
 8005b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e078      	b.n	8005c4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e8      	bne.n	8005b3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4b38      	ldr	r3, [pc, #224]	@ (8005c54 <HAL_DMA_Init+0x158>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d107      	bne.n	8005bc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0307 	bic.w	r3, r3, #7
 8005bda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d117      	bne.n	8005c1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00e      	beq.n	8005c1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fb73 	bl	80062ec <DMA_CheckFifoParam>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d008      	beq.n	8005c1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2240      	movs	r2, #64	@ 0x40
 8005c10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e016      	b.n	8005c4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fb2a 	bl	8006280 <DMA_CalcBaseAndBitshift>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c34:	223f      	movs	r2, #63	@ 0x3f
 8005c36:	409a      	lsls	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	f010803f 	.word	0xf010803f

08005c58 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e050      	b.n	8005d0c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d101      	bne.n	8005c7a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
 8005c78:	e048      	b.n	8005d0c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0201 	bic.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2200      	movs	r2, #0
 8005c98:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2221      	movs	r2, #33	@ 0x21
 8005cb8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fae0 	bl	8006280 <DMA_CalcBaseAndBitshift>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc8:	223f      	movs	r2, #63	@ 0x3f
 8005cca:	409a      	lsls	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_DMA_Start_IT+0x26>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e048      	b.n	8005dcc <HAL_DMA_Start_IT+0xb8>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d137      	bne.n	8005dbe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2202      	movs	r2, #2
 8005d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fa5e 	bl	8006224 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d6c:	223f      	movs	r2, #63	@ 0x3f
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0216 	orr.w	r2, r2, #22
 8005d82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695a      	ldr	r2, [r3, #20]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d92:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0208 	orr.w	r2, r2, #8
 8005daa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e005      	b.n	8005dca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005de2:	f7ff f975 	bl	80050d0 <HAL_GetTick>
 8005de6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d008      	beq.n	8005e06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2280      	movs	r2, #128	@ 0x80
 8005df8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e052      	b.n	8005eac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0216 	bic.w	r2, r2, #22
 8005e14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <HAL_DMA_Abort+0x62>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0208 	bic.w	r2, r2, #8
 8005e44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0201 	bic.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e56:	e013      	b.n	8005e80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e58:	f7ff f93a 	bl	80050d0 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d90c      	bls.n	8005e80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2203      	movs	r2, #3
 8005e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e015      	b.n	8005eac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e4      	bne.n	8005e58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e92:	223f      	movs	r2, #63	@ 0x3f
 8005e94:	409a      	lsls	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d004      	beq.n	8005ed2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2280      	movs	r2, #128	@ 0x80
 8005ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e00c      	b.n	8005eec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2205      	movs	r2, #5
 8005ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0201 	bic.w	r2, r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005f04:	4b8e      	ldr	r3, [pc, #568]	@ (8006140 <HAL_DMA_IRQHandler+0x248>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a8e      	ldr	r2, [pc, #568]	@ (8006144 <HAL_DMA_IRQHandler+0x24c>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	0a9b      	lsrs	r3, r3, #10
 8005f10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f22:	2208      	movs	r2, #8
 8005f24:	409a      	lsls	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01a      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d013      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0204 	bic.w	r2, r2, #4
 8005f4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f50:	2208      	movs	r2, #8
 8005f52:	409a      	lsls	r2, r3
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f5c:	f043 0201 	orr.w	r2, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f68:	2201      	movs	r2, #1
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d012      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f86:	2201      	movs	r2, #1
 8005f88:	409a      	lsls	r2, r3
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f92:	f043 0202 	orr.w	r2, r3, #2
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	409a      	lsls	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d012      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbc:	2204      	movs	r2, #4
 8005fbe:	409a      	lsls	r2, r3
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc8:	f043 0204 	orr.w	r2, r3, #4
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd4:	2210      	movs	r2, #16
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d043      	beq.n	8006068 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d03c      	beq.n	8006068 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff2:	2210      	movs	r2, #16
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d018      	beq.n	800603a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d108      	bne.n	8006028 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d024      	beq.n	8006068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	4798      	blx	r3
 8006026:	e01f      	b.n	8006068 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01b      	beq.n	8006068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
 8006038:	e016      	b.n	8006068 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d107      	bne.n	8006058 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0208 	bic.w	r2, r2, #8
 8006056:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800606c:	2220      	movs	r2, #32
 800606e:	409a      	lsls	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4013      	ands	r3, r2
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 808f 	beq.w	8006198 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8087 	beq.w	8006198 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800608e:	2220      	movs	r2, #32
 8006090:	409a      	lsls	r2, r3
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b05      	cmp	r3, #5
 80060a0:	d136      	bne.n	8006110 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0216 	bic.w	r2, r2, #22
 80060b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	695a      	ldr	r2, [r3, #20]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d103      	bne.n	80060d2 <HAL_DMA_IRQHandler+0x1da>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d007      	beq.n	80060e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0208 	bic.w	r2, r2, #8
 80060e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e6:	223f      	movs	r2, #63	@ 0x3f
 80060e8:	409a      	lsls	r2, r3
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006102:	2b00      	cmp	r3, #0
 8006104:	d07e      	beq.n	8006204 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
        }
        return;
 800610e:	e079      	b.n	8006204 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01d      	beq.n	800615a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10d      	bne.n	8006148 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006130:	2b00      	cmp	r3, #0
 8006132:	d031      	beq.n	8006198 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	4798      	blx	r3
 800613c:	e02c      	b.n	8006198 <HAL_DMA_IRQHandler+0x2a0>
 800613e:	bf00      	nop
 8006140:	20000018 	.word	0x20000018
 8006144:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d023      	beq.n	8006198 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
 8006158:	e01e      	b.n	8006198 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10f      	bne.n	8006188 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0210 	bic.w	r2, r2, #16
 8006176:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619c:	2b00      	cmp	r3, #0
 800619e:	d032      	beq.n	8006206 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d022      	beq.n	80061f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2205      	movs	r2, #5
 80061b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0201 	bic.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d307      	bcc.n	80061e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f2      	bne.n	80061c4 <HAL_DMA_IRQHandler+0x2cc>
 80061de:	e000      	b.n	80061e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
 8006202:	e000      	b.n	8006206 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006204:	bf00      	nop
    }
  }
}
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006240:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b40      	cmp	r3, #64	@ 0x40
 8006250:	d108      	bne.n	8006264 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006262:	e007      	b.n	8006274 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	60da      	str	r2, [r3, #12]
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	3b10      	subs	r3, #16
 8006290:	4a13      	ldr	r2, [pc, #76]	@ (80062e0 <DMA_CalcBaseAndBitshift+0x60>)
 8006292:	fba2 2303 	umull	r2, r3, r2, r3
 8006296:	091b      	lsrs	r3, r3, #4
 8006298:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800629a:	4a12      	ldr	r2, [pc, #72]	@ (80062e4 <DMA_CalcBaseAndBitshift+0x64>)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d908      	bls.n	80062c0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	4b0c      	ldr	r3, [pc, #48]	@ (80062e8 <DMA_CalcBaseAndBitshift+0x68>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	1d1a      	adds	r2, r3, #4
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80062be:	e006      	b.n	80062ce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	4b08      	ldr	r3, [pc, #32]	@ (80062e8 <DMA_CalcBaseAndBitshift+0x68>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	aaaaaaab 	.word	0xaaaaaaab
 80062e4:	0801c6bc 	.word	0x0801c6bc
 80062e8:	fffffc00 	.word	0xfffffc00

080062ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d11f      	bne.n	8006346 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b03      	cmp	r3, #3
 800630a:	d856      	bhi.n	80063ba <DMA_CheckFifoParam+0xce>
 800630c:	a201      	add	r2, pc, #4	@ (adr r2, 8006314 <DMA_CheckFifoParam+0x28>)
 800630e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006312:	bf00      	nop
 8006314:	08006325 	.word	0x08006325
 8006318:	08006337 	.word	0x08006337
 800631c:	08006325 	.word	0x08006325
 8006320:	080063bb 	.word	0x080063bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006328:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d046      	beq.n	80063be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006334:	e043      	b.n	80063be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800633e:	d140      	bne.n	80063c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006344:	e03d      	b.n	80063c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800634e:	d121      	bne.n	8006394 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b03      	cmp	r3, #3
 8006354:	d837      	bhi.n	80063c6 <DMA_CheckFifoParam+0xda>
 8006356:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <DMA_CheckFifoParam+0x70>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	0800636d 	.word	0x0800636d
 8006360:	08006373 	.word	0x08006373
 8006364:	0800636d 	.word	0x0800636d
 8006368:	08006385 	.word	0x08006385
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	73fb      	strb	r3, [r7, #15]
      break;
 8006370:	e030      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006376:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d025      	beq.n	80063ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006382:	e022      	b.n	80063ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006388:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800638c:	d11f      	bne.n	80063ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006392:	e01c      	b.n	80063ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d903      	bls.n	80063a2 <DMA_CheckFifoParam+0xb6>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b03      	cmp	r3, #3
 800639e:	d003      	beq.n	80063a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80063a0:	e018      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	73fb      	strb	r3, [r7, #15]
      break;
 80063a6:	e015      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00e      	beq.n	80063d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
      break;
 80063b8:	e00b      	b.n	80063d2 <DMA_CheckFifoParam+0xe6>
      break;
 80063ba:	bf00      	nop
 80063bc:	e00a      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      break;
 80063be:	bf00      	nop
 80063c0:	e008      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      break;
 80063c2:	bf00      	nop
 80063c4:	e006      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      break;
 80063c6:	bf00      	nop
 80063c8:	e004      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      break;
 80063ca:	bf00      	nop
 80063cc:	e002      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80063ce:	bf00      	nop
 80063d0:	e000      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      break;
 80063d2:	bf00      	nop
    }
  } 
  
  return status; 
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop

080063e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e039      	b.n	800646a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fd f802 	bl	8003414 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006434:	f023 0107 	bic.w	r1, r3, #7
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800644a:	4b0a      	ldr	r3, [pc, #40]	@ (8006474 <HAL_DMA2D_Init+0x90>)
 800644c:	4013      	ands	r3, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	68d1      	ldr	r1, [r2, #12]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	430b      	orrs	r3, r1
 8006458:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	ffffc000 	.word	0xffffc000

08006478 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d026      	beq.n	80064e8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d021      	beq.n	80064e8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064b2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b8:	f043 0201 	orr.w	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2201      	movs	r2, #1
 80064c6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2204      	movs	r2, #4
 80064cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d026      	beq.n	8006540 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d021      	beq.n	8006540 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800650a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2220      	movs	r2, #32
 8006512:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006518:	f043 0202 	orr.w	r2, r3, #2
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2204      	movs	r2, #4
 8006524:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d026      	beq.n	8006598 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006550:	2b00      	cmp	r3, #0
 8006552:	d021      	beq.n	8006598 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006562:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2208      	movs	r2, #8
 800656a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006570:	f043 0204 	orr.w	r2, r3, #4
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2204      	movs	r2, #4
 800657c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d013      	beq.n	80065ca <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00e      	beq.n	80065ca <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ba:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2204      	movs	r2, #4
 80065c2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f853 	bl	8006670 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d024      	beq.n	800661e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d01f      	beq.n	800661e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80065ec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2202      	movs	r2, #2
 80065f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b00      	cmp	r3, #0
 8006626:	d01f      	beq.n	8006668 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d01a      	beq.n	8006668 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006640:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2210      	movs	r2, #16
 8006648:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f80e 	bl	8006684 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_DMA2D_ConfigLayer+0x20>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e079      	b.n	80067ac <HAL_DMA2D_ConfigLayer+0x114>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	3318      	adds	r3, #24
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	4413      	add	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	041b      	lsls	r3, r3, #16
 80066de:	4313      	orrs	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80066e2:	4b35      	ldr	r3, [pc, #212]	@ (80067b8 <HAL_DMA2D_ConfigLayer+0x120>)
 80066e4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b0a      	cmp	r3, #10
 80066ec:	d003      	beq.n	80066f6 <HAL_DMA2D_ConfigLayer+0x5e>
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b09      	cmp	r3, #9
 80066f4:	d107      	bne.n	8006706 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	e005      	b.n	8006712 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	061b      	lsls	r3, r3, #24
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d120      	bne.n	800675a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	43db      	mvns	r3, r3
 8006722:	ea02 0103 	and.w	r1, r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	430a      	orrs	r2, r1
 800672e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	6812      	ldr	r2, [r2, #0]
 8006738:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b0a      	cmp	r3, #10
 8006740:	d003      	beq.n	800674a <HAL_DMA2D_ConfigLayer+0xb2>
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2b09      	cmp	r3, #9
 8006748:	d127      	bne.n	800679a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006756:	629a      	str	r2, [r3, #40]	@ 0x28
 8006758:	e01f      	b.n	800679a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	43db      	mvns	r3, r3
 8006764:	ea02 0103 	and.w	r1, r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	430a      	orrs	r2, r1
 8006770:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b0a      	cmp	r3, #10
 8006782:	d003      	beq.n	800678c <HAL_DMA2D_ConfigLayer+0xf4>
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b09      	cmp	r3, #9
 800678a:	d106      	bne.n	800679a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006798:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	ff03000f 	.word	0xff03000f

080067bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e086      	b.n	80068dc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fc fe3d 	bl	8003460 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067e6:	4b3f      	ldr	r3, [pc, #252]	@ (80068e4 <HAL_ETH_Init+0x128>)
 80067e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ea:	4a3e      	ldr	r2, [pc, #248]	@ (80068e4 <HAL_ETH_Init+0x128>)
 80067ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80067f2:	4b3c      	ldr	r3, [pc, #240]	@ (80068e4 <HAL_ETH_Init+0x128>)
 80067f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067fa:	60bb      	str	r3, [r7, #8]
 80067fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80067fe:	4b3a      	ldr	r3, [pc, #232]	@ (80068e8 <HAL_ETH_Init+0x12c>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	4a39      	ldr	r2, [pc, #228]	@ (80068e8 <HAL_ETH_Init+0x12c>)
 8006804:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006808:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800680a:	4b37      	ldr	r3, [pc, #220]	@ (80068e8 <HAL_ETH_Init+0x12c>)
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	4935      	ldr	r1, [pc, #212]	@ (80068e8 <HAL_ETH_Init+0x12c>)
 8006814:	4313      	orrs	r3, r2
 8006816:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8006818:	4b33      	ldr	r3, [pc, #204]	@ (80068e8 <HAL_ETH_Init+0x12c>)
 800681a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6812      	ldr	r2, [r2, #0]
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006832:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006834:	f7fe fc4c 	bl	80050d0 <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800683a:	e011      	b.n	8006860 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800683c:	f7fe fc48 	bl	80050d0 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800684a:	d909      	bls.n	8006860 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2204      	movs	r2, #4
 8006850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	22e0      	movs	r2, #224	@ 0xe0
 8006858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e03d      	b.n	80068dc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e4      	bne.n	800683c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f97a 	bl	8006b6c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fa25 	bl	8006cc8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa7b 	bl	8006d7a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	461a      	mov	r2, r3
 800688a:	2100      	movs	r1, #0
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f9e3 	bl	8006c58 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80068a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	4b0f      	ldr	r3, [pc, #60]	@ (80068ec <HAL_ETH_Init+0x130>)
 80068b0:	430b      	orrs	r3, r1
 80068b2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80068c6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2210      	movs	r2, #16
 80068d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40023800 	.word	0x40023800
 80068e8:	40013800 	.word	0x40013800
 80068ec:	00020060 	.word	0x00020060

080068f0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4b53      	ldr	r3, [pc, #332]	@ (8006a54 <ETH_SetMACConfig+0x164>)
 8006906:	4013      	ands	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	7b9b      	ldrb	r3, [r3, #14]
 800690e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	7c12      	ldrb	r2, [r2, #16]
 8006914:	2a00      	cmp	r2, #0
 8006916:	d102      	bne.n	800691e <ETH_SetMACConfig+0x2e>
 8006918:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800691c:	e000      	b.n	8006920 <ETH_SetMACConfig+0x30>
 800691e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006920:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	7c52      	ldrb	r2, [r2, #17]
 8006926:	2a00      	cmp	r2, #0
 8006928:	d102      	bne.n	8006930 <ETH_SetMACConfig+0x40>
 800692a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800692e:	e000      	b.n	8006932 <ETH_SetMACConfig+0x42>
 8006930:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006932:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006938:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	7fdb      	ldrb	r3, [r3, #31]
 800693e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006940:	431a      	orrs	r2, r3
                        macconf->Speed |
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006946:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	7f92      	ldrb	r2, [r2, #30]
 800694c:	2a00      	cmp	r2, #0
 800694e:	d102      	bne.n	8006956 <ETH_SetMACConfig+0x66>
 8006950:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006954:	e000      	b.n	8006958 <ETH_SetMACConfig+0x68>
 8006956:	2200      	movs	r2, #0
                        macconf->Speed |
 8006958:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	7f1b      	ldrb	r3, [r3, #28]
 800695e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006960:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006966:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	791b      	ldrb	r3, [r3, #4]
 800696c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800696e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006976:	2a00      	cmp	r2, #0
 8006978:	d102      	bne.n	8006980 <ETH_SetMACConfig+0x90>
 800697a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800697e:	e000      	b.n	8006982 <ETH_SetMACConfig+0x92>
 8006980:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006982:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	7bdb      	ldrb	r3, [r3, #15]
 8006988:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800698a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006990:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006998:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800699a:	4313      	orrs	r3, r2
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80069b2:	2001      	movs	r0, #1
 80069b4:	f7fe fb98 	bl	80050e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80069ce:	4013      	ands	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069d6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80069de:	2a00      	cmp	r2, #0
 80069e0:	d101      	bne.n	80069e6 <ETH_SetMACConfig+0xf6>
 80069e2:	2280      	movs	r2, #128	@ 0x80
 80069e4:	e000      	b.n	80069e8 <ETH_SetMACConfig+0xf8>
 80069e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80069e8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80069ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80069f6:	2a01      	cmp	r2, #1
 80069f8:	d101      	bne.n	80069fe <ETH_SetMACConfig+0x10e>
 80069fa:	2208      	movs	r2, #8
 80069fc:	e000      	b.n	8006a00 <ETH_SetMACConfig+0x110>
 80069fe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8006a00:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8006a08:	2a01      	cmp	r2, #1
 8006a0a:	d101      	bne.n	8006a10 <ETH_SetMACConfig+0x120>
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	e000      	b.n	8006a12 <ETH_SetMACConfig+0x122>
 8006a10:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006a12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8006a1a:	2a01      	cmp	r2, #1
 8006a1c:	d101      	bne.n	8006a22 <ETH_SetMACConfig+0x132>
 8006a1e:	2202      	movs	r2, #2
 8006a20:	e000      	b.n	8006a24 <ETH_SetMACConfig+0x134>
 8006a22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006a24:	4313      	orrs	r3, r2
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	f7fe fb53 	bl	80050e8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	619a      	str	r2, [r3, #24]
}
 8006a4a:	bf00      	nop
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	fd20810f 	.word	0xfd20810f

08006a58 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4b3d      	ldr	r3, [pc, #244]	@ (8006b68 <ETH_SetDMAConfig+0x110>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	7b1b      	ldrb	r3, [r3, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <ETH_SetDMAConfig+0x2c>
 8006a7e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006a82:	e000      	b.n	8006a86 <ETH_SetDMAConfig+0x2e>
 8006a84:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	7b5b      	ldrb	r3, [r3, #13]
 8006a8a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a8c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	7f52      	ldrb	r2, [r2, #29]
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	d102      	bne.n	8006a9c <ETH_SetDMAConfig+0x44>
 8006a96:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a9a:	e000      	b.n	8006a9e <ETH_SetDMAConfig+0x46>
 8006a9c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	7b9b      	ldrb	r3, [r3, #14]
 8006aa4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006aa6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006aac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	7f1b      	ldrb	r3, [r3, #28]
 8006ab2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006ab4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	7f9b      	ldrb	r3, [r3, #30]
 8006aba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006abc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006ac2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006aca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006acc:	4313      	orrs	r3, r2
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006adc:	461a      	mov	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006aee:	2001      	movs	r0, #1
 8006af0:	f7fe fafa 	bl	80050e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006afc:	461a      	mov	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	791b      	ldrb	r3, [r3, #4]
 8006b06:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006b0c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8006b12:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006b18:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006b20:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8006b22:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b28:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006b2a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006b30:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006b3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b3e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	f7fe facb 	bl	80050e8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6013      	str	r3, [r2, #0]
}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	f8de3f23 	.word	0xf8de3f23

08006b6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b0a6      	sub	sp, #152	@ 0x98
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006b80:	2300      	movs	r3, #0
 8006b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006b90:	2300      	movs	r3, #0
 8006b92:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006b96:	2301      	movs	r3, #1
 8006b98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006bd4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006bda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006be0:	2300      	movs	r3, #0
 8006be2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006be6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff fe7f 	bl	80068f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006c00:	2301      	movs	r3, #1
 8006c02:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006c14:	2300      	movs	r3, #0
 8006c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006c22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006c26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006c28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006c2c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006c32:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006c42:	f107 0308 	add.w	r3, r7, #8
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff ff05 	bl	8006a58 <ETH_SetDMAConfig>
}
 8006c4e:	bf00      	nop
 8006c50:	3798      	adds	r7, #152	@ 0x98
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3305      	adds	r3, #5
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	3204      	adds	r2, #4
 8006c70:	7812      	ldrb	r2, [r2, #0]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	4b11      	ldr	r3, [pc, #68]	@ (8006cc0 <ETH_MACAddressConfig+0x68>)
 8006c7a:	4413      	add	r3, r2
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3303      	adds	r3, #3
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	061a      	lsls	r2, r3, #24
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3302      	adds	r3, #2
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	041b      	lsls	r3, r3, #16
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	3301      	adds	r3, #1
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	021b      	lsls	r3, r3, #8
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	7812      	ldrb	r2, [r2, #0]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <ETH_MACAddressConfig+0x6c>)
 8006caa:	4413      	add	r3, r2
 8006cac:	461a      	mov	r2, r3
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	6013      	str	r3, [r2, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40028040 	.word	0x40028040
 8006cc4:	40028044 	.word	0x40028044

08006cc8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e03e      	b.n	8006d54 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68d9      	ldr	r1, [r3, #12]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	440b      	add	r3, r1
 8006ce6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	3206      	adds	r2, #6
 8006d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d80c      	bhi.n	8006d38 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68d9      	ldr	r1, [r3, #12]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	440b      	add	r3, r1
 8006d30:	461a      	mov	r2, r3
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	60da      	str	r2, [r3, #12]
 8006d36:	e004      	b.n	8006d42 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3301      	adds	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d9bd      	bls.n	8006cd6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d6c:	611a      	str	r2, [r3, #16]
}
 8006d6e:	bf00      	nop
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	e048      	b.n	8006e1a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6919      	ldr	r1, [r3, #16]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	440b      	add	r3, r1
 8006d98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2200      	movs	r2, #0
 8006da4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2200      	movs	r2, #0
 8006daa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2200      	movs	r2, #0
 8006db0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2200      	movs	r2, #0
 8006db6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006dc4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006dde:	68b9      	ldr	r1, [r7, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	3212      	adds	r2, #18
 8006de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d80c      	bhi.n	8006e0a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6919      	ldr	r1, [r3, #16]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	4613      	mov	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	440b      	add	r3, r1
 8006e02:	461a      	mov	r2, r3
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	60da      	str	r2, [r3, #12]
 8006e08:	e004      	b.n	8006e14 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d9b3      	bls.n	8006d88 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e4a:	60da      	str	r2, [r3, #12]
}
 8006e4c:	bf00      	nop
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b089      	sub	sp, #36	@ 0x24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006e66:	2300      	movs	r3, #0
 8006e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006e72:	2300      	movs	r3, #0
 8006e74:	61fb      	str	r3, [r7, #28]
 8006e76:	e175      	b.n	8007164 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e78:	2201      	movs	r2, #1
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	f040 8164 	bne.w	800715e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d005      	beq.n	8006eae <HAL_GPIO_Init+0x56>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d130      	bne.n	8006f10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	2203      	movs	r2, #3
 8006eba:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	43db      	mvns	r3, r3
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	091b      	lsrs	r3, r3, #4
 8006efa:	f003 0201 	and.w	r2, r3, #1
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	fa02 f303 	lsl.w	r3, r2, r3
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f003 0303 	and.w	r3, r3, #3
 8006f18:	2b03      	cmp	r3, #3
 8006f1a:	d017      	beq.n	8006f4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	2203      	movs	r2, #3
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	43db      	mvns	r3, r3
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	4013      	ands	r3, r2
 8006f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f003 0303 	and.w	r3, r3, #3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d123      	bne.n	8006fa0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	08da      	lsrs	r2, r3, #3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3208      	adds	r2, #8
 8006f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	220f      	movs	r2, #15
 8006f70:	fa02 f303 	lsl.w	r3, r2, r3
 8006f74:	43db      	mvns	r3, r3
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	691a      	ldr	r2, [r3, #16]
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	f003 0307 	and.w	r3, r3, #7
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	08da      	lsrs	r2, r3, #3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3208      	adds	r2, #8
 8006f9a:	69b9      	ldr	r1, [r7, #24]
 8006f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	2203      	movs	r2, #3
 8006fac:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb0:	43db      	mvns	r3, r3
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 0203 	and.w	r2, r3, #3
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80be 	beq.w	800715e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fe2:	4b66      	ldr	r3, [pc, #408]	@ (800717c <HAL_GPIO_Init+0x324>)
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe6:	4a65      	ldr	r2, [pc, #404]	@ (800717c <HAL_GPIO_Init+0x324>)
 8006fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8006fee:	4b63      	ldr	r3, [pc, #396]	@ (800717c <HAL_GPIO_Init+0x324>)
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006ffa:	4a61      	ldr	r2, [pc, #388]	@ (8007180 <HAL_GPIO_Init+0x328>)
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	089b      	lsrs	r3, r3, #2
 8007000:	3302      	adds	r3, #2
 8007002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007006:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	220f      	movs	r2, #15
 8007012:	fa02 f303 	lsl.w	r3, r2, r3
 8007016:	43db      	mvns	r3, r3
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	4013      	ands	r3, r2
 800701c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a58      	ldr	r2, [pc, #352]	@ (8007184 <HAL_GPIO_Init+0x32c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d037      	beq.n	8007096 <HAL_GPIO_Init+0x23e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a57      	ldr	r2, [pc, #348]	@ (8007188 <HAL_GPIO_Init+0x330>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d031      	beq.n	8007092 <HAL_GPIO_Init+0x23a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a56      	ldr	r2, [pc, #344]	@ (800718c <HAL_GPIO_Init+0x334>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d02b      	beq.n	800708e <HAL_GPIO_Init+0x236>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a55      	ldr	r2, [pc, #340]	@ (8007190 <HAL_GPIO_Init+0x338>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d025      	beq.n	800708a <HAL_GPIO_Init+0x232>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a54      	ldr	r2, [pc, #336]	@ (8007194 <HAL_GPIO_Init+0x33c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d01f      	beq.n	8007086 <HAL_GPIO_Init+0x22e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a53      	ldr	r2, [pc, #332]	@ (8007198 <HAL_GPIO_Init+0x340>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d019      	beq.n	8007082 <HAL_GPIO_Init+0x22a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a52      	ldr	r2, [pc, #328]	@ (800719c <HAL_GPIO_Init+0x344>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d013      	beq.n	800707e <HAL_GPIO_Init+0x226>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a51      	ldr	r2, [pc, #324]	@ (80071a0 <HAL_GPIO_Init+0x348>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00d      	beq.n	800707a <HAL_GPIO_Init+0x222>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a50      	ldr	r2, [pc, #320]	@ (80071a4 <HAL_GPIO_Init+0x34c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d007      	beq.n	8007076 <HAL_GPIO_Init+0x21e>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a4f      	ldr	r2, [pc, #316]	@ (80071a8 <HAL_GPIO_Init+0x350>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d101      	bne.n	8007072 <HAL_GPIO_Init+0x21a>
 800706e:	2309      	movs	r3, #9
 8007070:	e012      	b.n	8007098 <HAL_GPIO_Init+0x240>
 8007072:	230a      	movs	r3, #10
 8007074:	e010      	b.n	8007098 <HAL_GPIO_Init+0x240>
 8007076:	2308      	movs	r3, #8
 8007078:	e00e      	b.n	8007098 <HAL_GPIO_Init+0x240>
 800707a:	2307      	movs	r3, #7
 800707c:	e00c      	b.n	8007098 <HAL_GPIO_Init+0x240>
 800707e:	2306      	movs	r3, #6
 8007080:	e00a      	b.n	8007098 <HAL_GPIO_Init+0x240>
 8007082:	2305      	movs	r3, #5
 8007084:	e008      	b.n	8007098 <HAL_GPIO_Init+0x240>
 8007086:	2304      	movs	r3, #4
 8007088:	e006      	b.n	8007098 <HAL_GPIO_Init+0x240>
 800708a:	2303      	movs	r3, #3
 800708c:	e004      	b.n	8007098 <HAL_GPIO_Init+0x240>
 800708e:	2302      	movs	r3, #2
 8007090:	e002      	b.n	8007098 <HAL_GPIO_Init+0x240>
 8007092:	2301      	movs	r3, #1
 8007094:	e000      	b.n	8007098 <HAL_GPIO_Init+0x240>
 8007096:	2300      	movs	r3, #0
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	f002 0203 	and.w	r2, r2, #3
 800709e:	0092      	lsls	r2, r2, #2
 80070a0:	4093      	lsls	r3, r2
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80070a8:	4935      	ldr	r1, [pc, #212]	@ (8007180 <HAL_GPIO_Init+0x328>)
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	089b      	lsrs	r3, r3, #2
 80070ae:	3302      	adds	r3, #2
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070b6:	4b3d      	ldr	r3, [pc, #244]	@ (80071ac <HAL_GPIO_Init+0x354>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	43db      	mvns	r3, r3
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	4013      	ands	r3, r2
 80070c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070da:	4a34      	ldr	r2, [pc, #208]	@ (80071ac <HAL_GPIO_Init+0x354>)
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070e0:	4b32      	ldr	r3, [pc, #200]	@ (80071ac <HAL_GPIO_Init+0x354>)
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	43db      	mvns	r3, r3
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	4013      	ands	r3, r2
 80070ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007104:	4a29      	ldr	r2, [pc, #164]	@ (80071ac <HAL_GPIO_Init+0x354>)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800710a:	4b28      	ldr	r3, [pc, #160]	@ (80071ac <HAL_GPIO_Init+0x354>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	43db      	mvns	r3, r3
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	4013      	ands	r3, r2
 8007118:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800712e:	4a1f      	ldr	r2, [pc, #124]	@ (80071ac <HAL_GPIO_Init+0x354>)
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007134:	4b1d      	ldr	r3, [pc, #116]	@ (80071ac <HAL_GPIO_Init+0x354>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	43db      	mvns	r3, r3
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	4013      	ands	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007158:	4a14      	ldr	r2, [pc, #80]	@ (80071ac <HAL_GPIO_Init+0x354>)
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	3301      	adds	r3, #1
 8007162:	61fb      	str	r3, [r7, #28]
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	2b0f      	cmp	r3, #15
 8007168:	f67f ae86 	bls.w	8006e78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800716c:	bf00      	nop
 800716e:	bf00      	nop
 8007170:	3724      	adds	r7, #36	@ 0x24
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40023800 	.word	0x40023800
 8007180:	40013800 	.word	0x40013800
 8007184:	40020000 	.word	0x40020000
 8007188:	40020400 	.word	0x40020400
 800718c:	40020800 	.word	0x40020800
 8007190:	40020c00 	.word	0x40020c00
 8007194:	40021000 	.word	0x40021000
 8007198:	40021400 	.word	0x40021400
 800719c:	40021800 	.word	0x40021800
 80071a0:	40021c00 	.word	0x40021c00
 80071a4:	40022000 	.word	0x40022000
 80071a8:	40022400 	.word	0x40022400
 80071ac:	40013c00 	.word	0x40013c00

080071b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	807b      	strh	r3, [r7, #2]
 80071bc:	4613      	mov	r3, r2
 80071be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80071c0:	787b      	ldrb	r3, [r7, #1]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071c6:	887a      	ldrh	r2, [r7, #2]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80071cc:	e003      	b.n	80071d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80071ce:	887b      	ldrh	r3, [r7, #2]
 80071d0:	041a      	lsls	r2, r3, #16
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	619a      	str	r2, [r3, #24]
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b086      	sub	sp, #24
 80071e6:	af02      	add	r7, sp, #8
 80071e8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e059      	b.n	80072a8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d106      	bne.n	8007214 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f012 fab4 	bl	801977c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2203      	movs	r2, #3
 8007218:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007222:	d102      	bne.n	800722a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f009 f995 	bl	801055e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6818      	ldr	r0, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	7c1a      	ldrb	r2, [r3, #16]
 800723c:	f88d 2000 	strb.w	r2, [sp]
 8007240:	3304      	adds	r3, #4
 8007242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007244:	f009 f920 	bl	8010488 <USB_CoreInit>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2202      	movs	r2, #2
 8007252:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e026      	b.n	80072a8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2101      	movs	r1, #1
 8007260:	4618      	mov	r0, r3
 8007262:	f009 f98d 	bl	8010580 <USB_SetCurrentMode>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e017      	b.n	80072a8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	7c1a      	ldrb	r2, [r3, #16]
 8007280:	f88d 2000 	strb.w	r2, [sp]
 8007284:	3304      	adds	r3, #4
 8007286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007288:	f009 fb36 	bl	80108f8 <USB_HostInit>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e004      	b.n	80072a8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80072b0:	b590      	push	{r4, r7, lr}
 80072b2:	b08b      	sub	sp, #44	@ 0x2c
 80072b4:	af04      	add	r7, sp, #16
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	4608      	mov	r0, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	461a      	mov	r2, r3
 80072be:	4603      	mov	r3, r0
 80072c0:	70fb      	strb	r3, [r7, #3]
 80072c2:	460b      	mov	r3, r1
 80072c4:	70bb      	strb	r3, [r7, #2]
 80072c6:	4613      	mov	r3, r2
 80072c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80072ca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80072cc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_HCD_HC_Init+0x2c>
 80072d8:	2302      	movs	r3, #2
 80072da:	e09d      	b.n	8007418 <HAL_HCD_HC_Init+0x168>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80072e4:	78fa      	ldrb	r2, [r7, #3]
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	4613      	mov	r3, r2
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	1a9b      	subs	r3, r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	3319      	adds	r3, #25
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80072f8:	78fa      	ldrb	r2, [r7, #3]
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	1a9b      	subs	r3, r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	3314      	adds	r3, #20
 8007308:	787a      	ldrb	r2, [r7, #1]
 800730a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800730c:	78fa      	ldrb	r2, [r7, #3]
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	1a9b      	subs	r3, r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	3315      	adds	r3, #21
 800731c:	78fa      	ldrb	r2, [r7, #3]
 800731e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	4613      	mov	r3, r2
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	1a9b      	subs	r3, r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	3326      	adds	r3, #38	@ 0x26
 8007330:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007334:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	78bb      	ldrb	r3, [r7, #2]
 800733a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800733e:	b2d8      	uxtb	r0, r3
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	3316      	adds	r3, #22
 800734e:	4602      	mov	r2, r0
 8007350:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fbc8 	bl	8007aec <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800735c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007360:	2b00      	cmp	r3, #0
 8007362:	da0a      	bge.n	800737a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007364:	78fa      	ldrb	r2, [r7, #3]
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	4613      	mov	r3, r2
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	1a9b      	subs	r3, r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	440b      	add	r3, r1
 8007372:	3317      	adds	r3, #23
 8007374:	2201      	movs	r2, #1
 8007376:	701a      	strb	r2, [r3, #0]
 8007378:	e009      	b.n	800738e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800737a:	78fa      	ldrb	r2, [r7, #3]
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	4613      	mov	r3, r2
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	1a9b      	subs	r3, r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	440b      	add	r3, r1
 8007388:	3317      	adds	r3, #23
 800738a:	2200      	movs	r2, #0
 800738c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f009 fc08 	bl	8010ba8 <USB_GetHostSpeed>
 8007398:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800739a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d10b      	bne.n	80073ba <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80073a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d107      	bne.n	80073ba <HAL_HCD_HC_Init+0x10a>
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d104      	bne.n	80073ba <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2bbc      	cmp	r3, #188	@ 0xbc
 80073b4:	d901      	bls.n	80073ba <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80073b6:	23bc      	movs	r3, #188	@ 0xbc
 80073b8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80073ba:	78fa      	ldrb	r2, [r7, #3]
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	1a9b      	subs	r3, r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	3318      	adds	r3, #24
 80073ca:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80073ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80073d0:	78fa      	ldrb	r2, [r7, #3]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	b298      	uxth	r0, r3
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	4613      	mov	r3, r2
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	1a9b      	subs	r3, r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	440b      	add	r3, r1
 80073e2:	3328      	adds	r3, #40	@ 0x28
 80073e4:	4602      	mov	r2, r0
 80073e6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	787c      	ldrb	r4, [r7, #1]
 80073f2:	78ba      	ldrb	r2, [r7, #2]
 80073f4:	78f9      	ldrb	r1, [r7, #3]
 80073f6:	9302      	str	r3, [sp, #8]
 80073f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	4623      	mov	r3, r4
 8007406:	f009 fbf7 	bl	8010bf8 <USB_HC_Init>
 800740a:	4603      	mov	r3, r0
 800740c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8007416:	7bfb      	ldrb	r3, [r7, #15]
}
 8007418:	4618      	mov	r0, r3
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	bd90      	pop	{r4, r7, pc}

08007420 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <HAL_HCD_HC_Halt+0x1e>
 800743a:	2302      	movs	r3, #2
 800743c:	e00f      	b.n	800745e <HAL_HCD_HC_Halt+0x3e>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f009 ff89 	bl	8011366 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
	...

08007468 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	4608      	mov	r0, r1
 8007472:	4611      	mov	r1, r2
 8007474:	461a      	mov	r2, r3
 8007476:	4603      	mov	r3, r0
 8007478:	70fb      	strb	r3, [r7, #3]
 800747a:	460b      	mov	r3, r1
 800747c:	70bb      	strb	r3, [r7, #2]
 800747e:	4613      	mov	r3, r2
 8007480:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007482:	78fa      	ldrb	r2, [r7, #3]
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	1a9b      	subs	r3, r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	3317      	adds	r3, #23
 8007492:	78ba      	ldrb	r2, [r7, #2]
 8007494:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007496:	78fa      	ldrb	r2, [r7, #3]
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	4613      	mov	r3, r2
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	1a9b      	subs	r3, r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	440b      	add	r3, r1
 80074a4:	3326      	adds	r3, #38	@ 0x26
 80074a6:	787a      	ldrb	r2, [r7, #1]
 80074a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80074aa:	7c3b      	ldrb	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d114      	bne.n	80074da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80074b0:	78fa      	ldrb	r2, [r7, #3]
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	4613      	mov	r3, r2
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	1a9b      	subs	r3, r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	332a      	adds	r3, #42	@ 0x2a
 80074c0:	2203      	movs	r2, #3
 80074c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80074c4:	78fa      	ldrb	r2, [r7, #3]
 80074c6:	6879      	ldr	r1, [r7, #4]
 80074c8:	4613      	mov	r3, r2
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	1a9b      	subs	r3, r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	440b      	add	r3, r1
 80074d2:	3319      	adds	r3, #25
 80074d4:	7f3a      	ldrb	r2, [r7, #28]
 80074d6:	701a      	strb	r2, [r3, #0]
 80074d8:	e009      	b.n	80074ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80074da:	78fa      	ldrb	r2, [r7, #3]
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	4613      	mov	r3, r2
 80074e0:	011b      	lsls	r3, r3, #4
 80074e2:	1a9b      	subs	r3, r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	440b      	add	r3, r1
 80074e8:	332a      	adds	r3, #42	@ 0x2a
 80074ea:	2202      	movs	r2, #2
 80074ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80074ee:	787b      	ldrb	r3, [r7, #1]
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	f200 8102 	bhi.w	80076fa <HAL_HCD_HC_SubmitRequest+0x292>
 80074f6:	a201      	add	r2, pc, #4	@ (adr r2, 80074fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	0800750d 	.word	0x0800750d
 8007500:	080076e5 	.word	0x080076e5
 8007504:	080075d1 	.word	0x080075d1
 8007508:	0800765b 	.word	0x0800765b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800750c:	7c3b      	ldrb	r3, [r7, #16]
 800750e:	2b01      	cmp	r3, #1
 8007510:	f040 80f5 	bne.w	80076fe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8007514:	78bb      	ldrb	r3, [r7, #2]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d12d      	bne.n	8007576 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800751a:	8b3b      	ldrh	r3, [r7, #24]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d109      	bne.n	8007534 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8007520:	78fa      	ldrb	r2, [r7, #3]
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	4613      	mov	r3, r2
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	1a9b      	subs	r3, r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	333d      	adds	r3, #61	@ 0x3d
 8007530:	2201      	movs	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	4613      	mov	r3, r2
 800753a:	011b      	lsls	r3, r3, #4
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	440b      	add	r3, r1
 8007542:	333d      	adds	r3, #61	@ 0x3d
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10a      	bne.n	8007560 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800754a:	78fa      	ldrb	r2, [r7, #3]
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	4613      	mov	r3, r2
 8007550:	011b      	lsls	r3, r3, #4
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	440b      	add	r3, r1
 8007558:	332a      	adds	r3, #42	@ 0x2a
 800755a:	2200      	movs	r2, #0
 800755c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800755e:	e0ce      	b.n	80076fe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	4613      	mov	r3, r2
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	1a9b      	subs	r3, r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	440b      	add	r3, r1
 800756e:	332a      	adds	r3, #42	@ 0x2a
 8007570:	2202      	movs	r2, #2
 8007572:	701a      	strb	r2, [r3, #0]
      break;
 8007574:	e0c3      	b.n	80076fe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8007576:	78fa      	ldrb	r2, [r7, #3]
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	4613      	mov	r3, r2
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	1a9b      	subs	r3, r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	440b      	add	r3, r1
 8007584:	331a      	adds	r3, #26
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	2b01      	cmp	r3, #1
 800758a:	f040 80b8 	bne.w	80076fe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	333c      	adds	r3, #60	@ 0x3c
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	1a9b      	subs	r3, r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	332a      	adds	r3, #42	@ 0x2a
 80075b4:	2200      	movs	r2, #0
 80075b6:	701a      	strb	r2, [r3, #0]
      break;
 80075b8:	e0a1      	b.n	80076fe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	1a9b      	subs	r3, r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	332a      	adds	r3, #42	@ 0x2a
 80075ca:	2202      	movs	r2, #2
 80075cc:	701a      	strb	r2, [r3, #0]
      break;
 80075ce:	e096      	b.n	80076fe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80075d0:	78bb      	ldrb	r3, [r7, #2]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d120      	bne.n	8007618 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	4613      	mov	r3, r2
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	440b      	add	r3, r1
 80075e4:	333d      	adds	r3, #61	@ 0x3d
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80075ec:	78fa      	ldrb	r2, [r7, #3]
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4613      	mov	r3, r2
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	332a      	adds	r3, #42	@ 0x2a
 80075fc:	2200      	movs	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007600:	e07e      	b.n	8007700 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007602:	78fa      	ldrb	r2, [r7, #3]
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	4613      	mov	r3, r2
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	1a9b      	subs	r3, r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	440b      	add	r3, r1
 8007610:	332a      	adds	r3, #42	@ 0x2a
 8007612:	2202      	movs	r2, #2
 8007614:	701a      	strb	r2, [r3, #0]
      break;
 8007616:	e073      	b.n	8007700 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	4613      	mov	r3, r2
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	1a9b      	subs	r3, r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	440b      	add	r3, r1
 8007626:	333c      	adds	r3, #60	@ 0x3c
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800762e:	78fa      	ldrb	r2, [r7, #3]
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	4613      	mov	r3, r2
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	1a9b      	subs	r3, r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	440b      	add	r3, r1
 800763c:	332a      	adds	r3, #42	@ 0x2a
 800763e:	2200      	movs	r2, #0
 8007640:	701a      	strb	r2, [r3, #0]
      break;
 8007642:	e05d      	b.n	8007700 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007644:	78fa      	ldrb	r2, [r7, #3]
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	4613      	mov	r3, r2
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	1a9b      	subs	r3, r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	440b      	add	r3, r1
 8007652:	332a      	adds	r3, #42	@ 0x2a
 8007654:	2202      	movs	r2, #2
 8007656:	701a      	strb	r2, [r3, #0]
      break;
 8007658:	e052      	b.n	8007700 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800765a:	78bb      	ldrb	r3, [r7, #2]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d120      	bne.n	80076a2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	4613      	mov	r3, r2
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	440b      	add	r3, r1
 800766e:	333d      	adds	r3, #61	@ 0x3d
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10a      	bne.n	800768c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007676:	78fa      	ldrb	r2, [r7, #3]
 8007678:	6879      	ldr	r1, [r7, #4]
 800767a:	4613      	mov	r3, r2
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	440b      	add	r3, r1
 8007684:	332a      	adds	r3, #42	@ 0x2a
 8007686:	2200      	movs	r2, #0
 8007688:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800768a:	e039      	b.n	8007700 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800768c:	78fa      	ldrb	r2, [r7, #3]
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	4613      	mov	r3, r2
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	1a9b      	subs	r3, r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	440b      	add	r3, r1
 800769a:	332a      	adds	r3, #42	@ 0x2a
 800769c:	2202      	movs	r2, #2
 800769e:	701a      	strb	r2, [r3, #0]
      break;
 80076a0:	e02e      	b.n	8007700 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80076a2:	78fa      	ldrb	r2, [r7, #3]
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	4613      	mov	r3, r2
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	1a9b      	subs	r3, r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	333c      	adds	r3, #60	@ 0x3c
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10a      	bne.n	80076ce <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80076b8:	78fa      	ldrb	r2, [r7, #3]
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4613      	mov	r3, r2
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	1a9b      	subs	r3, r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	332a      	adds	r3, #42	@ 0x2a
 80076c8:	2200      	movs	r2, #0
 80076ca:	701a      	strb	r2, [r3, #0]
      break;
 80076cc:	e018      	b.n	8007700 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80076ce:	78fa      	ldrb	r2, [r7, #3]
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	4613      	mov	r3, r2
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	1a9b      	subs	r3, r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	332a      	adds	r3, #42	@ 0x2a
 80076de:	2202      	movs	r2, #2
 80076e0:	701a      	strb	r2, [r3, #0]
      break;
 80076e2:	e00d      	b.n	8007700 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	4613      	mov	r3, r2
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	1a9b      	subs	r3, r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	440b      	add	r3, r1
 80076f2:	332a      	adds	r3, #42	@ 0x2a
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
      break;
 80076f8:	e002      	b.n	8007700 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80076fa:	bf00      	nop
 80076fc:	e000      	b.n	8007700 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80076fe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007700:	78fa      	ldrb	r2, [r7, #3]
 8007702:	6879      	ldr	r1, [r7, #4]
 8007704:	4613      	mov	r3, r2
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	1a9b      	subs	r3, r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	440b      	add	r3, r1
 800770e:	332c      	adds	r3, #44	@ 0x2c
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007714:	78fa      	ldrb	r2, [r7, #3]
 8007716:	8b39      	ldrh	r1, [r7, #24]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	4613      	mov	r3, r2
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	1a9b      	subs	r3, r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4403      	add	r3, r0
 8007724:	3334      	adds	r3, #52	@ 0x34
 8007726:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007728:	78fa      	ldrb	r2, [r7, #3]
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	4613      	mov	r3, r2
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	1a9b      	subs	r3, r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	440b      	add	r3, r1
 8007736:	334c      	adds	r3, #76	@ 0x4c
 8007738:	2200      	movs	r2, #0
 800773a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800773c:	78fa      	ldrb	r2, [r7, #3]
 800773e:	6879      	ldr	r1, [r7, #4]
 8007740:	4613      	mov	r3, r2
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	1a9b      	subs	r3, r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	440b      	add	r3, r1
 800774a:	3338      	adds	r3, #56	@ 0x38
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007750:	78fa      	ldrb	r2, [r7, #3]
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	440b      	add	r3, r1
 800775e:	3315      	adds	r3, #21
 8007760:	78fa      	ldrb	r2, [r7, #3]
 8007762:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	4613      	mov	r3, r2
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	1a9b      	subs	r3, r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	440b      	add	r3, r1
 8007772:	334d      	adds	r3, #77	@ 0x4d
 8007774:	2200      	movs	r2, #0
 8007776:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	78fa      	ldrb	r2, [r7, #3]
 800777e:	4613      	mov	r3, r2
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	1a9b      	subs	r3, r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	3310      	adds	r3, #16
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4413      	add	r3, r2
 800778c:	1d19      	adds	r1, r3, #4
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	799b      	ldrb	r3, [r3, #6]
 8007792:	461a      	mov	r2, r3
 8007794:	f009 fb5c 	bl	8010e50 <USB_HC_StartXfer>
 8007798:	4603      	mov	r3, r0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop

080077a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f009 f856 	bl	801086c <USB_GetMode>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	f040 80fb 	bne.w	80079be <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f009 f819 	bl	8010804 <USB_ReadInterrupts>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 80f1 	beq.w	80079bc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4618      	mov	r0, r3
 80077e0:	f009 f810 	bl	8010804 <USB_ReadInterrupts>
 80077e4:	4603      	mov	r3, r0
 80077e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077ee:	d104      	bne.n	80077fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80077f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4618      	mov	r0, r3
 8007800:	f009 f800 	bl	8010804 <USB_ReadInterrupts>
 8007804:	4603      	mov	r3, r0
 8007806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800780a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800780e:	d104      	bne.n	800781a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007818:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4618      	mov	r0, r3
 8007820:	f008 fff0 	bl	8010804 <USB_ReadInterrupts>
 8007824:	4603      	mov	r3, r0
 8007826:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800782a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800782e:	d104      	bne.n	800783a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007838:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4618      	mov	r0, r3
 8007840:	f008 ffe0 	bl	8010804 <USB_ReadInterrupts>
 8007844:	4603      	mov	r3, r0
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b02      	cmp	r3, #2
 800784c:	d103      	bne.n	8007856 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2202      	movs	r2, #2
 8007854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f008 ffd2 	bl	8010804 <USB_ReadInterrupts>
 8007860:	4603      	mov	r3, r0
 8007862:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800786a:	d120      	bne.n	80078ae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007874:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d113      	bne.n	80078ae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8007886:	2110      	movs	r1, #16
 8007888:	6938      	ldr	r0, [r7, #16]
 800788a:	f008 fec5 	bl	8010618 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800788e:	6938      	ldr	r0, [r7, #16]
 8007890:	f008 fef4 	bl	801067c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	7a5b      	ldrb	r3, [r3, #9]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d105      	bne.n	80078a8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2101      	movs	r1, #1
 80078a2:	4618      	mov	r0, r3
 80078a4:	f009 f8e0 	bl	8010a68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f011 ffd9 	bl	8019860 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f008 ffa6 	bl	8010804 <USB_ReadInterrupts>
 80078b8:	4603      	mov	r3, r0
 80078ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078c2:	d102      	bne.n	80078ca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 fd4d 	bl	8009364 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f008 ff98 	bl	8010804 <USB_ReadInterrupts>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	2b08      	cmp	r3, #8
 80078dc:	d106      	bne.n	80078ec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f011 ffa2 	bl	8019828 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2208      	movs	r2, #8
 80078ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f008 ff87 	bl	8010804 <USB_ReadInterrupts>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007900:	d139      	bne.n	8007976 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f009 fd1c 	bl	8011344 <USB_HC_ReadInterrupt>
 800790c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	e025      	b.n	8007960 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	fa22 f303 	lsr.w	r3, r2, r3
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d018      	beq.n	800795a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800793a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800793e:	d106      	bne.n	800794e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f905 	bl	8007b56 <HCD_HC_IN_IRQHandler>
 800794c:	e005      	b.n	800795a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 ff67 	bl	8008828 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	3301      	adds	r3, #1
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	795b      	ldrb	r3, [r3, #5]
 8007964:	461a      	mov	r2, r3
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	4293      	cmp	r3, r2
 800796a:	d3d3      	bcc.n	8007914 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4618      	mov	r0, r3
 800797c:	f008 ff42 	bl	8010804 <USB_ReadInterrupts>
 8007980:	4603      	mov	r3, r0
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b10      	cmp	r3, #16
 8007988:	d101      	bne.n	800798e <HAL_HCD_IRQHandler+0x1ea>
 800798a:	2301      	movs	r3, #1
 800798c:	e000      	b.n	8007990 <HAL_HCD_IRQHandler+0x1ec>
 800798e:	2300      	movs	r3, #0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d014      	beq.n	80079be <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699a      	ldr	r2, [r3, #24]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0210 	bic.w	r2, r2, #16
 80079a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 fbfe 	bl	80091a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	699a      	ldr	r2, [r3, #24]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0210 	orr.w	r2, r2, #16
 80079b8:	619a      	str	r2, [r3, #24]
 80079ba:	e000      	b.n	80079be <HAL_HCD_IRQHandler+0x21a>
      return;
 80079bc:	bf00      	nop
    }
  }
}
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d101      	bne.n	80079da <HAL_HCD_Start+0x16>
 80079d6:	2302      	movs	r3, #2
 80079d8:	e013      	b.n	8007a02 <HAL_HCD_Start+0x3e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2101      	movs	r1, #1
 80079e8:	4618      	mov	r0, r3
 80079ea:	f009 f8a4 	bl	8010b36 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f008 fda2 	bl	801053c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_HCD_Stop+0x16>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e00d      	b.n	8007a3c <HAL_HCD_Stop+0x32>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f009 fdf7 	bl	8011620 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f009 f846 	bl	8010ae2 <USB_ResetPort>
 8007a56:	4603      	mov	r3, r0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007a6c:	78fa      	ldrb	r2, [r7, #3]
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	4613      	mov	r3, r2
 8007a72:	011b      	lsls	r3, r3, #4
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	440b      	add	r3, r1
 8007a7a:	334c      	adds	r3, #76	@ 0x4c
 8007a7c:	781b      	ldrb	r3, [r3, #0]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	460b      	mov	r3, r1
 8007a94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8007a96:	78fa      	ldrb	r2, [r7, #3]
 8007a98:	6879      	ldr	r1, [r7, #4]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	1a9b      	subs	r3, r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	3338      	adds	r3, #56	@ 0x38
 8007aa6:	681b      	ldr	r3, [r3, #0]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f009 f888 	bl	8010bd6 <USB_GetCurrentFrame>
 8007ac6:	4603      	mov	r3, r0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f009 f863 	bl	8010ba8 <USB_GetHostSpeed>
 8007ae2:	4603      	mov	r3, r0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8007af8:	78fa      	ldrb	r2, [r7, #3]
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	4613      	mov	r3, r2
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	1a9b      	subs	r3, r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	440b      	add	r3, r1
 8007b06:	331a      	adds	r3, #26
 8007b08:	2200      	movs	r2, #0
 8007b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8007b0c:	78fa      	ldrb	r2, [r7, #3]
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	331b      	adds	r3, #27
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	4613      	mov	r3, r2
 8007b26:	011b      	lsls	r3, r3, #4
 8007b28:	1a9b      	subs	r3, r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	440b      	add	r3, r1
 8007b2e:	3325      	adds	r3, #37	@ 0x25
 8007b30:	2200      	movs	r2, #0
 8007b32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8007b34:	78fa      	ldrb	r2, [r7, #3]
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	011b      	lsls	r3, r3, #4
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	440b      	add	r3, r1
 8007b42:	3324      	adds	r3, #36	@ 0x24
 8007b44:	2200      	movs	r2, #0
 8007b46:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b086      	sub	sp, #24
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	78fa      	ldrb	r2, [r7, #3]
 8007b72:	4611      	mov	r1, r2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f008 fe58 	bl	801082a <USB_ReadChInterrupts>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d11a      	bne.n	8007bba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b90:	461a      	mov	r2, r3
 8007b92:	2304      	movs	r3, #4
 8007b94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007b96:	78fa      	ldrb	r2, [r7, #3]
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	440b      	add	r3, r1
 8007ba4:	334d      	adds	r3, #77	@ 0x4d
 8007ba6:	2207      	movs	r2, #7
 8007ba8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	78fa      	ldrb	r2, [r7, #3]
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f009 fbd7 	bl	8011366 <USB_HC_Halt>
 8007bb8:	e09e      	b.n	8007cf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	78fa      	ldrb	r2, [r7, #3]
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f008 fe31 	bl	801082a <USB_ReadChInterrupts>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bd2:	d11b      	bne.n	8007c0c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007be0:	461a      	mov	r2, r3
 8007be2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007be6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8007be8:	78fa      	ldrb	r2, [r7, #3]
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	4613      	mov	r3, r2
 8007bee:	011b      	lsls	r3, r3, #4
 8007bf0:	1a9b      	subs	r3, r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	334d      	adds	r3, #77	@ 0x4d
 8007bf8:	2208      	movs	r2, #8
 8007bfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	4611      	mov	r1, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f009 fbae 	bl	8011366 <USB_HC_Halt>
 8007c0a:	e075      	b.n	8007cf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	78fa      	ldrb	r2, [r7, #3]
 8007c12:	4611      	mov	r1, r2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f008 fe08 	bl	801082a <USB_ReadChInterrupts>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d11a      	bne.n	8007c5a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007c24:	78fb      	ldrb	r3, [r7, #3]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c30:	461a      	mov	r2, r3
 8007c32:	2308      	movs	r3, #8
 8007c34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007c36:	78fa      	ldrb	r2, [r7, #3]
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	1a9b      	subs	r3, r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	334d      	adds	r3, #77	@ 0x4d
 8007c46:	2206      	movs	r2, #6
 8007c48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	4611      	mov	r1, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f009 fb87 	bl	8011366 <USB_HC_Halt>
 8007c58:	e04e      	b.n	8007cf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	78fa      	ldrb	r2, [r7, #3]
 8007c60:	4611      	mov	r1, r2
 8007c62:	4618      	mov	r0, r3
 8007c64:	f008 fde1 	bl	801082a <USB_ReadChInterrupts>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c72:	d11b      	bne.n	8007cac <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c80:	461a      	mov	r2, r3
 8007c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007c88:	78fa      	ldrb	r2, [r7, #3]
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	011b      	lsls	r3, r3, #4
 8007c90:	1a9b      	subs	r3, r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	334d      	adds	r3, #77	@ 0x4d
 8007c98:	2209      	movs	r2, #9
 8007c9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	78fa      	ldrb	r2, [r7, #3]
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f009 fb5e 	bl	8011366 <USB_HC_Halt>
 8007caa:	e025      	b.n	8007cf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	78fa      	ldrb	r2, [r7, #3]
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f008 fdb8 	bl	801082a <USB_ReadChInterrupts>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cc0:	2b80      	cmp	r3, #128	@ 0x80
 8007cc2:	d119      	bne.n	8007cf8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	2380      	movs	r3, #128	@ 0x80
 8007cd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007cd6:	78fa      	ldrb	r2, [r7, #3]
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	011b      	lsls	r3, r3, #4
 8007cde:	1a9b      	subs	r3, r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	440b      	add	r3, r1
 8007ce4:	334d      	adds	r3, #77	@ 0x4d
 8007ce6:	2207      	movs	r2, #7
 8007ce8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f009 fb37 	bl	8011366 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	78fa      	ldrb	r2, [r7, #3]
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4618      	mov	r0, r3
 8007d02:	f008 fd92 	bl	801082a <USB_ReadChInterrupts>
 8007d06:	4603      	mov	r3, r0
 8007d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d10:	d112      	bne.n	8007d38 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	78fa      	ldrb	r2, [r7, #3]
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f009 fb23 	bl	8011366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d32:	6093      	str	r3, [r2, #8]
 8007d34:	f000 bd75 	b.w	8008822 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	78fa      	ldrb	r2, [r7, #3]
 8007d3e:	4611      	mov	r1, r2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f008 fd72 	bl	801082a <USB_ReadChInterrupts>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	f040 8128 	bne.w	8007fa2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007d52:	78fb      	ldrb	r3, [r7, #3]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d5e:	461a      	mov	r2, r3
 8007d60:	2320      	movs	r3, #32
 8007d62:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007d64:	78fa      	ldrb	r2, [r7, #3]
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	1a9b      	subs	r3, r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	440b      	add	r3, r1
 8007d72:	331b      	adds	r3, #27
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d119      	bne.n	8007dae <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	1a9b      	subs	r3, r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	331b      	adds	r3, #27
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	78fa      	ldrb	r2, [r7, #3]
 8007d9e:	0151      	lsls	r1, r2, #5
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	440a      	add	r2, r1
 8007da4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dac:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	799b      	ldrb	r3, [r3, #6]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d01b      	beq.n	8007dee <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007db6:	78fa      	ldrb	r2, [r7, #3]
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	1a9b      	subs	r3, r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	3330      	adds	r3, #48	@ 0x30
 8007dc6:	6819      	ldr	r1, [r3, #0]
 8007dc8:	78fb      	ldrb	r3, [r7, #3]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dda:	78fa      	ldrb	r2, [r7, #3]
 8007ddc:	1ac9      	subs	r1, r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	4613      	mov	r3, r2
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4403      	add	r3, r0
 8007dea:	3338      	adds	r3, #56	@ 0x38
 8007dec:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8007dee:	78fa      	ldrb	r2, [r7, #3]
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	4613      	mov	r3, r2
 8007df4:	011b      	lsls	r3, r3, #4
 8007df6:	1a9b      	subs	r3, r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	334d      	adds	r3, #77	@ 0x4d
 8007dfe:	2201      	movs	r2, #1
 8007e00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8007e02:	78fa      	ldrb	r2, [r7, #3]
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	4613      	mov	r3, r2
 8007e08:	011b      	lsls	r3, r3, #4
 8007e0a:	1a9b      	subs	r3, r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	440b      	add	r3, r1
 8007e10:	3344      	adds	r3, #68	@ 0x44
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007e16:	78fb      	ldrb	r3, [r7, #3]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e22:	461a      	mov	r2, r3
 8007e24:	2301      	movs	r3, #1
 8007e26:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e28:	78fa      	ldrb	r2, [r7, #3]
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	440b      	add	r3, r1
 8007e36:	3326      	adds	r3, #38	@ 0x26
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007e3e:	78fa      	ldrb	r2, [r7, #3]
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	4613      	mov	r3, r2
 8007e44:	011b      	lsls	r3, r3, #4
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	440b      	add	r3, r1
 8007e4c:	3326      	adds	r3, #38	@ 0x26
 8007e4e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d110      	bne.n	8007e76 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	78fa      	ldrb	r2, [r7, #3]
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f009 fa82 	bl	8011366 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007e62:	78fb      	ldrb	r3, [r7, #3]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e6e:	461a      	mov	r2, r3
 8007e70:	2310      	movs	r3, #16
 8007e72:	6093      	str	r3, [r2, #8]
 8007e74:	e03d      	b.n	8007ef2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	011b      	lsls	r3, r3, #4
 8007e7e:	1a9b      	subs	r3, r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	3326      	adds	r3, #38	@ 0x26
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d00a      	beq.n	8007ea2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	6879      	ldr	r1, [r7, #4]
 8007e90:	4613      	mov	r3, r2
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	3326      	adds	r3, #38	@ 0x26
 8007e9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d127      	bne.n	8007ef2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007ea2:	78fb      	ldrb	r3, [r7, #3]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	78fa      	ldrb	r2, [r7, #3]
 8007eb2:	0151      	lsls	r1, r2, #5
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	440a      	add	r2, r1
 8007eb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ebc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ec0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007ec2:	78fa      	ldrb	r2, [r7, #3]
 8007ec4:	6879      	ldr	r1, [r7, #4]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	011b      	lsls	r3, r3, #4
 8007eca:	1a9b      	subs	r3, r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	440b      	add	r3, r1
 8007ed0:	334c      	adds	r3, #76	@ 0x4c
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007ed6:	78fa      	ldrb	r2, [r7, #3]
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	4613      	mov	r3, r2
 8007edc:	011b      	lsls	r3, r3, #4
 8007ede:	1a9b      	subs	r3, r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	334c      	adds	r3, #76	@ 0x4c
 8007ee6:	781a      	ldrb	r2, [r3, #0]
 8007ee8:	78fb      	ldrb	r3, [r7, #3]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f011 fcc5 	bl	801987c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	799b      	ldrb	r3, [r3, #6]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d13b      	bne.n	8007f72 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8007efa:	78fa      	ldrb	r2, [r7, #3]
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	4613      	mov	r3, r2
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	1a9b      	subs	r3, r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	440b      	add	r3, r1
 8007f08:	3338      	adds	r3, #56	@ 0x38
 8007f0a:	6819      	ldr	r1, [r3, #0]
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4613      	mov	r3, r2
 8007f12:	011b      	lsls	r3, r3, #4
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4403      	add	r3, r0
 8007f1a:	3328      	adds	r3, #40	@ 0x28
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	440b      	add	r3, r1
 8007f20:	1e59      	subs	r1, r3, #1
 8007f22:	78fa      	ldrb	r2, [r7, #3]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4403      	add	r3, r0
 8007f30:	3328      	adds	r3, #40	@ 0x28
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 8470 	beq.w	8008822 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	011b      	lsls	r3, r3, #4
 8007f4a:	1a9b      	subs	r3, r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	440b      	add	r3, r1
 8007f50:	333c      	adds	r3, #60	@ 0x3c
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	78fa      	ldrb	r2, [r7, #3]
 8007f56:	f083 0301 	eor.w	r3, r3, #1
 8007f5a:	b2d8      	uxtb	r0, r3
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	1a9b      	subs	r3, r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	440b      	add	r3, r1
 8007f68:	333c      	adds	r3, #60	@ 0x3c
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	701a      	strb	r2, [r3, #0]
 8007f6e:	f000 bc58 	b.w	8008822 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8007f72:	78fa      	ldrb	r2, [r7, #3]
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	4613      	mov	r3, r2
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	1a9b      	subs	r3, r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	440b      	add	r3, r1
 8007f80:	333c      	adds	r3, #60	@ 0x3c
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	f083 0301 	eor.w	r3, r3, #1
 8007f8a:	b2d8      	uxtb	r0, r3
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	1a9b      	subs	r3, r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	440b      	add	r3, r1
 8007f98:	333c      	adds	r3, #60	@ 0x3c
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	f000 bc40 	b.w	8008822 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	78fa      	ldrb	r2, [r7, #3]
 8007fa8:	4611      	mov	r1, r2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f008 fc3d 	bl	801082a <USB_ReadChInterrupts>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f003 0320 	and.w	r3, r3, #32
 8007fb6:	2b20      	cmp	r3, #32
 8007fb8:	d131      	bne.n	800801e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007fba:	78fb      	ldrb	r3, [r7, #3]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	2320      	movs	r3, #32
 8007fca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8007fcc:	78fa      	ldrb	r2, [r7, #3]
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	1a9b      	subs	r3, r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	440b      	add	r3, r1
 8007fda:	331a      	adds	r3, #26
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	f040 841f 	bne.w	8008822 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	331b      	adds	r3, #27
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007ff8:	78fa      	ldrb	r2, [r7, #3]
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	011b      	lsls	r3, r3, #4
 8008000:	1a9b      	subs	r3, r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	440b      	add	r3, r1
 8008006:	334d      	adds	r3, #77	@ 0x4d
 8008008:	2203      	movs	r2, #3
 800800a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	78fa      	ldrb	r2, [r7, #3]
 8008012:	4611      	mov	r1, r2
 8008014:	4618      	mov	r0, r3
 8008016:	f009 f9a6 	bl	8011366 <USB_HC_Halt>
 800801a:	f000 bc02 	b.w	8008822 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	78fa      	ldrb	r2, [r7, #3]
 8008024:	4611      	mov	r1, r2
 8008026:	4618      	mov	r0, r3
 8008028:	f008 fbff 	bl	801082a <USB_ReadChInterrupts>
 800802c:	4603      	mov	r3, r0
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b02      	cmp	r3, #2
 8008034:	f040 8305 	bne.w	8008642 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	4413      	add	r3, r2
 8008040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008044:	461a      	mov	r2, r3
 8008046:	2302      	movs	r3, #2
 8008048:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800804a:	78fa      	ldrb	r2, [r7, #3]
 800804c:	6879      	ldr	r1, [r7, #4]
 800804e:	4613      	mov	r3, r2
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	1a9b      	subs	r3, r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	440b      	add	r3, r1
 8008058:	334d      	adds	r3, #77	@ 0x4d
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d114      	bne.n	800808a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008060:	78fa      	ldrb	r2, [r7, #3]
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	4613      	mov	r3, r2
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	1a9b      	subs	r3, r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	440b      	add	r3, r1
 800806e:	334d      	adds	r3, #77	@ 0x4d
 8008070:	2202      	movs	r2, #2
 8008072:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008074:	78fa      	ldrb	r2, [r7, #3]
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	4613      	mov	r3, r2
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	1a9b      	subs	r3, r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	440b      	add	r3, r1
 8008082:	334c      	adds	r3, #76	@ 0x4c
 8008084:	2201      	movs	r2, #1
 8008086:	701a      	strb	r2, [r3, #0]
 8008088:	e2cc      	b.n	8008624 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800808a:	78fa      	ldrb	r2, [r7, #3]
 800808c:	6879      	ldr	r1, [r7, #4]
 800808e:	4613      	mov	r3, r2
 8008090:	011b      	lsls	r3, r3, #4
 8008092:	1a9b      	subs	r3, r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	440b      	add	r3, r1
 8008098:	334d      	adds	r3, #77	@ 0x4d
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b06      	cmp	r3, #6
 800809e:	d114      	bne.n	80080ca <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80080a0:	78fa      	ldrb	r2, [r7, #3]
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	4613      	mov	r3, r2
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	440b      	add	r3, r1
 80080ae:	334d      	adds	r3, #77	@ 0x4d
 80080b0:	2202      	movs	r2, #2
 80080b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80080b4:	78fa      	ldrb	r2, [r7, #3]
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	4613      	mov	r3, r2
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	1a9b      	subs	r3, r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	440b      	add	r3, r1
 80080c2:	334c      	adds	r3, #76	@ 0x4c
 80080c4:	2205      	movs	r2, #5
 80080c6:	701a      	strb	r2, [r3, #0]
 80080c8:	e2ac      	b.n	8008624 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80080ca:	78fa      	ldrb	r2, [r7, #3]
 80080cc:	6879      	ldr	r1, [r7, #4]
 80080ce:	4613      	mov	r3, r2
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	1a9b      	subs	r3, r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	440b      	add	r3, r1
 80080d8:	334d      	adds	r3, #77	@ 0x4d
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b07      	cmp	r3, #7
 80080de:	d00b      	beq.n	80080f8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80080e0:	78fa      	ldrb	r2, [r7, #3]
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	4613      	mov	r3, r2
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	1a9b      	subs	r3, r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	334d      	adds	r3, #77	@ 0x4d
 80080f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80080f2:	2b09      	cmp	r3, #9
 80080f4:	f040 80a6 	bne.w	8008244 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80080f8:	78fa      	ldrb	r2, [r7, #3]
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	4613      	mov	r3, r2
 80080fe:	011b      	lsls	r3, r3, #4
 8008100:	1a9b      	subs	r3, r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	440b      	add	r3, r1
 8008106:	334d      	adds	r3, #77	@ 0x4d
 8008108:	2202      	movs	r2, #2
 800810a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800810c:	78fa      	ldrb	r2, [r7, #3]
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4613      	mov	r3, r2
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	1a9b      	subs	r3, r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	440b      	add	r3, r1
 800811a:	3344      	adds	r3, #68	@ 0x44
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	1c59      	adds	r1, r3, #1
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4403      	add	r3, r0
 800812c:	3344      	adds	r3, #68	@ 0x44
 800812e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008130:	78fa      	ldrb	r2, [r7, #3]
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	4613      	mov	r3, r2
 8008136:	011b      	lsls	r3, r3, #4
 8008138:	1a9b      	subs	r3, r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	440b      	add	r3, r1
 800813e:	3344      	adds	r3, #68	@ 0x44
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b02      	cmp	r3, #2
 8008144:	d943      	bls.n	80081ce <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	4613      	mov	r3, r2
 800814c:	011b      	lsls	r3, r3, #4
 800814e:	1a9b      	subs	r3, r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	440b      	add	r3, r1
 8008154:	3344      	adds	r3, #68	@ 0x44
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800815a:	78fa      	ldrb	r2, [r7, #3]
 800815c:	6879      	ldr	r1, [r7, #4]
 800815e:	4613      	mov	r3, r2
 8008160:	011b      	lsls	r3, r3, #4
 8008162:	1a9b      	subs	r3, r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	440b      	add	r3, r1
 8008168:	331a      	adds	r3, #26
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d123      	bne.n	80081b8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8008170:	78fa      	ldrb	r2, [r7, #3]
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	4613      	mov	r3, r2
 8008176:	011b      	lsls	r3, r3, #4
 8008178:	1a9b      	subs	r3, r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	440b      	add	r3, r1
 800817e:	331b      	adds	r3, #27
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	4613      	mov	r3, r2
 800818a:	011b      	lsls	r3, r3, #4
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	331c      	adds	r3, #28
 8008194:	2200      	movs	r2, #0
 8008196:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	78fa      	ldrb	r2, [r7, #3]
 80081a8:	0151      	lsls	r1, r2, #5
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	440a      	add	r2, r1
 80081ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081b6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	4613      	mov	r3, r2
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	1a9b      	subs	r3, r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	334c      	adds	r3, #76	@ 0x4c
 80081c8:	2204      	movs	r2, #4
 80081ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80081cc:	e229      	b.n	8008622 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	334c      	adds	r3, #76	@ 0x4c
 80081de:	2202      	movs	r2, #2
 80081e0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80081e2:	78fa      	ldrb	r2, [r7, #3]
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	4613      	mov	r3, r2
 80081e8:	011b      	lsls	r3, r3, #4
 80081ea:	1a9b      	subs	r3, r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	3326      	adds	r3, #38	@ 0x26
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80081f8:	78fa      	ldrb	r2, [r7, #3]
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	4613      	mov	r3, r2
 80081fe:	011b      	lsls	r3, r3, #4
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	440b      	add	r3, r1
 8008206:	3326      	adds	r3, #38	@ 0x26
 8008208:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800820a:	2b02      	cmp	r3, #2
 800820c:	f040 8209 	bne.w	8008622 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	4413      	add	r3, r2
 8008218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008226:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800822e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008230:	78fb      	ldrb	r3, [r7, #3]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	4413      	add	r3, r2
 8008238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800823c:	461a      	mov	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008242:	e1ee      	b.n	8008622 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008244:	78fa      	ldrb	r2, [r7, #3]
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	4613      	mov	r3, r2
 800824a:	011b      	lsls	r3, r3, #4
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	334d      	adds	r3, #77	@ 0x4d
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	2b05      	cmp	r3, #5
 8008258:	f040 80c8 	bne.w	80083ec <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	334d      	adds	r3, #77	@ 0x4d
 800826c:	2202      	movs	r2, #2
 800826e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008270:	78fa      	ldrb	r2, [r7, #3]
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	4613      	mov	r3, r2
 8008276:	011b      	lsls	r3, r3, #4
 8008278:	1a9b      	subs	r3, r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	440b      	add	r3, r1
 800827e:	331b      	adds	r3, #27
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b01      	cmp	r3, #1
 8008284:	f040 81ce 	bne.w	8008624 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008288:	78fa      	ldrb	r2, [r7, #3]
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4613      	mov	r3, r2
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	1a9b      	subs	r3, r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	3326      	adds	r3, #38	@ 0x26
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	2b03      	cmp	r3, #3
 800829c:	d16b      	bne.n	8008376 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800829e:	78fa      	ldrb	r2, [r7, #3]
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	4613      	mov	r3, r2
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	440b      	add	r3, r1
 80082ac:	3348      	adds	r3, #72	@ 0x48
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	1c59      	adds	r1, r3, #1
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4613      	mov	r3, r2
 80082b6:	011b      	lsls	r3, r3, #4
 80082b8:	1a9b      	subs	r3, r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4403      	add	r3, r0
 80082be:	3348      	adds	r3, #72	@ 0x48
 80082c0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	4613      	mov	r3, r2
 80082c8:	011b      	lsls	r3, r3, #4
 80082ca:	1a9b      	subs	r3, r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	440b      	add	r3, r1
 80082d0:	3348      	adds	r3, #72	@ 0x48
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d943      	bls.n	8008360 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	4613      	mov	r3, r2
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	440b      	add	r3, r1
 80082e6:	3348      	adds	r3, #72	@ 0x48
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80082ec:	78fa      	ldrb	r2, [r7, #3]
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	4613      	mov	r3, r2
 80082f2:	011b      	lsls	r3, r3, #4
 80082f4:	1a9b      	subs	r3, r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	331b      	adds	r3, #27
 80082fc:	2200      	movs	r2, #0
 80082fe:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8008300:	78fa      	ldrb	r2, [r7, #3]
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	4613      	mov	r3, r2
 8008306:	011b      	lsls	r3, r3, #4
 8008308:	1a9b      	subs	r3, r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	440b      	add	r3, r1
 800830e:	3344      	adds	r3, #68	@ 0x44
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b02      	cmp	r3, #2
 8008314:	d809      	bhi.n	800832a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8008316:	78fa      	ldrb	r2, [r7, #3]
 8008318:	6879      	ldr	r1, [r7, #4]
 800831a:	4613      	mov	r3, r2
 800831c:	011b      	lsls	r3, r3, #4
 800831e:	1a9b      	subs	r3, r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	440b      	add	r3, r1
 8008324:	331c      	adds	r3, #28
 8008326:	2201      	movs	r2, #1
 8008328:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	4413      	add	r3, r2
 8008332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	78fa      	ldrb	r2, [r7, #3]
 800833a:	0151      	lsls	r1, r2, #5
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	440a      	add	r2, r1
 8008340:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008348:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800834a:	78fa      	ldrb	r2, [r7, #3]
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	4613      	mov	r3, r2
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	440b      	add	r3, r1
 8008358:	334c      	adds	r3, #76	@ 0x4c
 800835a:	2204      	movs	r2, #4
 800835c:	701a      	strb	r2, [r3, #0]
 800835e:	e014      	b.n	800838a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008360:	78fa      	ldrb	r2, [r7, #3]
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	4613      	mov	r3, r2
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	1a9b      	subs	r3, r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	334c      	adds	r3, #76	@ 0x4c
 8008370:	2202      	movs	r2, #2
 8008372:	701a      	strb	r2, [r3, #0]
 8008374:	e009      	b.n	800838a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008376:	78fa      	ldrb	r2, [r7, #3]
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	011b      	lsls	r3, r3, #4
 800837e:	1a9b      	subs	r3, r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	334c      	adds	r3, #76	@ 0x4c
 8008386:	2202      	movs	r2, #2
 8008388:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800838a:	78fa      	ldrb	r2, [r7, #3]
 800838c:	6879      	ldr	r1, [r7, #4]
 800838e:	4613      	mov	r3, r2
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	1a9b      	subs	r3, r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	440b      	add	r3, r1
 8008398:	3326      	adds	r3, #38	@ 0x26
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00b      	beq.n	80083b8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80083a0:	78fa      	ldrb	r2, [r7, #3]
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	4613      	mov	r3, r2
 80083a6:	011b      	lsls	r3, r3, #4
 80083a8:	1a9b      	subs	r3, r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	440b      	add	r3, r1
 80083ae:	3326      	adds	r3, #38	@ 0x26
 80083b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	f040 8136 	bne.w	8008624 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80083b8:	78fb      	ldrb	r3, [r7, #3]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80083ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083e4:	461a      	mov	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	e11b      	b.n	8008624 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80083ec:	78fa      	ldrb	r2, [r7, #3]
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4613      	mov	r3, r2
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	334d      	adds	r3, #77	@ 0x4d
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b03      	cmp	r3, #3
 8008400:	f040 8081 	bne.w	8008506 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008404:	78fa      	ldrb	r2, [r7, #3]
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4613      	mov	r3, r2
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	334d      	adds	r3, #77	@ 0x4d
 8008414:	2202      	movs	r2, #2
 8008416:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008418:	78fa      	ldrb	r2, [r7, #3]
 800841a:	6879      	ldr	r1, [r7, #4]
 800841c:	4613      	mov	r3, r2
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	440b      	add	r3, r1
 8008426:	331b      	adds	r3, #27
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b01      	cmp	r3, #1
 800842c:	f040 80fa 	bne.w	8008624 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008430:	78fa      	ldrb	r2, [r7, #3]
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	4613      	mov	r3, r2
 8008436:	011b      	lsls	r3, r3, #4
 8008438:	1a9b      	subs	r3, r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	334c      	adds	r3, #76	@ 0x4c
 8008440:	2202      	movs	r2, #2
 8008442:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	4413      	add	r3, r2
 800844c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	78fa      	ldrb	r2, [r7, #3]
 8008454:	0151      	lsls	r1, r2, #5
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	440a      	add	r2, r1
 800845a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800845e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008462:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	4413      	add	r3, r2
 800846c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	440a      	add	r2, r1
 800847a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800847e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008482:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	4413      	add	r3, r2
 800848c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	78fa      	ldrb	r2, [r7, #3]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	440a      	add	r2, r1
 800849a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800849e:	f023 0320 	bic.w	r3, r3, #32
 80084a2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80084a4:	78fa      	ldrb	r2, [r7, #3]
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	4613      	mov	r3, r2
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	1a9b      	subs	r3, r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	440b      	add	r3, r1
 80084b2:	3326      	adds	r3, #38	@ 0x26
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00b      	beq.n	80084d2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80084ba:	78fa      	ldrb	r2, [r7, #3]
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	4613      	mov	r3, r2
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	440b      	add	r3, r1
 80084c8:	3326      	adds	r3, #38	@ 0x26
 80084ca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	f040 80a9 	bne.w	8008624 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80084d2:	78fb      	ldrb	r3, [r7, #3]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80084e8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084f0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084fe:	461a      	mov	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6013      	str	r3, [r2, #0]
 8008504:	e08e      	b.n	8008624 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008506:	78fa      	ldrb	r2, [r7, #3]
 8008508:	6879      	ldr	r1, [r7, #4]
 800850a:	4613      	mov	r3, r2
 800850c:	011b      	lsls	r3, r3, #4
 800850e:	1a9b      	subs	r3, r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	440b      	add	r3, r1
 8008514:	334d      	adds	r3, #77	@ 0x4d
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b04      	cmp	r3, #4
 800851a:	d143      	bne.n	80085a4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	011b      	lsls	r3, r3, #4
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	334d      	adds	r3, #77	@ 0x4d
 800852c:	2202      	movs	r2, #2
 800852e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	4613      	mov	r3, r2
 8008536:	011b      	lsls	r3, r3, #4
 8008538:	1a9b      	subs	r3, r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	440b      	add	r3, r1
 800853e:	334c      	adds	r3, #76	@ 0x4c
 8008540:	2202      	movs	r2, #2
 8008542:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008544:	78fa      	ldrb	r2, [r7, #3]
 8008546:	6879      	ldr	r1, [r7, #4]
 8008548:	4613      	mov	r3, r2
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	1a9b      	subs	r3, r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	440b      	add	r3, r1
 8008552:	3326      	adds	r3, #38	@ 0x26
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800855a:	78fa      	ldrb	r2, [r7, #3]
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	011b      	lsls	r3, r3, #4
 8008562:	1a9b      	subs	r3, r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	440b      	add	r3, r1
 8008568:	3326      	adds	r3, #38	@ 0x26
 800856a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800856c:	2b02      	cmp	r3, #2
 800856e:	d159      	bne.n	8008624 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	4413      	add	r3, r2
 8008578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008586:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800858e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	4413      	add	r3, r2
 8008598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800859c:	461a      	mov	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	e03f      	b.n	8008624 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80085a4:	78fa      	ldrb	r2, [r7, #3]
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	4613      	mov	r3, r2
 80085aa:	011b      	lsls	r3, r3, #4
 80085ac:	1a9b      	subs	r3, r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	334d      	adds	r3, #77	@ 0x4d
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b08      	cmp	r3, #8
 80085b8:	d126      	bne.n	8008608 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	334d      	adds	r3, #77	@ 0x4d
 80085ca:	2202      	movs	r2, #2
 80085cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80085ce:	78fa      	ldrb	r2, [r7, #3]
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	4613      	mov	r3, r2
 80085d4:	011b      	lsls	r3, r3, #4
 80085d6:	1a9b      	subs	r3, r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	440b      	add	r3, r1
 80085dc:	3344      	adds	r3, #68	@ 0x44
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	1c59      	adds	r1, r3, #1
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	4613      	mov	r3, r2
 80085e6:	011b      	lsls	r3, r3, #4
 80085e8:	1a9b      	subs	r3, r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4403      	add	r3, r0
 80085ee:	3344      	adds	r3, #68	@ 0x44
 80085f0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80085f2:	78fa      	ldrb	r2, [r7, #3]
 80085f4:	6879      	ldr	r1, [r7, #4]
 80085f6:	4613      	mov	r3, r2
 80085f8:	011b      	lsls	r3, r3, #4
 80085fa:	1a9b      	subs	r3, r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	440b      	add	r3, r1
 8008600:	334c      	adds	r3, #76	@ 0x4c
 8008602:	2204      	movs	r2, #4
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	e00d      	b.n	8008624 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	6879      	ldr	r1, [r7, #4]
 800860c:	4613      	mov	r3, r2
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	1a9b      	subs	r3, r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	440b      	add	r3, r1
 8008616:	334d      	adds	r3, #77	@ 0x4d
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b02      	cmp	r3, #2
 800861c:	f000 8100 	beq.w	8008820 <HCD_HC_IN_IRQHandler+0xcca>
 8008620:	e000      	b.n	8008624 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008622:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008624:	78fa      	ldrb	r2, [r7, #3]
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	4613      	mov	r3, r2
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	1a9b      	subs	r3, r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	440b      	add	r3, r1
 8008632:	334c      	adds	r3, #76	@ 0x4c
 8008634:	781a      	ldrb	r2, [r3, #0]
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f011 f91e 	bl	801987c <HAL_HCD_HC_NotifyURBChange_Callback>
 8008640:	e0ef      	b.n	8008822 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	78fa      	ldrb	r2, [r7, #3]
 8008648:	4611      	mov	r1, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f008 f8ed 	bl	801082a <USB_ReadChInterrupts>
 8008650:	4603      	mov	r3, r0
 8008652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008656:	2b40      	cmp	r3, #64	@ 0x40
 8008658:	d12f      	bne.n	80086ba <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	4413      	add	r3, r2
 8008662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008666:	461a      	mov	r2, r3
 8008668:	2340      	movs	r3, #64	@ 0x40
 800866a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800866c:	78fa      	ldrb	r2, [r7, #3]
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4613      	mov	r3, r2
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	1a9b      	subs	r3, r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	440b      	add	r3, r1
 800867a:	334d      	adds	r3, #77	@ 0x4d
 800867c:	2205      	movs	r2, #5
 800867e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008680:	78fa      	ldrb	r2, [r7, #3]
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	4613      	mov	r3, r2
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	1a9b      	subs	r3, r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	440b      	add	r3, r1
 800868e:	331a      	adds	r3, #26
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d109      	bne.n	80086aa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008696:	78fa      	ldrb	r2, [r7, #3]
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	4613      	mov	r3, r2
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	1a9b      	subs	r3, r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	440b      	add	r3, r1
 80086a4:	3344      	adds	r3, #68	@ 0x44
 80086a6:	2200      	movs	r2, #0
 80086a8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	78fa      	ldrb	r2, [r7, #3]
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f008 fe57 	bl	8011366 <USB_HC_Halt>
 80086b8:	e0b3      	b.n	8008822 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	78fa      	ldrb	r2, [r7, #3]
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f008 f8b1 	bl	801082a <USB_ReadChInterrupts>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f003 0310 	and.w	r3, r3, #16
 80086ce:	2b10      	cmp	r3, #16
 80086d0:	f040 80a7 	bne.w	8008822 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80086d4:	78fa      	ldrb	r2, [r7, #3]
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4613      	mov	r3, r2
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	1a9b      	subs	r3, r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	3326      	adds	r3, #38	@ 0x26
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d11b      	bne.n	8008722 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	4613      	mov	r3, r2
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	1a9b      	subs	r3, r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	3344      	adds	r3, #68	@ 0x44
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80086fe:	78fa      	ldrb	r2, [r7, #3]
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	334d      	adds	r3, #77	@ 0x4d
 800870e:	2204      	movs	r2, #4
 8008710:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f008 fe23 	bl	8011366 <USB_HC_Halt>
 8008720:	e03f      	b.n	80087a2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	4613      	mov	r3, r2
 8008728:	011b      	lsls	r3, r3, #4
 800872a:	1a9b      	subs	r3, r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	440b      	add	r3, r1
 8008730:	3326      	adds	r3, #38	@ 0x26
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00a      	beq.n	800874e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008738:	78fa      	ldrb	r2, [r7, #3]
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	4613      	mov	r3, r2
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	440b      	add	r3, r1
 8008746:	3326      	adds	r3, #38	@ 0x26
 8008748:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800874a:	2b02      	cmp	r3, #2
 800874c:	d129      	bne.n	80087a2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800874e:	78fa      	ldrb	r2, [r7, #3]
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	011b      	lsls	r3, r3, #4
 8008756:	1a9b      	subs	r3, r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	3344      	adds	r3, #68	@ 0x44
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	799b      	ldrb	r3, [r3, #6]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <HCD_HC_IN_IRQHandler+0xc2a>
 800876a:	78fa      	ldrb	r2, [r7, #3]
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	1a9b      	subs	r3, r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	331b      	adds	r3, #27
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d110      	bne.n	80087a2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8008780:	78fa      	ldrb	r2, [r7, #3]
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	1a9b      	subs	r3, r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	334d      	adds	r3, #77	@ 0x4d
 8008790:	2204      	movs	r2, #4
 8008792:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	78fa      	ldrb	r2, [r7, #3]
 800879a:	4611      	mov	r1, r2
 800879c:	4618      	mov	r0, r3
 800879e:	f008 fde2 	bl	8011366 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80087a2:	78fa      	ldrb	r2, [r7, #3]
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	4613      	mov	r3, r2
 80087a8:	011b      	lsls	r3, r3, #4
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	440b      	add	r3, r1
 80087b0:	331b      	adds	r3, #27
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d129      	bne.n	800880c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80087b8:	78fa      	ldrb	r2, [r7, #3]
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	4613      	mov	r3, r2
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	1a9b      	subs	r3, r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	331b      	adds	r3, #27
 80087c8:	2200      	movs	r2, #0
 80087ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80087cc:	78fb      	ldrb	r3, [r7, #3]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	78fa      	ldrb	r2, [r7, #3]
 80087dc:	0151      	lsls	r1, r2, #5
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	440a      	add	r2, r1
 80087e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087ea:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80087ec:	78fb      	ldrb	r3, [r7, #3]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	78fa      	ldrb	r2, [r7, #3]
 80087fc:	0151      	lsls	r1, r2, #5
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	440a      	add	r2, r1
 8008802:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008806:	f043 0320 	orr.w	r3, r3, #32
 800880a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	4413      	add	r3, r2
 8008814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008818:	461a      	mov	r2, r3
 800881a:	2310      	movs	r3, #16
 800881c:	6093      	str	r3, [r2, #8]
 800881e:	e000      	b.n	8008822 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8008820:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f007 ffef 	bl	801082a <USB_ReadChInterrupts>
 800884c:	4603      	mov	r3, r0
 800884e:	f003 0304 	and.w	r3, r3, #4
 8008852:	2b04      	cmp	r3, #4
 8008854:	d11b      	bne.n	800888e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008856:	78fb      	ldrb	r3, [r7, #3]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	4413      	add	r3, r2
 800885e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008862:	461a      	mov	r2, r3
 8008864:	2304      	movs	r3, #4
 8008866:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008868:	78fa      	ldrb	r2, [r7, #3]
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	4613      	mov	r3, r2
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	1a9b      	subs	r3, r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	440b      	add	r3, r1
 8008876:	334d      	adds	r3, #77	@ 0x4d
 8008878:	2207      	movs	r2, #7
 800887a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f008 fd6e 	bl	8011366 <USB_HC_Halt>
 800888a:	f000 bc89 	b.w	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	78fa      	ldrb	r2, [r7, #3]
 8008894:	4611      	mov	r1, r2
 8008896:	4618      	mov	r0, r3
 8008898:	f007 ffc7 	bl	801082a <USB_ReadChInterrupts>
 800889c:	4603      	mov	r3, r0
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b20      	cmp	r3, #32
 80088a4:	f040 8082 	bne.w	80089ac <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088b4:	461a      	mov	r2, r3
 80088b6:	2320      	movs	r3, #32
 80088b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	4613      	mov	r3, r2
 80088c0:	011b      	lsls	r3, r3, #4
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	3319      	adds	r3, #25
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d124      	bne.n	800891a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80088d0:	78fa      	ldrb	r2, [r7, #3]
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	4613      	mov	r3, r2
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	1a9b      	subs	r3, r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	440b      	add	r3, r1
 80088de:	3319      	adds	r3, #25
 80088e0:	2200      	movs	r2, #0
 80088e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4613      	mov	r3, r2
 80088ea:	011b      	lsls	r3, r3, #4
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	334c      	adds	r3, #76	@ 0x4c
 80088f4:	2202      	movs	r2, #2
 80088f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	4613      	mov	r3, r2
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	440b      	add	r3, r1
 8008906:	334d      	adds	r3, #77	@ 0x4d
 8008908:	2203      	movs	r2, #3
 800890a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	78fa      	ldrb	r2, [r7, #3]
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f008 fd26 	bl	8011366 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	6879      	ldr	r1, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	1a9b      	subs	r3, r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	331a      	adds	r3, #26
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b01      	cmp	r3, #1
 800892e:	f040 8437 	bne.w	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	4613      	mov	r3, r2
 8008938:	011b      	lsls	r3, r3, #4
 800893a:	1a9b      	subs	r3, r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	440b      	add	r3, r1
 8008940:	331b      	adds	r3, #27
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f040 842b 	bne.w	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800894a:	78fa      	ldrb	r2, [r7, #3]
 800894c:	6879      	ldr	r1, [r7, #4]
 800894e:	4613      	mov	r3, r2
 8008950:	011b      	lsls	r3, r3, #4
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	440b      	add	r3, r1
 8008958:	3326      	adds	r3, #38	@ 0x26
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d009      	beq.n	8008974 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	4613      	mov	r3, r2
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	1a9b      	subs	r3, r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	440b      	add	r3, r1
 800896e:	331b      	adds	r3, #27
 8008970:	2201      	movs	r2, #1
 8008972:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8008974:	78fa      	ldrb	r2, [r7, #3]
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	4613      	mov	r3, r2
 800897a:	011b      	lsls	r3, r3, #4
 800897c:	1a9b      	subs	r3, r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	334d      	adds	r3, #77	@ 0x4d
 8008984:	2203      	movs	r2, #3
 8008986:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	78fa      	ldrb	r2, [r7, #3]
 800898e:	4611      	mov	r1, r2
 8008990:	4618      	mov	r0, r3
 8008992:	f008 fce8 	bl	8011366 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8008996:	78fa      	ldrb	r2, [r7, #3]
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	011b      	lsls	r3, r3, #4
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	440b      	add	r3, r1
 80089a4:	3344      	adds	r3, #68	@ 0x44
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	e3f9      	b.n	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	78fa      	ldrb	r2, [r7, #3]
 80089b2:	4611      	mov	r1, r2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f007 ff38 	bl	801082a <USB_ReadChInterrupts>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089c4:	d111      	bne.n	80089ea <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089d2:	461a      	mov	r2, r3
 80089d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	78fa      	ldrb	r2, [r7, #3]
 80089e0:	4611      	mov	r1, r2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f008 fcbf 	bl	8011366 <USB_HC_Halt>
 80089e8:	e3da      	b.n	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	78fa      	ldrb	r2, [r7, #3]
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f007 ff19 	bl	801082a <USB_ReadChInterrupts>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d168      	bne.n	8008ad4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008a02:	78fa      	ldrb	r2, [r7, #3]
 8008a04:	6879      	ldr	r1, [r7, #4]
 8008a06:	4613      	mov	r3, r2
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	1a9b      	subs	r3, r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	440b      	add	r3, r1
 8008a10:	3344      	adds	r3, #68	@ 0x44
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f007 ff03 	bl	801082a <USB_ReadChInterrupts>
 8008a24:	4603      	mov	r3, r0
 8008a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a2a:	2b40      	cmp	r3, #64	@ 0x40
 8008a2c:	d112      	bne.n	8008a54 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008a2e:	78fa      	ldrb	r2, [r7, #3]
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	4613      	mov	r3, r2
 8008a34:	011b      	lsls	r3, r3, #4
 8008a36:	1a9b      	subs	r3, r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	440b      	add	r3, r1
 8008a3c:	3319      	adds	r3, #25
 8008a3e:	2201      	movs	r2, #1
 8008a40:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008a42:	78fb      	ldrb	r3, [r7, #3]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a4e:	461a      	mov	r2, r3
 8008a50:	2340      	movs	r3, #64	@ 0x40
 8008a52:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8008a54:	78fa      	ldrb	r2, [r7, #3]
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	011b      	lsls	r3, r3, #4
 8008a5c:	1a9b      	subs	r3, r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	440b      	add	r3, r1
 8008a62:	331b      	adds	r3, #27
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d019      	beq.n	8008a9e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008a6a:	78fa      	ldrb	r2, [r7, #3]
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	011b      	lsls	r3, r3, #4
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	440b      	add	r3, r1
 8008a78:	331b      	adds	r3, #27
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008a7e:	78fb      	ldrb	r3, [r7, #3]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	78fa      	ldrb	r2, [r7, #3]
 8008a8e:	0151      	lsls	r1, r2, #5
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	440a      	add	r2, r1
 8008a94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a9c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008a9e:	78fb      	ldrb	r3, [r7, #3]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aaa:	461a      	mov	r2, r3
 8008aac:	2301      	movs	r3, #1
 8008aae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8008ab0:	78fa      	ldrb	r2, [r7, #3]
 8008ab2:	6879      	ldr	r1, [r7, #4]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	011b      	lsls	r3, r3, #4
 8008ab8:	1a9b      	subs	r3, r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	440b      	add	r3, r1
 8008abe:	334d      	adds	r3, #77	@ 0x4d
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	78fa      	ldrb	r2, [r7, #3]
 8008aca:	4611      	mov	r1, r2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f008 fc4a 	bl	8011366 <USB_HC_Halt>
 8008ad2:	e365      	b.n	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	78fa      	ldrb	r2, [r7, #3]
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f007 fea4 	bl	801082a <USB_ReadChInterrupts>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae8:	2b40      	cmp	r3, #64	@ 0x40
 8008aea:	d139      	bne.n	8008b60 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	4613      	mov	r3, r2
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	1a9b      	subs	r3, r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	440b      	add	r3, r1
 8008afa:	334d      	adds	r3, #77	@ 0x4d
 8008afc:	2205      	movs	r2, #5
 8008afe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008b00:	78fa      	ldrb	r2, [r7, #3]
 8008b02:	6879      	ldr	r1, [r7, #4]
 8008b04:	4613      	mov	r3, r2
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	1a9b      	subs	r3, r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	440b      	add	r3, r1
 8008b0e:	331a      	adds	r3, #26
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d109      	bne.n	8008b2a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	6879      	ldr	r1, [r7, #4]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	011b      	lsls	r3, r3, #4
 8008b1e:	1a9b      	subs	r3, r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	440b      	add	r3, r1
 8008b24:	3319      	adds	r3, #25
 8008b26:	2201      	movs	r2, #1
 8008b28:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	6879      	ldr	r1, [r7, #4]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	1a9b      	subs	r3, r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	440b      	add	r3, r1
 8008b38:	3344      	adds	r3, #68	@ 0x44
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	4611      	mov	r1, r2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f008 fc0d 	bl	8011366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008b4c:	78fb      	ldrb	r3, [r7, #3]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b58:	461a      	mov	r2, r3
 8008b5a:	2340      	movs	r3, #64	@ 0x40
 8008b5c:	6093      	str	r3, [r2, #8]
 8008b5e:	e31f      	b.n	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	78fa      	ldrb	r2, [r7, #3]
 8008b66:	4611      	mov	r1, r2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f007 fe5e 	bl	801082a <USB_ReadChInterrupts>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	f003 0308 	and.w	r3, r3, #8
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	d11a      	bne.n	8008bae <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008b78:	78fb      	ldrb	r3, [r7, #3]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b84:	461a      	mov	r2, r3
 8008b86:	2308      	movs	r3, #8
 8008b88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008b8a:	78fa      	ldrb	r2, [r7, #3]
 8008b8c:	6879      	ldr	r1, [r7, #4]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	011b      	lsls	r3, r3, #4
 8008b92:	1a9b      	subs	r3, r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	440b      	add	r3, r1
 8008b98:	334d      	adds	r3, #77	@ 0x4d
 8008b9a:	2206      	movs	r2, #6
 8008b9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f008 fbdd 	bl	8011366 <USB_HC_Halt>
 8008bac:	e2f8      	b.n	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	78fa      	ldrb	r2, [r7, #3]
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f007 fe37 	bl	801082a <USB_ReadChInterrupts>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	f003 0310 	and.w	r3, r3, #16
 8008bc2:	2b10      	cmp	r3, #16
 8008bc4:	d144      	bne.n	8008c50 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008bc6:	78fa      	ldrb	r2, [r7, #3]
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	011b      	lsls	r3, r3, #4
 8008bce:	1a9b      	subs	r3, r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	440b      	add	r3, r1
 8008bd4:	3344      	adds	r3, #68	@ 0x44
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8008bda:	78fa      	ldrb	r2, [r7, #3]
 8008bdc:	6879      	ldr	r1, [r7, #4]
 8008bde:	4613      	mov	r3, r2
 8008be0:	011b      	lsls	r3, r3, #4
 8008be2:	1a9b      	subs	r3, r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	440b      	add	r3, r1
 8008be8:	334d      	adds	r3, #77	@ 0x4d
 8008bea:	2204      	movs	r2, #4
 8008bec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8008bee:	78fa      	ldrb	r2, [r7, #3]
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	1a9b      	subs	r3, r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	440b      	add	r3, r1
 8008bfc:	3319      	adds	r3, #25
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d114      	bne.n	8008c2e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8008c04:	78fa      	ldrb	r2, [r7, #3]
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	011b      	lsls	r3, r3, #4
 8008c0c:	1a9b      	subs	r3, r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	440b      	add	r3, r1
 8008c12:	3318      	adds	r3, #24
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d109      	bne.n	8008c2e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	1a9b      	subs	r3, r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	440b      	add	r3, r1
 8008c28:	3319      	adds	r3, #25
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	4611      	mov	r1, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f008 fb95 	bl	8011366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008c3c:	78fb      	ldrb	r3, [r7, #3]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c48:	461a      	mov	r2, r3
 8008c4a:	2310      	movs	r3, #16
 8008c4c:	6093      	str	r3, [r2, #8]
 8008c4e:	e2a7      	b.n	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	78fa      	ldrb	r2, [r7, #3]
 8008c56:	4611      	mov	r1, r2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f007 fde6 	bl	801082a <USB_ReadChInterrupts>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c64:	2b80      	cmp	r3, #128	@ 0x80
 8008c66:	f040 8083 	bne.w	8008d70 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	799b      	ldrb	r3, [r3, #6]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d111      	bne.n	8008c96 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8008c72:	78fa      	ldrb	r2, [r7, #3]
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	4613      	mov	r3, r2
 8008c78:	011b      	lsls	r3, r3, #4
 8008c7a:	1a9b      	subs	r3, r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	334d      	adds	r3, #77	@ 0x4d
 8008c82:	2207      	movs	r2, #7
 8008c84:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	78fa      	ldrb	r2, [r7, #3]
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f008 fb69 	bl	8011366 <USB_HC_Halt>
 8008c94:	e062      	b.n	8008d5c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	011b      	lsls	r3, r3, #4
 8008c9e:	1a9b      	subs	r3, r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	3344      	adds	r3, #68	@ 0x44
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	1c59      	adds	r1, r3, #1
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	4613      	mov	r3, r2
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4403      	add	r3, r0
 8008cb6:	3344      	adds	r3, #68	@ 0x44
 8008cb8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008cba:	78fa      	ldrb	r2, [r7, #3]
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	1a9b      	subs	r3, r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	440b      	add	r3, r1
 8008cc8:	3344      	adds	r3, #68	@ 0x44
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d922      	bls.n	8008d16 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008cd0:	78fa      	ldrb	r2, [r7, #3]
 8008cd2:	6879      	ldr	r1, [r7, #4]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	1a9b      	subs	r3, r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	3344      	adds	r3, #68	@ 0x44
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008ce4:	78fa      	ldrb	r2, [r7, #3]
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	011b      	lsls	r3, r3, #4
 8008cec:	1a9b      	subs	r3, r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	334c      	adds	r3, #76	@ 0x4c
 8008cf4:	2204      	movs	r2, #4
 8008cf6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008cf8:	78fa      	ldrb	r2, [r7, #3]
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	011b      	lsls	r3, r3, #4
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	334c      	adds	r3, #76	@ 0x4c
 8008d08:	781a      	ldrb	r2, [r3, #0]
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f010 fdb4 	bl	801987c <HAL_HCD_HC_NotifyURBChange_Callback>
 8008d14:	e022      	b.n	8008d5c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008d16:	78fa      	ldrb	r2, [r7, #3]
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	1a9b      	subs	r3, r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	334c      	adds	r3, #76	@ 0x4c
 8008d26:	2202      	movs	r2, #2
 8008d28:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008d2a:	78fb      	ldrb	r3, [r7, #3]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d40:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d48:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d4a:	78fb      	ldrb	r3, [r7, #3]
 8008d4c:	015a      	lsls	r2, r3, #5
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d56:	461a      	mov	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008d5c:	78fb      	ldrb	r3, [r7, #3]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d68:	461a      	mov	r2, r3
 8008d6a:	2380      	movs	r3, #128	@ 0x80
 8008d6c:	6093      	str	r3, [r2, #8]
 8008d6e:	e217      	b.n	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	78fa      	ldrb	r2, [r7, #3]
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f007 fd56 	bl	801082a <USB_ReadChInterrupts>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d88:	d11b      	bne.n	8008dc2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008d8a:	78fa      	ldrb	r2, [r7, #3]
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	334d      	adds	r3, #77	@ 0x4d
 8008d9a:	2209      	movs	r2, #9
 8008d9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	78fa      	ldrb	r2, [r7, #3]
 8008da4:	4611      	mov	r1, r2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f008 fadd 	bl	8011366 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	015a      	lsls	r2, r3, #5
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008db8:	461a      	mov	r2, r3
 8008dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dbe:	6093      	str	r3, [r2, #8]
 8008dc0:	e1ee      	b.n	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	78fa      	ldrb	r2, [r7, #3]
 8008dc8:	4611      	mov	r1, r2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f007 fd2d 	bl	801082a <USB_ReadChInterrupts>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	f040 81df 	bne.w	800919a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008de8:	461a      	mov	r2, r3
 8008dea:	2302      	movs	r3, #2
 8008dec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008dee:	78fa      	ldrb	r2, [r7, #3]
 8008df0:	6879      	ldr	r1, [r7, #4]
 8008df2:	4613      	mov	r3, r2
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	1a9b      	subs	r3, r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	440b      	add	r3, r1
 8008dfc:	334d      	adds	r3, #77	@ 0x4d
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	f040 8093 	bne.w	8008f2c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008e06:	78fa      	ldrb	r2, [r7, #3]
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	1a9b      	subs	r3, r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	440b      	add	r3, r1
 8008e14:	334d      	adds	r3, #77	@ 0x4d
 8008e16:	2202      	movs	r2, #2
 8008e18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008e1a:	78fa      	ldrb	r2, [r7, #3]
 8008e1c:	6879      	ldr	r1, [r7, #4]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	011b      	lsls	r3, r3, #4
 8008e22:	1a9b      	subs	r3, r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	440b      	add	r3, r1
 8008e28:	334c      	adds	r3, #76	@ 0x4c
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008e2e:	78fa      	ldrb	r2, [r7, #3]
 8008e30:	6879      	ldr	r1, [r7, #4]
 8008e32:	4613      	mov	r3, r2
 8008e34:	011b      	lsls	r3, r3, #4
 8008e36:	1a9b      	subs	r3, r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	440b      	add	r3, r1
 8008e3c:	3326      	adds	r3, #38	@ 0x26
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d00b      	beq.n	8008e5c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8008e44:	78fa      	ldrb	r2, [r7, #3]
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	011b      	lsls	r3, r3, #4
 8008e4c:	1a9b      	subs	r3, r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	440b      	add	r3, r1
 8008e52:	3326      	adds	r3, #38	@ 0x26
 8008e54:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	f040 8190 	bne.w	800917c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	799b      	ldrb	r3, [r3, #6]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d115      	bne.n	8008e90 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8008e64:	78fa      	ldrb	r2, [r7, #3]
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	011b      	lsls	r3, r3, #4
 8008e6c:	1a9b      	subs	r3, r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	440b      	add	r3, r1
 8008e72:	333d      	adds	r3, #61	@ 0x3d
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	78fa      	ldrb	r2, [r7, #3]
 8008e78:	f083 0301 	eor.w	r3, r3, #1
 8008e7c:	b2d8      	uxtb	r0, r3
 8008e7e:	6879      	ldr	r1, [r7, #4]
 8008e80:	4613      	mov	r3, r2
 8008e82:	011b      	lsls	r3, r3, #4
 8008e84:	1a9b      	subs	r3, r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	440b      	add	r3, r1
 8008e8a:	333d      	adds	r3, #61	@ 0x3d
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	799b      	ldrb	r3, [r3, #6]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	f040 8171 	bne.w	800917c <HCD_HC_OUT_IRQHandler+0x954>
 8008e9a:	78fa      	ldrb	r2, [r7, #3]
 8008e9c:	6879      	ldr	r1, [r7, #4]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	011b      	lsls	r3, r3, #4
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	3334      	adds	r3, #52	@ 0x34
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 8165 	beq.w	800917c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8008eb2:	78fa      	ldrb	r2, [r7, #3]
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	011b      	lsls	r3, r3, #4
 8008eba:	1a9b      	subs	r3, r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	440b      	add	r3, r1
 8008ec0:	3334      	adds	r3, #52	@ 0x34
 8008ec2:	6819      	ldr	r1, [r3, #0]
 8008ec4:	78fa      	ldrb	r2, [r7, #3]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	1a9b      	subs	r3, r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4403      	add	r3, r0
 8008ed2:	3328      	adds	r3, #40	@ 0x28
 8008ed4:	881b      	ldrh	r3, [r3, #0]
 8008ed6:	440b      	add	r3, r1
 8008ed8:	1e59      	subs	r1, r3, #1
 8008eda:	78fa      	ldrb	r2, [r7, #3]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	011b      	lsls	r3, r3, #4
 8008ee2:	1a9b      	subs	r3, r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4403      	add	r3, r0
 8008ee8:	3328      	adds	r3, #40	@ 0x28
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ef0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 813f 	beq.w	800917c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8008efe:	78fa      	ldrb	r2, [r7, #3]
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	4613      	mov	r3, r2
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	1a9b      	subs	r3, r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	440b      	add	r3, r1
 8008f0c:	333d      	adds	r3, #61	@ 0x3d
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	78fa      	ldrb	r2, [r7, #3]
 8008f12:	f083 0301 	eor.w	r3, r3, #1
 8008f16:	b2d8      	uxtb	r0, r3
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	440b      	add	r3, r1
 8008f24:	333d      	adds	r3, #61	@ 0x3d
 8008f26:	4602      	mov	r2, r0
 8008f28:	701a      	strb	r2, [r3, #0]
 8008f2a:	e127      	b.n	800917c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008f2c:	78fa      	ldrb	r2, [r7, #3]
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	4613      	mov	r3, r2
 8008f32:	011b      	lsls	r3, r3, #4
 8008f34:	1a9b      	subs	r3, r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	440b      	add	r3, r1
 8008f3a:	334d      	adds	r3, #77	@ 0x4d
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d120      	bne.n	8008f84 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	6879      	ldr	r1, [r7, #4]
 8008f46:	4613      	mov	r3, r2
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	1a9b      	subs	r3, r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	440b      	add	r3, r1
 8008f50:	334d      	adds	r3, #77	@ 0x4d
 8008f52:	2202      	movs	r2, #2
 8008f54:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008f56:	78fa      	ldrb	r2, [r7, #3]
 8008f58:	6879      	ldr	r1, [r7, #4]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	011b      	lsls	r3, r3, #4
 8008f5e:	1a9b      	subs	r3, r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	440b      	add	r3, r1
 8008f64:	331b      	adds	r3, #27
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	f040 8107 	bne.w	800917c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008f6e:	78fa      	ldrb	r2, [r7, #3]
 8008f70:	6879      	ldr	r1, [r7, #4]
 8008f72:	4613      	mov	r3, r2
 8008f74:	011b      	lsls	r3, r3, #4
 8008f76:	1a9b      	subs	r3, r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	440b      	add	r3, r1
 8008f7c:	334c      	adds	r3, #76	@ 0x4c
 8008f7e:	2202      	movs	r2, #2
 8008f80:	701a      	strb	r2, [r3, #0]
 8008f82:	e0fb      	b.n	800917c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008f84:	78fa      	ldrb	r2, [r7, #3]
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	011b      	lsls	r3, r3, #4
 8008f8c:	1a9b      	subs	r3, r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	334d      	adds	r3, #77	@ 0x4d
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	2b04      	cmp	r3, #4
 8008f98:	d13a      	bne.n	8009010 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f9a:	78fa      	ldrb	r2, [r7, #3]
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	011b      	lsls	r3, r3, #4
 8008fa2:	1a9b      	subs	r3, r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	334d      	adds	r3, #77	@ 0x4d
 8008faa:	2202      	movs	r2, #2
 8008fac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008fae:	78fa      	ldrb	r2, [r7, #3]
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	1a9b      	subs	r3, r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	334c      	adds	r3, #76	@ 0x4c
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008fc2:	78fa      	ldrb	r2, [r7, #3]
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	011b      	lsls	r3, r3, #4
 8008fca:	1a9b      	subs	r3, r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	440b      	add	r3, r1
 8008fd0:	331b      	adds	r3, #27
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	f040 80d1 	bne.w	800917c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8008fda:	78fa      	ldrb	r2, [r7, #3]
 8008fdc:	6879      	ldr	r1, [r7, #4]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	011b      	lsls	r3, r3, #4
 8008fe2:	1a9b      	subs	r3, r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	440b      	add	r3, r1
 8008fe8:	331b      	adds	r3, #27
 8008fea:	2200      	movs	r2, #0
 8008fec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008fee:	78fb      	ldrb	r3, [r7, #3]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	78fa      	ldrb	r2, [r7, #3]
 8008ffe:	0151      	lsls	r1, r2, #5
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	440a      	add	r2, r1
 8009004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800900c:	6053      	str	r3, [r2, #4]
 800900e:	e0b5      	b.n	800917c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009010:	78fa      	ldrb	r2, [r7, #3]
 8009012:	6879      	ldr	r1, [r7, #4]
 8009014:	4613      	mov	r3, r2
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	1a9b      	subs	r3, r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	440b      	add	r3, r1
 800901e:	334d      	adds	r3, #77	@ 0x4d
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	2b05      	cmp	r3, #5
 8009024:	d114      	bne.n	8009050 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009026:	78fa      	ldrb	r2, [r7, #3]
 8009028:	6879      	ldr	r1, [r7, #4]
 800902a:	4613      	mov	r3, r2
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	1a9b      	subs	r3, r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	440b      	add	r3, r1
 8009034:	334d      	adds	r3, #77	@ 0x4d
 8009036:	2202      	movs	r2, #2
 8009038:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800903a:	78fa      	ldrb	r2, [r7, #3]
 800903c:	6879      	ldr	r1, [r7, #4]
 800903e:	4613      	mov	r3, r2
 8009040:	011b      	lsls	r3, r3, #4
 8009042:	1a9b      	subs	r3, r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	440b      	add	r3, r1
 8009048:	334c      	adds	r3, #76	@ 0x4c
 800904a:	2202      	movs	r2, #2
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	e095      	b.n	800917c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009050:	78fa      	ldrb	r2, [r7, #3]
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	4613      	mov	r3, r2
 8009056:	011b      	lsls	r3, r3, #4
 8009058:	1a9b      	subs	r3, r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	440b      	add	r3, r1
 800905e:	334d      	adds	r3, #77	@ 0x4d
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b06      	cmp	r3, #6
 8009064:	d114      	bne.n	8009090 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009066:	78fa      	ldrb	r2, [r7, #3]
 8009068:	6879      	ldr	r1, [r7, #4]
 800906a:	4613      	mov	r3, r2
 800906c:	011b      	lsls	r3, r3, #4
 800906e:	1a9b      	subs	r3, r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	440b      	add	r3, r1
 8009074:	334d      	adds	r3, #77	@ 0x4d
 8009076:	2202      	movs	r2, #2
 8009078:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800907a:	78fa      	ldrb	r2, [r7, #3]
 800907c:	6879      	ldr	r1, [r7, #4]
 800907e:	4613      	mov	r3, r2
 8009080:	011b      	lsls	r3, r3, #4
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	440b      	add	r3, r1
 8009088:	334c      	adds	r3, #76	@ 0x4c
 800908a:	2205      	movs	r2, #5
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	e075      	b.n	800917c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009090:	78fa      	ldrb	r2, [r7, #3]
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	4613      	mov	r3, r2
 8009096:	011b      	lsls	r3, r3, #4
 8009098:	1a9b      	subs	r3, r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	440b      	add	r3, r1
 800909e:	334d      	adds	r3, #77	@ 0x4d
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b07      	cmp	r3, #7
 80090a4:	d00a      	beq.n	80090bc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80090a6:	78fa      	ldrb	r2, [r7, #3]
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	011b      	lsls	r3, r3, #4
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	334d      	adds	r3, #77	@ 0x4d
 80090b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80090b8:	2b09      	cmp	r3, #9
 80090ba:	d170      	bne.n	800919e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80090bc:	78fa      	ldrb	r2, [r7, #3]
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	4613      	mov	r3, r2
 80090c2:	011b      	lsls	r3, r3, #4
 80090c4:	1a9b      	subs	r3, r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	440b      	add	r3, r1
 80090ca:	334d      	adds	r3, #77	@ 0x4d
 80090cc:	2202      	movs	r2, #2
 80090ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80090d0:	78fa      	ldrb	r2, [r7, #3]
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	4613      	mov	r3, r2
 80090d6:	011b      	lsls	r3, r3, #4
 80090d8:	1a9b      	subs	r3, r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	3344      	adds	r3, #68	@ 0x44
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	1c59      	adds	r1, r3, #1
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	4613      	mov	r3, r2
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	1a9b      	subs	r3, r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4403      	add	r3, r0
 80090f0:	3344      	adds	r3, #68	@ 0x44
 80090f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80090f4:	78fa      	ldrb	r2, [r7, #3]
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	4613      	mov	r3, r2
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	1a9b      	subs	r3, r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	440b      	add	r3, r1
 8009102:	3344      	adds	r3, #68	@ 0x44
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b02      	cmp	r3, #2
 8009108:	d914      	bls.n	8009134 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800910a:	78fa      	ldrb	r2, [r7, #3]
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	4613      	mov	r3, r2
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	1a9b      	subs	r3, r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	440b      	add	r3, r1
 8009118:	3344      	adds	r3, #68	@ 0x44
 800911a:	2200      	movs	r2, #0
 800911c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800911e:	78fa      	ldrb	r2, [r7, #3]
 8009120:	6879      	ldr	r1, [r7, #4]
 8009122:	4613      	mov	r3, r2
 8009124:	011b      	lsls	r3, r3, #4
 8009126:	1a9b      	subs	r3, r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	440b      	add	r3, r1
 800912c:	334c      	adds	r3, #76	@ 0x4c
 800912e:	2204      	movs	r2, #4
 8009130:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009132:	e022      	b.n	800917a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009134:	78fa      	ldrb	r2, [r7, #3]
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	4613      	mov	r3, r2
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	1a9b      	subs	r3, r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	440b      	add	r3, r1
 8009142:	334c      	adds	r3, #76	@ 0x4c
 8009144:	2202      	movs	r2, #2
 8009146:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	4413      	add	r3, r2
 8009150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800915e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009166:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009168:	78fb      	ldrb	r3, [r7, #3]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	4413      	add	r3, r2
 8009170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009174:	461a      	mov	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800917a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800917c:	78fa      	ldrb	r2, [r7, #3]
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	4613      	mov	r3, r2
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	334c      	adds	r3, #76	@ 0x4c
 800918c:	781a      	ldrb	r2, [r3, #0]
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	4619      	mov	r1, r3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f010 fb72 	bl	801987c <HAL_HCD_HC_NotifyURBChange_Callback>
 8009198:	e002      	b.n	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800919a:	bf00      	nop
 800919c:	e000      	b.n	80091a0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800919e:	bf00      	nop
  }
}
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b08a      	sub	sp, #40	@ 0x28
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	f003 030f 	and.w	r3, r3, #15
 80091c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	0c5b      	lsrs	r3, r3, #17
 80091cc:	f003 030f 	and.w	r3, r3, #15
 80091d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	091b      	lsrs	r3, r3, #4
 80091d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d004      	beq.n	80091ec <HCD_RXQLVL_IRQHandler+0x46>
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b05      	cmp	r3, #5
 80091e6:	f000 80b6 	beq.w	8009356 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80091ea:	e0b7      	b.n	800935c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 80b3 	beq.w	800935a <HCD_RXQLVL_IRQHandler+0x1b4>
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	4613      	mov	r3, r2
 80091fa:	011b      	lsls	r3, r3, #4
 80091fc:	1a9b      	subs	r3, r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	440b      	add	r3, r1
 8009202:	332c      	adds	r3, #44	@ 0x2c
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 80a7 	beq.w	800935a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800920c:	6879      	ldr	r1, [r7, #4]
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	4613      	mov	r3, r2
 8009212:	011b      	lsls	r3, r3, #4
 8009214:	1a9b      	subs	r3, r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	440b      	add	r3, r1
 800921a:	3338      	adds	r3, #56	@ 0x38
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	18d1      	adds	r1, r2, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	4613      	mov	r3, r2
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4403      	add	r3, r0
 8009230:	3334      	adds	r3, #52	@ 0x34
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4299      	cmp	r1, r3
 8009236:	f200 8083 	bhi.w	8009340 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6818      	ldr	r0, [r3, #0]
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	4613      	mov	r3, r2
 8009244:	011b      	lsls	r3, r3, #4
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	440b      	add	r3, r1
 800924c:	332c      	adds	r3, #44	@ 0x2c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	b292      	uxth	r2, r2
 8009254:	4619      	mov	r1, r3
 8009256:	f007 fa7d 	bl	8010754 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	4613      	mov	r3, r2
 8009260:	011b      	lsls	r3, r3, #4
 8009262:	1a9b      	subs	r3, r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	332c      	adds	r3, #44	@ 0x2c
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	18d1      	adds	r1, r2, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	4613      	mov	r3, r2
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	1a9b      	subs	r3, r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4403      	add	r3, r0
 800927e:	332c      	adds	r3, #44	@ 0x2c
 8009280:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	69ba      	ldr	r2, [r7, #24]
 8009286:	4613      	mov	r3, r2
 8009288:	011b      	lsls	r3, r3, #4
 800928a:	1a9b      	subs	r3, r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	440b      	add	r3, r1
 8009290:	3338      	adds	r3, #56	@ 0x38
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	18d1      	adds	r1, r2, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	4613      	mov	r3, r2
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	1a9b      	subs	r3, r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4403      	add	r3, r0
 80092a6:	3338      	adds	r3, #56	@ 0x38
 80092a8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	015a      	lsls	r2, r3, #5
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	4413      	add	r3, r2
 80092b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	0cdb      	lsrs	r3, r3, #19
 80092ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092be:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	69ba      	ldr	r2, [r7, #24]
 80092c4:	4613      	mov	r3, r2
 80092c6:	011b      	lsls	r3, r3, #4
 80092c8:	1a9b      	subs	r3, r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	440b      	add	r3, r1
 80092ce:	3328      	adds	r3, #40	@ 0x28
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d13f      	bne.n	800935a <HCD_RXQLVL_IRQHandler+0x1b4>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d03c      	beq.n	800935a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80092f6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80092fe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	4413      	add	r3, r2
 8009308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800930c:	461a      	mov	r2, r3
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	4613      	mov	r3, r2
 8009318:	011b      	lsls	r3, r3, #4
 800931a:	1a9b      	subs	r3, r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	440b      	add	r3, r1
 8009320:	333c      	adds	r3, #60	@ 0x3c
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	f083 0301 	eor.w	r3, r3, #1
 8009328:	b2d8      	uxtb	r0, r3
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	4613      	mov	r3, r2
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	1a9b      	subs	r3, r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	440b      	add	r3, r1
 8009338:	333c      	adds	r3, #60	@ 0x3c
 800933a:	4602      	mov	r2, r0
 800933c:	701a      	strb	r2, [r3, #0]
      break;
 800933e:	e00c      	b.n	800935a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8009340:	6879      	ldr	r1, [r7, #4]
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	4613      	mov	r3, r2
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	1a9b      	subs	r3, r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	440b      	add	r3, r1
 800934e:	334c      	adds	r3, #76	@ 0x4c
 8009350:	2204      	movs	r2, #4
 8009352:	701a      	strb	r2, [r3, #0]
      break;
 8009354:	e001      	b.n	800935a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8009356:	bf00      	nop
 8009358:	e000      	b.n	800935c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800935a:	bf00      	nop
  }
}
 800935c:	bf00      	nop
 800935e:	3728      	adds	r7, #40	@ 0x28
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009390:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	2b02      	cmp	r3, #2
 800939a:	d10b      	bne.n	80093b4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d102      	bne.n	80093ac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f010 fa4c 	bl	8019844 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	f043 0302 	orr.w	r3, r3, #2
 80093b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f003 0308 	and.w	r3, r3, #8
 80093ba:	2b08      	cmp	r3, #8
 80093bc:	d132      	bne.n	8009424 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f043 0308 	orr.w	r3, r3, #8
 80093c4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f003 0304 	and.w	r3, r3, #4
 80093cc:	2b04      	cmp	r3, #4
 80093ce:	d126      	bne.n	800941e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	7a5b      	ldrb	r3, [r3, #9]
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d113      	bne.n	8009400 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80093de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093e2:	d106      	bne.n	80093f2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2102      	movs	r1, #2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f007 fb3c 	bl	8010a68 <USB_InitFSLSPClkSel>
 80093f0:	e011      	b.n	8009416 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2101      	movs	r1, #1
 80093f8:	4618      	mov	r0, r3
 80093fa:	f007 fb35 	bl	8010a68 <USB_InitFSLSPClkSel>
 80093fe:	e00a      	b.n	8009416 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	79db      	ldrb	r3, [r3, #7]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d106      	bne.n	8009416 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800940e:	461a      	mov	r2, r3
 8009410:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8009414:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f010 fa42 	bl	80198a0 <HAL_HCD_PortEnabled_Callback>
 800941c:	e002      	b.n	8009424 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f010 fa4c 	bl	80198bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f003 0320 	and.w	r3, r3, #32
 800942a:	2b20      	cmp	r3, #32
 800942c:	d103      	bne.n	8009436 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	f043 0320 	orr.w	r3, r3, #32
 8009434:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800943c:	461a      	mov	r2, r3
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	6013      	str	r3, [r2, #0]
}
 8009442:	bf00      	nop
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e08b      	b.n	8009576 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d106      	bne.n	8009478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7fa f88c 	bl	8003590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2224      	movs	r2, #36	@ 0x24
 800947c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 0201 	bic.w	r2, r2, #1
 800948e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800949c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80094ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d107      	bne.n	80094c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80094c2:	609a      	str	r2, [r3, #8]
 80094c4:	e006      	b.n	80094d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	689a      	ldr	r2, [r3, #8]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80094d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d108      	bne.n	80094ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094ea:	605a      	str	r2, [r3, #4]
 80094ec:	e007      	b.n	80094fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80094fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6859      	ldr	r1, [r3, #4]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	4b1d      	ldr	r3, [pc, #116]	@ (8009580 <HAL_I2C_Init+0x134>)
 800950a:	430b      	orrs	r3, r1
 800950c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800951c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691a      	ldr	r2, [r3, #16]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	430a      	orrs	r2, r1
 8009536:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	69d9      	ldr	r1, [r3, #28]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a1a      	ldr	r2, [r3, #32]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	430a      	orrs	r2, r1
 8009546:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0201 	orr.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2220      	movs	r2, #32
 8009562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	02008000 	.word	0x02008000

08009584 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b20      	cmp	r3, #32
 8009598:	d138      	bne.n	800960c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d101      	bne.n	80095a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80095a4:	2302      	movs	r3, #2
 80095a6:	e032      	b.n	800960e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2224      	movs	r2, #36	@ 0x24
 80095b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 0201 	bic.w	r2, r2, #1
 80095c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6819      	ldr	r1, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0201 	orr.w	r2, r2, #1
 80095f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2220      	movs	r2, #32
 80095fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	e000      	b.n	800960e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800960c:	2302      	movs	r3, #2
  }
}
 800960e:	4618      	mov	r0, r3
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800961a:	b480      	push	{r7}
 800961c:	b085      	sub	sp, #20
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b20      	cmp	r3, #32
 800962e:	d139      	bne.n	80096a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009636:	2b01      	cmp	r3, #1
 8009638:	d101      	bne.n	800963e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800963a:	2302      	movs	r3, #2
 800963c:	e033      	b.n	80096a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2224      	movs	r2, #36	@ 0x24
 800964a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 0201 	bic.w	r2, r2, #1
 800965c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800966c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	021b      	lsls	r3, r3, #8
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	4313      	orrs	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f042 0201 	orr.w	r2, r2, #1
 800968e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2220      	movs	r2, #32
 8009694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	e000      	b.n	80096a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80096a4:	2302      	movs	r3, #2
  }
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e08f      	b.n	80097e4 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d106      	bne.n	80096de <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7fa f801 	bl	80036e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2202      	movs	r2, #2
 80096e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	699a      	ldr	r2, [r3, #24]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80096f4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6999      	ldr	r1, [r3, #24]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800970a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	430a      	orrs	r2, r1
 8009718:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	041b      	lsls	r3, r3, #16
 8009720:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6999      	ldr	r1, [r3, #24]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	430a      	orrs	r2, r1
 800972e:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	69db      	ldr	r3, [r3, #28]
 8009734:	041b      	lsls	r3, r3, #16
 8009736:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a19      	ldr	r1, [r3, #32]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	430a      	orrs	r2, r1
 8009744:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974a:	041b      	lsls	r3, r3, #16
 800974c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	430a      	orrs	r2, r1
 800975a:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009760:	041b      	lsls	r3, r3, #16
 8009762:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	430a      	orrs	r2, r1
 8009770:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009778:	021b      	lsls	r3, r3, #8
 800977a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009782:	041b      	lsls	r3, r3, #16
 8009784:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009794:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80097a8:	431a      	orrs	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f042 0206 	orr.w	r2, r2, #6
 80097c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	699a      	ldr	r2, [r3, #24]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f042 0201 	orr.w	r2, r2, #1
 80097d0:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009802:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f003 0304 	and.w	r3, r3, #4
 800980a:	2b00      	cmp	r3, #0
 800980c:	d023      	beq.n	8009856 <HAL_LTDC_IRQHandler+0x6a>
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f003 0304 	and.w	r3, r3, #4
 8009814:	2b00      	cmp	r3, #0
 8009816:	d01e      	beq.n	8009856 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f022 0204 	bic.w	r2, r2, #4
 8009826:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2204      	movs	r2, #4
 800982e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009836:	f043 0201 	orr.w	r2, r3, #1
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2204      	movs	r2, #4
 8009844:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f86f 	bl	8009934 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d023      	beq.n	80098a8 <HAL_LTDC_IRQHandler+0xbc>
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d01e      	beq.n	80098a8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 0202 	bic.w	r2, r2, #2
 8009878:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2202      	movs	r2, #2
 8009880:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009888:	f043 0202 	orr.w	r2, r3, #2
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2204      	movs	r2, #4
 8009896:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f846 	bl	8009934 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d01b      	beq.n	80098ea <HAL_LTDC_IRQHandler+0xfe>
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d016      	beq.n	80098ea <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 0201 	bic.w	r2, r2, #1
 80098ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2201      	movs	r2, #1
 80098d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f82f 	bl	8009948 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f003 0308 	and.w	r3, r3, #8
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d01b      	beq.n	800992c <HAL_LTDC_IRQHandler+0x140>
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f003 0308 	and.w	r3, r3, #8
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d016      	beq.n	800992c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f022 0208 	bic.w	r2, r2, #8
 800990c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2208      	movs	r2, #8
 8009914:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f818 	bl	800995c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800992c:	bf00      	nop
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009970:	b5b0      	push	{r4, r5, r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009982:	2b01      	cmp	r3, #1
 8009984:	d101      	bne.n	800998a <HAL_LTDC_ConfigLayer+0x1a>
 8009986:	2302      	movs	r3, #2
 8009988:	e02c      	b.n	80099e4 <HAL_LTDC_ConfigLayer+0x74>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2202      	movs	r2, #2
 8009996:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2134      	movs	r1, #52	@ 0x34
 80099a0:	fb01 f303 	mul.w	r3, r1, r3
 80099a4:	4413      	add	r3, r2
 80099a6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	4614      	mov	r4, r2
 80099ae:	461d      	mov	r5, r3
 80099b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	68b9      	ldr	r1, [r7, #8]
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 f811 	bl	80099ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2201      	movs	r2, #1
 80099d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bdb0      	pop	{r4, r5, r7, pc}

080099ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b089      	sub	sp, #36	@ 0x24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	0c1b      	lsrs	r3, r3, #16
 8009a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a08:	4413      	add	r3, r2
 8009a0a:	041b      	lsls	r3, r3, #16
 8009a0c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	01db      	lsls	r3, r3, #7
 8009a18:	4413      	add	r3, r2
 8009a1a:	3384      	adds	r3, #132	@ 0x84
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	6812      	ldr	r2, [r2, #0]
 8009a22:	4611      	mov	r1, r2
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	01d2      	lsls	r2, r2, #7
 8009a28:	440a      	add	r2, r1
 8009a2a:	3284      	adds	r2, #132	@ 0x84
 8009a2c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009a30:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	0c1b      	lsrs	r3, r3, #16
 8009a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009a42:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009a44:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	01db      	lsls	r3, r3, #7
 8009a50:	440b      	add	r3, r1
 8009a52:	3384      	adds	r3, #132	@ 0x84
 8009a54:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009a5a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a6a:	4413      	add	r3, r2
 8009a6c:	041b      	lsls	r3, r3, #16
 8009a6e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	461a      	mov	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	01db      	lsls	r3, r3, #7
 8009a7a:	4413      	add	r3, r2
 8009a7c:	3384      	adds	r3, #132	@ 0x84
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	6812      	ldr	r2, [r2, #0]
 8009a84:	4611      	mov	r1, r2
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	01d2      	lsls	r2, r2, #7
 8009a8a:	440a      	add	r2, r1
 8009a8c:	3284      	adds	r2, #132	@ 0x84
 8009a8e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009a92:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009aa2:	4413      	add	r3, r2
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	01db      	lsls	r3, r3, #7
 8009ab0:	440b      	add	r3, r1
 8009ab2:	3384      	adds	r3, #132	@ 0x84
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	01db      	lsls	r3, r3, #7
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3384      	adds	r3, #132	@ 0x84
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	6812      	ldr	r2, [r2, #0]
 8009ad0:	4611      	mov	r1, r2
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	01d2      	lsls	r2, r2, #7
 8009ad6:	440a      	add	r2, r1
 8009ad8:	3284      	adds	r2, #132	@ 0x84
 8009ada:	f023 0307 	bic.w	r3, r3, #7
 8009ade:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	01db      	lsls	r3, r3, #7
 8009aea:	4413      	add	r3, r2
 8009aec:	3384      	adds	r3, #132	@ 0x84
 8009aee:	461a      	mov	r2, r3
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009afc:	021b      	lsls	r3, r3, #8
 8009afe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009b06:	041b      	lsls	r3, r3, #16
 8009b08:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	061b      	lsls	r3, r3, #24
 8009b10:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009b18:	461a      	mov	r2, r3
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	431a      	orrs	r2, r3
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	431a      	orrs	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4619      	mov	r1, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	01db      	lsls	r3, r3, #7
 8009b2c:	440b      	add	r3, r1
 8009b2e:	3384      	adds	r3, #132	@ 0x84
 8009b30:	4619      	mov	r1, r3
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	01db      	lsls	r3, r3, #7
 8009b42:	4413      	add	r3, r2
 8009b44:	3384      	adds	r3, #132	@ 0x84
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	6812      	ldr	r2, [r2, #0]
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	01d2      	lsls	r2, r2, #7
 8009b52:	440a      	add	r2, r1
 8009b54:	3284      	adds	r2, #132	@ 0x84
 8009b56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009b5a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	01db      	lsls	r3, r3, #7
 8009b66:	4413      	add	r3, r2
 8009b68:	3384      	adds	r3, #132	@ 0x84
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	01db      	lsls	r3, r3, #7
 8009b7c:	4413      	add	r3, r2
 8009b7e:	3384      	adds	r3, #132	@ 0x84
 8009b80:	69da      	ldr	r2, [r3, #28]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4619      	mov	r1, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	01db      	lsls	r3, r3, #7
 8009b8c:	440b      	add	r3, r1
 8009b8e:	3384      	adds	r3, #132	@ 0x84
 8009b90:	4619      	mov	r1, r3
 8009b92:	4b4f      	ldr	r3, [pc, #316]	@ (8009cd0 <LTDC_SetConfig+0x2e4>)
 8009b94:	4013      	ands	r3, r2
 8009b96:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	69da      	ldr	r2, [r3, #28]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	6a1b      	ldr	r3, [r3, #32]
 8009ba0:	68f9      	ldr	r1, [r7, #12]
 8009ba2:	6809      	ldr	r1, [r1, #0]
 8009ba4:	4608      	mov	r0, r1
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	01c9      	lsls	r1, r1, #7
 8009baa:	4401      	add	r1, r0
 8009bac:	3184      	adds	r1, #132	@ 0x84
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	01db      	lsls	r3, r3, #7
 8009bbc:	4413      	add	r3, r2
 8009bbe:	3384      	adds	r3, #132	@ 0x84
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d102      	bne.n	8009bd6 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8009bd0:	2304      	movs	r3, #4
 8009bd2:	61fb      	str	r3, [r7, #28]
 8009bd4:	e01b      	b.n	8009c0e <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d102      	bne.n	8009be4 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8009bde:	2303      	movs	r3, #3
 8009be0:	61fb      	str	r3, [r7, #28]
 8009be2:	e014      	b.n	8009c0e <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	d00b      	beq.n	8009c04 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d007      	beq.n	8009c04 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009bf8:	2b03      	cmp	r3, #3
 8009bfa:	d003      	beq.n	8009c04 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009c00:	2b07      	cmp	r3, #7
 8009c02:	d102      	bne.n	8009c0a <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8009c04:	2302      	movs	r3, #2
 8009c06:	61fb      	str	r3, [r7, #28]
 8009c08:	e001      	b.n	8009c0e <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	01db      	lsls	r3, r3, #7
 8009c18:	4413      	add	r3, r2
 8009c1a:	3384      	adds	r3, #132	@ 0x84
 8009c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	6812      	ldr	r2, [r2, #0]
 8009c22:	4611      	mov	r1, r2
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	01d2      	lsls	r2, r2, #7
 8009c28:	440a      	add	r2, r1
 8009c2a:	3284      	adds	r2, #132	@ 0x84
 8009c2c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009c30:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	fb02 f303 	mul.w	r3, r2, r3
 8009c3c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	6859      	ldr	r1, [r3, #4]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	1acb      	subs	r3, r1, r3
 8009c48:	69f9      	ldr	r1, [r7, #28]
 8009c4a:	fb01 f303 	mul.w	r3, r1, r3
 8009c4e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009c50:	68f9      	ldr	r1, [r7, #12]
 8009c52:	6809      	ldr	r1, [r1, #0]
 8009c54:	4608      	mov	r0, r1
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	01c9      	lsls	r1, r1, #7
 8009c5a:	4401      	add	r1, r0
 8009c5c:	3184      	adds	r1, #132	@ 0x84
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	461a      	mov	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	01db      	lsls	r3, r3, #7
 8009c6c:	4413      	add	r3, r2
 8009c6e:	3384      	adds	r3, #132	@ 0x84
 8009c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4619      	mov	r1, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	01db      	lsls	r3, r3, #7
 8009c7c:	440b      	add	r3, r1
 8009c7e:	3384      	adds	r3, #132	@ 0x84
 8009c80:	4619      	mov	r1, r3
 8009c82:	4b14      	ldr	r3, [pc, #80]	@ (8009cd4 <LTDC_SetConfig+0x2e8>)
 8009c84:	4013      	ands	r3, r2
 8009c86:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	01db      	lsls	r3, r3, #7
 8009c92:	4413      	add	r3, r2
 8009c94:	3384      	adds	r3, #132	@ 0x84
 8009c96:	461a      	mov	r2, r3
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	01db      	lsls	r3, r3, #7
 8009ca8:	4413      	add	r3, r2
 8009caa:	3384      	adds	r3, #132	@ 0x84
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	6812      	ldr	r2, [r2, #0]
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	01d2      	lsls	r2, r2, #7
 8009cb8:	440a      	add	r2, r1
 8009cba:	3284      	adds	r2, #132	@ 0x84
 8009cbc:	f043 0301 	orr.w	r3, r3, #1
 8009cc0:	6013      	str	r3, [r2, #0]
}
 8009cc2:	bf00      	nop
 8009cc4:	3724      	adds	r7, #36	@ 0x24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	fffff8f8 	.word	0xfffff8f8
 8009cd4:	fffff800 	.word	0xfffff800

08009cd8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cdc:	4b05      	ldr	r3, [pc, #20]	@ (8009cf4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a04      	ldr	r2, [pc, #16]	@ (8009cf4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ce6:	6013      	str	r3, [r2, #0]
}
 8009ce8:	bf00      	nop
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	40007000 	.word	0x40007000

08009cf8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009d02:	4b23      	ldr	r3, [pc, #140]	@ (8009d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8009d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d06:	4a22      	ldr	r2, [pc, #136]	@ (8009d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8009d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009d0e:	4b20      	ldr	r3, [pc, #128]	@ (8009d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8009d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d16:	603b      	str	r3, [r7, #0]
 8009d18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8009d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009d26:	f7fb f9d3 	bl	80050d0 <HAL_GetTick>
 8009d2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009d2c:	e009      	b.n	8009d42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009d2e:	f7fb f9cf 	bl	80050d0 <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d3c:	d901      	bls.n	8009d42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e022      	b.n	8009d88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009d42:	4b14      	ldr	r3, [pc, #80]	@ (8009d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d4e:	d1ee      	bne.n	8009d2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009d50:	4b10      	ldr	r3, [pc, #64]	@ (8009d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a0f      	ldr	r2, [pc, #60]	@ (8009d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009d5c:	f7fb f9b8 	bl	80050d0 <HAL_GetTick>
 8009d60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009d62:	e009      	b.n	8009d78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009d64:	f7fb f9b4 	bl	80050d0 <HAL_GetTick>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d72:	d901      	bls.n	8009d78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009d74:	2303      	movs	r3, #3
 8009d76:	e007      	b.n	8009d88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009d78:	4b06      	ldr	r3, [pc, #24]	@ (8009d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d84:	d1ee      	bne.n	8009d64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	40023800 	.word	0x40023800
 8009d94:	40007000 	.word	0x40007000

08009d98 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af02      	add	r7, sp, #8
 8009d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009da0:	f7fb f996 	bl	80050d0 <HAL_GetTick>
 8009da4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e067      	b.n	8009e80 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10b      	bne.n	8009dd4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7f9 fd53 	bl	8003870 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009dca:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f85e 	bl	8009e90 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	3b01      	subs	r3, #1
 8009de4:	021a      	lsls	r2, r3, #8
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	2120      	movs	r1, #32
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f856 	bl	8009eac <QSPI_WaitFlagStateUntilTimeout>
 8009e00:	4603      	mov	r3, r0
 8009e02:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009e04:	7afb      	ldrb	r3, [r7, #11]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d135      	bne.n	8009e76 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	4b1d      	ldr	r3, [pc, #116]	@ (8009e88 <HAL_QSPI_Init+0xf0>)
 8009e12:	4013      	ands	r3, r2
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	6852      	ldr	r2, [r2, #4]
 8009e18:	0611      	lsls	r1, r2, #24
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	68d2      	ldr	r2, [r2, #12]
 8009e1e:	4311      	orrs	r1, r2
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	69d2      	ldr	r2, [r2, #28]
 8009e24:	4311      	orrs	r1, r2
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	6a12      	ldr	r2, [r2, #32]
 8009e2a:	4311      	orrs	r1, r2
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6812      	ldr	r2, [r2, #0]
 8009e30:	430b      	orrs	r3, r1
 8009e32:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	4b14      	ldr	r3, [pc, #80]	@ (8009e8c <HAL_QSPI_Init+0xf4>)
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	6912      	ldr	r2, [r2, #16]
 8009e42:	0411      	lsls	r1, r2, #16
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	6952      	ldr	r2, [r2, #20]
 8009e48:	4311      	orrs	r1, r2
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	6992      	ldr	r2, [r2, #24]
 8009e4e:	4311      	orrs	r1, r2
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	6812      	ldr	r2, [r2, #0]
 8009e54:	430b      	orrs	r3, r1
 8009e56:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0201 	orr.w	r2, r2, #1
 8009e66:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8009e7e:	7afb      	ldrb	r3, [r7, #11]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	00ffff2f 	.word	0x00ffff2f
 8009e8c:	ffe0f8fe 	.word	0xffe0f8fe

08009e90 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	603b      	str	r3, [r7, #0]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009ebc:	e01a      	b.n	8009ef4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec4:	d016      	beq.n	8009ef4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ec6:	f7fb f903 	bl	80050d0 <HAL_GetTick>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	69ba      	ldr	r2, [r7, #24]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d302      	bcc.n	8009edc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10b      	bne.n	8009ef4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2204      	movs	r2, #4
 8009ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ee8:	f043 0201 	orr.w	r2, r3, #1
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e00e      	b.n	8009f12 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	689a      	ldr	r2, [r3, #8]
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	4013      	ands	r3, r2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	bf14      	ite	ne
 8009f02:	2301      	movne	r3, #1
 8009f04:	2300      	moveq	r3, #0
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	461a      	mov	r2, r3
 8009f0a:	79fb      	ldrb	r3, [r7, #7]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d1d6      	bne.n	8009ebe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
	...

08009f1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009f24:	2300      	movs	r3, #0
 8009f26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e291      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 8087 	beq.w	800a04e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f40:	4b96      	ldr	r3, [pc, #600]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f003 030c 	and.w	r3, r3, #12
 8009f48:	2b04      	cmp	r3, #4
 8009f4a:	d00c      	beq.n	8009f66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f4c:	4b93      	ldr	r3, [pc, #588]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f003 030c 	and.w	r3, r3, #12
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	d112      	bne.n	8009f7e <HAL_RCC_OscConfig+0x62>
 8009f58:	4b90      	ldr	r3, [pc, #576]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f64:	d10b      	bne.n	8009f7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f66:	4b8d      	ldr	r3, [pc, #564]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d06c      	beq.n	800a04c <HAL_RCC_OscConfig+0x130>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d168      	bne.n	800a04c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e26b      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f86:	d106      	bne.n	8009f96 <HAL_RCC_OscConfig+0x7a>
 8009f88:	4b84      	ldr	r3, [pc, #528]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a83      	ldr	r2, [pc, #524]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	e02e      	b.n	8009ff4 <HAL_RCC_OscConfig+0xd8>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10c      	bne.n	8009fb8 <HAL_RCC_OscConfig+0x9c>
 8009f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	4b7c      	ldr	r3, [pc, #496]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a7b      	ldr	r2, [pc, #492]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009fb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	e01d      	b.n	8009ff4 <HAL_RCC_OscConfig+0xd8>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009fc0:	d10c      	bne.n	8009fdc <HAL_RCC_OscConfig+0xc0>
 8009fc2:	4b76      	ldr	r3, [pc, #472]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a75      	ldr	r2, [pc, #468]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009fcc:	6013      	str	r3, [r2, #0]
 8009fce:	4b73      	ldr	r3, [pc, #460]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a72      	ldr	r2, [pc, #456]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	e00b      	b.n	8009ff4 <HAL_RCC_OscConfig+0xd8>
 8009fdc:	4b6f      	ldr	r3, [pc, #444]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a6e      	ldr	r2, [pc, #440]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fe6:	6013      	str	r3, [r2, #0]
 8009fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a6b      	ldr	r2, [pc, #428]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 8009fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d013      	beq.n	800a024 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ffc:	f7fb f868 	bl	80050d0 <HAL_GetTick>
 800a000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a002:	e008      	b.n	800a016 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a004:	f7fb f864 	bl	80050d0 <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	2b64      	cmp	r3, #100	@ 0x64
 800a010:	d901      	bls.n	800a016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e21f      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a016:	4b61      	ldr	r3, [pc, #388]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0f0      	beq.n	800a004 <HAL_RCC_OscConfig+0xe8>
 800a022:	e014      	b.n	800a04e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a024:	f7fb f854 	bl	80050d0 <HAL_GetTick>
 800a028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a02a:	e008      	b.n	800a03e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a02c:	f7fb f850 	bl	80050d0 <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	2b64      	cmp	r3, #100	@ 0x64
 800a038:	d901      	bls.n	800a03e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a03a:	2303      	movs	r3, #3
 800a03c:	e20b      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a03e:	4b57      	ldr	r3, [pc, #348]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1f0      	bne.n	800a02c <HAL_RCC_OscConfig+0x110>
 800a04a:	e000      	b.n	800a04e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a04c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0302 	and.w	r3, r3, #2
 800a056:	2b00      	cmp	r3, #0
 800a058:	d069      	beq.n	800a12e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a05a:	4b50      	ldr	r3, [pc, #320]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	f003 030c 	and.w	r3, r3, #12
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00b      	beq.n	800a07e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a066:	4b4d      	ldr	r3, [pc, #308]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	f003 030c 	and.w	r3, r3, #12
 800a06e:	2b08      	cmp	r3, #8
 800a070:	d11c      	bne.n	800a0ac <HAL_RCC_OscConfig+0x190>
 800a072:	4b4a      	ldr	r3, [pc, #296]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d116      	bne.n	800a0ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a07e:	4b47      	ldr	r3, [pc, #284]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f003 0302 	and.w	r3, r3, #2
 800a086:	2b00      	cmp	r3, #0
 800a088:	d005      	beq.n	800a096 <HAL_RCC_OscConfig+0x17a>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d001      	beq.n	800a096 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e1df      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a096:	4b41      	ldr	r3, [pc, #260]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	493d      	ldr	r1, [pc, #244]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0aa:	e040      	b.n	800a12e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d023      	beq.n	800a0fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0b4:	4b39      	ldr	r3, [pc, #228]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a38      	ldr	r2, [pc, #224]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a0ba:	f043 0301 	orr.w	r3, r3, #1
 800a0be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0c0:	f7fb f806 	bl	80050d0 <HAL_GetTick>
 800a0c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0c6:	e008      	b.n	800a0da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0c8:	f7fb f802 	bl	80050d0 <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e1bd      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0da:	4b30      	ldr	r3, [pc, #192]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0f0      	beq.n	800a0c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0e6:	4b2d      	ldr	r3, [pc, #180]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	4929      	ldr	r1, [pc, #164]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	600b      	str	r3, [r1, #0]
 800a0fa:	e018      	b.n	800a12e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0fc:	4b27      	ldr	r3, [pc, #156]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a26      	ldr	r2, [pc, #152]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a102:	f023 0301 	bic.w	r3, r3, #1
 800a106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a108:	f7fa ffe2 	bl	80050d0 <HAL_GetTick>
 800a10c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a10e:	e008      	b.n	800a122 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a110:	f7fa ffde 	bl	80050d0 <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d901      	bls.n	800a122 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a11e:	2303      	movs	r3, #3
 800a120:	e199      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a122:	4b1e      	ldr	r3, [pc, #120]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 0302 	and.w	r3, r3, #2
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1f0      	bne.n	800a110 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0308 	and.w	r3, r3, #8
 800a136:	2b00      	cmp	r3, #0
 800a138:	d038      	beq.n	800a1ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d019      	beq.n	800a176 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a142:	4b16      	ldr	r3, [pc, #88]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a146:	4a15      	ldr	r2, [pc, #84]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a148:	f043 0301 	orr.w	r3, r3, #1
 800a14c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a14e:	f7fa ffbf 	bl	80050d0 <HAL_GetTick>
 800a152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a154:	e008      	b.n	800a168 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a156:	f7fa ffbb 	bl	80050d0 <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	2b02      	cmp	r3, #2
 800a162:	d901      	bls.n	800a168 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e176      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a168:	4b0c      	ldr	r3, [pc, #48]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a16a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a16c:	f003 0302 	and.w	r3, r3, #2
 800a170:	2b00      	cmp	r3, #0
 800a172:	d0f0      	beq.n	800a156 <HAL_RCC_OscConfig+0x23a>
 800a174:	e01a      	b.n	800a1ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a176:	4b09      	ldr	r3, [pc, #36]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a17a:	4a08      	ldr	r2, [pc, #32]	@ (800a19c <HAL_RCC_OscConfig+0x280>)
 800a17c:	f023 0301 	bic.w	r3, r3, #1
 800a180:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a182:	f7fa ffa5 	bl	80050d0 <HAL_GetTick>
 800a186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a188:	e00a      	b.n	800a1a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a18a:	f7fa ffa1 	bl	80050d0 <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	2b02      	cmp	r3, #2
 800a196:	d903      	bls.n	800a1a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e15c      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
 800a19c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1a0:	4b91      	ldr	r3, [pc, #580]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a1a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1ee      	bne.n	800a18a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 80a4 	beq.w	800a302 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1ba:	4b8b      	ldr	r3, [pc, #556]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10d      	bne.n	800a1e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1c6:	4b88      	ldr	r3, [pc, #544]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ca:	4a87      	ldr	r2, [pc, #540]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a1cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1d0:	6413      	str	r3, [r2, #64]	@ 0x40
 800a1d2:	4b85      	ldr	r3, [pc, #532]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1da:	60bb      	str	r3, [r7, #8]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1e2:	4b82      	ldr	r3, [pc, #520]	@ (800a3ec <HAL_RCC_OscConfig+0x4d0>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d118      	bne.n	800a220 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a1ee:	4b7f      	ldr	r3, [pc, #508]	@ (800a3ec <HAL_RCC_OscConfig+0x4d0>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a7e      	ldr	r2, [pc, #504]	@ (800a3ec <HAL_RCC_OscConfig+0x4d0>)
 800a1f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1fa:	f7fa ff69 	bl	80050d0 <HAL_GetTick>
 800a1fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a200:	e008      	b.n	800a214 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a202:	f7fa ff65 	bl	80050d0 <HAL_GetTick>
 800a206:	4602      	mov	r2, r0
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	2b64      	cmp	r3, #100	@ 0x64
 800a20e:	d901      	bls.n	800a214 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a210:	2303      	movs	r3, #3
 800a212:	e120      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a214:	4b75      	ldr	r3, [pc, #468]	@ (800a3ec <HAL_RCC_OscConfig+0x4d0>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d0f0      	beq.n	800a202 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d106      	bne.n	800a236 <HAL_RCC_OscConfig+0x31a>
 800a228:	4b6f      	ldr	r3, [pc, #444]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a22a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a22c:	4a6e      	ldr	r2, [pc, #440]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a22e:	f043 0301 	orr.w	r3, r3, #1
 800a232:	6713      	str	r3, [r2, #112]	@ 0x70
 800a234:	e02d      	b.n	800a292 <HAL_RCC_OscConfig+0x376>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10c      	bne.n	800a258 <HAL_RCC_OscConfig+0x33c>
 800a23e:	4b6a      	ldr	r3, [pc, #424]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a242:	4a69      	ldr	r2, [pc, #420]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a244:	f023 0301 	bic.w	r3, r3, #1
 800a248:	6713      	str	r3, [r2, #112]	@ 0x70
 800a24a:	4b67      	ldr	r3, [pc, #412]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a24c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a24e:	4a66      	ldr	r2, [pc, #408]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a250:	f023 0304 	bic.w	r3, r3, #4
 800a254:	6713      	str	r3, [r2, #112]	@ 0x70
 800a256:	e01c      	b.n	800a292 <HAL_RCC_OscConfig+0x376>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	2b05      	cmp	r3, #5
 800a25e:	d10c      	bne.n	800a27a <HAL_RCC_OscConfig+0x35e>
 800a260:	4b61      	ldr	r3, [pc, #388]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a264:	4a60      	ldr	r2, [pc, #384]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a266:	f043 0304 	orr.w	r3, r3, #4
 800a26a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a26c:	4b5e      	ldr	r3, [pc, #376]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a26e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a270:	4a5d      	ldr	r2, [pc, #372]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a272:	f043 0301 	orr.w	r3, r3, #1
 800a276:	6713      	str	r3, [r2, #112]	@ 0x70
 800a278:	e00b      	b.n	800a292 <HAL_RCC_OscConfig+0x376>
 800a27a:	4b5b      	ldr	r3, [pc, #364]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a27c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a27e:	4a5a      	ldr	r2, [pc, #360]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a280:	f023 0301 	bic.w	r3, r3, #1
 800a284:	6713      	str	r3, [r2, #112]	@ 0x70
 800a286:	4b58      	ldr	r3, [pc, #352]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a28a:	4a57      	ldr	r2, [pc, #348]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a28c:	f023 0304 	bic.w	r3, r3, #4
 800a290:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d015      	beq.n	800a2c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a29a:	f7fa ff19 	bl	80050d0 <HAL_GetTick>
 800a29e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2a0:	e00a      	b.n	800a2b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2a2:	f7fa ff15 	bl	80050d0 <HAL_GetTick>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d901      	bls.n	800a2b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e0ce      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2b8:	4b4b      	ldr	r3, [pc, #300]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a2ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2bc:	f003 0302 	and.w	r3, r3, #2
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d0ee      	beq.n	800a2a2 <HAL_RCC_OscConfig+0x386>
 800a2c4:	e014      	b.n	800a2f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2c6:	f7fa ff03 	bl	80050d0 <HAL_GetTick>
 800a2ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2cc:	e00a      	b.n	800a2e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2ce:	f7fa feff 	bl	80050d0 <HAL_GetTick>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d901      	bls.n	800a2e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e0b8      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2e4:	4b40      	ldr	r3, [pc, #256]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a2e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2e8:	f003 0302 	and.w	r3, r3, #2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1ee      	bne.n	800a2ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a2f0:	7dfb      	ldrb	r3, [r7, #23]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d105      	bne.n	800a302 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2f6:	4b3c      	ldr	r3, [pc, #240]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a2f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2fa:	4a3b      	ldr	r2, [pc, #236]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a2fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a300:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	2b00      	cmp	r3, #0
 800a308:	f000 80a4 	beq.w	800a454 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a30c:	4b36      	ldr	r3, [pc, #216]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f003 030c 	and.w	r3, r3, #12
 800a314:	2b08      	cmp	r3, #8
 800a316:	d06b      	beq.n	800a3f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d149      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a320:	4b31      	ldr	r3, [pc, #196]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a30      	ldr	r2, [pc, #192]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a326:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a32a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a32c:	f7fa fed0 	bl	80050d0 <HAL_GetTick>
 800a330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a332:	e008      	b.n	800a346 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a334:	f7fa fecc 	bl	80050d0 <HAL_GetTick>
 800a338:	4602      	mov	r2, r0
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d901      	bls.n	800a346 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a342:	2303      	movs	r3, #3
 800a344:	e087      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a346:	4b28      	ldr	r3, [pc, #160]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1f0      	bne.n	800a334 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	69da      	ldr	r2, [r3, #28]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	431a      	orrs	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a360:	019b      	lsls	r3, r3, #6
 800a362:	431a      	orrs	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a368:	085b      	lsrs	r3, r3, #1
 800a36a:	3b01      	subs	r3, #1
 800a36c:	041b      	lsls	r3, r3, #16
 800a36e:	431a      	orrs	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a374:	061b      	lsls	r3, r3, #24
 800a376:	4313      	orrs	r3, r2
 800a378:	4a1b      	ldr	r2, [pc, #108]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a37a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a37e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a380:	4b19      	ldr	r3, [pc, #100]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a18      	ldr	r2, [pc, #96]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a38a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a38c:	f7fa fea0 	bl	80050d0 <HAL_GetTick>
 800a390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a392:	e008      	b.n	800a3a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a394:	f7fa fe9c 	bl	80050d0 <HAL_GetTick>
 800a398:	4602      	mov	r2, r0
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d901      	bls.n	800a3a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e057      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3a6:	4b10      	ldr	r3, [pc, #64]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0f0      	beq.n	800a394 <HAL_RCC_OscConfig+0x478>
 800a3b2:	e04f      	b.n	800a454 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a0b      	ldr	r2, [pc, #44]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a3ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3c0:	f7fa fe86 	bl	80050d0 <HAL_GetTick>
 800a3c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3c6:	e008      	b.n	800a3da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3c8:	f7fa fe82 	bl	80050d0 <HAL_GetTick>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d901      	bls.n	800a3da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e03d      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3da:	4b03      	ldr	r3, [pc, #12]	@ (800a3e8 <HAL_RCC_OscConfig+0x4cc>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1f0      	bne.n	800a3c8 <HAL_RCC_OscConfig+0x4ac>
 800a3e6:	e035      	b.n	800a454 <HAL_RCC_OscConfig+0x538>
 800a3e8:	40023800 	.word	0x40023800
 800a3ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a3f0:	4b1b      	ldr	r3, [pc, #108]	@ (800a460 <HAL_RCC_OscConfig+0x544>)
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d028      	beq.n	800a450 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a408:	429a      	cmp	r2, r3
 800a40a:	d121      	bne.n	800a450 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a416:	429a      	cmp	r2, r3
 800a418:	d11a      	bne.n	800a450 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a420:	4013      	ands	r3, r2
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a426:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a428:	4293      	cmp	r3, r2
 800a42a:	d111      	bne.n	800a450 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a436:	085b      	lsrs	r3, r3, #1
 800a438:	3b01      	subs	r3, #1
 800a43a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d107      	bne.n	800a450 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d001      	beq.n	800a454 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e000      	b.n	800a456 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	40023800 	.word	0x40023800

0800a464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d101      	bne.n	800a47c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e0d0      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a47c:	4b6a      	ldr	r3, [pc, #424]	@ (800a628 <HAL_RCC_ClockConfig+0x1c4>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 030f 	and.w	r3, r3, #15
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d910      	bls.n	800a4ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a48a:	4b67      	ldr	r3, [pc, #412]	@ (800a628 <HAL_RCC_ClockConfig+0x1c4>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f023 020f 	bic.w	r2, r3, #15
 800a492:	4965      	ldr	r1, [pc, #404]	@ (800a628 <HAL_RCC_ClockConfig+0x1c4>)
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	4313      	orrs	r3, r2
 800a498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a49a:	4b63      	ldr	r3, [pc, #396]	@ (800a628 <HAL_RCC_ClockConfig+0x1c4>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 030f 	and.w	r3, r3, #15
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d001      	beq.n	800a4ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e0b8      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0302 	and.w	r3, r3, #2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d020      	beq.n	800a4fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0304 	and.w	r3, r3, #4
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d005      	beq.n	800a4d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a4c4:	4b59      	ldr	r3, [pc, #356]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	4a58      	ldr	r2, [pc, #352]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a4ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a4ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0308 	and.w	r3, r3, #8
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d005      	beq.n	800a4e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a4dc:	4b53      	ldr	r3, [pc, #332]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	4a52      	ldr	r2, [pc, #328]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a4e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a4e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4e8:	4b50      	ldr	r3, [pc, #320]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	494d      	ldr	r1, [pc, #308]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	d040      	beq.n	800a588 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d107      	bne.n	800a51e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a50e:	4b47      	ldr	r3, [pc, #284]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d115      	bne.n	800a546 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e07f      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	2b02      	cmp	r3, #2
 800a524:	d107      	bne.n	800a536 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a526:	4b41      	ldr	r3, [pc, #260]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d109      	bne.n	800a546 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e073      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a536:	4b3d      	ldr	r3, [pc, #244]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0302 	and.w	r3, r3, #2
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e06b      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a546:	4b39      	ldr	r3, [pc, #228]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	f023 0203 	bic.w	r2, r3, #3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	4936      	ldr	r1, [pc, #216]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a554:	4313      	orrs	r3, r2
 800a556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a558:	f7fa fdba 	bl	80050d0 <HAL_GetTick>
 800a55c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a55e:	e00a      	b.n	800a576 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a560:	f7fa fdb6 	bl	80050d0 <HAL_GetTick>
 800a564:	4602      	mov	r2, r0
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a56e:	4293      	cmp	r3, r2
 800a570:	d901      	bls.n	800a576 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e053      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a576:	4b2d      	ldr	r3, [pc, #180]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f003 020c 	and.w	r2, r3, #12
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	429a      	cmp	r2, r3
 800a586:	d1eb      	bne.n	800a560 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a588:	4b27      	ldr	r3, [pc, #156]	@ (800a628 <HAL_RCC_ClockConfig+0x1c4>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 030f 	and.w	r3, r3, #15
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	429a      	cmp	r2, r3
 800a594:	d210      	bcs.n	800a5b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a596:	4b24      	ldr	r3, [pc, #144]	@ (800a628 <HAL_RCC_ClockConfig+0x1c4>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f023 020f 	bic.w	r2, r3, #15
 800a59e:	4922      	ldr	r1, [pc, #136]	@ (800a628 <HAL_RCC_ClockConfig+0x1c4>)
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5a6:	4b20      	ldr	r3, [pc, #128]	@ (800a628 <HAL_RCC_ClockConfig+0x1c4>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 030f 	and.w	r3, r3, #15
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d001      	beq.n	800a5b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e032      	b.n	800a61e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d008      	beq.n	800a5d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5c4:	4b19      	ldr	r3, [pc, #100]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	4916      	ldr	r1, [pc, #88]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0308 	and.w	r3, r3, #8
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d009      	beq.n	800a5f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a5e2:	4b12      	ldr	r3, [pc, #72]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	00db      	lsls	r3, r3, #3
 800a5f0:	490e      	ldr	r1, [pc, #56]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a5f6:	f000 f821 	bl	800a63c <HAL_RCC_GetSysClockFreq>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a62c <HAL_RCC_ClockConfig+0x1c8>)
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	091b      	lsrs	r3, r3, #4
 800a602:	f003 030f 	and.w	r3, r3, #15
 800a606:	490a      	ldr	r1, [pc, #40]	@ (800a630 <HAL_RCC_ClockConfig+0x1cc>)
 800a608:	5ccb      	ldrb	r3, [r1, r3]
 800a60a:	fa22 f303 	lsr.w	r3, r2, r3
 800a60e:	4a09      	ldr	r2, [pc, #36]	@ (800a634 <HAL_RCC_ClockConfig+0x1d0>)
 800a610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a612:	4b09      	ldr	r3, [pc, #36]	@ (800a638 <HAL_RCC_ClockConfig+0x1d4>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4618      	mov	r0, r3
 800a618:	f7f9 fe38 	bl	800428c <HAL_InitTick>

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	40023c00 	.word	0x40023c00
 800a62c:	40023800 	.word	0x40023800
 800a630:	0801c6a4 	.word	0x0801c6a4
 800a634:	20000018 	.word	0x20000018
 800a638:	20000064 	.word	0x20000064

0800a63c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a63c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a640:	b090      	sub	sp, #64	@ 0x40
 800a642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	637b      	str	r3, [r7, #52]	@ 0x34
 800a648:	2300      	movs	r3, #0
 800a64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a64c:	2300      	movs	r3, #0
 800a64e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800a650:	2300      	movs	r3, #0
 800a652:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a654:	4b59      	ldr	r3, [pc, #356]	@ (800a7bc <HAL_RCC_GetSysClockFreq+0x180>)
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f003 030c 	and.w	r3, r3, #12
 800a65c:	2b08      	cmp	r3, #8
 800a65e:	d00d      	beq.n	800a67c <HAL_RCC_GetSysClockFreq+0x40>
 800a660:	2b08      	cmp	r3, #8
 800a662:	f200 80a1 	bhi.w	800a7a8 <HAL_RCC_GetSysClockFreq+0x16c>
 800a666:	2b00      	cmp	r3, #0
 800a668:	d002      	beq.n	800a670 <HAL_RCC_GetSysClockFreq+0x34>
 800a66a:	2b04      	cmp	r3, #4
 800a66c:	d003      	beq.n	800a676 <HAL_RCC_GetSysClockFreq+0x3a>
 800a66e:	e09b      	b.n	800a7a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a670:	4b53      	ldr	r3, [pc, #332]	@ (800a7c0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a672:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a674:	e09b      	b.n	800a7ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a676:	4b53      	ldr	r3, [pc, #332]	@ (800a7c4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a678:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a67a:	e098      	b.n	800a7ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a67c:	4b4f      	ldr	r3, [pc, #316]	@ (800a7bc <HAL_RCC_GetSysClockFreq+0x180>)
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a684:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a686:	4b4d      	ldr	r3, [pc, #308]	@ (800a7bc <HAL_RCC_GetSysClockFreq+0x180>)
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d028      	beq.n	800a6e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a692:	4b4a      	ldr	r3, [pc, #296]	@ (800a7bc <HAL_RCC_GetSysClockFreq+0x180>)
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	099b      	lsrs	r3, r3, #6
 800a698:	2200      	movs	r2, #0
 800a69a:	623b      	str	r3, [r7, #32]
 800a69c:	627a      	str	r2, [r7, #36]	@ 0x24
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4b47      	ldr	r3, [pc, #284]	@ (800a7c4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a6a8:	fb03 f201 	mul.w	r2, r3, r1
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	fb00 f303 	mul.w	r3, r0, r3
 800a6b2:	4413      	add	r3, r2
 800a6b4:	4a43      	ldr	r2, [pc, #268]	@ (800a7c4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a6b6:	fba0 1202 	umull	r1, r2, r0, r2
 800a6ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6bc:	460a      	mov	r2, r1
 800a6be:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a6c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6c2:	4413      	add	r3, r2
 800a6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	61bb      	str	r3, [r7, #24]
 800a6cc:	61fa      	str	r2, [r7, #28]
 800a6ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a6d6:	f7f5 fe03 	bl	80002e0 <__aeabi_uldivmod>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4613      	mov	r3, r2
 800a6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6e2:	e053      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6e4:	4b35      	ldr	r3, [pc, #212]	@ (800a7bc <HAL_RCC_GetSysClockFreq+0x180>)
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	099b      	lsrs	r3, r3, #6
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	613b      	str	r3, [r7, #16]
 800a6ee:	617a      	str	r2, [r7, #20]
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a6f6:	f04f 0b00 	mov.w	fp, #0
 800a6fa:	4652      	mov	r2, sl
 800a6fc:	465b      	mov	r3, fp
 800a6fe:	f04f 0000 	mov.w	r0, #0
 800a702:	f04f 0100 	mov.w	r1, #0
 800a706:	0159      	lsls	r1, r3, #5
 800a708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a70c:	0150      	lsls	r0, r2, #5
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	ebb2 080a 	subs.w	r8, r2, sl
 800a716:	eb63 090b 	sbc.w	r9, r3, fp
 800a71a:	f04f 0200 	mov.w	r2, #0
 800a71e:	f04f 0300 	mov.w	r3, #0
 800a722:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a726:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a72a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a72e:	ebb2 0408 	subs.w	r4, r2, r8
 800a732:	eb63 0509 	sbc.w	r5, r3, r9
 800a736:	f04f 0200 	mov.w	r2, #0
 800a73a:	f04f 0300 	mov.w	r3, #0
 800a73e:	00eb      	lsls	r3, r5, #3
 800a740:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a744:	00e2      	lsls	r2, r4, #3
 800a746:	4614      	mov	r4, r2
 800a748:	461d      	mov	r5, r3
 800a74a:	eb14 030a 	adds.w	r3, r4, sl
 800a74e:	603b      	str	r3, [r7, #0]
 800a750:	eb45 030b 	adc.w	r3, r5, fp
 800a754:	607b      	str	r3, [r7, #4]
 800a756:	f04f 0200 	mov.w	r2, #0
 800a75a:	f04f 0300 	mov.w	r3, #0
 800a75e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a762:	4629      	mov	r1, r5
 800a764:	028b      	lsls	r3, r1, #10
 800a766:	4621      	mov	r1, r4
 800a768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a76c:	4621      	mov	r1, r4
 800a76e:	028a      	lsls	r2, r1, #10
 800a770:	4610      	mov	r0, r2
 800a772:	4619      	mov	r1, r3
 800a774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a776:	2200      	movs	r2, #0
 800a778:	60bb      	str	r3, [r7, #8]
 800a77a:	60fa      	str	r2, [r7, #12]
 800a77c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a780:	f7f5 fdae 	bl	80002e0 <__aeabi_uldivmod>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4613      	mov	r3, r2
 800a78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a78c:	4b0b      	ldr	r3, [pc, #44]	@ (800a7bc <HAL_RCC_GetSysClockFreq+0x180>)
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	0c1b      	lsrs	r3, r3, #16
 800a792:	f003 0303 	and.w	r3, r3, #3
 800a796:	3301      	adds	r3, #1
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a79c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a7a6:	e002      	b.n	800a7ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a7a8:	4b05      	ldr	r3, [pc, #20]	@ (800a7c0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a7aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a7ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3740      	adds	r7, #64	@ 0x40
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7ba:	bf00      	nop
 800a7bc:	40023800 	.word	0x40023800
 800a7c0:	00f42400 	.word	0x00f42400
 800a7c4:	017d7840 	.word	0x017d7840

0800a7c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7cc:	4b03      	ldr	r3, [pc, #12]	@ (800a7dc <HAL_RCC_GetHCLKFreq+0x14>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	20000018 	.word	0x20000018

0800a7e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a7e4:	f7ff fff0 	bl	800a7c8 <HAL_RCC_GetHCLKFreq>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	4b05      	ldr	r3, [pc, #20]	@ (800a800 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	0a9b      	lsrs	r3, r3, #10
 800a7f0:	f003 0307 	and.w	r3, r3, #7
 800a7f4:	4903      	ldr	r1, [pc, #12]	@ (800a804 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7f6:	5ccb      	ldrb	r3, [r1, r3]
 800a7f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	40023800 	.word	0x40023800
 800a804:	0801c6b4 	.word	0x0801c6b4

0800a808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a80c:	f7ff ffdc 	bl	800a7c8 <HAL_RCC_GetHCLKFreq>
 800a810:	4602      	mov	r2, r0
 800a812:	4b05      	ldr	r3, [pc, #20]	@ (800a828 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	0b5b      	lsrs	r3, r3, #13
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	4903      	ldr	r1, [pc, #12]	@ (800a82c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a81e:	5ccb      	ldrb	r3, [r1, r3]
 800a820:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a824:	4618      	mov	r0, r3
 800a826:	bd80      	pop	{r7, pc}
 800a828:	40023800 	.word	0x40023800
 800a82c:	0801c6b4 	.word	0x0801c6b4

0800a830 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	220f      	movs	r2, #15
 800a83e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a840:	4b12      	ldr	r3, [pc, #72]	@ (800a88c <HAL_RCC_GetClockConfig+0x5c>)
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	f003 0203 	and.w	r2, r3, #3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a84c:	4b0f      	ldr	r3, [pc, #60]	@ (800a88c <HAL_RCC_GetClockConfig+0x5c>)
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a858:	4b0c      	ldr	r3, [pc, #48]	@ (800a88c <HAL_RCC_GetClockConfig+0x5c>)
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a864:	4b09      	ldr	r3, [pc, #36]	@ (800a88c <HAL_RCC_GetClockConfig+0x5c>)
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	08db      	lsrs	r3, r3, #3
 800a86a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a872:	4b07      	ldr	r3, [pc, #28]	@ (800a890 <HAL_RCC_GetClockConfig+0x60>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 020f 	and.w	r2, r3, #15
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	601a      	str	r2, [r3, #0]
}
 800a87e:	bf00      	nop
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	40023800 	.word	0x40023800
 800a890:	40023c00 	.word	0x40023c00

0800a894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d012      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a8bc:	4b69      	ldr	r3, [pc, #420]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	4a68      	ldr	r2, [pc, #416]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8c2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a8c6:	6093      	str	r3, [r2, #8]
 800a8c8:	4b66      	ldr	r3, [pc, #408]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8ca:	689a      	ldr	r2, [r3, #8]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8d0:	4964      	ldr	r1, [pc, #400]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d017      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8ee:	4b5d      	ldr	r3, [pc, #372]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8fc:	4959      	ldr	r1, [pc, #356]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a90c:	d101      	bne.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a90e:	2301      	movs	r3, #1
 800a910:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a91a:	2301      	movs	r3, #1
 800a91c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a926:	2b00      	cmp	r3, #0
 800a928:	d017      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a92a:	4b4e      	ldr	r3, [pc, #312]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a92c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a930:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a938:	494a      	ldr	r1, [pc, #296]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a93a:	4313      	orrs	r3, r2
 800a93c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a948:	d101      	bne.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a94a:	2301      	movs	r3, #1
 800a94c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a956:	2301      	movs	r3, #1
 800a958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d001      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a966:	2301      	movs	r3, #1
 800a968:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 0320 	and.w	r3, r3, #32
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 808b 	beq.w	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a978:	4b3a      	ldr	r3, [pc, #232]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a97a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a97c:	4a39      	ldr	r2, [pc, #228]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a97e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a982:	6413      	str	r3, [r2, #64]	@ 0x40
 800a984:	4b37      	ldr	r3, [pc, #220]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a98c:	60bb      	str	r3, [r7, #8]
 800a98e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a990:	4b35      	ldr	r3, [pc, #212]	@ (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a34      	ldr	r2, [pc, #208]	@ (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a99a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a99c:	f7fa fb98 	bl	80050d0 <HAL_GetTick>
 800a9a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a9a2:	e008      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9a4:	f7fa fb94 	bl	80050d0 <HAL_GetTick>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	2b64      	cmp	r3, #100	@ 0x64
 800a9b0:	d901      	bls.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e357      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a9b6:	4b2c      	ldr	r3, [pc, #176]	@ (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0f0      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a9c2:	4b28      	ldr	r3, [pc, #160]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d035      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d02e      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a9e0:	4b20      	ldr	r3, [pc, #128]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a9ea:	4b1e      	ldr	r3, [pc, #120]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9ee:	4a1d      	ldr	r2, [pc, #116]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9f4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a9f6:	4b1b      	ldr	r3, [pc, #108]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9fa:	4a1a      	ldr	r2, [pc, #104]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa00:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800aa02:	4a18      	ldr	r2, [pc, #96]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800aa08:	4b16      	ldr	r3, [pc, #88]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa0c:	f003 0301 	and.w	r3, r3, #1
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d114      	bne.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa14:	f7fa fb5c 	bl	80050d0 <HAL_GetTick>
 800aa18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa1a:	e00a      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa1c:	f7fa fb58 	bl	80050d0 <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d901      	bls.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e319      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa32:	4b0c      	ldr	r3, [pc, #48]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d0ee      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa4a:	d111      	bne.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800aa4c:	4b05      	ldr	r3, [pc, #20]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800aa58:	4b04      	ldr	r3, [pc, #16]	@ (800aa6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800aa5a:	400b      	ands	r3, r1
 800aa5c:	4901      	ldr	r1, [pc, #4]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	608b      	str	r3, [r1, #8]
 800aa62:	e00b      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800aa64:	40023800 	.word	0x40023800
 800aa68:	40007000 	.word	0x40007000
 800aa6c:	0ffffcff 	.word	0x0ffffcff
 800aa70:	4baa      	ldr	r3, [pc, #680]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	4aa9      	ldr	r2, [pc, #676]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa76:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800aa7a:	6093      	str	r3, [r2, #8]
 800aa7c:	4ba7      	ldr	r3, [pc, #668]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa88:	49a4      	ldr	r1, [pc, #656]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 0310 	and.w	r3, r3, #16
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d010      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa9a:	4ba0      	ldr	r3, [pc, #640]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaa0:	4a9e      	ldr	r2, [pc, #632]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aaa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aaa6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800aaaa:	4b9c      	ldr	r3, [pc, #624]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aaac:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab4:	4999      	ldr	r1, [pc, #612]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aab6:	4313      	orrs	r3, r2
 800aab8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00a      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aac8:	4b94      	ldr	r3, [pc, #592]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aaca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aace:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aad6:	4991      	ldr	r1, [pc, #580]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aad8:	4313      	orrs	r3, r2
 800aada:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aaea:	4b8c      	ldr	r3, [pc, #560]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aaec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aaf8:	4988      	ldr	r1, [pc, #544]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aafa:	4313      	orrs	r3, r2
 800aafc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00a      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ab0c:	4b83      	ldr	r3, [pc, #524]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab1a:	4980      	ldr	r1, [pc, #512]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00a      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab2e:	4b7b      	ldr	r3, [pc, #492]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab34:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab3c:	4977      	ldr	r1, [pc, #476]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00a      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ab50:	4b72      	ldr	r3, [pc, #456]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab56:	f023 0203 	bic.w	r2, r3, #3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab5e:	496f      	ldr	r1, [pc, #444]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00a      	beq.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ab72:	4b6a      	ldr	r3, [pc, #424]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab78:	f023 020c 	bic.w	r2, r3, #12
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab80:	4966      	ldr	r1, [pc, #408]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab82:	4313      	orrs	r3, r2
 800ab84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00a      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ab94:	4b61      	ldr	r3, [pc, #388]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab9a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aba2:	495e      	ldr	r1, [pc, #376]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aba4:	4313      	orrs	r3, r2
 800aba6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00a      	beq.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800abb6:	4b59      	ldr	r3, [pc, #356]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abbc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abc4:	4955      	ldr	r1, [pc, #340]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00a      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800abd8:	4b50      	ldr	r3, [pc, #320]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abde:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abe6:	494d      	ldr	r1, [pc, #308]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abe8:	4313      	orrs	r3, r2
 800abea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00a      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800abfa:	4b48      	ldr	r3, [pc, #288]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac00:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac08:	4944      	ldr	r1, [pc, #272]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00a      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ac1c:	4b3f      	ldr	r3, [pc, #252]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac22:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac2a:	493c      	ldr	r1, [pc, #240]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00a      	beq.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ac3e:	4b37      	ldr	r3, [pc, #220]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac4c:	4933      	ldr	r1, [pc, #204]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00a      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac60:	4b2e      	ldr	r3, [pc, #184]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac66:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac6e:	492b      	ldr	r1, [pc, #172]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac70:	4313      	orrs	r3, r2
 800ac72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d011      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ac82:	4b26      	ldr	r3, [pc, #152]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac88:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac90:	4922      	ldr	r1, [pc, #136]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac92:	4313      	orrs	r3, r2
 800ac94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aca0:	d101      	bne.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800aca2:	2301      	movs	r3, #1
 800aca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 0308 	and.w	r3, r3, #8
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d001      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800acb2:	2301      	movs	r3, #1
 800acb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00a      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800acc2:	4b16      	ldr	r3, [pc, #88]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acc8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acd0:	4912      	ldr	r1, [pc, #72]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acd2:	4313      	orrs	r3, r2
 800acd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00b      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ace4:	4b0d      	ldr	r3, [pc, #52]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ace6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acf4:	4909      	ldr	r1, [pc, #36]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d006      	beq.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f000 80d9 	beq.w	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ad10:	4b02      	ldr	r3, [pc, #8]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a01      	ldr	r2, [pc, #4]	@ (800ad1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad1a:	e001      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800ad1c:	40023800 	.word	0x40023800
 800ad20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad22:	f7fa f9d5 	bl	80050d0 <HAL_GetTick>
 800ad26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad28:	e008      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ad2a:	f7fa f9d1 	bl	80050d0 <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	2b64      	cmp	r3, #100	@ 0x64
 800ad36:	d901      	bls.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e194      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad3c:	4b6c      	ldr	r3, [pc, #432]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1f0      	bne.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d021      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d11d      	bne.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ad5c:	4b64      	ldr	r3, [pc, #400]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad62:	0c1b      	lsrs	r3, r3, #16
 800ad64:	f003 0303 	and.w	r3, r3, #3
 800ad68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ad6a:	4b61      	ldr	r3, [pc, #388]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad70:	0e1b      	lsrs	r3, r3, #24
 800ad72:	f003 030f 	and.w	r3, r3, #15
 800ad76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	019a      	lsls	r2, r3, #6
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	041b      	lsls	r3, r3, #16
 800ad82:	431a      	orrs	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	061b      	lsls	r3, r3, #24
 800ad88:	431a      	orrs	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	071b      	lsls	r3, r3, #28
 800ad90:	4957      	ldr	r1, [pc, #348]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad92:	4313      	orrs	r3, r2
 800ad94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d004      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ada8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800adac:	d00a      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d02e      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800adc2:	d129      	bne.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800adc4:	4b4a      	ldr	r3, [pc, #296]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adca:	0c1b      	lsrs	r3, r3, #16
 800adcc:	f003 0303 	and.w	r3, r3, #3
 800add0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800add2:	4b47      	ldr	r3, [pc, #284]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800add4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800add8:	0f1b      	lsrs	r3, r3, #28
 800adda:	f003 0307 	and.w	r3, r3, #7
 800adde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	019a      	lsls	r2, r3, #6
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	041b      	lsls	r3, r3, #16
 800adea:	431a      	orrs	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	061b      	lsls	r3, r3, #24
 800adf2:	431a      	orrs	r2, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	071b      	lsls	r3, r3, #28
 800adf8:	493d      	ldr	r1, [pc, #244]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adfa:	4313      	orrs	r3, r2
 800adfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ae00:	4b3b      	ldr	r3, [pc, #236]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae06:	f023 021f 	bic.w	r2, r3, #31
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	4937      	ldr	r1, [pc, #220]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae12:	4313      	orrs	r3, r2
 800ae14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d01d      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ae24:	4b32      	ldr	r3, [pc, #200]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae2a:	0e1b      	lsrs	r3, r3, #24
 800ae2c:	f003 030f 	and.w	r3, r3, #15
 800ae30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ae32:	4b2f      	ldr	r3, [pc, #188]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae38:	0f1b      	lsrs	r3, r3, #28
 800ae3a:	f003 0307 	and.w	r3, r3, #7
 800ae3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	019a      	lsls	r2, r3, #6
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	041b      	lsls	r3, r3, #16
 800ae4c:	431a      	orrs	r2, r3
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	061b      	lsls	r3, r3, #24
 800ae52:	431a      	orrs	r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	071b      	lsls	r3, r3, #28
 800ae58:	4925      	ldr	r1, [pc, #148]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d011      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	019a      	lsls	r2, r3, #6
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	041b      	lsls	r3, r3, #16
 800ae78:	431a      	orrs	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	061b      	lsls	r3, r3, #24
 800ae80:	431a      	orrs	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	071b      	lsls	r3, r3, #28
 800ae88:	4919      	ldr	r1, [pc, #100]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ae90:	4b17      	ldr	r3, [pc, #92]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a16      	ldr	r2, [pc, #88]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae9c:	f7fa f918 	bl	80050d0 <HAL_GetTick>
 800aea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aea2:	e008      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800aea4:	f7fa f914 	bl	80050d0 <HAL_GetTick>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	2b64      	cmp	r3, #100	@ 0x64
 800aeb0:	d901      	bls.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e0d7      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aeb6:	4b0e      	ldr	r3, [pc, #56]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0f0      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	f040 80cd 	bne.w	800b064 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800aeca:	4b09      	ldr	r3, [pc, #36]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a08      	ldr	r2, [pc, #32]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aed6:	f7fa f8fb 	bl	80050d0 <HAL_GetTick>
 800aeda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aedc:	e00a      	b.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800aede:	f7fa f8f7 	bl	80050d0 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	2b64      	cmp	r3, #100	@ 0x64
 800aeea:	d903      	bls.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aeec:	2303      	movs	r3, #3
 800aeee:	e0ba      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800aef0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aef4:	4b5e      	ldr	r3, [pc, #376]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aefc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af00:	d0ed      	beq.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d003      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af12:	2b00      	cmp	r3, #0
 800af14:	d009      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d02e      	beq.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af26:	2b00      	cmp	r3, #0
 800af28:	d12a      	bne.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800af2a:	4b51      	ldr	r3, [pc, #324]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af30:	0c1b      	lsrs	r3, r3, #16
 800af32:	f003 0303 	and.w	r3, r3, #3
 800af36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800af38:	4b4d      	ldr	r3, [pc, #308]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af3e:	0f1b      	lsrs	r3, r3, #28
 800af40:	f003 0307 	and.w	r3, r3, #7
 800af44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	019a      	lsls	r2, r3, #6
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	041b      	lsls	r3, r3, #16
 800af50:	431a      	orrs	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	061b      	lsls	r3, r3, #24
 800af58:	431a      	orrs	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	071b      	lsls	r3, r3, #28
 800af5e:	4944      	ldr	r1, [pc, #272]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af60:	4313      	orrs	r3, r2
 800af62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800af66:	4b42      	ldr	r3, [pc, #264]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af6c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af74:	3b01      	subs	r3, #1
 800af76:	021b      	lsls	r3, r3, #8
 800af78:	493d      	ldr	r1, [pc, #244]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af7a:	4313      	orrs	r3, r2
 800af7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d022      	beq.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af94:	d11d      	bne.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800af96:	4b36      	ldr	r3, [pc, #216]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af9c:	0e1b      	lsrs	r3, r3, #24
 800af9e:	f003 030f 	and.w	r3, r3, #15
 800afa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800afa4:	4b32      	ldr	r3, [pc, #200]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afaa:	0f1b      	lsrs	r3, r3, #28
 800afac:	f003 0307 	and.w	r3, r3, #7
 800afb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	019a      	lsls	r2, r3, #6
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a1b      	ldr	r3, [r3, #32]
 800afbc:	041b      	lsls	r3, r3, #16
 800afbe:	431a      	orrs	r2, r3
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	061b      	lsls	r3, r3, #24
 800afc4:	431a      	orrs	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	071b      	lsls	r3, r3, #28
 800afca:	4929      	ldr	r1, [pc, #164]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afcc:	4313      	orrs	r3, r2
 800afce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 0308 	and.w	r3, r3, #8
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d028      	beq.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800afde:	4b24      	ldr	r3, [pc, #144]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afe4:	0e1b      	lsrs	r3, r3, #24
 800afe6:	f003 030f 	and.w	r3, r3, #15
 800afea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800afec:	4b20      	ldr	r3, [pc, #128]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	f003 0303 	and.w	r3, r3, #3
 800aff8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	019a      	lsls	r2, r3, #6
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	041b      	lsls	r3, r3, #16
 800b004:	431a      	orrs	r2, r3
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	061b      	lsls	r3, r3, #24
 800b00a:	431a      	orrs	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	69db      	ldr	r3, [r3, #28]
 800b010:	071b      	lsls	r3, r3, #28
 800b012:	4917      	ldr	r1, [pc, #92]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b014:	4313      	orrs	r3, r2
 800b016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b01a:	4b15      	ldr	r3, [pc, #84]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b01c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b020:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b028:	4911      	ldr	r1, [pc, #68]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b030:	4b0f      	ldr	r3, [pc, #60]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a0e      	ldr	r2, [pc, #56]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b03a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b03c:	f7fa f848 	bl	80050d0 <HAL_GetTick>
 800b040:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b042:	e008      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b044:	f7fa f844 	bl	80050d0 <HAL_GetTick>
 800b048:	4602      	mov	r2, r0
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	2b64      	cmp	r3, #100	@ 0x64
 800b050:	d901      	bls.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b052:	2303      	movs	r3, #3
 800b054:	e007      	b.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b056:	4b06      	ldr	r3, [pc, #24]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b05e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b062:	d1ef      	bne.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3720      	adds	r7, #32
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	40023800 	.word	0x40023800

0800b074 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b074:	b480      	push	{r7}
 800b076:	b087      	sub	sp, #28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b07c:	2300      	movs	r3, #0
 800b07e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b080:	2300      	movs	r3, #0
 800b082:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b092:	f040 808d 	bne.w	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b096:	4b93      	ldr	r3, [pc, #588]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b09c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b0a4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b0ac:	d07c      	beq.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b0b4:	d87b      	bhi.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d004      	beq.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0c2:	d039      	beq.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b0c4:	e073      	b.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b0c6:	4b87      	ldr	r3, [pc, #540]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d108      	bne.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b0d2:	4b84      	ldr	r3, [pc, #528]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0da:	4a83      	ldr	r2, [pc, #524]	@ (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e0:	613b      	str	r3, [r7, #16]
 800b0e2:	e007      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b0e4:	4b7f      	ldr	r3, [pc, #508]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0ec:	4a7f      	ldr	r2, [pc, #508]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0f2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b0f4:	4b7b      	ldr	r3, [pc, #492]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0fa:	0e1b      	lsrs	r3, r3, #24
 800b0fc:	f003 030f 	and.w	r3, r3, #15
 800b100:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b102:	4b78      	ldr	r3, [pc, #480]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b108:	099b      	lsrs	r3, r3, #6
 800b10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	fb03 f202 	mul.w	r2, r3, r2
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	fbb2 f3f3 	udiv	r3, r2, r3
 800b11a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b11c:	4b71      	ldr	r3, [pc, #452]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b11e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b122:	0a1b      	lsrs	r3, r3, #8
 800b124:	f003 031f 	and.w	r3, r3, #31
 800b128:	3301      	adds	r3, #1
 800b12a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b12c:	697a      	ldr	r2, [r7, #20]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	fbb2 f3f3 	udiv	r3, r2, r3
 800b134:	617b      	str	r3, [r7, #20]
        break;
 800b136:	e03b      	b.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b138:	4b6a      	ldr	r3, [pc, #424]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d108      	bne.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b144:	4b67      	ldr	r3, [pc, #412]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b14c:	4a66      	ldr	r2, [pc, #408]	@ (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b152:	613b      	str	r3, [r7, #16]
 800b154:	e007      	b.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b156:	4b63      	ldr	r3, [pc, #396]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b15e:	4a63      	ldr	r2, [pc, #396]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b160:	fbb2 f3f3 	udiv	r3, r2, r3
 800b164:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b166:	4b5f      	ldr	r3, [pc, #380]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b16c:	0e1b      	lsrs	r3, r3, #24
 800b16e:	f003 030f 	and.w	r3, r3, #15
 800b172:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b174:	4b5b      	ldr	r3, [pc, #364]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b17a:	099b      	lsrs	r3, r3, #6
 800b17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	fb03 f202 	mul.w	r2, r3, r2
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	fbb2 f3f3 	udiv	r3, r2, r3
 800b18c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b18e:	4b55      	ldr	r3, [pc, #340]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b194:	f003 031f 	and.w	r3, r3, #31
 800b198:	3301      	adds	r3, #1
 800b19a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1a4:	617b      	str	r3, [r7, #20]
        break;
 800b1a6:	e003      	b.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1a8:	4b51      	ldr	r3, [pc, #324]	@ (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b1aa:	617b      	str	r3, [r7, #20]
        break;
 800b1ac:	e000      	b.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b1ae:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1b6:	f040 808d 	bne.w	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b1ba:	4b4a      	ldr	r3, [pc, #296]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1c0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b1c8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1d0:	d07c      	beq.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1d8:	d87b      	bhi.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d004      	beq.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1e6:	d039      	beq.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b1e8:	e073      	b.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b1ea:	4b3e      	ldr	r3, [pc, #248]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d108      	bne.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b1f6:	4b3b      	ldr	r3, [pc, #236]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1fe:	4a3a      	ldr	r2, [pc, #232]	@ (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b200:	fbb2 f3f3 	udiv	r3, r2, r3
 800b204:	613b      	str	r3, [r7, #16]
 800b206:	e007      	b.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b208:	4b36      	ldr	r3, [pc, #216]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b210:	4a36      	ldr	r2, [pc, #216]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b212:	fbb2 f3f3 	udiv	r3, r2, r3
 800b216:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b218:	4b32      	ldr	r3, [pc, #200]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b21e:	0e1b      	lsrs	r3, r3, #24
 800b220:	f003 030f 	and.w	r3, r3, #15
 800b224:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b226:	4b2f      	ldr	r3, [pc, #188]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b22c:	099b      	lsrs	r3, r3, #6
 800b22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	fb03 f202 	mul.w	r2, r3, r2
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b23e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b240:	4b28      	ldr	r3, [pc, #160]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b242:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b246:	0a1b      	lsrs	r3, r3, #8
 800b248:	f003 031f 	and.w	r3, r3, #31
 800b24c:	3301      	adds	r3, #1
 800b24e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	fbb2 f3f3 	udiv	r3, r2, r3
 800b258:	617b      	str	r3, [r7, #20]
        break;
 800b25a:	e03b      	b.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b25c:	4b21      	ldr	r3, [pc, #132]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d108      	bne.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b268:	4b1e      	ldr	r3, [pc, #120]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b270:	4a1d      	ldr	r2, [pc, #116]	@ (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b272:	fbb2 f3f3 	udiv	r3, r2, r3
 800b276:	613b      	str	r3, [r7, #16]
 800b278:	e007      	b.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b27a:	4b1a      	ldr	r3, [pc, #104]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b282:	4a1a      	ldr	r2, [pc, #104]	@ (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b284:	fbb2 f3f3 	udiv	r3, r2, r3
 800b288:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b28a:	4b16      	ldr	r3, [pc, #88]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b28c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b290:	0e1b      	lsrs	r3, r3, #24
 800b292:	f003 030f 	and.w	r3, r3, #15
 800b296:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b298:	4b12      	ldr	r3, [pc, #72]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b29e:	099b      	lsrs	r3, r3, #6
 800b2a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	fb03 f202 	mul.w	r2, r3, r2
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b2b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b2b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2b8:	f003 031f 	and.w	r3, r3, #31
 800b2bc:	3301      	adds	r3, #1
 800b2be:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b2c0:	697a      	ldr	r2, [r7, #20]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2c8:	617b      	str	r3, [r7, #20]
        break;
 800b2ca:	e003      	b.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2cc:	4b08      	ldr	r3, [pc, #32]	@ (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b2ce:	617b      	str	r3, [r7, #20]
        break;
 800b2d0:	e000      	b.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800b2d2:	bf00      	nop
      }
    }
  }

  return frequency;
 800b2d4:	697b      	ldr	r3, [r7, #20]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	371c      	adds	r7, #28
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	40023800 	.word	0x40023800
 800b2e8:	00f42400 	.word	0x00f42400
 800b2ec:	017d7840 	.word	0x017d7840
 800b2f0:	00bb8000 	.word	0x00bb8000

0800b2f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d101      	bne.n	800b306 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b302:	2301      	movs	r3, #1
 800b304:	e071      	b.n	800b3ea <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	7f5b      	ldrb	r3, [r3, #29]
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d105      	bne.n	800b31c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7f8 fb3a 	bl	8003990 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2202      	movs	r2, #2
 800b320:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f003 0310 	and.w	r3, r3, #16
 800b32c:	2b10      	cmp	r3, #16
 800b32e:	d053      	beq.n	800b3d8 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	22ca      	movs	r2, #202	@ 0xca
 800b336:	625a      	str	r2, [r3, #36]	@ 0x24
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2253      	movs	r2, #83	@ 0x53
 800b33e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fb75 	bl	800ba30 <RTC_EnterInitMode>
 800b346:	4603      	mov	r3, r0
 800b348:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d12a      	bne.n	800b3a6 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	6899      	ldr	r1, [r3, #8]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	4b26      	ldr	r3, [pc, #152]	@ (800b3f4 <HAL_RTC_Init+0x100>)
 800b35c:	400b      	ands	r3, r1
 800b35e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	6899      	ldr	r1, [r3, #8]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	431a      	orrs	r2, r3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	431a      	orrs	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	430a      	orrs	r2, r1
 800b37c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	68d2      	ldr	r2, [r2, #12]
 800b386:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	6919      	ldr	r1, [r3, #16]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	041a      	lsls	r2, r3, #16
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	430a      	orrs	r2, r1
 800b39a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 fb7e 	bl	800ba9e <RTC_ExitInitMode>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d110      	bne.n	800b3ce <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f022 0208 	bic.w	r2, r2, #8
 800b3ba:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	699a      	ldr	r2, [r3, #24]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	22ff      	movs	r2, #255	@ 0xff
 800b3d4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b3d6:	e001      	b.n	800b3dc <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d102      	bne.n	800b3e8 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	ff8fffbf 	.word	0xff8fffbf

0800b3f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b3f8:	b590      	push	{r4, r7, lr}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b404:	2300      	movs	r3, #0
 800b406:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	7f1b      	ldrb	r3, [r3, #28]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d101      	bne.n	800b414 <HAL_RTC_SetTime+0x1c>
 800b410:	2302      	movs	r3, #2
 800b412:	e085      	b.n	800b520 <HAL_RTC_SetTime+0x128>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2201      	movs	r2, #1
 800b418:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2202      	movs	r2, #2
 800b41e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d126      	bne.n	800b474 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b430:	2b00      	cmp	r3, #0
 800b432:	d102      	bne.n	800b43a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	2200      	movs	r2, #0
 800b438:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	4618      	mov	r0, r3
 800b440:	f000 fb52 	bl	800bae8 <RTC_ByteToBcd2>
 800b444:	4603      	mov	r3, r0
 800b446:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	785b      	ldrb	r3, [r3, #1]
 800b44c:	4618      	mov	r0, r3
 800b44e:	f000 fb4b 	bl	800bae8 <RTC_ByteToBcd2>
 800b452:	4603      	mov	r3, r0
 800b454:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b456:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	789b      	ldrb	r3, [r3, #2]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f000 fb43 	bl	800bae8 <RTC_ByteToBcd2>
 800b462:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b464:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	78db      	ldrb	r3, [r3, #3]
 800b46c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b46e:	4313      	orrs	r3, r2
 800b470:	617b      	str	r3, [r7, #20]
 800b472:	e018      	b.n	800b4a6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d102      	bne.n	800b488 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	2200      	movs	r2, #0
 800b486:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	785b      	ldrb	r3, [r3, #1]
 800b492:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b494:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b496:	68ba      	ldr	r2, [r7, #8]
 800b498:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b49a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	78db      	ldrb	r3, [r3, #3]
 800b4a0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	22ca      	movs	r2, #202	@ 0xca
 800b4ac:	625a      	str	r2, [r3, #36]	@ 0x24
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2253      	movs	r2, #83	@ 0x53
 800b4b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f000 faba 	bl	800ba30 <RTC_EnterInitMode>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b4c0:	7cfb      	ldrb	r3, [r7, #19]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d11e      	bne.n	800b504 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	6979      	ldr	r1, [r7, #20]
 800b4cc:	4b16      	ldr	r3, [pc, #88]	@ (800b528 <HAL_RTC_SetTime+0x130>)
 800b4ce:	400b      	ands	r3, r1
 800b4d0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	689a      	ldr	r2, [r3, #8]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b4e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6899      	ldr	r1, [r3, #8]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	68da      	ldr	r2, [r3, #12]
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	431a      	orrs	r2, r3
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	430a      	orrs	r2, r1
 800b4f8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f000 facf 	bl	800ba9e <RTC_ExitInitMode>
 800b500:	4603      	mov	r3, r0
 800b502:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b504:	7cfb      	ldrb	r3, [r7, #19]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d102      	bne.n	800b510 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2201      	movs	r2, #1
 800b50e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	22ff      	movs	r2, #255	@ 0xff
 800b516:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	771a      	strb	r2, [r3, #28]

  return status;
 800b51e:	7cfb      	ldrb	r3, [r7, #19]
}
 800b520:	4618      	mov	r0, r3
 800b522:	371c      	adds	r7, #28
 800b524:	46bd      	mov	sp, r7
 800b526:	bd90      	pop	{r4, r7, pc}
 800b528:	007f7f7f 	.word	0x007f7f7f

0800b52c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b538:	2300      	movs	r3, #0
 800b53a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	4b22      	ldr	r3, [pc, #136]	@ (800b5e4 <HAL_RTC_GetTime+0xb8>)
 800b55c:	4013      	ands	r3, r2
 800b55e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	0c1b      	lsrs	r3, r3, #16
 800b564:	b2db      	uxtb	r3, r3
 800b566:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b56a:	b2da      	uxtb	r2, r3
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	0a1b      	lsrs	r3, r3, #8
 800b574:	b2db      	uxtb	r3, r3
 800b576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	b2db      	uxtb	r3, r3
 800b584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	0d9b      	lsrs	r3, r3, #22
 800b592:	b2db      	uxtb	r3, r3
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d11a      	bne.n	800b5da <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 fabb 	bl	800bb24 <RTC_Bcd2ToByte>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	785b      	ldrb	r3, [r3, #1]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 fab2 	bl	800bb24 <RTC_Bcd2ToByte>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	789b      	ldrb	r3, [r3, #2]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f000 faa9 	bl	800bb24 <RTC_Bcd2ToByte>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3718      	adds	r7, #24
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	007f7f7f 	.word	0x007f7f7f

0800b5e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b5e8:	b590      	push	{r4, r7, lr}
 800b5ea:	b087      	sub	sp, #28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	7f1b      	ldrb	r3, [r3, #28]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d101      	bne.n	800b604 <HAL_RTC_SetDate+0x1c>
 800b600:	2302      	movs	r3, #2
 800b602:	e06f      	b.n	800b6e4 <HAL_RTC_SetDate+0xfc>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2201      	movs	r2, #1
 800b608:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2202      	movs	r2, #2
 800b60e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10e      	bne.n	800b634 <HAL_RTC_SetDate+0x4c>
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	785b      	ldrb	r3, [r3, #1]
 800b61a:	f003 0310 	and.w	r3, r3, #16
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d008      	beq.n	800b634 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	785b      	ldrb	r3, [r3, #1]
 800b626:	f023 0310 	bic.w	r3, r3, #16
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	330a      	adds	r3, #10
 800b62e:	b2da      	uxtb	r2, r3
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d11c      	bne.n	800b674 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	78db      	ldrb	r3, [r3, #3]
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 fa52 	bl	800bae8 <RTC_ByteToBcd2>
 800b644:	4603      	mov	r3, r0
 800b646:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	785b      	ldrb	r3, [r3, #1]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 fa4b 	bl	800bae8 <RTC_ByteToBcd2>
 800b652:	4603      	mov	r3, r0
 800b654:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b656:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	789b      	ldrb	r3, [r3, #2]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 fa43 	bl	800bae8 <RTC_ByteToBcd2>
 800b662:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b664:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b66e:	4313      	orrs	r3, r2
 800b670:	617b      	str	r3, [r7, #20]
 800b672:	e00e      	b.n	800b692 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	78db      	ldrb	r3, [r3, #3]
 800b678:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	785b      	ldrb	r3, [r3, #1]
 800b67e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b680:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b686:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b68e:	4313      	orrs	r3, r2
 800b690:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	22ca      	movs	r2, #202	@ 0xca
 800b698:	625a      	str	r2, [r3, #36]	@ 0x24
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2253      	movs	r2, #83	@ 0x53
 800b6a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f000 f9c4 	bl	800ba30 <RTC_EnterInitMode>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b6ac:	7cfb      	ldrb	r3, [r7, #19]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10a      	bne.n	800b6c8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	6979      	ldr	r1, [r7, #20]
 800b6b8:	4b0c      	ldr	r3, [pc, #48]	@ (800b6ec <HAL_RTC_SetDate+0x104>)
 800b6ba:	400b      	ands	r3, r1
 800b6bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f000 f9ed 	bl	800ba9e <RTC_ExitInitMode>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b6c8:	7cfb      	ldrb	r3, [r7, #19]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d102      	bne.n	800b6d4 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	22ff      	movs	r2, #255	@ 0xff
 800b6da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	771a      	strb	r2, [r3, #28]

  return status;
 800b6e2:	7cfb      	ldrb	r3, [r7, #19]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	371c      	adds	r7, #28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd90      	pop	{r4, r7, pc}
 800b6ec:	00ffff3f 	.word	0x00ffff3f

0800b6f0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	4b21      	ldr	r3, [pc, #132]	@ (800b78c <HAL_RTC_GetDate+0x9c>)
 800b708:	4013      	ands	r3, r2
 800b70a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	0c1b      	lsrs	r3, r3, #16
 800b710:	b2da      	uxtb	r2, r3
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	0a1b      	lsrs	r3, r3, #8
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	f003 031f 	and.w	r3, r3, #31
 800b720:	b2da      	uxtb	r2, r3
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b72e:	b2da      	uxtb	r2, r3
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	0b5b      	lsrs	r3, r3, #13
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	f003 0307 	and.w	r3, r3, #7
 800b73e:	b2da      	uxtb	r2, r3
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d11a      	bne.n	800b780 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	78db      	ldrb	r3, [r3, #3]
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 f9e8 	bl	800bb24 <RTC_Bcd2ToByte>
 800b754:	4603      	mov	r3, r0
 800b756:	461a      	mov	r2, r3
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	785b      	ldrb	r3, [r3, #1]
 800b760:	4618      	mov	r0, r3
 800b762:	f000 f9df 	bl	800bb24 <RTC_Bcd2ToByte>
 800b766:	4603      	mov	r3, r0
 800b768:	461a      	mov	r2, r3
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	789b      	ldrb	r3, [r3, #2]
 800b772:	4618      	mov	r0, r3
 800b774:	f000 f9d6 	bl	800bb24 <RTC_Bcd2ToByte>
 800b778:	4603      	mov	r3, r0
 800b77a:	461a      	mov	r2, r3
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3718      	adds	r7, #24
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	00ffff3f 	.word	0x00ffff3f

0800b790 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b790:	b590      	push	{r4, r7, lr}
 800b792:	b089      	sub	sp, #36	@ 0x24
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b79c:	2300      	movs	r3, #0
 800b79e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	7f1b      	ldrb	r3, [r3, #28]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d101      	bne.n	800b7b4 <HAL_RTC_SetAlarm+0x24>
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	e113      	b.n	800b9dc <HAL_RTC_SetAlarm+0x24c>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2202      	movs	r2, #2
 800b7be:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d137      	bne.n	800b836 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f000 f982 	bl	800bae8 <RTC_ByteToBcd2>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	785b      	ldrb	r3, [r3, #1]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f000 f97b 	bl	800bae8 <RTC_ByteToBcd2>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b7f6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	789b      	ldrb	r3, [r3, #2]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f000 f973 	bl	800bae8 <RTC_ByteToBcd2>
 800b802:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b804:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	78db      	ldrb	r3, [r3, #3]
 800b80c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b80e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b818:	4618      	mov	r0, r3
 800b81a:	f000 f965 	bl	800bae8 <RTC_ByteToBcd2>
 800b81e:	4603      	mov	r3, r0
 800b820:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b822:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b82a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b830:	4313      	orrs	r3, r2
 800b832:	61fb      	str	r3, [r7, #28]
 800b834:	e023      	b.n	800b87e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b840:	2b00      	cmp	r3, #0
 800b842:	d102      	bne.n	800b84a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2200      	movs	r2, #0
 800b848:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	785b      	ldrb	r3, [r3, #1]
 800b854:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b856:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b85c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	78db      	ldrb	r3, [r3, #3]
 800b862:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b864:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b86c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b86e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b874:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b87a:	4313      	orrs	r3, r2
 800b87c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b886:	4313      	orrs	r3, r2
 800b888:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	22ca      	movs	r2, #202	@ 0xca
 800b890:	625a      	str	r2, [r3, #36]	@ 0x24
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2253      	movs	r2, #83	@ 0x53
 800b898:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b89e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8a2:	d148      	bne.n	800b936 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	689a      	ldr	r2, [r3, #8]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b8b2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	689a      	ldr	r2, [r3, #8]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b8c2:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	b2da      	uxtb	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800b8d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b8d6:	f7f9 fbfb 	bl	80050d0 <HAL_GetTick>
 800b8da:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b8dc:	e013      	b.n	800b906 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b8de:	f7f9 fbf7 	bl	80050d0 <HAL_GetTick>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b8ec:	d90b      	bls.n	800b906 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	22ff      	movs	r2, #255	@ 0xff
 800b8f4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2203      	movs	r2, #3
 800b8fa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2200      	movs	r2, #0
 800b900:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b902:	2303      	movs	r3, #3
 800b904:	e06a      	b.n	800b9dc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	f003 0301 	and.w	r3, r3, #1
 800b910:	2b00      	cmp	r3, #0
 800b912:	d0e4      	beq.n	800b8de <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	69fa      	ldr	r2, [r7, #28]
 800b91a:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	689a      	ldr	r2, [r3, #8]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b932:	609a      	str	r2, [r3, #8]
 800b934:	e047      	b.n	800b9c6 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	689a      	ldr	r2, [r3, #8]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b944:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	689a      	ldr	r2, [r3, #8]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b954:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800b966:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b968:	f7f9 fbb2 	bl	80050d0 <HAL_GetTick>
 800b96c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b96e:	e013      	b.n	800b998 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b970:	f7f9 fbae 	bl	80050d0 <HAL_GetTick>
 800b974:	4602      	mov	r2, r0
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b97e:	d90b      	bls.n	800b998 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	22ff      	movs	r2, #255	@ 0xff
 800b986:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2203      	movs	r2, #3
 800b98c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b994:	2303      	movs	r3, #3
 800b996:	e021      	b.n	800b9dc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	f003 0302 	and.w	r3, r3, #2
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d0e4      	beq.n	800b970 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	69fa      	ldr	r2, [r7, #28]
 800b9ac:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	689a      	ldr	r2, [r3, #8]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b9c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	22ff      	movs	r2, #255	@ 0xff
 800b9cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3724      	adds	r7, #36	@ 0x24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd90      	pop	{r4, r7, pc}

0800b9e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a0d      	ldr	r2, [pc, #52]	@ (800ba2c <HAL_RTC_WaitForSynchro+0x48>)
 800b9f6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b9f8:	f7f9 fb6a 	bl	80050d0 <HAL_GetTick>
 800b9fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b9fe:	e009      	b.n	800ba14 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ba00:	f7f9 fb66 	bl	80050d0 <HAL_GetTick>
 800ba04:	4602      	mov	r2, r0
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba0e:	d901      	bls.n	800ba14 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e007      	b.n	800ba24 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	f003 0320 	and.w	r3, r3, #32
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d0ee      	beq.n	800ba00 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	0001ff5f 	.word	0x0001ff5f

0800ba30 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d122      	bne.n	800ba94 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68da      	ldr	r2, [r3, #12]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ba5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba5e:	f7f9 fb37 	bl	80050d0 <HAL_GetTick>
 800ba62:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ba64:	e00c      	b.n	800ba80 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ba66:	f7f9 fb33 	bl	80050d0 <HAL_GetTick>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba74:	d904      	bls.n	800ba80 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2204      	movs	r2, #4
 800ba7a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d102      	bne.n	800ba94 <RTC_EnterInitMode+0x64>
 800ba8e:	7bfb      	ldrb	r3, [r7, #15]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d1e8      	bne.n	800ba66 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68da      	ldr	r2, [r3, #12]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bab8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	f003 0320 	and.w	r3, r3, #32
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f7ff ff8b 	bl	800b9e4 <HAL_RTC_WaitForSynchro>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d004      	beq.n	800bade <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2204      	movs	r2, #4
 800bad8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bade:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800baf2:	2300      	movs	r3, #0
 800baf4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800baf6:	e005      	b.n	800bb04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	3301      	adds	r3, #1
 800bafc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800bafe:	79fb      	ldrb	r3, [r7, #7]
 800bb00:	3b0a      	subs	r3, #10
 800bb02:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bb04:	79fb      	ldrb	r3, [r7, #7]
 800bb06:	2b09      	cmp	r3, #9
 800bb08:	d8f6      	bhi.n	800baf8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	011b      	lsls	r3, r3, #4
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	79fb      	ldrb	r3, [r7, #7]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	b2db      	uxtb	r3, r3
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800bb32:	79fb      	ldrb	r3, [r7, #7]
 800bb34:	091b      	lsrs	r3, r3, #4
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	461a      	mov	r2, r3
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4413      	add	r3, r2
 800bb40:	005b      	lsls	r3, r3, #1
 800bb42:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	79fb      	ldrb	r3, [r7, #7]
 800bb4a:	f003 030f 	and.w	r3, r3, #15
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	4413      	add	r3, r2
 800bb52:	b2db      	uxtb	r3, r3
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3714      	adds	r7, #20
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b087      	sub	sp, #28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	7f1b      	ldrb	r3, [r3, #28]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d101      	bne.n	800bb7c <HAL_RTCEx_SetTimeStamp+0x1c>
 800bb78:	2302      	movs	r3, #2
 800bb7a:	e050      	b.n	800bc1e <HAL_RTCEx_SetTimeStamp+0xbe>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2202      	movs	r2, #2
 800bb86:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f022 0206 	bic.w	r2, r2, #6
 800bb96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	430a      	orrs	r2, r1
 800bba6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689a      	ldr	r2, [r3, #8]
 800bbae:	4b1f      	ldr	r3, [pc, #124]	@ (800bc2c <HAL_RTCEx_SetTimeStamp+0xcc>)
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	22ca      	movs	r2, #202	@ 0xca
 800bbc2:	625a      	str	r2, [r3, #36]	@ 0x24
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2253      	movs	r2, #83	@ 0x53
 800bbca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	b2da      	uxtb	r2, r3
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800bbe4:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800bbf6:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	689a      	ldr	r2, [r3, #8]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc06:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	22ff      	movs	r2, #255	@ 0xff
 800bc0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2201      	movs	r2, #1
 800bc14:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	fffff7f7 	.word	0xfffff7f7

0800bc30 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d101      	bne.n	800bc4e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e156      	b.n	800befc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7f8 faa8 	bl	80041b8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f95b 	bl	800bf2c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d00c      	beq.n	800bc98 <HAL_SAI_Init+0x68>
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d80d      	bhi.n	800bc9e <HAL_SAI_Init+0x6e>
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d002      	beq.n	800bc8c <HAL_SAI_Init+0x5c>
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d003      	beq.n	800bc92 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800bc8a:	e008      	b.n	800bc9e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	61fb      	str	r3, [r7, #28]
      break;
 800bc90:	e006      	b.n	800bca0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bc92:	2310      	movs	r3, #16
 800bc94:	61fb      	str	r3, [r7, #28]
      break;
 800bc96:	e003      	b.n	800bca0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bc98:	2320      	movs	r3, #32
 800bc9a:	61fb      	str	r3, [r7, #28]
      break;
 800bc9c:	e000      	b.n	800bca0 <HAL_SAI_Init+0x70>
      break;
 800bc9e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	2b03      	cmp	r3, #3
 800bca6:	d81e      	bhi.n	800bce6 <HAL_SAI_Init+0xb6>
 800bca8:	a201      	add	r2, pc, #4	@ (adr r2, 800bcb0 <HAL_SAI_Init+0x80>)
 800bcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcae:	bf00      	nop
 800bcb0:	0800bcc1 	.word	0x0800bcc1
 800bcb4:	0800bcc7 	.word	0x0800bcc7
 800bcb8:	0800bccf 	.word	0x0800bccf
 800bcbc:	0800bcd7 	.word	0x0800bcd7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	617b      	str	r3, [r7, #20]
    }
    break;
 800bcc4:	e010      	b.n	800bce8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bcc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcca:	617b      	str	r3, [r7, #20]
    }
    break;
 800bccc:	e00c      	b.n	800bce8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bcce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bcd2:	617b      	str	r3, [r7, #20]
    }
    break;
 800bcd4:	e008      	b.n	800bce8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bcd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bcda:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	f043 0301 	orr.w	r3, r3, #1
 800bce2:	61fb      	str	r3, [r7, #28]
    }
    break;
 800bce4:	e000      	b.n	800bce8 <HAL_SAI_Init+0xb8>
    default:
      break;
 800bce6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a85      	ldr	r2, [pc, #532]	@ (800bf04 <HAL_SAI_Init+0x2d4>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d004      	beq.n	800bcfc <HAL_SAI_Init+0xcc>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a84      	ldr	r2, [pc, #528]	@ (800bf08 <HAL_SAI_Init+0x2d8>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d103      	bne.n	800bd04 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800bcfc:	4a83      	ldr	r2, [pc, #524]	@ (800bf0c <HAL_SAI_Init+0x2dc>)
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	6013      	str	r3, [r2, #0]
 800bd02:	e002      	b.n	800bd0a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bd04:	4a82      	ldr	r2, [pc, #520]	@ (800bf10 <HAL_SAI_Init+0x2e0>)
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	69db      	ldr	r3, [r3, #28]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d04c      	beq.n	800bdac <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800bd12:	2300      	movs	r3, #0
 800bd14:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a7a      	ldr	r2, [pc, #488]	@ (800bf04 <HAL_SAI_Init+0x2d4>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d004      	beq.n	800bd2a <HAL_SAI_Init+0xfa>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a78      	ldr	r2, [pc, #480]	@ (800bf08 <HAL_SAI_Init+0x2d8>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d104      	bne.n	800bd34 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bd2a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bd2e:	f7ff f9a1 	bl	800b074 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd32:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a76      	ldr	r2, [pc, #472]	@ (800bf14 <HAL_SAI_Init+0x2e4>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d004      	beq.n	800bd48 <HAL_SAI_Init+0x118>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a75      	ldr	r2, [pc, #468]	@ (800bf18 <HAL_SAI_Init+0x2e8>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d104      	bne.n	800bd52 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bd48:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bd4c:	f7ff f992 	bl	800b074 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd50:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	4613      	mov	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	4413      	add	r3, r2
 800bd5a:	005b      	lsls	r3, r3, #1
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	025b      	lsls	r3, r3, #9
 800bd64:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd68:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	4a6b      	ldr	r2, [pc, #428]	@ (800bf1c <HAL_SAI_Init+0x2ec>)
 800bd6e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd72:	08da      	lsrs	r2, r3, #3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800bd78:	68f9      	ldr	r1, [r7, #12]
 800bd7a:	4b68      	ldr	r3, [pc, #416]	@ (800bf1c <HAL_SAI_Init+0x2ec>)
 800bd7c:	fba3 2301 	umull	r2, r3, r3, r1
 800bd80:	08da      	lsrs	r2, r3, #3
 800bd82:	4613      	mov	r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	4413      	add	r3, r2
 800bd88:	005b      	lsls	r3, r3, #1
 800bd8a:	1aca      	subs	r2, r1, r3
 800bd8c:	2a08      	cmp	r2, #8
 800bd8e:	d904      	bls.n	800bd9a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6a1b      	ldr	r3, [r3, #32]
 800bd94:	1c5a      	adds	r2, r3, #1
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd9e:	2b04      	cmp	r3, #4
 800bda0:	d104      	bne.n	800bdac <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a1b      	ldr	r3, [r3, #32]
 800bda6:	085a      	lsrs	r2, r3, #1
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d003      	beq.n	800bdbc <HAL_SAI_Init+0x18c>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	2b02      	cmp	r3, #2
 800bdba:	d109      	bne.n	800bdd0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d101      	bne.n	800bdc8 <HAL_SAI_Init+0x198>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	e001      	b.n	800bdcc <HAL_SAI_Init+0x19c>
 800bdc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bdcc:	61bb      	str	r3, [r7, #24]
 800bdce:	e008      	b.n	800bde2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d102      	bne.n	800bdde <HAL_SAI_Init+0x1ae>
 800bdd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bddc:	e000      	b.n	800bde0 <HAL_SAI_Init+0x1b0>
 800bdde:	2300      	movs	r3, #0
 800bde0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	6819      	ldr	r1, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	4b4c      	ldr	r3, [pc, #304]	@ (800bf20 <HAL_SAI_Init+0x2f0>)
 800bdee:	400b      	ands	r3, r1
 800bdf0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	6819      	ldr	r1, [r3, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be00:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800be06:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be0c:	431a      	orrs	r2, r3
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800be1a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800be26:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a1b      	ldr	r3, [r3, #32]
 800be2c:	051b      	lsls	r3, r3, #20
 800be2e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	430a      	orrs	r2, r1
 800be36:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	6859      	ldr	r1, [r3, #4]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	4b38      	ldr	r3, [pc, #224]	@ (800bf24 <HAL_SAI_Init+0x2f4>)
 800be44:	400b      	ands	r3, r1
 800be46:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	6859      	ldr	r1, [r3, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	699a      	ldr	r2, [r3, #24]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be56:	431a      	orrs	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5c:	431a      	orrs	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	430a      	orrs	r2, r1
 800be64:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	6899      	ldr	r1, [r3, #8]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	4b2d      	ldr	r3, [pc, #180]	@ (800bf28 <HAL_SAI_Init+0x2f8>)
 800be72:	400b      	ands	r3, r1
 800be74:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	6899      	ldr	r1, [r3, #8]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be80:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be86:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800be8c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800be92:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be98:	3b01      	subs	r3, #1
 800be9a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800be9c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	430a      	orrs	r2, r1
 800bea4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68d9      	ldr	r1, [r3, #12]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800beb4:	400b      	ands	r3, r1
 800beb6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68d9      	ldr	r1, [r3, #12]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bec6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800becc:	041b      	lsls	r3, r3, #16
 800bece:	431a      	orrs	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bed4:	3b01      	subs	r3, #1
 800bed6:	021b      	lsls	r3, r3, #8
 800bed8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	430a      	orrs	r2, r1
 800bee0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2201      	movs	r2, #1
 800beee:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3720      	adds	r7, #32
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	40015804 	.word	0x40015804
 800bf08:	40015824 	.word	0x40015824
 800bf0c:	40015800 	.word	0x40015800
 800bf10:	40015c00 	.word	0x40015c00
 800bf14:	40015c04 	.word	0x40015c04
 800bf18:	40015c24 	.word	0x40015c24
 800bf1c:	cccccccd 	.word	0xcccccccd
 800bf20:	ff05c010 	.word	0xff05c010
 800bf24:	ffff1ff0 	.word	0xffff1ff0
 800bf28:	fff88000 	.word	0xfff88000

0800bf2c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800bf34:	4b17      	ldr	r3, [pc, #92]	@ (800bf94 <SAI_Disable+0x68>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a17      	ldr	r2, [pc, #92]	@ (800bf98 <SAI_Disable+0x6c>)
 800bf3a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf3e:	0b1b      	lsrs	r3, r3, #12
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bf56:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	1e5a      	subs	r2, r3, #1
 800bf5c:	60fa      	str	r2, [r7, #12]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10a      	bne.n	800bf78 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800bf72:	2303      	movs	r3, #3
 800bf74:	72fb      	strb	r3, [r7, #11]
      break;
 800bf76:	e006      	b.n	800bf86 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1e8      	bne.n	800bf58 <SAI_Disable+0x2c>

  return status;
 800bf86:	7afb      	ldrb	r3, [r7, #11]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3714      	adds	r7, #20
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr
 800bf94:	20000018 	.word	0x20000018
 800bf98:	95cbec1b 	.word	0x95cbec1b

0800bf9c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d101      	bne.n	800bfae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e022      	b.n	800bff4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d105      	bne.n	800bfc6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7f7 fd13 	bl	80039ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2203      	movs	r2, #3
 800bfca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f814 	bl	800bffc <HAL_SD_InitCard>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d001      	beq.n	800bfde <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e00a      	b.n	800bff4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2201      	movs	r2, #1
 800bfee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bffc:	b5b0      	push	{r4, r5, r7, lr}
 800bffe:	b08e      	sub	sp, #56	@ 0x38
 800c000:	af04      	add	r7, sp, #16
 800c002:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c004:	2300      	movs	r3, #0
 800c006:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c008:	2300      	movs	r3, #0
 800c00a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c00c:	2300      	movs	r3, #0
 800c00e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c010:	2300      	movs	r3, #0
 800c012:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c014:	2300      	movs	r3, #0
 800c016:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c018:	2376      	movs	r3, #118	@ 0x76
 800c01a:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681d      	ldr	r5, [r3, #0]
 800c020:	466c      	mov	r4, sp
 800c022:	f107 0318 	add.w	r3, r7, #24
 800c026:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c02a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c02e:	f107 030c 	add.w	r3, r7, #12
 800c032:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c034:	4628      	mov	r0, r5
 800c036:	f003 fd13 	bl	800fa60 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	685a      	ldr	r2, [r3, #4]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c048:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4618      	mov	r0, r3
 800c050:	f003 fd32 	bl	800fab8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c062:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c064:	2002      	movs	r0, #2
 800c066:	f7f9 f83f 	bl	80050e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fd76 	bl	800cb5c <SD_PowerON>
 800c070:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00b      	beq.n	800c090 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c086:	431a      	orrs	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	e02e      	b.n	800c0ee <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fc95 	bl	800c9c0 <SD_InitCard>
 800c096:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00b      	beq.n	800c0b6 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ac:	431a      	orrs	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e01b      	b.n	800c0ee <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f003 fd8c 	bl	800fbdc <SDMMC_CmdBlockLength>
 800c0c4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00f      	beq.n	800c0ec <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a09      	ldr	r2, [pc, #36]	@ (800c0f8 <HAL_SD_InitCard+0xfc>)
 800c0d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0da:	431a      	orrs	r2, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e000      	b.n	800c0ee <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3728      	adds	r7, #40	@ 0x28
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bdb0      	pop	{r4, r5, r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	004005ff 	.word	0x004005ff

0800c0fc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08c      	sub	sp, #48	@ 0x30
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
 800c108:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d107      	bne.n	800c124 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c118:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	e0c3      	b.n	800c2ac <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	f040 80bc 	bne.w	800c2aa <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2200      	movs	r2, #0
 800c136:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	441a      	add	r2, r3
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c142:	429a      	cmp	r2, r3
 800c144:	d907      	bls.n	800c156 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c14a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	e0aa      	b.n	800c2ac <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2203      	movs	r2, #3
 800c15a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2200      	movs	r2, #0
 800c164:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c174:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c17a:	4a4e      	ldr	r2, [pc, #312]	@ (800c2b4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c17c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c182:	4a4d      	ldr	r2, [pc, #308]	@ (800c2b8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800c184:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c18a:	2200      	movs	r2, #0
 800c18c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c192:	2200      	movs	r2, #0
 800c194:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1a6:	689a      	ldr	r2, [r3, #8]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	430a      	orrs	r2, r1
 800c1b0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	3380      	adds	r3, #128	@ 0x80
 800c1bc:	4619      	mov	r1, r3
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	025b      	lsls	r3, r3, #9
 800c1c4:	089b      	lsrs	r3, r3, #2
 800c1c6:	f7f9 fda5 	bl	8005d14 <HAL_DMA_Start_IT>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d017      	beq.n	800c200 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800c1de:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a35      	ldr	r2, [pc, #212]	@ (800c2bc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c1e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e055      	b.n	800c2ac <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f042 0208 	orr.w	r2, r2, #8
 800c20e:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c214:	2b01      	cmp	r3, #1
 800c216:	d002      	beq.n	800c21e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800c218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c21a:	025b      	lsls	r3, r3, #9
 800c21c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c21e:	f04f 33ff 	mov.w	r3, #4294967295
 800c222:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	025b      	lsls	r3, r3, #9
 800c228:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c22a:	2390      	movs	r3, #144	@ 0x90
 800c22c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c22e:	2302      	movs	r3, #2
 800c230:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c232:	2300      	movs	r3, #0
 800c234:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c236:	2301      	movs	r3, #1
 800c238:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f107 0210 	add.w	r2, r7, #16
 800c242:	4611      	mov	r1, r2
 800c244:	4618      	mov	r0, r3
 800c246:	f003 fc9d 	bl	800fb84 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d90a      	bls.n	800c266 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2282      	movs	r2, #130	@ 0x82
 800c254:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c25c:	4618      	mov	r0, r3
 800c25e:	f003 fd01 	bl	800fc64 <SDMMC_CmdReadMultiBlock>
 800c262:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c264:	e009      	b.n	800c27a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2281      	movs	r2, #129	@ 0x81
 800c26a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c272:	4618      	mov	r0, r3
 800c274:	f003 fcd4 	bl	800fc20 <SDMMC_CmdReadSingleBlock>
 800c278:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d012      	beq.n	800c2a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a0d      	ldr	r2, [pc, #52]	@ (800c2bc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c286:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c28e:	431a      	orrs	r2, r3
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e002      	b.n	800c2ac <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e000      	b.n	800c2ac <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800c2aa:	2302      	movs	r3, #2
  }
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3730      	adds	r7, #48	@ 0x30
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	0800c8ab 	.word	0x0800c8ab
 800c2b8:	0800c91d 	.word	0x0800c91d
 800c2bc:	004005ff 	.word	0x004005ff

0800c2c0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b08c      	sub	sp, #48	@ 0x30
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	607a      	str	r2, [r7, #4]
 800c2cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d107      	bne.n	800c2e8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2dc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e0c6      	b.n	800c476 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	f040 80bf 	bne.w	800c474 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c2fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	441a      	add	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c306:	429a      	cmp	r2, r3
 800c308:	d907      	bls.n	800c31a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c30e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c316:	2301      	movs	r3, #1
 800c318:	e0ad      	b.n	800c476 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2203      	movs	r2, #3
 800c31e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2200      	movs	r2, #0
 800c328:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f042 021a 	orr.w	r2, r2, #26
 800c338:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c33e:	4a50      	ldr	r2, [pc, #320]	@ (800c480 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800c340:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c346:	4a4f      	ldr	r2, [pc, #316]	@ (800c484 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800c348:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c34e:	2200      	movs	r2, #0
 800c350:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c356:	2b01      	cmp	r3, #1
 800c358:	d002      	beq.n	800c360 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c35c:	025b      	lsls	r3, r3, #9
 800c35e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	2b01      	cmp	r3, #1
 800c364:	d90a      	bls.n	800c37c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	22a0      	movs	r2, #160	@ 0xa0
 800c36a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c372:	4618      	mov	r0, r3
 800c374:	f003 fcba 	bl	800fcec <SDMMC_CmdWriteMultiBlock>
 800c378:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c37a:	e009      	b.n	800c390 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2290      	movs	r2, #144	@ 0x90
 800c380:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c388:	4618      	mov	r0, r3
 800c38a:	f003 fc8d 	bl	800fca8 <SDMMC_CmdWriteSingleBlock>
 800c38e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c392:	2b00      	cmp	r3, #0
 800c394:	d012      	beq.n	800c3bc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a3b      	ldr	r2, [pc, #236]	@ (800c488 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c39c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3a4:	431a      	orrs	r2, r3
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e05c      	b.n	800c476 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f042 0208 	orr.w	r2, r2, #8
 800c3ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3d0:	2240      	movs	r2, #64	@ 0x40
 800c3d2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3e4:	689a      	ldr	r2, [r3, #8]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	430a      	orrs	r2, r1
 800c3ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c3f4:	68b9      	ldr	r1, [r7, #8]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3380      	adds	r3, #128	@ 0x80
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	025b      	lsls	r3, r3, #9
 800c402:	089b      	lsrs	r3, r3, #2
 800c404:	f7f9 fc86 	bl	8005d14 <HAL_DMA_Start_IT>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d01a      	beq.n	800c444 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f022 021a 	bic.w	r2, r2, #26
 800c41c:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a19      	ldr	r2, [pc, #100]	@ (800c488 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c424:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c42a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2201      	movs	r2, #1
 800c436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2200      	movs	r2, #0
 800c43e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	e018      	b.n	800c476 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c444:	f04f 33ff 	mov.w	r3, #4294967295
 800c448:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	025b      	lsls	r3, r3, #9
 800c44e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c450:	2390      	movs	r3, #144	@ 0x90
 800c452:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c454:	2300      	movs	r3, #0
 800c456:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c458:	2300      	movs	r3, #0
 800c45a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c45c:	2301      	movs	r3, #1
 800c45e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f107 0210 	add.w	r2, r7, #16
 800c468:	4611      	mov	r1, r2
 800c46a:	4618      	mov	r0, r3
 800c46c:	f003 fb8a 	bl	800fb84 <SDMMC_ConfigData>

      return HAL_OK;
 800c470:	2300      	movs	r3, #0
 800c472:	e000      	b.n	800c476 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800c474:	2302      	movs	r3, #2
  }
}
 800c476:	4618      	mov	r0, r3
 800c478:	3730      	adds	r7, #48	@ 0x30
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	0800c881 	.word	0x0800c881
 800c484:	0800c91d 	.word	0x0800c91d
 800c488:	004005ff 	.word	0x004005ff

0800c48c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4ae:	0f9b      	lsrs	r3, r3, #30
 800c4b0:	b2da      	uxtb	r2, r3
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4ba:	0e9b      	lsrs	r3, r3, #26
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	f003 030f 	and.w	r3, r3, #15
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4cc:	0e1b      	lsrs	r3, r3, #24
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	f003 0303 	and.w	r3, r3, #3
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4de:	0c1b      	lsrs	r3, r3, #16
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4ea:	0a1b      	lsrs	r3, r3, #8
 800c4ec:	b2da      	uxtb	r2, r3
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c500:	0d1b      	lsrs	r3, r3, #20
 800c502:	b29a      	uxth	r2, r3
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c50c:	0c1b      	lsrs	r3, r3, #16
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	f003 030f 	and.w	r3, r3, #15
 800c514:	b2da      	uxtb	r2, r3
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c51e:	0bdb      	lsrs	r3, r3, #15
 800c520:	b2db      	uxtb	r3, r3
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	b2da      	uxtb	r2, r3
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c530:	0b9b      	lsrs	r3, r3, #14
 800c532:	b2db      	uxtb	r3, r3
 800c534:	f003 0301 	and.w	r3, r3, #1
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c542:	0b5b      	lsrs	r3, r3, #13
 800c544:	b2db      	uxtb	r3, r3
 800c546:	f003 0301 	and.w	r3, r3, #1
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c554:	0b1b      	lsrs	r3, r3, #12
 800c556:	b2db      	uxtb	r3, r3
 800c558:	f003 0301 	and.w	r3, r3, #1
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	2200      	movs	r2, #0
 800c566:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d163      	bne.n	800c638 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c574:	009a      	lsls	r2, r3, #2
 800c576:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c57a:	4013      	ands	r3, r2
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c580:	0f92      	lsrs	r2, r2, #30
 800c582:	431a      	orrs	r2, r3
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c58c:	0edb      	lsrs	r3, r3, #27
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	f003 0307 	and.w	r3, r3, #7
 800c594:	b2da      	uxtb	r2, r3
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c59e:	0e1b      	lsrs	r3, r3, #24
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	f003 0307 	and.w	r3, r3, #7
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5b0:	0d5b      	lsrs	r3, r3, #21
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	f003 0307 	and.w	r3, r3, #7
 800c5b8:	b2da      	uxtb	r2, r3
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5c2:	0c9b      	lsrs	r3, r3, #18
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	f003 0307 	and.w	r3, r3, #7
 800c5ca:	b2da      	uxtb	r2, r3
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5d4:	0bdb      	lsrs	r3, r3, #15
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	f003 0307 	and.w	r3, r3, #7
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	1c5a      	adds	r2, r3, #1
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	7e1b      	ldrb	r3, [r3, #24]
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	f003 0307 	and.w	r3, r3, #7
 800c5f6:	3302      	adds	r3, #2
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c602:	fb03 f202 	mul.w	r2, r3, r2
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	7a1b      	ldrb	r3, [r3, #8]
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	f003 030f 	and.w	r3, r3, #15
 800c614:	2201      	movs	r2, #1
 800c616:	409a      	lsls	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800c624:	0a52      	lsrs	r2, r2, #9
 800c626:	fb03 f202 	mul.w	r2, r3, r2
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c634:	661a      	str	r2, [r3, #96]	@ 0x60
 800c636:	e031      	b.n	800c69c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d11d      	bne.n	800c67c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c644:	041b      	lsls	r3, r3, #16
 800c646:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c64e:	0c1b      	lsrs	r3, r3, #16
 800c650:	431a      	orrs	r2, r3
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	3301      	adds	r3, #1
 800c65c:	029a      	lsls	r2, r3, #10
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c670:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	661a      	str	r2, [r3, #96]	@ 0x60
 800c67a:	e00f      	b.n	800c69c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a58      	ldr	r2, [pc, #352]	@ (800c7e4 <HAL_SD_GetCardCSD+0x344>)
 800c682:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c688:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c698:	2301      	movs	r3, #1
 800c69a:	e09d      	b.n	800c7d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6a0:	0b9b      	lsrs	r3, r3, #14
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	f003 0301 	and.w	r3, r3, #1
 800c6a8:	b2da      	uxtb	r2, r3
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6b2:	09db      	lsrs	r3, r3, #7
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6ba:	b2da      	uxtb	r2, r3
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6d4:	0fdb      	lsrs	r3, r3, #31
 800c6d6:	b2da      	uxtb	r2, r3
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6e0:	0f5b      	lsrs	r3, r3, #29
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	f003 0303 	and.w	r3, r3, #3
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6f2:	0e9b      	lsrs	r3, r3, #26
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	f003 0307 	and.w	r3, r3, #7
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c704:	0d9b      	lsrs	r3, r3, #22
 800c706:	b2db      	uxtb	r3, r3
 800c708:	f003 030f 	and.w	r3, r3, #15
 800c70c:	b2da      	uxtb	r2, r3
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c716:	0d5b      	lsrs	r3, r3, #21
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	f003 0301 	and.w	r3, r3, #1
 800c71e:	b2da      	uxtb	r2, r3
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c732:	0c1b      	lsrs	r3, r3, #16
 800c734:	b2db      	uxtb	r3, r3
 800c736:	f003 0301 	and.w	r3, r3, #1
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c746:	0bdb      	lsrs	r3, r3, #15
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	f003 0301 	and.w	r3, r3, #1
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c75a:	0b9b      	lsrs	r3, r3, #14
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	f003 0301 	and.w	r3, r3, #1
 800c762:	b2da      	uxtb	r2, r3
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c76e:	0b5b      	lsrs	r3, r3, #13
 800c770:	b2db      	uxtb	r3, r3
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	b2da      	uxtb	r2, r3
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c782:	0b1b      	lsrs	r3, r3, #12
 800c784:	b2db      	uxtb	r3, r3
 800c786:	f003 0301 	and.w	r3, r3, #1
 800c78a:	b2da      	uxtb	r2, r3
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c796:	0a9b      	lsrs	r3, r3, #10
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	f003 0303 	and.w	r3, r3, #3
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7aa:	0a1b      	lsrs	r3, r3, #8
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	f003 0303 	and.w	r3, r3, #3
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7be:	085b      	lsrs	r3, r3, #1
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7c6:	b2da      	uxtb	r2, r3
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr
 800c7e4:	004005ff 	.word	0x004005ff

0800c7e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c848:	2300      	movs	r3, #0
 800c84a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c84c:	f107 030c 	add.w	r3, r7, #12
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fa10 	bl	800cc78 <SD_SendStatus>
 800c858:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d005      	beq.n	800c86c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	431a      	orrs	r2, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	0a5b      	lsrs	r3, r3, #9
 800c870:	f003 030f 	and.w	r3, r3, #15
 800c874:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c876:	693b      	ldr	r3, [r7, #16]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3718      	adds	r7, #24
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c88c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c89c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c89e:	bf00      	nop
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b084      	sub	sp, #16
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8bc:	2b82      	cmp	r3, #130	@ 0x82
 800c8be:	d111      	bne.n	800c8e4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f003 fa33 	bl	800fd30 <SDMMC_CmdStopTransfer>
 800c8ca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d008      	beq.n	800c8e4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	431a      	orrs	r2, r3
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f7ff fdd4 	bl	800c48c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f022 0208 	bic.w	r2, r2, #8
 800c8f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c8fc:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2201      	movs	r2, #1
 800c902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2200      	movs	r2, #0
 800c90a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	f004 ff85 	bl	801181c <HAL_SD_RxCpltCallback>
#endif
}
 800c912:	bf00      	nop
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
	...

0800c91c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b086      	sub	sp, #24
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c928:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7f9 fc6e 	bl	800620c <HAL_DMA_GetError>
 800c930:	4603      	mov	r3, r0
 800c932:	2b02      	cmp	r3, #2
 800c934:	d03e      	beq.n	800c9b4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c93a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c93c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c944:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d002      	beq.n	800c952 <SD_DMAError+0x36>
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d12d      	bne.n	800c9ae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a19      	ldr	r2, [pc, #100]	@ (800c9bc <SD_DMAError+0xa0>)
 800c958:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c968:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c96e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c976:	6978      	ldr	r0, [r7, #20]
 800c978:	f7ff ff62 	bl	800c840 <HAL_SD_GetCardState>
 800c97c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	2b06      	cmp	r3, #6
 800c982:	d002      	beq.n	800c98a <SD_DMAError+0x6e>
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	2b05      	cmp	r3, #5
 800c988:	d10a      	bne.n	800c9a0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4618      	mov	r0, r3
 800c990:	f003 f9ce 	bl	800fd30 <SDMMC_CmdStopTransfer>
 800c994:	4602      	mov	r2, r0
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c99a:	431a      	orrs	r2, r3
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c9ae:	6978      	ldr	r0, [r7, #20]
 800c9b0:	f7ff fd6c 	bl	800c48c <HAL_SD_ErrorCallback>
#endif
  }
}
 800c9b4:	bf00      	nop
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	004005ff 	.word	0x004005ff

0800c9c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c9c0:	b5b0      	push	{r4, r5, r7, lr}
 800c9c2:	b094      	sub	sp, #80	@ 0x50
 800c9c4:	af04      	add	r7, sp, #16
 800c9c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f003 f87f 	bl	800fad4 <SDMMC_GetPowerState>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d102      	bne.n	800c9e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c9dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c9e0:	e0b8      	b.n	800cb54 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9e6:	2b03      	cmp	r3, #3
 800c9e8:	d02f      	beq.n	800ca4a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f003 fa66 	bl	800fec0 <SDMMC_CmdSendCID>
 800c9f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <SD_InitCard+0x40>
    {
      return errorstate;
 800c9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9fe:	e0a9      	b.n	800cb54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2100      	movs	r1, #0
 800ca06:	4618      	mov	r0, r3
 800ca08:	f003 f8a9 	bl	800fb5e <SDMMC_GetResponse>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2104      	movs	r1, #4
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f003 f8a0 	bl	800fb5e <SDMMC_GetResponse>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2108      	movs	r1, #8
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f003 f897 	bl	800fb5e <SDMMC_GetResponse>
 800ca30:	4602      	mov	r2, r0
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	210c      	movs	r1, #12
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f003 f88e 	bl	800fb5e <SDMMC_GetResponse>
 800ca42:	4602      	mov	r2, r0
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca4e:	2b03      	cmp	r3, #3
 800ca50:	d00d      	beq.n	800ca6e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f107 020e 	add.w	r2, r7, #14
 800ca5a:	4611      	mov	r1, r2
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f003 fa6c 	bl	800ff3a <SDMMC_CmdSetRelAdd>
 800ca62:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d001      	beq.n	800ca6e <SD_InitCard+0xae>
    {
      return errorstate;
 800ca6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca6c:	e072      	b.n	800cb54 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	d036      	beq.n	800cae4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ca76:	89fb      	ldrh	r3, [r7, #14]
 800ca78:	461a      	mov	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca86:	041b      	lsls	r3, r3, #16
 800ca88:	4619      	mov	r1, r3
 800ca8a:	4610      	mov	r0, r2
 800ca8c:	f003 fa36 	bl	800fefc <SDMMC_CmdSendCSD>
 800ca90:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <SD_InitCard+0xdc>
    {
      return errorstate;
 800ca98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca9a:	e05b      	b.n	800cb54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2100      	movs	r1, #0
 800caa2:	4618      	mov	r0, r3
 800caa4:	f003 f85b 	bl	800fb5e <SDMMC_GetResponse>
 800caa8:	4602      	mov	r2, r0
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2104      	movs	r1, #4
 800cab4:	4618      	mov	r0, r3
 800cab6:	f003 f852 	bl	800fb5e <SDMMC_GetResponse>
 800caba:	4602      	mov	r2, r0
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2108      	movs	r1, #8
 800cac6:	4618      	mov	r0, r3
 800cac8:	f003 f849 	bl	800fb5e <SDMMC_GetResponse>
 800cacc:	4602      	mov	r2, r0
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	210c      	movs	r1, #12
 800cad8:	4618      	mov	r0, r3
 800cada:	f003 f840 	bl	800fb5e <SDMMC_GetResponse>
 800cade:	4602      	mov	r2, r0
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2104      	movs	r1, #4
 800caea:	4618      	mov	r0, r3
 800caec:	f003 f837 	bl	800fb5e <SDMMC_GetResponse>
 800caf0:	4603      	mov	r3, r0
 800caf2:	0d1a      	lsrs	r2, r3, #20
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800caf8:	f107 0310 	add.w	r3, r7, #16
 800cafc:	4619      	mov	r1, r3
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f7ff fcce 	bl	800c4a0 <HAL_SD_GetCardCSD>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d002      	beq.n	800cb10 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb0a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cb0e:	e021      	b.n	800cb54 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6819      	ldr	r1, [r3, #0]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb18:	041b      	lsls	r3, r3, #16
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	461c      	mov	r4, r3
 800cb1e:	4615      	mov	r5, r2
 800cb20:	4622      	mov	r2, r4
 800cb22:	462b      	mov	r3, r5
 800cb24:	4608      	mov	r0, r1
 800cb26:	f003 f925 	bl	800fd74 <SDMMC_CmdSelDesel>
 800cb2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d001      	beq.n	800cb36 <SD_InitCard+0x176>
  {
    return errorstate;
 800cb32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb34:	e00e      	b.n	800cb54 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681d      	ldr	r5, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	466c      	mov	r4, sp
 800cb3e:	f103 0210 	add.w	r2, r3, #16
 800cb42:	ca07      	ldmia	r2, {r0, r1, r2}
 800cb44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cb48:	3304      	adds	r3, #4
 800cb4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	f002 ff87 	bl	800fa60 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cb52:	2300      	movs	r3, #0
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3740      	adds	r7, #64	@ 0x40
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bdb0      	pop	{r4, r5, r7, pc}

0800cb5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b086      	sub	sp, #24
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb64:	2300      	movs	r3, #0
 800cb66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	617b      	str	r3, [r7, #20]
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f003 f920 	bl	800fdba <SDMMC_CmdGoIdleState>
 800cb7a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d001      	beq.n	800cb86 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	e072      	b.n	800cc6c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f003 f933 	bl	800fdf6 <SDMMC_CmdOperCond>
 800cb90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d00d      	beq.n	800cbb4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f003 f909 	bl	800fdba <SDMMC_CmdGoIdleState>
 800cba8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d004      	beq.n	800cbba <SD_PowerON+0x5e>
    {
      return errorstate;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	e05b      	b.n	800cc6c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d137      	bne.n	800cc32 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f003 f933 	bl	800fe34 <SDMMC_CmdAppCommand>
 800cbce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d02d      	beq.n	800cc32 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbd6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cbda:	e047      	b.n	800cc6c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f003 f926 	bl	800fe34 <SDMMC_CmdAppCommand>
 800cbe8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d001      	beq.n	800cbf4 <SD_PowerON+0x98>
    {
      return errorstate;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	e03b      	b.n	800cc6c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	491e      	ldr	r1, [pc, #120]	@ (800cc74 <SD_PowerON+0x118>)
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f003 f93c 	bl	800fe78 <SDMMC_CmdAppOperCommand>
 800cc00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d002      	beq.n	800cc0e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc08:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cc0c:	e02e      	b.n	800cc6c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	2100      	movs	r1, #0
 800cc14:	4618      	mov	r0, r3
 800cc16:	f002 ffa2 	bl	800fb5e <SDMMC_GetResponse>
 800cc1a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	0fdb      	lsrs	r3, r3, #31
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d101      	bne.n	800cc28 <SD_PowerON+0xcc>
 800cc24:	2301      	movs	r3, #1
 800cc26:	e000      	b.n	800cc2a <SD_PowerON+0xce>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	613b      	str	r3, [r7, #16]

    count++;
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d802      	bhi.n	800cc42 <SD_PowerON+0xe6>
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d0cc      	beq.n	800cbdc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d902      	bls.n	800cc52 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cc4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cc50:	e00c      	b.n	800cc6c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d003      	beq.n	800cc64 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	645a      	str	r2, [r3, #68]	@ 0x44
 800cc62:	e002      	b.n	800cc6a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800cc6a:	2300      	movs	r3, #0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	c1100000 	.word	0xc1100000

0800cc78 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d102      	bne.n	800cc8e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cc88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cc8c:	e018      	b.n	800ccc0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc96:	041b      	lsls	r3, r3, #16
 800cc98:	4619      	mov	r1, r3
 800cc9a:	4610      	mov	r0, r2
 800cc9c:	f003 f96e 	bl	800ff7c <SDMMC_CmdSendStatus>
 800cca0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <SD_SendStatus+0x34>
  {
    return errorstate;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	e009      	b.n	800ccc0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f002 ff53 	bl	800fb5e <SDMMC_GetResponse>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d101      	bne.n	800ccdc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e025      	b.n	800cd28 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d106      	bne.n	800ccf6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f7f7 fa57 	bl	80041a4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2202      	movs	r2, #2
 800ccfa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	3304      	adds	r3, #4
 800cd06:	4619      	mov	r1, r3
 800cd08:	4610      	mov	r0, r2
 800cd0a:	f002 fde3 	bl	800f8d4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6818      	ldr	r0, [r3, #0]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	461a      	mov	r2, r3
 800cd18:	6839      	ldr	r1, [r7, #0]
 800cd1a:	f002 fe37 	bl	800f98c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2201      	movs	r2, #1
 800cd22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e04c      	b.n	800cddc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d106      	bne.n	800cd5c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7f6 feaa 	bl	8003ab0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2202      	movs	r2, #2
 800cd60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f022 0203 	bic.w	r2, r2, #3
 800cd72:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	4b19      	ldr	r3, [pc, #100]	@ (800cde4 <HAL_SPDIFRX_Init+0xb4>)
 800cd80:	4013      	ands	r3, r2
 800cd82:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800cd8c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800cd92:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800cd98:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800cd9e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800cda4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800cdaa:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800cdb0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800cdb6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800cdbc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3710      	adds	r7, #16
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	fff88407 	.word	0xfff88407

0800cde8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d101      	bne.n	800cdfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e09d      	b.n	800cf36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d108      	bne.n	800ce14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ce0a:	d009      	beq.n	800ce20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	61da      	str	r2, [r3, #28]
 800ce12:	e005      	b.n	800ce20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d106      	bne.n	800ce40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2200      	movs	r2, #0
 800ce36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7f6 fe9c 	bl	8003b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2202      	movs	r2, #2
 800ce44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ce56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce60:	d902      	bls.n	800ce68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ce62:	2300      	movs	r3, #0
 800ce64:	60fb      	str	r3, [r7, #12]
 800ce66:	e002      	b.n	800ce6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ce68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ce76:	d007      	beq.n	800ce88 <HAL_SPI_Init+0xa0>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce80:	d002      	beq.n	800ce88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2200      	movs	r2, #0
 800ce86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ce98:	431a      	orrs	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	691b      	ldr	r3, [r3, #16]
 800ce9e:	f003 0302 	and.w	r3, r3, #2
 800cea2:	431a      	orrs	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	f003 0301 	and.w	r3, r3, #1
 800ceac:	431a      	orrs	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	699b      	ldr	r3, [r3, #24]
 800ceb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ceb6:	431a      	orrs	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	69db      	ldr	r3, [r3, #28]
 800cebc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cec0:	431a      	orrs	r2, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ceca:	ea42 0103 	orr.w	r1, r2, r3
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ced2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	430a      	orrs	r2, r1
 800cedc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	699b      	ldr	r3, [r3, #24]
 800cee2:	0c1b      	lsrs	r3, r3, #16
 800cee4:	f003 0204 	and.w	r2, r3, #4
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceec:	f003 0310 	and.w	r3, r3, #16
 800cef0:	431a      	orrs	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cef6:	f003 0308 	and.w	r3, r3, #8
 800cefa:	431a      	orrs	r2, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800cf04:	ea42 0103 	orr.w	r1, r2, r3
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	430a      	orrs	r2, r1
 800cf14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	69da      	ldr	r2, [r3, #28]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cf24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b082      	sub	sp, #8
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e049      	b.n	800cfe4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d106      	bne.n	800cf6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7f6 fe69 	bl	8003c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2202      	movs	r2, #2
 800cf6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	3304      	adds	r3, #4
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	f000 fc11 	bl	800d7a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3708      	adds	r7, #8
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d001      	beq.n	800d004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	e054      	b.n	800d0ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2202      	movs	r2, #2
 800d008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68da      	ldr	r2, [r3, #12]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f042 0201 	orr.w	r2, r2, #1
 800d01a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a26      	ldr	r2, [pc, #152]	@ (800d0bc <HAL_TIM_Base_Start_IT+0xd0>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d022      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d02e:	d01d      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a22      	ldr	r2, [pc, #136]	@ (800d0c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d018      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a21      	ldr	r2, [pc, #132]	@ (800d0c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d013      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a1f      	ldr	r2, [pc, #124]	@ (800d0c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d00e      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a1e      	ldr	r2, [pc, #120]	@ (800d0cc <HAL_TIM_Base_Start_IT+0xe0>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d009      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a1c      	ldr	r2, [pc, #112]	@ (800d0d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d004      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4a1b      	ldr	r2, [pc, #108]	@ (800d0d4 <HAL_TIM_Base_Start_IT+0xe8>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d115      	bne.n	800d098 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	689a      	ldr	r2, [r3, #8]
 800d072:	4b19      	ldr	r3, [pc, #100]	@ (800d0d8 <HAL_TIM_Base_Start_IT+0xec>)
 800d074:	4013      	ands	r3, r2
 800d076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2b06      	cmp	r3, #6
 800d07c:	d015      	beq.n	800d0aa <HAL_TIM_Base_Start_IT+0xbe>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d084:	d011      	beq.n	800d0aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f042 0201 	orr.w	r2, r2, #1
 800d094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d096:	e008      	b.n	800d0aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f042 0201 	orr.w	r2, r2, #1
 800d0a6:	601a      	str	r2, [r3, #0]
 800d0a8:	e000      	b.n	800d0ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3714      	adds	r7, #20
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	40010000 	.word	0x40010000
 800d0c0:	40000400 	.word	0x40000400
 800d0c4:	40000800 	.word	0x40000800
 800d0c8:	40000c00 	.word	0x40000c00
 800d0cc:	40010400 	.word	0x40010400
 800d0d0:	40014000 	.word	0x40014000
 800d0d4:	40001800 	.word	0x40001800
 800d0d8:	00010007 	.word	0x00010007

0800d0dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e049      	b.n	800d182 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d106      	bne.n	800d108 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7f6 fe08 	bl	8003d18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2202      	movs	r2, #2
 800d10c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	3304      	adds	r3, #4
 800d118:	4619      	mov	r1, r3
 800d11a:	4610      	mov	r0, r2
 800d11c:	f000 fb42 	bl	800d7a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2201      	movs	r2, #1
 800d134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d180:	2300      	movs	r3, #0
}
 800d182:	4618      	mov	r0, r3
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b084      	sub	sp, #16
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	f003 0302 	and.w	r3, r3, #2
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d020      	beq.n	800d1ee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f003 0302 	and.w	r3, r3, #2
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d01b      	beq.n	800d1ee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f06f 0202 	mvn.w	r2, #2
 800d1be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	699b      	ldr	r3, [r3, #24]
 800d1cc:	f003 0303 	and.w	r3, r3, #3
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d003      	beq.n	800d1dc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 fac7 	bl	800d768 <HAL_TIM_IC_CaptureCallback>
 800d1da:	e005      	b.n	800d1e8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fab9 	bl	800d754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 faca 	bl	800d77c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	f003 0304 	and.w	r3, r3, #4
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d020      	beq.n	800d23a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f003 0304 	and.w	r3, r3, #4
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d01b      	beq.n	800d23a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f06f 0204 	mvn.w	r2, #4
 800d20a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2202      	movs	r2, #2
 800d210:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	699b      	ldr	r3, [r3, #24]
 800d218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d003      	beq.n	800d228 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 faa1 	bl	800d768 <HAL_TIM_IC_CaptureCallback>
 800d226:	e005      	b.n	800d234 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 fa93 	bl	800d754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 faa4 	bl	800d77c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	f003 0308 	and.w	r3, r3, #8
 800d240:	2b00      	cmp	r3, #0
 800d242:	d020      	beq.n	800d286 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f003 0308 	and.w	r3, r3, #8
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d01b      	beq.n	800d286 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f06f 0208 	mvn.w	r2, #8
 800d256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2204      	movs	r2, #4
 800d25c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	69db      	ldr	r3, [r3, #28]
 800d264:	f003 0303 	and.w	r3, r3, #3
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 fa7b 	bl	800d768 <HAL_TIM_IC_CaptureCallback>
 800d272:	e005      	b.n	800d280 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 fa6d 	bl	800d754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 fa7e 	bl	800d77c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	f003 0310 	and.w	r3, r3, #16
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d020      	beq.n	800d2d2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f003 0310 	and.w	r3, r3, #16
 800d296:	2b00      	cmp	r3, #0
 800d298:	d01b      	beq.n	800d2d2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f06f 0210 	mvn.w	r2, #16
 800d2a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2208      	movs	r2, #8
 800d2a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	69db      	ldr	r3, [r3, #28]
 800d2b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d003      	beq.n	800d2c0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 fa55 	bl	800d768 <HAL_TIM_IC_CaptureCallback>
 800d2be:	e005      	b.n	800d2cc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 fa47 	bl	800d754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 fa58 	bl	800d77c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	f003 0301 	and.w	r3, r3, #1
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00c      	beq.n	800d2f6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f003 0301 	and.w	r3, r3, #1
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d007      	beq.n	800d2f6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f06f 0201 	mvn.w	r2, #1
 800d2ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f7f5 feb7 	bl	8003064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d104      	bne.n	800d30a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d306:	2b00      	cmp	r3, #0
 800d308:	d00c      	beq.n	800d324 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d310:	2b00      	cmp	r3, #0
 800d312:	d007      	beq.n	800d324 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d31c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fef4 	bl	800e10c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00c      	beq.n	800d348 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d334:	2b00      	cmp	r3, #0
 800d336:	d007      	beq.n	800d348 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 feec 	bl	800e120 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00c      	beq.n	800d36c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d007      	beq.n	800d36c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 fa12 	bl	800d790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	f003 0320 	and.w	r3, r3, #32
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00c      	beq.n	800d390 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f003 0320 	and.w	r3, r3, #32
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d007      	beq.n	800d390 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f06f 0220 	mvn.w	r2, #32
 800d388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 feb4 	bl	800e0f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d390:	bf00      	nop
 800d392:	3710      	adds	r7, #16
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d101      	bne.n	800d3b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d3b2:	2302      	movs	r3, #2
 800d3b4:	e0ff      	b.n	800d5b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2b14      	cmp	r3, #20
 800d3c2:	f200 80f0 	bhi.w	800d5a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3cc:	0800d421 	.word	0x0800d421
 800d3d0:	0800d5a7 	.word	0x0800d5a7
 800d3d4:	0800d5a7 	.word	0x0800d5a7
 800d3d8:	0800d5a7 	.word	0x0800d5a7
 800d3dc:	0800d461 	.word	0x0800d461
 800d3e0:	0800d5a7 	.word	0x0800d5a7
 800d3e4:	0800d5a7 	.word	0x0800d5a7
 800d3e8:	0800d5a7 	.word	0x0800d5a7
 800d3ec:	0800d4a3 	.word	0x0800d4a3
 800d3f0:	0800d5a7 	.word	0x0800d5a7
 800d3f4:	0800d5a7 	.word	0x0800d5a7
 800d3f8:	0800d5a7 	.word	0x0800d5a7
 800d3fc:	0800d4e3 	.word	0x0800d4e3
 800d400:	0800d5a7 	.word	0x0800d5a7
 800d404:	0800d5a7 	.word	0x0800d5a7
 800d408:	0800d5a7 	.word	0x0800d5a7
 800d40c:	0800d525 	.word	0x0800d525
 800d410:	0800d5a7 	.word	0x0800d5a7
 800d414:	0800d5a7 	.word	0x0800d5a7
 800d418:	0800d5a7 	.word	0x0800d5a7
 800d41c:	0800d565 	.word	0x0800d565
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68b9      	ldr	r1, [r7, #8]
 800d426:	4618      	mov	r0, r3
 800d428:	f000 fa62 	bl	800d8f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	699a      	ldr	r2, [r3, #24]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f042 0208 	orr.w	r2, r2, #8
 800d43a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	699a      	ldr	r2, [r3, #24]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f022 0204 	bic.w	r2, r2, #4
 800d44a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	6999      	ldr	r1, [r3, #24]
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	691a      	ldr	r2, [r3, #16]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	430a      	orrs	r2, r1
 800d45c:	619a      	str	r2, [r3, #24]
      break;
 800d45e:	e0a5      	b.n	800d5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	68b9      	ldr	r1, [r7, #8]
 800d466:	4618      	mov	r0, r3
 800d468:	f000 fab4 	bl	800d9d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	699a      	ldr	r2, [r3, #24]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d47a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	699a      	ldr	r2, [r3, #24]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d48a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	6999      	ldr	r1, [r3, #24]
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	021a      	lsls	r2, r3, #8
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	430a      	orrs	r2, r1
 800d49e:	619a      	str	r2, [r3, #24]
      break;
 800d4a0:	e084      	b.n	800d5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68b9      	ldr	r1, [r7, #8]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f000 fb0b 	bl	800dac4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	69da      	ldr	r2, [r3, #28]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f042 0208 	orr.w	r2, r2, #8
 800d4bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	69da      	ldr	r2, [r3, #28]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f022 0204 	bic.w	r2, r2, #4
 800d4cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	69d9      	ldr	r1, [r3, #28]
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	691a      	ldr	r2, [r3, #16]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	430a      	orrs	r2, r1
 800d4de:	61da      	str	r2, [r3, #28]
      break;
 800d4e0:	e064      	b.n	800d5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	68b9      	ldr	r1, [r7, #8]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 fb61 	bl	800dbb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	69da      	ldr	r2, [r3, #28]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d4fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	69da      	ldr	r2, [r3, #28]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d50c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	69d9      	ldr	r1, [r3, #28]
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	021a      	lsls	r2, r3, #8
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	430a      	orrs	r2, r1
 800d520:	61da      	str	r2, [r3, #28]
      break;
 800d522:	e043      	b.n	800d5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	68b9      	ldr	r1, [r7, #8]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f000 fb98 	bl	800dc60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f042 0208 	orr.w	r2, r2, #8
 800d53e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f022 0204 	bic.w	r2, r2, #4
 800d54e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	691a      	ldr	r2, [r3, #16]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	430a      	orrs	r2, r1
 800d560:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d562:	e023      	b.n	800d5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68b9      	ldr	r1, [r7, #8]
 800d56a:	4618      	mov	r0, r3
 800d56c:	f000 fbca 	bl	800dd04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d57e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d58e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	691b      	ldr	r3, [r3, #16]
 800d59a:	021a      	lsls	r2, r3, #8
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	430a      	orrs	r2, r1
 800d5a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d5a4:	e002      	b.n	800d5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	75fb      	strb	r3, [r7, #23]
      break;
 800d5aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3718      	adds	r7, #24
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop

0800d5c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d101      	bne.n	800d5dc <HAL_TIM_ConfigClockSource+0x1c>
 800d5d8:	2302      	movs	r3, #2
 800d5da:	e0b4      	b.n	800d746 <HAL_TIM_ConfigClockSource+0x186>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2202      	movs	r2, #2
 800d5e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	4b56      	ldr	r3, [pc, #344]	@ (800d750 <HAL_TIM_ConfigClockSource+0x190>)
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	68ba      	ldr	r2, [r7, #8]
 800d60a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d614:	d03e      	beq.n	800d694 <HAL_TIM_ConfigClockSource+0xd4>
 800d616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d61a:	f200 8087 	bhi.w	800d72c <HAL_TIM_ConfigClockSource+0x16c>
 800d61e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d622:	f000 8086 	beq.w	800d732 <HAL_TIM_ConfigClockSource+0x172>
 800d626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d62a:	d87f      	bhi.n	800d72c <HAL_TIM_ConfigClockSource+0x16c>
 800d62c:	2b70      	cmp	r3, #112	@ 0x70
 800d62e:	d01a      	beq.n	800d666 <HAL_TIM_ConfigClockSource+0xa6>
 800d630:	2b70      	cmp	r3, #112	@ 0x70
 800d632:	d87b      	bhi.n	800d72c <HAL_TIM_ConfigClockSource+0x16c>
 800d634:	2b60      	cmp	r3, #96	@ 0x60
 800d636:	d050      	beq.n	800d6da <HAL_TIM_ConfigClockSource+0x11a>
 800d638:	2b60      	cmp	r3, #96	@ 0x60
 800d63a:	d877      	bhi.n	800d72c <HAL_TIM_ConfigClockSource+0x16c>
 800d63c:	2b50      	cmp	r3, #80	@ 0x50
 800d63e:	d03c      	beq.n	800d6ba <HAL_TIM_ConfigClockSource+0xfa>
 800d640:	2b50      	cmp	r3, #80	@ 0x50
 800d642:	d873      	bhi.n	800d72c <HAL_TIM_ConfigClockSource+0x16c>
 800d644:	2b40      	cmp	r3, #64	@ 0x40
 800d646:	d058      	beq.n	800d6fa <HAL_TIM_ConfigClockSource+0x13a>
 800d648:	2b40      	cmp	r3, #64	@ 0x40
 800d64a:	d86f      	bhi.n	800d72c <HAL_TIM_ConfigClockSource+0x16c>
 800d64c:	2b30      	cmp	r3, #48	@ 0x30
 800d64e:	d064      	beq.n	800d71a <HAL_TIM_ConfigClockSource+0x15a>
 800d650:	2b30      	cmp	r3, #48	@ 0x30
 800d652:	d86b      	bhi.n	800d72c <HAL_TIM_ConfigClockSource+0x16c>
 800d654:	2b20      	cmp	r3, #32
 800d656:	d060      	beq.n	800d71a <HAL_TIM_ConfigClockSource+0x15a>
 800d658:	2b20      	cmp	r3, #32
 800d65a:	d867      	bhi.n	800d72c <HAL_TIM_ConfigClockSource+0x16c>
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d05c      	beq.n	800d71a <HAL_TIM_ConfigClockSource+0x15a>
 800d660:	2b10      	cmp	r3, #16
 800d662:	d05a      	beq.n	800d71a <HAL_TIM_ConfigClockSource+0x15a>
 800d664:	e062      	b.n	800d72c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d676:	f000 fc13 	bl	800dea0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	68ba      	ldr	r2, [r7, #8]
 800d690:	609a      	str	r2, [r3, #8]
      break;
 800d692:	e04f      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d6a4:	f000 fbfc 	bl	800dea0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	689a      	ldr	r2, [r3, #8]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d6b6:	609a      	str	r2, [r3, #8]
      break;
 800d6b8:	e03c      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	f000 fb70 	bl	800ddac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2150      	movs	r1, #80	@ 0x50
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 fbc9 	bl	800de6a <TIM_ITRx_SetConfig>
      break;
 800d6d8:	e02c      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	f000 fb8f 	bl	800de0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2160      	movs	r1, #96	@ 0x60
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f000 fbb9 	bl	800de6a <TIM_ITRx_SetConfig>
      break;
 800d6f8:	e01c      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d706:	461a      	mov	r2, r3
 800d708:	f000 fb50 	bl	800ddac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2140      	movs	r1, #64	@ 0x40
 800d712:	4618      	mov	r0, r3
 800d714:	f000 fba9 	bl	800de6a <TIM_ITRx_SetConfig>
      break;
 800d718:	e00c      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4619      	mov	r1, r3
 800d724:	4610      	mov	r0, r2
 800d726:	f000 fba0 	bl	800de6a <TIM_ITRx_SetConfig>
      break;
 800d72a:	e003      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d72c:	2301      	movs	r3, #1
 800d72e:	73fb      	strb	r3, [r7, #15]
      break;
 800d730:	e000      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d744:	7bfb      	ldrb	r3, [r7, #15]
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	fffeff88 	.word	0xfffeff88

0800d754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d770:	bf00      	nop
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d798:	bf00      	nop
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b085      	sub	sp, #20
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a43      	ldr	r2, [pc, #268]	@ (800d8c4 <TIM_Base_SetConfig+0x120>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d013      	beq.n	800d7e4 <TIM_Base_SetConfig+0x40>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7c2:	d00f      	beq.n	800d7e4 <TIM_Base_SetConfig+0x40>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	4a40      	ldr	r2, [pc, #256]	@ (800d8c8 <TIM_Base_SetConfig+0x124>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d00b      	beq.n	800d7e4 <TIM_Base_SetConfig+0x40>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a3f      	ldr	r2, [pc, #252]	@ (800d8cc <TIM_Base_SetConfig+0x128>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d007      	beq.n	800d7e4 <TIM_Base_SetConfig+0x40>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a3e      	ldr	r2, [pc, #248]	@ (800d8d0 <TIM_Base_SetConfig+0x12c>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d003      	beq.n	800d7e4 <TIM_Base_SetConfig+0x40>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a3d      	ldr	r2, [pc, #244]	@ (800d8d4 <TIM_Base_SetConfig+0x130>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d108      	bne.n	800d7f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a32      	ldr	r2, [pc, #200]	@ (800d8c4 <TIM_Base_SetConfig+0x120>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d02b      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d804:	d027      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a2f      	ldr	r2, [pc, #188]	@ (800d8c8 <TIM_Base_SetConfig+0x124>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d023      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a2e      	ldr	r2, [pc, #184]	@ (800d8cc <TIM_Base_SetConfig+0x128>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d01f      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a2d      	ldr	r2, [pc, #180]	@ (800d8d0 <TIM_Base_SetConfig+0x12c>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d01b      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a2c      	ldr	r2, [pc, #176]	@ (800d8d4 <TIM_Base_SetConfig+0x130>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d017      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a2b      	ldr	r2, [pc, #172]	@ (800d8d8 <TIM_Base_SetConfig+0x134>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d013      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a2a      	ldr	r2, [pc, #168]	@ (800d8dc <TIM_Base_SetConfig+0x138>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d00f      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4a29      	ldr	r2, [pc, #164]	@ (800d8e0 <TIM_Base_SetConfig+0x13c>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d00b      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4a28      	ldr	r2, [pc, #160]	@ (800d8e4 <TIM_Base_SetConfig+0x140>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d007      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4a27      	ldr	r2, [pc, #156]	@ (800d8e8 <TIM_Base_SetConfig+0x144>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d003      	beq.n	800d856 <TIM_Base_SetConfig+0xb2>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4a26      	ldr	r2, [pc, #152]	@ (800d8ec <TIM_Base_SetConfig+0x148>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d108      	bne.n	800d868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d85c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	4313      	orrs	r3, r2
 800d866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	695b      	ldr	r3, [r3, #20]
 800d872:	4313      	orrs	r3, r2
 800d874:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	689a      	ldr	r2, [r3, #8]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4a0e      	ldr	r2, [pc, #56]	@ (800d8c4 <TIM_Base_SetConfig+0x120>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d003      	beq.n	800d896 <TIM_Base_SetConfig+0xf2>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4a10      	ldr	r2, [pc, #64]	@ (800d8d4 <TIM_Base_SetConfig+0x130>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d103      	bne.n	800d89e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	691a      	ldr	r2, [r3, #16]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f043 0204 	orr.w	r2, r3, #4
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	601a      	str	r2, [r3, #0]
}
 800d8b6:	bf00      	nop
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	40010000 	.word	0x40010000
 800d8c8:	40000400 	.word	0x40000400
 800d8cc:	40000800 	.word	0x40000800
 800d8d0:	40000c00 	.word	0x40000c00
 800d8d4:	40010400 	.word	0x40010400
 800d8d8:	40014000 	.word	0x40014000
 800d8dc:	40014400 	.word	0x40014400
 800d8e0:	40014800 	.word	0x40014800
 800d8e4:	40001800 	.word	0x40001800
 800d8e8:	40001c00 	.word	0x40001c00
 800d8ec:	40002000 	.word	0x40002000

0800d8f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b087      	sub	sp, #28
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a1b      	ldr	r3, [r3, #32]
 800d8fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6a1b      	ldr	r3, [r3, #32]
 800d904:	f023 0201 	bic.w	r2, r3, #1
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	699b      	ldr	r3, [r3, #24]
 800d916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	4b2b      	ldr	r3, [pc, #172]	@ (800d9c8 <TIM_OC1_SetConfig+0xd8>)
 800d91c:	4013      	ands	r3, r2
 800d91e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f023 0303 	bic.w	r3, r3, #3
 800d926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68fa      	ldr	r2, [r7, #12]
 800d92e:	4313      	orrs	r3, r2
 800d930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	f023 0302 	bic.w	r3, r3, #2
 800d938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	697a      	ldr	r2, [r7, #20]
 800d940:	4313      	orrs	r3, r2
 800d942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	4a21      	ldr	r2, [pc, #132]	@ (800d9cc <TIM_OC1_SetConfig+0xdc>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d003      	beq.n	800d954 <TIM_OC1_SetConfig+0x64>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4a20      	ldr	r2, [pc, #128]	@ (800d9d0 <TIM_OC1_SetConfig+0xe0>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d10c      	bne.n	800d96e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	f023 0308 	bic.w	r3, r3, #8
 800d95a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	697a      	ldr	r2, [r7, #20]
 800d962:	4313      	orrs	r3, r2
 800d964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	f023 0304 	bic.w	r3, r3, #4
 800d96c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	4a16      	ldr	r2, [pc, #88]	@ (800d9cc <TIM_OC1_SetConfig+0xdc>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d003      	beq.n	800d97e <TIM_OC1_SetConfig+0x8e>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	4a15      	ldr	r2, [pc, #84]	@ (800d9d0 <TIM_OC1_SetConfig+0xe0>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d111      	bne.n	800d9a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d98c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	695b      	ldr	r3, [r3, #20]
 800d992:	693a      	ldr	r2, [r7, #16]
 800d994:	4313      	orrs	r3, r2
 800d996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	699b      	ldr	r3, [r3, #24]
 800d99c:	693a      	ldr	r2, [r7, #16]
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	693a      	ldr	r2, [r7, #16]
 800d9a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	68fa      	ldr	r2, [r7, #12]
 800d9ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	685a      	ldr	r2, [r3, #4]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	697a      	ldr	r2, [r7, #20]
 800d9ba:	621a      	str	r2, [r3, #32]
}
 800d9bc:	bf00      	nop
 800d9be:	371c      	adds	r7, #28
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	fffeff8f 	.word	0xfffeff8f
 800d9cc:	40010000 	.word	0x40010000
 800d9d0:	40010400 	.word	0x40010400

0800d9d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b087      	sub	sp, #28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6a1b      	ldr	r3, [r3, #32]
 800d9e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6a1b      	ldr	r3, [r3, #32]
 800d9e8:	f023 0210 	bic.w	r2, r3, #16
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	4b2e      	ldr	r3, [pc, #184]	@ (800dab8 <TIM_OC2_SetConfig+0xe4>)
 800da00:	4013      	ands	r3, r2
 800da02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800da0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	021b      	lsls	r3, r3, #8
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	4313      	orrs	r3, r2
 800da16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	f023 0320 	bic.w	r3, r3, #32
 800da1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	011b      	lsls	r3, r3, #4
 800da26:	697a      	ldr	r2, [r7, #20]
 800da28:	4313      	orrs	r3, r2
 800da2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a23      	ldr	r2, [pc, #140]	@ (800dabc <TIM_OC2_SetConfig+0xe8>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d003      	beq.n	800da3c <TIM_OC2_SetConfig+0x68>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a22      	ldr	r2, [pc, #136]	@ (800dac0 <TIM_OC2_SetConfig+0xec>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d10d      	bne.n	800da58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	011b      	lsls	r3, r3, #4
 800da4a:	697a      	ldr	r2, [r7, #20]
 800da4c:	4313      	orrs	r3, r2
 800da4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	4a18      	ldr	r2, [pc, #96]	@ (800dabc <TIM_OC2_SetConfig+0xe8>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d003      	beq.n	800da68 <TIM_OC2_SetConfig+0x94>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4a17      	ldr	r2, [pc, #92]	@ (800dac0 <TIM_OC2_SetConfig+0xec>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d113      	bne.n	800da90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800da6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800da76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	695b      	ldr	r3, [r3, #20]
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	693a      	ldr	r2, [r7, #16]
 800da80:	4313      	orrs	r3, r2
 800da82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	699b      	ldr	r3, [r3, #24]
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	693a      	ldr	r2, [r7, #16]
 800da8c:	4313      	orrs	r3, r2
 800da8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	693a      	ldr	r2, [r7, #16]
 800da94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	685a      	ldr	r2, [r3, #4]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	697a      	ldr	r2, [r7, #20]
 800daa8:	621a      	str	r2, [r3, #32]
}
 800daaa:	bf00      	nop
 800daac:	371c      	adds	r7, #28
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop
 800dab8:	feff8fff 	.word	0xfeff8fff
 800dabc:	40010000 	.word	0x40010000
 800dac0:	40010400 	.word	0x40010400

0800dac4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b087      	sub	sp, #28
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a1b      	ldr	r3, [r3, #32]
 800dad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6a1b      	ldr	r3, [r3, #32]
 800dad8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	69db      	ldr	r3, [r3, #28]
 800daea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	4b2d      	ldr	r3, [pc, #180]	@ (800dba4 <TIM_OC3_SetConfig+0xe0>)
 800daf0:	4013      	ands	r3, r2
 800daf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f023 0303 	bic.w	r3, r3, #3
 800dafa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	4313      	orrs	r3, r2
 800db04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800db0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	689b      	ldr	r3, [r3, #8]
 800db12:	021b      	lsls	r3, r3, #8
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	4313      	orrs	r3, r2
 800db18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	4a22      	ldr	r2, [pc, #136]	@ (800dba8 <TIM_OC3_SetConfig+0xe4>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d003      	beq.n	800db2a <TIM_OC3_SetConfig+0x66>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	4a21      	ldr	r2, [pc, #132]	@ (800dbac <TIM_OC3_SetConfig+0xe8>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d10d      	bne.n	800db46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800db30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	68db      	ldr	r3, [r3, #12]
 800db36:	021b      	lsls	r3, r3, #8
 800db38:	697a      	ldr	r2, [r7, #20]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800db44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4a17      	ldr	r2, [pc, #92]	@ (800dba8 <TIM_OC3_SetConfig+0xe4>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d003      	beq.n	800db56 <TIM_OC3_SetConfig+0x92>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	4a16      	ldr	r2, [pc, #88]	@ (800dbac <TIM_OC3_SetConfig+0xe8>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d113      	bne.n	800db7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800db64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	695b      	ldr	r3, [r3, #20]
 800db6a:	011b      	lsls	r3, r3, #4
 800db6c:	693a      	ldr	r2, [r7, #16]
 800db6e:	4313      	orrs	r3, r2
 800db70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	699b      	ldr	r3, [r3, #24]
 800db76:	011b      	lsls	r3, r3, #4
 800db78:	693a      	ldr	r2, [r7, #16]
 800db7a:	4313      	orrs	r3, r2
 800db7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	693a      	ldr	r2, [r7, #16]
 800db82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	685a      	ldr	r2, [r3, #4]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	697a      	ldr	r2, [r7, #20]
 800db96:	621a      	str	r2, [r3, #32]
}
 800db98:	bf00      	nop
 800db9a:	371c      	adds	r7, #28
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr
 800dba4:	fffeff8f 	.word	0xfffeff8f
 800dba8:	40010000 	.word	0x40010000
 800dbac:	40010400 	.word	0x40010400

0800dbb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b087      	sub	sp, #28
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6a1b      	ldr	r3, [r3, #32]
 800dbbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a1b      	ldr	r3, [r3, #32]
 800dbc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	69db      	ldr	r3, [r3, #28]
 800dbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	4b1e      	ldr	r3, [pc, #120]	@ (800dc54 <TIM_OC4_SetConfig+0xa4>)
 800dbdc:	4013      	ands	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dbe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	021b      	lsls	r3, r3, #8
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dbfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	031b      	lsls	r3, r3, #12
 800dc02:	693a      	ldr	r2, [r7, #16]
 800dc04:	4313      	orrs	r3, r2
 800dc06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4a13      	ldr	r2, [pc, #76]	@ (800dc58 <TIM_OC4_SetConfig+0xa8>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d003      	beq.n	800dc18 <TIM_OC4_SetConfig+0x68>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	4a12      	ldr	r2, [pc, #72]	@ (800dc5c <TIM_OC4_SetConfig+0xac>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d109      	bne.n	800dc2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dc1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	695b      	ldr	r3, [r3, #20]
 800dc24:	019b      	lsls	r3, r3, #6
 800dc26:	697a      	ldr	r2, [r7, #20]
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	697a      	ldr	r2, [r7, #20]
 800dc30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	68fa      	ldr	r2, [r7, #12]
 800dc36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	685a      	ldr	r2, [r3, #4]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	693a      	ldr	r2, [r7, #16]
 800dc44:	621a      	str	r2, [r3, #32]
}
 800dc46:	bf00      	nop
 800dc48:	371c      	adds	r7, #28
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop
 800dc54:	feff8fff 	.word	0xfeff8fff
 800dc58:	40010000 	.word	0x40010000
 800dc5c:	40010400 	.word	0x40010400

0800dc60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b087      	sub	sp, #28
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a1b      	ldr	r3, [r3, #32]
 800dc6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6a1b      	ldr	r3, [r3, #32]
 800dc74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	4b1b      	ldr	r3, [pc, #108]	@ (800dcf8 <TIM_OC5_SetConfig+0x98>)
 800dc8c:	4013      	ands	r3, r2
 800dc8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	68fa      	ldr	r2, [r7, #12]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800dca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	041b      	lsls	r3, r3, #16
 800dca8:	693a      	ldr	r2, [r7, #16]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a12      	ldr	r2, [pc, #72]	@ (800dcfc <TIM_OC5_SetConfig+0x9c>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d003      	beq.n	800dcbe <TIM_OC5_SetConfig+0x5e>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4a11      	ldr	r2, [pc, #68]	@ (800dd00 <TIM_OC5_SetConfig+0xa0>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d109      	bne.n	800dcd2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dcc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	695b      	ldr	r3, [r3, #20]
 800dcca:	021b      	lsls	r3, r3, #8
 800dccc:	697a      	ldr	r2, [r7, #20]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	697a      	ldr	r2, [r7, #20]
 800dcd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	685a      	ldr	r2, [r3, #4]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	693a      	ldr	r2, [r7, #16]
 800dcea:	621a      	str	r2, [r3, #32]
}
 800dcec:	bf00      	nop
 800dcee:	371c      	adds	r7, #28
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr
 800dcf8:	fffeff8f 	.word	0xfffeff8f
 800dcfc:	40010000 	.word	0x40010000
 800dd00:	40010400 	.word	0x40010400

0800dd04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b087      	sub	sp, #28
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a1b      	ldr	r3, [r3, #32]
 800dd12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a1b      	ldr	r3, [r3, #32]
 800dd18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	4b1c      	ldr	r3, [pc, #112]	@ (800dda0 <TIM_OC6_SetConfig+0x9c>)
 800dd30:	4013      	ands	r3, r2
 800dd32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	021b      	lsls	r3, r3, #8
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dd46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	689b      	ldr	r3, [r3, #8]
 800dd4c:	051b      	lsls	r3, r3, #20
 800dd4e:	693a      	ldr	r2, [r7, #16]
 800dd50:	4313      	orrs	r3, r2
 800dd52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a13      	ldr	r2, [pc, #76]	@ (800dda4 <TIM_OC6_SetConfig+0xa0>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d003      	beq.n	800dd64 <TIM_OC6_SetConfig+0x60>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4a12      	ldr	r2, [pc, #72]	@ (800dda8 <TIM_OC6_SetConfig+0xa4>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d109      	bne.n	800dd78 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dd6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	695b      	ldr	r3, [r3, #20]
 800dd70:	029b      	lsls	r3, r3, #10
 800dd72:	697a      	ldr	r2, [r7, #20]
 800dd74:	4313      	orrs	r3, r2
 800dd76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	697a      	ldr	r2, [r7, #20]
 800dd7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	693a      	ldr	r2, [r7, #16]
 800dd90:	621a      	str	r2, [r3, #32]
}
 800dd92:	bf00      	nop
 800dd94:	371c      	adds	r7, #28
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr
 800dd9e:	bf00      	nop
 800dda0:	feff8fff 	.word	0xfeff8fff
 800dda4:	40010000 	.word	0x40010000
 800dda8:	40010400 	.word	0x40010400

0800ddac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6a1b      	ldr	r3, [r3, #32]
 800ddbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6a1b      	ldr	r3, [r3, #32]
 800ddc2:	f023 0201 	bic.w	r2, r3, #1
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	699b      	ldr	r3, [r3, #24]
 800ddce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ddd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	011b      	lsls	r3, r3, #4
 800dddc:	693a      	ldr	r2, [r7, #16]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	f023 030a 	bic.w	r3, r3, #10
 800dde8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ddea:	697a      	ldr	r2, [r7, #20]
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	693a      	ldr	r2, [r7, #16]
 800ddf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	697a      	ldr	r2, [r7, #20]
 800ddfc:	621a      	str	r2, [r3, #32]
}
 800ddfe:	bf00      	nop
 800de00:	371c      	adds	r7, #28
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr

0800de0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de0a:	b480      	push	{r7}
 800de0c:	b087      	sub	sp, #28
 800de0e:	af00      	add	r7, sp, #0
 800de10:	60f8      	str	r0, [r7, #12]
 800de12:	60b9      	str	r1, [r7, #8]
 800de14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6a1b      	ldr	r3, [r3, #32]
 800de20:	f023 0210 	bic.w	r2, r3, #16
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	699b      	ldr	r3, [r3, #24]
 800de2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800de34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	031b      	lsls	r3, r3, #12
 800de3a:	693a      	ldr	r2, [r7, #16]
 800de3c:	4313      	orrs	r3, r2
 800de3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800de46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	011b      	lsls	r3, r3, #4
 800de4c:	697a      	ldr	r2, [r7, #20]
 800de4e:	4313      	orrs	r3, r2
 800de50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	693a      	ldr	r2, [r7, #16]
 800de56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	697a      	ldr	r2, [r7, #20]
 800de5c:	621a      	str	r2, [r3, #32]
}
 800de5e:	bf00      	nop
 800de60:	371c      	adds	r7, #28
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr

0800de6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de6a:	b480      	push	{r7}
 800de6c:	b085      	sub	sp, #20
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
 800de72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	689b      	ldr	r3, [r3, #8]
 800de78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	4313      	orrs	r3, r2
 800de88:	f043 0307 	orr.w	r3, r3, #7
 800de8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	68fa      	ldr	r2, [r7, #12]
 800de92:	609a      	str	r2, [r3, #8]
}
 800de94:	bf00      	nop
 800de96:	3714      	adds	r7, #20
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr

0800dea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b087      	sub	sp, #28
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	607a      	str	r2, [r7, #4]
 800deac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800deba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	021a      	lsls	r2, r3, #8
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	431a      	orrs	r2, r3
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	4313      	orrs	r3, r2
 800dec8:	697a      	ldr	r2, [r7, #20]
 800deca:	4313      	orrs	r3, r2
 800decc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	697a      	ldr	r2, [r7, #20]
 800ded2:	609a      	str	r2, [r3, #8]
}
 800ded4:	bf00      	nop
 800ded6:	371c      	adds	r7, #28
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800def0:	2b01      	cmp	r3, #1
 800def2:	d101      	bne.n	800def8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800def4:	2302      	movs	r3, #2
 800def6:	e06d      	b.n	800dfd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2201      	movs	r2, #1
 800defc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2202      	movs	r2, #2
 800df04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	689b      	ldr	r3, [r3, #8]
 800df16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a30      	ldr	r2, [pc, #192]	@ (800dfe0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d004      	beq.n	800df2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4a2f      	ldr	r2, [pc, #188]	@ (800dfe4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d108      	bne.n	800df3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800df32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	4313      	orrs	r3, r2
 800df3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	68fa      	ldr	r2, [r7, #12]
 800df4c:	4313      	orrs	r3, r2
 800df4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a20      	ldr	r2, [pc, #128]	@ (800dfe0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d022      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df6a:	d01d      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a1d      	ldr	r2, [pc, #116]	@ (800dfe8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d018      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a1c      	ldr	r2, [pc, #112]	@ (800dfec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d013      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a1a      	ldr	r2, [pc, #104]	@ (800dff0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d00e      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4a15      	ldr	r2, [pc, #84]	@ (800dfe4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d009      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a16      	ldr	r2, [pc, #88]	@ (800dff4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d004      	beq.n	800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	4a15      	ldr	r2, [pc, #84]	@ (800dff8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d10c      	bne.n	800dfc2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dfae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3714      	adds	r7, #20
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr
 800dfe0:	40010000 	.word	0x40010000
 800dfe4:	40010400 	.word	0x40010400
 800dfe8:	40000400 	.word	0x40000400
 800dfec:	40000800 	.word	0x40000800
 800dff0:	40000c00 	.word	0x40000c00
 800dff4:	40014000 	.word	0x40014000
 800dff8:	40001800 	.word	0x40001800

0800dffc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e006:	2300      	movs	r3, #0
 800e008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e010:	2b01      	cmp	r3, #1
 800e012:	d101      	bne.n	800e018 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e014:	2302      	movs	r3, #2
 800e016:	e065      	b.n	800e0e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	4313      	orrs	r3, r2
 800e02c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	4313      	orrs	r3, r2
 800e03a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	4313      	orrs	r3, r2
 800e048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4313      	orrs	r3, r2
 800e056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	4313      	orrs	r3, r2
 800e064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	695b      	ldr	r3, [r3, #20]
 800e070:	4313      	orrs	r3, r2
 800e072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e07e:	4313      	orrs	r3, r2
 800e080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	699b      	ldr	r3, [r3, #24]
 800e08c:	041b      	lsls	r3, r3, #16
 800e08e:	4313      	orrs	r3, r2
 800e090:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4a16      	ldr	r2, [pc, #88]	@ (800e0f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d004      	beq.n	800e0a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a14      	ldr	r2, [pc, #80]	@ (800e0f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d115      	bne.n	800e0d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0b0:	051b      	lsls	r3, r3, #20
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	69db      	ldr	r3, [r3, #28]
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	6a1b      	ldr	r3, [r3, #32]
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3714      	adds	r7, #20
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr
 800e0f0:	40010000 	.word	0x40010000
 800e0f4:	40010400 	.word	0x40010400

0800e0f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e100:	bf00      	nop
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e114:	bf00      	nop
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e120:	b480      	push	{r7}
 800e122:	b083      	sub	sp, #12
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d101      	bne.n	800e146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e142:	2301      	movs	r3, #1
 800e144:	e040      	b.n	800e1c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d106      	bne.n	800e15c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f7f5 fecc 	bl	8003ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2224      	movs	r2, #36	@ 0x24
 800e160:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f022 0201 	bic.w	r2, r2, #1
 800e170:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e176:	2b00      	cmp	r3, #0
 800e178:	d002      	beq.n	800e180 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 ffb6 	bl	800f0ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 fd4f 	bl	800ec24 <UART_SetConfig>
 800e186:	4603      	mov	r3, r0
 800e188:	2b01      	cmp	r3, #1
 800e18a:	d101      	bne.n	800e190 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800e18c:	2301      	movs	r3, #1
 800e18e:	e01b      	b.n	800e1c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	685a      	ldr	r2, [r3, #4]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e19e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	689a      	ldr	r2, [r3, #8]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e1ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f042 0201 	orr.w	r2, r2, #1
 800e1be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f001 f835 	bl	800f230 <UART_CheckIdleState>
 800e1c6:	4603      	mov	r3, r0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b08a      	sub	sp, #40	@ 0x28
 800e1d4:	af02      	add	r7, sp, #8
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	603b      	str	r3, [r7, #0]
 800e1dc:	4613      	mov	r3, r2
 800e1de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1e4:	2b20      	cmp	r3, #32
 800e1e6:	d177      	bne.n	800e2d8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d002      	beq.n	800e1f4 <HAL_UART_Transmit+0x24>
 800e1ee:	88fb      	ldrh	r3, [r7, #6]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d101      	bne.n	800e1f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	e070      	b.n	800e2da <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2221      	movs	r2, #33	@ 0x21
 800e204:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e206:	f7f6 ff63 	bl	80050d0 <HAL_GetTick>
 800e20a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	88fa      	ldrh	r2, [r7, #6]
 800e210:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	88fa      	ldrh	r2, [r7, #6]
 800e218:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e224:	d108      	bne.n	800e238 <HAL_UART_Transmit+0x68>
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d104      	bne.n	800e238 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e22e:	2300      	movs	r3, #0
 800e230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	61bb      	str	r3, [r7, #24]
 800e236:	e003      	b.n	800e240 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e23c:	2300      	movs	r3, #0
 800e23e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e240:	e02f      	b.n	800e2a2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	2200      	movs	r2, #0
 800e24a:	2180      	movs	r1, #128	@ 0x80
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f001 f846 	bl	800f2de <UART_WaitOnFlagUntilTimeout>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d004      	beq.n	800e262 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2220      	movs	r2, #32
 800e25c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e25e:	2303      	movs	r3, #3
 800e260:	e03b      	b.n	800e2da <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d10b      	bne.n	800e280 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	881b      	ldrh	r3, [r3, #0]
 800e26c:	461a      	mov	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e276:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	3302      	adds	r3, #2
 800e27c:	61bb      	str	r3, [r7, #24]
 800e27e:	e007      	b.n	800e290 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	781a      	ldrb	r2, [r3, #0]
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	3301      	adds	r3, #1
 800e28e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e296:	b29b      	uxth	r3, r3
 800e298:	3b01      	subs	r3, #1
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d1c9      	bne.n	800e242 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	9300      	str	r3, [sp, #0]
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	2140      	movs	r1, #64	@ 0x40
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f001 f810 	bl	800f2de <UART_WaitOnFlagUntilTimeout>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d004      	beq.n	800e2ce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2220      	movs	r2, #32
 800e2c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e2ca:	2303      	movs	r3, #3
 800e2cc:	e005      	b.n	800e2da <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2220      	movs	r2, #32
 800e2d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	e000      	b.n	800e2da <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e2d8:	2302      	movs	r3, #2
  }
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3720      	adds	r7, #32
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b08a      	sub	sp, #40	@ 0x28
 800e2e6:	af02      	add	r7, sp, #8
 800e2e8:	60f8      	str	r0, [r7, #12]
 800e2ea:	60b9      	str	r1, [r7, #8]
 800e2ec:	603b      	str	r3, [r7, #0]
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2f8:	2b20      	cmp	r3, #32
 800e2fa:	f040 80b5 	bne.w	800e468 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d002      	beq.n	800e30a <HAL_UART_Receive+0x28>
 800e304:	88fb      	ldrh	r3, [r7, #6]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d101      	bne.n	800e30e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e30a:	2301      	movs	r3, #1
 800e30c:	e0ad      	b.n	800e46a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2200      	movs	r2, #0
 800e312:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2222      	movs	r2, #34	@ 0x22
 800e31a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2200      	movs	r2, #0
 800e322:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e324:	f7f6 fed4 	bl	80050d0 <HAL_GetTick>
 800e328:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	88fa      	ldrh	r2, [r7, #6]
 800e32e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	88fa      	ldrh	r2, [r7, #6]
 800e336:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e342:	d10e      	bne.n	800e362 <HAL_UART_Receive+0x80>
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	691b      	ldr	r3, [r3, #16]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d105      	bne.n	800e358 <HAL_UART_Receive+0x76>
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e352:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e356:	e02d      	b.n	800e3b4 <HAL_UART_Receive+0xd2>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	22ff      	movs	r2, #255	@ 0xff
 800e35c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e360:	e028      	b.n	800e3b4 <HAL_UART_Receive+0xd2>
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d10d      	bne.n	800e386 <HAL_UART_Receive+0xa4>
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	691b      	ldr	r3, [r3, #16]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d104      	bne.n	800e37c <HAL_UART_Receive+0x9a>
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	22ff      	movs	r2, #255	@ 0xff
 800e376:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e37a:	e01b      	b.n	800e3b4 <HAL_UART_Receive+0xd2>
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	227f      	movs	r2, #127	@ 0x7f
 800e380:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e384:	e016      	b.n	800e3b4 <HAL_UART_Receive+0xd2>
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e38e:	d10d      	bne.n	800e3ac <HAL_UART_Receive+0xca>
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	691b      	ldr	r3, [r3, #16]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d104      	bne.n	800e3a2 <HAL_UART_Receive+0xc0>
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	227f      	movs	r2, #127	@ 0x7f
 800e39c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e3a0:	e008      	b.n	800e3b4 <HAL_UART_Receive+0xd2>
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	223f      	movs	r2, #63	@ 0x3f
 800e3a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e3aa:	e003      	b.n	800e3b4 <HAL_UART_Receive+0xd2>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e3ba:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3c4:	d108      	bne.n	800e3d8 <HAL_UART_Receive+0xf6>
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	691b      	ldr	r3, [r3, #16]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d104      	bne.n	800e3d8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	61bb      	str	r3, [r7, #24]
 800e3d6:	e003      	b.n	800e3e0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e3e0:	e036      	b.n	800e450 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	9300      	str	r3, [sp, #0]
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	2120      	movs	r1, #32
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	f000 ff76 	bl	800f2de <UART_WaitOnFlagUntilTimeout>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d005      	beq.n	800e404 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2220      	movs	r2, #32
 800e3fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800e400:	2303      	movs	r3, #3
 800e402:	e032      	b.n	800e46a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d10c      	bne.n	800e424 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e410:	b29a      	uxth	r2, r3
 800e412:	8a7b      	ldrh	r3, [r7, #18]
 800e414:	4013      	ands	r3, r2
 800e416:	b29a      	uxth	r2, r3
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	3302      	adds	r3, #2
 800e420:	61bb      	str	r3, [r7, #24]
 800e422:	e00c      	b.n	800e43e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e42a:	b2da      	uxtb	r2, r3
 800e42c:	8a7b      	ldrh	r3, [r7, #18]
 800e42e:	b2db      	uxtb	r3, r3
 800e430:	4013      	ands	r3, r2
 800e432:	b2da      	uxtb	r2, r3
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	3301      	adds	r3, #1
 800e43c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e444:	b29b      	uxth	r3, r3
 800e446:	3b01      	subs	r3, #1
 800e448:	b29a      	uxth	r2, r3
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e456:	b29b      	uxth	r3, r3
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1c2      	bne.n	800e3e2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2220      	movs	r2, #32
 800e460:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800e464:	2300      	movs	r3, #0
 800e466:	e000      	b.n	800e46a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e468:	2302      	movs	r3, #2
  }
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3720      	adds	r7, #32
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}

0800e472 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e472:	b580      	push	{r7, lr}
 800e474:	b08a      	sub	sp, #40	@ 0x28
 800e476:	af00      	add	r7, sp, #0
 800e478:	60f8      	str	r0, [r7, #12]
 800e47a:	60b9      	str	r1, [r7, #8]
 800e47c:	4613      	mov	r3, r2
 800e47e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e486:	2b20      	cmp	r3, #32
 800e488:	d132      	bne.n	800e4f0 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d002      	beq.n	800e496 <HAL_UART_Receive_DMA+0x24>
 800e490:	88fb      	ldrh	r3, [r7, #6]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d101      	bne.n	800e49a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e496:	2301      	movs	r3, #1
 800e498:	e02b      	b.n	800e4f2 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2200      	movs	r2, #0
 800e49e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d018      	beq.n	800e4e0 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	e853 3f00 	ldrex	r3, [r3]
 800e4ba:	613b      	str	r3, [r7, #16]
   return(result);
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e4c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4cc:	623b      	str	r3, [r7, #32]
 800e4ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d0:	69f9      	ldr	r1, [r7, #28]
 800e4d2:	6a3a      	ldr	r2, [r7, #32]
 800e4d4:	e841 2300 	strex	r3, r2, [r1]
 800e4d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1e6      	bne.n	800e4ae <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e4e0:	88fb      	ldrh	r3, [r7, #6]
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	68b9      	ldr	r1, [r7, #8]
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f000 ff66 	bl	800f3b8 <UART_Start_Receive_DMA>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	e000      	b.n	800e4f2 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800e4f0:	2302      	movs	r3, #2
  }
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3728      	adds	r7, #40	@ 0x28
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e4fa:	b580      	push	{r7, lr}
 800e4fc:	b090      	sub	sp, #64	@ 0x40
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e506:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e50e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	689b      	ldr	r3, [r3, #8]
 800e516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e51a:	2b80      	cmp	r3, #128	@ 0x80
 800e51c:	d139      	bne.n	800e592 <HAL_UART_DMAStop+0x98>
 800e51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e520:	2b21      	cmp	r3, #33	@ 0x21
 800e522:	d136      	bne.n	800e592 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3308      	adds	r3, #8
 800e52a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52c:	6a3b      	ldr	r3, [r7, #32]
 800e52e:	e853 3f00 	ldrex	r3, [r3]
 800e532:	61fb      	str	r3, [r7, #28]
   return(result);
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e53a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	3308      	adds	r3, #8
 800e542:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e544:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e546:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e548:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e54a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e54c:	e841 2300 	strex	r3, r2, [r1]
 800e550:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e554:	2b00      	cmp	r3, #0
 800e556:	d1e5      	bne.n	800e524 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d015      	beq.n	800e58c <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e564:	4618      	mov	r0, r3
 800e566:	f7f7 fc35 	bl	8005dd4 <HAL_DMA_Abort>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00d      	beq.n	800e58c <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e574:	4618      	mov	r0, r3
 800e576:	f7f7 fe49 	bl	800620c <HAL_DMA_GetError>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b20      	cmp	r3, #32
 800e57e:	d105      	bne.n	800e58c <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2210      	movs	r2, #16
 800e584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e588:	2303      	movs	r3, #3
 800e58a:	e044      	b.n	800e616 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 ffb3 	bl	800f4f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	689b      	ldr	r3, [r3, #8]
 800e598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e59c:	2b40      	cmp	r3, #64	@ 0x40
 800e59e:	d139      	bne.n	800e614 <HAL_UART_DMAStop+0x11a>
 800e5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a2:	2b22      	cmp	r3, #34	@ 0x22
 800e5a4:	d136      	bne.n	800e614 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	3308      	adds	r3, #8
 800e5ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	e853 3f00 	ldrex	r3, [r3]
 800e5b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	3308      	adds	r3, #8
 800e5c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5c6:	61ba      	str	r2, [r7, #24]
 800e5c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ca:	6979      	ldr	r1, [r7, #20]
 800e5cc:	69ba      	ldr	r2, [r7, #24]
 800e5ce:	e841 2300 	strex	r3, r2, [r1]
 800e5d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1e5      	bne.n	800e5a6 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d015      	beq.n	800e60e <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7f7 fbf4 	bl	8005dd4 <HAL_DMA_Abort>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00d      	beq.n	800e60e <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7f7 fe08 	bl	800620c <HAL_DMA_GetError>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b20      	cmp	r3, #32
 800e600:	d105      	bne.n	800e60e <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2210      	movs	r2, #16
 800e606:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e60a:	2303      	movs	r3, #3
 800e60c:	e003      	b.n	800e616 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 ff98 	bl	800f544 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3740      	adds	r7, #64	@ 0x40
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
	...

0800e620 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b0ba      	sub	sp, #232	@ 0xe8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	69db      	ldr	r3, [r3, #28]
 800e62e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e646:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e64a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e64e:	4013      	ands	r3, r2
 800e650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d115      	bne.n	800e688 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e660:	f003 0320 	and.w	r3, r3, #32
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00f      	beq.n	800e688 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e66c:	f003 0320 	and.w	r3, r3, #32
 800e670:	2b00      	cmp	r3, #0
 800e672:	d009      	beq.n	800e688 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f000 82b1 	beq.w	800ebe0 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	4798      	blx	r3
      }
      return;
 800e686:	e2ab      	b.n	800ebe0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f000 8117 	beq.w	800e8c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e696:	f003 0301 	and.w	r3, r3, #1
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d106      	bne.n	800e6ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e69e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e6a2:	4b85      	ldr	r3, [pc, #532]	@ (800e8b8 <HAL_UART_IRQHandler+0x298>)
 800e6a4:	4013      	ands	r3, r2
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	f000 810a 	beq.w	800e8c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e6ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6b0:	f003 0301 	and.w	r3, r3, #1
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d011      	beq.n	800e6dc <HAL_UART_IRQHandler+0xbc>
 800e6b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00b      	beq.n	800e6dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6d2:	f043 0201 	orr.w	r2, r3, #1
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6e0:	f003 0302 	and.w	r3, r3, #2
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d011      	beq.n	800e70c <HAL_UART_IRQHandler+0xec>
 800e6e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6ec:	f003 0301 	and.w	r3, r3, #1
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00b      	beq.n	800e70c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2202      	movs	r2, #2
 800e6fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e702:	f043 0204 	orr.w	r2, r3, #4
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e710:	f003 0304 	and.w	r3, r3, #4
 800e714:	2b00      	cmp	r3, #0
 800e716:	d011      	beq.n	800e73c <HAL_UART_IRQHandler+0x11c>
 800e718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e71c:	f003 0301 	and.w	r3, r3, #1
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00b      	beq.n	800e73c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2204      	movs	r2, #4
 800e72a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e732:	f043 0202 	orr.w	r2, r3, #2
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e740:	f003 0308 	and.w	r3, r3, #8
 800e744:	2b00      	cmp	r3, #0
 800e746:	d017      	beq.n	800e778 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e74c:	f003 0320 	and.w	r3, r3, #32
 800e750:	2b00      	cmp	r3, #0
 800e752:	d105      	bne.n	800e760 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e758:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d00b      	beq.n	800e778 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2208      	movs	r2, #8
 800e766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e76e:	f043 0208 	orr.w	r2, r3, #8
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e77c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e780:	2b00      	cmp	r3, #0
 800e782:	d012      	beq.n	800e7aa <HAL_UART_IRQHandler+0x18a>
 800e784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e788:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00c      	beq.n	800e7aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7a0:	f043 0220 	orr.w	r2, r3, #32
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	f000 8217 	beq.w	800ebe4 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e7b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7ba:	f003 0320 	and.w	r3, r3, #32
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d00d      	beq.n	800e7de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e7c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7c6:	f003 0320 	and.w	r3, r3, #32
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d007      	beq.n	800e7de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d003      	beq.n	800e7de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7f2:	2b40      	cmp	r3, #64	@ 0x40
 800e7f4:	d005      	beq.n	800e802 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e7f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e7fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d04f      	beq.n	800e8a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 fe9e 	bl	800f544 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	689b      	ldr	r3, [r3, #8]
 800e80e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e812:	2b40      	cmp	r3, #64	@ 0x40
 800e814:	d141      	bne.n	800e89a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	3308      	adds	r3, #8
 800e81c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e820:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e824:	e853 3f00 	ldrex	r3, [r3]
 800e828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e82c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	3308      	adds	r3, #8
 800e83e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e842:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e84a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e84e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e852:	e841 2300 	strex	r3, r2, [r1]
 800e856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e85a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d1d9      	bne.n	800e816 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e866:	2b00      	cmp	r3, #0
 800e868:	d013      	beq.n	800e892 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e86e:	4a13      	ldr	r2, [pc, #76]	@ (800e8bc <HAL_UART_IRQHandler+0x29c>)
 800e870:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e876:	4618      	mov	r0, r3
 800e878:	f7f7 fb1c 	bl	8005eb4 <HAL_DMA_Abort_IT>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d017      	beq.n	800e8b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800e88c:	4610      	mov	r0, r2
 800e88e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e890:	e00f      	b.n	800e8b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7f6 faaa 	bl	8004dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e898:	e00b      	b.n	800e8b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7f6 faa6 	bl	8004dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8a0:	e007      	b.n	800e8b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f7f6 faa2 	bl	8004dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800e8b0:	e198      	b.n	800ebe4 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8b2:	bf00      	nop
    return;
 800e8b4:	e196      	b.n	800ebe4 <HAL_UART_IRQHandler+0x5c4>
 800e8b6:	bf00      	nop
 800e8b8:	04000120 	.word	0x04000120
 800e8bc:	0800f85b 	.word	0x0800f85b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	f040 8166 	bne.w	800eb96 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8ce:	f003 0310 	and.w	r3, r3, #16
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	f000 815f 	beq.w	800eb96 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e8d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8dc:	f003 0310 	and.w	r3, r3, #16
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f000 8158 	beq.w	800eb96 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	2210      	movs	r2, #16
 800e8ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8f8:	2b40      	cmp	r3, #64	@ 0x40
 800e8fa:	f040 80d0 	bne.w	800ea9e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e90a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e90e:	2b00      	cmp	r3, #0
 800e910:	f000 80ab 	beq.w	800ea6a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e91a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e91e:	429a      	cmp	r2, r3
 800e920:	f080 80a3 	bcs.w	800ea6a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e92a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e932:	69db      	ldr	r3, [r3, #28]
 800e934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e938:	f000 8086 	beq.w	800ea48 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e944:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e948:	e853 3f00 	ldrex	r3, [r3]
 800e94c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e950:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	461a      	mov	r2, r3
 800e962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e966:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e96a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e96e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e972:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e976:	e841 2300 	strex	r3, r2, [r1]
 800e97a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e97e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e982:	2b00      	cmp	r3, #0
 800e984:	d1da      	bne.n	800e93c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	3308      	adds	r3, #8
 800e98c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e98e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e990:	e853 3f00 	ldrex	r3, [r3]
 800e994:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e996:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e998:	f023 0301 	bic.w	r3, r3, #1
 800e99c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	3308      	adds	r3, #8
 800e9a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e9aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e9ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e9b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e9b6:	e841 2300 	strex	r3, r2, [r1]
 800e9ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e9bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d1e1      	bne.n	800e986 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	3308      	adds	r3, #8
 800e9c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9cc:	e853 3f00 	ldrex	r3, [r3]
 800e9d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e9d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	3308      	adds	r3, #8
 800e9e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e9e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e9e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e9ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e9ee:	e841 2300 	strex	r3, r2, [r1]
 800e9f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e9f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d1e3      	bne.n	800e9c2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2220      	movs	r2, #32
 800e9fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea10:	e853 3f00 	ldrex	r3, [r3]
 800ea14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ea16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea18:	f023 0310 	bic.w	r3, r3, #16
 800ea1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	461a      	mov	r2, r3
 800ea26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ea30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ea32:	e841 2300 	strex	r3, r2, [r1]
 800ea36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ea38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d1e4      	bne.n	800ea08 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7f7 f9c6 	bl	8005dd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2202      	movs	r2, #2
 800ea4c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	1ad3      	subs	r3, r2, r3
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	4619      	mov	r1, r3
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 f8d2 	bl	800ec0c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ea68:	e0be      	b.n	800ebe8 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ea70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ea74:	429a      	cmp	r2, r3
 800ea76:	f040 80b7 	bne.w	800ebe8 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea7e:	69db      	ldr	r3, [r3, #28]
 800ea80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea84:	f040 80b0 	bne.w	800ebe8 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2202      	movs	r2, #2
 800ea8c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ea94:	4619      	mov	r1, r3
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f000 f8b8 	bl	800ec0c <HAL_UARTEx_RxEventCallback>
      return;
 800ea9c:	e0a4      	b.n	800ebe8 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	f000 8096 	beq.w	800ebec <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800eac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f000 8091 	beq.w	800ebec <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ead2:	e853 3f00 	ldrex	r3, [r3]
 800ead6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ead8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eade:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	461a      	mov	r2, r3
 800eae8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eaec:	647b      	str	r3, [r7, #68]	@ 0x44
 800eaee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eaf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eaf4:	e841 2300 	strex	r3, r2, [r1]
 800eaf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d1e4      	bne.n	800eaca <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	3308      	adds	r3, #8
 800eb06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb0a:	e853 3f00 	ldrex	r3, [r3]
 800eb0e:	623b      	str	r3, [r7, #32]
   return(result);
 800eb10:	6a3b      	ldr	r3, [r7, #32]
 800eb12:	f023 0301 	bic.w	r3, r3, #1
 800eb16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	3308      	adds	r3, #8
 800eb20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800eb24:	633a      	str	r2, [r7, #48]	@ 0x30
 800eb26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb2c:	e841 2300 	strex	r3, r2, [r1]
 800eb30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1e3      	bne.n	800eb00 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2220      	movs	r2, #32
 800eb3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	e853 3f00 	ldrex	r3, [r3]
 800eb58:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f023 0310 	bic.w	r3, r3, #16
 800eb60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	461a      	mov	r2, r3
 800eb6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800eb6e:	61fb      	str	r3, [r7, #28]
 800eb70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb72:	69b9      	ldr	r1, [r7, #24]
 800eb74:	69fa      	ldr	r2, [r7, #28]
 800eb76:	e841 2300 	strex	r3, r2, [r1]
 800eb7a:	617b      	str	r3, [r7, #20]
   return(result);
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d1e4      	bne.n	800eb4c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2202      	movs	r2, #2
 800eb86:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eb88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f000 f83c 	bl	800ec0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb94:	e02a      	b.n	800ebec <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800eb96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d00e      	beq.n	800ebc0 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800eba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d008      	beq.n	800ebc0 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d01c      	beq.n	800ebf0 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	4798      	blx	r3
    }
    return;
 800ebbe:	e017      	b.n	800ebf0 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ebc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d012      	beq.n	800ebf2 <HAL_UART_IRQHandler+0x5d2>
 800ebcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00c      	beq.n	800ebf2 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 fe50 	bl	800f87e <UART_EndTransmit_IT>
    return;
 800ebde:	e008      	b.n	800ebf2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ebe0:	bf00      	nop
 800ebe2:	e006      	b.n	800ebf2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800ebe4:	bf00      	nop
 800ebe6:	e004      	b.n	800ebf2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ebe8:	bf00      	nop
 800ebea:	e002      	b.n	800ebf2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ebec:	bf00      	nop
 800ebee:	e000      	b.n	800ebf2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800ebf0:	bf00      	nop
  }

}
 800ebf2:	37e8      	adds	r7, #232	@ 0xe8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ec00:	bf00      	nop
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	460b      	mov	r3, r1
 800ec16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ec18:	bf00      	nop
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b088      	sub	sp, #32
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	689a      	ldr	r2, [r3, #8]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	691b      	ldr	r3, [r3, #16]
 800ec38:	431a      	orrs	r2, r3
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	695b      	ldr	r3, [r3, #20]
 800ec3e:	431a      	orrs	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	69db      	ldr	r3, [r3, #28]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	4ba6      	ldr	r3, [pc, #664]	@ (800eee8 <UART_SetConfig+0x2c4>)
 800ec50:	4013      	ands	r3, r2
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	6812      	ldr	r2, [r2, #0]
 800ec56:	6979      	ldr	r1, [r7, #20]
 800ec58:	430b      	orrs	r3, r1
 800ec5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	68da      	ldr	r2, [r3, #12]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	430a      	orrs	r2, r1
 800ec70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	699b      	ldr	r3, [r3, #24]
 800ec76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6a1b      	ldr	r3, [r3, #32]
 800ec7c:	697a      	ldr	r2, [r7, #20]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	697a      	ldr	r2, [r7, #20]
 800ec92:	430a      	orrs	r2, r1
 800ec94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4a94      	ldr	r2, [pc, #592]	@ (800eeec <UART_SetConfig+0x2c8>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d120      	bne.n	800ece2 <UART_SetConfig+0xbe>
 800eca0:	4b93      	ldr	r3, [pc, #588]	@ (800eef0 <UART_SetConfig+0x2cc>)
 800eca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eca6:	f003 0303 	and.w	r3, r3, #3
 800ecaa:	2b03      	cmp	r3, #3
 800ecac:	d816      	bhi.n	800ecdc <UART_SetConfig+0xb8>
 800ecae:	a201      	add	r2, pc, #4	@ (adr r2, 800ecb4 <UART_SetConfig+0x90>)
 800ecb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb4:	0800ecc5 	.word	0x0800ecc5
 800ecb8:	0800ecd1 	.word	0x0800ecd1
 800ecbc:	0800eccb 	.word	0x0800eccb
 800ecc0:	0800ecd7 	.word	0x0800ecd7
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	77fb      	strb	r3, [r7, #31]
 800ecc8:	e150      	b.n	800ef6c <UART_SetConfig+0x348>
 800ecca:	2302      	movs	r3, #2
 800eccc:	77fb      	strb	r3, [r7, #31]
 800ecce:	e14d      	b.n	800ef6c <UART_SetConfig+0x348>
 800ecd0:	2304      	movs	r3, #4
 800ecd2:	77fb      	strb	r3, [r7, #31]
 800ecd4:	e14a      	b.n	800ef6c <UART_SetConfig+0x348>
 800ecd6:	2308      	movs	r3, #8
 800ecd8:	77fb      	strb	r3, [r7, #31]
 800ecda:	e147      	b.n	800ef6c <UART_SetConfig+0x348>
 800ecdc:	2310      	movs	r3, #16
 800ecde:	77fb      	strb	r3, [r7, #31]
 800ece0:	e144      	b.n	800ef6c <UART_SetConfig+0x348>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4a83      	ldr	r2, [pc, #524]	@ (800eef4 <UART_SetConfig+0x2d0>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d132      	bne.n	800ed52 <UART_SetConfig+0x12e>
 800ecec:	4b80      	ldr	r3, [pc, #512]	@ (800eef0 <UART_SetConfig+0x2cc>)
 800ecee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecf2:	f003 030c 	and.w	r3, r3, #12
 800ecf6:	2b0c      	cmp	r3, #12
 800ecf8:	d828      	bhi.n	800ed4c <UART_SetConfig+0x128>
 800ecfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ed00 <UART_SetConfig+0xdc>)
 800ecfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed00:	0800ed35 	.word	0x0800ed35
 800ed04:	0800ed4d 	.word	0x0800ed4d
 800ed08:	0800ed4d 	.word	0x0800ed4d
 800ed0c:	0800ed4d 	.word	0x0800ed4d
 800ed10:	0800ed41 	.word	0x0800ed41
 800ed14:	0800ed4d 	.word	0x0800ed4d
 800ed18:	0800ed4d 	.word	0x0800ed4d
 800ed1c:	0800ed4d 	.word	0x0800ed4d
 800ed20:	0800ed3b 	.word	0x0800ed3b
 800ed24:	0800ed4d 	.word	0x0800ed4d
 800ed28:	0800ed4d 	.word	0x0800ed4d
 800ed2c:	0800ed4d 	.word	0x0800ed4d
 800ed30:	0800ed47 	.word	0x0800ed47
 800ed34:	2300      	movs	r3, #0
 800ed36:	77fb      	strb	r3, [r7, #31]
 800ed38:	e118      	b.n	800ef6c <UART_SetConfig+0x348>
 800ed3a:	2302      	movs	r3, #2
 800ed3c:	77fb      	strb	r3, [r7, #31]
 800ed3e:	e115      	b.n	800ef6c <UART_SetConfig+0x348>
 800ed40:	2304      	movs	r3, #4
 800ed42:	77fb      	strb	r3, [r7, #31]
 800ed44:	e112      	b.n	800ef6c <UART_SetConfig+0x348>
 800ed46:	2308      	movs	r3, #8
 800ed48:	77fb      	strb	r3, [r7, #31]
 800ed4a:	e10f      	b.n	800ef6c <UART_SetConfig+0x348>
 800ed4c:	2310      	movs	r3, #16
 800ed4e:	77fb      	strb	r3, [r7, #31]
 800ed50:	e10c      	b.n	800ef6c <UART_SetConfig+0x348>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	4a68      	ldr	r2, [pc, #416]	@ (800eef8 <UART_SetConfig+0x2d4>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d120      	bne.n	800ed9e <UART_SetConfig+0x17a>
 800ed5c:	4b64      	ldr	r3, [pc, #400]	@ (800eef0 <UART_SetConfig+0x2cc>)
 800ed5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed62:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ed66:	2b30      	cmp	r3, #48	@ 0x30
 800ed68:	d013      	beq.n	800ed92 <UART_SetConfig+0x16e>
 800ed6a:	2b30      	cmp	r3, #48	@ 0x30
 800ed6c:	d814      	bhi.n	800ed98 <UART_SetConfig+0x174>
 800ed6e:	2b20      	cmp	r3, #32
 800ed70:	d009      	beq.n	800ed86 <UART_SetConfig+0x162>
 800ed72:	2b20      	cmp	r3, #32
 800ed74:	d810      	bhi.n	800ed98 <UART_SetConfig+0x174>
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d002      	beq.n	800ed80 <UART_SetConfig+0x15c>
 800ed7a:	2b10      	cmp	r3, #16
 800ed7c:	d006      	beq.n	800ed8c <UART_SetConfig+0x168>
 800ed7e:	e00b      	b.n	800ed98 <UART_SetConfig+0x174>
 800ed80:	2300      	movs	r3, #0
 800ed82:	77fb      	strb	r3, [r7, #31]
 800ed84:	e0f2      	b.n	800ef6c <UART_SetConfig+0x348>
 800ed86:	2302      	movs	r3, #2
 800ed88:	77fb      	strb	r3, [r7, #31]
 800ed8a:	e0ef      	b.n	800ef6c <UART_SetConfig+0x348>
 800ed8c:	2304      	movs	r3, #4
 800ed8e:	77fb      	strb	r3, [r7, #31]
 800ed90:	e0ec      	b.n	800ef6c <UART_SetConfig+0x348>
 800ed92:	2308      	movs	r3, #8
 800ed94:	77fb      	strb	r3, [r7, #31]
 800ed96:	e0e9      	b.n	800ef6c <UART_SetConfig+0x348>
 800ed98:	2310      	movs	r3, #16
 800ed9a:	77fb      	strb	r3, [r7, #31]
 800ed9c:	e0e6      	b.n	800ef6c <UART_SetConfig+0x348>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4a56      	ldr	r2, [pc, #344]	@ (800eefc <UART_SetConfig+0x2d8>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d120      	bne.n	800edea <UART_SetConfig+0x1c6>
 800eda8:	4b51      	ldr	r3, [pc, #324]	@ (800eef0 <UART_SetConfig+0x2cc>)
 800edaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800edb2:	2bc0      	cmp	r3, #192	@ 0xc0
 800edb4:	d013      	beq.n	800edde <UART_SetConfig+0x1ba>
 800edb6:	2bc0      	cmp	r3, #192	@ 0xc0
 800edb8:	d814      	bhi.n	800ede4 <UART_SetConfig+0x1c0>
 800edba:	2b80      	cmp	r3, #128	@ 0x80
 800edbc:	d009      	beq.n	800edd2 <UART_SetConfig+0x1ae>
 800edbe:	2b80      	cmp	r3, #128	@ 0x80
 800edc0:	d810      	bhi.n	800ede4 <UART_SetConfig+0x1c0>
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d002      	beq.n	800edcc <UART_SetConfig+0x1a8>
 800edc6:	2b40      	cmp	r3, #64	@ 0x40
 800edc8:	d006      	beq.n	800edd8 <UART_SetConfig+0x1b4>
 800edca:	e00b      	b.n	800ede4 <UART_SetConfig+0x1c0>
 800edcc:	2300      	movs	r3, #0
 800edce:	77fb      	strb	r3, [r7, #31]
 800edd0:	e0cc      	b.n	800ef6c <UART_SetConfig+0x348>
 800edd2:	2302      	movs	r3, #2
 800edd4:	77fb      	strb	r3, [r7, #31]
 800edd6:	e0c9      	b.n	800ef6c <UART_SetConfig+0x348>
 800edd8:	2304      	movs	r3, #4
 800edda:	77fb      	strb	r3, [r7, #31]
 800eddc:	e0c6      	b.n	800ef6c <UART_SetConfig+0x348>
 800edde:	2308      	movs	r3, #8
 800ede0:	77fb      	strb	r3, [r7, #31]
 800ede2:	e0c3      	b.n	800ef6c <UART_SetConfig+0x348>
 800ede4:	2310      	movs	r3, #16
 800ede6:	77fb      	strb	r3, [r7, #31]
 800ede8:	e0c0      	b.n	800ef6c <UART_SetConfig+0x348>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a44      	ldr	r2, [pc, #272]	@ (800ef00 <UART_SetConfig+0x2dc>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d125      	bne.n	800ee40 <UART_SetConfig+0x21c>
 800edf4:	4b3e      	ldr	r3, [pc, #248]	@ (800eef0 <UART_SetConfig+0x2cc>)
 800edf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800edfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ee02:	d017      	beq.n	800ee34 <UART_SetConfig+0x210>
 800ee04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ee08:	d817      	bhi.n	800ee3a <UART_SetConfig+0x216>
 800ee0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee0e:	d00b      	beq.n	800ee28 <UART_SetConfig+0x204>
 800ee10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee14:	d811      	bhi.n	800ee3a <UART_SetConfig+0x216>
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d003      	beq.n	800ee22 <UART_SetConfig+0x1fe>
 800ee1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee1e:	d006      	beq.n	800ee2e <UART_SetConfig+0x20a>
 800ee20:	e00b      	b.n	800ee3a <UART_SetConfig+0x216>
 800ee22:	2300      	movs	r3, #0
 800ee24:	77fb      	strb	r3, [r7, #31]
 800ee26:	e0a1      	b.n	800ef6c <UART_SetConfig+0x348>
 800ee28:	2302      	movs	r3, #2
 800ee2a:	77fb      	strb	r3, [r7, #31]
 800ee2c:	e09e      	b.n	800ef6c <UART_SetConfig+0x348>
 800ee2e:	2304      	movs	r3, #4
 800ee30:	77fb      	strb	r3, [r7, #31]
 800ee32:	e09b      	b.n	800ef6c <UART_SetConfig+0x348>
 800ee34:	2308      	movs	r3, #8
 800ee36:	77fb      	strb	r3, [r7, #31]
 800ee38:	e098      	b.n	800ef6c <UART_SetConfig+0x348>
 800ee3a:	2310      	movs	r3, #16
 800ee3c:	77fb      	strb	r3, [r7, #31]
 800ee3e:	e095      	b.n	800ef6c <UART_SetConfig+0x348>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	4a2f      	ldr	r2, [pc, #188]	@ (800ef04 <UART_SetConfig+0x2e0>)
 800ee46:	4293      	cmp	r3, r2
 800ee48:	d125      	bne.n	800ee96 <UART_SetConfig+0x272>
 800ee4a:	4b29      	ldr	r3, [pc, #164]	@ (800eef0 <UART_SetConfig+0x2cc>)
 800ee4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ee54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee58:	d017      	beq.n	800ee8a <UART_SetConfig+0x266>
 800ee5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee5e:	d817      	bhi.n	800ee90 <UART_SetConfig+0x26c>
 800ee60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee64:	d00b      	beq.n	800ee7e <UART_SetConfig+0x25a>
 800ee66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee6a:	d811      	bhi.n	800ee90 <UART_SetConfig+0x26c>
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d003      	beq.n	800ee78 <UART_SetConfig+0x254>
 800ee70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee74:	d006      	beq.n	800ee84 <UART_SetConfig+0x260>
 800ee76:	e00b      	b.n	800ee90 <UART_SetConfig+0x26c>
 800ee78:	2301      	movs	r3, #1
 800ee7a:	77fb      	strb	r3, [r7, #31]
 800ee7c:	e076      	b.n	800ef6c <UART_SetConfig+0x348>
 800ee7e:	2302      	movs	r3, #2
 800ee80:	77fb      	strb	r3, [r7, #31]
 800ee82:	e073      	b.n	800ef6c <UART_SetConfig+0x348>
 800ee84:	2304      	movs	r3, #4
 800ee86:	77fb      	strb	r3, [r7, #31]
 800ee88:	e070      	b.n	800ef6c <UART_SetConfig+0x348>
 800ee8a:	2308      	movs	r3, #8
 800ee8c:	77fb      	strb	r3, [r7, #31]
 800ee8e:	e06d      	b.n	800ef6c <UART_SetConfig+0x348>
 800ee90:	2310      	movs	r3, #16
 800ee92:	77fb      	strb	r3, [r7, #31]
 800ee94:	e06a      	b.n	800ef6c <UART_SetConfig+0x348>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	4a1b      	ldr	r2, [pc, #108]	@ (800ef08 <UART_SetConfig+0x2e4>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d138      	bne.n	800ef12 <UART_SetConfig+0x2ee>
 800eea0:	4b13      	ldr	r3, [pc, #76]	@ (800eef0 <UART_SetConfig+0x2cc>)
 800eea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eea6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800eeaa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eeae:	d017      	beq.n	800eee0 <UART_SetConfig+0x2bc>
 800eeb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eeb4:	d82a      	bhi.n	800ef0c <UART_SetConfig+0x2e8>
 800eeb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eeba:	d00b      	beq.n	800eed4 <UART_SetConfig+0x2b0>
 800eebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eec0:	d824      	bhi.n	800ef0c <UART_SetConfig+0x2e8>
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d003      	beq.n	800eece <UART_SetConfig+0x2aa>
 800eec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eeca:	d006      	beq.n	800eeda <UART_SetConfig+0x2b6>
 800eecc:	e01e      	b.n	800ef0c <UART_SetConfig+0x2e8>
 800eece:	2300      	movs	r3, #0
 800eed0:	77fb      	strb	r3, [r7, #31]
 800eed2:	e04b      	b.n	800ef6c <UART_SetConfig+0x348>
 800eed4:	2302      	movs	r3, #2
 800eed6:	77fb      	strb	r3, [r7, #31]
 800eed8:	e048      	b.n	800ef6c <UART_SetConfig+0x348>
 800eeda:	2304      	movs	r3, #4
 800eedc:	77fb      	strb	r3, [r7, #31]
 800eede:	e045      	b.n	800ef6c <UART_SetConfig+0x348>
 800eee0:	2308      	movs	r3, #8
 800eee2:	77fb      	strb	r3, [r7, #31]
 800eee4:	e042      	b.n	800ef6c <UART_SetConfig+0x348>
 800eee6:	bf00      	nop
 800eee8:	efff69f3 	.word	0xefff69f3
 800eeec:	40011000 	.word	0x40011000
 800eef0:	40023800 	.word	0x40023800
 800eef4:	40004400 	.word	0x40004400
 800eef8:	40004800 	.word	0x40004800
 800eefc:	40004c00 	.word	0x40004c00
 800ef00:	40005000 	.word	0x40005000
 800ef04:	40011400 	.word	0x40011400
 800ef08:	40007800 	.word	0x40007800
 800ef0c:	2310      	movs	r3, #16
 800ef0e:	77fb      	strb	r3, [r7, #31]
 800ef10:	e02c      	b.n	800ef6c <UART_SetConfig+0x348>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4a72      	ldr	r2, [pc, #456]	@ (800f0e0 <UART_SetConfig+0x4bc>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d125      	bne.n	800ef68 <UART_SetConfig+0x344>
 800ef1c:	4b71      	ldr	r3, [pc, #452]	@ (800f0e4 <UART_SetConfig+0x4c0>)
 800ef1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ef26:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ef2a:	d017      	beq.n	800ef5c <UART_SetConfig+0x338>
 800ef2c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ef30:	d817      	bhi.n	800ef62 <UART_SetConfig+0x33e>
 800ef32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef36:	d00b      	beq.n	800ef50 <UART_SetConfig+0x32c>
 800ef38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef3c:	d811      	bhi.n	800ef62 <UART_SetConfig+0x33e>
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d003      	beq.n	800ef4a <UART_SetConfig+0x326>
 800ef42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ef46:	d006      	beq.n	800ef56 <UART_SetConfig+0x332>
 800ef48:	e00b      	b.n	800ef62 <UART_SetConfig+0x33e>
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	77fb      	strb	r3, [r7, #31]
 800ef4e:	e00d      	b.n	800ef6c <UART_SetConfig+0x348>
 800ef50:	2302      	movs	r3, #2
 800ef52:	77fb      	strb	r3, [r7, #31]
 800ef54:	e00a      	b.n	800ef6c <UART_SetConfig+0x348>
 800ef56:	2304      	movs	r3, #4
 800ef58:	77fb      	strb	r3, [r7, #31]
 800ef5a:	e007      	b.n	800ef6c <UART_SetConfig+0x348>
 800ef5c:	2308      	movs	r3, #8
 800ef5e:	77fb      	strb	r3, [r7, #31]
 800ef60:	e004      	b.n	800ef6c <UART_SetConfig+0x348>
 800ef62:	2310      	movs	r3, #16
 800ef64:	77fb      	strb	r3, [r7, #31]
 800ef66:	e001      	b.n	800ef6c <UART_SetConfig+0x348>
 800ef68:	2310      	movs	r3, #16
 800ef6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	69db      	ldr	r3, [r3, #28]
 800ef70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef74:	d15b      	bne.n	800f02e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ef76:	7ffb      	ldrb	r3, [r7, #31]
 800ef78:	2b08      	cmp	r3, #8
 800ef7a:	d828      	bhi.n	800efce <UART_SetConfig+0x3aa>
 800ef7c:	a201      	add	r2, pc, #4	@ (adr r2, 800ef84 <UART_SetConfig+0x360>)
 800ef7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef82:	bf00      	nop
 800ef84:	0800efa9 	.word	0x0800efa9
 800ef88:	0800efb1 	.word	0x0800efb1
 800ef8c:	0800efb9 	.word	0x0800efb9
 800ef90:	0800efcf 	.word	0x0800efcf
 800ef94:	0800efbf 	.word	0x0800efbf
 800ef98:	0800efcf 	.word	0x0800efcf
 800ef9c:	0800efcf 	.word	0x0800efcf
 800efa0:	0800efcf 	.word	0x0800efcf
 800efa4:	0800efc7 	.word	0x0800efc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800efa8:	f7fb fc1a 	bl	800a7e0 <HAL_RCC_GetPCLK1Freq>
 800efac:	61b8      	str	r0, [r7, #24]
        break;
 800efae:	e013      	b.n	800efd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800efb0:	f7fb fc2a 	bl	800a808 <HAL_RCC_GetPCLK2Freq>
 800efb4:	61b8      	str	r0, [r7, #24]
        break;
 800efb6:	e00f      	b.n	800efd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800efb8:	4b4b      	ldr	r3, [pc, #300]	@ (800f0e8 <UART_SetConfig+0x4c4>)
 800efba:	61bb      	str	r3, [r7, #24]
        break;
 800efbc:	e00c      	b.n	800efd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800efbe:	f7fb fb3d 	bl	800a63c <HAL_RCC_GetSysClockFreq>
 800efc2:	61b8      	str	r0, [r7, #24]
        break;
 800efc4:	e008      	b.n	800efd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800efca:	61bb      	str	r3, [r7, #24]
        break;
 800efcc:	e004      	b.n	800efd8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800efce:	2300      	movs	r3, #0
 800efd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800efd2:	2301      	movs	r3, #1
 800efd4:	77bb      	strb	r3, [r7, #30]
        break;
 800efd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800efd8:	69bb      	ldr	r3, [r7, #24]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d074      	beq.n	800f0c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800efde:	69bb      	ldr	r3, [r7, #24]
 800efe0:	005a      	lsls	r2, r3, #1
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	085b      	lsrs	r3, r3, #1
 800efe8:	441a      	add	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	fbb2 f3f3 	udiv	r3, r2, r3
 800eff2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	2b0f      	cmp	r3, #15
 800eff8:	d916      	bls.n	800f028 <UART_SetConfig+0x404>
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f000:	d212      	bcs.n	800f028 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	b29b      	uxth	r3, r3
 800f006:	f023 030f 	bic.w	r3, r3, #15
 800f00a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	085b      	lsrs	r3, r3, #1
 800f010:	b29b      	uxth	r3, r3
 800f012:	f003 0307 	and.w	r3, r3, #7
 800f016:	b29a      	uxth	r2, r3
 800f018:	89fb      	ldrh	r3, [r7, #14]
 800f01a:	4313      	orrs	r3, r2
 800f01c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	89fa      	ldrh	r2, [r7, #14]
 800f024:	60da      	str	r2, [r3, #12]
 800f026:	e04f      	b.n	800f0c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f028:	2301      	movs	r3, #1
 800f02a:	77bb      	strb	r3, [r7, #30]
 800f02c:	e04c      	b.n	800f0c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f02e:	7ffb      	ldrb	r3, [r7, #31]
 800f030:	2b08      	cmp	r3, #8
 800f032:	d828      	bhi.n	800f086 <UART_SetConfig+0x462>
 800f034:	a201      	add	r2, pc, #4	@ (adr r2, 800f03c <UART_SetConfig+0x418>)
 800f036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f03a:	bf00      	nop
 800f03c:	0800f061 	.word	0x0800f061
 800f040:	0800f069 	.word	0x0800f069
 800f044:	0800f071 	.word	0x0800f071
 800f048:	0800f087 	.word	0x0800f087
 800f04c:	0800f077 	.word	0x0800f077
 800f050:	0800f087 	.word	0x0800f087
 800f054:	0800f087 	.word	0x0800f087
 800f058:	0800f087 	.word	0x0800f087
 800f05c:	0800f07f 	.word	0x0800f07f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f060:	f7fb fbbe 	bl	800a7e0 <HAL_RCC_GetPCLK1Freq>
 800f064:	61b8      	str	r0, [r7, #24]
        break;
 800f066:	e013      	b.n	800f090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f068:	f7fb fbce 	bl	800a808 <HAL_RCC_GetPCLK2Freq>
 800f06c:	61b8      	str	r0, [r7, #24]
        break;
 800f06e:	e00f      	b.n	800f090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f070:	4b1d      	ldr	r3, [pc, #116]	@ (800f0e8 <UART_SetConfig+0x4c4>)
 800f072:	61bb      	str	r3, [r7, #24]
        break;
 800f074:	e00c      	b.n	800f090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f076:	f7fb fae1 	bl	800a63c <HAL_RCC_GetSysClockFreq>
 800f07a:	61b8      	str	r0, [r7, #24]
        break;
 800f07c:	e008      	b.n	800f090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f07e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f082:	61bb      	str	r3, [r7, #24]
        break;
 800f084:	e004      	b.n	800f090 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800f086:	2300      	movs	r3, #0
 800f088:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f08a:	2301      	movs	r3, #1
 800f08c:	77bb      	strb	r3, [r7, #30]
        break;
 800f08e:	bf00      	nop
    }

    if (pclk != 0U)
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d018      	beq.n	800f0c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	085a      	lsrs	r2, r3, #1
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	441a      	add	r2, r3
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	2b0f      	cmp	r3, #15
 800f0ae:	d909      	bls.n	800f0c4 <UART_SetConfig+0x4a0>
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0b6:	d205      	bcs.n	800f0c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	b29a      	uxth	r2, r3
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	60da      	str	r2, [r3, #12]
 800f0c2:	e001      	b.n	800f0c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800f0d4:	7fbb      	ldrb	r3, [r7, #30]
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3720      	adds	r7, #32
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	40007c00 	.word	0x40007c00
 800f0e4:	40023800 	.word	0x40023800
 800f0e8:	00f42400 	.word	0x00f42400

0800f0ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0f8:	f003 0308 	and.w	r3, r3, #8
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00a      	beq.n	800f116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	430a      	orrs	r2, r1
 800f114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f11a:	f003 0301 	and.w	r3, r3, #1
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00a      	beq.n	800f138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	430a      	orrs	r2, r1
 800f136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f13c:	f003 0302 	and.w	r3, r3, #2
 800f140:	2b00      	cmp	r3, #0
 800f142:	d00a      	beq.n	800f15a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	430a      	orrs	r2, r1
 800f158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f15e:	f003 0304 	and.w	r3, r3, #4
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00a      	beq.n	800f17c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	430a      	orrs	r2, r1
 800f17a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f180:	f003 0310 	and.w	r3, r3, #16
 800f184:	2b00      	cmp	r3, #0
 800f186:	d00a      	beq.n	800f19e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	430a      	orrs	r2, r1
 800f19c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a2:	f003 0320 	and.w	r3, r3, #32
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00a      	beq.n	800f1c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	689b      	ldr	r3, [r3, #8]
 800f1b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	430a      	orrs	r2, r1
 800f1be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d01a      	beq.n	800f202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	430a      	orrs	r2, r1
 800f1e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1ea:	d10a      	bne.n	800f202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	430a      	orrs	r2, r1
 800f200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00a      	beq.n	800f224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	430a      	orrs	r2, r1
 800f222:	605a      	str	r2, [r3, #4]
  }
}
 800f224:	bf00      	nop
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b08c      	sub	sp, #48	@ 0x30
 800f234:	af02      	add	r7, sp, #8
 800f236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2200      	movs	r2, #0
 800f23c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f240:	f7f5 ff46 	bl	80050d0 <HAL_GetTick>
 800f244:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f003 0308 	and.w	r3, r3, #8
 800f250:	2b08      	cmp	r3, #8
 800f252:	d12e      	bne.n	800f2b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f254:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f258:	9300      	str	r3, [sp, #0]
 800f25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25c:	2200      	movs	r2, #0
 800f25e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 f83b 	bl	800f2de <UART_WaitOnFlagUntilTimeout>
 800f268:	4603      	mov	r3, r0
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d021      	beq.n	800f2b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	e853 3f00 	ldrex	r3, [r3]
 800f27a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f282:	623b      	str	r3, [r7, #32]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	461a      	mov	r2, r3
 800f28a:	6a3b      	ldr	r3, [r7, #32]
 800f28c:	61fb      	str	r3, [r7, #28]
 800f28e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f290:	69b9      	ldr	r1, [r7, #24]
 800f292:	69fa      	ldr	r2, [r7, #28]
 800f294:	e841 2300 	strex	r3, r2, [r1]
 800f298:	617b      	str	r3, [r7, #20]
   return(result);
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d1e6      	bne.n	800f26e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2220      	movs	r2, #32
 800f2a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f2ae:	2303      	movs	r3, #3
 800f2b0:	e011      	b.n	800f2d6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2220      	movs	r2, #32
 800f2b6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2220      	movs	r2, #32
 800f2bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3728      	adds	r7, #40	@ 0x28
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f2de:	b580      	push	{r7, lr}
 800f2e0:	b084      	sub	sp, #16
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	60f8      	str	r0, [r7, #12]
 800f2e6:	60b9      	str	r1, [r7, #8]
 800f2e8:	603b      	str	r3, [r7, #0]
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2ee:	e04f      	b.n	800f390 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f6:	d04b      	beq.n	800f390 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f2f8:	f7f5 feea 	bl	80050d0 <HAL_GetTick>
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	1ad3      	subs	r3, r2, r3
 800f302:	69ba      	ldr	r2, [r7, #24]
 800f304:	429a      	cmp	r2, r3
 800f306:	d302      	bcc.n	800f30e <UART_WaitOnFlagUntilTimeout+0x30>
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d101      	bne.n	800f312 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f30e:	2303      	movs	r3, #3
 800f310:	e04e      	b.n	800f3b0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f003 0304 	and.w	r3, r3, #4
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d037      	beq.n	800f390 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	2b80      	cmp	r3, #128	@ 0x80
 800f324:	d034      	beq.n	800f390 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2b40      	cmp	r3, #64	@ 0x40
 800f32a:	d031      	beq.n	800f390 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	69db      	ldr	r3, [r3, #28]
 800f332:	f003 0308 	and.w	r3, r3, #8
 800f336:	2b08      	cmp	r3, #8
 800f338:	d110      	bne.n	800f35c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2208      	movs	r2, #8
 800f340:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f342:	68f8      	ldr	r0, [r7, #12]
 800f344:	f000 f8fe 	bl	800f544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2208      	movs	r2, #8
 800f34c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2200      	movs	r2, #0
 800f354:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800f358:	2301      	movs	r3, #1
 800f35a:	e029      	b.n	800f3b0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	69db      	ldr	r3, [r3, #28]
 800f362:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f366:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f36a:	d111      	bne.n	800f390 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f374:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f376:	68f8      	ldr	r0, [r7, #12]
 800f378:	f000 f8e4 	bl	800f544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2220      	movs	r2, #32
 800f380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2200      	movs	r2, #0
 800f388:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f38c:	2303      	movs	r3, #3
 800f38e:	e00f      	b.n	800f3b0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	69da      	ldr	r2, [r3, #28]
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	4013      	ands	r3, r2
 800f39a:	68ba      	ldr	r2, [r7, #8]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	bf0c      	ite	eq
 800f3a0:	2301      	moveq	r3, #1
 800f3a2:	2300      	movne	r3, #0
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	79fb      	ldrb	r3, [r7, #7]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d0a0      	beq.n	800f2f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f3ae:	2300      	movs	r3, #0
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b096      	sub	sp, #88	@ 0x58
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	4613      	mov	r3, r2
 800f3c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	68ba      	ldr	r2, [r7, #8]
 800f3ca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	88fa      	ldrh	r2, [r7, #6]
 800f3d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2222      	movs	r2, #34	@ 0x22
 800f3e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d028      	beq.n	800f43e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3f0:	4a3e      	ldr	r2, [pc, #248]	@ (800f4ec <UART_Start_Receive_DMA+0x134>)
 800f3f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3f8:	4a3d      	ldr	r2, [pc, #244]	@ (800f4f0 <UART_Start_Receive_DMA+0x138>)
 800f3fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f400:	4a3c      	ldr	r2, [pc, #240]	@ (800f4f4 <UART_Start_Receive_DMA+0x13c>)
 800f402:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f408:	2200      	movs	r2, #0
 800f40a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	3324      	adds	r3, #36	@ 0x24
 800f416:	4619      	mov	r1, r3
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f41c:	461a      	mov	r2, r3
 800f41e:	88fb      	ldrh	r3, [r7, #6]
 800f420:	f7f6 fc78 	bl	8005d14 <HAL_DMA_Start_IT>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d009      	beq.n	800f43e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2210      	movs	r2, #16
 800f42e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2220      	movs	r2, #32
 800f436:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800f43a:	2301      	movs	r3, #1
 800f43c:	e051      	b.n	800f4e2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d018      	beq.n	800f478 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f44c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f44e:	e853 3f00 	ldrex	r3, [r3]
 800f452:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f45a:	657b      	str	r3, [r7, #84]	@ 0x54
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	461a      	mov	r2, r3
 800f462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f464:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f466:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f468:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f46a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f46c:	e841 2300 	strex	r3, r2, [r1]
 800f470:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f474:	2b00      	cmp	r3, #0
 800f476:	d1e6      	bne.n	800f446 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	3308      	adds	r3, #8
 800f47e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f482:	e853 3f00 	ldrex	r3, [r3]
 800f486:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f48a:	f043 0301 	orr.w	r3, r3, #1
 800f48e:	653b      	str	r3, [r7, #80]	@ 0x50
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	3308      	adds	r3, #8
 800f496:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f498:	637a      	str	r2, [r7, #52]	@ 0x34
 800f49a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f49c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f49e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4a0:	e841 2300 	strex	r3, r2, [r1]
 800f4a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d1e5      	bne.n	800f478 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	3308      	adds	r3, #8
 800f4b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	e853 3f00 	ldrex	r3, [r3]
 800f4ba:	613b      	str	r3, [r7, #16]
   return(result);
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	3308      	adds	r3, #8
 800f4ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f4cc:	623a      	str	r2, [r7, #32]
 800f4ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4d0:	69f9      	ldr	r1, [r7, #28]
 800f4d2:	6a3a      	ldr	r2, [r7, #32]
 800f4d4:	e841 2300 	strex	r3, r2, [r1]
 800f4d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d1e5      	bne.n	800f4ac <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3758      	adds	r7, #88	@ 0x58
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	0800f60d 	.word	0x0800f60d
 800f4f0:	0800f76b 	.word	0x0800f76b
 800f4f4:	0800f7dd 	.word	0x0800f7dd

0800f4f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b089      	sub	sp, #36	@ 0x24
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	e853 3f00 	ldrex	r3, [r3]
 800f50c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f514:	61fb      	str	r3, [r7, #28]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	461a      	mov	r2, r3
 800f51c:	69fb      	ldr	r3, [r7, #28]
 800f51e:	61bb      	str	r3, [r7, #24]
 800f520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f522:	6979      	ldr	r1, [r7, #20]
 800f524:	69ba      	ldr	r2, [r7, #24]
 800f526:	e841 2300 	strex	r3, r2, [r1]
 800f52a:	613b      	str	r3, [r7, #16]
   return(result);
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1e6      	bne.n	800f500 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2220      	movs	r2, #32
 800f536:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f538:	bf00      	nop
 800f53a:	3724      	adds	r7, #36	@ 0x24
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f544:	b480      	push	{r7}
 800f546:	b095      	sub	sp, #84	@ 0x54
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f554:	e853 3f00 	ldrex	r3, [r3]
 800f558:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f55c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f560:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	461a      	mov	r2, r3
 800f568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f56a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f56c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f56e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f570:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f572:	e841 2300 	strex	r3, r2, [r1]
 800f576:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d1e6      	bne.n	800f54c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	3308      	adds	r3, #8
 800f584:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f586:	6a3b      	ldr	r3, [r7, #32]
 800f588:	e853 3f00 	ldrex	r3, [r3]
 800f58c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	f023 0301 	bic.w	r3, r3, #1
 800f594:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	3308      	adds	r3, #8
 800f59c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f59e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f5a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5a6:	e841 2300 	strex	r3, r2, [r1]
 800f5aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1e5      	bne.n	800f57e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d118      	bne.n	800f5ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	e853 3f00 	ldrex	r3, [r3]
 800f5c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	f023 0310 	bic.w	r3, r3, #16
 800f5ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5d8:	61bb      	str	r3, [r7, #24]
 800f5da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5dc:	6979      	ldr	r1, [r7, #20]
 800f5de:	69ba      	ldr	r2, [r7, #24]
 800f5e0:	e841 2300 	strex	r3, r2, [r1]
 800f5e4:	613b      	str	r3, [r7, #16]
   return(result);
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d1e6      	bne.n	800f5ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2220      	movs	r2, #32
 800f5f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f600:	bf00      	nop
 800f602:	3754      	adds	r7, #84	@ 0x54
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr

0800f60c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b09c      	sub	sp, #112	@ 0x70
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f618:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	69db      	ldr	r3, [r3, #28]
 800f61e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f622:	d071      	beq.n	800f708 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f626:	2200      	movs	r2, #0
 800f628:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f62c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f634:	e853 3f00 	ldrex	r3, [r3]
 800f638:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f63a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f63c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f640:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	461a      	mov	r2, r3
 800f648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f64a:	657b      	str	r3, [r7, #84]	@ 0x54
 800f64c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f650:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f652:	e841 2300 	strex	r3, r2, [r1]
 800f656:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1e6      	bne.n	800f62c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f65e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	3308      	adds	r3, #8
 800f664:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f668:	e853 3f00 	ldrex	r3, [r3]
 800f66c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f670:	f023 0301 	bic.w	r3, r3, #1
 800f674:	667b      	str	r3, [r7, #100]	@ 0x64
 800f676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	3308      	adds	r3, #8
 800f67c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f67e:	643a      	str	r2, [r7, #64]	@ 0x40
 800f680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f682:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f684:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f686:	e841 2300 	strex	r3, r2, [r1]
 800f68a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d1e5      	bne.n	800f65e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	3308      	adds	r3, #8
 800f698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f69a:	6a3b      	ldr	r3, [r7, #32]
 800f69c:	e853 3f00 	ldrex	r3, [r3]
 800f6a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f6a8:	663b      	str	r3, [r7, #96]	@ 0x60
 800f6aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	3308      	adds	r3, #8
 800f6b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f6b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f6b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6ba:	e841 2300 	strex	r3, r2, [r1]
 800f6be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d1e5      	bne.n	800f692 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f6c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6c8:	2220      	movs	r2, #32
 800f6ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d118      	bne.n	800f708 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	e853 3f00 	ldrex	r3, [r3]
 800f6e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	f023 0310 	bic.w	r3, r3, #16
 800f6ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f6ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	461a      	mov	r2, r3
 800f6f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6f4:	61bb      	str	r3, [r7, #24]
 800f6f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6f8:	6979      	ldr	r1, [r7, #20]
 800f6fa:	69ba      	ldr	r2, [r7, #24]
 800f6fc:	e841 2300 	strex	r3, r2, [r1]
 800f700:	613b      	str	r3, [r7, #16]
   return(result);
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1e6      	bne.n	800f6d6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f70a:	2200      	movs	r2, #0
 800f70c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f70e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f712:	2b01      	cmp	r3, #1
 800f714:	d122      	bne.n	800f75c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800f716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f718:	2200      	movs	r2, #0
 800f71a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800f728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f72a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f72e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f732:	429a      	cmp	r2, r3
 800f734:	d204      	bcs.n	800f740 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f738:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f73c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f742:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f746:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f74c:	b29b      	uxth	r3, r3
 800f74e:	1ad3      	subs	r3, r2, r3
 800f750:	b29b      	uxth	r3, r3
 800f752:	4619      	mov	r1, r3
 800f754:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f756:	f7ff fa59 	bl	800ec0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f75a:	e002      	b.n	800f762 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800f75c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f75e:	f7f5 fb0b 	bl	8004d78 <HAL_UART_RxCpltCallback>
}
 800f762:	bf00      	nop
 800f764:	3770      	adds	r7, #112	@ 0x70
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b084      	sub	sp, #16
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f776:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2201      	movs	r2, #1
 800f77c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f782:	2b01      	cmp	r3, #1
 800f784:	d123      	bne.n	800f7ce <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f78c:	085b      	lsrs	r3, r3, #1
 800f78e:	b29a      	uxth	r2, r3
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f7a4:	897a      	ldrh	r2, [r7, #10]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d803      	bhi.n	800f7b2 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	897a      	ldrh	r2, [r7, #10]
 800f7ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	1ad3      	subs	r3, r2, r3
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	68f8      	ldr	r0, [r7, #12]
 800f7c8:	f7ff fa20 	bl	800ec0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f7cc:	e002      	b.n	800f7d4 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	f7f5 faf6 	bl	8004dc0 <HAL_UART_RxHalfCpltCallback>
}
 800f7d4:	bf00      	nop
 800f7d6:	3710      	adds	r7, #16
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b086      	sub	sp, #24
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7e8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f7ee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7f6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	689b      	ldr	r3, [r3, #8]
 800f7fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f802:	2b80      	cmp	r3, #128	@ 0x80
 800f804:	d109      	bne.n	800f81a <UART_DMAError+0x3e>
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	2b21      	cmp	r3, #33	@ 0x21
 800f80a:	d106      	bne.n	800f81a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	2200      	movs	r2, #0
 800f810:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800f814:	6978      	ldr	r0, [r7, #20]
 800f816:	f7ff fe6f 	bl	800f4f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f824:	2b40      	cmp	r3, #64	@ 0x40
 800f826:	d109      	bne.n	800f83c <UART_DMAError+0x60>
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2b22      	cmp	r3, #34	@ 0x22
 800f82c:	d106      	bne.n	800f83c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	2200      	movs	r2, #0
 800f832:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800f836:	6978      	ldr	r0, [r7, #20]
 800f838:	f7ff fe84 	bl	800f544 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f842:	f043 0210 	orr.w	r2, r3, #16
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f84c:	6978      	ldr	r0, [r7, #20]
 800f84e:	f7f5 facd 	bl	8004dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f852:	bf00      	nop
 800f854:	3718      	adds	r7, #24
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f85a:	b580      	push	{r7, lr}
 800f85c:	b084      	sub	sp, #16
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f870:	68f8      	ldr	r0, [r7, #12]
 800f872:	f7f5 fabb 	bl	8004dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f876:	bf00      	nop
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}

0800f87e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f87e:	b580      	push	{r7, lr}
 800f880:	b088      	sub	sp, #32
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	e853 3f00 	ldrex	r3, [r3]
 800f892:	60bb      	str	r3, [r7, #8]
   return(result);
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f89a:	61fb      	str	r3, [r7, #28]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	61bb      	str	r3, [r7, #24]
 800f8a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a8:	6979      	ldr	r1, [r7, #20]
 800f8aa:	69ba      	ldr	r2, [r7, #24]
 800f8ac:	e841 2300 	strex	r3, r2, [r1]
 800f8b0:	613b      	str	r3, [r7, #16]
   return(result);
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1e6      	bne.n	800f886 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2220      	movs	r2, #32
 800f8bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7ff f997 	bl	800ebf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f8ca:	bf00      	nop
 800f8cc:	3720      	adds	r7, #32
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
	...

0800f8d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d121      	bne.n	800f92a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	4b27      	ldr	r3, [pc, #156]	@ (800f988 <FMC_SDRAM_Init+0xb4>)
 800f8ec:	4013      	ands	r3, r2
 800f8ee:	683a      	ldr	r2, [r7, #0]
 800f8f0:	6851      	ldr	r1, [r2, #4]
 800f8f2:	683a      	ldr	r2, [r7, #0]
 800f8f4:	6892      	ldr	r2, [r2, #8]
 800f8f6:	4311      	orrs	r1, r2
 800f8f8:	683a      	ldr	r2, [r7, #0]
 800f8fa:	68d2      	ldr	r2, [r2, #12]
 800f8fc:	4311      	orrs	r1, r2
 800f8fe:	683a      	ldr	r2, [r7, #0]
 800f900:	6912      	ldr	r2, [r2, #16]
 800f902:	4311      	orrs	r1, r2
 800f904:	683a      	ldr	r2, [r7, #0]
 800f906:	6952      	ldr	r2, [r2, #20]
 800f908:	4311      	orrs	r1, r2
 800f90a:	683a      	ldr	r2, [r7, #0]
 800f90c:	6992      	ldr	r2, [r2, #24]
 800f90e:	4311      	orrs	r1, r2
 800f910:	683a      	ldr	r2, [r7, #0]
 800f912:	69d2      	ldr	r2, [r2, #28]
 800f914:	4311      	orrs	r1, r2
 800f916:	683a      	ldr	r2, [r7, #0]
 800f918:	6a12      	ldr	r2, [r2, #32]
 800f91a:	4311      	orrs	r1, r2
 800f91c:	683a      	ldr	r2, [r7, #0]
 800f91e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f920:	430a      	orrs	r2, r1
 800f922:	431a      	orrs	r2, r3
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	601a      	str	r2, [r3, #0]
 800f928:	e026      	b.n	800f978 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	69d9      	ldr	r1, [r3, #28]
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	6a1b      	ldr	r3, [r3, #32]
 800f93a:	4319      	orrs	r1, r3
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f940:	430b      	orrs	r3, r1
 800f942:	431a      	orrs	r2, r3
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	685a      	ldr	r2, [r3, #4]
 800f94c:	4b0e      	ldr	r3, [pc, #56]	@ (800f988 <FMC_SDRAM_Init+0xb4>)
 800f94e:	4013      	ands	r3, r2
 800f950:	683a      	ldr	r2, [r7, #0]
 800f952:	6851      	ldr	r1, [r2, #4]
 800f954:	683a      	ldr	r2, [r7, #0]
 800f956:	6892      	ldr	r2, [r2, #8]
 800f958:	4311      	orrs	r1, r2
 800f95a:	683a      	ldr	r2, [r7, #0]
 800f95c:	68d2      	ldr	r2, [r2, #12]
 800f95e:	4311      	orrs	r1, r2
 800f960:	683a      	ldr	r2, [r7, #0]
 800f962:	6912      	ldr	r2, [r2, #16]
 800f964:	4311      	orrs	r1, r2
 800f966:	683a      	ldr	r2, [r7, #0]
 800f968:	6952      	ldr	r2, [r2, #20]
 800f96a:	4311      	orrs	r1, r2
 800f96c:	683a      	ldr	r2, [r7, #0]
 800f96e:	6992      	ldr	r2, [r2, #24]
 800f970:	430a      	orrs	r2, r1
 800f972:	431a      	orrs	r2, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f978:	2300      	movs	r3, #0
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	370c      	adds	r7, #12
 800f97e:	46bd      	mov	sp, r7
 800f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	ffff8000 	.word	0xffff8000

0800f98c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b085      	sub	sp, #20
 800f990:	af00      	add	r7, sp, #0
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d128      	bne.n	800f9f0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	1e59      	subs	r1, r3, #1
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	011b      	lsls	r3, r3, #4
 800f9b4:	4319      	orrs	r1, r3
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	689b      	ldr	r3, [r3, #8]
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	021b      	lsls	r3, r3, #8
 800f9be:	4319      	orrs	r1, r3
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	031b      	lsls	r3, r3, #12
 800f9c8:	4319      	orrs	r1, r3
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	691b      	ldr	r3, [r3, #16]
 800f9ce:	3b01      	subs	r3, #1
 800f9d0:	041b      	lsls	r3, r3, #16
 800f9d2:	4319      	orrs	r1, r3
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	695b      	ldr	r3, [r3, #20]
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	051b      	lsls	r3, r3, #20
 800f9dc:	4319      	orrs	r1, r3
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	699b      	ldr	r3, [r3, #24]
 800f9e2:	3b01      	subs	r3, #1
 800f9e4:	061b      	lsls	r3, r3, #24
 800f9e6:	430b      	orrs	r3, r1
 800f9e8:	431a      	orrs	r2, r3
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	609a      	str	r2, [r3, #8]
 800f9ee:	e02d      	b.n	800fa4c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	689a      	ldr	r2, [r3, #8]
 800f9f4:	4b19      	ldr	r3, [pc, #100]	@ (800fa5c <FMC_SDRAM_Timing_Init+0xd0>)
 800f9f6:	4013      	ands	r3, r2
 800f9f8:	68ba      	ldr	r2, [r7, #8]
 800f9fa:	68d2      	ldr	r2, [r2, #12]
 800f9fc:	3a01      	subs	r2, #1
 800f9fe:	0311      	lsls	r1, r2, #12
 800fa00:	68ba      	ldr	r2, [r7, #8]
 800fa02:	6952      	ldr	r2, [r2, #20]
 800fa04:	3a01      	subs	r2, #1
 800fa06:	0512      	lsls	r2, r2, #20
 800fa08:	430a      	orrs	r2, r1
 800fa0a:	431a      	orrs	r2, r3
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	1e59      	subs	r1, r3, #1
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	3b01      	subs	r3, #1
 800fa24:	011b      	lsls	r3, r3, #4
 800fa26:	4319      	orrs	r1, r3
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	689b      	ldr	r3, [r3, #8]
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	021b      	lsls	r3, r3, #8
 800fa30:	4319      	orrs	r1, r3
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	691b      	ldr	r3, [r3, #16]
 800fa36:	3b01      	subs	r3, #1
 800fa38:	041b      	lsls	r3, r3, #16
 800fa3a:	4319      	orrs	r1, r3
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	699b      	ldr	r3, [r3, #24]
 800fa40:	3b01      	subs	r3, #1
 800fa42:	061b      	lsls	r3, r3, #24
 800fa44:	430b      	orrs	r3, r1
 800fa46:	431a      	orrs	r2, r3
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800fa4c:	2300      	movs	r3, #0
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3714      	adds	r7, #20
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr
 800fa5a:	bf00      	nop
 800fa5c:	ff0f0fff 	.word	0xff0f0fff

0800fa60 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fa60:	b084      	sub	sp, #16
 800fa62:	b480      	push	{r7}
 800fa64:	b085      	sub	sp, #20
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
 800fa6a:	f107 001c 	add.w	r0, r7, #28
 800fa6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fa72:	2300      	movs	r3, #0
 800fa74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fa76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fa78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fa7a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800fa7e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fa80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800fa82:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fa84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800fa86:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fa88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800fa8a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	685a      	ldr	r2, [r3, #4]
 800fa96:	4b07      	ldr	r3, [pc, #28]	@ (800fab4 <SDMMC_Init+0x54>)
 800fa98:	4013      	ands	r3, r2
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	431a      	orrs	r2, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800faa2:	2300      	movs	r3, #0
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3714      	adds	r7, #20
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	b004      	add	sp, #16
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop
 800fab4:	ffff8100 	.word	0xffff8100

0800fab8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800fab8:	b480      	push	{r7}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2203      	movs	r2, #3
 800fac4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fac6:	2300      	movs	r3, #0
}
 800fac8:	4618      	mov	r0, r3
 800faca:	370c      	adds	r7, #12
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f003 0303 	and.w	r3, r3, #3
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	370c      	adds	r7, #12
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr

0800faf0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b085      	sub	sp, #20
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fafa:	2300      	movs	r3, #0
 800fafc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	681a      	ldr	r2, [r3, #0]
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fb0e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800fb14:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800fb1a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fb1c:	68fa      	ldr	r2, [r7, #12]
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	68da      	ldr	r2, [r3, #12]
 800fb26:	4b06      	ldr	r3, [pc, #24]	@ (800fb40 <SDMMC_SendCommand+0x50>)
 800fb28:	4013      	ands	r3, r2
 800fb2a:	68fa      	ldr	r2, [r7, #12]
 800fb2c:	431a      	orrs	r2, r3
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800fb32:	2300      	movs	r3, #0
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3714      	adds	r7, #20
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr
 800fb40:	fffff000 	.word	0xfffff000

0800fb44 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	691b      	ldr	r3, [r3, #16]
 800fb50:	b2db      	uxtb	r3, r3
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	370c      	adds	r7, #12
 800fb56:	46bd      	mov	sp, r7
 800fb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5c:	4770      	bx	lr

0800fb5e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fb5e:	b480      	push	{r7}
 800fb60:	b085      	sub	sp, #20
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	6078      	str	r0, [r7, #4]
 800fb66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	3314      	adds	r3, #20
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	4413      	add	r3, r2
 800fb72:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
}  
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3714      	adds	r7, #20
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb82:	4770      	bx	lr

0800fb84 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	685a      	ldr	r2, [r3, #4]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fbaa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800fbb0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800fbb6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbc2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	431a      	orrs	r2, r3
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800fbce:	2300      	movs	r3, #0

}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3714      	adds	r7, #20
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr

0800fbdc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b088      	sub	sp, #32
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fbea:	2310      	movs	r3, #16
 800fbec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbee:	2340      	movs	r3, #64	@ 0x40
 800fbf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fbfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbfc:	f107 0308 	add.w	r3, r7, #8
 800fc00:	4619      	mov	r1, r3
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f7ff ff74 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fc08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc0c:	2110      	movs	r1, #16
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f000 f9d6 	bl	800ffc0 <SDMMC_GetCmdResp1>
 800fc14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc16:	69fb      	ldr	r3, [r7, #28]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3720      	adds	r7, #32
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}

0800fc20 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b088      	sub	sp, #32
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fc2e:	2311      	movs	r3, #17
 800fc30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc32:	2340      	movs	r3, #64	@ 0x40
 800fc34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc36:	2300      	movs	r3, #0
 800fc38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc40:	f107 0308 	add.w	r3, r7, #8
 800fc44:	4619      	mov	r1, r3
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f7ff ff52 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fc4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc50:	2111      	movs	r1, #17
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 f9b4 	bl	800ffc0 <SDMMC_GetCmdResp1>
 800fc58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc5a:	69fb      	ldr	r3, [r7, #28]
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3720      	adds	r7, #32
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b088      	sub	sp, #32
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fc72:	2312      	movs	r3, #18
 800fc74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc76:	2340      	movs	r3, #64	@ 0x40
 800fc78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc84:	f107 0308 	add.w	r3, r7, #8
 800fc88:	4619      	mov	r1, r3
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f7ff ff30 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fc90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc94:	2112      	movs	r1, #18
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f000 f992 	bl	800ffc0 <SDMMC_GetCmdResp1>
 800fc9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc9e:	69fb      	ldr	r3, [r7, #28]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3720      	adds	r7, #32
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b088      	sub	sp, #32
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fcb6:	2318      	movs	r3, #24
 800fcb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcba:	2340      	movs	r3, #64	@ 0x40
 800fcbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fcc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcc8:	f107 0308 	add.w	r3, r7, #8
 800fccc:	4619      	mov	r1, r3
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f7ff ff0e 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fcd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fcd8:	2118      	movs	r1, #24
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 f970 	bl	800ffc0 <SDMMC_GetCmdResp1>
 800fce0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fce2:	69fb      	ldr	r3, [r7, #28]
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3720      	adds	r7, #32
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b088      	sub	sp, #32
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fcfa:	2319      	movs	r3, #25
 800fcfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcfe:	2340      	movs	r3, #64	@ 0x40
 800fd00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd02:	2300      	movs	r3, #0
 800fd04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd0c:	f107 0308 	add.w	r3, r7, #8
 800fd10:	4619      	mov	r1, r3
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f7ff feec 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fd18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd1c:	2119      	movs	r1, #25
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f000 f94e 	bl	800ffc0 <SDMMC_GetCmdResp1>
 800fd24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd26:	69fb      	ldr	r3, [r7, #28]
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3720      	adds	r7, #32
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b088      	sub	sp, #32
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fd3c:	230c      	movs	r3, #12
 800fd3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd40:	2340      	movs	r3, #64	@ 0x40
 800fd42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd44:	2300      	movs	r3, #0
 800fd46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd4e:	f107 0308 	add.w	r3, r7, #8
 800fd52:	4619      	mov	r1, r3
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f7ff fecb 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fd5a:	4a05      	ldr	r2, [pc, #20]	@ (800fd70 <SDMMC_CmdStopTransfer+0x40>)
 800fd5c:	210c      	movs	r1, #12
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 f92e 	bl	800ffc0 <SDMMC_GetCmdResp1>
 800fd64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd66:	69fb      	ldr	r3, [r7, #28]
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3720      	adds	r7, #32
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	05f5e100 	.word	0x05f5e100

0800fd74 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b08a      	sub	sp, #40	@ 0x28
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fd84:	2307      	movs	r3, #7
 800fd86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd88:	2340      	movs	r3, #64	@ 0x40
 800fd8a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd94:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd96:	f107 0310 	add.w	r3, r7, #16
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	68f8      	ldr	r0, [r7, #12]
 800fd9e:	f7ff fea7 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fda2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fda6:	2107      	movs	r1, #7
 800fda8:	68f8      	ldr	r0, [r7, #12]
 800fdaa:	f000 f909 	bl	800ffc0 <SDMMC_GetCmdResp1>
 800fdae:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800fdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3728      	adds	r7, #40	@ 0x28
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b088      	sub	sp, #32
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fdd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdd8:	f107 0308 	add.w	r3, r7, #8
 800fddc:	4619      	mov	r1, r3
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f7ff fe86 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fb23 	bl	8010430 <SDMMC_GetCmdError>
 800fdea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdec:	69fb      	ldr	r3, [r7, #28]
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3720      	adds	r7, #32
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}

0800fdf6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fdf6:	b580      	push	{r7, lr}
 800fdf8:	b088      	sub	sp, #32
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fdfe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800fe02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fe04:	2308      	movs	r3, #8
 800fe06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe08:	2340      	movs	r3, #64	@ 0x40
 800fe0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe16:	f107 0308 	add.w	r3, r7, #8
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f7ff fe67 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 fab6 	bl	8010394 <SDMMC_GetCmdResp7>
 800fe28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe2a:	69fb      	ldr	r3, [r7, #28]
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3720      	adds	r7, #32
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b088      	sub	sp, #32
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fe42:	2337      	movs	r3, #55	@ 0x37
 800fe44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe46:	2340      	movs	r3, #64	@ 0x40
 800fe48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe54:	f107 0308 	add.w	r3, r7, #8
 800fe58:	4619      	mov	r1, r3
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f7ff fe48 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fe60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe64:	2137      	movs	r1, #55	@ 0x37
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f000 f8aa 	bl	800ffc0 <SDMMC_GetCmdResp1>
 800fe6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe6e:	69fb      	ldr	r3, [r7, #28]
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3720      	adds	r7, #32
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b088      	sub	sp, #32
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800fe82:	683a      	ldr	r2, [r7, #0]
 800fe84:	4b0d      	ldr	r3, [pc, #52]	@ (800febc <SDMMC_CmdAppOperCommand+0x44>)
 800fe86:	4313      	orrs	r3, r2
 800fe88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fe8a:	2329      	movs	r3, #41	@ 0x29
 800fe8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe8e:	2340      	movs	r3, #64	@ 0x40
 800fe90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe92:	2300      	movs	r3, #0
 800fe94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe9c:	f107 0308 	add.w	r3, r7, #8
 800fea0:	4619      	mov	r1, r3
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f7ff fe24 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 f9bf 	bl	801022c <SDMMC_GetCmdResp3>
 800feae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800feb0:	69fb      	ldr	r3, [r7, #28]
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3720      	adds	r7, #32
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	80100000 	.word	0x80100000

0800fec0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b088      	sub	sp, #32
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fec8:	2300      	movs	r3, #0
 800feca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fecc:	2302      	movs	r3, #2
 800fece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fed0:	23c0      	movs	r3, #192	@ 0xc0
 800fed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fed4:	2300      	movs	r3, #0
 800fed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fed8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fedc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fede:	f107 0308 	add.w	r3, r7, #8
 800fee2:	4619      	mov	r1, r3
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f7ff fe03 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 f956 	bl	801019c <SDMMC_GetCmdResp2>
 800fef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fef2:	69fb      	ldr	r3, [r7, #28]
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3720      	adds	r7, #32
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b088      	sub	sp, #32
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ff0a:	2309      	movs	r3, #9
 800ff0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ff0e:	23c0      	movs	r3, #192	@ 0xc0
 800ff10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff12:	2300      	movs	r3, #0
 800ff14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff1c:	f107 0308 	add.w	r3, r7, #8
 800ff20:	4619      	mov	r1, r3
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f7ff fde4 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f000 f937 	bl	801019c <SDMMC_GetCmdResp2>
 800ff2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff30:	69fb      	ldr	r3, [r7, #28]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3720      	adds	r7, #32
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b088      	sub	sp, #32
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
 800ff42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ff44:	2300      	movs	r3, #0
 800ff46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ff48:	2303      	movs	r3, #3
 800ff4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff4c:	2340      	movs	r3, #64	@ 0x40
 800ff4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff50:	2300      	movs	r3, #0
 800ff52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff5a:	f107 0308 	add.w	r3, r7, #8
 800ff5e:	4619      	mov	r1, r3
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f7ff fdc5 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ff66:	683a      	ldr	r2, [r7, #0]
 800ff68:	2103      	movs	r1, #3
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 f99c 	bl	80102a8 <SDMMC_GetCmdResp6>
 800ff70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff72:	69fb      	ldr	r3, [r7, #28]
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3720      	adds	r7, #32
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b088      	sub	sp, #32
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ff8a:	230d      	movs	r3, #13
 800ff8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff8e:	2340      	movs	r3, #64	@ 0x40
 800ff90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff92:	2300      	movs	r3, #0
 800ff94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff9c:	f107 0308 	add.w	r3, r7, #8
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f7ff fda4 	bl	800faf0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ffa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ffac:	210d      	movs	r1, #13
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 f806 	bl	800ffc0 <SDMMC_GetCmdResp1>
 800ffb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffb6:	69fb      	ldr	r3, [r7, #28]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3720      	adds	r7, #32
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b088      	sub	sp, #32
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	460b      	mov	r3, r1
 800ffca:	607a      	str	r2, [r7, #4]
 800ffcc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ffce:	4b70      	ldr	r3, [pc, #448]	@ (8010190 <SDMMC_GetCmdResp1+0x1d0>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	4a70      	ldr	r2, [pc, #448]	@ (8010194 <SDMMC_GetCmdResp1+0x1d4>)
 800ffd4:	fba2 2303 	umull	r2, r3, r2, r3
 800ffd8:	0a5a      	lsrs	r2, r3, #9
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	fb02 f303 	mul.w	r3, r2, r3
 800ffe0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	1e5a      	subs	r2, r3, #1
 800ffe6:	61fa      	str	r2, [r7, #28]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d102      	bne.n	800fff2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fff0:	e0c9      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fff6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fff8:	69bb      	ldr	r3, [r7, #24]
 800fffa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d0ef      	beq.n	800ffe2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010008:	2b00      	cmp	r3, #0
 801000a:	d1ea      	bne.n	800ffe2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010010:	f003 0304 	and.w	r3, r3, #4
 8010014:	2b00      	cmp	r3, #0
 8010016:	d004      	beq.n	8010022 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2204      	movs	r2, #4
 801001c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801001e:	2304      	movs	r3, #4
 8010020:	e0b1      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010026:	f003 0301 	and.w	r3, r3, #1
 801002a:	2b00      	cmp	r3, #0
 801002c:	d004      	beq.n	8010038 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	2201      	movs	r2, #1
 8010032:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010034:	2301      	movs	r3, #1
 8010036:	e0a6      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	22c5      	movs	r2, #197	@ 0xc5
 801003c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801003e:	68f8      	ldr	r0, [r7, #12]
 8010040:	f7ff fd80 	bl	800fb44 <SDMMC_GetCommandResponse>
 8010044:	4603      	mov	r3, r0
 8010046:	461a      	mov	r2, r3
 8010048:	7afb      	ldrb	r3, [r7, #11]
 801004a:	4293      	cmp	r3, r2
 801004c:	d001      	beq.n	8010052 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801004e:	2301      	movs	r3, #1
 8010050:	e099      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010052:	2100      	movs	r1, #0
 8010054:	68f8      	ldr	r0, [r7, #12]
 8010056:	f7ff fd82 	bl	800fb5e <SDMMC_GetResponse>
 801005a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801005c:	697a      	ldr	r2, [r7, #20]
 801005e:	4b4e      	ldr	r3, [pc, #312]	@ (8010198 <SDMMC_GetCmdResp1+0x1d8>)
 8010060:	4013      	ands	r3, r2
 8010062:	2b00      	cmp	r3, #0
 8010064:	d101      	bne.n	801006a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010066:	2300      	movs	r3, #0
 8010068:	e08d      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	2b00      	cmp	r3, #0
 801006e:	da02      	bge.n	8010076 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010070:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010074:	e087      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801007c:	2b00      	cmp	r3, #0
 801007e:	d001      	beq.n	8010084 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010080:	2340      	movs	r3, #64	@ 0x40
 8010082:	e080      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801008a:	2b00      	cmp	r3, #0
 801008c:	d001      	beq.n	8010092 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801008e:	2380      	movs	r3, #128	@ 0x80
 8010090:	e079      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801009c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80100a0:	e071      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d002      	beq.n	80100b2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80100ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80100b0:	e069      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d002      	beq.n	80100c2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80100bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80100c0:	e061      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d002      	beq.n	80100d2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80100cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80100d0:	e059      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d002      	beq.n	80100e2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80100dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100e0:	e051      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d002      	beq.n	80100f2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80100ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80100f0:	e049      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d002      	beq.n	8010102 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80100fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010100:	e041      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010108:	2b00      	cmp	r3, #0
 801010a:	d002      	beq.n	8010112 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801010c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010110:	e039      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010118:	2b00      	cmp	r3, #0
 801011a:	d002      	beq.n	8010122 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801011c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010120:	e031      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010128:	2b00      	cmp	r3, #0
 801012a:	d002      	beq.n	8010132 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801012c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010130:	e029      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010138:	2b00      	cmp	r3, #0
 801013a:	d002      	beq.n	8010142 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801013c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010140:	e021      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010148:	2b00      	cmp	r3, #0
 801014a:	d002      	beq.n	8010152 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801014c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010150:	e019      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010158:	2b00      	cmp	r3, #0
 801015a:	d002      	beq.n	8010162 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801015c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010160:	e011      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010168:	2b00      	cmp	r3, #0
 801016a:	d002      	beq.n	8010172 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801016c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010170:	e009      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	f003 0308 	and.w	r3, r3, #8
 8010178:	2b00      	cmp	r3, #0
 801017a:	d002      	beq.n	8010182 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801017c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010180:	e001      	b.n	8010186 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010182:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010186:	4618      	mov	r0, r3
 8010188:	3720      	adds	r7, #32
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	20000018 	.word	0x20000018
 8010194:	10624dd3 	.word	0x10624dd3
 8010198:	fdffe008 	.word	0xfdffe008

0801019c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80101a4:	4b1f      	ldr	r3, [pc, #124]	@ (8010224 <SDMMC_GetCmdResp2+0x88>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4a1f      	ldr	r2, [pc, #124]	@ (8010228 <SDMMC_GetCmdResp2+0x8c>)
 80101aa:	fba2 2303 	umull	r2, r3, r2, r3
 80101ae:	0a5b      	lsrs	r3, r3, #9
 80101b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101b4:	fb02 f303 	mul.w	r3, r2, r3
 80101b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	1e5a      	subs	r2, r3, #1
 80101be:	60fa      	str	r2, [r7, #12]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d102      	bne.n	80101ca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80101c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80101c8:	e026      	b.n	8010218 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d0ef      	beq.n	80101ba <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d1ea      	bne.n	80101ba <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101e8:	f003 0304 	and.w	r3, r3, #4
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d004      	beq.n	80101fa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2204      	movs	r2, #4
 80101f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80101f6:	2304      	movs	r3, #4
 80101f8:	e00e      	b.n	8010218 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101fe:	f003 0301 	and.w	r3, r3, #1
 8010202:	2b00      	cmp	r3, #0
 8010204:	d004      	beq.n	8010210 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2201      	movs	r2, #1
 801020a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801020c:	2301      	movs	r3, #1
 801020e:	e003      	b.n	8010218 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	22c5      	movs	r2, #197	@ 0xc5
 8010214:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010216:	2300      	movs	r3, #0
}
 8010218:	4618      	mov	r0, r3
 801021a:	3714      	adds	r7, #20
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr
 8010224:	20000018 	.word	0x20000018
 8010228:	10624dd3 	.word	0x10624dd3

0801022c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801022c:	b480      	push	{r7}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010234:	4b1a      	ldr	r3, [pc, #104]	@ (80102a0 <SDMMC_GetCmdResp3+0x74>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	4a1a      	ldr	r2, [pc, #104]	@ (80102a4 <SDMMC_GetCmdResp3+0x78>)
 801023a:	fba2 2303 	umull	r2, r3, r2, r3
 801023e:	0a5b      	lsrs	r3, r3, #9
 8010240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010244:	fb02 f303 	mul.w	r3, r2, r3
 8010248:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	1e5a      	subs	r2, r3, #1
 801024e:	60fa      	str	r2, [r7, #12]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d102      	bne.n	801025a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010254:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010258:	e01b      	b.n	8010292 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801025e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010266:	2b00      	cmp	r3, #0
 8010268:	d0ef      	beq.n	801024a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010270:	2b00      	cmp	r3, #0
 8010272:	d1ea      	bne.n	801024a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010278:	f003 0304 	and.w	r3, r3, #4
 801027c:	2b00      	cmp	r3, #0
 801027e:	d004      	beq.n	801028a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2204      	movs	r2, #4
 8010284:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010286:	2304      	movs	r3, #4
 8010288:	e003      	b.n	8010292 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	22c5      	movs	r2, #197	@ 0xc5
 801028e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010290:	2300      	movs	r3, #0
}
 8010292:	4618      	mov	r0, r3
 8010294:	3714      	adds	r7, #20
 8010296:	46bd      	mov	sp, r7
 8010298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop
 80102a0:	20000018 	.word	0x20000018
 80102a4:	10624dd3 	.word	0x10624dd3

080102a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b088      	sub	sp, #32
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	460b      	mov	r3, r1
 80102b2:	607a      	str	r2, [r7, #4]
 80102b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80102b6:	4b35      	ldr	r3, [pc, #212]	@ (801038c <SDMMC_GetCmdResp6+0xe4>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a35      	ldr	r2, [pc, #212]	@ (8010390 <SDMMC_GetCmdResp6+0xe8>)
 80102bc:	fba2 2303 	umull	r2, r3, r2, r3
 80102c0:	0a5b      	lsrs	r3, r3, #9
 80102c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102c6:	fb02 f303 	mul.w	r3, r2, r3
 80102ca:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	1e5a      	subs	r2, r3, #1
 80102d0:	61fa      	str	r2, [r7, #28]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d102      	bne.n	80102dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80102d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80102da:	e052      	b.n	8010382 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102e0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d0ef      	beq.n	80102cc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80102ec:	69bb      	ldr	r3, [r7, #24]
 80102ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d1ea      	bne.n	80102cc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102fa:	f003 0304 	and.w	r3, r3, #4
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d004      	beq.n	801030c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2204      	movs	r2, #4
 8010306:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010308:	2304      	movs	r3, #4
 801030a:	e03a      	b.n	8010382 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010310:	f003 0301 	and.w	r3, r3, #1
 8010314:	2b00      	cmp	r3, #0
 8010316:	d004      	beq.n	8010322 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2201      	movs	r2, #1
 801031c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801031e:	2301      	movs	r3, #1
 8010320:	e02f      	b.n	8010382 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f7ff fc0e 	bl	800fb44 <SDMMC_GetCommandResponse>
 8010328:	4603      	mov	r3, r0
 801032a:	461a      	mov	r2, r3
 801032c:	7afb      	ldrb	r3, [r7, #11]
 801032e:	4293      	cmp	r3, r2
 8010330:	d001      	beq.n	8010336 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010332:	2301      	movs	r3, #1
 8010334:	e025      	b.n	8010382 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	22c5      	movs	r2, #197	@ 0xc5
 801033a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801033c:	2100      	movs	r1, #0
 801033e:	68f8      	ldr	r0, [r7, #12]
 8010340:	f7ff fc0d 	bl	800fb5e <SDMMC_GetResponse>
 8010344:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 801034c:	2b00      	cmp	r3, #0
 801034e:	d106      	bne.n	801035e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	0c1b      	lsrs	r3, r3, #16
 8010354:	b29a      	uxth	r2, r3
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801035a:	2300      	movs	r3, #0
 801035c:	e011      	b.n	8010382 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010364:	2b00      	cmp	r3, #0
 8010366:	d002      	beq.n	801036e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010368:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801036c:	e009      	b.n	8010382 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010374:	2b00      	cmp	r3, #0
 8010376:	d002      	beq.n	801037e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801037c:	e001      	b.n	8010382 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801037e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010382:	4618      	mov	r0, r3
 8010384:	3720      	adds	r7, #32
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	20000018 	.word	0x20000018
 8010390:	10624dd3 	.word	0x10624dd3

08010394 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010394:	b480      	push	{r7}
 8010396:	b085      	sub	sp, #20
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801039c:	4b22      	ldr	r3, [pc, #136]	@ (8010428 <SDMMC_GetCmdResp7+0x94>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4a22      	ldr	r2, [pc, #136]	@ (801042c <SDMMC_GetCmdResp7+0x98>)
 80103a2:	fba2 2303 	umull	r2, r3, r2, r3
 80103a6:	0a5b      	lsrs	r3, r3, #9
 80103a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103ac:	fb02 f303 	mul.w	r3, r2, r3
 80103b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	1e5a      	subs	r2, r3, #1
 80103b6:	60fa      	str	r2, [r7, #12]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d102      	bne.n	80103c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80103bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80103c0:	e02c      	b.n	801041c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d0ef      	beq.n	80103b2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d1ea      	bne.n	80103b2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103e0:	f003 0304 	and.w	r3, r3, #4
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d004      	beq.n	80103f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2204      	movs	r2, #4
 80103ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80103ee:	2304      	movs	r3, #4
 80103f0:	e014      	b.n	801041c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103f6:	f003 0301 	and.w	r3, r3, #1
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d004      	beq.n	8010408 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2201      	movs	r2, #1
 8010402:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010404:	2301      	movs	r3, #1
 8010406:	e009      	b.n	801041c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801040c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010410:	2b00      	cmp	r3, #0
 8010412:	d002      	beq.n	801041a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2240      	movs	r2, #64	@ 0x40
 8010418:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801041a:	2300      	movs	r3, #0
  
}
 801041c:	4618      	mov	r0, r3
 801041e:	3714      	adds	r7, #20
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr
 8010428:	20000018 	.word	0x20000018
 801042c:	10624dd3 	.word	0x10624dd3

08010430 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010430:	b480      	push	{r7}
 8010432:	b085      	sub	sp, #20
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010438:	4b11      	ldr	r3, [pc, #68]	@ (8010480 <SDMMC_GetCmdError+0x50>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4a11      	ldr	r2, [pc, #68]	@ (8010484 <SDMMC_GetCmdError+0x54>)
 801043e:	fba2 2303 	umull	r2, r3, r2, r3
 8010442:	0a5b      	lsrs	r3, r3, #9
 8010444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010448:	fb02 f303 	mul.w	r3, r2, r3
 801044c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	1e5a      	subs	r2, r3, #1
 8010452:	60fa      	str	r2, [r7, #12]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d102      	bne.n	801045e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010458:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801045c:	e009      	b.n	8010472 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010466:	2b00      	cmp	r3, #0
 8010468:	d0f1      	beq.n	801044e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	22c5      	movs	r2, #197	@ 0xc5
 801046e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8010470:	2300      	movs	r3, #0
}
 8010472:	4618      	mov	r0, r3
 8010474:	3714      	adds	r7, #20
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr
 801047e:	bf00      	nop
 8010480:	20000018 	.word	0x20000018
 8010484:	10624dd3 	.word	0x10624dd3

08010488 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010488:	b084      	sub	sp, #16
 801048a:	b580      	push	{r7, lr}
 801048c:	b084      	sub	sp, #16
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
 8010492:	f107 001c 	add.w	r0, r7, #28
 8010496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801049a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801049e:	2b01      	cmp	r3, #1
 80104a0:	d121      	bne.n	80104e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	68da      	ldr	r2, [r3, #12]
 80104b2:	4b21      	ldr	r3, [pc, #132]	@ (8010538 <USB_CoreInit+0xb0>)
 80104b4:	4013      	ands	r3, r2
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80104c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d105      	bne.n	80104da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	68db      	ldr	r3, [r3, #12]
 80104d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f000 f9d4 	bl	8010888 <USB_CoreReset>
 80104e0:	4603      	mov	r3, r0
 80104e2:	73fb      	strb	r3, [r7, #15]
 80104e4:	e010      	b.n	8010508 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	68db      	ldr	r3, [r3, #12]
 80104ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 f9c8 	bl	8010888 <USB_CoreReset>
 80104f8:	4603      	mov	r3, r0
 80104fa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010500:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8010508:	7fbb      	ldrb	r3, [r7, #30]
 801050a:	2b01      	cmp	r3, #1
 801050c:	d10b      	bne.n	8010526 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	689b      	ldr	r3, [r3, #8]
 8010512:	f043 0206 	orr.w	r2, r3, #6
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	689b      	ldr	r3, [r3, #8]
 801051e:	f043 0220 	orr.w	r2, r3, #32
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010526:	7bfb      	ldrb	r3, [r7, #15]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3710      	adds	r7, #16
 801052c:	46bd      	mov	sp, r7
 801052e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010532:	b004      	add	sp, #16
 8010534:	4770      	bx	lr
 8010536:	bf00      	nop
 8010538:	ffbdffbf 	.word	0xffbdffbf

0801053c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801053c:	b480      	push	{r7}
 801053e:	b083      	sub	sp, #12
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	689b      	ldr	r3, [r3, #8]
 8010548:	f043 0201 	orr.w	r2, r3, #1
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010550:	2300      	movs	r3, #0
}
 8010552:	4618      	mov	r0, r3
 8010554:	370c      	adds	r7, #12
 8010556:	46bd      	mov	sp, r7
 8010558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055c:	4770      	bx	lr

0801055e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801055e:	b480      	push	{r7}
 8010560:	b083      	sub	sp, #12
 8010562:	af00      	add	r7, sp, #0
 8010564:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	f023 0201 	bic.w	r2, r3, #1
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010572:	2300      	movs	r3, #0
}
 8010574:	4618      	mov	r0, r3
 8010576:	370c      	adds	r7, #12
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	460b      	mov	r3, r1
 801058a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801058c:	2300      	movs	r3, #0
 801058e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	68db      	ldr	r3, [r3, #12]
 8010594:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801059c:	78fb      	ldrb	r3, [r7, #3]
 801059e:	2b01      	cmp	r3, #1
 80105a0:	d115      	bne.n	80105ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	68db      	ldr	r3, [r3, #12]
 80105a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80105ae:	200a      	movs	r0, #10
 80105b0:	f7f4 fd9a 	bl	80050e8 <HAL_Delay>
      ms += 10U;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	330a      	adds	r3, #10
 80105b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 f956 	bl	801086c <USB_GetMode>
 80105c0:	4603      	mov	r3, r0
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d01e      	beq.n	8010604 <USB_SetCurrentMode+0x84>
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80105ca:	d9f0      	bls.n	80105ae <USB_SetCurrentMode+0x2e>
 80105cc:	e01a      	b.n	8010604 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80105ce:	78fb      	ldrb	r3, [r7, #3]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d115      	bne.n	8010600 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80105e0:	200a      	movs	r0, #10
 80105e2:	f7f4 fd81 	bl	80050e8 <HAL_Delay>
      ms += 10U;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	330a      	adds	r3, #10
 80105ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 f93d 	bl	801086c <USB_GetMode>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d005      	beq.n	8010604 <USB_SetCurrentMode+0x84>
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80105fc:	d9f0      	bls.n	80105e0 <USB_SetCurrentMode+0x60>
 80105fe:	e001      	b.n	8010604 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010600:	2301      	movs	r3, #1
 8010602:	e005      	b.n	8010610 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2bc8      	cmp	r3, #200	@ 0xc8
 8010608:	d101      	bne.n	801060e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801060a:	2301      	movs	r3, #1
 801060c:	e000      	b.n	8010610 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801060e:	2300      	movs	r3, #0
}
 8010610:	4618      	mov	r0, r3
 8010612:	3710      	adds	r7, #16
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010618:	b480      	push	{r7}
 801061a:	b085      	sub	sp, #20
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010622:	2300      	movs	r3, #0
 8010624:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	3301      	adds	r3, #1
 801062a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010632:	d901      	bls.n	8010638 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010634:	2303      	movs	r3, #3
 8010636:	e01b      	b.n	8010670 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	691b      	ldr	r3, [r3, #16]
 801063c:	2b00      	cmp	r3, #0
 801063e:	daf2      	bge.n	8010626 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010640:	2300      	movs	r3, #0
 8010642:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	019b      	lsls	r3, r3, #6
 8010648:	f043 0220 	orr.w	r2, r3, #32
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	3301      	adds	r3, #1
 8010654:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801065c:	d901      	bls.n	8010662 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801065e:	2303      	movs	r3, #3
 8010660:	e006      	b.n	8010670 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	691b      	ldr	r3, [r3, #16]
 8010666:	f003 0320 	and.w	r3, r3, #32
 801066a:	2b20      	cmp	r3, #32
 801066c:	d0f0      	beq.n	8010650 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801066e:	2300      	movs	r3, #0
}
 8010670:	4618      	mov	r0, r3
 8010672:	3714      	adds	r7, #20
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr

0801067c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801067c:	b480      	push	{r7}
 801067e:	b085      	sub	sp, #20
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010684:	2300      	movs	r3, #0
 8010686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	3301      	adds	r3, #1
 801068c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010694:	d901      	bls.n	801069a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010696:	2303      	movs	r3, #3
 8010698:	e018      	b.n	80106cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	691b      	ldr	r3, [r3, #16]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	daf2      	bge.n	8010688 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80106a2:	2300      	movs	r3, #0
 80106a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2210      	movs	r2, #16
 80106aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	3301      	adds	r3, #1
 80106b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80106b8:	d901      	bls.n	80106be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80106ba:	2303      	movs	r3, #3
 80106bc:	e006      	b.n	80106cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	691b      	ldr	r3, [r3, #16]
 80106c2:	f003 0310 	and.w	r3, r3, #16
 80106c6:	2b10      	cmp	r3, #16
 80106c8:	d0f0      	beq.n	80106ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80106ca:	2300      	movs	r3, #0
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3714      	adds	r7, #20
 80106d0:	46bd      	mov	sp, r7
 80106d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d6:	4770      	bx	lr

080106d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80106d8:	b480      	push	{r7}
 80106da:	b089      	sub	sp, #36	@ 0x24
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	4611      	mov	r1, r2
 80106e4:	461a      	mov	r2, r3
 80106e6:	460b      	mov	r3, r1
 80106e8:	71fb      	strb	r3, [r7, #7]
 80106ea:	4613      	mov	r3, r2
 80106ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80106f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d123      	bne.n	8010746 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80106fe:	88bb      	ldrh	r3, [r7, #4]
 8010700:	3303      	adds	r3, #3
 8010702:	089b      	lsrs	r3, r3, #2
 8010704:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010706:	2300      	movs	r3, #0
 8010708:	61bb      	str	r3, [r7, #24]
 801070a:	e018      	b.n	801073e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801070c:	79fb      	ldrb	r3, [r7, #7]
 801070e:	031a      	lsls	r2, r3, #12
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	4413      	add	r3, r2
 8010714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010718:	461a      	mov	r2, r3
 801071a:	69fb      	ldr	r3, [r7, #28]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010720:	69fb      	ldr	r3, [r7, #28]
 8010722:	3301      	adds	r3, #1
 8010724:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	3301      	adds	r3, #1
 801072a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	3301      	adds	r3, #1
 8010730:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	3301      	adds	r3, #1
 8010736:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010738:	69bb      	ldr	r3, [r7, #24]
 801073a:	3301      	adds	r3, #1
 801073c:	61bb      	str	r3, [r7, #24]
 801073e:	69ba      	ldr	r2, [r7, #24]
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	429a      	cmp	r2, r3
 8010744:	d3e2      	bcc.n	801070c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3724      	adds	r7, #36	@ 0x24
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr

08010754 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010754:	b480      	push	{r7}
 8010756:	b08b      	sub	sp, #44	@ 0x2c
 8010758:	af00      	add	r7, sp, #0
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	60b9      	str	r1, [r7, #8]
 801075e:	4613      	mov	r3, r2
 8010760:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801076a:	88fb      	ldrh	r3, [r7, #6]
 801076c:	089b      	lsrs	r3, r3, #2
 801076e:	b29b      	uxth	r3, r3
 8010770:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010772:	88fb      	ldrh	r3, [r7, #6]
 8010774:	f003 0303 	and.w	r3, r3, #3
 8010778:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801077a:	2300      	movs	r3, #0
 801077c:	623b      	str	r3, [r7, #32]
 801077e:	e014      	b.n	80107aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010780:	69bb      	ldr	r3, [r7, #24]
 8010782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010786:	681a      	ldr	r2, [r3, #0]
 8010788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801078a:	601a      	str	r2, [r3, #0]
    pDest++;
 801078c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801078e:	3301      	adds	r3, #1
 8010790:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010794:	3301      	adds	r3, #1
 8010796:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801079a:	3301      	adds	r3, #1
 801079c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801079e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a0:	3301      	adds	r3, #1
 80107a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80107a4:	6a3b      	ldr	r3, [r7, #32]
 80107a6:	3301      	adds	r3, #1
 80107a8:	623b      	str	r3, [r7, #32]
 80107aa:	6a3a      	ldr	r2, [r7, #32]
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d3e6      	bcc.n	8010780 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80107b2:	8bfb      	ldrh	r3, [r7, #30]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d01e      	beq.n	80107f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80107b8:	2300      	movs	r3, #0
 80107ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80107bc:	69bb      	ldr	r3, [r7, #24]
 80107be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80107c2:	461a      	mov	r2, r3
 80107c4:	f107 0310 	add.w	r3, r7, #16
 80107c8:	6812      	ldr	r2, [r2, #0]
 80107ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80107cc:	693a      	ldr	r2, [r7, #16]
 80107ce:	6a3b      	ldr	r3, [r7, #32]
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	00db      	lsls	r3, r3, #3
 80107d4:	fa22 f303 	lsr.w	r3, r2, r3
 80107d8:	b2da      	uxtb	r2, r3
 80107da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107dc:	701a      	strb	r2, [r3, #0]
      i++;
 80107de:	6a3b      	ldr	r3, [r7, #32]
 80107e0:	3301      	adds	r3, #1
 80107e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80107e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e6:	3301      	adds	r3, #1
 80107e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80107ea:	8bfb      	ldrh	r3, [r7, #30]
 80107ec:	3b01      	subs	r3, #1
 80107ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80107f0:	8bfb      	ldrh	r3, [r7, #30]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d1ea      	bne.n	80107cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80107f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	372c      	adds	r7, #44	@ 0x2c
 80107fc:	46bd      	mov	sp, r7
 80107fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010802:	4770      	bx	lr

08010804 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010804:	b480      	push	{r7}
 8010806:	b085      	sub	sp, #20
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	695b      	ldr	r3, [r3, #20]
 8010810:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	699b      	ldr	r3, [r3, #24]
 8010816:	68fa      	ldr	r2, [r7, #12]
 8010818:	4013      	ands	r3, r2
 801081a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801081c:	68fb      	ldr	r3, [r7, #12]
}
 801081e:	4618      	mov	r0, r3
 8010820:	3714      	adds	r7, #20
 8010822:	46bd      	mov	sp, r7
 8010824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010828:	4770      	bx	lr

0801082a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 801082a:	b480      	push	{r7}
 801082c:	b085      	sub	sp, #20
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
 8010832:	460b      	mov	r3, r1
 8010834:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 801083a:	78fb      	ldrb	r3, [r7, #3]
 801083c:	015a      	lsls	r2, r3, #5
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	4413      	add	r3, r2
 8010842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010846:	689b      	ldr	r3, [r3, #8]
 8010848:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 801084a:	78fb      	ldrb	r3, [r7, #3]
 801084c:	015a      	lsls	r2, r3, #5
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	4413      	add	r3, r2
 8010852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010856:	68db      	ldr	r3, [r3, #12]
 8010858:	68ba      	ldr	r2, [r7, #8]
 801085a:	4013      	ands	r3, r2
 801085c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801085e:	68bb      	ldr	r3, [r7, #8]
}
 8010860:	4618      	mov	r0, r3
 8010862:	3714      	adds	r7, #20
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr

0801086c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	695b      	ldr	r3, [r3, #20]
 8010878:	f003 0301 	and.w	r3, r3, #1
}
 801087c:	4618      	mov	r0, r3
 801087e:	370c      	adds	r7, #12
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr

08010888 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010888:	b480      	push	{r7}
 801088a:	b085      	sub	sp, #20
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010890:	2300      	movs	r3, #0
 8010892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	3301      	adds	r3, #1
 8010898:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80108a0:	d901      	bls.n	80108a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80108a2:	2303      	movs	r3, #3
 80108a4:	e022      	b.n	80108ec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	691b      	ldr	r3, [r3, #16]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	daf2      	bge.n	8010894 <USB_CoreReset+0xc>

  count = 10U;
 80108ae:	230a      	movs	r3, #10
 80108b0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80108b2:	e002      	b.n	80108ba <USB_CoreReset+0x32>
  {
    count--;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	3b01      	subs	r3, #1
 80108b8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d1f9      	bne.n	80108b4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	691b      	ldr	r3, [r3, #16]
 80108c4:	f043 0201 	orr.w	r2, r3, #1
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	3301      	adds	r3, #1
 80108d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80108d8:	d901      	bls.n	80108de <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80108da:	2303      	movs	r3, #3
 80108dc:	e006      	b.n	80108ec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	691b      	ldr	r3, [r3, #16]
 80108e2:	f003 0301 	and.w	r3, r3, #1
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d0f0      	beq.n	80108cc <USB_CoreReset+0x44>

  return HAL_OK;
 80108ea:	2300      	movs	r3, #0
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3714      	adds	r7, #20
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr

080108f8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80108f8:	b084      	sub	sp, #16
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b086      	sub	sp, #24
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
 8010902:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801090a:	2300      	movs	r3, #0
 801090c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010918:	461a      	mov	r2, r3
 801091a:	2300      	movs	r3, #0
 801091c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010922:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	68db      	ldr	r3, [r3, #12]
 801092e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010932:	2b00      	cmp	r3, #0
 8010934:	d119      	bne.n	801096a <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8010936:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801093a:	2b01      	cmp	r3, #1
 801093c:	d10a      	bne.n	8010954 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	68fa      	ldr	r2, [r7, #12]
 8010948:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801094c:	f043 0304 	orr.w	r3, r3, #4
 8010950:	6013      	str	r3, [r2, #0]
 8010952:	e014      	b.n	801097e <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	68fa      	ldr	r2, [r7, #12]
 801095e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010962:	f023 0304 	bic.w	r3, r3, #4
 8010966:	6013      	str	r3, [r2, #0]
 8010968:	e009      	b.n	801097e <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	68fa      	ldr	r2, [r7, #12]
 8010974:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010978:	f023 0304 	bic.w	r3, r3, #4
 801097c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801097e:	2110      	movs	r1, #16
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7ff fe49 	bl	8010618 <USB_FlushTxFifo>
 8010986:	4603      	mov	r3, r0
 8010988:	2b00      	cmp	r3, #0
 801098a:	d001      	beq.n	8010990 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 801098c:	2301      	movs	r3, #1
 801098e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f7ff fe73 	bl	801067c <USB_FlushRxFifo>
 8010996:	4603      	mov	r3, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d001      	beq.n	80109a0 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 801099c:	2301      	movs	r3, #1
 801099e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80109a0:	2300      	movs	r3, #0
 80109a2:	613b      	str	r3, [r7, #16]
 80109a4:	e015      	b.n	80109d2 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	015a      	lsls	r2, r3, #5
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	4413      	add	r3, r2
 80109ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80109b2:	461a      	mov	r2, r3
 80109b4:	f04f 33ff 	mov.w	r3, #4294967295
 80109b8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	015a      	lsls	r2, r3, #5
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	4413      	add	r3, r2
 80109c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80109c6:	461a      	mov	r2, r3
 80109c8:	2300      	movs	r3, #0
 80109ca:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	3301      	adds	r3, #1
 80109d0:	613b      	str	r3, [r7, #16]
 80109d2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80109d6:	461a      	mov	r2, r3
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	4293      	cmp	r3, r2
 80109dc:	d3e3      	bcc.n	80109a6 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2200      	movs	r2, #0
 80109e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f04f 32ff 	mov.w	r2, #4294967295
 80109ea:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	4a18      	ldr	r2, [pc, #96]	@ (8010a50 <USB_HostInit+0x158>)
 80109f0:	4293      	cmp	r3, r2
 80109f2:	d10b      	bne.n	8010a0c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80109fa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	4a15      	ldr	r2, [pc, #84]	@ (8010a54 <USB_HostInit+0x15c>)
 8010a00:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	4a14      	ldr	r2, [pc, #80]	@ (8010a58 <USB_HostInit+0x160>)
 8010a06:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8010a0a:	e009      	b.n	8010a20 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2280      	movs	r2, #128	@ 0x80
 8010a10:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4a11      	ldr	r2, [pc, #68]	@ (8010a5c <USB_HostInit+0x164>)
 8010a16:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	4a11      	ldr	r2, [pc, #68]	@ (8010a60 <USB_HostInit+0x168>)
 8010a1c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010a20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d105      	bne.n	8010a34 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	699b      	ldr	r3, [r3, #24]
 8010a2c:	f043 0210 	orr.w	r2, r3, #16
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	699a      	ldr	r2, [r3, #24]
 8010a38:	4b0a      	ldr	r3, [pc, #40]	@ (8010a64 <USB_HostInit+0x16c>)
 8010a3a:	4313      	orrs	r3, r2
 8010a3c:	687a      	ldr	r2, [r7, #4]
 8010a3e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8010a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3718      	adds	r7, #24
 8010a46:	46bd      	mov	sp, r7
 8010a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010a4c:	b004      	add	sp, #16
 8010a4e:	4770      	bx	lr
 8010a50:	40040000 	.word	0x40040000
 8010a54:	01000200 	.word	0x01000200
 8010a58:	00e00300 	.word	0x00e00300
 8010a5c:	00600080 	.word	0x00600080
 8010a60:	004000e0 	.word	0x004000e0
 8010a64:	a3200008 	.word	0xa3200008

08010a68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	460b      	mov	r3, r1
 8010a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	68fa      	ldr	r2, [r7, #12]
 8010a82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010a86:	f023 0303 	bic.w	r3, r3, #3
 8010a8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a92:	681a      	ldr	r2, [r3, #0]
 8010a94:	78fb      	ldrb	r3, [r7, #3]
 8010a96:	f003 0303 	and.w	r3, r3, #3
 8010a9a:	68f9      	ldr	r1, [r7, #12]
 8010a9c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8010aa0:	4313      	orrs	r3, r2
 8010aa2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8010aa4:	78fb      	ldrb	r3, [r7, #3]
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d107      	bne.n	8010aba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8010ab6:	6053      	str	r3, [r2, #4]
 8010ab8:	e00c      	b.n	8010ad4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8010aba:	78fb      	ldrb	r3, [r7, #3]
 8010abc:	2b02      	cmp	r3, #2
 8010abe:	d107      	bne.n	8010ad0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8010acc:	6053      	str	r3, [r2, #4]
 8010ace:	e001      	b.n	8010ad4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	e000      	b.n	8010ad6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8010ad4:	2300      	movs	r3, #0
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3714      	adds	r7, #20
 8010ada:	46bd      	mov	sp, r7
 8010adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae0:	4770      	bx	lr

08010ae2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8010ae2:	b580      	push	{r7, lr}
 8010ae4:	b084      	sub	sp, #16
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8010aee:	2300      	movs	r3, #0
 8010af0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8010b02:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	68fa      	ldr	r2, [r7, #12]
 8010b08:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010b10:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8010b12:	2064      	movs	r0, #100	@ 0x64
 8010b14:	f7f4 fae8 	bl	80050e8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	68fa      	ldr	r2, [r7, #12]
 8010b1c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b24:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8010b26:	200a      	movs	r0, #10
 8010b28:	f7f4 fade 	bl	80050e8 <HAL_Delay>

  return HAL_OK;
 8010b2c:	2300      	movs	r3, #0
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3710      	adds	r7, #16
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8010b36:	b480      	push	{r7}
 8010b38:	b085      	sub	sp, #20
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
 8010b3e:	460b      	mov	r3, r1
 8010b40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010b46:	2300      	movs	r3, #0
 8010b48:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8010b5a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d109      	bne.n	8010b7a <USB_DriveVbus+0x44>
 8010b66:	78fb      	ldrb	r3, [r7, #3]
 8010b68:	2b01      	cmp	r3, #1
 8010b6a:	d106      	bne.n	8010b7a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	68fa      	ldr	r2, [r7, #12]
 8010b70:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010b74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010b78:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b84:	d109      	bne.n	8010b9a <USB_DriveVbus+0x64>
 8010b86:	78fb      	ldrb	r3, [r7, #3]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d106      	bne.n	8010b9a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	68fa      	ldr	r2, [r7, #12]
 8010b90:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010b94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010b98:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8010b9a:	2300      	movs	r3, #0
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3714      	adds	r7, #20
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr

08010ba8 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	0c5b      	lsrs	r3, r3, #17
 8010bc6:	f003 0303 	and.w	r3, r3, #3
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3714      	adds	r7, #20
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr

08010bd6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8010bd6:	b480      	push	{r7}
 8010bd8:	b085      	sub	sp, #20
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010be8:	689b      	ldr	r3, [r3, #8]
 8010bea:	b29b      	uxth	r3, r3
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3714      	adds	r7, #20
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr

08010bf8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b088      	sub	sp, #32
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	4608      	mov	r0, r1
 8010c02:	4611      	mov	r1, r2
 8010c04:	461a      	mov	r2, r3
 8010c06:	4603      	mov	r3, r0
 8010c08:	70fb      	strb	r3, [r7, #3]
 8010c0a:	460b      	mov	r3, r1
 8010c0c:	70bb      	strb	r3, [r7, #2]
 8010c0e:	4613      	mov	r3, r2
 8010c10:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8010c12:	2300      	movs	r3, #0
 8010c14:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8010c1a:	78fb      	ldrb	r3, [r7, #3]
 8010c1c:	015a      	lsls	r2, r3, #5
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	4413      	add	r3, r2
 8010c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c26:	461a      	mov	r2, r3
 8010c28:	f04f 33ff 	mov.w	r3, #4294967295
 8010c2c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8010c2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010c32:	2b03      	cmp	r3, #3
 8010c34:	d87c      	bhi.n	8010d30 <USB_HC_Init+0x138>
 8010c36:	a201      	add	r2, pc, #4	@ (adr r2, 8010c3c <USB_HC_Init+0x44>)
 8010c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c3c:	08010c4d 	.word	0x08010c4d
 8010c40:	08010cf3 	.word	0x08010cf3
 8010c44:	08010c4d 	.word	0x08010c4d
 8010c48:	08010cb5 	.word	0x08010cb5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010c4c:	78fb      	ldrb	r3, [r7, #3]
 8010c4e:	015a      	lsls	r2, r3, #5
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	4413      	add	r3, r2
 8010c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c58:	461a      	mov	r2, r3
 8010c5a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8010c5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8010c60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	da10      	bge.n	8010c8a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010c68:	78fb      	ldrb	r3, [r7, #3]
 8010c6a:	015a      	lsls	r2, r3, #5
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	4413      	add	r3, r2
 8010c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c74:	68db      	ldr	r3, [r3, #12]
 8010c76:	78fa      	ldrb	r2, [r7, #3]
 8010c78:	0151      	lsls	r1, r2, #5
 8010c7a:	693a      	ldr	r2, [r7, #16]
 8010c7c:	440a      	add	r2, r1
 8010c7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010c86:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8010c88:	e055      	b.n	8010d36 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4a6f      	ldr	r2, [pc, #444]	@ (8010e4c <USB_HC_Init+0x254>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d151      	bne.n	8010d36 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8010c92:	78fb      	ldrb	r3, [r7, #3]
 8010c94:	015a      	lsls	r2, r3, #5
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	4413      	add	r3, r2
 8010c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	78fa      	ldrb	r2, [r7, #3]
 8010ca2:	0151      	lsls	r1, r2, #5
 8010ca4:	693a      	ldr	r2, [r7, #16]
 8010ca6:	440a      	add	r2, r1
 8010ca8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010cac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010cb0:	60d3      	str	r3, [r2, #12]
      break;
 8010cb2:	e040      	b.n	8010d36 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010cb4:	78fb      	ldrb	r3, [r7, #3]
 8010cb6:	015a      	lsls	r2, r3, #5
 8010cb8:	693b      	ldr	r3, [r7, #16]
 8010cba:	4413      	add	r3, r2
 8010cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	f240 639d 	movw	r3, #1693	@ 0x69d
 8010cc6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010cc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	da34      	bge.n	8010d3a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010cd0:	78fb      	ldrb	r3, [r7, #3]
 8010cd2:	015a      	lsls	r2, r3, #5
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	4413      	add	r3, r2
 8010cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cdc:	68db      	ldr	r3, [r3, #12]
 8010cde:	78fa      	ldrb	r2, [r7, #3]
 8010ce0:	0151      	lsls	r1, r2, #5
 8010ce2:	693a      	ldr	r2, [r7, #16]
 8010ce4:	440a      	add	r2, r1
 8010ce6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010cee:	60d3      	str	r3, [r2, #12]
      }

      break;
 8010cf0:	e023      	b.n	8010d3a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010cf2:	78fb      	ldrb	r3, [r7, #3]
 8010cf4:	015a      	lsls	r2, r3, #5
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	4413      	add	r3, r2
 8010cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cfe:	461a      	mov	r2, r3
 8010d00:	f240 2325 	movw	r3, #549	@ 0x225
 8010d04:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010d06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	da17      	bge.n	8010d3e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8010d0e:	78fb      	ldrb	r3, [r7, #3]
 8010d10:	015a      	lsls	r2, r3, #5
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	4413      	add	r3, r2
 8010d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	78fa      	ldrb	r2, [r7, #3]
 8010d1e:	0151      	lsls	r1, r2, #5
 8010d20:	693a      	ldr	r2, [r7, #16]
 8010d22:	440a      	add	r2, r1
 8010d24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010d28:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8010d2c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8010d2e:	e006      	b.n	8010d3e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8010d30:	2301      	movs	r3, #1
 8010d32:	77fb      	strb	r3, [r7, #31]
      break;
 8010d34:	e004      	b.n	8010d40 <USB_HC_Init+0x148>
      break;
 8010d36:	bf00      	nop
 8010d38:	e002      	b.n	8010d40 <USB_HC_Init+0x148>
      break;
 8010d3a:	bf00      	nop
 8010d3c:	e000      	b.n	8010d40 <USB_HC_Init+0x148>
      break;
 8010d3e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8010d40:	78fb      	ldrb	r3, [r7, #3]
 8010d42:	015a      	lsls	r2, r3, #5
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	4413      	add	r3, r2
 8010d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	2300      	movs	r3, #0
 8010d50:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8010d52:	78fb      	ldrb	r3, [r7, #3]
 8010d54:	015a      	lsls	r2, r3, #5
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	4413      	add	r3, r2
 8010d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	78fa      	ldrb	r2, [r7, #3]
 8010d62:	0151      	lsls	r1, r2, #5
 8010d64:	693a      	ldr	r2, [r7, #16]
 8010d66:	440a      	add	r2, r1
 8010d68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010d6c:	f043 0302 	orr.w	r3, r3, #2
 8010d70:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010d78:	699a      	ldr	r2, [r3, #24]
 8010d7a:	78fb      	ldrb	r3, [r7, #3]
 8010d7c:	f003 030f 	and.w	r3, r3, #15
 8010d80:	2101      	movs	r1, #1
 8010d82:	fa01 f303 	lsl.w	r3, r1, r3
 8010d86:	6939      	ldr	r1, [r7, #16]
 8010d88:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8010d8c:	4313      	orrs	r3, r2
 8010d8e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	699b      	ldr	r3, [r3, #24]
 8010d94:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8010d9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	da03      	bge.n	8010dac <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8010da4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010da8:	61bb      	str	r3, [r7, #24]
 8010daa:	e001      	b.n	8010db0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8010dac:	2300      	movs	r3, #0
 8010dae:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f7ff fef9 	bl	8010ba8 <USB_GetHostSpeed>
 8010db6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8010db8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	d106      	bne.n	8010dce <USB_HC_Init+0x1d6>
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	2b02      	cmp	r3, #2
 8010dc4:	d003      	beq.n	8010dce <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8010dc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010dca:	617b      	str	r3, [r7, #20]
 8010dcc:	e001      	b.n	8010dd2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010dd2:	787b      	ldrb	r3, [r7, #1]
 8010dd4:	059b      	lsls	r3, r3, #22
 8010dd6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010dda:	78bb      	ldrb	r3, [r7, #2]
 8010ddc:	02db      	lsls	r3, r3, #11
 8010dde:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010de2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010de4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010de8:	049b      	lsls	r3, r3, #18
 8010dea:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010dee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8010df0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010df2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010df6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8010df8:	69bb      	ldr	r3, [r7, #24]
 8010dfa:	431a      	orrs	r2, r3
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010e00:	78fa      	ldrb	r2, [r7, #3]
 8010e02:	0151      	lsls	r1, r2, #5
 8010e04:	693a      	ldr	r2, [r7, #16]
 8010e06:	440a      	add	r2, r1
 8010e08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8010e0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010e10:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8010e12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010e16:	2b03      	cmp	r3, #3
 8010e18:	d003      	beq.n	8010e22 <USB_HC_Init+0x22a>
 8010e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010e1e:	2b01      	cmp	r3, #1
 8010e20:	d10f      	bne.n	8010e42 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8010e22:	78fb      	ldrb	r3, [r7, #3]
 8010e24:	015a      	lsls	r2, r3, #5
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	4413      	add	r3, r2
 8010e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	78fa      	ldrb	r2, [r7, #3]
 8010e32:	0151      	lsls	r1, r2, #5
 8010e34:	693a      	ldr	r2, [r7, #16]
 8010e36:	440a      	add	r2, r1
 8010e38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010e3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010e40:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8010e42:	7ffb      	ldrb	r3, [r7, #31]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3720      	adds	r7, #32
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	40040000 	.word	0x40040000

08010e50 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b08c      	sub	sp, #48	@ 0x30
 8010e54:	af02      	add	r7, sp, #8
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	60b9      	str	r1, [r7, #8]
 8010e5a:	4613      	mov	r3, r2
 8010e5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	785b      	ldrb	r3, [r3, #1]
 8010e66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8010e68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e6c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	4a5d      	ldr	r2, [pc, #372]	@ (8010fe8 <USB_HC_StartXfer+0x198>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d12f      	bne.n	8010ed6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8010e76:	79fb      	ldrb	r3, [r7, #7]
 8010e78:	2b01      	cmp	r3, #1
 8010e7a:	d11c      	bne.n	8010eb6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	7c9b      	ldrb	r3, [r3, #18]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d003      	beq.n	8010e8c <USB_HC_StartXfer+0x3c>
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	7c9b      	ldrb	r3, [r3, #18]
 8010e88:	2b02      	cmp	r3, #2
 8010e8a:	d124      	bne.n	8010ed6 <USB_HC_StartXfer+0x86>
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	799b      	ldrb	r3, [r3, #6]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d120      	bne.n	8010ed6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8010e94:	69fb      	ldr	r3, [r7, #28]
 8010e96:	015a      	lsls	r2, r3, #5
 8010e98:	6a3b      	ldr	r3, [r7, #32]
 8010e9a:	4413      	add	r3, r2
 8010e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	69fa      	ldr	r2, [r7, #28]
 8010ea4:	0151      	lsls	r1, r2, #5
 8010ea6:	6a3a      	ldr	r2, [r7, #32]
 8010ea8:	440a      	add	r2, r1
 8010eaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010eb2:	60d3      	str	r3, [r2, #12]
 8010eb4:	e00f      	b.n	8010ed6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	791b      	ldrb	r3, [r3, #4]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d10b      	bne.n	8010ed6 <USB_HC_StartXfer+0x86>
 8010ebe:	68bb      	ldr	r3, [r7, #8]
 8010ec0:	795b      	ldrb	r3, [r3, #5]
 8010ec2:	2b01      	cmp	r3, #1
 8010ec4:	d107      	bne.n	8010ed6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	785b      	ldrb	r3, [r3, #1]
 8010eca:	4619      	mov	r1, r3
 8010ecc:	68f8      	ldr	r0, [r7, #12]
 8010ece:	f000 fb6b 	bl	80115a8 <USB_DoPing>
        return HAL_OK;
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	e232      	b.n	801133c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	799b      	ldrb	r3, [r3, #6]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d158      	bne.n	8010f90 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8010ede:	2301      	movs	r3, #1
 8010ee0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	78db      	ldrb	r3, [r3, #3]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d007      	beq.n	8010efa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010eea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010eec:	68ba      	ldr	r2, [r7, #8]
 8010eee:	8a92      	ldrh	r2, [r2, #20]
 8010ef0:	fb03 f202 	mul.w	r2, r3, r2
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	61da      	str	r2, [r3, #28]
 8010ef8:	e07c      	b.n	8010ff4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	7c9b      	ldrb	r3, [r3, #18]
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d130      	bne.n	8010f64 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	6a1b      	ldr	r3, [r3, #32]
 8010f06:	2bbc      	cmp	r3, #188	@ 0xbc
 8010f08:	d918      	bls.n	8010f3c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	8a9b      	ldrh	r3, [r3, #20]
 8010f0e:	461a      	mov	r2, r3
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	69da      	ldr	r2, [r3, #28]
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d003      	beq.n	8010f2c <USB_HC_StartXfer+0xdc>
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	68db      	ldr	r3, [r3, #12]
 8010f28:	2b02      	cmp	r3, #2
 8010f2a:	d103      	bne.n	8010f34 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	2202      	movs	r2, #2
 8010f30:	60da      	str	r2, [r3, #12]
 8010f32:	e05f      	b.n	8010ff4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	2201      	movs	r2, #1
 8010f38:	60da      	str	r2, [r3, #12]
 8010f3a:	e05b      	b.n	8010ff4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	6a1a      	ldr	r2, [r3, #32]
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	2b01      	cmp	r3, #1
 8010f4a:	d007      	beq.n	8010f5c <USB_HC_StartXfer+0x10c>
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	68db      	ldr	r3, [r3, #12]
 8010f50:	2b02      	cmp	r3, #2
 8010f52:	d003      	beq.n	8010f5c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	2204      	movs	r2, #4
 8010f58:	60da      	str	r2, [r3, #12]
 8010f5a:	e04b      	b.n	8010ff4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	2203      	movs	r2, #3
 8010f60:	60da      	str	r2, [r3, #12]
 8010f62:	e047      	b.n	8010ff4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8010f64:	79fb      	ldrb	r3, [r7, #7]
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d10d      	bne.n	8010f86 <USB_HC_StartXfer+0x136>
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	6a1b      	ldr	r3, [r3, #32]
 8010f6e:	68ba      	ldr	r2, [r7, #8]
 8010f70:	8a92      	ldrh	r2, [r2, #20]
 8010f72:	4293      	cmp	r3, r2
 8010f74:	d907      	bls.n	8010f86 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010f76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f78:	68ba      	ldr	r2, [r7, #8]
 8010f7a:	8a92      	ldrh	r2, [r2, #20]
 8010f7c:	fb03 f202 	mul.w	r2, r3, r2
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	61da      	str	r2, [r3, #28]
 8010f84:	e036      	b.n	8010ff4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	6a1a      	ldr	r2, [r3, #32]
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	61da      	str	r2, [r3, #28]
 8010f8e:	e031      	b.n	8010ff4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	6a1b      	ldr	r3, [r3, #32]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d018      	beq.n	8010fca <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	6a1b      	ldr	r3, [r3, #32]
 8010f9c:	68ba      	ldr	r2, [r7, #8]
 8010f9e:	8a92      	ldrh	r2, [r2, #20]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	68ba      	ldr	r2, [r7, #8]
 8010fa6:	8a92      	ldrh	r2, [r2, #20]
 8010fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fac:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8010fae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010fb0:	8b7b      	ldrh	r3, [r7, #26]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d90b      	bls.n	8010fce <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8010fb6:	8b7b      	ldrh	r3, [r7, #26]
 8010fb8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010fba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fbc:	68ba      	ldr	r2, [r7, #8]
 8010fbe:	8a92      	ldrh	r2, [r2, #20]
 8010fc0:	fb03 f202 	mul.w	r2, r3, r2
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	61da      	str	r2, [r3, #28]
 8010fc8:	e001      	b.n	8010fce <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8010fca:	2301      	movs	r3, #1
 8010fcc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	78db      	ldrb	r3, [r3, #3]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d00a      	beq.n	8010fec <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010fd6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fd8:	68ba      	ldr	r2, [r7, #8]
 8010fda:	8a92      	ldrh	r2, [r2, #20]
 8010fdc:	fb03 f202 	mul.w	r2, r3, r2
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	61da      	str	r2, [r3, #28]
 8010fe4:	e006      	b.n	8010ff4 <USB_HC_StartXfer+0x1a4>
 8010fe6:	bf00      	nop
 8010fe8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	6a1a      	ldr	r2, [r3, #32]
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010ff4:	68bb      	ldr	r3, [r7, #8]
 8010ff6:	69db      	ldr	r3, [r3, #28]
 8010ff8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010ffc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010ffe:	04d9      	lsls	r1, r3, #19
 8011000:	4ba3      	ldr	r3, [pc, #652]	@ (8011290 <USB_HC_StartXfer+0x440>)
 8011002:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011004:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	7d9b      	ldrb	r3, [r3, #22]
 801100a:	075b      	lsls	r3, r3, #29
 801100c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011010:	69f9      	ldr	r1, [r7, #28]
 8011012:	0148      	lsls	r0, r1, #5
 8011014:	6a39      	ldr	r1, [r7, #32]
 8011016:	4401      	add	r1, r0
 8011018:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801101c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801101e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8011020:	79fb      	ldrb	r3, [r7, #7]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d009      	beq.n	801103a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	6999      	ldr	r1, [r3, #24]
 801102a:	69fb      	ldr	r3, [r7, #28]
 801102c:	015a      	lsls	r2, r3, #5
 801102e:	6a3b      	ldr	r3, [r7, #32]
 8011030:	4413      	add	r3, r2
 8011032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011036:	460a      	mov	r2, r1
 8011038:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801103a:	6a3b      	ldr	r3, [r7, #32]
 801103c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011040:	689b      	ldr	r3, [r3, #8]
 8011042:	f003 0301 	and.w	r3, r3, #1
 8011046:	2b00      	cmp	r3, #0
 8011048:	bf0c      	ite	eq
 801104a:	2301      	moveq	r3, #1
 801104c:	2300      	movne	r3, #0
 801104e:	b2db      	uxtb	r3, r3
 8011050:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8011052:	69fb      	ldr	r3, [r7, #28]
 8011054:	015a      	lsls	r2, r3, #5
 8011056:	6a3b      	ldr	r3, [r7, #32]
 8011058:	4413      	add	r3, r2
 801105a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	69fa      	ldr	r2, [r7, #28]
 8011062:	0151      	lsls	r1, r2, #5
 8011064:	6a3a      	ldr	r2, [r7, #32]
 8011066:	440a      	add	r2, r1
 8011068:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801106c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011070:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8011072:	69fb      	ldr	r3, [r7, #28]
 8011074:	015a      	lsls	r2, r3, #5
 8011076:	6a3b      	ldr	r3, [r7, #32]
 8011078:	4413      	add	r3, r2
 801107a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801107e:	681a      	ldr	r2, [r3, #0]
 8011080:	7e7b      	ldrb	r3, [r7, #25]
 8011082:	075b      	lsls	r3, r3, #29
 8011084:	69f9      	ldr	r1, [r7, #28]
 8011086:	0148      	lsls	r0, r1, #5
 8011088:	6a39      	ldr	r1, [r7, #32]
 801108a:	4401      	add	r1, r0
 801108c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8011090:	4313      	orrs	r3, r2
 8011092:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	799b      	ldrb	r3, [r3, #6]
 8011098:	2b01      	cmp	r3, #1
 801109a:	f040 80c3 	bne.w	8011224 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	7c5b      	ldrb	r3, [r3, #17]
 80110a2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80110a4:	68ba      	ldr	r2, [r7, #8]
 80110a6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80110a8:	4313      	orrs	r3, r2
 80110aa:	69fa      	ldr	r2, [r7, #28]
 80110ac:	0151      	lsls	r1, r2, #5
 80110ae:	6a3a      	ldr	r2, [r7, #32]
 80110b0:	440a      	add	r2, r1
 80110b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80110b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80110ba:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80110bc:	69fb      	ldr	r3, [r7, #28]
 80110be:	015a      	lsls	r2, r3, #5
 80110c0:	6a3b      	ldr	r3, [r7, #32]
 80110c2:	4413      	add	r3, r2
 80110c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	69fa      	ldr	r2, [r7, #28]
 80110cc:	0151      	lsls	r1, r2, #5
 80110ce:	6a3a      	ldr	r2, [r7, #32]
 80110d0:	440a      	add	r2, r1
 80110d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80110d6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80110da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	79db      	ldrb	r3, [r3, #7]
 80110e0:	2b01      	cmp	r3, #1
 80110e2:	d123      	bne.n	801112c <USB_HC_StartXfer+0x2dc>
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	78db      	ldrb	r3, [r3, #3]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d11f      	bne.n	801112c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80110ec:	69fb      	ldr	r3, [r7, #28]
 80110ee:	015a      	lsls	r2, r3, #5
 80110f0:	6a3b      	ldr	r3, [r7, #32]
 80110f2:	4413      	add	r3, r2
 80110f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80110f8:	685b      	ldr	r3, [r3, #4]
 80110fa:	69fa      	ldr	r2, [r7, #28]
 80110fc:	0151      	lsls	r1, r2, #5
 80110fe:	6a3a      	ldr	r2, [r7, #32]
 8011100:	440a      	add	r2, r1
 8011102:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801110a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	015a      	lsls	r2, r3, #5
 8011110:	6a3b      	ldr	r3, [r7, #32]
 8011112:	4413      	add	r3, r2
 8011114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	69fa      	ldr	r2, [r7, #28]
 801111c:	0151      	lsls	r1, r2, #5
 801111e:	6a3a      	ldr	r2, [r7, #32]
 8011120:	440a      	add	r2, r1
 8011122:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801112a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	7c9b      	ldrb	r3, [r3, #18]
 8011130:	2b01      	cmp	r3, #1
 8011132:	d003      	beq.n	801113c <USB_HC_StartXfer+0x2ec>
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	7c9b      	ldrb	r3, [r3, #18]
 8011138:	2b03      	cmp	r3, #3
 801113a:	d117      	bne.n	801116c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8011140:	2b01      	cmp	r3, #1
 8011142:	d113      	bne.n	801116c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	78db      	ldrb	r3, [r3, #3]
 8011148:	2b01      	cmp	r3, #1
 801114a:	d10f      	bne.n	801116c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	015a      	lsls	r2, r3, #5
 8011150:	6a3b      	ldr	r3, [r7, #32]
 8011152:	4413      	add	r3, r2
 8011154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	69fa      	ldr	r2, [r7, #28]
 801115c:	0151      	lsls	r1, r2, #5
 801115e:	6a3a      	ldr	r2, [r7, #32]
 8011160:	440a      	add	r2, r1
 8011162:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801116a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	7c9b      	ldrb	r3, [r3, #18]
 8011170:	2b01      	cmp	r3, #1
 8011172:	d162      	bne.n	801123a <USB_HC_StartXfer+0x3ea>
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	78db      	ldrb	r3, [r3, #3]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d15e      	bne.n	801123a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	3b01      	subs	r3, #1
 8011182:	2b03      	cmp	r3, #3
 8011184:	d858      	bhi.n	8011238 <USB_HC_StartXfer+0x3e8>
 8011186:	a201      	add	r2, pc, #4	@ (adr r2, 801118c <USB_HC_StartXfer+0x33c>)
 8011188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801118c:	0801119d 	.word	0x0801119d
 8011190:	080111bf 	.word	0x080111bf
 8011194:	080111e1 	.word	0x080111e1
 8011198:	08011203 	.word	0x08011203
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	015a      	lsls	r2, r3, #5
 80111a0:	6a3b      	ldr	r3, [r7, #32]
 80111a2:	4413      	add	r3, r2
 80111a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111a8:	685b      	ldr	r3, [r3, #4]
 80111aa:	69fa      	ldr	r2, [r7, #28]
 80111ac:	0151      	lsls	r1, r2, #5
 80111ae:	6a3a      	ldr	r2, [r7, #32]
 80111b0:	440a      	add	r2, r1
 80111b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80111b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80111ba:	6053      	str	r3, [r2, #4]
          break;
 80111bc:	e03d      	b.n	801123a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80111be:	69fb      	ldr	r3, [r7, #28]
 80111c0:	015a      	lsls	r2, r3, #5
 80111c2:	6a3b      	ldr	r3, [r7, #32]
 80111c4:	4413      	add	r3, r2
 80111c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	69fa      	ldr	r2, [r7, #28]
 80111ce:	0151      	lsls	r1, r2, #5
 80111d0:	6a3a      	ldr	r2, [r7, #32]
 80111d2:	440a      	add	r2, r1
 80111d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80111d8:	f043 030e 	orr.w	r3, r3, #14
 80111dc:	6053      	str	r3, [r2, #4]
          break;
 80111de:	e02c      	b.n	801123a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80111e0:	69fb      	ldr	r3, [r7, #28]
 80111e2:	015a      	lsls	r2, r3, #5
 80111e4:	6a3b      	ldr	r3, [r7, #32]
 80111e6:	4413      	add	r3, r2
 80111e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	69fa      	ldr	r2, [r7, #28]
 80111f0:	0151      	lsls	r1, r2, #5
 80111f2:	6a3a      	ldr	r2, [r7, #32]
 80111f4:	440a      	add	r2, r1
 80111f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80111fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80111fe:	6053      	str	r3, [r2, #4]
          break;
 8011200:	e01b      	b.n	801123a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8011202:	69fb      	ldr	r3, [r7, #28]
 8011204:	015a      	lsls	r2, r3, #5
 8011206:	6a3b      	ldr	r3, [r7, #32]
 8011208:	4413      	add	r3, r2
 801120a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801120e:	685b      	ldr	r3, [r3, #4]
 8011210:	69fa      	ldr	r2, [r7, #28]
 8011212:	0151      	lsls	r1, r2, #5
 8011214:	6a3a      	ldr	r2, [r7, #32]
 8011216:	440a      	add	r2, r1
 8011218:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801121c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011220:	6053      	str	r3, [r2, #4]
          break;
 8011222:	e00a      	b.n	801123a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8011224:	69fb      	ldr	r3, [r7, #28]
 8011226:	015a      	lsls	r2, r3, #5
 8011228:	6a3b      	ldr	r3, [r7, #32]
 801122a:	4413      	add	r3, r2
 801122c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011230:	461a      	mov	r2, r3
 8011232:	2300      	movs	r3, #0
 8011234:	6053      	str	r3, [r2, #4]
 8011236:	e000      	b.n	801123a <USB_HC_StartXfer+0x3ea>
          break;
 8011238:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	015a      	lsls	r2, r3, #5
 801123e:	6a3b      	ldr	r3, [r7, #32]
 8011240:	4413      	add	r3, r2
 8011242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011250:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	78db      	ldrb	r3, [r3, #3]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d004      	beq.n	8011264 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011260:	613b      	str	r3, [r7, #16]
 8011262:	e003      	b.n	801126c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801126a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801126c:	693b      	ldr	r3, [r7, #16]
 801126e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011272:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	015a      	lsls	r2, r3, #5
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	4413      	add	r3, r2
 801127c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011280:	461a      	mov	r2, r3
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8011286:	79fb      	ldrb	r3, [r7, #7]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d003      	beq.n	8011294 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 801128c:	2300      	movs	r3, #0
 801128e:	e055      	b.n	801133c <USB_HC_StartXfer+0x4ec>
 8011290:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	78db      	ldrb	r3, [r3, #3]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d14e      	bne.n	801133a <USB_HC_StartXfer+0x4ea>
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	6a1b      	ldr	r3, [r3, #32]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d04a      	beq.n	801133a <USB_HC_StartXfer+0x4ea>
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	79db      	ldrb	r3, [r3, #7]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d146      	bne.n	801133a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	7c9b      	ldrb	r3, [r3, #18]
 80112b0:	2b03      	cmp	r3, #3
 80112b2:	d831      	bhi.n	8011318 <USB_HC_StartXfer+0x4c8>
 80112b4:	a201      	add	r2, pc, #4	@ (adr r2, 80112bc <USB_HC_StartXfer+0x46c>)
 80112b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ba:	bf00      	nop
 80112bc:	080112cd 	.word	0x080112cd
 80112c0:	080112f1 	.word	0x080112f1
 80112c4:	080112cd 	.word	0x080112cd
 80112c8:	080112f1 	.word	0x080112f1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	6a1b      	ldr	r3, [r3, #32]
 80112d0:	3303      	adds	r3, #3
 80112d2:	089b      	lsrs	r3, r3, #2
 80112d4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80112d6:	8afa      	ldrh	r2, [r7, #22]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112dc:	b29b      	uxth	r3, r3
 80112de:	429a      	cmp	r2, r3
 80112e0:	d91c      	bls.n	801131c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	699b      	ldr	r3, [r3, #24]
 80112e6:	f043 0220 	orr.w	r2, r3, #32
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80112ee:	e015      	b.n	801131c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	6a1b      	ldr	r3, [r3, #32]
 80112f4:	3303      	adds	r3, #3
 80112f6:	089b      	lsrs	r3, r3, #2
 80112f8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80112fa:	8afa      	ldrh	r2, [r7, #22]
 80112fc:	6a3b      	ldr	r3, [r7, #32]
 80112fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011302:	691b      	ldr	r3, [r3, #16]
 8011304:	b29b      	uxth	r3, r3
 8011306:	429a      	cmp	r2, r3
 8011308:	d90a      	bls.n	8011320 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	699b      	ldr	r3, [r3, #24]
 801130e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	619a      	str	r2, [r3, #24]
        }
        break;
 8011316:	e003      	b.n	8011320 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8011318:	bf00      	nop
 801131a:	e002      	b.n	8011322 <USB_HC_StartXfer+0x4d2>
        break;
 801131c:	bf00      	nop
 801131e:	e000      	b.n	8011322 <USB_HC_StartXfer+0x4d2>
        break;
 8011320:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	6999      	ldr	r1, [r3, #24]
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	785a      	ldrb	r2, [r3, #1]
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	6a1b      	ldr	r3, [r3, #32]
 801132e:	b29b      	uxth	r3, r3
 8011330:	2000      	movs	r0, #0
 8011332:	9000      	str	r0, [sp, #0]
 8011334:	68f8      	ldr	r0, [r7, #12]
 8011336:	f7ff f9cf 	bl	80106d8 <USB_WritePacket>
  }

  return HAL_OK;
 801133a:	2300      	movs	r3, #0
}
 801133c:	4618      	mov	r0, r3
 801133e:	3728      	adds	r7, #40	@ 0x28
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011344:	b480      	push	{r7}
 8011346:	b085      	sub	sp, #20
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011356:	695b      	ldr	r3, [r3, #20]
 8011358:	b29b      	uxth	r3, r3
}
 801135a:	4618      	mov	r0, r3
 801135c:	3714      	adds	r7, #20
 801135e:	46bd      	mov	sp, r7
 8011360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011364:	4770      	bx	lr

08011366 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8011366:	b480      	push	{r7}
 8011368:	b089      	sub	sp, #36	@ 0x24
 801136a:	af00      	add	r7, sp, #0
 801136c:	6078      	str	r0, [r7, #4]
 801136e:	460b      	mov	r3, r1
 8011370:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8011376:	78fb      	ldrb	r3, [r7, #3]
 8011378:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801137a:	2300      	movs	r3, #0
 801137c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801137e:	69bb      	ldr	r3, [r7, #24]
 8011380:	015a      	lsls	r2, r3, #5
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	4413      	add	r3, r2
 8011386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	0c9b      	lsrs	r3, r3, #18
 801138e:	f003 0303 	and.w	r3, r3, #3
 8011392:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8011394:	69bb      	ldr	r3, [r7, #24]
 8011396:	015a      	lsls	r2, r3, #5
 8011398:	69fb      	ldr	r3, [r7, #28]
 801139a:	4413      	add	r3, r2
 801139c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	0fdb      	lsrs	r3, r3, #31
 80113a4:	f003 0301 	and.w	r3, r3, #1
 80113a8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80113aa:	69bb      	ldr	r3, [r7, #24]
 80113ac:	015a      	lsls	r2, r3, #5
 80113ae:	69fb      	ldr	r3, [r7, #28]
 80113b0:	4413      	add	r3, r2
 80113b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	0fdb      	lsrs	r3, r3, #31
 80113ba:	f003 0301 	and.w	r3, r3, #1
 80113be:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	689b      	ldr	r3, [r3, #8]
 80113c4:	f003 0320 	and.w	r3, r3, #32
 80113c8:	2b20      	cmp	r3, #32
 80113ca:	d10d      	bne.n	80113e8 <USB_HC_Halt+0x82>
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d10a      	bne.n	80113e8 <USB_HC_Halt+0x82>
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d005      	beq.n	80113e4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	2b01      	cmp	r3, #1
 80113dc:	d002      	beq.n	80113e4 <USB_HC_Halt+0x7e>
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	2b03      	cmp	r3, #3
 80113e2:	d101      	bne.n	80113e8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80113e4:	2300      	movs	r3, #0
 80113e6:	e0d8      	b.n	801159a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d002      	beq.n	80113f4 <USB_HC_Halt+0x8e>
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	2b02      	cmp	r3, #2
 80113f2:	d173      	bne.n	80114dc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80113f4:	69bb      	ldr	r3, [r7, #24]
 80113f6:	015a      	lsls	r2, r3, #5
 80113f8:	69fb      	ldr	r3, [r7, #28]
 80113fa:	4413      	add	r3, r2
 80113fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	69ba      	ldr	r2, [r7, #24]
 8011404:	0151      	lsls	r1, r2, #5
 8011406:	69fa      	ldr	r2, [r7, #28]
 8011408:	440a      	add	r2, r1
 801140a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801140e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011412:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	689b      	ldr	r3, [r3, #8]
 8011418:	f003 0320 	and.w	r3, r3, #32
 801141c:	2b00      	cmp	r3, #0
 801141e:	d14a      	bne.n	80114b6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011424:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011428:	2b00      	cmp	r3, #0
 801142a:	d133      	bne.n	8011494 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801142c:	69bb      	ldr	r3, [r7, #24]
 801142e:	015a      	lsls	r2, r3, #5
 8011430:	69fb      	ldr	r3, [r7, #28]
 8011432:	4413      	add	r3, r2
 8011434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	69ba      	ldr	r2, [r7, #24]
 801143c:	0151      	lsls	r1, r2, #5
 801143e:	69fa      	ldr	r2, [r7, #28]
 8011440:	440a      	add	r2, r1
 8011442:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011446:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801144a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801144c:	69bb      	ldr	r3, [r7, #24]
 801144e:	015a      	lsls	r2, r3, #5
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	4413      	add	r3, r2
 8011454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	69ba      	ldr	r2, [r7, #24]
 801145c:	0151      	lsls	r1, r2, #5
 801145e:	69fa      	ldr	r2, [r7, #28]
 8011460:	440a      	add	r2, r1
 8011462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801146a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	3301      	adds	r3, #1
 8011470:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011478:	d82e      	bhi.n	80114d8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801147a:	69bb      	ldr	r3, [r7, #24]
 801147c:	015a      	lsls	r2, r3, #5
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	4413      	add	r3, r2
 8011482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801148c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011490:	d0ec      	beq.n	801146c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011492:	e081      	b.n	8011598 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011494:	69bb      	ldr	r3, [r7, #24]
 8011496:	015a      	lsls	r2, r3, #5
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	4413      	add	r3, r2
 801149c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	69ba      	ldr	r2, [r7, #24]
 80114a4:	0151      	lsls	r1, r2, #5
 80114a6:	69fa      	ldr	r2, [r7, #28]
 80114a8:	440a      	add	r2, r1
 80114aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80114b2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80114b4:	e070      	b.n	8011598 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	015a      	lsls	r2, r3, #5
 80114ba:	69fb      	ldr	r3, [r7, #28]
 80114bc:	4413      	add	r3, r2
 80114be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	69ba      	ldr	r2, [r7, #24]
 80114c6:	0151      	lsls	r1, r2, #5
 80114c8:	69fa      	ldr	r2, [r7, #28]
 80114ca:	440a      	add	r2, r1
 80114cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80114d4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80114d6:	e05f      	b.n	8011598 <USB_HC_Halt+0x232>
            break;
 80114d8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80114da:	e05d      	b.n	8011598 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	015a      	lsls	r2, r3, #5
 80114e0:	69fb      	ldr	r3, [r7, #28]
 80114e2:	4413      	add	r3, r2
 80114e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	69ba      	ldr	r2, [r7, #24]
 80114ec:	0151      	lsls	r1, r2, #5
 80114ee:	69fa      	ldr	r2, [r7, #28]
 80114f0:	440a      	add	r2, r1
 80114f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80114fa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011502:	691b      	ldr	r3, [r3, #16]
 8011504:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011508:	2b00      	cmp	r3, #0
 801150a:	d133      	bne.n	8011574 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	015a      	lsls	r2, r3, #5
 8011510:	69fb      	ldr	r3, [r7, #28]
 8011512:	4413      	add	r3, r2
 8011514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	69ba      	ldr	r2, [r7, #24]
 801151c:	0151      	lsls	r1, r2, #5
 801151e:	69fa      	ldr	r2, [r7, #28]
 8011520:	440a      	add	r2, r1
 8011522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011526:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801152a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801152c:	69bb      	ldr	r3, [r7, #24]
 801152e:	015a      	lsls	r2, r3, #5
 8011530:	69fb      	ldr	r3, [r7, #28]
 8011532:	4413      	add	r3, r2
 8011534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	69ba      	ldr	r2, [r7, #24]
 801153c:	0151      	lsls	r1, r2, #5
 801153e:	69fa      	ldr	r2, [r7, #28]
 8011540:	440a      	add	r2, r1
 8011542:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011546:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801154a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	3301      	adds	r3, #1
 8011550:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011558:	d81d      	bhi.n	8011596 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801155a:	69bb      	ldr	r3, [r7, #24]
 801155c:	015a      	lsls	r2, r3, #5
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	4413      	add	r3, r2
 8011562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801156c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011570:	d0ec      	beq.n	801154c <USB_HC_Halt+0x1e6>
 8011572:	e011      	b.n	8011598 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011574:	69bb      	ldr	r3, [r7, #24]
 8011576:	015a      	lsls	r2, r3, #5
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	4413      	add	r3, r2
 801157c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	69ba      	ldr	r2, [r7, #24]
 8011584:	0151      	lsls	r1, r2, #5
 8011586:	69fa      	ldr	r2, [r7, #28]
 8011588:	440a      	add	r2, r1
 801158a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801158e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011592:	6013      	str	r3, [r2, #0]
 8011594:	e000      	b.n	8011598 <USB_HC_Halt+0x232>
          break;
 8011596:	bf00      	nop
    }
  }

  return HAL_OK;
 8011598:	2300      	movs	r3, #0
}
 801159a:	4618      	mov	r0, r3
 801159c:	3724      	adds	r7, #36	@ 0x24
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr
	...

080115a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80115a8:	b480      	push	{r7}
 80115aa:	b087      	sub	sp, #28
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	460b      	mov	r3, r1
 80115b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80115b8:	78fb      	ldrb	r3, [r7, #3]
 80115ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80115bc:	2301      	movs	r3, #1
 80115be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	04da      	lsls	r2, r3, #19
 80115c4:	4b15      	ldr	r3, [pc, #84]	@ (801161c <USB_DoPing+0x74>)
 80115c6:	4013      	ands	r3, r2
 80115c8:	693a      	ldr	r2, [r7, #16]
 80115ca:	0151      	lsls	r1, r2, #5
 80115cc:	697a      	ldr	r2, [r7, #20]
 80115ce:	440a      	add	r2, r1
 80115d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80115d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80115d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	015a      	lsls	r2, r3, #5
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	4413      	add	r3, r2
 80115e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80115f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80115f2:	68bb      	ldr	r3, [r7, #8]
 80115f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80115f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	015a      	lsls	r2, r3, #5
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	4413      	add	r3, r2
 8011602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011606:	461a      	mov	r2, r3
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801160c:	2300      	movs	r3, #0
}
 801160e:	4618      	mov	r0, r3
 8011610:	371c      	adds	r7, #28
 8011612:	46bd      	mov	sp, r7
 8011614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011618:	4770      	bx	lr
 801161a:	bf00      	nop
 801161c:	1ff80000 	.word	0x1ff80000

08011620 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b088      	sub	sp, #32
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8011628:	2300      	movs	r3, #0
 801162a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8011630:	2300      	movs	r3, #0
 8011632:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f7fe ff92 	bl	801055e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801163a:	2110      	movs	r1, #16
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f7fe ffeb 	bl	8010618 <USB_FlushTxFifo>
 8011642:	4603      	mov	r3, r0
 8011644:	2b00      	cmp	r3, #0
 8011646:	d001      	beq.n	801164c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8011648:	2301      	movs	r3, #1
 801164a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f7ff f815 	bl	801067c <USB_FlushRxFifo>
 8011652:	4603      	mov	r3, r0
 8011654:	2b00      	cmp	r3, #0
 8011656:	d001      	beq.n	801165c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8011658:	2301      	movs	r3, #1
 801165a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 801165c:	2300      	movs	r3, #0
 801165e:	61bb      	str	r3, [r7, #24]
 8011660:	e01f      	b.n	80116a2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8011662:	69bb      	ldr	r3, [r7, #24]
 8011664:	015a      	lsls	r2, r3, #5
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	4413      	add	r3, r2
 801166a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011678:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011680:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011688:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801168a:	69bb      	ldr	r3, [r7, #24]
 801168c:	015a      	lsls	r2, r3, #5
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	4413      	add	r3, r2
 8011692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011696:	461a      	mov	r2, r3
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	3301      	adds	r3, #1
 80116a0:	61bb      	str	r3, [r7, #24]
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	2b0f      	cmp	r3, #15
 80116a6:	d9dc      	bls.n	8011662 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80116a8:	2300      	movs	r3, #0
 80116aa:	61bb      	str	r3, [r7, #24]
 80116ac:	e034      	b.n	8011718 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	015a      	lsls	r2, r3, #5
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	4413      	add	r3, r2
 80116b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80116c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80116cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80116d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80116d6:	69bb      	ldr	r3, [r7, #24]
 80116d8:	015a      	lsls	r2, r3, #5
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	4413      	add	r3, r2
 80116de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116e2:	461a      	mov	r2, r3
 80116e4:	693b      	ldr	r3, [r7, #16]
 80116e6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	3301      	adds	r3, #1
 80116ec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80116f4:	d80c      	bhi.n	8011710 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80116f6:	69bb      	ldr	r3, [r7, #24]
 80116f8:	015a      	lsls	r2, r3, #5
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	4413      	add	r3, r2
 80116fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011708:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801170c:	d0ec      	beq.n	80116e8 <USB_StopHost+0xc8>
 801170e:	e000      	b.n	8011712 <USB_StopHost+0xf2>
        break;
 8011710:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8011712:	69bb      	ldr	r3, [r7, #24]
 8011714:	3301      	adds	r3, #1
 8011716:	61bb      	str	r3, [r7, #24]
 8011718:	69bb      	ldr	r3, [r7, #24]
 801171a:	2b0f      	cmp	r3, #15
 801171c:	d9c7      	bls.n	80116ae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011724:	461a      	mov	r2, r3
 8011726:	f04f 33ff 	mov.w	r3, #4294967295
 801172a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f04f 32ff 	mov.w	r2, #4294967295
 8011732:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f7fe ff01 	bl	801053c <USB_EnableGlobalInt>

  return ret;
 801173a:	7ffb      	ldrb	r3, [r7, #31]
}
 801173c:	4618      	mov	r0, r3
 801173e:	3720      	adds	r7, #32
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}

08011744 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011748:	4904      	ldr	r1, [pc, #16]	@ (801175c <MX_FATFS_Init+0x18>)
 801174a:	4805      	ldr	r0, [pc, #20]	@ (8011760 <MX_FATFS_Init+0x1c>)
 801174c:	f004 ff32 	bl	80165b4 <FATFS_LinkDriver>
 8011750:	4603      	mov	r3, r0
 8011752:	461a      	mov	r2, r3
 8011754:	4b03      	ldr	r3, [pc, #12]	@ (8011764 <MX_FATFS_Init+0x20>)
 8011756:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011758:	bf00      	nop
 801175a:	bd80      	pop	{r7, pc}
 801175c:	200015a4 	.word	0x200015a4
 8011760:	0801c6c4 	.word	0x0801c6c4
 8011764:	200015a0 	.word	0x200015a0

08011768 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011768:	b480      	push	{r7}
 801176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801176c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801176e:	4618      	mov	r0, r3
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr

08011778 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b086      	sub	sp, #24
 801177c:	af00      	add	r7, sp, #0
 801177e:	60f8      	str	r0, [r7, #12]
 8011780:	60b9      	str	r1, [r7, #8]
 8011782:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011784:	2300      	movs	r3, #0
 8011786:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	68ba      	ldr	r2, [r7, #8]
 801178c:	68f9      	ldr	r1, [r7, #12]
 801178e:	4806      	ldr	r0, [pc, #24]	@ (80117a8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011790:	f7fa fcb4 	bl	800c0fc <HAL_SD_ReadBlocks_DMA>
 8011794:	4603      	mov	r3, r0
 8011796:	2b00      	cmp	r3, #0
 8011798:	d001      	beq.n	801179e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801179a:	2301      	movs	r3, #1
 801179c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801179e:	7dfb      	ldrb	r3, [r7, #23]
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3718      	adds	r7, #24
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	20000c78 	.word	0x20000c78

080117ac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b086      	sub	sp, #24
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	60b9      	str	r1, [r7, #8]
 80117b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80117b8:	2300      	movs	r3, #0
 80117ba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	68ba      	ldr	r2, [r7, #8]
 80117c0:	68f9      	ldr	r1, [r7, #12]
 80117c2:	4806      	ldr	r0, [pc, #24]	@ (80117dc <BSP_SD_WriteBlocks_DMA+0x30>)
 80117c4:	f7fa fd7c 	bl	800c2c0 <HAL_SD_WriteBlocks_DMA>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d001      	beq.n	80117d2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80117ce:	2301      	movs	r3, #1
 80117d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80117d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80117d4:	4618      	mov	r0, r3
 80117d6:	3718      	adds	r7, #24
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}
 80117dc:	20000c78 	.word	0x20000c78

080117e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80117e4:	4805      	ldr	r0, [pc, #20]	@ (80117fc <BSP_SD_GetCardState+0x1c>)
 80117e6:	f7fb f82b 	bl	800c840 <HAL_SD_GetCardState>
 80117ea:	4603      	mov	r3, r0
 80117ec:	2b04      	cmp	r3, #4
 80117ee:	bf14      	ite	ne
 80117f0:	2301      	movne	r3, #1
 80117f2:	2300      	moveq	r3, #0
 80117f4:	b2db      	uxtb	r3, r3
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	bd80      	pop	{r7, pc}
 80117fa:	bf00      	nop
 80117fc:	20000c78 	.word	0x20000c78

08011800 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011808:	6879      	ldr	r1, [r7, #4]
 801180a:	4803      	ldr	r0, [pc, #12]	@ (8011818 <BSP_SD_GetCardInfo+0x18>)
 801180c:	f7fa ffec 	bl	800c7e8 <HAL_SD_GetCardInfo>
}
 8011810:	bf00      	nop
 8011812:	3708      	adds	r7, #8
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	20000c78 	.word	0x20000c78

0801181c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b082      	sub	sp, #8
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011824:	f000 f988 	bl	8011b38 <BSP_SD_ReadCpltCallback>
}
 8011828:	bf00      	nop
 801182a:	3708      	adds	r7, #8
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b084      	sub	sp, #16
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011838:	f004 ff54 	bl	80166e4 <osKernelSysTick>
 801183c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 801183e:	e006      	b.n	801184e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011840:	f7ff ffce 	bl	80117e0 <BSP_SD_GetCardState>
 8011844:	4603      	mov	r3, r0
 8011846:	2b00      	cmp	r3, #0
 8011848:	d101      	bne.n	801184e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801184a:	2300      	movs	r3, #0
 801184c:	e009      	b.n	8011862 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 801184e:	f004 ff49 	bl	80166e4 <osKernelSysTick>
 8011852:	4602      	mov	r2, r0
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	1ad3      	subs	r3, r2, r3
 8011858:	687a      	ldr	r2, [r7, #4]
 801185a:	429a      	cmp	r2, r3
 801185c:	d8f0      	bhi.n	8011840 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801185e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011862:	4618      	mov	r0, r3
 8011864:	3710      	adds	r7, #16
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}
	...

0801186c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	4603      	mov	r3, r0
 8011874:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011876:	4b0c      	ldr	r3, [pc, #48]	@ (80118a8 <SD_CheckStatus+0x3c>)
 8011878:	2201      	movs	r2, #1
 801187a:	701a      	strb	r2, [r3, #0]

  // Use HAL function directly instead of BSP
  HAL_SD_CardStateTypeDef cardState = HAL_SD_GetCardState(&hsd1);
 801187c:	480b      	ldr	r0, [pc, #44]	@ (80118ac <SD_CheckStatus+0x40>)
 801187e:	f7fa ffdf 	bl	800c840 <HAL_SD_GetCardState>
 8011882:	60f8      	str	r0, [r7, #12]
  if(cardState == HAL_SD_CARD_TRANSFER)
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	2b04      	cmp	r3, #4
 8011888:	d107      	bne.n	801189a <SD_CheckStatus+0x2e>
  {
    Stat &= ~STA_NOINIT;
 801188a:	4b07      	ldr	r3, [pc, #28]	@ (80118a8 <SD_CheckStatus+0x3c>)
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	b2db      	uxtb	r3, r3
 8011890:	f023 0301 	bic.w	r3, r3, #1
 8011894:	b2da      	uxtb	r2, r3
 8011896:	4b04      	ldr	r3, [pc, #16]	@ (80118a8 <SD_CheckStatus+0x3c>)
 8011898:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801189a:	4b03      	ldr	r3, [pc, #12]	@ (80118a8 <SD_CheckStatus+0x3c>)
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	b2db      	uxtb	r3, r3
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3710      	adds	r7, #16
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	20000069 	.word	0x20000069
 80118ac:	20000c78 	.word	0x20000c78

080118b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80118b0:	b590      	push	{r4, r7, lr}
 80118b2:	b087      	sub	sp, #28
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	4603      	mov	r3, r0
 80118b8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80118ba:	4b1d      	ldr	r3, [pc, #116]	@ (8011930 <SD_initialize+0x80>)
 80118bc:	2201      	movs	r2, #1
 80118be:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80118c0:	f004 ff04 	bl	80166cc <osKernelRunning>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d02b      	beq.n	8011922 <SD_initialize+0x72>
    {
      Stat = SD_CheckStatus(lun);
    }

#else
    Stat = SD_CheckStatus(lun);
 80118ca:	79fb      	ldrb	r3, [r7, #7]
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7ff ffcd 	bl	801186c <SD_CheckStatus>
 80118d2:	4603      	mov	r3, r0
 80118d4:	461a      	mov	r2, r3
 80118d6:	4b16      	ldr	r3, [pc, #88]	@ (8011930 <SD_initialize+0x80>)
 80118d8:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80118da:	4b15      	ldr	r3, [pc, #84]	@ (8011930 <SD_initialize+0x80>)
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	2b01      	cmp	r3, #1
 80118e2:	d01e      	beq.n	8011922 <SD_initialize+0x72>
    {
      if (SDQueueID == NULL)
 80118e4:	4b13      	ldr	r3, [pc, #76]	@ (8011934 <SD_initialize+0x84>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d10e      	bne.n	801190a <SD_initialize+0x5a>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80118ec:	4b12      	ldr	r3, [pc, #72]	@ (8011938 <SD_initialize+0x88>)
 80118ee:	f107 0408 	add.w	r4, r7, #8
 80118f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80118f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80118f8:	f107 0308 	add.w	r3, r7, #8
 80118fc:	2100      	movs	r1, #0
 80118fe:	4618      	mov	r0, r3
 8011900:	f005 f837 	bl	8016972 <osMessageCreate>
 8011904:	4603      	mov	r3, r0
 8011906:	4a0b      	ldr	r2, [pc, #44]	@ (8011934 <SD_initialize+0x84>)
 8011908:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 801190a:	4b0a      	ldr	r3, [pc, #40]	@ (8011934 <SD_initialize+0x84>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d107      	bne.n	8011922 <SD_initialize+0x72>
      {
        Stat |= STA_NOINIT;
 8011912:	4b07      	ldr	r3, [pc, #28]	@ (8011930 <SD_initialize+0x80>)
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	b2db      	uxtb	r3, r3
 8011918:	f043 0301 	orr.w	r3, r3, #1
 801191c:	b2da      	uxtb	r2, r3
 801191e:	4b04      	ldr	r3, [pc, #16]	@ (8011930 <SD_initialize+0x80>)
 8011920:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8011922:	4b03      	ldr	r3, [pc, #12]	@ (8011930 <SD_initialize+0x80>)
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	b2db      	uxtb	r3, r3

}
 8011928:	4618      	mov	r0, r3
 801192a:	371c      	adds	r7, #28
 801192c:	46bd      	mov	sp, r7
 801192e:	bd90      	pop	{r4, r7, pc}
 8011930:	20000069 	.word	0x20000069
 8011934:	200017dc 	.word	0x200017dc
 8011938:	0801c60c 	.word	0x0801c60c

0801193c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b082      	sub	sp, #8
 8011940:	af00      	add	r7, sp, #0
 8011942:	4603      	mov	r3, r0
 8011944:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011946:	79fb      	ldrb	r3, [r7, #7]
 8011948:	4618      	mov	r0, r3
 801194a:	f7ff ff8f 	bl	801186c <SD_CheckStatus>
 801194e:	4603      	mov	r3, r0
}
 8011950:	4618      	mov	r0, r3
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b08a      	sub	sp, #40	@ 0x28
 801195c:	af00      	add	r7, sp, #0
 801195e:	60b9      	str	r1, [r7, #8]
 8011960:	607a      	str	r2, [r7, #4]
 8011962:	603b      	str	r3, [r7, #0]
 8011964:	4603      	mov	r3, r0
 8011966:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8011968:	2301      	movs	r3, #1
 801196a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801196e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011972:	f7ff ff5d 	bl	8011830 <SD_CheckStatusWithTimeout>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	da02      	bge.n	8011982 <SD_read+0x2a>
  {
    return res;
 801197c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011980:	e032      	b.n	80119e8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8011982:	683a      	ldr	r2, [r7, #0]
 8011984:	6879      	ldr	r1, [r7, #4]
 8011986:	68b8      	ldr	r0, [r7, #8]
 8011988:	f7ff fef6 	bl	8011778 <BSP_SD_ReadBlocks_DMA>
 801198c:	4603      	mov	r3, r0
 801198e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 8011992:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011996:	2b00      	cmp	r3, #0
 8011998:	d124      	bne.n	80119e4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801199a:	4b15      	ldr	r3, [pc, #84]	@ (80119f0 <SD_read+0x98>)
 801199c:	6819      	ldr	r1, [r3, #0]
 801199e:	f107 0314 	add.w	r3, r7, #20
 80119a2:	f247 5230 	movw	r2, #30000	@ 0x7530
 80119a6:	4618      	mov	r0, r3
 80119a8:	f005 f84c 	bl	8016a44 <osMessageGet>

    if (event.status == osEventMessage)
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	2b10      	cmp	r3, #16
 80119b0:	d118      	bne.n	80119e4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80119b2:	69bb      	ldr	r3, [r7, #24]
 80119b4:	2b01      	cmp	r3, #1
 80119b6:	d115      	bne.n	80119e4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80119b8:	f004 fe94 	bl	80166e4 <osKernelSysTick>
 80119bc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80119be:	e008      	b.n	80119d2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80119c0:	f7ff ff0e 	bl	80117e0 <BSP_SD_GetCardState>
 80119c4:	4603      	mov	r3, r0
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d103      	bne.n	80119d2 <SD_read+0x7a>
              {
                res = RES_OK;
 80119ca:	2300      	movs	r3, #0
 80119cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80119d0:	e008      	b.n	80119e4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80119d2:	f004 fe87 	bl	80166e4 <osKernelSysTick>
 80119d6:	4602      	mov	r2, r0
 80119d8:	6a3b      	ldr	r3, [r7, #32]
 80119da:	1ad3      	subs	r3, r2, r3
 80119dc:	f247 522f 	movw	r2, #29999	@ 0x752f
 80119e0:	4293      	cmp	r3, r2
 80119e2:	d9ed      	bls.n	80119c0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80119e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3728      	adds	r7, #40	@ 0x28
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	200017dc 	.word	0x200017dc

080119f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b08a      	sub	sp, #40	@ 0x28
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	60b9      	str	r1, [r7, #8]
 80119fc:	607a      	str	r2, [r7, #4]
 80119fe:	603b      	str	r3, [r7, #0]
 8011a00:	4603      	mov	r3, r0
 8011a02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011a04:	2301      	movs	r3, #1
 8011a06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011a0a:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011a0e:	f7ff ff0f 	bl	8011830 <SD_CheckStatusWithTimeout>
 8011a12:	4603      	mov	r3, r0
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	da02      	bge.n	8011a1e <SD_write+0x2a>
  {
    return res;
 8011a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a1c:	e02e      	b.n	8011a7c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011a1e:	683a      	ldr	r2, [r7, #0]
 8011a20:	6879      	ldr	r1, [r7, #4]
 8011a22:	68b8      	ldr	r0, [r7, #8]
 8011a24:	f7ff fec2 	bl	80117ac <BSP_SD_WriteBlocks_DMA>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d124      	bne.n	8011a78 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8011a2e:	4b15      	ldr	r3, [pc, #84]	@ (8011a84 <SD_write+0x90>)
 8011a30:	6819      	ldr	r1, [r3, #0]
 8011a32:	f107 0314 	add.w	r3, r7, #20
 8011a36:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f005 f802 	bl	8016a44 <osMessageGet>

    if (event.status == osEventMessage)
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	2b10      	cmp	r3, #16
 8011a44:	d118      	bne.n	8011a78 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	2b02      	cmp	r3, #2
 8011a4a:	d115      	bne.n	8011a78 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8011a4c:	f004 fe4a 	bl	80166e4 <osKernelSysTick>
 8011a50:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8011a52:	e008      	b.n	8011a66 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011a54:	f7ff fec4 	bl	80117e0 <BSP_SD_GetCardState>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d103      	bne.n	8011a66 <SD_write+0x72>
          {
            res = RES_OK;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8011a64:	e008      	b.n	8011a78 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8011a66:	f004 fe3d 	bl	80166e4 <osKernelSysTick>
 8011a6a:	4602      	mov	r2, r0
 8011a6c:	6a3b      	ldr	r3, [r7, #32]
 8011a6e:	1ad3      	subs	r3, r2, r3
 8011a70:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011a74:	4293      	cmp	r3, r2
 8011a76:	d9ed      	bls.n	8011a54 <SD_write+0x60>
    }

  }
#endif

  return res;
 8011a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	3728      	adds	r7, #40	@ 0x28
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	200017dc 	.word	0x200017dc

08011a88 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b08c      	sub	sp, #48	@ 0x30
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	4603      	mov	r3, r0
 8011a90:	603a      	str	r2, [r7, #0]
 8011a92:	71fb      	strb	r3, [r7, #7]
 8011a94:	460b      	mov	r3, r1
 8011a96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011a98:	2301      	movs	r3, #1
 8011a9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011a9e:	4b25      	ldr	r3, [pc, #148]	@ (8011b34 <SD_ioctl+0xac>)
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	f003 0301 	and.w	r3, r3, #1
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d001      	beq.n	8011ab0 <SD_ioctl+0x28>
 8011aac:	2303      	movs	r3, #3
 8011aae:	e03c      	b.n	8011b2a <SD_ioctl+0xa2>

  switch (cmd)
 8011ab0:	79bb      	ldrb	r3, [r7, #6]
 8011ab2:	2b03      	cmp	r3, #3
 8011ab4:	d834      	bhi.n	8011b20 <SD_ioctl+0x98>
 8011ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8011abc <SD_ioctl+0x34>)
 8011ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011abc:	08011acd 	.word	0x08011acd
 8011ac0:	08011ad5 	.word	0x08011ad5
 8011ac4:	08011aed 	.word	0x08011aed
 8011ac8:	08011b07 	.word	0x08011b07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011acc:	2300      	movs	r3, #0
 8011ace:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011ad2:	e028      	b.n	8011b26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ad4:	f107 030c 	add.w	r3, r7, #12
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7ff fe91 	bl	8011800 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011aea:	e01c      	b.n	8011b26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011aec:	f107 030c 	add.w	r3, r7, #12
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7ff fe85 	bl	8011800 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af8:	b29a      	uxth	r2, r3
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011afe:	2300      	movs	r3, #0
 8011b00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011b04:	e00f      	b.n	8011b26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011b06:	f107 030c 	add.w	r3, r7, #12
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7ff fe78 	bl	8011800 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b12:	0a5a      	lsrs	r2, r3, #9
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011b1e:	e002      	b.n	8011b26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011b20:	2304      	movs	r3, #4
 8011b22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011b26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3730      	adds	r7, #48	@ 0x30
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	20000069 	.word	0x20000069

08011b38 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8011b3c:	4b04      	ldr	r3, [pc, #16]	@ (8011b50 <BSP_SD_ReadCpltCallback+0x18>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2200      	movs	r2, #0
 8011b42:	2101      	movs	r1, #1
 8011b44:	4618      	mov	r0, r3
 8011b46:	f004 ff3d 	bl	80169c4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8011b4a:	bf00      	nop
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	200017dc 	.word	0x200017dc

08011b54 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8011b54:	b590      	push	{r4, r7, lr}
 8011b56:	b089      	sub	sp, #36	@ 0x24
 8011b58:	af04      	add	r7, sp, #16
 8011b5a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	2202      	movs	r2, #2
 8011b60:	2102      	movs	r1, #2
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 fcbd 	bl	80124e2 <USBH_FindInterface>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011b6c:	7bfb      	ldrb	r3, [r7, #15]
 8011b6e:	2bff      	cmp	r3, #255	@ 0xff
 8011b70:	d002      	beq.n	8011b78 <USBH_CDC_InterfaceInit+0x24>
 8011b72:	7bfb      	ldrb	r3, [r7, #15]
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	d901      	bls.n	8011b7c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011b78:	2302      	movs	r3, #2
 8011b7a:	e13d      	b.n	8011df8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8011b7c:	7bfb      	ldrb	r3, [r7, #15]
 8011b7e:	4619      	mov	r1, r3
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f000 fc92 	bl	80124aa <USBH_SelectInterface>
 8011b86:	4603      	mov	r3, r0
 8011b88:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8011b8a:	7bbb      	ldrb	r3, [r7, #14]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d001      	beq.n	8011b94 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8011b90:	2302      	movs	r3, #2
 8011b92:	e131      	b.n	8011df8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8011b9a:	2050      	movs	r0, #80	@ 0x50
 8011b9c:	f008 f892 	bl	8019cc4 <malloc>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011baa:	69db      	ldr	r3, [r3, #28]
 8011bac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d101      	bne.n	8011bb8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8011bb4:	2302      	movs	r3, #2
 8011bb6:	e11f      	b.n	8011df8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8011bb8:	2250      	movs	r2, #80	@ 0x50
 8011bba:	2100      	movs	r1, #0
 8011bbc:	68b8      	ldr	r0, [r7, #8]
 8011bbe:	f008 f9d3 	bl	8019f68 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8011bc2:	7bfb      	ldrb	r3, [r7, #15]
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	211a      	movs	r1, #26
 8011bc8:	fb01 f303 	mul.w	r3, r1, r3
 8011bcc:	4413      	add	r3, r2
 8011bce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011bd2:	781b      	ldrb	r3, [r3, #0]
 8011bd4:	b25b      	sxtb	r3, r3
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	da15      	bge.n	8011c06 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011bda:	7bfb      	ldrb	r3, [r7, #15]
 8011bdc:	687a      	ldr	r2, [r7, #4]
 8011bde:	211a      	movs	r1, #26
 8011be0:	fb01 f303 	mul.w	r3, r1, r3
 8011be4:	4413      	add	r3, r2
 8011be6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011bea:	781a      	ldrb	r2, [r3, #0]
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011bf0:	7bfb      	ldrb	r3, [r7, #15]
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	211a      	movs	r1, #26
 8011bf6:	fb01 f303 	mul.w	r3, r1, r3
 8011bfa:	4413      	add	r3, r2
 8011bfc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011c00:	881a      	ldrh	r2, [r3, #0]
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	785b      	ldrb	r3, [r3, #1]
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f002 f90c 	bl	8013e2a <USBH_AllocPipe>
 8011c12:	4603      	mov	r3, r0
 8011c14:	461a      	mov	r2, r3
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	7819      	ldrb	r1, [r3, #0]
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	7858      	ldrb	r0, [r3, #1]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011c2e:	68ba      	ldr	r2, [r7, #8]
 8011c30:	8952      	ldrh	r2, [r2, #10]
 8011c32:	9202      	str	r2, [sp, #8]
 8011c34:	2203      	movs	r2, #3
 8011c36:	9201      	str	r2, [sp, #4]
 8011c38:	9300      	str	r3, [sp, #0]
 8011c3a:	4623      	mov	r3, r4
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f002 f8c4 	bl	8013dcc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	781b      	ldrb	r3, [r3, #0]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f007 ffb3 	bl	8019bb8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8011c52:	2300      	movs	r3, #0
 8011c54:	2200      	movs	r2, #0
 8011c56:	210a      	movs	r1, #10
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f000 fc42 	bl	80124e2 <USBH_FindInterface>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011c62:	7bfb      	ldrb	r3, [r7, #15]
 8011c64:	2bff      	cmp	r3, #255	@ 0xff
 8011c66:	d002      	beq.n	8011c6e <USBH_CDC_InterfaceInit+0x11a>
 8011c68:	7bfb      	ldrb	r3, [r7, #15]
 8011c6a:	2b01      	cmp	r3, #1
 8011c6c:	d901      	bls.n	8011c72 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011c6e:	2302      	movs	r3, #2
 8011c70:	e0c2      	b.n	8011df8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8011c72:	7bfb      	ldrb	r3, [r7, #15]
 8011c74:	687a      	ldr	r2, [r7, #4]
 8011c76:	211a      	movs	r1, #26
 8011c78:	fb01 f303 	mul.w	r3, r1, r3
 8011c7c:	4413      	add	r3, r2
 8011c7e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	b25b      	sxtb	r3, r3
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	da16      	bge.n	8011cb8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011c8a:	7bfb      	ldrb	r3, [r7, #15]
 8011c8c:	687a      	ldr	r2, [r7, #4]
 8011c8e:	211a      	movs	r1, #26
 8011c90:	fb01 f303 	mul.w	r3, r1, r3
 8011c94:	4413      	add	r3, r2
 8011c96:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011c9a:	781a      	ldrb	r2, [r3, #0]
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011ca0:	7bfb      	ldrb	r3, [r7, #15]
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	211a      	movs	r1, #26
 8011ca6:	fb01 f303 	mul.w	r3, r1, r3
 8011caa:	4413      	add	r3, r2
 8011cac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011cb0:	881a      	ldrh	r2, [r3, #0]
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	835a      	strh	r2, [r3, #26]
 8011cb6:	e015      	b.n	8011ce4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011cb8:	7bfb      	ldrb	r3, [r7, #15]
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	211a      	movs	r1, #26
 8011cbe:	fb01 f303 	mul.w	r3, r1, r3
 8011cc2:	4413      	add	r3, r2
 8011cc4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011cc8:	781a      	ldrb	r2, [r3, #0]
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011cce:	7bfb      	ldrb	r3, [r7, #15]
 8011cd0:	687a      	ldr	r2, [r7, #4]
 8011cd2:	211a      	movs	r1, #26
 8011cd4:	fb01 f303 	mul.w	r3, r1, r3
 8011cd8:	4413      	add	r3, r2
 8011cda:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011cde:	881a      	ldrh	r2, [r3, #0]
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8011ce4:	7bfb      	ldrb	r3, [r7, #15]
 8011ce6:	687a      	ldr	r2, [r7, #4]
 8011ce8:	211a      	movs	r1, #26
 8011cea:	fb01 f303 	mul.w	r3, r1, r3
 8011cee:	4413      	add	r3, r2
 8011cf0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	b25b      	sxtb	r3, r3
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	da16      	bge.n	8011d2a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011cfc:	7bfb      	ldrb	r3, [r7, #15]
 8011cfe:	687a      	ldr	r2, [r7, #4]
 8011d00:	211a      	movs	r1, #26
 8011d02:	fb01 f303 	mul.w	r3, r1, r3
 8011d06:	4413      	add	r3, r2
 8011d08:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011d0c:	781a      	ldrb	r2, [r3, #0]
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8011d12:	7bfb      	ldrb	r3, [r7, #15]
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	211a      	movs	r1, #26
 8011d18:	fb01 f303 	mul.w	r3, r1, r3
 8011d1c:	4413      	add	r3, r2
 8011d1e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8011d22:	881a      	ldrh	r2, [r3, #0]
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	835a      	strh	r2, [r3, #26]
 8011d28:	e015      	b.n	8011d56 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011d2a:	7bfb      	ldrb	r3, [r7, #15]
 8011d2c:	687a      	ldr	r2, [r7, #4]
 8011d2e:	211a      	movs	r1, #26
 8011d30:	fb01 f303 	mul.w	r3, r1, r3
 8011d34:	4413      	add	r3, r2
 8011d36:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011d3a:	781a      	ldrb	r2, [r3, #0]
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8011d40:	7bfb      	ldrb	r3, [r7, #15]
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	211a      	movs	r1, #26
 8011d46:	fb01 f303 	mul.w	r3, r1, r3
 8011d4a:	4413      	add	r3, r2
 8011d4c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8011d50:	881a      	ldrh	r2, [r3, #0]
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	7b9b      	ldrb	r3, [r3, #14]
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f002 f864 	bl	8013e2a <USBH_AllocPipe>
 8011d62:	4603      	mov	r3, r0
 8011d64:	461a      	mov	r2, r3
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	7bdb      	ldrb	r3, [r3, #15]
 8011d6e:	4619      	mov	r1, r3
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f002 f85a 	bl	8013e2a <USBH_AllocPipe>
 8011d76:	4603      	mov	r3, r0
 8011d78:	461a      	mov	r2, r3
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	7b59      	ldrb	r1, [r3, #13]
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	7b98      	ldrb	r0, [r3, #14]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011d92:	68ba      	ldr	r2, [r7, #8]
 8011d94:	8b12      	ldrh	r2, [r2, #24]
 8011d96:	9202      	str	r2, [sp, #8]
 8011d98:	2202      	movs	r2, #2
 8011d9a:	9201      	str	r2, [sp, #4]
 8011d9c:	9300      	str	r3, [sp, #0]
 8011d9e:	4623      	mov	r3, r4
 8011da0:	4602      	mov	r2, r0
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f002 f812 	bl	8013dcc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	7b19      	ldrb	r1, [r3, #12]
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	7bd8      	ldrb	r0, [r3, #15]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011dbc:	68ba      	ldr	r2, [r7, #8]
 8011dbe:	8b52      	ldrh	r2, [r2, #26]
 8011dc0:	9202      	str	r2, [sp, #8]
 8011dc2:	2202      	movs	r2, #2
 8011dc4:	9201      	str	r2, [sp, #4]
 8011dc6:	9300      	str	r3, [sp, #0]
 8011dc8:	4623      	mov	r3, r4
 8011dca:	4602      	mov	r2, r0
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f001 fffd 	bl	8013dcc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	7b5b      	ldrb	r3, [r3, #13]
 8011dde:	2200      	movs	r2, #0
 8011de0:	4619      	mov	r1, r3
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f007 fee8 	bl	8019bb8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8011de8:	68bb      	ldr	r3, [r7, #8]
 8011dea:	7b1b      	ldrb	r3, [r3, #12]
 8011dec:	2200      	movs	r2, #0
 8011dee:	4619      	mov	r1, r3
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f007 fee1 	bl	8019bb8 <USBH_LL_SetToggle>

  return USBH_OK;
 8011df6:	2300      	movs	r3, #0
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3714      	adds	r7, #20
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd90      	pop	{r4, r7, pc}

08011e00 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e0e:	69db      	ldr	r3, [r3, #28]
 8011e10:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d00e      	beq.n	8011e38 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	4619      	mov	r1, r3
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f001 fff2 	bl	8013e0a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f002 f81d 	bl	8013e6c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	2200      	movs	r2, #0
 8011e36:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	7b1b      	ldrb	r3, [r3, #12]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d00e      	beq.n	8011e5e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	7b1b      	ldrb	r3, [r3, #12]
 8011e44:	4619      	mov	r1, r3
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f001 ffdf 	bl	8013e0a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	7b1b      	ldrb	r3, [r3, #12]
 8011e50:	4619      	mov	r1, r3
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	f002 f80a 	bl	8013e6c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	7b5b      	ldrb	r3, [r3, #13]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d00e      	beq.n	8011e84 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	7b5b      	ldrb	r3, [r3, #13]
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f001 ffcc 	bl	8013e0a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	7b5b      	ldrb	r3, [r3, #13]
 8011e76:	4619      	mov	r1, r3
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f001 fff7 	bl	8013e6c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	2200      	movs	r2, #0
 8011e82:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e8a:	69db      	ldr	r3, [r3, #28]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d00b      	beq.n	8011ea8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e96:	69db      	ldr	r3, [r3, #28]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f007 ff1b 	bl	8019cd4 <free>
    phost->pActiveClass->pData = 0U;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8011ea8:	2300      	movs	r3, #0
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	3710      	adds	r7, #16
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}

08011eb2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8011eb2:	b580      	push	{r7, lr}
 8011eb4:	b084      	sub	sp, #16
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011ec0:	69db      	ldr	r3, [r3, #28]
 8011ec2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	3340      	adds	r3, #64	@ 0x40
 8011ec8:	4619      	mov	r1, r3
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f000 f8b1 	bl	8012032 <GetLineCoding>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8011ed4:	7afb      	ldrb	r3, [r7, #11]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d105      	bne.n	8011ee6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011ee0:	2102      	movs	r1, #2
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8011ee6:	7afb      	ldrb	r3, [r7, #11]
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3710      	adds	r7, #16
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}

08011ef0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8011ef8:	2301      	movs	r3, #1
 8011efa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8011efc:	2300      	movs	r3, #0
 8011efe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011f06:	69db      	ldr	r3, [r3, #28]
 8011f08:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8011f10:	2b04      	cmp	r3, #4
 8011f12:	d877      	bhi.n	8012004 <USBH_CDC_Process+0x114>
 8011f14:	a201      	add	r2, pc, #4	@ (adr r2, 8011f1c <USBH_CDC_Process+0x2c>)
 8011f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f1a:	bf00      	nop
 8011f1c:	08011f31 	.word	0x08011f31
 8011f20:	08011f37 	.word	0x08011f37
 8011f24:	08011f67 	.word	0x08011f67
 8011f28:	08011fdb 	.word	0x08011fdb
 8011f2c:	08011fe9 	.word	0x08011fe9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8011f30:	2300      	movs	r3, #0
 8011f32:	73fb      	strb	r3, [r7, #15]
      break;
 8011f34:	e06d      	b.n	8012012 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f3a:	4619      	mov	r1, r3
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f000 f897 	bl	8012070 <SetLineCoding>
 8011f42:	4603      	mov	r3, r0
 8011f44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011f46:	7bbb      	ldrb	r3, [r7, #14]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d104      	bne.n	8011f56 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	2202      	movs	r2, #2
 8011f50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8011f54:	e058      	b.n	8012008 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8011f56:	7bbb      	ldrb	r3, [r7, #14]
 8011f58:	2b01      	cmp	r3, #1
 8011f5a:	d055      	beq.n	8012008 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	2204      	movs	r2, #4
 8011f60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8011f64:	e050      	b.n	8012008 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	3340      	adds	r3, #64	@ 0x40
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f000 f860 	bl	8012032 <GetLineCoding>
 8011f72:	4603      	mov	r3, r0
 8011f74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011f76:	7bbb      	ldrb	r3, [r7, #14]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d126      	bne.n	8011fca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f8e:	791b      	ldrb	r3, [r3, #4]
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d13b      	bne.n	801200c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8011f94:	68bb      	ldr	r3, [r7, #8]
 8011f96:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f9e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d133      	bne.n	801200c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011fae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d12b      	bne.n	801200c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011fbc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d124      	bne.n	801200c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f000 f96a 	bl	801229c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8011fc8:	e020      	b.n	801200c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8011fca:	7bbb      	ldrb	r3, [r7, #14]
 8011fcc:	2b01      	cmp	r3, #1
 8011fce:	d01d      	beq.n	801200c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	2204      	movs	r2, #4
 8011fd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8011fd8:	e018      	b.n	801200c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f000 f867 	bl	80120ae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f000 f8e6 	bl	80121b2 <CDC_ProcessReception>
      break;
 8011fe6:	e014      	b.n	8012012 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8011fe8:	2100      	movs	r1, #0
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	f001 f8ff 	bl	80131ee <USBH_ClrFeature>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011ff4:	7bbb      	ldrb	r3, [r7, #14]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d10a      	bne.n	8012010 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8012002:	e005      	b.n	8012010 <USBH_CDC_Process+0x120>

    default:
      break;
 8012004:	bf00      	nop
 8012006:	e004      	b.n	8012012 <USBH_CDC_Process+0x122>
      break;
 8012008:	bf00      	nop
 801200a:	e002      	b.n	8012012 <USBH_CDC_Process+0x122>
      break;
 801200c:	bf00      	nop
 801200e:	e000      	b.n	8012012 <USBH_CDC_Process+0x122>
      break;
 8012010:	bf00      	nop

  }

  return status;
 8012012:	7bfb      	ldrb	r3, [r7, #15]
}
 8012014:	4618      	mov	r0, r3
 8012016:	3710      	adds	r7, #16
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}

0801201c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 801201c:	b480      	push	{r7}
 801201e:	b083      	sub	sp, #12
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8012024:	2300      	movs	r3, #0
}
 8012026:	4618      	mov	r0, r3
 8012028:	370c      	adds	r7, #12
 801202a:	46bd      	mov	sp, r7
 801202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012030:	4770      	bx	lr

08012032 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8012032:	b580      	push	{r7, lr}
 8012034:	b082      	sub	sp, #8
 8012036:	af00      	add	r7, sp, #0
 8012038:	6078      	str	r0, [r7, #4]
 801203a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	22a1      	movs	r2, #161	@ 0xa1
 8012040:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2221      	movs	r2, #33	@ 0x21
 8012046:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2200      	movs	r2, #0
 801204c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2200      	movs	r2, #0
 8012052:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2207      	movs	r2, #7
 8012058:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	2207      	movs	r2, #7
 801205e:	4619      	mov	r1, r3
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f001 fbf9 	bl	8013858 <USBH_CtlReq>
 8012066:	4603      	mov	r3, r0
}
 8012068:	4618      	mov	r0, r3
 801206a:	3708      	adds	r7, #8
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2221      	movs	r2, #33	@ 0x21
 801207e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2220      	movs	r2, #32
 8012084:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2200      	movs	r2, #0
 801208a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2200      	movs	r2, #0
 8012090:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2207      	movs	r2, #7
 8012096:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	2207      	movs	r2, #7
 801209c:	4619      	mov	r1, r3
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f001 fbda 	bl	8013858 <USBH_CtlReq>
 80120a4:	4603      	mov	r3, r0
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3708      	adds	r7, #8
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}

080120ae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80120ae:	b580      	push	{r7, lr}
 80120b0:	b086      	sub	sp, #24
 80120b2:	af02      	add	r7, sp, #8
 80120b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80120bc:	69db      	ldr	r3, [r3, #28]
 80120be:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80120c0:	2300      	movs	r3, #0
 80120c2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	d002      	beq.n	80120d4 <CDC_ProcessTransmission+0x26>
 80120ce:	2b02      	cmp	r3, #2
 80120d0:	d023      	beq.n	801211a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80120d2:	e06a      	b.n	80121aa <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120d8:	68fa      	ldr	r2, [r7, #12]
 80120da:	8b12      	ldrh	r2, [r2, #24]
 80120dc:	4293      	cmp	r3, r2
 80120de:	d90b      	bls.n	80120f8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	69d9      	ldr	r1, [r3, #28]
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	8b1a      	ldrh	r2, [r3, #24]
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	7b5b      	ldrb	r3, [r3, #13]
 80120ec:	2001      	movs	r0, #1
 80120ee:	9000      	str	r0, [sp, #0]
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f001 fe28 	bl	8013d46 <USBH_BulkSendData>
 80120f6:	e00b      	b.n	8012110 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8012100:	b29a      	uxth	r2, r3
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	7b5b      	ldrb	r3, [r3, #13]
 8012106:	2001      	movs	r0, #1
 8012108:	9000      	str	r0, [sp, #0]
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f001 fe1b 	bl	8013d46 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2202      	movs	r2, #2
 8012114:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8012118:	e047      	b.n	80121aa <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	7b5b      	ldrb	r3, [r3, #13]
 801211e:	4619      	mov	r1, r3
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f007 fd1f 	bl	8019b64 <USBH_LL_GetURBState>
 8012126:	4603      	mov	r3, r0
 8012128:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801212a:	7afb      	ldrb	r3, [r7, #11]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d12e      	bne.n	801218e <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012134:	68fa      	ldr	r2, [r7, #12]
 8012136:	8b12      	ldrh	r2, [r2, #24]
 8012138:	4293      	cmp	r3, r2
 801213a:	d90e      	bls.n	801215a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012140:	68fa      	ldr	r2, [r7, #12]
 8012142:	8b12      	ldrh	r2, [r2, #24]
 8012144:	1a9a      	subs	r2, r3, r2
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	69db      	ldr	r3, [r3, #28]
 801214e:	68fa      	ldr	r2, [r7, #12]
 8012150:	8b12      	ldrh	r2, [r2, #24]
 8012152:	441a      	add	r2, r3
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	61da      	str	r2, [r3, #28]
 8012158:	e002      	b.n	8012160 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	2200      	movs	r2, #0
 801215e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012164:	2b00      	cmp	r3, #0
 8012166:	d004      	beq.n	8012172 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2201      	movs	r2, #1
 801216c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8012170:	e006      	b.n	8012180 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	2200      	movs	r2, #0
 8012176:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f000 f87a 	bl	8012274 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012180:	2300      	movs	r3, #0
 8012182:	2200      	movs	r2, #0
 8012184:	2104      	movs	r1, #4
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f000 febc 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 801218c:	e00c      	b.n	80121a8 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 801218e:	7afb      	ldrb	r3, [r7, #11]
 8012190:	2b02      	cmp	r3, #2
 8012192:	d109      	bne.n	80121a8 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	2201      	movs	r2, #1
 8012198:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 801219c:	2300      	movs	r3, #0
 801219e:	2200      	movs	r2, #0
 80121a0:	2104      	movs	r1, #4
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f000 feae 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 80121a8:	bf00      	nop
  }
}
 80121aa:	bf00      	nop
 80121ac:	3710      	adds	r7, #16
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}

080121b2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80121b2:	b580      	push	{r7, lr}
 80121b4:	b086      	sub	sp, #24
 80121b6:	af00      	add	r7, sp, #0
 80121b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80121c0:	69db      	ldr	r3, [r3, #28]
 80121c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80121c4:	2300      	movs	r3, #0
 80121c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80121ce:	2b03      	cmp	r3, #3
 80121d0:	d002      	beq.n	80121d8 <CDC_ProcessReception+0x26>
 80121d2:	2b04      	cmp	r3, #4
 80121d4:	d00e      	beq.n	80121f4 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80121d6:	e049      	b.n	801226c <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	6a19      	ldr	r1, [r3, #32]
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	8b5a      	ldrh	r2, [r3, #26]
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	7b1b      	ldrb	r3, [r3, #12]
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f001 fdd3 	bl	8013d90 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	2204      	movs	r2, #4
 80121ee:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80121f2:	e03b      	b.n	801226c <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	7b1b      	ldrb	r3, [r3, #12]
 80121f8:	4619      	mov	r1, r3
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f007 fcb2 	bl	8019b64 <USBH_LL_GetURBState>
 8012200:	4603      	mov	r3, r0
 8012202:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8012204:	7cfb      	ldrb	r3, [r7, #19]
 8012206:	2b01      	cmp	r3, #1
 8012208:	d12f      	bne.n	801226a <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	7b1b      	ldrb	r3, [r3, #12]
 801220e:	4619      	mov	r1, r3
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f007 fc15 	bl	8019a40 <USBH_LL_GetLastXferSize>
 8012216:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801221c:	68fa      	ldr	r2, [r7, #12]
 801221e:	429a      	cmp	r2, r3
 8012220:	d016      	beq.n	8012250 <CDC_ProcessReception+0x9e>
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	8b5b      	ldrh	r3, [r3, #26]
 8012226:	461a      	mov	r2, r3
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	4293      	cmp	r3, r2
 801222c:	d110      	bne.n	8012250 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	1ad2      	subs	r2, r2, r3
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	6a1a      	ldr	r2, [r3, #32]
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	441a      	add	r2, r3
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	2203      	movs	r2, #3
 801224a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 801224e:	e006      	b.n	801225e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	2200      	movs	r2, #0
 8012254:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f000 f815 	bl	8012288 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 801225e:	2300      	movs	r3, #0
 8012260:	2200      	movs	r2, #0
 8012262:	2104      	movs	r1, #4
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 fe4d 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 801226a:	bf00      	nop
  }
}
 801226c:	bf00      	nop
 801226e:	3718      	adds	r7, #24
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801227c:	bf00      	nop
 801227e:	370c      	adds	r7, #12
 8012280:	46bd      	mov	sp, r7
 8012282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012286:	4770      	bx	lr

08012288 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012290:	bf00      	nop
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr

0801229c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 801229c:	b480      	push	{r7}
 801229e:	b083      	sub	sp, #12
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80122a4:	bf00      	nop
 80122a6:	370c      	adds	r7, #12
 80122a8:	46bd      	mov	sp, r7
 80122aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ae:	4770      	bx	lr

080122b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80122b0:	b5b0      	push	{r4, r5, r7, lr}
 80122b2:	b090      	sub	sp, #64	@ 0x40
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	60f8      	str	r0, [r7, #12]
 80122b8:	60b9      	str	r1, [r7, #8]
 80122ba:	4613      	mov	r3, r2
 80122bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d101      	bne.n	80122c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80122c4:	2302      	movs	r3, #2
 80122c6:	e04d      	b.n	8012364 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	79fa      	ldrb	r2, [r7, #7]
 80122cc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2200      	movs	r2, #0
 80122d4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	2200      	movs	r2, #0
 80122dc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	f000 f847 	bl	8012374 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2200      	movs	r2, #0
 80122ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	2200      	movs	r2, #0
 80122f2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2200      	movs	r2, #0
 80122fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	2200      	movs	r2, #0
 8012302:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d003      	beq.n	8012314 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	68ba      	ldr	r2, [r7, #8]
 8012310:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8012314:	4b15      	ldr	r3, [pc, #84]	@ (801236c <USBH_Init+0xbc>)
 8012316:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 801231a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801231c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8012320:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012324:	2100      	movs	r1, #0
 8012326:	4618      	mov	r0, r3
 8012328:	f004 fb23 	bl	8016972 <osMessageCreate>
 801232c:	4602      	mov	r2, r0
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8012334:	4b0e      	ldr	r3, [pc, #56]	@ (8012370 <USBH_Init+0xc0>)
 8012336:	f107 0414 	add.w	r4, r7, #20
 801233a:	461d      	mov	r5, r3
 801233c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801233e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012340:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8012348:	f107 0314 	add.w	r3, r7, #20
 801234c:	68f9      	ldr	r1, [r7, #12]
 801234e:	4618      	mov	r0, r3
 8012350:	f004 f9d8 	bl	8016704 <osThreadCreate>
 8012354:	4602      	mov	r2, r0
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 801235c:	68f8      	ldr	r0, [r7, #12]
 801235e:	f007 fabb 	bl	80198d8 <USBH_LL_Init>

  return USBH_OK;
 8012362:	2300      	movs	r3, #0
}
 8012364:	4618      	mov	r0, r3
 8012366:	3740      	adds	r7, #64	@ 0x40
 8012368:	46bd      	mov	sp, r7
 801236a:	bdb0      	pop	{r4, r5, r7, pc}
 801236c:	0801c620 	.word	0x0801c620
 8012370:	0801c63c 	.word	0x0801c63c

08012374 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801237c:	2300      	movs	r3, #0
 801237e:	60fb      	str	r3, [r7, #12]
 8012380:	e009      	b.n	8012396 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8012382:	687a      	ldr	r2, [r7, #4]
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	33e0      	adds	r3, #224	@ 0xe0
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	4413      	add	r3, r2
 801238c:	2200      	movs	r2, #0
 801238e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	3301      	adds	r3, #1
 8012394:	60fb      	str	r3, [r7, #12]
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	2b0f      	cmp	r3, #15
 801239a:	d9f2      	bls.n	8012382 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801239c:	2300      	movs	r3, #0
 801239e:	60fb      	str	r3, [r7, #12]
 80123a0:	e009      	b.n	80123b6 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	4413      	add	r3, r2
 80123a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80123ac:	2200      	movs	r2, #0
 80123ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	3301      	adds	r3, #1
 80123b4:	60fb      	str	r3, [r7, #12]
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80123bc:	d3f1      	bcc.n	80123a2 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2200      	movs	r2, #0
 80123c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2200      	movs	r2, #0
 80123c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2201      	movs	r2, #1
 80123ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2200      	movs	r2, #0
 80123d4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2201      	movs	r2, #1
 80123dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2240      	movs	r2, #64	@ 0x40
 80123e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2200      	movs	r2, #0
 80123e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2200      	movs	r2, #0
 80123ee:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2201      	movs	r2, #1
 80123f6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2200      	movs	r2, #0
 80123fe:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2200      	movs	r2, #0
 8012406:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	331c      	adds	r3, #28
 801240e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012412:	2100      	movs	r1, #0
 8012414:	4618      	mov	r0, r3
 8012416:	f007 fda7 	bl	8019f68 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8012420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012424:	2100      	movs	r1, #0
 8012426:	4618      	mov	r0, r3
 8012428:	f007 fd9e 	bl	8019f68 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8012432:	2212      	movs	r2, #18
 8012434:	2100      	movs	r1, #0
 8012436:	4618      	mov	r0, r3
 8012438:	f007 fd96 	bl	8019f68 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8012442:	223e      	movs	r2, #62	@ 0x3e
 8012444:	2100      	movs	r1, #0
 8012446:	4618      	mov	r0, r3
 8012448:	f007 fd8e 	bl	8019f68 <memset>

  return USBH_OK;
 801244c:	2300      	movs	r3, #0
}
 801244e:	4618      	mov	r0, r3
 8012450:	3710      	adds	r7, #16
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}

08012456 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8012456:	b480      	push	{r7}
 8012458:	b085      	sub	sp, #20
 801245a:	af00      	add	r7, sp, #0
 801245c:	6078      	str	r0, [r7, #4]
 801245e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8012460:	2300      	movs	r3, #0
 8012462:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d016      	beq.n	8012498 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8012470:	2b00      	cmp	r3, #0
 8012472:	d10e      	bne.n	8012492 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801247a:	1c59      	adds	r1, r3, #1
 801247c:	687a      	ldr	r2, [r7, #4]
 801247e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	33de      	adds	r3, #222	@ 0xde
 8012486:	6839      	ldr	r1, [r7, #0]
 8012488:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 801248c:	2300      	movs	r3, #0
 801248e:	73fb      	strb	r3, [r7, #15]
 8012490:	e004      	b.n	801249c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8012492:	2302      	movs	r3, #2
 8012494:	73fb      	strb	r3, [r7, #15]
 8012496:	e001      	b.n	801249c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8012498:	2302      	movs	r3, #2
 801249a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801249c:	7bfb      	ldrb	r3, [r7, #15]
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3714      	adds	r7, #20
 80124a2:	46bd      	mov	sp, r7
 80124a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a8:	4770      	bx	lr

080124aa <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80124aa:	b480      	push	{r7}
 80124ac:	b085      	sub	sp, #20
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
 80124b2:	460b      	mov	r3, r1
 80124b4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80124b6:	2300      	movs	r3, #0
 80124b8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80124c0:	78fa      	ldrb	r2, [r7, #3]
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d204      	bcs.n	80124d0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	78fa      	ldrb	r2, [r7, #3]
 80124ca:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80124ce:	e001      	b.n	80124d4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80124d0:	2302      	movs	r3, #2
 80124d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80124d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3714      	adds	r7, #20
 80124da:	46bd      	mov	sp, r7
 80124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e0:	4770      	bx	lr

080124e2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80124e2:	b480      	push	{r7}
 80124e4:	b087      	sub	sp, #28
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	6078      	str	r0, [r7, #4]
 80124ea:	4608      	mov	r0, r1
 80124ec:	4611      	mov	r1, r2
 80124ee:	461a      	mov	r2, r3
 80124f0:	4603      	mov	r3, r0
 80124f2:	70fb      	strb	r3, [r7, #3]
 80124f4:	460b      	mov	r3, r1
 80124f6:	70bb      	strb	r3, [r7, #2]
 80124f8:	4613      	mov	r3, r2
 80124fa:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80124fc:	2300      	movs	r3, #0
 80124fe:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8012500:	2300      	movs	r3, #0
 8012502:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 801250a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801250c:	e025      	b.n	801255a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 801250e:	7dfb      	ldrb	r3, [r7, #23]
 8012510:	221a      	movs	r2, #26
 8012512:	fb02 f303 	mul.w	r3, r2, r3
 8012516:	3308      	adds	r3, #8
 8012518:	68fa      	ldr	r2, [r7, #12]
 801251a:	4413      	add	r3, r2
 801251c:	3302      	adds	r3, #2
 801251e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	795b      	ldrb	r3, [r3, #5]
 8012524:	78fa      	ldrb	r2, [r7, #3]
 8012526:	429a      	cmp	r2, r3
 8012528:	d002      	beq.n	8012530 <USBH_FindInterface+0x4e>
 801252a:	78fb      	ldrb	r3, [r7, #3]
 801252c:	2bff      	cmp	r3, #255	@ 0xff
 801252e:	d111      	bne.n	8012554 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012534:	78ba      	ldrb	r2, [r7, #2]
 8012536:	429a      	cmp	r2, r3
 8012538:	d002      	beq.n	8012540 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801253a:	78bb      	ldrb	r3, [r7, #2]
 801253c:	2bff      	cmp	r3, #255	@ 0xff
 801253e:	d109      	bne.n	8012554 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012544:	787a      	ldrb	r2, [r7, #1]
 8012546:	429a      	cmp	r2, r3
 8012548:	d002      	beq.n	8012550 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801254a:	787b      	ldrb	r3, [r7, #1]
 801254c:	2bff      	cmp	r3, #255	@ 0xff
 801254e:	d101      	bne.n	8012554 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8012550:	7dfb      	ldrb	r3, [r7, #23]
 8012552:	e006      	b.n	8012562 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8012554:	7dfb      	ldrb	r3, [r7, #23]
 8012556:	3301      	adds	r3, #1
 8012558:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801255a:	7dfb      	ldrb	r3, [r7, #23]
 801255c:	2b01      	cmp	r3, #1
 801255e:	d9d6      	bls.n	801250e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8012560:	23ff      	movs	r3, #255	@ 0xff
}
 8012562:	4618      	mov	r0, r3
 8012564:	371c      	adds	r7, #28
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr

0801256e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 801256e:	b580      	push	{r7, lr}
 8012570:	b082      	sub	sp, #8
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f007 f9ea 	bl	8019950 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 801257c:	2101      	movs	r1, #1
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f007 fb03 	bl	8019b8a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8012584:	2300      	movs	r3, #0
}
 8012586:	4618      	mov	r0, r3
 8012588:	3708      	adds	r7, #8
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
	...

08012590 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b088      	sub	sp, #32
 8012594:	af04      	add	r7, sp, #16
 8012596:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8012598:	2302      	movs	r3, #2
 801259a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 801259c:	2300      	movs	r3, #0
 801259e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80125a6:	b2db      	uxtb	r3, r3
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	d102      	bne.n	80125b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2203      	movs	r2, #3
 80125b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	2b0b      	cmp	r3, #11
 80125ba:	f200 81f5 	bhi.w	80129a8 <USBH_Process+0x418>
 80125be:	a201      	add	r2, pc, #4	@ (adr r2, 80125c4 <USBH_Process+0x34>)
 80125c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125c4:	080125f5 	.word	0x080125f5
 80125c8:	08012633 	.word	0x08012633
 80125cc:	080126a9 	.word	0x080126a9
 80125d0:	08012937 	.word	0x08012937
 80125d4:	080129a9 	.word	0x080129a9
 80125d8:	08012755 	.word	0x08012755
 80125dc:	080128d1 	.word	0x080128d1
 80125e0:	08012797 	.word	0x08012797
 80125e4:	080127c3 	.word	0x080127c3
 80125e8:	080127eb 	.word	0x080127eb
 80125ec:	08012839 	.word	0x08012839
 80125f0:	0801291f 	.word	0x0801291f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80125fa:	b2db      	uxtb	r3, r3
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	f000 81d5 	beq.w	80129ac <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2201      	movs	r2, #1
 8012606:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8012608:	20c8      	movs	r0, #200	@ 0xc8
 801260a:	f007 fb08 	bl	8019c1e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 801260e:	6878      	ldr	r0, [r7, #4]
 8012610:	f007 f9fb 	bl	8019a0a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2200      	movs	r2, #0
 8012618:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2200      	movs	r2, #0
 8012620:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012624:	2300      	movs	r3, #0
 8012626:	2200      	movs	r2, #0
 8012628:	2101      	movs	r1, #1
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 fc6a 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012630:	e1bc      	b.n	80129ac <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8012638:	b2db      	uxtb	r3, r3
 801263a:	2b01      	cmp	r3, #1
 801263c:	d107      	bne.n	801264e <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2200      	movs	r2, #0
 8012642:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	2202      	movs	r2, #2
 801264a:	701a      	strb	r2, [r3, #0]
 801264c:	e025      	b.n	801269a <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8012654:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012658:	d914      	bls.n	8012684 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8012660:	3301      	adds	r3, #1
 8012662:	b2da      	uxtb	r2, r3
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8012670:	2b03      	cmp	r3, #3
 8012672:	d903      	bls.n	801267c <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	220d      	movs	r2, #13
 8012678:	701a      	strb	r2, [r3, #0]
 801267a:	e00e      	b.n	801269a <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2200      	movs	r2, #0
 8012680:	701a      	strb	r2, [r3, #0]
 8012682:	e00a      	b.n	801269a <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 801268a:	f103 020a 	add.w	r2, r3, #10
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8012694:	200a      	movs	r0, #10
 8012696:	f007 fac2 	bl	8019c1e <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801269a:	2300      	movs	r3, #0
 801269c:	2200      	movs	r2, #0
 801269e:	2101      	movs	r1, #1
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f000 fc2f 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80126a6:	e188      	b.n	80129ba <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d005      	beq.n	80126be <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80126b8:	2104      	movs	r1, #4
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80126be:	2064      	movs	r0, #100	@ 0x64
 80126c0:	f007 faad 	bl	8019c1e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f007 f979 	bl	80199bc <USBH_LL_GetSpeed>
 80126ca:	4603      	mov	r3, r0
 80126cc:	461a      	mov	r2, r3
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2205      	movs	r2, #5
 80126d8:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80126da:	2100      	movs	r1, #0
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f001 fba4 	bl	8013e2a <USBH_AllocPipe>
 80126e2:	4603      	mov	r3, r0
 80126e4:	461a      	mov	r2, r3
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80126ea:	2180      	movs	r1, #128	@ 0x80
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f001 fb9c 	bl	8013e2a <USBH_AllocPipe>
 80126f2:	4603      	mov	r3, r0
 80126f4:	461a      	mov	r2, r3
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	7919      	ldrb	r1, [r3, #4]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801270a:	687a      	ldr	r2, [r7, #4]
 801270c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801270e:	9202      	str	r2, [sp, #8]
 8012710:	2200      	movs	r2, #0
 8012712:	9201      	str	r2, [sp, #4]
 8012714:	9300      	str	r3, [sp, #0]
 8012716:	4603      	mov	r3, r0
 8012718:	2280      	movs	r2, #128	@ 0x80
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f001 fb56 	bl	8013dcc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	7959      	ldrb	r1, [r3, #5]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012730:	687a      	ldr	r2, [r7, #4]
 8012732:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012734:	9202      	str	r2, [sp, #8]
 8012736:	2200      	movs	r2, #0
 8012738:	9201      	str	r2, [sp, #4]
 801273a:	9300      	str	r3, [sp, #0]
 801273c:	4603      	mov	r3, r0
 801273e:	2200      	movs	r2, #0
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f001 fb43 	bl	8013dcc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012746:	2300      	movs	r3, #0
 8012748:	2200      	movs	r2, #0
 801274a:	2101      	movs	r1, #1
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f000 fbd9 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012752:	e132      	b.n	80129ba <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f000 f935 	bl	80129c4 <USBH_HandleEnum>
 801275a:	4603      	mov	r3, r0
 801275c:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 801275e:	7bbb      	ldrb	r3, [r7, #14]
 8012760:	b2db      	uxtb	r3, r3
 8012762:	2b00      	cmp	r3, #0
 8012764:	f040 8124 	bne.w	80129b0 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2200      	movs	r2, #0
 801276c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8012776:	2b01      	cmp	r3, #1
 8012778:	d103      	bne.n	8012782 <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2208      	movs	r2, #8
 801277e:	701a      	strb	r2, [r3, #0]
 8012780:	e002      	b.n	8012788 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2207      	movs	r2, #7
 8012786:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012788:	2300      	movs	r3, #0
 801278a:	2200      	movs	r2, #0
 801278c:	2105      	movs	r1, #5
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f000 fbb8 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012794:	e10c      	b.n	80129b0 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801279c:	2b00      	cmp	r3, #0
 801279e:	f000 8109 	beq.w	80129b4 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80127a8:	2101      	movs	r1, #1
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2208      	movs	r2, #8
 80127b2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80127b4:	2300      	movs	r3, #0
 80127b6:	2200      	movs	r2, #0
 80127b8:	2105      	movs	r1, #5
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f000 fba2 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 80127c0:	e0f8      	b.n	80129b4 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80127c8:	4619      	mov	r1, r3
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f000 fcc8 	bl	8013160 <USBH_SetCfg>
 80127d0:	4603      	mov	r3, r0
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d102      	bne.n	80127dc <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2209      	movs	r2, #9
 80127da:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80127dc:	2300      	movs	r3, #0
 80127de:	2200      	movs	r2, #0
 80127e0:	2101      	movs	r1, #1
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f000 fb8e 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80127e8:	e0e7      	b.n	80129ba <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80127f0:	f003 0320 	and.w	r3, r3, #32
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d015      	beq.n	8012824 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80127f8:	2101      	movs	r1, #1
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f000 fcd3 	bl	80131a6 <USBH_SetFeature>
 8012800:	4603      	mov	r3, r0
 8012802:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8012804:	7bbb      	ldrb	r3, [r7, #14]
 8012806:	b2db      	uxtb	r3, r3
 8012808:	2b00      	cmp	r3, #0
 801280a:	d103      	bne.n	8012814 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	220a      	movs	r2, #10
 8012810:	701a      	strb	r2, [r3, #0]
 8012812:	e00a      	b.n	801282a <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8012814:	7bbb      	ldrb	r3, [r7, #14]
 8012816:	b2db      	uxtb	r3, r3
 8012818:	2b03      	cmp	r3, #3
 801281a:	d106      	bne.n	801282a <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	220a      	movs	r2, #10
 8012820:	701a      	strb	r2, [r3, #0]
 8012822:	e002      	b.n	801282a <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	220a      	movs	r2, #10
 8012828:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801282a:	2300      	movs	r3, #0
 801282c:	2200      	movs	r2, #0
 801282e:	2101      	movs	r1, #1
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f000 fb67 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012836:	e0c0      	b.n	80129ba <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801283e:	2b00      	cmp	r3, #0
 8012840:	d03f      	beq.n	80128c2 <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2200      	movs	r2, #0
 8012846:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801284a:	2300      	movs	r3, #0
 801284c:	73fb      	strb	r3, [r7, #15]
 801284e:	e016      	b.n	801287e <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8012850:	7bfa      	ldrb	r2, [r7, #15]
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	32de      	adds	r2, #222	@ 0xde
 8012856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801285a:	791a      	ldrb	r2, [r3, #4]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8012862:	429a      	cmp	r2, r3
 8012864:	d108      	bne.n	8012878 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 8012866:	7bfa      	ldrb	r2, [r7, #15]
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	32de      	adds	r2, #222	@ 0xde
 801286c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8012876:	e005      	b.n	8012884 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012878:	7bfb      	ldrb	r3, [r7, #15]
 801287a:	3301      	adds	r3, #1
 801287c:	73fb      	strb	r3, [r7, #15]
 801287e:	7bfb      	ldrb	r3, [r7, #15]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d0e5      	beq.n	8012850 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801288a:	2b00      	cmp	r3, #0
 801288c:	d016      	beq.n	80128bc <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012894:	689b      	ldr	r3, [r3, #8]
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	4798      	blx	r3
 801289a:	4603      	mov	r3, r0
 801289c:	2b00      	cmp	r3, #0
 801289e:	d109      	bne.n	80128b4 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2206      	movs	r2, #6
 80128a4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80128ac:	2103      	movs	r1, #3
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	4798      	blx	r3
 80128b2:	e006      	b.n	80128c2 <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	220d      	movs	r2, #13
 80128b8:	701a      	strb	r2, [r3, #0]
 80128ba:	e002      	b.n	80128c2 <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	220d      	movs	r2, #13
 80128c0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80128c2:	2300      	movs	r3, #0
 80128c4:	2200      	movs	r2, #0
 80128c6:	2105      	movs	r1, #5
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f000 fb1b 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80128ce:	e074      	b.n	80129ba <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d017      	beq.n	801290a <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128e0:	691b      	ldr	r3, [r3, #16]
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	4798      	blx	r3
 80128e6:	4603      	mov	r3, r0
 80128e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80128ea:	7bbb      	ldrb	r3, [r7, #14]
 80128ec:	b2db      	uxtb	r3, r3
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d103      	bne.n	80128fa <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	220b      	movs	r2, #11
 80128f6:	701a      	strb	r2, [r3, #0]
 80128f8:	e00a      	b.n	8012910 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 80128fa:	7bbb      	ldrb	r3, [r7, #14]
 80128fc:	b2db      	uxtb	r3, r3
 80128fe:	2b02      	cmp	r3, #2
 8012900:	d106      	bne.n	8012910 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	220d      	movs	r2, #13
 8012906:	701a      	strb	r2, [r3, #0]
 8012908:	e002      	b.n	8012910 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	220d      	movs	r2, #13
 801290e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012910:	2300      	movs	r3, #0
 8012912:	2200      	movs	r2, #0
 8012914:	2105      	movs	r1, #5
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f000 faf4 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801291c:	e04d      	b.n	80129ba <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012924:	2b00      	cmp	r3, #0
 8012926:	d047      	beq.n	80129b8 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801292e:	695b      	ldr	r3, [r3, #20]
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	4798      	blx	r3
      }
      break;
 8012934:	e040      	b.n	80129b8 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2200      	movs	r2, #0
 801293a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f7ff fd18 	bl	8012374 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801294a:	2b00      	cmp	r3, #0
 801294c:	d009      	beq.n	8012962 <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012954:	68db      	ldr	r3, [r3, #12]
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	4798      	blx	r3
        phost->pActiveClass = NULL;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2200      	movs	r2, #0
 801295e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012968:	2b00      	cmp	r3, #0
 801296a:	d005      	beq.n	8012978 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012972:	2105      	movs	r1, #5
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 801297e:	b2db      	uxtb	r3, r3
 8012980:	2b01      	cmp	r3, #1
 8012982:	d107      	bne.n	8012994 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2200      	movs	r2, #0
 8012988:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f7ff fdee 	bl	801256e <USBH_Start>
 8012992:	e002      	b.n	801299a <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f006 ffdb 	bl	8019950 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801299a:	2300      	movs	r3, #0
 801299c:	2200      	movs	r2, #0
 801299e:	2101      	movs	r1, #1
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f000 faaf 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80129a6:	e008      	b.n	80129ba <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 80129a8:	bf00      	nop
 80129aa:	e006      	b.n	80129ba <USBH_Process+0x42a>
      break;
 80129ac:	bf00      	nop
 80129ae:	e004      	b.n	80129ba <USBH_Process+0x42a>
      break;
 80129b0:	bf00      	nop
 80129b2:	e002      	b.n	80129ba <USBH_Process+0x42a>
    break;
 80129b4:	bf00      	nop
 80129b6:	e000      	b.n	80129ba <USBH_Process+0x42a>
      break;
 80129b8:	bf00      	nop
  }
  return USBH_OK;
 80129ba:	2300      	movs	r3, #0
}
 80129bc:	4618      	mov	r0, r3
 80129be:	3710      	adds	r7, #16
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}

080129c4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b088      	sub	sp, #32
 80129c8:	af04      	add	r7, sp, #16
 80129ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80129cc:	2301      	movs	r3, #1
 80129ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80129d0:	2301      	movs	r3, #1
 80129d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	785b      	ldrb	r3, [r3, #1]
 80129d8:	2b07      	cmp	r3, #7
 80129da:	f200 81db 	bhi.w	8012d94 <USBH_HandleEnum+0x3d0>
 80129de:	a201      	add	r2, pc, #4	@ (adr r2, 80129e4 <USBH_HandleEnum+0x20>)
 80129e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129e4:	08012a05 	.word	0x08012a05
 80129e8:	08012abf 	.word	0x08012abf
 80129ec:	08012b29 	.word	0x08012b29
 80129f0:	08012bb3 	.word	0x08012bb3
 80129f4:	08012c1d 	.word	0x08012c1d
 80129f8:	08012c8d 	.word	0x08012c8d
 80129fc:	08012cf7 	.word	0x08012cf7
 8012a00:	08012d55 	.word	0x08012d55
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8012a04:	2108      	movs	r1, #8
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f000 fac7 	bl	8012f9a <USBH_Get_DevDesc>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012a10:	7bbb      	ldrb	r3, [r7, #14]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d12e      	bne.n	8012a74 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2201      	movs	r2, #1
 8012a24:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	7919      	ldrb	r1, [r3, #4]
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012a36:	687a      	ldr	r2, [r7, #4]
 8012a38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8012a3a:	9202      	str	r2, [sp, #8]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	9201      	str	r2, [sp, #4]
 8012a40:	9300      	str	r3, [sp, #0]
 8012a42:	4603      	mov	r3, r0
 8012a44:	2280      	movs	r2, #128	@ 0x80
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f001 f9c0 	bl	8013dcc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	7959      	ldrb	r1, [r3, #5]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012a60:	9202      	str	r2, [sp, #8]
 8012a62:	2200      	movs	r2, #0
 8012a64:	9201      	str	r2, [sp, #4]
 8012a66:	9300      	str	r3, [sp, #0]
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f001 f9ad 	bl	8013dcc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8012a72:	e191      	b.n	8012d98 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012a74:	7bbb      	ldrb	r3, [r7, #14]
 8012a76:	2b03      	cmp	r3, #3
 8012a78:	f040 818e 	bne.w	8012d98 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012a82:	3301      	adds	r3, #1
 8012a84:	b2da      	uxtb	r2, r3
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012a92:	2b03      	cmp	r3, #3
 8012a94:	d903      	bls.n	8012a9e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	220d      	movs	r2, #13
 8012a9a:	701a      	strb	r2, [r3, #0]
      break;
 8012a9c:	e17c      	b.n	8012d98 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	795b      	ldrb	r3, [r3, #5]
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f001 f9e1 	bl	8013e6c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	791b      	ldrb	r3, [r3, #4]
 8012aae:	4619      	mov	r1, r3
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f001 f9db 	bl	8013e6c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	701a      	strb	r2, [r3, #0]
      break;
 8012abc:	e16c      	b.n	8012d98 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8012abe:	2112      	movs	r1, #18
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f000 fa6a 	bl	8012f9a <USBH_Get_DevDesc>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012aca:	7bbb      	ldrb	r3, [r7, #14]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d103      	bne.n	8012ad8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2202      	movs	r2, #2
 8012ad4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012ad6:	e161      	b.n	8012d9c <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012ad8:	7bbb      	ldrb	r3, [r7, #14]
 8012ada:	2b03      	cmp	r3, #3
 8012adc:	f040 815e 	bne.w	8012d9c <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	b2da      	uxtb	r2, r3
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012af6:	2b03      	cmp	r3, #3
 8012af8:	d903      	bls.n	8012b02 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	220d      	movs	r2, #13
 8012afe:	701a      	strb	r2, [r3, #0]
      break;
 8012b00:	e14c      	b.n	8012d9c <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	795b      	ldrb	r3, [r3, #5]
 8012b06:	4619      	mov	r1, r3
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f001 f9af 	bl	8013e6c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	791b      	ldrb	r3, [r3, #4]
 8012b12:	4619      	mov	r1, r3
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f001 f9a9 	bl	8013e6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2200      	movs	r2, #0
 8012b24:	701a      	strb	r2, [r3, #0]
      break;
 8012b26:	e139      	b.n	8012d9c <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8012b28:	2101      	movs	r1, #1
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f000 faf4 	bl	8013118 <USBH_SetAddress>
 8012b30:	4603      	mov	r3, r0
 8012b32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012b34:	7bbb      	ldrb	r3, [r7, #14]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d130      	bne.n	8012b9c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8012b3a:	2002      	movs	r0, #2
 8012b3c:	f007 f86f 	bl	8019c1e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2201      	movs	r2, #1
 8012b44:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2203      	movs	r2, #3
 8012b4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	7919      	ldrb	r1, [r3, #4]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012b5e:	687a      	ldr	r2, [r7, #4]
 8012b60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8012b62:	9202      	str	r2, [sp, #8]
 8012b64:	2200      	movs	r2, #0
 8012b66:	9201      	str	r2, [sp, #4]
 8012b68:	9300      	str	r3, [sp, #0]
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	2280      	movs	r2, #128	@ 0x80
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	f001 f92c 	bl	8013dcc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	7959      	ldrb	r1, [r3, #5]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012b88:	9202      	str	r2, [sp, #8]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	9201      	str	r2, [sp, #4]
 8012b8e:	9300      	str	r3, [sp, #0]
 8012b90:	4603      	mov	r3, r0
 8012b92:	2200      	movs	r2, #0
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f001 f919 	bl	8013dcc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8012b9a:	e101      	b.n	8012da0 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012b9c:	7bbb      	ldrb	r3, [r7, #14]
 8012b9e:	2b03      	cmp	r3, #3
 8012ba0:	f040 80fe 	bne.w	8012da0 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	220d      	movs	r2, #13
 8012ba8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2200      	movs	r2, #0
 8012bae:	705a      	strb	r2, [r3, #1]
      break;
 8012bb0:	e0f6      	b.n	8012da0 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8012bb2:	2109      	movs	r1, #9
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f000 fa1c 	bl	8012ff2 <USBH_Get_CfgDesc>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012bbe:	7bbb      	ldrb	r3, [r7, #14]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d103      	bne.n	8012bcc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2204      	movs	r2, #4
 8012bc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012bca:	e0eb      	b.n	8012da4 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012bcc:	7bbb      	ldrb	r3, [r7, #14]
 8012bce:	2b03      	cmp	r3, #3
 8012bd0:	f040 80e8 	bne.w	8012da4 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012bda:	3301      	adds	r3, #1
 8012bdc:	b2da      	uxtb	r2, r3
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012bea:	2b03      	cmp	r3, #3
 8012bec:	d903      	bls.n	8012bf6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	220d      	movs	r2, #13
 8012bf2:	701a      	strb	r2, [r3, #0]
      break;
 8012bf4:	e0d6      	b.n	8012da4 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	795b      	ldrb	r3, [r3, #5]
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f001 f935 	bl	8013e6c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	791b      	ldrb	r3, [r3, #4]
 8012c06:	4619      	mov	r1, r3
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f001 f92f 	bl	8013e6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2200      	movs	r2, #0
 8012c12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2200      	movs	r2, #0
 8012c18:	701a      	strb	r2, [r3, #0]
      break;
 8012c1a:	e0c3      	b.n	8012da4 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8012c22:	4619      	mov	r1, r3
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f000 f9e4 	bl	8012ff2 <USBH_Get_CfgDesc>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012c2e:	7bbb      	ldrb	r3, [r7, #14]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d103      	bne.n	8012c3c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2205      	movs	r2, #5
 8012c38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012c3a:	e0b5      	b.n	8012da8 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012c3c:	7bbb      	ldrb	r3, [r7, #14]
 8012c3e:	2b03      	cmp	r3, #3
 8012c40:	f040 80b2 	bne.w	8012da8 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	b2da      	uxtb	r2, r3
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012c5a:	2b03      	cmp	r3, #3
 8012c5c:	d903      	bls.n	8012c66 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	220d      	movs	r2, #13
 8012c62:	701a      	strb	r2, [r3, #0]
      break;
 8012c64:	e0a0      	b.n	8012da8 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	795b      	ldrb	r3, [r3, #5]
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f001 f8fd 	bl	8013e6c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	791b      	ldrb	r3, [r3, #4]
 8012c76:	4619      	mov	r1, r3
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f001 f8f7 	bl	8013e6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2200      	movs	r2, #0
 8012c82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2200      	movs	r2, #0
 8012c88:	701a      	strb	r2, [r3, #0]
      break;
 8012c8a:	e08d      	b.n	8012da8 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d025      	beq.n	8012ce2 <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012ca2:	23ff      	movs	r3, #255	@ 0xff
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f000 f9ce 	bl	8013046 <USBH_Get_StringDesc>
 8012caa:	4603      	mov	r3, r0
 8012cac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012cae:	7bbb      	ldrb	r3, [r7, #14]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d109      	bne.n	8012cc8 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2206      	movs	r2, #6
 8012cb8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012cba:	2300      	movs	r3, #0
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	2105      	movs	r1, #5
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f000 f91f 	bl	8012f04 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012cc6:	e071      	b.n	8012dac <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012cc8:	7bbb      	ldrb	r3, [r7, #14]
 8012cca:	2b03      	cmp	r3, #3
 8012ccc:	d16e      	bne.n	8012dac <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2206      	movs	r2, #6
 8012cd2:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	2105      	movs	r1, #5
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f000 f912 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8012ce0:	e064      	b.n	8012dac <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2206      	movs	r2, #6
 8012ce6:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012ce8:	2300      	movs	r3, #0
 8012cea:	2200      	movs	r2, #0
 8012cec:	2105      	movs	r1, #5
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f000 f908 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8012cf4:	e05a      	b.n	8012dac <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d01f      	beq.n	8012d40 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8012d0c:	23ff      	movs	r3, #255	@ 0xff
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f000 f999 	bl	8013046 <USBH_Get_StringDesc>
 8012d14:	4603      	mov	r3, r0
 8012d16:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012d18:	7bbb      	ldrb	r3, [r7, #14]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d103      	bne.n	8012d26 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2207      	movs	r2, #7
 8012d22:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012d24:	e044      	b.n	8012db0 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012d26:	7bbb      	ldrb	r3, [r7, #14]
 8012d28:	2b03      	cmp	r3, #3
 8012d2a:	d141      	bne.n	8012db0 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2207      	movs	r2, #7
 8012d30:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012d32:	2300      	movs	r3, #0
 8012d34:	2200      	movs	r2, #0
 8012d36:	2105      	movs	r1, #5
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f000 f8e3 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8012d3e:	e037      	b.n	8012db0 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2207      	movs	r2, #7
 8012d44:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012d46:	2300      	movs	r3, #0
 8012d48:	2200      	movs	r2, #0
 8012d4a:	2105      	movs	r1, #5
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f000 f8d9 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8012d52:	e02d      	b.n	8012db0 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d017      	beq.n	8012d8e <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012d6a:	23ff      	movs	r3, #255	@ 0xff
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f000 f96a 	bl	8013046 <USBH_Get_StringDesc>
 8012d72:	4603      	mov	r3, r0
 8012d74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012d76:	7bbb      	ldrb	r3, [r7, #14]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d102      	bne.n	8012d82 <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8012d80:	e018      	b.n	8012db4 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012d82:	7bbb      	ldrb	r3, [r7, #14]
 8012d84:	2b03      	cmp	r3, #3
 8012d86:	d115      	bne.n	8012db4 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8012d8c:	e012      	b.n	8012db4 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	73fb      	strb	r3, [r7, #15]
      break;
 8012d92:	e00f      	b.n	8012db4 <USBH_HandleEnum+0x3f0>

    default:
      break;
 8012d94:	bf00      	nop
 8012d96:	e00e      	b.n	8012db6 <USBH_HandleEnum+0x3f2>
      break;
 8012d98:	bf00      	nop
 8012d9a:	e00c      	b.n	8012db6 <USBH_HandleEnum+0x3f2>
      break;
 8012d9c:	bf00      	nop
 8012d9e:	e00a      	b.n	8012db6 <USBH_HandleEnum+0x3f2>
      break;
 8012da0:	bf00      	nop
 8012da2:	e008      	b.n	8012db6 <USBH_HandleEnum+0x3f2>
      break;
 8012da4:	bf00      	nop
 8012da6:	e006      	b.n	8012db6 <USBH_HandleEnum+0x3f2>
      break;
 8012da8:	bf00      	nop
 8012daa:	e004      	b.n	8012db6 <USBH_HandleEnum+0x3f2>
      break;
 8012dac:	bf00      	nop
 8012dae:	e002      	b.n	8012db6 <USBH_HandleEnum+0x3f2>
      break;
 8012db0:	bf00      	nop
 8012db2:	e000      	b.n	8012db6 <USBH_HandleEnum+0x3f2>
      break;
 8012db4:	bf00      	nop
  }
  return Status;
 8012db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	3710      	adds	r7, #16
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}

08012dc0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	b083      	sub	sp, #12
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	683a      	ldr	r2, [r7, #0]
 8012dce:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8012dd2:	bf00      	nop
 8012dd4:	370c      	adds	r7, #12
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ddc:	4770      	bx	lr

08012dde <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8012dde:	b580      	push	{r7, lr}
 8012de0:	b082      	sub	sp, #8
 8012de2:	af00      	add	r7, sp, #0
 8012de4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012dec:	1c5a      	adds	r2, r3, #1
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f000 f804 	bl	8012e02 <USBH_HandleSof>
}
 8012dfa:	bf00      	nop
 8012dfc:	3708      	adds	r7, #8
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}

08012e02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8012e02:	b580      	push	{r7, lr}
 8012e04:	b082      	sub	sp, #8
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	781b      	ldrb	r3, [r3, #0]
 8012e0e:	b2db      	uxtb	r3, r3
 8012e10:	2b0b      	cmp	r3, #11
 8012e12:	d10a      	bne.n	8012e2a <USBH_HandleSof+0x28>
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d005      	beq.n	8012e2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012e24:	699b      	ldr	r3, [r3, #24]
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	4798      	blx	r3
  }
}
 8012e2a:	bf00      	nop
 8012e2c:	3708      	adds	r7, #8
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}

08012e32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8012e32:	b580      	push	{r7, lr}
 8012e34:	b082      	sub	sp, #8
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012e42:	2300      	movs	r3, #0
 8012e44:	2200      	movs	r2, #0
 8012e46:	2101      	movs	r1, #1
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f000 f85b 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8012e4e:	bf00      	nop
}
 8012e50:	3708      	adds	r7, #8
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}

08012e56 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8012e56:	b480      	push	{r7}
 8012e58:	b083      	sub	sp, #12
 8012e5a:	af00      	add	r7, sp, #0
 8012e5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	2200      	movs	r2, #0
 8012e62:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2201      	movs	r2, #1
 8012e6a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8012e6e:	bf00      	nop
}
 8012e70:	370c      	adds	r7, #12
 8012e72:	46bd      	mov	sp, r7
 8012e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e78:	4770      	bx	lr

08012e7a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8012e7a:	b580      	push	{r7, lr}
 8012e7c:	b082      	sub	sp, #8
 8012e7e:	af00      	add	r7, sp, #0
 8012e80:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2201      	movs	r2, #1
 8012e86:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2200      	movs	r2, #0
 8012e96:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	2101      	movs	r1, #1
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f000 f82f 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012ea6:	2300      	movs	r3, #0
}
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3708      	adds	r7, #8
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b082      	sub	sp, #8
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2201      	movs	r2, #1
 8012ebc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f006 fd58 	bl	8019986 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	791b      	ldrb	r3, [r3, #4]
 8012eda:	4619      	mov	r1, r3
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	f000 ffc5 	bl	8013e6c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	795b      	ldrb	r3, [r3, #5]
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f000 ffbf 	bl	8013e6c <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012eee:	2300      	movs	r3, #0
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	2101      	movs	r1, #1
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f000 f805 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012efa:	2300      	movs	r3, #0
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}

08012f04 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b086      	sub	sp, #24
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	60f8      	str	r0, [r7, #12]
 8012f0c:	607a      	str	r2, [r7, #4]
 8012f0e:	603b      	str	r3, [r7, #0]
 8012f10:	460b      	mov	r3, r1
 8012f12:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8012f14:	7afa      	ldrb	r2, [r7, #11]
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8012f22:	4618      	mov	r0, r3
 8012f24:	f003 fe02 	bl	8016b2c <osMessageWaiting>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	f1c3 0310 	rsb	r3, r3, #16
 8012f2e:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8012f30:	697b      	ldr	r3, [r7, #20]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d009      	beq.n	8012f4a <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012f42:	687a      	ldr	r2, [r7, #4]
 8012f44:	4619      	mov	r1, r3
 8012f46:	f003 fd3d 	bl	80169c4 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8012f4a:	bf00      	nop
 8012f4c:	3718      	adds	r7, #24
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}

08012f52 <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8012f52:	b580      	push	{r7, lr}
 8012f54:	b086      	sub	sp, #24
 8012f56:	af00      	add	r7, sp, #0
 8012f58:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8012f60:	f107 030c 	add.w	r3, r7, #12
 8012f64:	f04f 32ff 	mov.w	r2, #4294967295
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f003 fd6b 	bl	8016a44 <osMessageGet>
    if (event.status == osEventMessage)
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	2b10      	cmp	r3, #16
 8012f72:	d1f2      	bne.n	8012f5a <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f7ff fb0b 	bl	8012590 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012f7a:	e7ee      	b.n	8012f5a <USBH_Process_OS+0x8>

08012f7c <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012f84:	2300      	movs	r3, #0
 8012f86:	2200      	movs	r2, #0
 8012f88:	2101      	movs	r1, #1
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f7ff ffba 	bl	8012f04 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012f90:	2300      	movs	r3, #0
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3708      	adds	r7, #8
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}

08012f9a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b086      	sub	sp, #24
 8012f9e:	af02      	add	r7, sp, #8
 8012fa0:	6078      	str	r0, [r7, #4]
 8012fa2:	460b      	mov	r3, r1
 8012fa4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8012fa6:	887b      	ldrh	r3, [r7, #2]
 8012fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012fac:	d901      	bls.n	8012fb2 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8012fae:	2303      	movs	r3, #3
 8012fb0:	e01b      	b.n	8012fea <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8012fb8:	887b      	ldrh	r3, [r7, #2]
 8012fba:	9300      	str	r3, [sp, #0]
 8012fbc:	4613      	mov	r3, r2
 8012fbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012fc2:	2100      	movs	r1, #0
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f000 f872 	bl	80130ae <USBH_GetDescriptor>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8012fce:	7bfb      	ldrb	r3, [r7, #15]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d109      	bne.n	8012fe8 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8012fda:	887a      	ldrh	r2, [r7, #2]
 8012fdc:	4619      	mov	r1, r3
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f000 f92a 	bl	8013238 <USBH_ParseDevDesc>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	3710      	adds	r7, #16
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}

08012ff2 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8012ff2:	b580      	push	{r7, lr}
 8012ff4:	b086      	sub	sp, #24
 8012ff6:	af02      	add	r7, sp, #8
 8012ff8:	6078      	str	r0, [r7, #4]
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	331c      	adds	r3, #28
 8013002:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8013004:	887b      	ldrh	r3, [r7, #2]
 8013006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801300a:	d901      	bls.n	8013010 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 801300c:	2303      	movs	r3, #3
 801300e:	e016      	b.n	801303e <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8013010:	887b      	ldrh	r3, [r7, #2]
 8013012:	9300      	str	r3, [sp, #0]
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801301a:	2100      	movs	r1, #0
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f000 f846 	bl	80130ae <USBH_GetDescriptor>
 8013022:	4603      	mov	r3, r0
 8013024:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8013026:	7bfb      	ldrb	r3, [r7, #15]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d107      	bne.n	801303c <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 801302c:	887b      	ldrh	r3, [r7, #2]
 801302e:	461a      	mov	r2, r3
 8013030:	68b9      	ldr	r1, [r7, #8]
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f000 f9b0 	bl	8013398 <USBH_ParseCfgDesc>
 8013038:	4603      	mov	r3, r0
 801303a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801303c:	7bfb      	ldrb	r3, [r7, #15]
}
 801303e:	4618      	mov	r0, r3
 8013040:	3710      	adds	r7, #16
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}

08013046 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8013046:	b580      	push	{r7, lr}
 8013048:	b088      	sub	sp, #32
 801304a:	af02      	add	r7, sp, #8
 801304c:	60f8      	str	r0, [r7, #12]
 801304e:	607a      	str	r2, [r7, #4]
 8013050:	461a      	mov	r2, r3
 8013052:	460b      	mov	r3, r1
 8013054:	72fb      	strb	r3, [r7, #11]
 8013056:	4613      	mov	r3, r2
 8013058:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 801305a:	893b      	ldrh	r3, [r7, #8]
 801305c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013060:	d802      	bhi.n	8013068 <USBH_Get_StringDesc+0x22>
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d101      	bne.n	801306c <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013068:	2303      	movs	r3, #3
 801306a:	e01c      	b.n	80130a6 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 801306c:	7afb      	ldrb	r3, [r7, #11]
 801306e:	b29b      	uxth	r3, r3
 8013070:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8013074:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 801307c:	893b      	ldrh	r3, [r7, #8]
 801307e:	9300      	str	r3, [sp, #0]
 8013080:	460b      	mov	r3, r1
 8013082:	2100      	movs	r1, #0
 8013084:	68f8      	ldr	r0, [r7, #12]
 8013086:	f000 f812 	bl	80130ae <USBH_GetDescriptor>
 801308a:	4603      	mov	r3, r0
 801308c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 801308e:	7dfb      	ldrb	r3, [r7, #23]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d107      	bne.n	80130a4 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801309a:	893a      	ldrh	r2, [r7, #8]
 801309c:	6879      	ldr	r1, [r7, #4]
 801309e:	4618      	mov	r0, r3
 80130a0:	f000 fb8d 	bl	80137be <USBH_ParseStringDesc>
  }

  return status;
 80130a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3718      	adds	r7, #24
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}

080130ae <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80130ae:	b580      	push	{r7, lr}
 80130b0:	b084      	sub	sp, #16
 80130b2:	af00      	add	r7, sp, #0
 80130b4:	60f8      	str	r0, [r7, #12]
 80130b6:	607b      	str	r3, [r7, #4]
 80130b8:	460b      	mov	r3, r1
 80130ba:	72fb      	strb	r3, [r7, #11]
 80130bc:	4613      	mov	r3, r2
 80130be:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	789b      	ldrb	r3, [r3, #2]
 80130c4:	2b01      	cmp	r3, #1
 80130c6:	d11c      	bne.n	8013102 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80130c8:	7afb      	ldrb	r3, [r7, #11]
 80130ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80130ce:	b2da      	uxtb	r2, r3
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2206      	movs	r2, #6
 80130d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	893a      	ldrh	r2, [r7, #8]
 80130de:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80130e0:	893b      	ldrh	r3, [r7, #8]
 80130e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80130e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80130ea:	d104      	bne.n	80130f6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	f240 4209 	movw	r2, #1033	@ 0x409
 80130f2:	829a      	strh	r2, [r3, #20]
 80130f4:	e002      	b.n	80130fc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2200      	movs	r2, #0
 80130fa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	8b3a      	ldrh	r2, [r7, #24]
 8013100:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8013102:	8b3b      	ldrh	r3, [r7, #24]
 8013104:	461a      	mov	r2, r3
 8013106:	6879      	ldr	r1, [r7, #4]
 8013108:	68f8      	ldr	r0, [r7, #12]
 801310a:	f000 fba5 	bl	8013858 <USBH_CtlReq>
 801310e:	4603      	mov	r3, r0
}
 8013110:	4618      	mov	r0, r3
 8013112:	3710      	adds	r7, #16
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}

08013118 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	460b      	mov	r3, r1
 8013122:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	789b      	ldrb	r3, [r3, #2]
 8013128:	2b01      	cmp	r3, #1
 801312a:	d10f      	bne.n	801314c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2200      	movs	r2, #0
 8013130:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2205      	movs	r2, #5
 8013136:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8013138:	78fb      	ldrb	r3, [r7, #3]
 801313a:	b29a      	uxth	r2, r3
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2200      	movs	r2, #0
 8013144:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2200      	movs	r2, #0
 801314a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801314c:	2200      	movs	r2, #0
 801314e:	2100      	movs	r1, #0
 8013150:	6878      	ldr	r0, [r7, #4]
 8013152:	f000 fb81 	bl	8013858 <USBH_CtlReq>
 8013156:	4603      	mov	r3, r0
}
 8013158:	4618      	mov	r0, r3
 801315a:	3708      	adds	r7, #8
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}

08013160 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b082      	sub	sp, #8
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
 8013168:	460b      	mov	r3, r1
 801316a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	789b      	ldrb	r3, [r3, #2]
 8013170:	2b01      	cmp	r3, #1
 8013172:	d10e      	bne.n	8013192 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2200      	movs	r2, #0
 8013178:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	2209      	movs	r2, #9
 801317e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	887a      	ldrh	r2, [r7, #2]
 8013184:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2200      	movs	r2, #0
 801318a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2200      	movs	r2, #0
 8013190:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013192:	2200      	movs	r2, #0
 8013194:	2100      	movs	r1, #0
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f000 fb5e 	bl	8013858 <USBH_CtlReq>
 801319c:	4603      	mov	r3, r0
}
 801319e:	4618      	mov	r0, r3
 80131a0:	3708      	adds	r7, #8
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}

080131a6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80131a6:	b580      	push	{r7, lr}
 80131a8:	b082      	sub	sp, #8
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	6078      	str	r0, [r7, #4]
 80131ae:	460b      	mov	r3, r1
 80131b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	789b      	ldrb	r3, [r3, #2]
 80131b6:	2b01      	cmp	r3, #1
 80131b8:	d10f      	bne.n	80131da <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2200      	movs	r2, #0
 80131be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2203      	movs	r2, #3
 80131c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80131c6:	78fb      	ldrb	r3, [r7, #3]
 80131c8:	b29a      	uxth	r2, r3
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	2200      	movs	r2, #0
 80131d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2200      	movs	r2, #0
 80131d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80131da:	2200      	movs	r2, #0
 80131dc:	2100      	movs	r1, #0
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f000 fb3a 	bl	8013858 <USBH_CtlReq>
 80131e4:	4603      	mov	r3, r0
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3708      	adds	r7, #8
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}

080131ee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80131ee:	b580      	push	{r7, lr}
 80131f0:	b082      	sub	sp, #8
 80131f2:	af00      	add	r7, sp, #0
 80131f4:	6078      	str	r0, [r7, #4]
 80131f6:	460b      	mov	r3, r1
 80131f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	789b      	ldrb	r3, [r3, #2]
 80131fe:	2b01      	cmp	r3, #1
 8013200:	d10f      	bne.n	8013222 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2202      	movs	r2, #2
 8013206:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2201      	movs	r2, #1
 801320c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2200      	movs	r2, #0
 8013212:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8013214:	78fb      	ldrb	r3, [r7, #3]
 8013216:	b29a      	uxth	r2, r3
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2200      	movs	r2, #0
 8013220:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013222:	2200      	movs	r2, #0
 8013224:	2100      	movs	r1, #0
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f000 fb16 	bl	8013858 <USBH_CtlReq>
 801322c:	4603      	mov	r3, r0
}
 801322e:	4618      	mov	r0, r3
 8013230:	3708      	adds	r7, #8
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
	...

08013238 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8013238:	b480      	push	{r7}
 801323a:	b087      	sub	sp, #28
 801323c:	af00      	add	r7, sp, #0
 801323e:	60f8      	str	r0, [r7, #12]
 8013240:	60b9      	str	r1, [r7, #8]
 8013242:	4613      	mov	r3, r2
 8013244:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	f203 3326 	addw	r3, r3, #806	@ 0x326
 801324c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 801324e:	2300      	movs	r3, #0
 8013250:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d101      	bne.n	801325c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8013258:	2302      	movs	r3, #2
 801325a:	e094      	b.n	8013386 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	781a      	ldrb	r2, [r3, #0]
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	785a      	ldrb	r2, [r3, #1]
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	3302      	adds	r3, #2
 8013270:	781b      	ldrb	r3, [r3, #0]
 8013272:	461a      	mov	r2, r3
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	3303      	adds	r3, #3
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	021b      	lsls	r3, r3, #8
 801327c:	b29b      	uxth	r3, r3
 801327e:	4313      	orrs	r3, r2
 8013280:	b29a      	uxth	r2, r3
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	791a      	ldrb	r2, [r3, #4]
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	795a      	ldrb	r2, [r3, #5]
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	799a      	ldrb	r2, [r3, #6]
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	79da      	ldrb	r2, [r3, #7]
 80132a2:	693b      	ldr	r3, [r7, #16]
 80132a4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d004      	beq.n	80132ba <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80132b6:	2b01      	cmp	r3, #1
 80132b8:	d11b      	bne.n	80132f2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	79db      	ldrb	r3, [r3, #7]
 80132be:	2b20      	cmp	r3, #32
 80132c0:	dc0f      	bgt.n	80132e2 <USBH_ParseDevDesc+0xaa>
 80132c2:	2b08      	cmp	r3, #8
 80132c4:	db0f      	blt.n	80132e6 <USBH_ParseDevDesc+0xae>
 80132c6:	3b08      	subs	r3, #8
 80132c8:	4a32      	ldr	r2, [pc, #200]	@ (8013394 <USBH_ParseDevDesc+0x15c>)
 80132ca:	fa22 f303 	lsr.w	r3, r2, r3
 80132ce:	f003 0301 	and.w	r3, r3, #1
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	bf14      	ite	ne
 80132d6:	2301      	movne	r3, #1
 80132d8:	2300      	moveq	r3, #0
 80132da:	b2db      	uxtb	r3, r3
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d106      	bne.n	80132ee <USBH_ParseDevDesc+0xb6>
 80132e0:	e001      	b.n	80132e6 <USBH_ParseDevDesc+0xae>
 80132e2:	2b40      	cmp	r3, #64	@ 0x40
 80132e4:	d003      	beq.n	80132ee <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	2208      	movs	r2, #8
 80132ea:	71da      	strb	r2, [r3, #7]
        break;
 80132ec:	e000      	b.n	80132f0 <USBH_ParseDevDesc+0xb8>
        break;
 80132ee:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80132f0:	e00e      	b.n	8013310 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80132f8:	2b02      	cmp	r3, #2
 80132fa:	d107      	bne.n	801330c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	79db      	ldrb	r3, [r3, #7]
 8013300:	2b08      	cmp	r3, #8
 8013302:	d005      	beq.n	8013310 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	2208      	movs	r2, #8
 8013308:	71da      	strb	r2, [r3, #7]
 801330a:	e001      	b.n	8013310 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 801330c:	2303      	movs	r3, #3
 801330e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8013310:	88fb      	ldrh	r3, [r7, #6]
 8013312:	2b08      	cmp	r3, #8
 8013314:	d936      	bls.n	8013384 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	3308      	adds	r3, #8
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	461a      	mov	r2, r3
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	3309      	adds	r3, #9
 8013322:	781b      	ldrb	r3, [r3, #0]
 8013324:	021b      	lsls	r3, r3, #8
 8013326:	b29b      	uxth	r3, r3
 8013328:	4313      	orrs	r3, r2
 801332a:	b29a      	uxth	r2, r3
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	330a      	adds	r3, #10
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	461a      	mov	r2, r3
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	330b      	adds	r3, #11
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	021b      	lsls	r3, r3, #8
 8013340:	b29b      	uxth	r3, r3
 8013342:	4313      	orrs	r3, r2
 8013344:	b29a      	uxth	r2, r3
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	330c      	adds	r3, #12
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	461a      	mov	r2, r3
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	330d      	adds	r3, #13
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	021b      	lsls	r3, r3, #8
 801335a:	b29b      	uxth	r3, r3
 801335c:	4313      	orrs	r3, r2
 801335e:	b29a      	uxth	r2, r3
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	7b9a      	ldrb	r2, [r3, #14]
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	7bda      	ldrb	r2, [r3, #15]
 8013370:	693b      	ldr	r3, [r7, #16]
 8013372:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	7c1a      	ldrb	r2, [r3, #16]
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	7c5a      	ldrb	r2, [r3, #17]
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8013384:	7dfb      	ldrb	r3, [r7, #23]
}
 8013386:	4618      	mov	r0, r3
 8013388:	371c      	adds	r7, #28
 801338a:	46bd      	mov	sp, r7
 801338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013390:	4770      	bx	lr
 8013392:	bf00      	nop
 8013394:	01000101 	.word	0x01000101

08013398 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b08c      	sub	sp, #48	@ 0x30
 801339c:	af00      	add	r7, sp, #0
 801339e:	60f8      	str	r0, [r7, #12]
 80133a0:	60b9      	str	r1, [r7, #8]
 80133a2:	4613      	mov	r3, r2
 80133a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80133ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80133ae:	2300      	movs	r3, #0
 80133b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80133b4:	2300      	movs	r3, #0
 80133b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80133ba:	2300      	movs	r3, #0
 80133bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d101      	bne.n	80133ca <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80133c6:	2302      	movs	r3, #2
 80133c8:	e0de      	b.n	8013588 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80133ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133d0:	781b      	ldrb	r3, [r3, #0]
 80133d2:	2b09      	cmp	r3, #9
 80133d4:	d002      	beq.n	80133dc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80133d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133d8:	2209      	movs	r2, #9
 80133da:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	781a      	ldrb	r2, [r3, #0]
 80133e0:	6a3b      	ldr	r3, [r7, #32]
 80133e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	785a      	ldrb	r2, [r3, #1]
 80133e8:	6a3b      	ldr	r3, [r7, #32]
 80133ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	3302      	adds	r3, #2
 80133f0:	781b      	ldrb	r3, [r3, #0]
 80133f2:	461a      	mov	r2, r3
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	3303      	adds	r3, #3
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	021b      	lsls	r3, r3, #8
 80133fc:	b29b      	uxth	r3, r3
 80133fe:	4313      	orrs	r3, r2
 8013400:	b29b      	uxth	r3, r3
 8013402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013406:	bf28      	it	cs
 8013408:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 801340c:	b29a      	uxth	r2, r3
 801340e:	6a3b      	ldr	r3, [r7, #32]
 8013410:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	791a      	ldrb	r2, [r3, #4]
 8013416:	6a3b      	ldr	r3, [r7, #32]
 8013418:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	795a      	ldrb	r2, [r3, #5]
 801341e:	6a3b      	ldr	r3, [r7, #32]
 8013420:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8013422:	68bb      	ldr	r3, [r7, #8]
 8013424:	799a      	ldrb	r2, [r3, #6]
 8013426:	6a3b      	ldr	r3, [r7, #32]
 8013428:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	79da      	ldrb	r2, [r3, #7]
 801342e:	6a3b      	ldr	r3, [r7, #32]
 8013430:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	7a1a      	ldrb	r2, [r3, #8]
 8013436:	6a3b      	ldr	r3, [r7, #32]
 8013438:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801343a:	88fb      	ldrh	r3, [r7, #6]
 801343c:	2b09      	cmp	r3, #9
 801343e:	f240 80a1 	bls.w	8013584 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8013442:	2309      	movs	r3, #9
 8013444:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8013446:	2300      	movs	r3, #0
 8013448:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801344a:	e085      	b.n	8013558 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801344c:	f107 0316 	add.w	r3, r7, #22
 8013450:	4619      	mov	r1, r3
 8013452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013454:	f000 f9e6 	bl	8013824 <USBH_GetNextDesc>
 8013458:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 801345a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801345c:	785b      	ldrb	r3, [r3, #1]
 801345e:	2b04      	cmp	r3, #4
 8013460:	d17a      	bne.n	8013558 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8013462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013464:	781b      	ldrb	r3, [r3, #0]
 8013466:	2b09      	cmp	r3, #9
 8013468:	d002      	beq.n	8013470 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 801346a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801346c:	2209      	movs	r2, #9
 801346e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8013470:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013474:	221a      	movs	r2, #26
 8013476:	fb02 f303 	mul.w	r3, r2, r3
 801347a:	3308      	adds	r3, #8
 801347c:	6a3a      	ldr	r2, [r7, #32]
 801347e:	4413      	add	r3, r2
 8013480:	3302      	adds	r3, #2
 8013482:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8013484:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013486:	69f8      	ldr	r0, [r7, #28]
 8013488:	f000 f882 	bl	8013590 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801348c:	2300      	movs	r3, #0
 801348e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8013492:	2300      	movs	r3, #0
 8013494:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013496:	e043      	b.n	8013520 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013498:	f107 0316 	add.w	r3, r7, #22
 801349c:	4619      	mov	r1, r3
 801349e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134a0:	f000 f9c0 	bl	8013824 <USBH_GetNextDesc>
 80134a4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80134a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134a8:	785b      	ldrb	r3, [r3, #1]
 80134aa:	2b05      	cmp	r3, #5
 80134ac:	d138      	bne.n	8013520 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	795b      	ldrb	r3, [r3, #5]
 80134b2:	2b01      	cmp	r3, #1
 80134b4:	d113      	bne.n	80134de <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80134b6:	69fb      	ldr	r3, [r7, #28]
 80134b8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80134ba:	2b02      	cmp	r3, #2
 80134bc:	d003      	beq.n	80134c6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80134be:	69fb      	ldr	r3, [r7, #28]
 80134c0:	799b      	ldrb	r3, [r3, #6]
 80134c2:	2b03      	cmp	r3, #3
 80134c4:	d10b      	bne.n	80134de <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80134c6:	69fb      	ldr	r3, [r7, #28]
 80134c8:	79db      	ldrb	r3, [r3, #7]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d10b      	bne.n	80134e6 <USBH_ParseCfgDesc+0x14e>
 80134ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	2b09      	cmp	r3, #9
 80134d4:	d007      	beq.n	80134e6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80134d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134d8:	2209      	movs	r2, #9
 80134da:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80134dc:	e003      	b.n	80134e6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80134de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134e0:	2207      	movs	r2, #7
 80134e2:	701a      	strb	r2, [r3, #0]
 80134e4:	e000      	b.n	80134e8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80134e6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80134e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80134f0:	3201      	adds	r2, #1
 80134f2:	00d2      	lsls	r2, r2, #3
 80134f4:	211a      	movs	r1, #26
 80134f6:	fb01 f303 	mul.w	r3, r1, r3
 80134fa:	4413      	add	r3, r2
 80134fc:	3308      	adds	r3, #8
 80134fe:	6a3a      	ldr	r2, [r7, #32]
 8013500:	4413      	add	r3, r2
 8013502:	3304      	adds	r3, #4
 8013504:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8013506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013508:	69b9      	ldr	r1, [r7, #24]
 801350a:	68f8      	ldr	r0, [r7, #12]
 801350c:	f000 f86f 	bl	80135ee <USBH_ParseEPDesc>
 8013510:	4603      	mov	r3, r0
 8013512:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8013516:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801351a:	3301      	adds	r3, #1
 801351c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013520:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013524:	2b01      	cmp	r3, #1
 8013526:	d80a      	bhi.n	801353e <USBH_ParseCfgDesc+0x1a6>
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	791b      	ldrb	r3, [r3, #4]
 801352c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8013530:	429a      	cmp	r2, r3
 8013532:	d204      	bcs.n	801353e <USBH_ParseCfgDesc+0x1a6>
 8013534:	6a3b      	ldr	r3, [r7, #32]
 8013536:	885a      	ldrh	r2, [r3, #2]
 8013538:	8afb      	ldrh	r3, [r7, #22]
 801353a:	429a      	cmp	r2, r3
 801353c:	d8ac      	bhi.n	8013498 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801353e:	69fb      	ldr	r3, [r7, #28]
 8013540:	791b      	ldrb	r3, [r3, #4]
 8013542:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8013546:	429a      	cmp	r2, r3
 8013548:	d201      	bcs.n	801354e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 801354a:	2303      	movs	r3, #3
 801354c:	e01c      	b.n	8013588 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 801354e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013552:	3301      	adds	r3, #1
 8013554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801355c:	2b01      	cmp	r3, #1
 801355e:	d805      	bhi.n	801356c <USBH_ParseCfgDesc+0x1d4>
 8013560:	6a3b      	ldr	r3, [r7, #32]
 8013562:	885a      	ldrh	r2, [r3, #2]
 8013564:	8afb      	ldrh	r3, [r7, #22]
 8013566:	429a      	cmp	r2, r3
 8013568:	f63f af70 	bhi.w	801344c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 801356c:	6a3b      	ldr	r3, [r7, #32]
 801356e:	791b      	ldrb	r3, [r3, #4]
 8013570:	2b02      	cmp	r3, #2
 8013572:	bf28      	it	cs
 8013574:	2302      	movcs	r3, #2
 8013576:	b2db      	uxtb	r3, r3
 8013578:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801357c:	429a      	cmp	r2, r3
 801357e:	d201      	bcs.n	8013584 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8013580:	2303      	movs	r3, #3
 8013582:	e001      	b.n	8013588 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8013584:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013588:	4618      	mov	r0, r3
 801358a:	3730      	adds	r7, #48	@ 0x30
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}

08013590 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8013590:	b480      	push	{r7}
 8013592:	b083      	sub	sp, #12
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
 8013598:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	781a      	ldrb	r2, [r3, #0]
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	785a      	ldrb	r2, [r3, #1]
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	789a      	ldrb	r2, [r3, #2]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	78da      	ldrb	r2, [r3, #3]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	791a      	ldrb	r2, [r3, #4]
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	795a      	ldrb	r2, [r3, #5]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	799a      	ldrb	r2, [r3, #6]
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	79da      	ldrb	r2, [r3, #7]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	7a1a      	ldrb	r2, [r3, #8]
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	721a      	strb	r2, [r3, #8]
}
 80135e2:	bf00      	nop
 80135e4:	370c      	adds	r7, #12
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr

080135ee <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80135ee:	b480      	push	{r7}
 80135f0:	b087      	sub	sp, #28
 80135f2:	af00      	add	r7, sp, #0
 80135f4:	60f8      	str	r0, [r7, #12]
 80135f6:	60b9      	str	r1, [r7, #8]
 80135f8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80135fa:	2300      	movs	r3, #0
 80135fc:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	781a      	ldrb	r2, [r3, #0]
 8013602:	68bb      	ldr	r3, [r7, #8]
 8013604:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	785a      	ldrb	r2, [r3, #1]
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	789a      	ldrb	r2, [r3, #2]
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	78da      	ldrb	r2, [r3, #3]
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	3304      	adds	r3, #4
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	461a      	mov	r2, r3
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	3305      	adds	r3, #5
 801362a:	781b      	ldrb	r3, [r3, #0]
 801362c:	021b      	lsls	r3, r3, #8
 801362e:	b29b      	uxth	r3, r3
 8013630:	4313      	orrs	r3, r2
 8013632:	b29a      	uxth	r2, r3
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	799a      	ldrb	r2, [r3, #6]
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	889b      	ldrh	r3, [r3, #4]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d009      	beq.n	801365c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801364c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013650:	d804      	bhi.n	801365c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8013656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801365a:	d901      	bls.n	8013660 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 801365c:	2303      	movs	r3, #3
 801365e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013666:	2b00      	cmp	r3, #0
 8013668:	d136      	bne.n	80136d8 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	78db      	ldrb	r3, [r3, #3]
 801366e:	f003 0303 	and.w	r3, r3, #3
 8013672:	2b02      	cmp	r3, #2
 8013674:	d108      	bne.n	8013688 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	889b      	ldrh	r3, [r3, #4]
 801367a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801367e:	f240 8097 	bls.w	80137b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013682:	2303      	movs	r3, #3
 8013684:	75fb      	strb	r3, [r7, #23]
 8013686:	e093      	b.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	78db      	ldrb	r3, [r3, #3]
 801368c:	f003 0303 	and.w	r3, r3, #3
 8013690:	2b00      	cmp	r3, #0
 8013692:	d107      	bne.n	80136a4 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	889b      	ldrh	r3, [r3, #4]
 8013698:	2b40      	cmp	r3, #64	@ 0x40
 801369a:	f240 8089 	bls.w	80137b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801369e:	2303      	movs	r3, #3
 80136a0:	75fb      	strb	r3, [r7, #23]
 80136a2:	e085      	b.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	78db      	ldrb	r3, [r3, #3]
 80136a8:	f003 0303 	and.w	r3, r3, #3
 80136ac:	2b01      	cmp	r3, #1
 80136ae:	d005      	beq.n	80136bc <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	78db      	ldrb	r3, [r3, #3]
 80136b4:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80136b8:	2b03      	cmp	r3, #3
 80136ba:	d10a      	bne.n	80136d2 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	799b      	ldrb	r3, [r3, #6]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d003      	beq.n	80136cc <USBH_ParseEPDesc+0xde>
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	799b      	ldrb	r3, [r3, #6]
 80136c8:	2b10      	cmp	r3, #16
 80136ca:	d970      	bls.n	80137ae <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80136cc:	2303      	movs	r3, #3
 80136ce:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80136d0:	e06d      	b.n	80137ae <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80136d2:	2303      	movs	r3, #3
 80136d4:	75fb      	strb	r3, [r7, #23]
 80136d6:	e06b      	b.n	80137b0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80136de:	2b01      	cmp	r3, #1
 80136e0:	d13c      	bne.n	801375c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	78db      	ldrb	r3, [r3, #3]
 80136e6:	f003 0303 	and.w	r3, r3, #3
 80136ea:	2b02      	cmp	r3, #2
 80136ec:	d005      	beq.n	80136fa <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	78db      	ldrb	r3, [r3, #3]
 80136f2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d106      	bne.n	8013708 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	889b      	ldrh	r3, [r3, #4]
 80136fe:	2b40      	cmp	r3, #64	@ 0x40
 8013700:	d956      	bls.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013702:	2303      	movs	r3, #3
 8013704:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8013706:	e053      	b.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	78db      	ldrb	r3, [r3, #3]
 801370c:	f003 0303 	and.w	r3, r3, #3
 8013710:	2b01      	cmp	r3, #1
 8013712:	d10e      	bne.n	8013732 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	799b      	ldrb	r3, [r3, #6]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d007      	beq.n	801372c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8013720:	2b10      	cmp	r3, #16
 8013722:	d803      	bhi.n	801372c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8013728:	2b40      	cmp	r3, #64	@ 0x40
 801372a:	d941      	bls.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801372c:	2303      	movs	r3, #3
 801372e:	75fb      	strb	r3, [r7, #23]
 8013730:	e03e      	b.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	78db      	ldrb	r3, [r3, #3]
 8013736:	f003 0303 	and.w	r3, r3, #3
 801373a:	2b03      	cmp	r3, #3
 801373c:	d10b      	bne.n	8013756 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	799b      	ldrb	r3, [r3, #6]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d004      	beq.n	8013750 <USBH_ParseEPDesc+0x162>
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	889b      	ldrh	r3, [r3, #4]
 801374a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801374e:	d32f      	bcc.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013750:	2303      	movs	r3, #3
 8013752:	75fb      	strb	r3, [r7, #23]
 8013754:	e02c      	b.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8013756:	2303      	movs	r3, #3
 8013758:	75fb      	strb	r3, [r7, #23]
 801375a:	e029      	b.n	80137b0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013762:	2b02      	cmp	r3, #2
 8013764:	d120      	bne.n	80137a8 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	78db      	ldrb	r3, [r3, #3]
 801376a:	f003 0303 	and.w	r3, r3, #3
 801376e:	2b00      	cmp	r3, #0
 8013770:	d106      	bne.n	8013780 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	889b      	ldrh	r3, [r3, #4]
 8013776:	2b08      	cmp	r3, #8
 8013778:	d01a      	beq.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801377a:	2303      	movs	r3, #3
 801377c:	75fb      	strb	r3, [r7, #23]
 801377e:	e017      	b.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	78db      	ldrb	r3, [r3, #3]
 8013784:	f003 0303 	and.w	r3, r3, #3
 8013788:	2b03      	cmp	r3, #3
 801378a:	d10a      	bne.n	80137a2 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	799b      	ldrb	r3, [r3, #6]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d003      	beq.n	801379c <USBH_ParseEPDesc+0x1ae>
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	889b      	ldrh	r3, [r3, #4]
 8013798:	2b08      	cmp	r3, #8
 801379a:	d909      	bls.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801379c:	2303      	movs	r3, #3
 801379e:	75fb      	strb	r3, [r7, #23]
 80137a0:	e006      	b.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80137a2:	2303      	movs	r3, #3
 80137a4:	75fb      	strb	r3, [r7, #23]
 80137a6:	e003      	b.n	80137b0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80137a8:	2303      	movs	r3, #3
 80137aa:	75fb      	strb	r3, [r7, #23]
 80137ac:	e000      	b.n	80137b0 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80137ae:	bf00      	nop
  }

  return status;
 80137b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	371c      	adds	r7, #28
 80137b6:	46bd      	mov	sp, r7
 80137b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137bc:	4770      	bx	lr

080137be <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80137be:	b480      	push	{r7}
 80137c0:	b087      	sub	sp, #28
 80137c2:	af00      	add	r7, sp, #0
 80137c4:	60f8      	str	r0, [r7, #12]
 80137c6:	60b9      	str	r1, [r7, #8]
 80137c8:	4613      	mov	r3, r2
 80137ca:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	3301      	adds	r3, #1
 80137d0:	781b      	ldrb	r3, [r3, #0]
 80137d2:	2b03      	cmp	r3, #3
 80137d4:	d120      	bne.n	8013818 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	1e9a      	subs	r2, r3, #2
 80137dc:	88fb      	ldrh	r3, [r7, #6]
 80137de:	4293      	cmp	r3, r2
 80137e0:	bf28      	it	cs
 80137e2:	4613      	movcs	r3, r2
 80137e4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	3302      	adds	r3, #2
 80137ea:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80137ec:	2300      	movs	r3, #0
 80137ee:	82fb      	strh	r3, [r7, #22]
 80137f0:	e00b      	b.n	801380a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80137f2:	8afb      	ldrh	r3, [r7, #22]
 80137f4:	68fa      	ldr	r2, [r7, #12]
 80137f6:	4413      	add	r3, r2
 80137f8:	781a      	ldrb	r2, [r3, #0]
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	3301      	adds	r3, #1
 8013802:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8013804:	8afb      	ldrh	r3, [r7, #22]
 8013806:	3302      	adds	r3, #2
 8013808:	82fb      	strh	r3, [r7, #22]
 801380a:	8afa      	ldrh	r2, [r7, #22]
 801380c:	8abb      	ldrh	r3, [r7, #20]
 801380e:	429a      	cmp	r2, r3
 8013810:	d3ef      	bcc.n	80137f2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	2200      	movs	r2, #0
 8013816:	701a      	strb	r2, [r3, #0]
  }
}
 8013818:	bf00      	nop
 801381a:	371c      	adds	r7, #28
 801381c:	46bd      	mov	sp, r7
 801381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013822:	4770      	bx	lr

08013824 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013824:	b480      	push	{r7}
 8013826:	b085      	sub	sp, #20
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	881b      	ldrh	r3, [r3, #0]
 8013832:	687a      	ldr	r2, [r7, #4]
 8013834:	7812      	ldrb	r2, [r2, #0]
 8013836:	4413      	add	r3, r2
 8013838:	b29a      	uxth	r2, r3
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	4413      	add	r3, r2
 8013848:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801384a:	68fb      	ldr	r3, [r7, #12]
}
 801384c:	4618      	mov	r0, r3
 801384e:	3714      	adds	r7, #20
 8013850:	46bd      	mov	sp, r7
 8013852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013856:	4770      	bx	lr

08013858 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b086      	sub	sp, #24
 801385c:	af00      	add	r7, sp, #0
 801385e:	60f8      	str	r0, [r7, #12]
 8013860:	60b9      	str	r1, [r7, #8]
 8013862:	4613      	mov	r3, r2
 8013864:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8013866:	2301      	movs	r3, #1
 8013868:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	789b      	ldrb	r3, [r3, #2]
 801386e:	2b01      	cmp	r3, #1
 8013870:	d002      	beq.n	8013878 <USBH_CtlReq+0x20>
 8013872:	2b02      	cmp	r3, #2
 8013874:	d015      	beq.n	80138a2 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8013876:	e033      	b.n	80138e0 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	68ba      	ldr	r2, [r7, #8]
 801387c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	88fa      	ldrh	r2, [r7, #6]
 8013882:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	2201      	movs	r2, #1
 8013888:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2202      	movs	r2, #2
 801388e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8013890:	2301      	movs	r3, #1
 8013892:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013894:	2300      	movs	r3, #0
 8013896:	2200      	movs	r2, #0
 8013898:	2103      	movs	r1, #3
 801389a:	68f8      	ldr	r0, [r7, #12]
 801389c:	f7ff fb32 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 80138a0:	e01e      	b.n	80138e0 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 80138a2:	68f8      	ldr	r0, [r7, #12]
 80138a4:	f000 f822 	bl	80138ec <USBH_HandleControl>
 80138a8:	4603      	mov	r3, r0
 80138aa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80138ac:	7dfb      	ldrb	r3, [r7, #23]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d002      	beq.n	80138b8 <USBH_CtlReq+0x60>
 80138b2:	7dfb      	ldrb	r3, [r7, #23]
 80138b4:	2b03      	cmp	r3, #3
 80138b6:	d106      	bne.n	80138c6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	2201      	movs	r2, #1
 80138bc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	2200      	movs	r2, #0
 80138c2:	761a      	strb	r2, [r3, #24]
 80138c4:	e005      	b.n	80138d2 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 80138c6:	7dfb      	ldrb	r3, [r7, #23]
 80138c8:	2b02      	cmp	r3, #2
 80138ca:	d102      	bne.n	80138d2 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	2201      	movs	r2, #1
 80138d0:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80138d2:	2300      	movs	r3, #0
 80138d4:	2200      	movs	r2, #0
 80138d6:	2103      	movs	r1, #3
 80138d8:	68f8      	ldr	r0, [r7, #12]
 80138da:	f7ff fb13 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 80138de:	bf00      	nop
  }
  return status;
 80138e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80138e2:	4618      	mov	r0, r3
 80138e4:	3718      	adds	r7, #24
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}
	...

080138ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b086      	sub	sp, #24
 80138f0:	af02      	add	r7, sp, #8
 80138f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80138f4:	2301      	movs	r3, #1
 80138f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80138f8:	2300      	movs	r3, #0
 80138fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	7e1b      	ldrb	r3, [r3, #24]
 8013900:	3b01      	subs	r3, #1
 8013902:	2b0a      	cmp	r3, #10
 8013904:	f200 81b2 	bhi.w	8013c6c <USBH_HandleControl+0x380>
 8013908:	a201      	add	r2, pc, #4	@ (adr r2, 8013910 <USBH_HandleControl+0x24>)
 801390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801390e:	bf00      	nop
 8013910:	0801393d 	.word	0x0801393d
 8013914:	08013957 	.word	0x08013957
 8013918:	080139d9 	.word	0x080139d9
 801391c:	080139ff 	.word	0x080139ff
 8013920:	08013a5d 	.word	0x08013a5d
 8013924:	08013a87 	.word	0x08013a87
 8013928:	08013b09 	.word	0x08013b09
 801392c:	08013b2b 	.word	0x08013b2b
 8013930:	08013b8d 	.word	0x08013b8d
 8013934:	08013bb3 	.word	0x08013bb3
 8013938:	08013c15 	.word	0x08013c15
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	f103 0110 	add.w	r1, r3, #16
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	795b      	ldrb	r3, [r3, #5]
 8013946:	461a      	mov	r2, r3
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f000 f99f 	bl	8013c8c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2202      	movs	r2, #2
 8013952:	761a      	strb	r2, [r3, #24]
      break;
 8013954:	e195      	b.n	8013c82 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	795b      	ldrb	r3, [r3, #5]
 801395a:	4619      	mov	r1, r3
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f006 f901 	bl	8019b64 <USBH_LL_GetURBState>
 8013962:	4603      	mov	r3, r0
 8013964:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8013966:	7bbb      	ldrb	r3, [r7, #14]
 8013968:	2b01      	cmp	r3, #1
 801396a:	d124      	bne.n	80139b6 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	7c1b      	ldrb	r3, [r3, #16]
 8013970:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013974:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	8adb      	ldrh	r3, [r3, #22]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d00a      	beq.n	8013994 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801397e:	7b7b      	ldrb	r3, [r7, #13]
 8013980:	2b80      	cmp	r3, #128	@ 0x80
 8013982:	d103      	bne.n	801398c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2203      	movs	r2, #3
 8013988:	761a      	strb	r2, [r3, #24]
 801398a:	e00d      	b.n	80139a8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2205      	movs	r2, #5
 8013990:	761a      	strb	r2, [r3, #24]
 8013992:	e009      	b.n	80139a8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8013994:	7b7b      	ldrb	r3, [r7, #13]
 8013996:	2b80      	cmp	r3, #128	@ 0x80
 8013998:	d103      	bne.n	80139a2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	2209      	movs	r2, #9
 801399e:	761a      	strb	r2, [r3, #24]
 80139a0:	e002      	b.n	80139a8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2207      	movs	r2, #7
 80139a6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80139a8:	2300      	movs	r3, #0
 80139aa:	2200      	movs	r2, #0
 80139ac:	2103      	movs	r1, #3
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f7ff faa8 	bl	8012f04 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80139b4:	e15c      	b.n	8013c70 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80139b6:	7bbb      	ldrb	r3, [r7, #14]
 80139b8:	2b04      	cmp	r3, #4
 80139ba:	d003      	beq.n	80139c4 <USBH_HandleControl+0xd8>
 80139bc:	7bbb      	ldrb	r3, [r7, #14]
 80139be:	2b02      	cmp	r3, #2
 80139c0:	f040 8156 	bne.w	8013c70 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	220b      	movs	r2, #11
 80139c8:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80139ca:	2300      	movs	r3, #0
 80139cc:	2200      	movs	r2, #0
 80139ce:	2103      	movs	r1, #3
 80139d0:	6878      	ldr	r0, [r7, #4]
 80139d2:	f7ff fa97 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 80139d6:	e14b      	b.n	8013c70 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80139de:	b29a      	uxth	r2, r3
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6899      	ldr	r1, [r3, #8]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	899a      	ldrh	r2, [r3, #12]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	791b      	ldrb	r3, [r3, #4]
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f000 f98a 	bl	8013d0a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2204      	movs	r2, #4
 80139fa:	761a      	strb	r2, [r3, #24]
      break;
 80139fc:	e141      	b.n	8013c82 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	791b      	ldrb	r3, [r3, #4]
 8013a02:	4619      	mov	r1, r3
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f006 f8ad 	bl	8019b64 <USBH_LL_GetURBState>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8013a0e:	7bbb      	ldrb	r3, [r7, #14]
 8013a10:	2b01      	cmp	r3, #1
 8013a12:	d109      	bne.n	8013a28 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2209      	movs	r2, #9
 8013a18:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	2103      	movs	r1, #3
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f7ff fa6f 	bl	8012f04 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013a26:	e125      	b.n	8013c74 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 8013a28:	7bbb      	ldrb	r3, [r7, #14]
 8013a2a:	2b05      	cmp	r3, #5
 8013a2c:	d108      	bne.n	8013a40 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 8013a2e:	2303      	movs	r3, #3
 8013a30:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a32:	2300      	movs	r3, #0
 8013a34:	2200      	movs	r2, #0
 8013a36:	2103      	movs	r1, #3
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f7ff fa63 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8013a3e:	e119      	b.n	8013c74 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 8013a40:	7bbb      	ldrb	r3, [r7, #14]
 8013a42:	2b04      	cmp	r3, #4
 8013a44:	f040 8116 	bne.w	8013c74 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	220b      	movs	r2, #11
 8013a4c:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a4e:	2300      	movs	r3, #0
 8013a50:	2200      	movs	r2, #0
 8013a52:	2103      	movs	r1, #3
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f7ff fa55 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8013a5a:	e10b      	b.n	8013c74 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6899      	ldr	r1, [r3, #8]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	899a      	ldrh	r2, [r3, #12]
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	795b      	ldrb	r3, [r3, #5]
 8013a68:	2001      	movs	r0, #1
 8013a6a:	9000      	str	r0, [sp, #0]
 8013a6c:	6878      	ldr	r0, [r7, #4]
 8013a6e:	f000 f927 	bl	8013cc0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013a78:	b29a      	uxth	r2, r3
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2206      	movs	r2, #6
 8013a82:	761a      	strb	r2, [r3, #24]
      break;
 8013a84:	e0fd      	b.n	8013c82 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	795b      	ldrb	r3, [r3, #5]
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f006 f869 	bl	8019b64 <USBH_LL_GetURBState>
 8013a92:	4603      	mov	r3, r0
 8013a94:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013a96:	7bbb      	ldrb	r3, [r7, #14]
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d109      	bne.n	8013ab0 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2207      	movs	r2, #7
 8013aa0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	2103      	movs	r1, #3
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f7ff fa2b 	bl	8012f04 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013aae:	e0e3      	b.n	8013c78 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 8013ab0:	7bbb      	ldrb	r3, [r7, #14]
 8013ab2:	2b05      	cmp	r3, #5
 8013ab4:	d10b      	bne.n	8013ace <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	220c      	movs	r2, #12
 8013aba:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8013abc:	2303      	movs	r3, #3
 8013abe:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	2103      	movs	r1, #3
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f7ff fa1c 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8013acc:	e0d4      	b.n	8013c78 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013ace:	7bbb      	ldrb	r3, [r7, #14]
 8013ad0:	2b02      	cmp	r3, #2
 8013ad2:	d109      	bne.n	8013ae8 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2205      	movs	r2, #5
 8013ad8:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013ada:	2300      	movs	r3, #0
 8013adc:	2200      	movs	r2, #0
 8013ade:	2103      	movs	r1, #3
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7ff fa0f 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8013ae6:	e0c7      	b.n	8013c78 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 8013ae8:	7bbb      	ldrb	r3, [r7, #14]
 8013aea:	2b04      	cmp	r3, #4
 8013aec:	f040 80c4 	bne.w	8013c78 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	220b      	movs	r2, #11
 8013af4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8013af6:	2302      	movs	r3, #2
 8013af8:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013afa:	2300      	movs	r3, #0
 8013afc:	2200      	movs	r2, #0
 8013afe:	2103      	movs	r1, #3
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f7ff f9ff 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8013b06:	e0b7      	b.n	8013c78 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	791b      	ldrb	r3, [r3, #4]
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	2100      	movs	r1, #0
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f000 f8fa 	bl	8013d0a <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013b1c:	b29a      	uxth	r2, r3
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2208      	movs	r2, #8
 8013b26:	761a      	strb	r2, [r3, #24]

      break;
 8013b28:	e0ab      	b.n	8013c82 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	791b      	ldrb	r3, [r3, #4]
 8013b2e:	4619      	mov	r1, r3
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f006 f817 	bl	8019b64 <USBH_LL_GetURBState>
 8013b36:	4603      	mov	r3, r0
 8013b38:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013b3a:	7bbb      	ldrb	r3, [r7, #14]
 8013b3c:	2b01      	cmp	r3, #1
 8013b3e:	d10b      	bne.n	8013b58 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	220d      	movs	r2, #13
 8013b44:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8013b46:	2300      	movs	r3, #0
 8013b48:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	2103      	movs	r1, #3
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f7ff f9d7 	bl	8012f04 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013b56:	e091      	b.n	8013c7c <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 8013b58:	7bbb      	ldrb	r3, [r7, #14]
 8013b5a:	2b04      	cmp	r3, #4
 8013b5c:	d109      	bne.n	8013b72 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	220b      	movs	r2, #11
 8013b62:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b64:	2300      	movs	r3, #0
 8013b66:	2200      	movs	r2, #0
 8013b68:	2103      	movs	r1, #3
 8013b6a:	6878      	ldr	r0, [r7, #4]
 8013b6c:	f7ff f9ca 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8013b70:	e084      	b.n	8013c7c <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 8013b72:	7bbb      	ldrb	r3, [r7, #14]
 8013b74:	2b05      	cmp	r3, #5
 8013b76:	f040 8081 	bne.w	8013c7c <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 8013b7a:	2303      	movs	r3, #3
 8013b7c:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b7e:	2300      	movs	r3, #0
 8013b80:	2200      	movs	r2, #0
 8013b82:	2103      	movs	r1, #3
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f7ff f9bd 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8013b8a:	e077      	b.n	8013c7c <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	795b      	ldrb	r3, [r3, #5]
 8013b90:	2201      	movs	r2, #1
 8013b92:	9200      	str	r2, [sp, #0]
 8013b94:	2200      	movs	r2, #0
 8013b96:	2100      	movs	r1, #0
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f000 f891 	bl	8013cc0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013ba4:	b29a      	uxth	r2, r3
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	220a      	movs	r2, #10
 8013bae:	761a      	strb	r2, [r3, #24]
      break;
 8013bb0:	e067      	b.n	8013c82 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	795b      	ldrb	r3, [r3, #5]
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f005 ffd3 	bl	8019b64 <USBH_LL_GetURBState>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8013bc2:	7bbb      	ldrb	r3, [r7, #14]
 8013bc4:	2b01      	cmp	r3, #1
 8013bc6:	d10b      	bne.n	8013be0 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 8013bc8:	2300      	movs	r3, #0
 8013bca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	220d      	movs	r2, #13
 8013bd0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	2103      	movs	r1, #3
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f7ff f993 	bl	8012f04 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013bde:	e04f      	b.n	8013c80 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013be0:	7bbb      	ldrb	r3, [r7, #14]
 8013be2:	2b02      	cmp	r3, #2
 8013be4:	d109      	bne.n	8013bfa <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2209      	movs	r2, #9
 8013bea:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013bec:	2300      	movs	r3, #0
 8013bee:	2200      	movs	r2, #0
 8013bf0:	2103      	movs	r1, #3
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f7ff f986 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8013bf8:	e042      	b.n	8013c80 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 8013bfa:	7bbb      	ldrb	r3, [r7, #14]
 8013bfc:	2b04      	cmp	r3, #4
 8013bfe:	d13f      	bne.n	8013c80 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	220b      	movs	r2, #11
 8013c04:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013c06:	2300      	movs	r3, #0
 8013c08:	2200      	movs	r2, #0
 8013c0a:	2103      	movs	r1, #3
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f7ff f979 	bl	8012f04 <USBH_OS_PutMessage>
      break;
 8013c12:	e035      	b.n	8013c80 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	7e5b      	ldrb	r3, [r3, #25]
 8013c18:	3301      	adds	r3, #1
 8013c1a:	b2da      	uxtb	r2, r3
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	765a      	strb	r2, [r3, #25]
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	7e5b      	ldrb	r3, [r3, #25]
 8013c24:	2b02      	cmp	r3, #2
 8013c26:	d806      	bhi.n	8013c36 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	2201      	movs	r2, #1
 8013c2c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2201      	movs	r2, #1
 8013c32:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8013c34:	e025      	b.n	8013c82 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013c3c:	2106      	movs	r1, #6
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2200      	movs	r2, #0
 8013c46:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	795b      	ldrb	r3, [r3, #5]
 8013c4c:	4619      	mov	r1, r3
 8013c4e:	6878      	ldr	r0, [r7, #4]
 8013c50:	f000 f90c 	bl	8013e6c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	791b      	ldrb	r3, [r3, #4]
 8013c58:	4619      	mov	r1, r3
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f000 f906 	bl	8013e6c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2200      	movs	r2, #0
 8013c64:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8013c66:	2302      	movs	r3, #2
 8013c68:	73fb      	strb	r3, [r7, #15]
      break;
 8013c6a:	e00a      	b.n	8013c82 <USBH_HandleControl+0x396>

    default:
      break;
 8013c6c:	bf00      	nop
 8013c6e:	e008      	b.n	8013c82 <USBH_HandleControl+0x396>
      break;
 8013c70:	bf00      	nop
 8013c72:	e006      	b.n	8013c82 <USBH_HandleControl+0x396>
      break;
 8013c74:	bf00      	nop
 8013c76:	e004      	b.n	8013c82 <USBH_HandleControl+0x396>
      break;
 8013c78:	bf00      	nop
 8013c7a:	e002      	b.n	8013c82 <USBH_HandleControl+0x396>
      break;
 8013c7c:	bf00      	nop
 8013c7e:	e000      	b.n	8013c82 <USBH_HandleControl+0x396>
      break;
 8013c80:	bf00      	nop
  }

  return status;
 8013c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3710      	adds	r7, #16
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}

08013c8c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b088      	sub	sp, #32
 8013c90:	af04      	add	r7, sp, #16
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	60b9      	str	r1, [r7, #8]
 8013c96:	4613      	mov	r3, r2
 8013c98:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013c9a:	79f9      	ldrb	r1, [r7, #7]
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	9303      	str	r3, [sp, #12]
 8013ca0:	2308      	movs	r3, #8
 8013ca2:	9302      	str	r3, [sp, #8]
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	9301      	str	r3, [sp, #4]
 8013ca8:	2300      	movs	r3, #0
 8013caa:	9300      	str	r3, [sp, #0]
 8013cac:	2300      	movs	r3, #0
 8013cae:	2200      	movs	r2, #0
 8013cb0:	68f8      	ldr	r0, [r7, #12]
 8013cb2:	f005 ff26 	bl	8019b02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8013cb6:	2300      	movs	r3, #0
}
 8013cb8:	4618      	mov	r0, r3
 8013cba:	3710      	adds	r7, #16
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}

08013cc0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b088      	sub	sp, #32
 8013cc4:	af04      	add	r7, sp, #16
 8013cc6:	60f8      	str	r0, [r7, #12]
 8013cc8:	60b9      	str	r1, [r7, #8]
 8013cca:	4611      	mov	r1, r2
 8013ccc:	461a      	mov	r2, r3
 8013cce:	460b      	mov	r3, r1
 8013cd0:	80fb      	strh	r3, [r7, #6]
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d001      	beq.n	8013ce4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013ce4:	7979      	ldrb	r1, [r7, #5]
 8013ce6:	7e3b      	ldrb	r3, [r7, #24]
 8013ce8:	9303      	str	r3, [sp, #12]
 8013cea:	88fb      	ldrh	r3, [r7, #6]
 8013cec:	9302      	str	r3, [sp, #8]
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	9301      	str	r3, [sp, #4]
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	9300      	str	r3, [sp, #0]
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	68f8      	ldr	r0, [r7, #12]
 8013cfc:	f005 ff01 	bl	8019b02 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8013d00:	2300      	movs	r3, #0
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3710      	adds	r7, #16
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}

08013d0a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8013d0a:	b580      	push	{r7, lr}
 8013d0c:	b088      	sub	sp, #32
 8013d0e:	af04      	add	r7, sp, #16
 8013d10:	60f8      	str	r0, [r7, #12]
 8013d12:	60b9      	str	r1, [r7, #8]
 8013d14:	4611      	mov	r1, r2
 8013d16:	461a      	mov	r2, r3
 8013d18:	460b      	mov	r3, r1
 8013d1a:	80fb      	strh	r3, [r7, #6]
 8013d1c:	4613      	mov	r3, r2
 8013d1e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013d20:	7979      	ldrb	r1, [r7, #5]
 8013d22:	2300      	movs	r3, #0
 8013d24:	9303      	str	r3, [sp, #12]
 8013d26:	88fb      	ldrh	r3, [r7, #6]
 8013d28:	9302      	str	r3, [sp, #8]
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	9301      	str	r3, [sp, #4]
 8013d2e:	2301      	movs	r3, #1
 8013d30:	9300      	str	r3, [sp, #0]
 8013d32:	2300      	movs	r3, #0
 8013d34:	2201      	movs	r2, #1
 8013d36:	68f8      	ldr	r0, [r7, #12]
 8013d38:	f005 fee3 	bl	8019b02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8013d3c:	2300      	movs	r3, #0

}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3710      	adds	r7, #16
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}

08013d46 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8013d46:	b580      	push	{r7, lr}
 8013d48:	b088      	sub	sp, #32
 8013d4a:	af04      	add	r7, sp, #16
 8013d4c:	60f8      	str	r0, [r7, #12]
 8013d4e:	60b9      	str	r1, [r7, #8]
 8013d50:	4611      	mov	r1, r2
 8013d52:	461a      	mov	r2, r3
 8013d54:	460b      	mov	r3, r1
 8013d56:	80fb      	strh	r3, [r7, #6]
 8013d58:	4613      	mov	r3, r2
 8013d5a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d001      	beq.n	8013d6a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8013d66:	2300      	movs	r3, #0
 8013d68:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013d6a:	7979      	ldrb	r1, [r7, #5]
 8013d6c:	7e3b      	ldrb	r3, [r7, #24]
 8013d6e:	9303      	str	r3, [sp, #12]
 8013d70:	88fb      	ldrh	r3, [r7, #6]
 8013d72:	9302      	str	r3, [sp, #8]
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	9301      	str	r3, [sp, #4]
 8013d78:	2301      	movs	r3, #1
 8013d7a:	9300      	str	r3, [sp, #0]
 8013d7c:	2302      	movs	r3, #2
 8013d7e:	2200      	movs	r2, #0
 8013d80:	68f8      	ldr	r0, [r7, #12]
 8013d82:	f005 febe 	bl	8019b02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8013d86:	2300      	movs	r3, #0
}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3710      	adds	r7, #16
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}

08013d90 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b088      	sub	sp, #32
 8013d94:	af04      	add	r7, sp, #16
 8013d96:	60f8      	str	r0, [r7, #12]
 8013d98:	60b9      	str	r1, [r7, #8]
 8013d9a:	4611      	mov	r1, r2
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	460b      	mov	r3, r1
 8013da0:	80fb      	strh	r3, [r7, #6]
 8013da2:	4613      	mov	r3, r2
 8013da4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013da6:	7979      	ldrb	r1, [r7, #5]
 8013da8:	2300      	movs	r3, #0
 8013daa:	9303      	str	r3, [sp, #12]
 8013dac:	88fb      	ldrh	r3, [r7, #6]
 8013dae:	9302      	str	r3, [sp, #8]
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	9301      	str	r3, [sp, #4]
 8013db4:	2301      	movs	r3, #1
 8013db6:	9300      	str	r3, [sp, #0]
 8013db8:	2302      	movs	r3, #2
 8013dba:	2201      	movs	r2, #1
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	f005 fea0 	bl	8019b02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8013dc2:	2300      	movs	r3, #0
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3710      	adds	r7, #16
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b086      	sub	sp, #24
 8013dd0:	af04      	add	r7, sp, #16
 8013dd2:	6078      	str	r0, [r7, #4]
 8013dd4:	4608      	mov	r0, r1
 8013dd6:	4611      	mov	r1, r2
 8013dd8:	461a      	mov	r2, r3
 8013dda:	4603      	mov	r3, r0
 8013ddc:	70fb      	strb	r3, [r7, #3]
 8013dde:	460b      	mov	r3, r1
 8013de0:	70bb      	strb	r3, [r7, #2]
 8013de2:	4613      	mov	r3, r2
 8013de4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8013de6:	7878      	ldrb	r0, [r7, #1]
 8013de8:	78ba      	ldrb	r2, [r7, #2]
 8013dea:	78f9      	ldrb	r1, [r7, #3]
 8013dec:	8b3b      	ldrh	r3, [r7, #24]
 8013dee:	9302      	str	r3, [sp, #8]
 8013df0:	7d3b      	ldrb	r3, [r7, #20]
 8013df2:	9301      	str	r3, [sp, #4]
 8013df4:	7c3b      	ldrb	r3, [r7, #16]
 8013df6:	9300      	str	r3, [sp, #0]
 8013df8:	4603      	mov	r3, r0
 8013dfa:	6878      	ldr	r0, [r7, #4]
 8013dfc:	f005 fe33 	bl	8019a66 <USBH_LL_OpenPipe>

  return USBH_OK;
 8013e00:	2300      	movs	r3, #0
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	3708      	adds	r7, #8
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}

08013e0a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8013e0a:	b580      	push	{r7, lr}
 8013e0c:	b082      	sub	sp, #8
 8013e0e:	af00      	add	r7, sp, #0
 8013e10:	6078      	str	r0, [r7, #4]
 8013e12:	460b      	mov	r3, r1
 8013e14:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8013e16:	78fb      	ldrb	r3, [r7, #3]
 8013e18:	4619      	mov	r1, r3
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	f005 fe52 	bl	8019ac4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8013e20:	2300      	movs	r3, #0
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3708      	adds	r7, #8
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}

08013e2a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8013e2a:	b580      	push	{r7, lr}
 8013e2c:	b084      	sub	sp, #16
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	6078      	str	r0, [r7, #4]
 8013e32:	460b      	mov	r3, r1
 8013e34:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	f000 f836 	bl	8013ea8 <USBH_GetFreePipe>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8013e40:	89fb      	ldrh	r3, [r7, #14]
 8013e42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e46:	4293      	cmp	r3, r2
 8013e48:	d00a      	beq.n	8013e60 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8013e4a:	78fa      	ldrb	r2, [r7, #3]
 8013e4c:	89fb      	ldrh	r3, [r7, #14]
 8013e4e:	f003 030f 	and.w	r3, r3, #15
 8013e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013e56:	6879      	ldr	r1, [r7, #4]
 8013e58:	33e0      	adds	r3, #224	@ 0xe0
 8013e5a:	009b      	lsls	r3, r3, #2
 8013e5c:	440b      	add	r3, r1
 8013e5e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8013e60:	89fb      	ldrh	r3, [r7, #14]
 8013e62:	b2db      	uxtb	r3, r3
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	3710      	adds	r7, #16
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	b083      	sub	sp, #12
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	460b      	mov	r3, r1
 8013e76:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8013e78:	78fb      	ldrb	r3, [r7, #3]
 8013e7a:	2b0f      	cmp	r3, #15
 8013e7c:	d80d      	bhi.n	8013e9a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8013e7e:	78fb      	ldrb	r3, [r7, #3]
 8013e80:	687a      	ldr	r2, [r7, #4]
 8013e82:	33e0      	adds	r3, #224	@ 0xe0
 8013e84:	009b      	lsls	r3, r3, #2
 8013e86:	4413      	add	r3, r2
 8013e88:	685a      	ldr	r2, [r3, #4]
 8013e8a:	78fb      	ldrb	r3, [r7, #3]
 8013e8c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8013e90:	6879      	ldr	r1, [r7, #4]
 8013e92:	33e0      	adds	r3, #224	@ 0xe0
 8013e94:	009b      	lsls	r3, r3, #2
 8013e96:	440b      	add	r3, r1
 8013e98:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8013e9a:	2300      	movs	r3, #0
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	370c      	adds	r7, #12
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr

08013ea8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b085      	sub	sp, #20
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	73fb      	strb	r3, [r7, #15]
 8013eb8:	e00f      	b.n	8013eda <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8013eba:	7bfb      	ldrb	r3, [r7, #15]
 8013ebc:	687a      	ldr	r2, [r7, #4]
 8013ebe:	33e0      	adds	r3, #224	@ 0xe0
 8013ec0:	009b      	lsls	r3, r3, #2
 8013ec2:	4413      	add	r3, r2
 8013ec4:	685b      	ldr	r3, [r3, #4]
 8013ec6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d102      	bne.n	8013ed4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8013ece:	7bfb      	ldrb	r3, [r7, #15]
 8013ed0:	b29b      	uxth	r3, r3
 8013ed2:	e007      	b.n	8013ee4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8013ed4:	7bfb      	ldrb	r3, [r7, #15]
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	73fb      	strb	r3, [r7, #15]
 8013eda:	7bfb      	ldrb	r3, [r7, #15]
 8013edc:	2b0f      	cmp	r3, #15
 8013ede:	d9ec      	bls.n	8013eba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8013ee0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3714      	adds	r7, #20
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr

08013ef0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b084      	sub	sp, #16
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8013efa:	79fb      	ldrb	r3, [r7, #7]
 8013efc:	4a08      	ldr	r2, [pc, #32]	@ (8013f20 <disk_status+0x30>)
 8013efe:	009b      	lsls	r3, r3, #2
 8013f00:	4413      	add	r3, r2
 8013f02:	685b      	ldr	r3, [r3, #4]
 8013f04:	685b      	ldr	r3, [r3, #4]
 8013f06:	79fa      	ldrb	r2, [r7, #7]
 8013f08:	4905      	ldr	r1, [pc, #20]	@ (8013f20 <disk_status+0x30>)
 8013f0a:	440a      	add	r2, r1
 8013f0c:	7a12      	ldrb	r2, [r2, #8]
 8013f0e:	4610      	mov	r0, r2
 8013f10:	4798      	blx	r3
 8013f12:	4603      	mov	r3, r0
 8013f14:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3710      	adds	r7, #16
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	20001808 	.word	0x20001808

08013f24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b084      	sub	sp, #16
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8013f32:	79fb      	ldrb	r3, [r7, #7]
 8013f34:	4a0d      	ldr	r2, [pc, #52]	@ (8013f6c <disk_initialize+0x48>)
 8013f36:	5cd3      	ldrb	r3, [r2, r3]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d111      	bne.n	8013f60 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8013f3c:	79fb      	ldrb	r3, [r7, #7]
 8013f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8013f6c <disk_initialize+0x48>)
 8013f40:	2101      	movs	r1, #1
 8013f42:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013f44:	79fb      	ldrb	r3, [r7, #7]
 8013f46:	4a09      	ldr	r2, [pc, #36]	@ (8013f6c <disk_initialize+0x48>)
 8013f48:	009b      	lsls	r3, r3, #2
 8013f4a:	4413      	add	r3, r2
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	79fa      	ldrb	r2, [r7, #7]
 8013f52:	4906      	ldr	r1, [pc, #24]	@ (8013f6c <disk_initialize+0x48>)
 8013f54:	440a      	add	r2, r1
 8013f56:	7a12      	ldrb	r2, [r2, #8]
 8013f58:	4610      	mov	r0, r2
 8013f5a:	4798      	blx	r3
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8013f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3710      	adds	r7, #16
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop
 8013f6c:	20001808 	.word	0x20001808

08013f70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013f70:	b590      	push	{r4, r7, lr}
 8013f72:	b087      	sub	sp, #28
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	60b9      	str	r1, [r7, #8]
 8013f78:	607a      	str	r2, [r7, #4]
 8013f7a:	603b      	str	r3, [r7, #0]
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013f80:	7bfb      	ldrb	r3, [r7, #15]
 8013f82:	4a0a      	ldr	r2, [pc, #40]	@ (8013fac <disk_read+0x3c>)
 8013f84:	009b      	lsls	r3, r3, #2
 8013f86:	4413      	add	r3, r2
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	689c      	ldr	r4, [r3, #8]
 8013f8c:	7bfb      	ldrb	r3, [r7, #15]
 8013f8e:	4a07      	ldr	r2, [pc, #28]	@ (8013fac <disk_read+0x3c>)
 8013f90:	4413      	add	r3, r2
 8013f92:	7a18      	ldrb	r0, [r3, #8]
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	687a      	ldr	r2, [r7, #4]
 8013f98:	68b9      	ldr	r1, [r7, #8]
 8013f9a:	47a0      	blx	r4
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8013fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	371c      	adds	r7, #28
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bd90      	pop	{r4, r7, pc}
 8013faa:	bf00      	nop
 8013fac:	20001808 	.word	0x20001808

08013fb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013fb0:	b590      	push	{r4, r7, lr}
 8013fb2:	b087      	sub	sp, #28
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	60b9      	str	r1, [r7, #8]
 8013fb8:	607a      	str	r2, [r7, #4]
 8013fba:	603b      	str	r3, [r7, #0]
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013fc0:	7bfb      	ldrb	r3, [r7, #15]
 8013fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8013fec <disk_write+0x3c>)
 8013fc4:	009b      	lsls	r3, r3, #2
 8013fc6:	4413      	add	r3, r2
 8013fc8:	685b      	ldr	r3, [r3, #4]
 8013fca:	68dc      	ldr	r4, [r3, #12]
 8013fcc:	7bfb      	ldrb	r3, [r7, #15]
 8013fce:	4a07      	ldr	r2, [pc, #28]	@ (8013fec <disk_write+0x3c>)
 8013fd0:	4413      	add	r3, r2
 8013fd2:	7a18      	ldrb	r0, [r3, #8]
 8013fd4:	683b      	ldr	r3, [r7, #0]
 8013fd6:	687a      	ldr	r2, [r7, #4]
 8013fd8:	68b9      	ldr	r1, [r7, #8]
 8013fda:	47a0      	blx	r4
 8013fdc:	4603      	mov	r3, r0
 8013fde:	75fb      	strb	r3, [r7, #23]
  return res;
 8013fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	371c      	adds	r7, #28
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd90      	pop	{r4, r7, pc}
 8013fea:	bf00      	nop
 8013fec:	20001808 	.word	0x20001808

08013ff0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b084      	sub	sp, #16
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	603a      	str	r2, [r7, #0]
 8013ffa:	71fb      	strb	r3, [r7, #7]
 8013ffc:	460b      	mov	r3, r1
 8013ffe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014000:	79fb      	ldrb	r3, [r7, #7]
 8014002:	4a09      	ldr	r2, [pc, #36]	@ (8014028 <disk_ioctl+0x38>)
 8014004:	009b      	lsls	r3, r3, #2
 8014006:	4413      	add	r3, r2
 8014008:	685b      	ldr	r3, [r3, #4]
 801400a:	691b      	ldr	r3, [r3, #16]
 801400c:	79fa      	ldrb	r2, [r7, #7]
 801400e:	4906      	ldr	r1, [pc, #24]	@ (8014028 <disk_ioctl+0x38>)
 8014010:	440a      	add	r2, r1
 8014012:	7a10      	ldrb	r0, [r2, #8]
 8014014:	79b9      	ldrb	r1, [r7, #6]
 8014016:	683a      	ldr	r2, [r7, #0]
 8014018:	4798      	blx	r3
 801401a:	4603      	mov	r3, r0
 801401c:	73fb      	strb	r3, [r7, #15]
  return res;
 801401e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014020:	4618      	mov	r0, r3
 8014022:	3710      	adds	r7, #16
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}
 8014028:	20001808 	.word	0x20001808

0801402c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801402c:	b480      	push	{r7}
 801402e:	b085      	sub	sp, #20
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	3301      	adds	r3, #1
 8014038:	781b      	ldrb	r3, [r3, #0]
 801403a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801403c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014040:	021b      	lsls	r3, r3, #8
 8014042:	b21a      	sxth	r2, r3
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	b21b      	sxth	r3, r3
 801404a:	4313      	orrs	r3, r2
 801404c:	b21b      	sxth	r3, r3
 801404e:	81fb      	strh	r3, [r7, #14]
	return rv;
 8014050:	89fb      	ldrh	r3, [r7, #14]
}
 8014052:	4618      	mov	r0, r3
 8014054:	3714      	adds	r7, #20
 8014056:	46bd      	mov	sp, r7
 8014058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405c:	4770      	bx	lr

0801405e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801405e:	b480      	push	{r7}
 8014060:	b085      	sub	sp, #20
 8014062:	af00      	add	r7, sp, #0
 8014064:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	3303      	adds	r3, #3
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	021b      	lsls	r3, r3, #8
 8014072:	687a      	ldr	r2, [r7, #4]
 8014074:	3202      	adds	r2, #2
 8014076:	7812      	ldrb	r2, [r2, #0]
 8014078:	4313      	orrs	r3, r2
 801407a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	021b      	lsls	r3, r3, #8
 8014080:	687a      	ldr	r2, [r7, #4]
 8014082:	3201      	adds	r2, #1
 8014084:	7812      	ldrb	r2, [r2, #0]
 8014086:	4313      	orrs	r3, r2
 8014088:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	021b      	lsls	r3, r3, #8
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	7812      	ldrb	r2, [r2, #0]
 8014092:	4313      	orrs	r3, r2
 8014094:	60fb      	str	r3, [r7, #12]
	return rv;
 8014096:	68fb      	ldr	r3, [r7, #12]
}
 8014098:	4618      	mov	r0, r3
 801409a:	3714      	adds	r7, #20
 801409c:	46bd      	mov	sp, r7
 801409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a2:	4770      	bx	lr

080140a4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80140a4:	b480      	push	{r7}
 80140a6:	b083      	sub	sp, #12
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	460b      	mov	r3, r1
 80140ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	1c5a      	adds	r2, r3, #1
 80140b4:	607a      	str	r2, [r7, #4]
 80140b6:	887a      	ldrh	r2, [r7, #2]
 80140b8:	b2d2      	uxtb	r2, r2
 80140ba:	701a      	strb	r2, [r3, #0]
 80140bc:	887b      	ldrh	r3, [r7, #2]
 80140be:	0a1b      	lsrs	r3, r3, #8
 80140c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	1c5a      	adds	r2, r3, #1
 80140c6:	607a      	str	r2, [r7, #4]
 80140c8:	887a      	ldrh	r2, [r7, #2]
 80140ca:	b2d2      	uxtb	r2, r2
 80140cc:	701a      	strb	r2, [r3, #0]
}
 80140ce:	bf00      	nop
 80140d0:	370c      	adds	r7, #12
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr

080140da <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80140da:	b480      	push	{r7}
 80140dc:	b083      	sub	sp, #12
 80140de:	af00      	add	r7, sp, #0
 80140e0:	6078      	str	r0, [r7, #4]
 80140e2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	1c5a      	adds	r2, r3, #1
 80140e8:	607a      	str	r2, [r7, #4]
 80140ea:	683a      	ldr	r2, [r7, #0]
 80140ec:	b2d2      	uxtb	r2, r2
 80140ee:	701a      	strb	r2, [r3, #0]
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	0a1b      	lsrs	r3, r3, #8
 80140f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	1c5a      	adds	r2, r3, #1
 80140fa:	607a      	str	r2, [r7, #4]
 80140fc:	683a      	ldr	r2, [r7, #0]
 80140fe:	b2d2      	uxtb	r2, r2
 8014100:	701a      	strb	r2, [r3, #0]
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	0a1b      	lsrs	r3, r3, #8
 8014106:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	1c5a      	adds	r2, r3, #1
 801410c:	607a      	str	r2, [r7, #4]
 801410e:	683a      	ldr	r2, [r7, #0]
 8014110:	b2d2      	uxtb	r2, r2
 8014112:	701a      	strb	r2, [r3, #0]
 8014114:	683b      	ldr	r3, [r7, #0]
 8014116:	0a1b      	lsrs	r3, r3, #8
 8014118:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	1c5a      	adds	r2, r3, #1
 801411e:	607a      	str	r2, [r7, #4]
 8014120:	683a      	ldr	r2, [r7, #0]
 8014122:	b2d2      	uxtb	r2, r2
 8014124:	701a      	strb	r2, [r3, #0]
}
 8014126:	bf00      	nop
 8014128:	370c      	adds	r7, #12
 801412a:	46bd      	mov	sp, r7
 801412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014130:	4770      	bx	lr

08014132 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014132:	b480      	push	{r7}
 8014134:	b087      	sub	sp, #28
 8014136:	af00      	add	r7, sp, #0
 8014138:	60f8      	str	r0, [r7, #12]
 801413a:	60b9      	str	r1, [r7, #8]
 801413c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d00d      	beq.n	8014168 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801414c:	693a      	ldr	r2, [r7, #16]
 801414e:	1c53      	adds	r3, r2, #1
 8014150:	613b      	str	r3, [r7, #16]
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	1c59      	adds	r1, r3, #1
 8014156:	6179      	str	r1, [r7, #20]
 8014158:	7812      	ldrb	r2, [r2, #0]
 801415a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	3b01      	subs	r3, #1
 8014160:	607b      	str	r3, [r7, #4]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d1f1      	bne.n	801414c <mem_cpy+0x1a>
	}
}
 8014168:	bf00      	nop
 801416a:	371c      	adds	r7, #28
 801416c:	46bd      	mov	sp, r7
 801416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014172:	4770      	bx	lr

08014174 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014174:	b480      	push	{r7}
 8014176:	b087      	sub	sp, #28
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	1c5a      	adds	r2, r3, #1
 8014188:	617a      	str	r2, [r7, #20]
 801418a:	68ba      	ldr	r2, [r7, #8]
 801418c:	b2d2      	uxtb	r2, r2
 801418e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	3b01      	subs	r3, #1
 8014194:	607b      	str	r3, [r7, #4]
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d1f3      	bne.n	8014184 <mem_set+0x10>
}
 801419c:	bf00      	nop
 801419e:	bf00      	nop
 80141a0:	371c      	adds	r7, #28
 80141a2:	46bd      	mov	sp, r7
 80141a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a8:	4770      	bx	lr

080141aa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80141aa:	b480      	push	{r7}
 80141ac:	b089      	sub	sp, #36	@ 0x24
 80141ae:	af00      	add	r7, sp, #0
 80141b0:	60f8      	str	r0, [r7, #12]
 80141b2:	60b9      	str	r1, [r7, #8]
 80141b4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	61fb      	str	r3, [r7, #28]
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80141be:	2300      	movs	r3, #0
 80141c0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80141c2:	69fb      	ldr	r3, [r7, #28]
 80141c4:	1c5a      	adds	r2, r3, #1
 80141c6:	61fa      	str	r2, [r7, #28]
 80141c8:	781b      	ldrb	r3, [r3, #0]
 80141ca:	4619      	mov	r1, r3
 80141cc:	69bb      	ldr	r3, [r7, #24]
 80141ce:	1c5a      	adds	r2, r3, #1
 80141d0:	61ba      	str	r2, [r7, #24]
 80141d2:	781b      	ldrb	r3, [r3, #0]
 80141d4:	1acb      	subs	r3, r1, r3
 80141d6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	3b01      	subs	r3, #1
 80141dc:	607b      	str	r3, [r7, #4]
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d002      	beq.n	80141ea <mem_cmp+0x40>
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d0eb      	beq.n	80141c2 <mem_cmp+0x18>

	return r;
 80141ea:	697b      	ldr	r3, [r7, #20]
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3724      	adds	r7, #36	@ 0x24
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr

080141f8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80141f8:	b480      	push	{r7}
 80141fa:	b083      	sub	sp, #12
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014202:	e002      	b.n	801420a <chk_chr+0x12>
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	3301      	adds	r3, #1
 8014208:	607b      	str	r3, [r7, #4]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d005      	beq.n	801421e <chk_chr+0x26>
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	781b      	ldrb	r3, [r3, #0]
 8014216:	461a      	mov	r2, r3
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	4293      	cmp	r3, r2
 801421c:	d1f2      	bne.n	8014204 <chk_chr+0xc>
	return *str;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	781b      	ldrb	r3, [r3, #0]
}
 8014222:	4618      	mov	r0, r3
 8014224:	370c      	adds	r7, #12
 8014226:	46bd      	mov	sp, r7
 8014228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422c:	4770      	bx	lr

0801422e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801422e:	b580      	push	{r7, lr}
 8014230:	b082      	sub	sp, #8
 8014232:	af00      	add	r7, sp, #0
 8014234:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d009      	beq.n	8014250 <lock_fs+0x22>
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	68db      	ldr	r3, [r3, #12]
 8014240:	4618      	mov	r0, r3
 8014242:	f002 f9f2 	bl	801662a <ff_req_grant>
 8014246:	4603      	mov	r3, r0
 8014248:	2b00      	cmp	r3, #0
 801424a:	d001      	beq.n	8014250 <lock_fs+0x22>
 801424c:	2301      	movs	r3, #1
 801424e:	e000      	b.n	8014252 <lock_fs+0x24>
 8014250:	2300      	movs	r3, #0
}
 8014252:	4618      	mov	r0, r3
 8014254:	3708      	adds	r7, #8
 8014256:	46bd      	mov	sp, r7
 8014258:	bd80      	pop	{r7, pc}

0801425a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801425a:	b580      	push	{r7, lr}
 801425c:	b082      	sub	sp, #8
 801425e:	af00      	add	r7, sp, #0
 8014260:	6078      	str	r0, [r7, #4]
 8014262:	460b      	mov	r3, r1
 8014264:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d00d      	beq.n	8014288 <unlock_fs+0x2e>
 801426c:	78fb      	ldrb	r3, [r7, #3]
 801426e:	2b0c      	cmp	r3, #12
 8014270:	d00a      	beq.n	8014288 <unlock_fs+0x2e>
 8014272:	78fb      	ldrb	r3, [r7, #3]
 8014274:	2b0b      	cmp	r3, #11
 8014276:	d007      	beq.n	8014288 <unlock_fs+0x2e>
 8014278:	78fb      	ldrb	r3, [r7, #3]
 801427a:	2b0f      	cmp	r3, #15
 801427c:	d004      	beq.n	8014288 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	68db      	ldr	r3, [r3, #12]
 8014282:	4618      	mov	r0, r3
 8014284:	f002 f9e6 	bl	8016654 <ff_rel_grant>
	}
}
 8014288:	bf00      	nop
 801428a:	3708      	adds	r7, #8
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}

08014290 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014290:	b480      	push	{r7}
 8014292:	b085      	sub	sp, #20
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801429a:	2300      	movs	r3, #0
 801429c:	60bb      	str	r3, [r7, #8]
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	60fb      	str	r3, [r7, #12]
 80142a2:	e029      	b.n	80142f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80142a4:	4a27      	ldr	r2, [pc, #156]	@ (8014344 <chk_lock+0xb4>)
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	011b      	lsls	r3, r3, #4
 80142aa:	4413      	add	r3, r2
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d01d      	beq.n	80142ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80142b2:	4a24      	ldr	r2, [pc, #144]	@ (8014344 <chk_lock+0xb4>)
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	011b      	lsls	r3, r3, #4
 80142b8:	4413      	add	r3, r2
 80142ba:	681a      	ldr	r2, [r3, #0]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d116      	bne.n	80142f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80142c4:	4a1f      	ldr	r2, [pc, #124]	@ (8014344 <chk_lock+0xb4>)
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	011b      	lsls	r3, r3, #4
 80142ca:	4413      	add	r3, r2
 80142cc:	3304      	adds	r3, #4
 80142ce:	681a      	ldr	r2, [r3, #0]
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80142d4:	429a      	cmp	r2, r3
 80142d6:	d10c      	bne.n	80142f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80142d8:	4a1a      	ldr	r2, [pc, #104]	@ (8014344 <chk_lock+0xb4>)
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	011b      	lsls	r3, r3, #4
 80142de:	4413      	add	r3, r2
 80142e0:	3308      	adds	r3, #8
 80142e2:	681a      	ldr	r2, [r3, #0]
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d102      	bne.n	80142f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80142ec:	e007      	b.n	80142fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80142ee:	2301      	movs	r3, #1
 80142f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	3301      	adds	r3, #1
 80142f6:	60fb      	str	r3, [r7, #12]
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	2b01      	cmp	r3, #1
 80142fc:	d9d2      	bls.n	80142a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	2b02      	cmp	r3, #2
 8014302:	d109      	bne.n	8014318 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d102      	bne.n	8014310 <chk_lock+0x80>
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	2b02      	cmp	r3, #2
 801430e:	d101      	bne.n	8014314 <chk_lock+0x84>
 8014310:	2300      	movs	r3, #0
 8014312:	e010      	b.n	8014336 <chk_lock+0xa6>
 8014314:	2312      	movs	r3, #18
 8014316:	e00e      	b.n	8014336 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d108      	bne.n	8014330 <chk_lock+0xa0>
 801431e:	4a09      	ldr	r2, [pc, #36]	@ (8014344 <chk_lock+0xb4>)
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	011b      	lsls	r3, r3, #4
 8014324:	4413      	add	r3, r2
 8014326:	330c      	adds	r3, #12
 8014328:	881b      	ldrh	r3, [r3, #0]
 801432a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801432e:	d101      	bne.n	8014334 <chk_lock+0xa4>
 8014330:	2310      	movs	r3, #16
 8014332:	e000      	b.n	8014336 <chk_lock+0xa6>
 8014334:	2300      	movs	r3, #0
}
 8014336:	4618      	mov	r0, r3
 8014338:	3714      	adds	r7, #20
 801433a:	46bd      	mov	sp, r7
 801433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014340:	4770      	bx	lr
 8014342:	bf00      	nop
 8014344:	200017e8 	.word	0x200017e8

08014348 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8014348:	b480      	push	{r7}
 801434a:	b083      	sub	sp, #12
 801434c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801434e:	2300      	movs	r3, #0
 8014350:	607b      	str	r3, [r7, #4]
 8014352:	e002      	b.n	801435a <enq_lock+0x12>
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	3301      	adds	r3, #1
 8014358:	607b      	str	r3, [r7, #4]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2b01      	cmp	r3, #1
 801435e:	d806      	bhi.n	801436e <enq_lock+0x26>
 8014360:	4a09      	ldr	r2, [pc, #36]	@ (8014388 <enq_lock+0x40>)
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	011b      	lsls	r3, r3, #4
 8014366:	4413      	add	r3, r2
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d1f2      	bne.n	8014354 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	2b02      	cmp	r3, #2
 8014372:	bf14      	ite	ne
 8014374:	2301      	movne	r3, #1
 8014376:	2300      	moveq	r3, #0
 8014378:	b2db      	uxtb	r3, r3
}
 801437a:	4618      	mov	r0, r3
 801437c:	370c      	adds	r7, #12
 801437e:	46bd      	mov	sp, r7
 8014380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014384:	4770      	bx	lr
 8014386:	bf00      	nop
 8014388:	200017e8 	.word	0x200017e8

0801438c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801438c:	b480      	push	{r7}
 801438e:	b085      	sub	sp, #20
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
 8014394:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014396:	2300      	movs	r3, #0
 8014398:	60fb      	str	r3, [r7, #12]
 801439a:	e01f      	b.n	80143dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801439c:	4a41      	ldr	r2, [pc, #260]	@ (80144a4 <inc_lock+0x118>)
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	011b      	lsls	r3, r3, #4
 80143a2:	4413      	add	r3, r2
 80143a4:	681a      	ldr	r2, [r3, #0]
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d113      	bne.n	80143d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80143ae:	4a3d      	ldr	r2, [pc, #244]	@ (80144a4 <inc_lock+0x118>)
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	011b      	lsls	r3, r3, #4
 80143b4:	4413      	add	r3, r2
 80143b6:	3304      	adds	r3, #4
 80143b8:	681a      	ldr	r2, [r3, #0]
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80143be:	429a      	cmp	r2, r3
 80143c0:	d109      	bne.n	80143d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80143c2:	4a38      	ldr	r2, [pc, #224]	@ (80144a4 <inc_lock+0x118>)
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	011b      	lsls	r3, r3, #4
 80143c8:	4413      	add	r3, r2
 80143ca:	3308      	adds	r3, #8
 80143cc:	681a      	ldr	r2, [r3, #0]
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d006      	beq.n	80143e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	3301      	adds	r3, #1
 80143da:	60fb      	str	r3, [r7, #12]
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	2b01      	cmp	r3, #1
 80143e0:	d9dc      	bls.n	801439c <inc_lock+0x10>
 80143e2:	e000      	b.n	80143e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80143e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	2b02      	cmp	r3, #2
 80143ea:	d132      	bne.n	8014452 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80143ec:	2300      	movs	r3, #0
 80143ee:	60fb      	str	r3, [r7, #12]
 80143f0:	e002      	b.n	80143f8 <inc_lock+0x6c>
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	3301      	adds	r3, #1
 80143f6:	60fb      	str	r3, [r7, #12]
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2b01      	cmp	r3, #1
 80143fc:	d806      	bhi.n	801440c <inc_lock+0x80>
 80143fe:	4a29      	ldr	r2, [pc, #164]	@ (80144a4 <inc_lock+0x118>)
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	011b      	lsls	r3, r3, #4
 8014404:	4413      	add	r3, r2
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d1f2      	bne.n	80143f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	2b02      	cmp	r3, #2
 8014410:	d101      	bne.n	8014416 <inc_lock+0x8a>
 8014412:	2300      	movs	r3, #0
 8014414:	e040      	b.n	8014498 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681a      	ldr	r2, [r3, #0]
 801441a:	4922      	ldr	r1, [pc, #136]	@ (80144a4 <inc_lock+0x118>)
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	011b      	lsls	r3, r3, #4
 8014420:	440b      	add	r3, r1
 8014422:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	689a      	ldr	r2, [r3, #8]
 8014428:	491e      	ldr	r1, [pc, #120]	@ (80144a4 <inc_lock+0x118>)
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	011b      	lsls	r3, r3, #4
 801442e:	440b      	add	r3, r1
 8014430:	3304      	adds	r3, #4
 8014432:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	695a      	ldr	r2, [r3, #20]
 8014438:	491a      	ldr	r1, [pc, #104]	@ (80144a4 <inc_lock+0x118>)
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	011b      	lsls	r3, r3, #4
 801443e:	440b      	add	r3, r1
 8014440:	3308      	adds	r3, #8
 8014442:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8014444:	4a17      	ldr	r2, [pc, #92]	@ (80144a4 <inc_lock+0x118>)
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	011b      	lsls	r3, r3, #4
 801444a:	4413      	add	r3, r2
 801444c:	330c      	adds	r3, #12
 801444e:	2200      	movs	r2, #0
 8014450:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014452:	683b      	ldr	r3, [r7, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d009      	beq.n	801446c <inc_lock+0xe0>
 8014458:	4a12      	ldr	r2, [pc, #72]	@ (80144a4 <inc_lock+0x118>)
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	011b      	lsls	r3, r3, #4
 801445e:	4413      	add	r3, r2
 8014460:	330c      	adds	r3, #12
 8014462:	881b      	ldrh	r3, [r3, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d001      	beq.n	801446c <inc_lock+0xe0>
 8014468:	2300      	movs	r3, #0
 801446a:	e015      	b.n	8014498 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d108      	bne.n	8014484 <inc_lock+0xf8>
 8014472:	4a0c      	ldr	r2, [pc, #48]	@ (80144a4 <inc_lock+0x118>)
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	011b      	lsls	r3, r3, #4
 8014478:	4413      	add	r3, r2
 801447a:	330c      	adds	r3, #12
 801447c:	881b      	ldrh	r3, [r3, #0]
 801447e:	3301      	adds	r3, #1
 8014480:	b29a      	uxth	r2, r3
 8014482:	e001      	b.n	8014488 <inc_lock+0xfc>
 8014484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014488:	4906      	ldr	r1, [pc, #24]	@ (80144a4 <inc_lock+0x118>)
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	011b      	lsls	r3, r3, #4
 801448e:	440b      	add	r3, r1
 8014490:	330c      	adds	r3, #12
 8014492:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	3301      	adds	r3, #1
}
 8014498:	4618      	mov	r0, r3
 801449a:	3714      	adds	r7, #20
 801449c:	46bd      	mov	sp, r7
 801449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a2:	4770      	bx	lr
 80144a4:	200017e8 	.word	0x200017e8

080144a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80144a8:	b480      	push	{r7}
 80144aa:	b085      	sub	sp, #20
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	3b01      	subs	r3, #1
 80144b4:	607b      	str	r3, [r7, #4]
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	d825      	bhi.n	8014508 <dec_lock+0x60>
		n = Files[i].ctr;
 80144bc:	4a17      	ldr	r2, [pc, #92]	@ (801451c <dec_lock+0x74>)
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	011b      	lsls	r3, r3, #4
 80144c2:	4413      	add	r3, r2
 80144c4:	330c      	adds	r3, #12
 80144c6:	881b      	ldrh	r3, [r3, #0]
 80144c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80144ca:	89fb      	ldrh	r3, [r7, #14]
 80144cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80144d0:	d101      	bne.n	80144d6 <dec_lock+0x2e>
 80144d2:	2300      	movs	r3, #0
 80144d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80144d6:	89fb      	ldrh	r3, [r7, #14]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d002      	beq.n	80144e2 <dec_lock+0x3a>
 80144dc:	89fb      	ldrh	r3, [r7, #14]
 80144de:	3b01      	subs	r3, #1
 80144e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80144e2:	4a0e      	ldr	r2, [pc, #56]	@ (801451c <dec_lock+0x74>)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	011b      	lsls	r3, r3, #4
 80144e8:	4413      	add	r3, r2
 80144ea:	330c      	adds	r3, #12
 80144ec:	89fa      	ldrh	r2, [r7, #14]
 80144ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80144f0:	89fb      	ldrh	r3, [r7, #14]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d105      	bne.n	8014502 <dec_lock+0x5a>
 80144f6:	4a09      	ldr	r2, [pc, #36]	@ (801451c <dec_lock+0x74>)
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	011b      	lsls	r3, r3, #4
 80144fc:	4413      	add	r3, r2
 80144fe:	2200      	movs	r2, #0
 8014500:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8014502:	2300      	movs	r3, #0
 8014504:	737b      	strb	r3, [r7, #13]
 8014506:	e001      	b.n	801450c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8014508:	2302      	movs	r3, #2
 801450a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801450c:	7b7b      	ldrb	r3, [r7, #13]
}
 801450e:	4618      	mov	r0, r3
 8014510:	3714      	adds	r7, #20
 8014512:	46bd      	mov	sp, r7
 8014514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014518:	4770      	bx	lr
 801451a:	bf00      	nop
 801451c:	200017e8 	.word	0x200017e8

08014520 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8014520:	b480      	push	{r7}
 8014522:	b085      	sub	sp, #20
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8014528:	2300      	movs	r3, #0
 801452a:	60fb      	str	r3, [r7, #12]
 801452c:	e010      	b.n	8014550 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801452e:	4a0d      	ldr	r2, [pc, #52]	@ (8014564 <clear_lock+0x44>)
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	011b      	lsls	r3, r3, #4
 8014534:	4413      	add	r3, r2
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	687a      	ldr	r2, [r7, #4]
 801453a:	429a      	cmp	r2, r3
 801453c:	d105      	bne.n	801454a <clear_lock+0x2a>
 801453e:	4a09      	ldr	r2, [pc, #36]	@ (8014564 <clear_lock+0x44>)
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	011b      	lsls	r3, r3, #4
 8014544:	4413      	add	r3, r2
 8014546:	2200      	movs	r2, #0
 8014548:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	3301      	adds	r3, #1
 801454e:	60fb      	str	r3, [r7, #12]
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2b01      	cmp	r3, #1
 8014554:	d9eb      	bls.n	801452e <clear_lock+0xe>
	}
}
 8014556:	bf00      	nop
 8014558:	bf00      	nop
 801455a:	3714      	adds	r7, #20
 801455c:	46bd      	mov	sp, r7
 801455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014562:	4770      	bx	lr
 8014564:	200017e8 	.word	0x200017e8

08014568 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b086      	sub	sp, #24
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8014570:	2300      	movs	r3, #0
 8014572:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	78db      	ldrb	r3, [r3, #3]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d034      	beq.n	80145e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014580:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	7858      	ldrb	r0, [r3, #1]
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801458c:	2301      	movs	r3, #1
 801458e:	697a      	ldr	r2, [r7, #20]
 8014590:	f7ff fd0e 	bl	8013fb0 <disk_write>
 8014594:	4603      	mov	r3, r0
 8014596:	2b00      	cmp	r3, #0
 8014598:	d002      	beq.n	80145a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 801459a:	2301      	movs	r3, #1
 801459c:	73fb      	strb	r3, [r7, #15]
 801459e:	e022      	b.n	80145e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2200      	movs	r2, #0
 80145a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145aa:	697a      	ldr	r2, [r7, #20]
 80145ac:	1ad2      	subs	r2, r2, r3
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	69db      	ldr	r3, [r3, #28]
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d217      	bcs.n	80145e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	789b      	ldrb	r3, [r3, #2]
 80145ba:	613b      	str	r3, [r7, #16]
 80145bc:	e010      	b.n	80145e0 <sync_window+0x78>
					wsect += fs->fsize;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	69db      	ldr	r3, [r3, #28]
 80145c2:	697a      	ldr	r2, [r7, #20]
 80145c4:	4413      	add	r3, r2
 80145c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	7858      	ldrb	r0, [r3, #1]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80145d2:	2301      	movs	r3, #1
 80145d4:	697a      	ldr	r2, [r7, #20]
 80145d6:	f7ff fceb 	bl	8013fb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	3b01      	subs	r3, #1
 80145de:	613b      	str	r3, [r7, #16]
 80145e0:	693b      	ldr	r3, [r7, #16]
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d8eb      	bhi.n	80145be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80145e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80145e8:	4618      	mov	r0, r3
 80145ea:	3718      	adds	r7, #24
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}

080145f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b084      	sub	sp, #16
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
 80145f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80145fa:	2300      	movs	r3, #0
 80145fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014602:	683a      	ldr	r2, [r7, #0]
 8014604:	429a      	cmp	r2, r3
 8014606:	d01b      	beq.n	8014640 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f7ff ffad 	bl	8014568 <sync_window>
 801460e:	4603      	mov	r3, r0
 8014610:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014612:	7bfb      	ldrb	r3, [r7, #15]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d113      	bne.n	8014640 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	7858      	ldrb	r0, [r3, #1]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8014622:	2301      	movs	r3, #1
 8014624:	683a      	ldr	r2, [r7, #0]
 8014626:	f7ff fca3 	bl	8013f70 <disk_read>
 801462a:	4603      	mov	r3, r0
 801462c:	2b00      	cmp	r3, #0
 801462e:	d004      	beq.n	801463a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8014630:	f04f 33ff 	mov.w	r3, #4294967295
 8014634:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014636:	2301      	movs	r3, #1
 8014638:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	683a      	ldr	r2, [r7, #0]
 801463e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8014640:	7bfb      	ldrb	r3, [r7, #15]
}
 8014642:	4618      	mov	r0, r3
 8014644:	3710      	adds	r7, #16
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
	...

0801464c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b084      	sub	sp, #16
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f7ff ff87 	bl	8014568 <sync_window>
 801465a:	4603      	mov	r3, r0
 801465c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801465e:	7bfb      	ldrb	r3, [r7, #15]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d158      	bne.n	8014716 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	781b      	ldrb	r3, [r3, #0]
 8014668:	2b03      	cmp	r3, #3
 801466a:	d148      	bne.n	80146fe <sync_fs+0xb2>
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	791b      	ldrb	r3, [r3, #4]
 8014670:	2b01      	cmp	r3, #1
 8014672:	d144      	bne.n	80146fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	3334      	adds	r3, #52	@ 0x34
 8014678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801467c:	2100      	movs	r1, #0
 801467e:	4618      	mov	r0, r3
 8014680:	f7ff fd78 	bl	8014174 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	3334      	adds	r3, #52	@ 0x34
 8014688:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801468c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014690:	4618      	mov	r0, r3
 8014692:	f7ff fd07 	bl	80140a4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	3334      	adds	r3, #52	@ 0x34
 801469a:	4921      	ldr	r1, [pc, #132]	@ (8014720 <sync_fs+0xd4>)
 801469c:	4618      	mov	r0, r3
 801469e:	f7ff fd1c 	bl	80140da <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	3334      	adds	r3, #52	@ 0x34
 80146a6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80146aa:	491e      	ldr	r1, [pc, #120]	@ (8014724 <sync_fs+0xd8>)
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7ff fd14 	bl	80140da <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	3334      	adds	r3, #52	@ 0x34
 80146b6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	695b      	ldr	r3, [r3, #20]
 80146be:	4619      	mov	r1, r3
 80146c0:	4610      	mov	r0, r2
 80146c2:	f7ff fd0a 	bl	80140da <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	3334      	adds	r3, #52	@ 0x34
 80146ca:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	691b      	ldr	r3, [r3, #16]
 80146d2:	4619      	mov	r1, r3
 80146d4:	4610      	mov	r0, r2
 80146d6:	f7ff fd00 	bl	80140da <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	6a1b      	ldr	r3, [r3, #32]
 80146de:	1c5a      	adds	r2, r3, #1
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	7858      	ldrb	r0, [r3, #1]
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80146f2:	2301      	movs	r3, #1
 80146f4:	f7ff fc5c 	bl	8013fb0 <disk_write>
			fs->fsi_flag = 0;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2200      	movs	r2, #0
 80146fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	785b      	ldrb	r3, [r3, #1]
 8014702:	2200      	movs	r2, #0
 8014704:	2100      	movs	r1, #0
 8014706:	4618      	mov	r0, r3
 8014708:	f7ff fc72 	bl	8013ff0 <disk_ioctl>
 801470c:	4603      	mov	r3, r0
 801470e:	2b00      	cmp	r3, #0
 8014710:	d001      	beq.n	8014716 <sync_fs+0xca>
 8014712:	2301      	movs	r3, #1
 8014714:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014716:	7bfb      	ldrb	r3, [r7, #15]
}
 8014718:	4618      	mov	r0, r3
 801471a:	3710      	adds	r7, #16
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}
 8014720:	41615252 	.word	0x41615252
 8014724:	61417272 	.word	0x61417272

08014728 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014728:	b480      	push	{r7}
 801472a:	b083      	sub	sp, #12
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	3b02      	subs	r3, #2
 8014736:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	699b      	ldr	r3, [r3, #24]
 801473c:	3b02      	subs	r3, #2
 801473e:	683a      	ldr	r2, [r7, #0]
 8014740:	429a      	cmp	r2, r3
 8014742:	d301      	bcc.n	8014748 <clust2sect+0x20>
 8014744:	2300      	movs	r3, #0
 8014746:	e008      	b.n	801475a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	895b      	ldrh	r3, [r3, #10]
 801474c:	461a      	mov	r2, r3
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	fb03 f202 	mul.w	r2, r3, r2
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014758:	4413      	add	r3, r2
}
 801475a:	4618      	mov	r0, r3
 801475c:	370c      	adds	r7, #12
 801475e:	46bd      	mov	sp, r7
 8014760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014764:	4770      	bx	lr

08014766 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014766:	b580      	push	{r7, lr}
 8014768:	b086      	sub	sp, #24
 801476a:	af00      	add	r7, sp, #0
 801476c:	6078      	str	r0, [r7, #4]
 801476e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	2b01      	cmp	r3, #1
 801477a:	d904      	bls.n	8014786 <get_fat+0x20>
 801477c:	693b      	ldr	r3, [r7, #16]
 801477e:	699b      	ldr	r3, [r3, #24]
 8014780:	683a      	ldr	r2, [r7, #0]
 8014782:	429a      	cmp	r2, r3
 8014784:	d302      	bcc.n	801478c <get_fat+0x26>
		val = 1;	/* Internal error */
 8014786:	2301      	movs	r3, #1
 8014788:	617b      	str	r3, [r7, #20]
 801478a:	e08e      	b.n	80148aa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801478c:	f04f 33ff 	mov.w	r3, #4294967295
 8014790:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	781b      	ldrb	r3, [r3, #0]
 8014796:	2b03      	cmp	r3, #3
 8014798:	d061      	beq.n	801485e <get_fat+0xf8>
 801479a:	2b03      	cmp	r3, #3
 801479c:	dc7b      	bgt.n	8014896 <get_fat+0x130>
 801479e:	2b01      	cmp	r3, #1
 80147a0:	d002      	beq.n	80147a8 <get_fat+0x42>
 80147a2:	2b02      	cmp	r3, #2
 80147a4:	d041      	beq.n	801482a <get_fat+0xc4>
 80147a6:	e076      	b.n	8014896 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	60fb      	str	r3, [r7, #12]
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	085b      	lsrs	r3, r3, #1
 80147b0:	68fa      	ldr	r2, [r7, #12]
 80147b2:	4413      	add	r3, r2
 80147b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80147b6:	693b      	ldr	r3, [r7, #16]
 80147b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	0a5b      	lsrs	r3, r3, #9
 80147be:	4413      	add	r3, r2
 80147c0:	4619      	mov	r1, r3
 80147c2:	6938      	ldr	r0, [r7, #16]
 80147c4:	f7ff ff14 	bl	80145f0 <move_window>
 80147c8:	4603      	mov	r3, r0
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d166      	bne.n	801489c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	1c5a      	adds	r2, r3, #1
 80147d2:	60fa      	str	r2, [r7, #12]
 80147d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147d8:	693a      	ldr	r2, [r7, #16]
 80147da:	4413      	add	r3, r2
 80147dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80147e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	0a5b      	lsrs	r3, r3, #9
 80147ea:	4413      	add	r3, r2
 80147ec:	4619      	mov	r1, r3
 80147ee:	6938      	ldr	r0, [r7, #16]
 80147f0:	f7ff fefe 	bl	80145f0 <move_window>
 80147f4:	4603      	mov	r3, r0
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d152      	bne.n	80148a0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014800:	693a      	ldr	r2, [r7, #16]
 8014802:	4413      	add	r3, r2
 8014804:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014808:	021b      	lsls	r3, r3, #8
 801480a:	68ba      	ldr	r2, [r7, #8]
 801480c:	4313      	orrs	r3, r2
 801480e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	f003 0301 	and.w	r3, r3, #1
 8014816:	2b00      	cmp	r3, #0
 8014818:	d002      	beq.n	8014820 <get_fat+0xba>
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	091b      	lsrs	r3, r3, #4
 801481e:	e002      	b.n	8014826 <get_fat+0xc0>
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014826:	617b      	str	r3, [r7, #20]
			break;
 8014828:	e03f      	b.n	80148aa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	0a1b      	lsrs	r3, r3, #8
 8014832:	4413      	add	r3, r2
 8014834:	4619      	mov	r1, r3
 8014836:	6938      	ldr	r0, [r7, #16]
 8014838:	f7ff feda 	bl	80145f0 <move_window>
 801483c:	4603      	mov	r3, r0
 801483e:	2b00      	cmp	r3, #0
 8014840:	d130      	bne.n	80148a4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014842:	693b      	ldr	r3, [r7, #16]
 8014844:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	005b      	lsls	r3, r3, #1
 801484c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8014850:	4413      	add	r3, r2
 8014852:	4618      	mov	r0, r3
 8014854:	f7ff fbea 	bl	801402c <ld_word>
 8014858:	4603      	mov	r3, r0
 801485a:	617b      	str	r3, [r7, #20]
			break;
 801485c:	e025      	b.n	80148aa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	09db      	lsrs	r3, r3, #7
 8014866:	4413      	add	r3, r2
 8014868:	4619      	mov	r1, r3
 801486a:	6938      	ldr	r0, [r7, #16]
 801486c:	f7ff fec0 	bl	80145f0 <move_window>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d118      	bne.n	80148a8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	009b      	lsls	r3, r3, #2
 8014880:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014884:	4413      	add	r3, r2
 8014886:	4618      	mov	r0, r3
 8014888:	f7ff fbe9 	bl	801405e <ld_dword>
 801488c:	4603      	mov	r3, r0
 801488e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8014892:	617b      	str	r3, [r7, #20]
			break;
 8014894:	e009      	b.n	80148aa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014896:	2301      	movs	r3, #1
 8014898:	617b      	str	r3, [r7, #20]
 801489a:	e006      	b.n	80148aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801489c:	bf00      	nop
 801489e:	e004      	b.n	80148aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80148a0:	bf00      	nop
 80148a2:	e002      	b.n	80148aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80148a4:	bf00      	nop
 80148a6:	e000      	b.n	80148aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80148a8:	bf00      	nop
		}
	}

	return val;
 80148aa:	697b      	ldr	r3, [r7, #20]
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	3718      	adds	r7, #24
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}

080148b4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80148b4:	b590      	push	{r4, r7, lr}
 80148b6:	b089      	sub	sp, #36	@ 0x24
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	60f8      	str	r0, [r7, #12]
 80148bc:	60b9      	str	r1, [r7, #8]
 80148be:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80148c0:	2302      	movs	r3, #2
 80148c2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	2b01      	cmp	r3, #1
 80148c8:	f240 80d9 	bls.w	8014a7e <put_fat+0x1ca>
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	699b      	ldr	r3, [r3, #24]
 80148d0:	68ba      	ldr	r2, [r7, #8]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	f080 80d3 	bcs.w	8014a7e <put_fat+0x1ca>
		switch (fs->fs_type) {
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	2b03      	cmp	r3, #3
 80148de:	f000 8096 	beq.w	8014a0e <put_fat+0x15a>
 80148e2:	2b03      	cmp	r3, #3
 80148e4:	f300 80cb 	bgt.w	8014a7e <put_fat+0x1ca>
 80148e8:	2b01      	cmp	r3, #1
 80148ea:	d002      	beq.n	80148f2 <put_fat+0x3e>
 80148ec:	2b02      	cmp	r3, #2
 80148ee:	d06e      	beq.n	80149ce <put_fat+0x11a>
 80148f0:	e0c5      	b.n	8014a7e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	61bb      	str	r3, [r7, #24]
 80148f6:	69bb      	ldr	r3, [r7, #24]
 80148f8:	085b      	lsrs	r3, r3, #1
 80148fa:	69ba      	ldr	r2, [r7, #24]
 80148fc:	4413      	add	r3, r2
 80148fe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014904:	69bb      	ldr	r3, [r7, #24]
 8014906:	0a5b      	lsrs	r3, r3, #9
 8014908:	4413      	add	r3, r2
 801490a:	4619      	mov	r1, r3
 801490c:	68f8      	ldr	r0, [r7, #12]
 801490e:	f7ff fe6f 	bl	80145f0 <move_window>
 8014912:	4603      	mov	r3, r0
 8014914:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014916:	7ffb      	ldrb	r3, [r7, #31]
 8014918:	2b00      	cmp	r3, #0
 801491a:	f040 80a9 	bne.w	8014a70 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014924:	69bb      	ldr	r3, [r7, #24]
 8014926:	1c59      	adds	r1, r3, #1
 8014928:	61b9      	str	r1, [r7, #24]
 801492a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801492e:	4413      	add	r3, r2
 8014930:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	f003 0301 	and.w	r3, r3, #1
 8014938:	2b00      	cmp	r3, #0
 801493a:	d00d      	beq.n	8014958 <put_fat+0xa4>
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	b25b      	sxtb	r3, r3
 8014942:	f003 030f 	and.w	r3, r3, #15
 8014946:	b25a      	sxtb	r2, r3
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	b25b      	sxtb	r3, r3
 801494c:	011b      	lsls	r3, r3, #4
 801494e:	b25b      	sxtb	r3, r3
 8014950:	4313      	orrs	r3, r2
 8014952:	b25b      	sxtb	r3, r3
 8014954:	b2db      	uxtb	r3, r3
 8014956:	e001      	b.n	801495c <put_fat+0xa8>
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	b2db      	uxtb	r3, r3
 801495c:	697a      	ldr	r2, [r7, #20]
 801495e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	2201      	movs	r2, #1
 8014964:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801496a:	69bb      	ldr	r3, [r7, #24]
 801496c:	0a5b      	lsrs	r3, r3, #9
 801496e:	4413      	add	r3, r2
 8014970:	4619      	mov	r1, r3
 8014972:	68f8      	ldr	r0, [r7, #12]
 8014974:	f7ff fe3c 	bl	80145f0 <move_window>
 8014978:	4603      	mov	r3, r0
 801497a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801497c:	7ffb      	ldrb	r3, [r7, #31]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d178      	bne.n	8014a74 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014988:	69bb      	ldr	r3, [r7, #24]
 801498a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801498e:	4413      	add	r3, r2
 8014990:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	f003 0301 	and.w	r3, r3, #1
 8014998:	2b00      	cmp	r3, #0
 801499a:	d003      	beq.n	80149a4 <put_fat+0xf0>
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	091b      	lsrs	r3, r3, #4
 80149a0:	b2db      	uxtb	r3, r3
 80149a2:	e00e      	b.n	80149c2 <put_fat+0x10e>
 80149a4:	697b      	ldr	r3, [r7, #20]
 80149a6:	781b      	ldrb	r3, [r3, #0]
 80149a8:	b25b      	sxtb	r3, r3
 80149aa:	f023 030f 	bic.w	r3, r3, #15
 80149ae:	b25a      	sxtb	r2, r3
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	0a1b      	lsrs	r3, r3, #8
 80149b4:	b25b      	sxtb	r3, r3
 80149b6:	f003 030f 	and.w	r3, r3, #15
 80149ba:	b25b      	sxtb	r3, r3
 80149bc:	4313      	orrs	r3, r2
 80149be:	b25b      	sxtb	r3, r3
 80149c0:	b2db      	uxtb	r3, r3
 80149c2:	697a      	ldr	r2, [r7, #20]
 80149c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	2201      	movs	r2, #1
 80149ca:	70da      	strb	r2, [r3, #3]
			break;
 80149cc:	e057      	b.n	8014a7e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	0a1b      	lsrs	r3, r3, #8
 80149d6:	4413      	add	r3, r2
 80149d8:	4619      	mov	r1, r3
 80149da:	68f8      	ldr	r0, [r7, #12]
 80149dc:	f7ff fe08 	bl	80145f0 <move_window>
 80149e0:	4603      	mov	r3, r0
 80149e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80149e4:	7ffb      	ldrb	r3, [r7, #31]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d146      	bne.n	8014a78 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80149f0:	68bb      	ldr	r3, [r7, #8]
 80149f2:	005b      	lsls	r3, r3, #1
 80149f4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80149f8:	4413      	add	r3, r2
 80149fa:	687a      	ldr	r2, [r7, #4]
 80149fc:	b292      	uxth	r2, r2
 80149fe:	4611      	mov	r1, r2
 8014a00:	4618      	mov	r0, r3
 8014a02:	f7ff fb4f 	bl	80140a4 <st_word>
			fs->wflag = 1;
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	2201      	movs	r2, #1
 8014a0a:	70da      	strb	r2, [r3, #3]
			break;
 8014a0c:	e037      	b.n	8014a7e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	09db      	lsrs	r3, r3, #7
 8014a16:	4413      	add	r3, r2
 8014a18:	4619      	mov	r1, r3
 8014a1a:	68f8      	ldr	r0, [r7, #12]
 8014a1c:	f7ff fde8 	bl	80145f0 <move_window>
 8014a20:	4603      	mov	r3, r0
 8014a22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014a24:	7ffb      	ldrb	r3, [r7, #31]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d128      	bne.n	8014a7c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	009b      	lsls	r3, r3, #2
 8014a3a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014a3e:	4413      	add	r3, r2
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7ff fb0c 	bl	801405e <ld_dword>
 8014a46:	4603      	mov	r3, r0
 8014a48:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8014a4c:	4323      	orrs	r3, r4
 8014a4e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	009b      	lsls	r3, r3, #2
 8014a5a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014a5e:	4413      	add	r3, r2
 8014a60:	6879      	ldr	r1, [r7, #4]
 8014a62:	4618      	mov	r0, r3
 8014a64:	f7ff fb39 	bl	80140da <st_dword>
			fs->wflag = 1;
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	2201      	movs	r2, #1
 8014a6c:	70da      	strb	r2, [r3, #3]
			break;
 8014a6e:	e006      	b.n	8014a7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a70:	bf00      	nop
 8014a72:	e004      	b.n	8014a7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a74:	bf00      	nop
 8014a76:	e002      	b.n	8014a7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a78:	bf00      	nop
 8014a7a:	e000      	b.n	8014a7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a7c:	bf00      	nop
		}
	}
	return res;
 8014a7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8014a80:	4618      	mov	r0, r3
 8014a82:	3724      	adds	r7, #36	@ 0x24
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd90      	pop	{r4, r7, pc}

08014a88 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b088      	sub	sp, #32
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	60f8      	str	r0, [r7, #12]
 8014a90:	60b9      	str	r1, [r7, #8]
 8014a92:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014a94:	2300      	movs	r3, #0
 8014a96:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014a9e:	68bb      	ldr	r3, [r7, #8]
 8014aa0:	2b01      	cmp	r3, #1
 8014aa2:	d904      	bls.n	8014aae <remove_chain+0x26>
 8014aa4:	69bb      	ldr	r3, [r7, #24]
 8014aa6:	699b      	ldr	r3, [r3, #24]
 8014aa8:	68ba      	ldr	r2, [r7, #8]
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d301      	bcc.n	8014ab2 <remove_chain+0x2a>
 8014aae:	2302      	movs	r3, #2
 8014ab0:	e04b      	b.n	8014b4a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d00c      	beq.n	8014ad2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8014abc:	6879      	ldr	r1, [r7, #4]
 8014abe:	69b8      	ldr	r0, [r7, #24]
 8014ac0:	f7ff fef8 	bl	80148b4 <put_fat>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014ac8:	7ffb      	ldrb	r3, [r7, #31]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d001      	beq.n	8014ad2 <remove_chain+0x4a>
 8014ace:	7ffb      	ldrb	r3, [r7, #31]
 8014ad0:	e03b      	b.n	8014b4a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014ad2:	68b9      	ldr	r1, [r7, #8]
 8014ad4:	68f8      	ldr	r0, [r7, #12]
 8014ad6:	f7ff fe46 	bl	8014766 <get_fat>
 8014ada:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d031      	beq.n	8014b46 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014ae2:	697b      	ldr	r3, [r7, #20]
 8014ae4:	2b01      	cmp	r3, #1
 8014ae6:	d101      	bne.n	8014aec <remove_chain+0x64>
 8014ae8:	2302      	movs	r3, #2
 8014aea:	e02e      	b.n	8014b4a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014af2:	d101      	bne.n	8014af8 <remove_chain+0x70>
 8014af4:	2301      	movs	r3, #1
 8014af6:	e028      	b.n	8014b4a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014af8:	2200      	movs	r2, #0
 8014afa:	68b9      	ldr	r1, [r7, #8]
 8014afc:	69b8      	ldr	r0, [r7, #24]
 8014afe:	f7ff fed9 	bl	80148b4 <put_fat>
 8014b02:	4603      	mov	r3, r0
 8014b04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014b06:	7ffb      	ldrb	r3, [r7, #31]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d001      	beq.n	8014b10 <remove_chain+0x88>
 8014b0c:	7ffb      	ldrb	r3, [r7, #31]
 8014b0e:	e01c      	b.n	8014b4a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014b10:	69bb      	ldr	r3, [r7, #24]
 8014b12:	695a      	ldr	r2, [r3, #20]
 8014b14:	69bb      	ldr	r3, [r7, #24]
 8014b16:	699b      	ldr	r3, [r3, #24]
 8014b18:	3b02      	subs	r3, #2
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	d20b      	bcs.n	8014b36 <remove_chain+0xae>
			fs->free_clst++;
 8014b1e:	69bb      	ldr	r3, [r7, #24]
 8014b20:	695b      	ldr	r3, [r3, #20]
 8014b22:	1c5a      	adds	r2, r3, #1
 8014b24:	69bb      	ldr	r3, [r7, #24]
 8014b26:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8014b28:	69bb      	ldr	r3, [r7, #24]
 8014b2a:	791b      	ldrb	r3, [r3, #4]
 8014b2c:	f043 0301 	orr.w	r3, r3, #1
 8014b30:	b2da      	uxtb	r2, r3
 8014b32:	69bb      	ldr	r3, [r7, #24]
 8014b34:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	699b      	ldr	r3, [r3, #24]
 8014b3e:	68ba      	ldr	r2, [r7, #8]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d3c6      	bcc.n	8014ad2 <remove_chain+0x4a>
 8014b44:	e000      	b.n	8014b48 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014b46:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014b48:	2300      	movs	r3, #0
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3720      	adds	r7, #32
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}

08014b52 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014b52:	b580      	push	{r7, lr}
 8014b54:	b088      	sub	sp, #32
 8014b56:	af00      	add	r7, sp, #0
 8014b58:	6078      	str	r0, [r7, #4]
 8014b5a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d10d      	bne.n	8014b84 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014b68:	693b      	ldr	r3, [r7, #16]
 8014b6a:	691b      	ldr	r3, [r3, #16]
 8014b6c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014b6e:	69bb      	ldr	r3, [r7, #24]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d004      	beq.n	8014b7e <create_chain+0x2c>
 8014b74:	693b      	ldr	r3, [r7, #16]
 8014b76:	699b      	ldr	r3, [r3, #24]
 8014b78:	69ba      	ldr	r2, [r7, #24]
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	d31b      	bcc.n	8014bb6 <create_chain+0x64>
 8014b7e:	2301      	movs	r3, #1
 8014b80:	61bb      	str	r3, [r7, #24]
 8014b82:	e018      	b.n	8014bb6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014b84:	6839      	ldr	r1, [r7, #0]
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f7ff fded 	bl	8014766 <get_fat>
 8014b8c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2b01      	cmp	r3, #1
 8014b92:	d801      	bhi.n	8014b98 <create_chain+0x46>
 8014b94:	2301      	movs	r3, #1
 8014b96:	e070      	b.n	8014c7a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b9e:	d101      	bne.n	8014ba4 <create_chain+0x52>
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	e06a      	b.n	8014c7a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014ba4:	693b      	ldr	r3, [r7, #16]
 8014ba6:	699b      	ldr	r3, [r3, #24]
 8014ba8:	68fa      	ldr	r2, [r7, #12]
 8014baa:	429a      	cmp	r2, r3
 8014bac:	d201      	bcs.n	8014bb2 <create_chain+0x60>
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	e063      	b.n	8014c7a <create_chain+0x128>
		scl = clst;
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014bb6:	69bb      	ldr	r3, [r7, #24]
 8014bb8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014bba:	69fb      	ldr	r3, [r7, #28]
 8014bbc:	3301      	adds	r3, #1
 8014bbe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014bc0:	693b      	ldr	r3, [r7, #16]
 8014bc2:	699b      	ldr	r3, [r3, #24]
 8014bc4:	69fa      	ldr	r2, [r7, #28]
 8014bc6:	429a      	cmp	r2, r3
 8014bc8:	d307      	bcc.n	8014bda <create_chain+0x88>
				ncl = 2;
 8014bca:	2302      	movs	r3, #2
 8014bcc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014bce:	69fa      	ldr	r2, [r7, #28]
 8014bd0:	69bb      	ldr	r3, [r7, #24]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d901      	bls.n	8014bda <create_chain+0x88>
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	e04f      	b.n	8014c7a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014bda:	69f9      	ldr	r1, [r7, #28]
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	f7ff fdc2 	bl	8014766 <get_fat>
 8014be2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d00e      	beq.n	8014c08 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	2b01      	cmp	r3, #1
 8014bee:	d003      	beq.n	8014bf8 <create_chain+0xa6>
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bf6:	d101      	bne.n	8014bfc <create_chain+0xaa>
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	e03e      	b.n	8014c7a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8014bfc:	69fa      	ldr	r2, [r7, #28]
 8014bfe:	69bb      	ldr	r3, [r7, #24]
 8014c00:	429a      	cmp	r2, r3
 8014c02:	d1da      	bne.n	8014bba <create_chain+0x68>
 8014c04:	2300      	movs	r3, #0
 8014c06:	e038      	b.n	8014c7a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014c08:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8014c0e:	69f9      	ldr	r1, [r7, #28]
 8014c10:	6938      	ldr	r0, [r7, #16]
 8014c12:	f7ff fe4f 	bl	80148b4 <put_fat>
 8014c16:	4603      	mov	r3, r0
 8014c18:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014c1a:	7dfb      	ldrb	r3, [r7, #23]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d109      	bne.n	8014c34 <create_chain+0xe2>
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d006      	beq.n	8014c34 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014c26:	69fa      	ldr	r2, [r7, #28]
 8014c28:	6839      	ldr	r1, [r7, #0]
 8014c2a:	6938      	ldr	r0, [r7, #16]
 8014c2c:	f7ff fe42 	bl	80148b4 <put_fat>
 8014c30:	4603      	mov	r3, r0
 8014c32:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014c34:	7dfb      	ldrb	r3, [r7, #23]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d116      	bne.n	8014c68 <create_chain+0x116>
		fs->last_clst = ncl;
 8014c3a:	693b      	ldr	r3, [r7, #16]
 8014c3c:	69fa      	ldr	r2, [r7, #28]
 8014c3e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	695a      	ldr	r2, [r3, #20]
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	699b      	ldr	r3, [r3, #24]
 8014c48:	3b02      	subs	r3, #2
 8014c4a:	429a      	cmp	r2, r3
 8014c4c:	d804      	bhi.n	8014c58 <create_chain+0x106>
 8014c4e:	693b      	ldr	r3, [r7, #16]
 8014c50:	695b      	ldr	r3, [r3, #20]
 8014c52:	1e5a      	subs	r2, r3, #1
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	791b      	ldrb	r3, [r3, #4]
 8014c5c:	f043 0301 	orr.w	r3, r3, #1
 8014c60:	b2da      	uxtb	r2, r3
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	711a      	strb	r2, [r3, #4]
 8014c66:	e007      	b.n	8014c78 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014c68:	7dfb      	ldrb	r3, [r7, #23]
 8014c6a:	2b01      	cmp	r3, #1
 8014c6c:	d102      	bne.n	8014c74 <create_chain+0x122>
 8014c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c72:	e000      	b.n	8014c76 <create_chain+0x124>
 8014c74:	2301      	movs	r3, #1
 8014c76:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8014c78:	69fb      	ldr	r3, [r7, #28]
}
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	3720      	adds	r7, #32
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	bd80      	pop	{r7, pc}

08014c82 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014c82:	b480      	push	{r7}
 8014c84:	b087      	sub	sp, #28
 8014c86:	af00      	add	r7, sp, #0
 8014c88:	6078      	str	r0, [r7, #4]
 8014c8a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c96:	3304      	adds	r3, #4
 8014c98:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	0a5b      	lsrs	r3, r3, #9
 8014c9e:	68fa      	ldr	r2, [r7, #12]
 8014ca0:	8952      	ldrh	r2, [r2, #10]
 8014ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ca6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014ca8:	693b      	ldr	r3, [r7, #16]
 8014caa:	1d1a      	adds	r2, r3, #4
 8014cac:	613a      	str	r2, [r7, #16]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d101      	bne.n	8014cbc <clmt_clust+0x3a>
 8014cb8:	2300      	movs	r3, #0
 8014cba:	e010      	b.n	8014cde <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8014cbc:	697a      	ldr	r2, [r7, #20]
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d307      	bcc.n	8014cd4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8014cc4:	697a      	ldr	r2, [r7, #20]
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	1ad3      	subs	r3, r2, r3
 8014cca:	617b      	str	r3, [r7, #20]
 8014ccc:	693b      	ldr	r3, [r7, #16]
 8014cce:	3304      	adds	r3, #4
 8014cd0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014cd2:	e7e9      	b.n	8014ca8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8014cd4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	681a      	ldr	r2, [r3, #0]
 8014cda:	697b      	ldr	r3, [r7, #20]
 8014cdc:	4413      	add	r3, r2
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	371c      	adds	r7, #28
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce8:	4770      	bx	lr

08014cea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014cea:	b580      	push	{r7, lr}
 8014cec:	b086      	sub	sp, #24
 8014cee:	af00      	add	r7, sp, #0
 8014cf0:	6078      	str	r0, [r7, #4]
 8014cf2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014d00:	d204      	bcs.n	8014d0c <dir_sdi+0x22>
 8014d02:	683b      	ldr	r3, [r7, #0]
 8014d04:	f003 031f 	and.w	r3, r3, #31
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d001      	beq.n	8014d10 <dir_sdi+0x26>
		return FR_INT_ERR;
 8014d0c:	2302      	movs	r3, #2
 8014d0e:	e063      	b.n	8014dd8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	683a      	ldr	r2, [r7, #0]
 8014d14:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	689b      	ldr	r3, [r3, #8]
 8014d1a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014d1c:	697b      	ldr	r3, [r7, #20]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d106      	bne.n	8014d30 <dir_sdi+0x46>
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	781b      	ldrb	r3, [r3, #0]
 8014d26:	2b02      	cmp	r3, #2
 8014d28:	d902      	bls.n	8014d30 <dir_sdi+0x46>
		clst = fs->dirbase;
 8014d2a:	693b      	ldr	r3, [r7, #16]
 8014d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d2e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d10c      	bne.n	8014d50 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	095b      	lsrs	r3, r3, #5
 8014d3a:	693a      	ldr	r2, [r7, #16]
 8014d3c:	8912      	ldrh	r2, [r2, #8]
 8014d3e:	4293      	cmp	r3, r2
 8014d40:	d301      	bcc.n	8014d46 <dir_sdi+0x5c>
 8014d42:	2302      	movs	r3, #2
 8014d44:	e048      	b.n	8014dd8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	61da      	str	r2, [r3, #28]
 8014d4e:	e029      	b.n	8014da4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	895b      	ldrh	r3, [r3, #10]
 8014d54:	025b      	lsls	r3, r3, #9
 8014d56:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014d58:	e019      	b.n	8014d8e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	6979      	ldr	r1, [r7, #20]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7ff fd01 	bl	8014766 <get_fat>
 8014d64:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014d66:	697b      	ldr	r3, [r7, #20]
 8014d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d6c:	d101      	bne.n	8014d72 <dir_sdi+0x88>
 8014d6e:	2301      	movs	r3, #1
 8014d70:	e032      	b.n	8014dd8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014d72:	697b      	ldr	r3, [r7, #20]
 8014d74:	2b01      	cmp	r3, #1
 8014d76:	d904      	bls.n	8014d82 <dir_sdi+0x98>
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	699b      	ldr	r3, [r3, #24]
 8014d7c:	697a      	ldr	r2, [r7, #20]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d301      	bcc.n	8014d86 <dir_sdi+0x9c>
 8014d82:	2302      	movs	r3, #2
 8014d84:	e028      	b.n	8014dd8 <dir_sdi+0xee>
			ofs -= csz;
 8014d86:	683a      	ldr	r2, [r7, #0]
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	1ad3      	subs	r3, r2, r3
 8014d8c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014d8e:	683a      	ldr	r2, [r7, #0]
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	429a      	cmp	r2, r3
 8014d94:	d2e1      	bcs.n	8014d5a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8014d96:	6979      	ldr	r1, [r7, #20]
 8014d98:	6938      	ldr	r0, [r7, #16]
 8014d9a:	f7ff fcc5 	bl	8014728 <clust2sect>
 8014d9e:	4602      	mov	r2, r0
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	697a      	ldr	r2, [r7, #20]
 8014da8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	69db      	ldr	r3, [r3, #28]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d101      	bne.n	8014db6 <dir_sdi+0xcc>
 8014db2:	2302      	movs	r3, #2
 8014db4:	e010      	b.n	8014dd8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	69da      	ldr	r2, [r3, #28]
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	0a5b      	lsrs	r3, r3, #9
 8014dbe:	441a      	add	r2, r3
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014dc4:	693b      	ldr	r3, [r7, #16]
 8014dc6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014dd0:	441a      	add	r2, r3
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014dd6:	2300      	movs	r3, #0
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	3718      	adds	r7, #24
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}

08014de0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b086      	sub	sp, #24
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
 8014de8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	695b      	ldr	r3, [r3, #20]
 8014df4:	3320      	adds	r3, #32
 8014df6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	69db      	ldr	r3, [r3, #28]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d003      	beq.n	8014e08 <dir_next+0x28>
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014e06:	d301      	bcc.n	8014e0c <dir_next+0x2c>
 8014e08:	2304      	movs	r3, #4
 8014e0a:	e0aa      	b.n	8014f62 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	f040 8098 	bne.w	8014f48 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	69db      	ldr	r3, [r3, #28]
 8014e1c:	1c5a      	adds	r2, r3, #1
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	699b      	ldr	r3, [r3, #24]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d10b      	bne.n	8014e42 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	095b      	lsrs	r3, r3, #5
 8014e2e:	68fa      	ldr	r2, [r7, #12]
 8014e30:	8912      	ldrh	r2, [r2, #8]
 8014e32:	4293      	cmp	r3, r2
 8014e34:	f0c0 8088 	bcc.w	8014f48 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	61da      	str	r2, [r3, #28]
 8014e3e:	2304      	movs	r3, #4
 8014e40:	e08f      	b.n	8014f62 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	0a5b      	lsrs	r3, r3, #9
 8014e46:	68fa      	ldr	r2, [r7, #12]
 8014e48:	8952      	ldrh	r2, [r2, #10]
 8014e4a:	3a01      	subs	r2, #1
 8014e4c:	4013      	ands	r3, r2
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d17a      	bne.n	8014f48 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014e52:	687a      	ldr	r2, [r7, #4]
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	699b      	ldr	r3, [r3, #24]
 8014e58:	4619      	mov	r1, r3
 8014e5a:	4610      	mov	r0, r2
 8014e5c:	f7ff fc83 	bl	8014766 <get_fat>
 8014e60:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014e62:	697b      	ldr	r3, [r7, #20]
 8014e64:	2b01      	cmp	r3, #1
 8014e66:	d801      	bhi.n	8014e6c <dir_next+0x8c>
 8014e68:	2302      	movs	r3, #2
 8014e6a:	e07a      	b.n	8014f62 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014e6c:	697b      	ldr	r3, [r7, #20]
 8014e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e72:	d101      	bne.n	8014e78 <dir_next+0x98>
 8014e74:	2301      	movs	r3, #1
 8014e76:	e074      	b.n	8014f62 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	699b      	ldr	r3, [r3, #24]
 8014e7c:	697a      	ldr	r2, [r7, #20]
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d358      	bcc.n	8014f34 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d104      	bne.n	8014e92 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	61da      	str	r2, [r3, #28]
 8014e8e:	2304      	movs	r3, #4
 8014e90:	e067      	b.n	8014f62 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8014e92:	687a      	ldr	r2, [r7, #4]
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	699b      	ldr	r3, [r3, #24]
 8014e98:	4619      	mov	r1, r3
 8014e9a:	4610      	mov	r0, r2
 8014e9c:	f7ff fe59 	bl	8014b52 <create_chain>
 8014ea0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d101      	bne.n	8014eac <dir_next+0xcc>
 8014ea8:	2307      	movs	r3, #7
 8014eaa:	e05a      	b.n	8014f62 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	2b01      	cmp	r3, #1
 8014eb0:	d101      	bne.n	8014eb6 <dir_next+0xd6>
 8014eb2:	2302      	movs	r3, #2
 8014eb4:	e055      	b.n	8014f62 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014eb6:	697b      	ldr	r3, [r7, #20]
 8014eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ebc:	d101      	bne.n	8014ec2 <dir_next+0xe2>
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	e04f      	b.n	8014f62 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014ec2:	68f8      	ldr	r0, [r7, #12]
 8014ec4:	f7ff fb50 	bl	8014568 <sync_window>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d001      	beq.n	8014ed2 <dir_next+0xf2>
 8014ece:	2301      	movs	r3, #1
 8014ed0:	e047      	b.n	8014f62 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	3334      	adds	r3, #52	@ 0x34
 8014ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014eda:	2100      	movs	r1, #0
 8014edc:	4618      	mov	r0, r3
 8014ede:	f7ff f949 	bl	8014174 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	613b      	str	r3, [r7, #16]
 8014ee6:	6979      	ldr	r1, [r7, #20]
 8014ee8:	68f8      	ldr	r0, [r7, #12]
 8014eea:	f7ff fc1d 	bl	8014728 <clust2sect>
 8014eee:	4602      	mov	r2, r0
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	631a      	str	r2, [r3, #48]	@ 0x30
 8014ef4:	e012      	b.n	8014f1c <dir_next+0x13c>
						fs->wflag = 1;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	2201      	movs	r2, #1
 8014efa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8014efc:	68f8      	ldr	r0, [r7, #12]
 8014efe:	f7ff fb33 	bl	8014568 <sync_window>
 8014f02:	4603      	mov	r3, r0
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d001      	beq.n	8014f0c <dir_next+0x12c>
 8014f08:	2301      	movs	r3, #1
 8014f0a:	e02a      	b.n	8014f62 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014f0c:	693b      	ldr	r3, [r7, #16]
 8014f0e:	3301      	adds	r3, #1
 8014f10:	613b      	str	r3, [r7, #16]
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f16:	1c5a      	adds	r2, r3, #1
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	895b      	ldrh	r3, [r3, #10]
 8014f20:	461a      	mov	r2, r3
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	4293      	cmp	r3, r2
 8014f26:	d3e6      	bcc.n	8014ef6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014f2c:	693b      	ldr	r3, [r7, #16]
 8014f2e:	1ad2      	subs	r2, r2, r3
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	697a      	ldr	r2, [r7, #20]
 8014f38:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8014f3a:	6979      	ldr	r1, [r7, #20]
 8014f3c:	68f8      	ldr	r0, [r7, #12]
 8014f3e:	f7ff fbf3 	bl	8014728 <clust2sect>
 8014f42:	4602      	mov	r2, r0
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	68ba      	ldr	r2, [r7, #8]
 8014f4c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f5a:	441a      	add	r2, r3
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014f60:	2300      	movs	r3, #0
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3718      	adds	r7, #24
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}

08014f6a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8014f6a:	b580      	push	{r7, lr}
 8014f6c:	b086      	sub	sp, #24
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	6078      	str	r0, [r7, #4]
 8014f72:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8014f7a:	2100      	movs	r1, #0
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f7ff feb4 	bl	8014cea <dir_sdi>
 8014f82:	4603      	mov	r3, r0
 8014f84:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014f86:	7dfb      	ldrb	r3, [r7, #23]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d12b      	bne.n	8014fe4 <dir_alloc+0x7a>
		n = 0;
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	69db      	ldr	r3, [r3, #28]
 8014f94:	4619      	mov	r1, r3
 8014f96:	68f8      	ldr	r0, [r7, #12]
 8014f98:	f7ff fb2a 	bl	80145f0 <move_window>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014fa0:	7dfb      	ldrb	r3, [r7, #23]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d11d      	bne.n	8014fe2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	6a1b      	ldr	r3, [r3, #32]
 8014faa:	781b      	ldrb	r3, [r3, #0]
 8014fac:	2be5      	cmp	r3, #229	@ 0xe5
 8014fae:	d004      	beq.n	8014fba <dir_alloc+0x50>
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	6a1b      	ldr	r3, [r3, #32]
 8014fb4:	781b      	ldrb	r3, [r3, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d107      	bne.n	8014fca <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014fba:	693b      	ldr	r3, [r7, #16]
 8014fbc:	3301      	adds	r3, #1
 8014fbe:	613b      	str	r3, [r7, #16]
 8014fc0:	693a      	ldr	r2, [r7, #16]
 8014fc2:	683b      	ldr	r3, [r7, #0]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d102      	bne.n	8014fce <dir_alloc+0x64>
 8014fc8:	e00c      	b.n	8014fe4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014fca:	2300      	movs	r3, #0
 8014fcc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8014fce:	2101      	movs	r1, #1
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f7ff ff05 	bl	8014de0 <dir_next>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014fda:	7dfb      	ldrb	r3, [r7, #23]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d0d7      	beq.n	8014f90 <dir_alloc+0x26>
 8014fe0:	e000      	b.n	8014fe4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8014fe2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014fe4:	7dfb      	ldrb	r3, [r7, #23]
 8014fe6:	2b04      	cmp	r3, #4
 8014fe8:	d101      	bne.n	8014fee <dir_alloc+0x84>
 8014fea:	2307      	movs	r3, #7
 8014fec:	75fb      	strb	r3, [r7, #23]
	return res;
 8014fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3718      	adds	r7, #24
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}

08014ff8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
 8015000:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	331a      	adds	r3, #26
 8015006:	4618      	mov	r0, r3
 8015008:	f7ff f810 	bl	801402c <ld_word>
 801500c:	4603      	mov	r3, r0
 801500e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	781b      	ldrb	r3, [r3, #0]
 8015014:	2b03      	cmp	r3, #3
 8015016:	d109      	bne.n	801502c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	3314      	adds	r3, #20
 801501c:	4618      	mov	r0, r3
 801501e:	f7ff f805 	bl	801402c <ld_word>
 8015022:	4603      	mov	r3, r0
 8015024:	041b      	lsls	r3, r3, #16
 8015026:	68fa      	ldr	r2, [r7, #12]
 8015028:	4313      	orrs	r3, r2
 801502a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801502c:	68fb      	ldr	r3, [r7, #12]
}
 801502e:	4618      	mov	r0, r3
 8015030:	3710      	adds	r7, #16
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}

08015036 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015036:	b580      	push	{r7, lr}
 8015038:	b084      	sub	sp, #16
 801503a:	af00      	add	r7, sp, #0
 801503c:	60f8      	str	r0, [r7, #12]
 801503e:	60b9      	str	r1, [r7, #8]
 8015040:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	331a      	adds	r3, #26
 8015046:	687a      	ldr	r2, [r7, #4]
 8015048:	b292      	uxth	r2, r2
 801504a:	4611      	mov	r1, r2
 801504c:	4618      	mov	r0, r3
 801504e:	f7ff f829 	bl	80140a4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	781b      	ldrb	r3, [r3, #0]
 8015056:	2b03      	cmp	r3, #3
 8015058:	d109      	bne.n	801506e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	f103 0214 	add.w	r2, r3, #20
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	0c1b      	lsrs	r3, r3, #16
 8015064:	b29b      	uxth	r3, r3
 8015066:	4619      	mov	r1, r3
 8015068:	4610      	mov	r0, r2
 801506a:	f7ff f81b 	bl	80140a4 <st_word>
	}
}
 801506e:	bf00      	nop
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}

08015076 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015076:	b580      	push	{r7, lr}
 8015078:	b086      	sub	sp, #24
 801507a:	af00      	add	r7, sp, #0
 801507c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015084:	2100      	movs	r1, #0
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f7ff fe2f 	bl	8014cea <dir_sdi>
 801508c:	4603      	mov	r3, r0
 801508e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015090:	7dfb      	ldrb	r3, [r7, #23]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d001      	beq.n	801509a <dir_find+0x24>
 8015096:	7dfb      	ldrb	r3, [r7, #23]
 8015098:	e03e      	b.n	8015118 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	69db      	ldr	r3, [r3, #28]
 801509e:	4619      	mov	r1, r3
 80150a0:	6938      	ldr	r0, [r7, #16]
 80150a2:	f7ff faa5 	bl	80145f0 <move_window>
 80150a6:	4603      	mov	r3, r0
 80150a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80150aa:	7dfb      	ldrb	r3, [r7, #23]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d12f      	bne.n	8015110 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	6a1b      	ldr	r3, [r3, #32]
 80150b4:	781b      	ldrb	r3, [r3, #0]
 80150b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80150b8:	7bfb      	ldrb	r3, [r7, #15]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d102      	bne.n	80150c4 <dir_find+0x4e>
 80150be:	2304      	movs	r3, #4
 80150c0:	75fb      	strb	r3, [r7, #23]
 80150c2:	e028      	b.n	8015116 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6a1b      	ldr	r3, [r3, #32]
 80150c8:	330b      	adds	r3, #11
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80150d0:	b2da      	uxtb	r2, r3
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	6a1b      	ldr	r3, [r3, #32]
 80150da:	330b      	adds	r3, #11
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	f003 0308 	and.w	r3, r3, #8
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d10a      	bne.n	80150fc <dir_find+0x86>
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	6a18      	ldr	r0, [r3, #32]
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	3324      	adds	r3, #36	@ 0x24
 80150ee:	220b      	movs	r2, #11
 80150f0:	4619      	mov	r1, r3
 80150f2:	f7ff f85a 	bl	80141aa <mem_cmp>
 80150f6:	4603      	mov	r3, r0
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d00b      	beq.n	8015114 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80150fc:	2100      	movs	r1, #0
 80150fe:	6878      	ldr	r0, [r7, #4]
 8015100:	f7ff fe6e 	bl	8014de0 <dir_next>
 8015104:	4603      	mov	r3, r0
 8015106:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015108:	7dfb      	ldrb	r3, [r7, #23]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d0c5      	beq.n	801509a <dir_find+0x24>
 801510e:	e002      	b.n	8015116 <dir_find+0xa0>
		if (res != FR_OK) break;
 8015110:	bf00      	nop
 8015112:	e000      	b.n	8015116 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015114:	bf00      	nop

	return res;
 8015116:	7dfb      	ldrb	r3, [r7, #23]
}
 8015118:	4618      	mov	r0, r3
 801511a:	3718      	adds	r7, #24
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}

08015120 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801512e:	2101      	movs	r1, #1
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	f7ff ff1a 	bl	8014f6a <dir_alloc>
 8015136:	4603      	mov	r3, r0
 8015138:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801513a:	7bfb      	ldrb	r3, [r7, #15]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d11c      	bne.n	801517a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	69db      	ldr	r3, [r3, #28]
 8015144:	4619      	mov	r1, r3
 8015146:	68b8      	ldr	r0, [r7, #8]
 8015148:	f7ff fa52 	bl	80145f0 <move_window>
 801514c:	4603      	mov	r3, r0
 801514e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015150:	7bfb      	ldrb	r3, [r7, #15]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d111      	bne.n	801517a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	6a1b      	ldr	r3, [r3, #32]
 801515a:	2220      	movs	r2, #32
 801515c:	2100      	movs	r1, #0
 801515e:	4618      	mov	r0, r3
 8015160:	f7ff f808 	bl	8014174 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	6a18      	ldr	r0, [r3, #32]
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	3324      	adds	r3, #36	@ 0x24
 801516c:	220b      	movs	r2, #11
 801516e:	4619      	mov	r1, r3
 8015170:	f7fe ffdf 	bl	8014132 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	2201      	movs	r2, #1
 8015178:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801517a:	7bfb      	ldrb	r3, [r7, #15]
}
 801517c:	4618      	mov	r0, r3
 801517e:	3710      	adds	r7, #16
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}

08015184 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b088      	sub	sp, #32
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
 801518c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	60fb      	str	r3, [r7, #12]
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	3324      	adds	r3, #36	@ 0x24
 8015198:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801519a:	220b      	movs	r2, #11
 801519c:	2120      	movs	r1, #32
 801519e:	68b8      	ldr	r0, [r7, #8]
 80151a0:	f7fe ffe8 	bl	8014174 <mem_set>
	si = i = 0; ni = 8;
 80151a4:	2300      	movs	r3, #0
 80151a6:	613b      	str	r3, [r7, #16]
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	61fb      	str	r3, [r7, #28]
 80151ac:	2308      	movs	r3, #8
 80151ae:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80151b0:	69fb      	ldr	r3, [r7, #28]
 80151b2:	1c5a      	adds	r2, r3, #1
 80151b4:	61fa      	str	r2, [r7, #28]
 80151b6:	68fa      	ldr	r2, [r7, #12]
 80151b8:	4413      	add	r3, r2
 80151ba:	781b      	ldrb	r3, [r3, #0]
 80151bc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80151be:	7efb      	ldrb	r3, [r7, #27]
 80151c0:	2b20      	cmp	r3, #32
 80151c2:	d94e      	bls.n	8015262 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80151c4:	7efb      	ldrb	r3, [r7, #27]
 80151c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80151c8:	d006      	beq.n	80151d8 <create_name+0x54>
 80151ca:	7efb      	ldrb	r3, [r7, #27]
 80151cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80151ce:	d110      	bne.n	80151f2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80151d0:	e002      	b.n	80151d8 <create_name+0x54>
 80151d2:	69fb      	ldr	r3, [r7, #28]
 80151d4:	3301      	adds	r3, #1
 80151d6:	61fb      	str	r3, [r7, #28]
 80151d8:	68fa      	ldr	r2, [r7, #12]
 80151da:	69fb      	ldr	r3, [r7, #28]
 80151dc:	4413      	add	r3, r2
 80151de:	781b      	ldrb	r3, [r3, #0]
 80151e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80151e2:	d0f6      	beq.n	80151d2 <create_name+0x4e>
 80151e4:	68fa      	ldr	r2, [r7, #12]
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	4413      	add	r3, r2
 80151ea:	781b      	ldrb	r3, [r3, #0]
 80151ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80151ee:	d0f0      	beq.n	80151d2 <create_name+0x4e>
			break;
 80151f0:	e038      	b.n	8015264 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80151f2:	7efb      	ldrb	r3, [r7, #27]
 80151f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80151f6:	d003      	beq.n	8015200 <create_name+0x7c>
 80151f8:	693a      	ldr	r2, [r7, #16]
 80151fa:	697b      	ldr	r3, [r7, #20]
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d30c      	bcc.n	801521a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	2b0b      	cmp	r3, #11
 8015204:	d002      	beq.n	801520c <create_name+0x88>
 8015206:	7efb      	ldrb	r3, [r7, #27]
 8015208:	2b2e      	cmp	r3, #46	@ 0x2e
 801520a:	d001      	beq.n	8015210 <create_name+0x8c>
 801520c:	2306      	movs	r3, #6
 801520e:	e044      	b.n	801529a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8015210:	2308      	movs	r3, #8
 8015212:	613b      	str	r3, [r7, #16]
 8015214:	230b      	movs	r3, #11
 8015216:	617b      	str	r3, [r7, #20]
			continue;
 8015218:	e022      	b.n	8015260 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801521a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801521e:	2b00      	cmp	r3, #0
 8015220:	da04      	bge.n	801522c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8015222:	7efb      	ldrb	r3, [r7, #27]
 8015224:	3b80      	subs	r3, #128	@ 0x80
 8015226:	4a1f      	ldr	r2, [pc, #124]	@ (80152a4 <create_name+0x120>)
 8015228:	5cd3      	ldrb	r3, [r2, r3]
 801522a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801522c:	7efb      	ldrb	r3, [r7, #27]
 801522e:	4619      	mov	r1, r3
 8015230:	481d      	ldr	r0, [pc, #116]	@ (80152a8 <create_name+0x124>)
 8015232:	f7fe ffe1 	bl	80141f8 <chk_chr>
 8015236:	4603      	mov	r3, r0
 8015238:	2b00      	cmp	r3, #0
 801523a:	d001      	beq.n	8015240 <create_name+0xbc>
 801523c:	2306      	movs	r3, #6
 801523e:	e02c      	b.n	801529a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8015240:	7efb      	ldrb	r3, [r7, #27]
 8015242:	2b60      	cmp	r3, #96	@ 0x60
 8015244:	d905      	bls.n	8015252 <create_name+0xce>
 8015246:	7efb      	ldrb	r3, [r7, #27]
 8015248:	2b7a      	cmp	r3, #122	@ 0x7a
 801524a:	d802      	bhi.n	8015252 <create_name+0xce>
 801524c:	7efb      	ldrb	r3, [r7, #27]
 801524e:	3b20      	subs	r3, #32
 8015250:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8015252:	693b      	ldr	r3, [r7, #16]
 8015254:	1c5a      	adds	r2, r3, #1
 8015256:	613a      	str	r2, [r7, #16]
 8015258:	68ba      	ldr	r2, [r7, #8]
 801525a:	4413      	add	r3, r2
 801525c:	7efa      	ldrb	r2, [r7, #27]
 801525e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8015260:	e7a6      	b.n	80151b0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8015262:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8015264:	68fa      	ldr	r2, [r7, #12]
 8015266:	69fb      	ldr	r3, [r7, #28]
 8015268:	441a      	add	r2, r3
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801526e:	693b      	ldr	r3, [r7, #16]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d101      	bne.n	8015278 <create_name+0xf4>
 8015274:	2306      	movs	r3, #6
 8015276:	e010      	b.n	801529a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015278:	68bb      	ldr	r3, [r7, #8]
 801527a:	781b      	ldrb	r3, [r3, #0]
 801527c:	2be5      	cmp	r3, #229	@ 0xe5
 801527e:	d102      	bne.n	8015286 <create_name+0x102>
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	2205      	movs	r2, #5
 8015284:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015286:	7efb      	ldrb	r3, [r7, #27]
 8015288:	2b20      	cmp	r3, #32
 801528a:	d801      	bhi.n	8015290 <create_name+0x10c>
 801528c:	2204      	movs	r2, #4
 801528e:	e000      	b.n	8015292 <create_name+0x10e>
 8015290:	2200      	movs	r2, #0
 8015292:	68bb      	ldr	r3, [r7, #8]
 8015294:	330b      	adds	r3, #11
 8015296:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8015298:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801529a:	4618      	mov	r0, r3
 801529c:	3720      	adds	r7, #32
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}
 80152a2:	bf00      	nop
 80152a4:	0801c6d8 	.word	0x0801c6d8
 80152a8:	0801c658 	.word	0x0801c658

080152ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b086      	sub	sp, #24
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80152ba:	693b      	ldr	r3, [r7, #16]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80152c0:	e002      	b.n	80152c8 <follow_path+0x1c>
 80152c2:	683b      	ldr	r3, [r7, #0]
 80152c4:	3301      	adds	r3, #1
 80152c6:	603b      	str	r3, [r7, #0]
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	781b      	ldrb	r3, [r3, #0]
 80152cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80152ce:	d0f8      	beq.n	80152c2 <follow_path+0x16>
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80152d6:	d0f4      	beq.n	80152c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80152d8:	693b      	ldr	r3, [r7, #16]
 80152da:	2200      	movs	r2, #0
 80152dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	781b      	ldrb	r3, [r3, #0]
 80152e2:	2b1f      	cmp	r3, #31
 80152e4:	d80a      	bhi.n	80152fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2280      	movs	r2, #128	@ 0x80
 80152ea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80152ee:	2100      	movs	r1, #0
 80152f0:	6878      	ldr	r0, [r7, #4]
 80152f2:	f7ff fcfa 	bl	8014cea <dir_sdi>
 80152f6:	4603      	mov	r3, r0
 80152f8:	75fb      	strb	r3, [r7, #23]
 80152fa:	e043      	b.n	8015384 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80152fc:	463b      	mov	r3, r7
 80152fe:	4619      	mov	r1, r3
 8015300:	6878      	ldr	r0, [r7, #4]
 8015302:	f7ff ff3f 	bl	8015184 <create_name>
 8015306:	4603      	mov	r3, r0
 8015308:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801530a:	7dfb      	ldrb	r3, [r7, #23]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d134      	bne.n	801537a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015310:	6878      	ldr	r0, [r7, #4]
 8015312:	f7ff feb0 	bl	8015076 <dir_find>
 8015316:	4603      	mov	r3, r0
 8015318:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8015320:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8015322:	7dfb      	ldrb	r3, [r7, #23]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d00a      	beq.n	801533e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015328:	7dfb      	ldrb	r3, [r7, #23]
 801532a:	2b04      	cmp	r3, #4
 801532c:	d127      	bne.n	801537e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801532e:	7afb      	ldrb	r3, [r7, #11]
 8015330:	f003 0304 	and.w	r3, r3, #4
 8015334:	2b00      	cmp	r3, #0
 8015336:	d122      	bne.n	801537e <follow_path+0xd2>
 8015338:	2305      	movs	r3, #5
 801533a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801533c:	e01f      	b.n	801537e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801533e:	7afb      	ldrb	r3, [r7, #11]
 8015340:	f003 0304 	and.w	r3, r3, #4
 8015344:	2b00      	cmp	r3, #0
 8015346:	d11c      	bne.n	8015382 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015348:	693b      	ldr	r3, [r7, #16]
 801534a:	799b      	ldrb	r3, [r3, #6]
 801534c:	f003 0310 	and.w	r3, r3, #16
 8015350:	2b00      	cmp	r3, #0
 8015352:	d102      	bne.n	801535a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015354:	2305      	movs	r3, #5
 8015356:	75fb      	strb	r3, [r7, #23]
 8015358:	e014      	b.n	8015384 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	695b      	ldr	r3, [r3, #20]
 8015364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015368:	4413      	add	r3, r2
 801536a:	4619      	mov	r1, r3
 801536c:	68f8      	ldr	r0, [r7, #12]
 801536e:	f7ff fe43 	bl	8014ff8 <ld_clust>
 8015372:	4602      	mov	r2, r0
 8015374:	693b      	ldr	r3, [r7, #16]
 8015376:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015378:	e7c0      	b.n	80152fc <follow_path+0x50>
			if (res != FR_OK) break;
 801537a:	bf00      	nop
 801537c:	e002      	b.n	8015384 <follow_path+0xd8>
				break;
 801537e:	bf00      	nop
 8015380:	e000      	b.n	8015384 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015382:	bf00      	nop
			}
		}
	}

	return res;
 8015384:	7dfb      	ldrb	r3, [r7, #23]
}
 8015386:	4618      	mov	r0, r3
 8015388:	3718      	adds	r7, #24
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}

0801538e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801538e:	b480      	push	{r7}
 8015390:	b087      	sub	sp, #28
 8015392:	af00      	add	r7, sp, #0
 8015394:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8015396:	f04f 33ff 	mov.w	r3, #4294967295
 801539a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d031      	beq.n	8015408 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	617b      	str	r3, [r7, #20]
 80153aa:	e002      	b.n	80153b2 <get_ldnumber+0x24>
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	3301      	adds	r3, #1
 80153b0:	617b      	str	r3, [r7, #20]
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	781b      	ldrb	r3, [r3, #0]
 80153b6:	2b20      	cmp	r3, #32
 80153b8:	d903      	bls.n	80153c2 <get_ldnumber+0x34>
 80153ba:	697b      	ldr	r3, [r7, #20]
 80153bc:	781b      	ldrb	r3, [r3, #0]
 80153be:	2b3a      	cmp	r3, #58	@ 0x3a
 80153c0:	d1f4      	bne.n	80153ac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	781b      	ldrb	r3, [r3, #0]
 80153c6:	2b3a      	cmp	r3, #58	@ 0x3a
 80153c8:	d11c      	bne.n	8015404 <get_ldnumber+0x76>
			tp = *path;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	1c5a      	adds	r2, r3, #1
 80153d4:	60fa      	str	r2, [r7, #12]
 80153d6:	781b      	ldrb	r3, [r3, #0]
 80153d8:	3b30      	subs	r3, #48	@ 0x30
 80153da:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80153dc:	68bb      	ldr	r3, [r7, #8]
 80153de:	2b09      	cmp	r3, #9
 80153e0:	d80e      	bhi.n	8015400 <get_ldnumber+0x72>
 80153e2:	68fa      	ldr	r2, [r7, #12]
 80153e4:	697b      	ldr	r3, [r7, #20]
 80153e6:	429a      	cmp	r2, r3
 80153e8:	d10a      	bne.n	8015400 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d107      	bne.n	8015400 <get_ldnumber+0x72>
					vol = (int)i;
 80153f0:	68bb      	ldr	r3, [r7, #8]
 80153f2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	3301      	adds	r3, #1
 80153f8:	617b      	str	r3, [r7, #20]
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	697a      	ldr	r2, [r7, #20]
 80153fe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8015400:	693b      	ldr	r3, [r7, #16]
 8015402:	e002      	b.n	801540a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8015404:	2300      	movs	r3, #0
 8015406:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8015408:	693b      	ldr	r3, [r7, #16]
}
 801540a:	4618      	mov	r0, r3
 801540c:	371c      	adds	r7, #28
 801540e:	46bd      	mov	sp, r7
 8015410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015414:	4770      	bx	lr
	...

08015418 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b082      	sub	sp, #8
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	2200      	movs	r2, #0
 8015426:	70da      	strb	r2, [r3, #3]
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	f04f 32ff 	mov.w	r2, #4294967295
 801542e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015430:	6839      	ldr	r1, [r7, #0]
 8015432:	6878      	ldr	r0, [r7, #4]
 8015434:	f7ff f8dc 	bl	80145f0 <move_window>
 8015438:	4603      	mov	r3, r0
 801543a:	2b00      	cmp	r3, #0
 801543c:	d001      	beq.n	8015442 <check_fs+0x2a>
 801543e:	2304      	movs	r3, #4
 8015440:	e038      	b.n	80154b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	3334      	adds	r3, #52	@ 0x34
 8015446:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801544a:	4618      	mov	r0, r3
 801544c:	f7fe fdee 	bl	801402c <ld_word>
 8015450:	4603      	mov	r3, r0
 8015452:	461a      	mov	r2, r3
 8015454:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8015458:	429a      	cmp	r2, r3
 801545a:	d001      	beq.n	8015460 <check_fs+0x48>
 801545c:	2303      	movs	r3, #3
 801545e:	e029      	b.n	80154b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015466:	2be9      	cmp	r3, #233	@ 0xe9
 8015468:	d009      	beq.n	801547e <check_fs+0x66>
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015470:	2beb      	cmp	r3, #235	@ 0xeb
 8015472:	d11e      	bne.n	80154b2 <check_fs+0x9a>
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801547a:	2b90      	cmp	r3, #144	@ 0x90
 801547c:	d119      	bne.n	80154b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	3334      	adds	r3, #52	@ 0x34
 8015482:	3336      	adds	r3, #54	@ 0x36
 8015484:	4618      	mov	r0, r3
 8015486:	f7fe fdea 	bl	801405e <ld_dword>
 801548a:	4603      	mov	r3, r0
 801548c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8015490:	4a0a      	ldr	r2, [pc, #40]	@ (80154bc <check_fs+0xa4>)
 8015492:	4293      	cmp	r3, r2
 8015494:	d101      	bne.n	801549a <check_fs+0x82>
 8015496:	2300      	movs	r3, #0
 8015498:	e00c      	b.n	80154b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	3334      	adds	r3, #52	@ 0x34
 801549e:	3352      	adds	r3, #82	@ 0x52
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7fe fddc 	bl	801405e <ld_dword>
 80154a6:	4603      	mov	r3, r0
 80154a8:	4a05      	ldr	r2, [pc, #20]	@ (80154c0 <check_fs+0xa8>)
 80154aa:	4293      	cmp	r3, r2
 80154ac:	d101      	bne.n	80154b2 <check_fs+0x9a>
 80154ae:	2300      	movs	r3, #0
 80154b0:	e000      	b.n	80154b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80154b2:	2302      	movs	r3, #2
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	3708      	adds	r7, #8
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd80      	pop	{r7, pc}
 80154bc:	00544146 	.word	0x00544146
 80154c0:	33544146 	.word	0x33544146

080154c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b096      	sub	sp, #88	@ 0x58
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	60f8      	str	r0, [r7, #12]
 80154cc:	60b9      	str	r1, [r7, #8]
 80154ce:	4613      	mov	r3, r2
 80154d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80154d2:	68bb      	ldr	r3, [r7, #8]
 80154d4:	2200      	movs	r2, #0
 80154d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80154d8:	68f8      	ldr	r0, [r7, #12]
 80154da:	f7ff ff58 	bl	801538e <get_ldnumber>
 80154de:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80154e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	da01      	bge.n	80154ea <find_volume+0x26>
 80154e6:	230b      	movs	r3, #11
 80154e8:	e235      	b.n	8015956 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80154ea:	4aa5      	ldr	r2, [pc, #660]	@ (8015780 <find_volume+0x2bc>)
 80154ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80154f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d101      	bne.n	80154fe <find_volume+0x3a>
 80154fa:	230c      	movs	r3, #12
 80154fc:	e22b      	b.n	8015956 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80154fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015500:	f7fe fe95 	bl	801422e <lock_fs>
 8015504:	4603      	mov	r3, r0
 8015506:	2b00      	cmp	r3, #0
 8015508:	d101      	bne.n	801550e <find_volume+0x4a>
 801550a:	230f      	movs	r3, #15
 801550c:	e223      	b.n	8015956 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015512:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015514:	79fb      	ldrb	r3, [r7, #7]
 8015516:	f023 0301 	bic.w	r3, r3, #1
 801551a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801551c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801551e:	781b      	ldrb	r3, [r3, #0]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d01a      	beq.n	801555a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8015524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015526:	785b      	ldrb	r3, [r3, #1]
 8015528:	4618      	mov	r0, r3
 801552a:	f7fe fce1 	bl	8013ef0 <disk_status>
 801552e:	4603      	mov	r3, r0
 8015530:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015534:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015538:	f003 0301 	and.w	r3, r3, #1
 801553c:	2b00      	cmp	r3, #0
 801553e:	d10c      	bne.n	801555a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015540:	79fb      	ldrb	r3, [r7, #7]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d007      	beq.n	8015556 <find_volume+0x92>
 8015546:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801554a:	f003 0304 	and.w	r3, r3, #4
 801554e:	2b00      	cmp	r3, #0
 8015550:	d001      	beq.n	8015556 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8015552:	230a      	movs	r3, #10
 8015554:	e1ff      	b.n	8015956 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8015556:	2300      	movs	r3, #0
 8015558:	e1fd      	b.n	8015956 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801555a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801555c:	2200      	movs	r2, #0
 801555e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8015560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015562:	b2da      	uxtb	r2, r3
 8015564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015566:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8015568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801556a:	785b      	ldrb	r3, [r3, #1]
 801556c:	4618      	mov	r0, r3
 801556e:	f7fe fcd9 	bl	8013f24 <disk_initialize>
 8015572:	4603      	mov	r3, r0
 8015574:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8015578:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801557c:	f003 0301 	and.w	r3, r3, #1
 8015580:	2b00      	cmp	r3, #0
 8015582:	d001      	beq.n	8015588 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015584:	2303      	movs	r3, #3
 8015586:	e1e6      	b.n	8015956 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8015588:	79fb      	ldrb	r3, [r7, #7]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d007      	beq.n	801559e <find_volume+0xda>
 801558e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015592:	f003 0304 	and.w	r3, r3, #4
 8015596:	2b00      	cmp	r3, #0
 8015598:	d001      	beq.n	801559e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801559a:	230a      	movs	r3, #10
 801559c:	e1db      	b.n	8015956 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801559e:	2300      	movs	r3, #0
 80155a0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80155a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80155a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80155a6:	f7ff ff37 	bl	8015418 <check_fs>
 80155aa:	4603      	mov	r3, r0
 80155ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80155b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80155b4:	2b02      	cmp	r3, #2
 80155b6:	d149      	bne.n	801564c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80155b8:	2300      	movs	r3, #0
 80155ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80155bc:	e01e      	b.n	80155fc <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80155be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155c0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80155c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155c6:	011b      	lsls	r3, r3, #4
 80155c8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80155cc:	4413      	add	r3, r2
 80155ce:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80155d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155d2:	3304      	adds	r3, #4
 80155d4:	781b      	ldrb	r3, [r3, #0]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d006      	beq.n	80155e8 <find_volume+0x124>
 80155da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155dc:	3308      	adds	r3, #8
 80155de:	4618      	mov	r0, r3
 80155e0:	f7fe fd3d 	bl	801405e <ld_dword>
 80155e4:	4602      	mov	r2, r0
 80155e6:	e000      	b.n	80155ea <find_volume+0x126>
 80155e8:	2200      	movs	r2, #0
 80155ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155ec:	009b      	lsls	r3, r3, #2
 80155ee:	3358      	adds	r3, #88	@ 0x58
 80155f0:	443b      	add	r3, r7
 80155f2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80155f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155f8:	3301      	adds	r3, #1
 80155fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80155fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155fe:	2b03      	cmp	r3, #3
 8015600:	d9dd      	bls.n	80155be <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8015602:	2300      	movs	r3, #0
 8015604:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8015606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015608:	2b00      	cmp	r3, #0
 801560a:	d002      	beq.n	8015612 <find_volume+0x14e>
 801560c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801560e:	3b01      	subs	r3, #1
 8015610:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015614:	009b      	lsls	r3, r3, #2
 8015616:	3358      	adds	r3, #88	@ 0x58
 8015618:	443b      	add	r3, r7
 801561a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801561e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015622:	2b00      	cmp	r3, #0
 8015624:	d005      	beq.n	8015632 <find_volume+0x16e>
 8015626:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015628:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801562a:	f7ff fef5 	bl	8015418 <check_fs>
 801562e:	4603      	mov	r3, r0
 8015630:	e000      	b.n	8015634 <find_volume+0x170>
 8015632:	2303      	movs	r3, #3
 8015634:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015638:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801563c:	2b01      	cmp	r3, #1
 801563e:	d905      	bls.n	801564c <find_volume+0x188>
 8015640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015642:	3301      	adds	r3, #1
 8015644:	643b      	str	r3, [r7, #64]	@ 0x40
 8015646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015648:	2b03      	cmp	r3, #3
 801564a:	d9e2      	bls.n	8015612 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801564c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015650:	2b04      	cmp	r3, #4
 8015652:	d101      	bne.n	8015658 <find_volume+0x194>
 8015654:	2301      	movs	r3, #1
 8015656:	e17e      	b.n	8015956 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015658:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801565c:	2b01      	cmp	r3, #1
 801565e:	d901      	bls.n	8015664 <find_volume+0x1a0>
 8015660:	230d      	movs	r3, #13
 8015662:	e178      	b.n	8015956 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8015664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015666:	3334      	adds	r3, #52	@ 0x34
 8015668:	330b      	adds	r3, #11
 801566a:	4618      	mov	r0, r3
 801566c:	f7fe fcde 	bl	801402c <ld_word>
 8015670:	4603      	mov	r3, r0
 8015672:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015676:	d001      	beq.n	801567c <find_volume+0x1b8>
 8015678:	230d      	movs	r3, #13
 801567a:	e16c      	b.n	8015956 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801567c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801567e:	3334      	adds	r3, #52	@ 0x34
 8015680:	3316      	adds	r3, #22
 8015682:	4618      	mov	r0, r3
 8015684:	f7fe fcd2 	bl	801402c <ld_word>
 8015688:	4603      	mov	r3, r0
 801568a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801568c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801568e:	2b00      	cmp	r3, #0
 8015690:	d106      	bne.n	80156a0 <find_volume+0x1dc>
 8015692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015694:	3334      	adds	r3, #52	@ 0x34
 8015696:	3324      	adds	r3, #36	@ 0x24
 8015698:	4618      	mov	r0, r3
 801569a:	f7fe fce0 	bl	801405e <ld_dword>
 801569e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80156a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80156a4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80156a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156a8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80156ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80156b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156b2:	789b      	ldrb	r3, [r3, #2]
 80156b4:	2b01      	cmp	r3, #1
 80156b6:	d005      	beq.n	80156c4 <find_volume+0x200>
 80156b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ba:	789b      	ldrb	r3, [r3, #2]
 80156bc:	2b02      	cmp	r3, #2
 80156be:	d001      	beq.n	80156c4 <find_volume+0x200>
 80156c0:	230d      	movs	r3, #13
 80156c2:	e148      	b.n	8015956 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80156c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156c6:	789b      	ldrb	r3, [r3, #2]
 80156c8:	461a      	mov	r2, r3
 80156ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156cc:	fb02 f303 	mul.w	r3, r2, r3
 80156d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80156d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80156d8:	461a      	mov	r2, r3
 80156da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80156de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156e0:	895b      	ldrh	r3, [r3, #10]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d008      	beq.n	80156f8 <find_volume+0x234>
 80156e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156e8:	895b      	ldrh	r3, [r3, #10]
 80156ea:	461a      	mov	r2, r3
 80156ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ee:	895b      	ldrh	r3, [r3, #10]
 80156f0:	3b01      	subs	r3, #1
 80156f2:	4013      	ands	r3, r2
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d001      	beq.n	80156fc <find_volume+0x238>
 80156f8:	230d      	movs	r3, #13
 80156fa:	e12c      	b.n	8015956 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80156fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156fe:	3334      	adds	r3, #52	@ 0x34
 8015700:	3311      	adds	r3, #17
 8015702:	4618      	mov	r0, r3
 8015704:	f7fe fc92 	bl	801402c <ld_word>
 8015708:	4603      	mov	r3, r0
 801570a:	461a      	mov	r2, r3
 801570c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801570e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015712:	891b      	ldrh	r3, [r3, #8]
 8015714:	f003 030f 	and.w	r3, r3, #15
 8015718:	b29b      	uxth	r3, r3
 801571a:	2b00      	cmp	r3, #0
 801571c:	d001      	beq.n	8015722 <find_volume+0x25e>
 801571e:	230d      	movs	r3, #13
 8015720:	e119      	b.n	8015956 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015724:	3334      	adds	r3, #52	@ 0x34
 8015726:	3313      	adds	r3, #19
 8015728:	4618      	mov	r0, r3
 801572a:	f7fe fc7f 	bl	801402c <ld_word>
 801572e:	4603      	mov	r3, r0
 8015730:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015734:	2b00      	cmp	r3, #0
 8015736:	d106      	bne.n	8015746 <find_volume+0x282>
 8015738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801573a:	3334      	adds	r3, #52	@ 0x34
 801573c:	3320      	adds	r3, #32
 801573e:	4618      	mov	r0, r3
 8015740:	f7fe fc8d 	bl	801405e <ld_dword>
 8015744:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015748:	3334      	adds	r3, #52	@ 0x34
 801574a:	330e      	adds	r3, #14
 801574c:	4618      	mov	r0, r3
 801574e:	f7fe fc6d 	bl	801402c <ld_word>
 8015752:	4603      	mov	r3, r0
 8015754:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015756:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015758:	2b00      	cmp	r3, #0
 801575a:	d101      	bne.n	8015760 <find_volume+0x29c>
 801575c:	230d      	movs	r3, #13
 801575e:	e0fa      	b.n	8015956 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8015760:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015764:	4413      	add	r3, r2
 8015766:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015768:	8912      	ldrh	r2, [r2, #8]
 801576a:	0912      	lsrs	r2, r2, #4
 801576c:	b292      	uxth	r2, r2
 801576e:	4413      	add	r3, r2
 8015770:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8015772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015776:	429a      	cmp	r2, r3
 8015778:	d204      	bcs.n	8015784 <find_volume+0x2c0>
 801577a:	230d      	movs	r3, #13
 801577c:	e0eb      	b.n	8015956 <find_volume+0x492>
 801577e:	bf00      	nop
 8015780:	200017e0 	.word	0x200017e0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015788:	1ad3      	subs	r3, r2, r3
 801578a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801578c:	8952      	ldrh	r2, [r2, #10]
 801578e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015792:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015796:	2b00      	cmp	r3, #0
 8015798:	d101      	bne.n	801579e <find_volume+0x2da>
 801579a:	230d      	movs	r3, #13
 801579c:	e0db      	b.n	8015956 <find_volume+0x492>
		fmt = FS_FAT32;
 801579e:	2303      	movs	r3, #3
 80157a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80157a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157a6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80157aa:	4293      	cmp	r3, r2
 80157ac:	d802      	bhi.n	80157b4 <find_volume+0x2f0>
 80157ae:	2302      	movs	r3, #2
 80157b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80157b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157b6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80157ba:	4293      	cmp	r3, r2
 80157bc:	d802      	bhi.n	80157c4 <find_volume+0x300>
 80157be:	2301      	movs	r3, #1
 80157c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80157c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157c6:	1c9a      	adds	r2, r3, #2
 80157c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157ca:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80157cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80157d0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80157d2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80157d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80157d6:	441a      	add	r2, r3
 80157d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157da:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80157dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80157de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157e0:	441a      	add	r2, r3
 80157e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157e4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80157e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80157ea:	2b03      	cmp	r3, #3
 80157ec:	d11e      	bne.n	801582c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80157ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157f0:	3334      	adds	r3, #52	@ 0x34
 80157f2:	332a      	adds	r3, #42	@ 0x2a
 80157f4:	4618      	mov	r0, r3
 80157f6:	f7fe fc19 	bl	801402c <ld_word>
 80157fa:	4603      	mov	r3, r0
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d001      	beq.n	8015804 <find_volume+0x340>
 8015800:	230d      	movs	r3, #13
 8015802:	e0a8      	b.n	8015956 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015806:	891b      	ldrh	r3, [r3, #8]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d001      	beq.n	8015810 <find_volume+0x34c>
 801580c:	230d      	movs	r3, #13
 801580e:	e0a2      	b.n	8015956 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015812:	3334      	adds	r3, #52	@ 0x34
 8015814:	332c      	adds	r3, #44	@ 0x2c
 8015816:	4618      	mov	r0, r3
 8015818:	f7fe fc21 	bl	801405e <ld_dword>
 801581c:	4602      	mov	r2, r0
 801581e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015820:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015824:	699b      	ldr	r3, [r3, #24]
 8015826:	009b      	lsls	r3, r3, #2
 8015828:	647b      	str	r3, [r7, #68]	@ 0x44
 801582a:	e01f      	b.n	801586c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801582e:	891b      	ldrh	r3, [r3, #8]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d101      	bne.n	8015838 <find_volume+0x374>
 8015834:	230d      	movs	r3, #13
 8015836:	e08e      	b.n	8015956 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801583a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801583c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801583e:	441a      	add	r2, r3
 8015840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015842:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015844:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015848:	2b02      	cmp	r3, #2
 801584a:	d103      	bne.n	8015854 <find_volume+0x390>
 801584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801584e:	699b      	ldr	r3, [r3, #24]
 8015850:	005b      	lsls	r3, r3, #1
 8015852:	e00a      	b.n	801586a <find_volume+0x3a6>
 8015854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015856:	699a      	ldr	r2, [r3, #24]
 8015858:	4613      	mov	r3, r2
 801585a:	005b      	lsls	r3, r3, #1
 801585c:	4413      	add	r3, r2
 801585e:	085a      	lsrs	r2, r3, #1
 8015860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015862:	699b      	ldr	r3, [r3, #24]
 8015864:	f003 0301 	and.w	r3, r3, #1
 8015868:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801586a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801586c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801586e:	69da      	ldr	r2, [r3, #28]
 8015870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015872:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8015876:	0a5b      	lsrs	r3, r3, #9
 8015878:	429a      	cmp	r2, r3
 801587a:	d201      	bcs.n	8015880 <find_volume+0x3bc>
 801587c:	230d      	movs	r3, #13
 801587e:	e06a      	b.n	8015956 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015882:	f04f 32ff 	mov.w	r2, #4294967295
 8015886:	615a      	str	r2, [r3, #20]
 8015888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801588a:	695a      	ldr	r2, [r3, #20]
 801588c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801588e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8015890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015892:	2280      	movs	r2, #128	@ 0x80
 8015894:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8015896:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801589a:	2b03      	cmp	r3, #3
 801589c:	d149      	bne.n	8015932 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801589e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158a0:	3334      	adds	r3, #52	@ 0x34
 80158a2:	3330      	adds	r3, #48	@ 0x30
 80158a4:	4618      	mov	r0, r3
 80158a6:	f7fe fbc1 	bl	801402c <ld_word>
 80158aa:	4603      	mov	r3, r0
 80158ac:	2b01      	cmp	r3, #1
 80158ae:	d140      	bne.n	8015932 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80158b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80158b2:	3301      	adds	r3, #1
 80158b4:	4619      	mov	r1, r3
 80158b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80158b8:	f7fe fe9a 	bl	80145f0 <move_window>
 80158bc:	4603      	mov	r3, r0
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d137      	bne.n	8015932 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80158c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158c4:	2200      	movs	r2, #0
 80158c6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80158c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158ca:	3334      	adds	r3, #52	@ 0x34
 80158cc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7fe fbab 	bl	801402c <ld_word>
 80158d6:	4603      	mov	r3, r0
 80158d8:	461a      	mov	r2, r3
 80158da:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80158de:	429a      	cmp	r2, r3
 80158e0:	d127      	bne.n	8015932 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80158e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158e4:	3334      	adds	r3, #52	@ 0x34
 80158e6:	4618      	mov	r0, r3
 80158e8:	f7fe fbb9 	bl	801405e <ld_dword>
 80158ec:	4603      	mov	r3, r0
 80158ee:	4a1c      	ldr	r2, [pc, #112]	@ (8015960 <find_volume+0x49c>)
 80158f0:	4293      	cmp	r3, r2
 80158f2:	d11e      	bne.n	8015932 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80158f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158f6:	3334      	adds	r3, #52	@ 0x34
 80158f8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7fe fbae 	bl	801405e <ld_dword>
 8015902:	4603      	mov	r3, r0
 8015904:	4a17      	ldr	r2, [pc, #92]	@ (8015964 <find_volume+0x4a0>)
 8015906:	4293      	cmp	r3, r2
 8015908:	d113      	bne.n	8015932 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801590c:	3334      	adds	r3, #52	@ 0x34
 801590e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8015912:	4618      	mov	r0, r3
 8015914:	f7fe fba3 	bl	801405e <ld_dword>
 8015918:	4602      	mov	r2, r0
 801591a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801591c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801591e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015920:	3334      	adds	r3, #52	@ 0x34
 8015922:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8015926:	4618      	mov	r0, r3
 8015928:	f7fe fb99 	bl	801405e <ld_dword>
 801592c:	4602      	mov	r2, r0
 801592e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015930:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8015932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015934:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8015938:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801593a:	4b0b      	ldr	r3, [pc, #44]	@ (8015968 <find_volume+0x4a4>)
 801593c:	881b      	ldrh	r3, [r3, #0]
 801593e:	3301      	adds	r3, #1
 8015940:	b29a      	uxth	r2, r3
 8015942:	4b09      	ldr	r3, [pc, #36]	@ (8015968 <find_volume+0x4a4>)
 8015944:	801a      	strh	r2, [r3, #0]
 8015946:	4b08      	ldr	r3, [pc, #32]	@ (8015968 <find_volume+0x4a4>)
 8015948:	881a      	ldrh	r2, [r3, #0]
 801594a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801594c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801594e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015950:	f7fe fde6 	bl	8014520 <clear_lock>
#endif
	return FR_OK;
 8015954:	2300      	movs	r3, #0
}
 8015956:	4618      	mov	r0, r3
 8015958:	3758      	adds	r7, #88	@ 0x58
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
 801595e:	bf00      	nop
 8015960:	41615252 	.word	0x41615252
 8015964:	61417272 	.word	0x61417272
 8015968:	200017e4 	.word	0x200017e4

0801596c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b084      	sub	sp, #16
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8015976:	2309      	movs	r3, #9
 8015978:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d02e      	beq.n	80159de <validate+0x72>
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d02a      	beq.n	80159de <validate+0x72>
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	781b      	ldrb	r3, [r3, #0]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d025      	beq.n	80159de <validate+0x72>
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	889a      	ldrh	r2, [r3, #4]
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	88db      	ldrh	r3, [r3, #6]
 801599c:	429a      	cmp	r2, r3
 801599e:	d11e      	bne.n	80159de <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	4618      	mov	r0, r3
 80159a6:	f7fe fc42 	bl	801422e <lock_fs>
 80159aa:	4603      	mov	r3, r0
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d014      	beq.n	80159da <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	785b      	ldrb	r3, [r3, #1]
 80159b6:	4618      	mov	r0, r3
 80159b8:	f7fe fa9a 	bl	8013ef0 <disk_status>
 80159bc:	4603      	mov	r3, r0
 80159be:	f003 0301 	and.w	r3, r3, #1
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d102      	bne.n	80159cc <validate+0x60>
				res = FR_OK;
 80159c6:	2300      	movs	r3, #0
 80159c8:	73fb      	strb	r3, [r7, #15]
 80159ca:	e008      	b.n	80159de <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	2100      	movs	r1, #0
 80159d2:	4618      	mov	r0, r3
 80159d4:	f7fe fc41 	bl	801425a <unlock_fs>
 80159d8:	e001      	b.n	80159de <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80159da:	230f      	movs	r3, #15
 80159dc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80159de:	7bfb      	ldrb	r3, [r7, #15]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d102      	bne.n	80159ea <validate+0x7e>
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	e000      	b.n	80159ec <validate+0x80>
 80159ea:	2300      	movs	r3, #0
 80159ec:	683a      	ldr	r2, [r7, #0]
 80159ee:	6013      	str	r3, [r2, #0]
	return res;
 80159f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3710      	adds	r7, #16
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
	...

080159fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b088      	sub	sp, #32
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	60f8      	str	r0, [r7, #12]
 8015a04:	60b9      	str	r1, [r7, #8]
 8015a06:	4613      	mov	r3, r2
 8015a08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8015a0a:	68bb      	ldr	r3, [r7, #8]
 8015a0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8015a0e:	f107 0310 	add.w	r3, r7, #16
 8015a12:	4618      	mov	r0, r3
 8015a14:	f7ff fcbb 	bl	801538e <get_ldnumber>
 8015a18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8015a1a:	69fb      	ldr	r3, [r7, #28]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	da01      	bge.n	8015a24 <f_mount+0x28>
 8015a20:	230b      	movs	r3, #11
 8015a22:	e048      	b.n	8015ab6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8015a24:	4a26      	ldr	r2, [pc, #152]	@ (8015ac0 <f_mount+0xc4>)
 8015a26:	69fb      	ldr	r3, [r7, #28]
 8015a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8015a2e:	69bb      	ldr	r3, [r7, #24]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d00f      	beq.n	8015a54 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8015a34:	69b8      	ldr	r0, [r7, #24]
 8015a36:	f7fe fd73 	bl	8014520 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8015a3a:	69bb      	ldr	r3, [r7, #24]
 8015a3c:	68db      	ldr	r3, [r3, #12]
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f000 fde7 	bl	8016612 <ff_del_syncobj>
 8015a44:	4603      	mov	r3, r0
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d101      	bne.n	8015a4e <f_mount+0x52>
 8015a4a:	2302      	movs	r3, #2
 8015a4c:	e033      	b.n	8015ab6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8015a4e:	69bb      	ldr	r3, [r7, #24]
 8015a50:	2200      	movs	r2, #0
 8015a52:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d00f      	beq.n	8015a7a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8015a60:	69fb      	ldr	r3, [r7, #28]
 8015a62:	b2da      	uxtb	r2, r3
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	330c      	adds	r3, #12
 8015a68:	4619      	mov	r1, r3
 8015a6a:	4610      	mov	r0, r2
 8015a6c:	f000 fdb1 	bl	80165d2 <ff_cre_syncobj>
 8015a70:	4603      	mov	r3, r0
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d101      	bne.n	8015a7a <f_mount+0x7e>
 8015a76:	2302      	movs	r3, #2
 8015a78:	e01d      	b.n	8015ab6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8015a7a:	68fa      	ldr	r2, [r7, #12]
 8015a7c:	4910      	ldr	r1, [pc, #64]	@ (8015ac0 <f_mount+0xc4>)
 8015a7e:	69fb      	ldr	r3, [r7, #28]
 8015a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d002      	beq.n	8015a90 <f_mount+0x94>
 8015a8a:	79fb      	ldrb	r3, [r7, #7]
 8015a8c:	2b01      	cmp	r3, #1
 8015a8e:	d001      	beq.n	8015a94 <f_mount+0x98>
 8015a90:	2300      	movs	r3, #0
 8015a92:	e010      	b.n	8015ab6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8015a94:	f107 010c 	add.w	r1, r7, #12
 8015a98:	f107 0308 	add.w	r3, r7, #8
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f7ff fd10 	bl	80154c4 <find_volume>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	7dfa      	ldrb	r2, [r7, #23]
 8015aac:	4611      	mov	r1, r2
 8015aae:	4618      	mov	r0, r3
 8015ab0:	f7fe fbd3 	bl	801425a <unlock_fs>
 8015ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3720      	adds	r7, #32
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}
 8015abe:	bf00      	nop
 8015ac0:	200017e0 	.word	0x200017e0

08015ac4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b098      	sub	sp, #96	@ 0x60
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	60f8      	str	r0, [r7, #12]
 8015acc:	60b9      	str	r1, [r7, #8]
 8015ace:	4613      	mov	r3, r2
 8015ad0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d101      	bne.n	8015adc <f_open+0x18>
 8015ad8:	2309      	movs	r3, #9
 8015ada:	e1b0      	b.n	8015e3e <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8015adc:	79fb      	ldrb	r3, [r7, #7]
 8015ade:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015ae2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8015ae4:	79fa      	ldrb	r2, [r7, #7]
 8015ae6:	f107 0110 	add.w	r1, r7, #16
 8015aea:	f107 0308 	add.w	r3, r7, #8
 8015aee:	4618      	mov	r0, r3
 8015af0:	f7ff fce8 	bl	80154c4 <find_volume>
 8015af4:	4603      	mov	r3, r0
 8015af6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8015afa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	f040 818d 	bne.w	8015e1e <f_open+0x35a>
		dj.obj.fs = fs;
 8015b04:	693b      	ldr	r3, [r7, #16]
 8015b06:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015b08:	68ba      	ldr	r2, [r7, #8]
 8015b0a:	f107 0314 	add.w	r3, r7, #20
 8015b0e:	4611      	mov	r1, r2
 8015b10:	4618      	mov	r0, r3
 8015b12:	f7ff fbcb 	bl	80152ac <follow_path>
 8015b16:	4603      	mov	r3, r0
 8015b18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015b1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d118      	bne.n	8015b56 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015b24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015b28:	b25b      	sxtb	r3, r3
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	da03      	bge.n	8015b36 <f_open+0x72>
				res = FR_INVALID_NAME;
 8015b2e:	2306      	movs	r3, #6
 8015b30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015b34:	e00f      	b.n	8015b56 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015b36:	79fb      	ldrb	r3, [r7, #7]
 8015b38:	2b01      	cmp	r3, #1
 8015b3a:	bf8c      	ite	hi
 8015b3c:	2301      	movhi	r3, #1
 8015b3e:	2300      	movls	r3, #0
 8015b40:	b2db      	uxtb	r3, r3
 8015b42:	461a      	mov	r2, r3
 8015b44:	f107 0314 	add.w	r3, r7, #20
 8015b48:	4611      	mov	r1, r2
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7fe fba0 	bl	8014290 <chk_lock>
 8015b50:	4603      	mov	r3, r0
 8015b52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015b56:	79fb      	ldrb	r3, [r7, #7]
 8015b58:	f003 031c 	and.w	r3, r3, #28
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d07f      	beq.n	8015c60 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8015b60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d017      	beq.n	8015b98 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015b68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015b6c:	2b04      	cmp	r3, #4
 8015b6e:	d10e      	bne.n	8015b8e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015b70:	f7fe fbea 	bl	8014348 <enq_lock>
 8015b74:	4603      	mov	r3, r0
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d006      	beq.n	8015b88 <f_open+0xc4>
 8015b7a:	f107 0314 	add.w	r3, r7, #20
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7ff face 	bl	8015120 <dir_register>
 8015b84:	4603      	mov	r3, r0
 8015b86:	e000      	b.n	8015b8a <f_open+0xc6>
 8015b88:	2312      	movs	r3, #18
 8015b8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015b8e:	79fb      	ldrb	r3, [r7, #7]
 8015b90:	f043 0308 	orr.w	r3, r3, #8
 8015b94:	71fb      	strb	r3, [r7, #7]
 8015b96:	e010      	b.n	8015bba <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015b98:	7ebb      	ldrb	r3, [r7, #26]
 8015b9a:	f003 0311 	and.w	r3, r3, #17
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d003      	beq.n	8015baa <f_open+0xe6>
					res = FR_DENIED;
 8015ba2:	2307      	movs	r3, #7
 8015ba4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015ba8:	e007      	b.n	8015bba <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015baa:	79fb      	ldrb	r3, [r7, #7]
 8015bac:	f003 0304 	and.w	r3, r3, #4
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d002      	beq.n	8015bba <f_open+0xf6>
 8015bb4:	2308      	movs	r3, #8
 8015bb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015bba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d168      	bne.n	8015c94 <f_open+0x1d0>
 8015bc2:	79fb      	ldrb	r3, [r7, #7]
 8015bc4:	f003 0308 	and.w	r3, r3, #8
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d063      	beq.n	8015c94 <f_open+0x1d0>
				dw = GET_FATTIME();
 8015bcc:	f7fb fdcc 	bl	8011768 <get_fattime>
 8015bd0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8015bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bd4:	330e      	adds	r3, #14
 8015bd6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7fe fa7e 	bl	80140da <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8015bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015be0:	3316      	adds	r3, #22
 8015be2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7fe fa78 	bl	80140da <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8015bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bec:	330b      	adds	r3, #11
 8015bee:	2220      	movs	r2, #32
 8015bf0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8015bf2:	693b      	ldr	r3, [r7, #16]
 8015bf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015bf6:	4611      	mov	r1, r2
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f7ff f9fd 	bl	8014ff8 <ld_clust>
 8015bfe:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8015c00:	693b      	ldr	r3, [r7, #16]
 8015c02:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015c04:	2200      	movs	r2, #0
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7ff fa15 	bl	8015036 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8015c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c0e:	331c      	adds	r3, #28
 8015c10:	2100      	movs	r1, #0
 8015c12:	4618      	mov	r0, r3
 8015c14:	f7fe fa61 	bl	80140da <st_dword>
					fs->wflag = 1;
 8015c18:	693b      	ldr	r3, [r7, #16]
 8015c1a:	2201      	movs	r2, #1
 8015c1c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8015c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d037      	beq.n	8015c94 <f_open+0x1d0>
						dw = fs->winsect;
 8015c24:	693b      	ldr	r3, [r7, #16]
 8015c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015c28:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8015c2a:	f107 0314 	add.w	r3, r7, #20
 8015c2e:	2200      	movs	r2, #0
 8015c30:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8015c32:	4618      	mov	r0, r3
 8015c34:	f7fe ff28 	bl	8014a88 <remove_chain>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8015c3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d126      	bne.n	8015c94 <f_open+0x1d0>
							res = move_window(fs, dw);
 8015c46:	693b      	ldr	r3, [r7, #16]
 8015c48:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f7fe fcd0 	bl	80145f0 <move_window>
 8015c50:	4603      	mov	r3, r0
 8015c52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8015c56:	693b      	ldr	r3, [r7, #16]
 8015c58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015c5a:	3a01      	subs	r2, #1
 8015c5c:	611a      	str	r2, [r3, #16]
 8015c5e:	e019      	b.n	8015c94 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8015c60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d115      	bne.n	8015c94 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015c68:	7ebb      	ldrb	r3, [r7, #26]
 8015c6a:	f003 0310 	and.w	r3, r3, #16
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d003      	beq.n	8015c7a <f_open+0x1b6>
					res = FR_NO_FILE;
 8015c72:	2304      	movs	r3, #4
 8015c74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015c78:	e00c      	b.n	8015c94 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8015c7a:	79fb      	ldrb	r3, [r7, #7]
 8015c7c:	f003 0302 	and.w	r3, r3, #2
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d007      	beq.n	8015c94 <f_open+0x1d0>
 8015c84:	7ebb      	ldrb	r3, [r7, #26]
 8015c86:	f003 0301 	and.w	r3, r3, #1
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d002      	beq.n	8015c94 <f_open+0x1d0>
						res = FR_DENIED;
 8015c8e:	2307      	movs	r3, #7
 8015c90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8015c94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d126      	bne.n	8015cea <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015c9c:	79fb      	ldrb	r3, [r7, #7]
 8015c9e:	f003 0308 	and.w	r3, r3, #8
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d003      	beq.n	8015cae <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8015ca6:	79fb      	ldrb	r3, [r7, #7]
 8015ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015cac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8015cb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015cbc:	79fb      	ldrb	r3, [r7, #7]
 8015cbe:	2b01      	cmp	r3, #1
 8015cc0:	bf8c      	ite	hi
 8015cc2:	2301      	movhi	r3, #1
 8015cc4:	2300      	movls	r3, #0
 8015cc6:	b2db      	uxtb	r3, r3
 8015cc8:	461a      	mov	r2, r3
 8015cca:	f107 0314 	add.w	r3, r7, #20
 8015cce:	4611      	mov	r1, r2
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f7fe fb5b 	bl	801438c <inc_lock>
 8015cd6:	4602      	mov	r2, r0
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	691b      	ldr	r3, [r3, #16]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d102      	bne.n	8015cea <f_open+0x226>
 8015ce4:	2302      	movs	r3, #2
 8015ce6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8015cea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	f040 8095 	bne.w	8015e1e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015cf4:	693b      	ldr	r3, [r7, #16]
 8015cf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015cf8:	4611      	mov	r1, r2
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7ff f97c 	bl	8014ff8 <ld_clust>
 8015d00:	4602      	mov	r2, r0
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d08:	331c      	adds	r3, #28
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7fe f9a7 	bl	801405e <ld_dword>
 8015d10:	4602      	mov	r2, r0
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	2200      	movs	r2, #0
 8015d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8015d1c:	693a      	ldr	r2, [r7, #16]
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	88da      	ldrh	r2, [r3, #6]
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	79fa      	ldrb	r2, [r7, #7]
 8015d2e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	2200      	movs	r2, #0
 8015d34:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	2200      	movs	r2, #0
 8015d3a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	3330      	adds	r3, #48	@ 0x30
 8015d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015d4a:	2100      	movs	r1, #0
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f7fe fa11 	bl	8014174 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8015d52:	79fb      	ldrb	r3, [r7, #7]
 8015d54:	f003 0320 	and.w	r3, r3, #32
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d060      	beq.n	8015e1e <f_open+0x35a>
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	68db      	ldr	r3, [r3, #12]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d05c      	beq.n	8015e1e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	68da      	ldr	r2, [r3, #12]
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	895b      	ldrh	r3, [r3, #10]
 8015d70:	025b      	lsls	r3, r3, #9
 8015d72:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	689b      	ldr	r3, [r3, #8]
 8015d78:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	68db      	ldr	r3, [r3, #12]
 8015d7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8015d80:	e016      	b.n	8015db0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8015d86:	4618      	mov	r0, r3
 8015d88:	f7fe fced 	bl	8014766 <get_fat>
 8015d8c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8015d8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015d90:	2b01      	cmp	r3, #1
 8015d92:	d802      	bhi.n	8015d9a <f_open+0x2d6>
 8015d94:	2302      	movs	r3, #2
 8015d96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015da0:	d102      	bne.n	8015da8 <f_open+0x2e4>
 8015da2:	2301      	movs	r3, #1
 8015da4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015da8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015dac:	1ad3      	subs	r3, r2, r3
 8015dae:	657b      	str	r3, [r7, #84]	@ 0x54
 8015db0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d103      	bne.n	8015dc0 <f_open+0x2fc>
 8015db8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	d8e0      	bhi.n	8015d82 <f_open+0x2be>
				}
				fp->clust = clst;
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015dc4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d127      	bne.n	8015e1e <f_open+0x35a>
 8015dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d022      	beq.n	8015e1e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015dd8:	693b      	ldr	r3, [r7, #16]
 8015dda:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7fe fca3 	bl	8014728 <clust2sect>
 8015de2:	6478      	str	r0, [r7, #68]	@ 0x44
 8015de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d103      	bne.n	8015df2 <f_open+0x32e>
						res = FR_INT_ERR;
 8015dea:	2302      	movs	r3, #2
 8015dec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015df0:	e015      	b.n	8015e1e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8015df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015df4:	0a5a      	lsrs	r2, r3, #9
 8015df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015df8:	441a      	add	r2, r3
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	7858      	ldrb	r0, [r3, #1]
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	6a1a      	ldr	r2, [r3, #32]
 8015e0c:	2301      	movs	r3, #1
 8015e0e:	f7fe f8af 	bl	8013f70 <disk_read>
 8015e12:	4603      	mov	r3, r0
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d002      	beq.n	8015e1e <f_open+0x35a>
 8015e18:	2301      	movs	r3, #1
 8015e1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8015e1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d002      	beq.n	8015e2c <f_open+0x368>
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	2200      	movs	r2, #0
 8015e2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015e2c:	693b      	ldr	r3, [r7, #16]
 8015e2e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8015e32:	4611      	mov	r1, r2
 8015e34:	4618      	mov	r0, r3
 8015e36:	f7fe fa10 	bl	801425a <unlock_fs>
 8015e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3760      	adds	r7, #96	@ 0x60
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}

08015e46 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8015e46:	b580      	push	{r7, lr}
 8015e48:	b08c      	sub	sp, #48	@ 0x30
 8015e4a:	af00      	add	r7, sp, #0
 8015e4c:	60f8      	str	r0, [r7, #12]
 8015e4e:	60b9      	str	r1, [r7, #8]
 8015e50:	607a      	str	r2, [r7, #4]
 8015e52:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8015e58:	683b      	ldr	r3, [r7, #0]
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	f107 0210 	add.w	r2, r7, #16
 8015e64:	4611      	mov	r1, r2
 8015e66:	4618      	mov	r0, r3
 8015e68:	f7ff fd80 	bl	801596c <validate>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015e72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d107      	bne.n	8015e8a <f_write+0x44>
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	7d5b      	ldrb	r3, [r3, #21]
 8015e7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8015e82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d009      	beq.n	8015e9e <f_write+0x58>
 8015e8a:	693b      	ldr	r3, [r7, #16]
 8015e8c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8015e90:	4611      	mov	r1, r2
 8015e92:	4618      	mov	r0, r3
 8015e94:	f7fe f9e1 	bl	801425a <unlock_fs>
 8015e98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015e9c:	e173      	b.n	8016186 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	7d1b      	ldrb	r3, [r3, #20]
 8015ea2:	f003 0302 	and.w	r3, r3, #2
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d106      	bne.n	8015eb8 <f_write+0x72>
 8015eaa:	693b      	ldr	r3, [r7, #16]
 8015eac:	2107      	movs	r1, #7
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7fe f9d3 	bl	801425a <unlock_fs>
 8015eb4:	2307      	movs	r3, #7
 8015eb6:	e166      	b.n	8016186 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	699a      	ldr	r2, [r3, #24]
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	441a      	add	r2, r3
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	699b      	ldr	r3, [r3, #24]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	f080 814b 	bcs.w	8016160 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	699b      	ldr	r3, [r3, #24]
 8015ece:	43db      	mvns	r3, r3
 8015ed0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015ed2:	e145      	b.n	8016160 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	699b      	ldr	r3, [r3, #24]
 8015ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	f040 8101 	bne.w	80160e4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	699b      	ldr	r3, [r3, #24]
 8015ee6:	0a5b      	lsrs	r3, r3, #9
 8015ee8:	693a      	ldr	r2, [r7, #16]
 8015eea:	8952      	ldrh	r2, [r2, #10]
 8015eec:	3a01      	subs	r2, #1
 8015eee:	4013      	ands	r3, r2
 8015ef0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015ef2:	69bb      	ldr	r3, [r7, #24]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d14d      	bne.n	8015f94 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	699b      	ldr	r3, [r3, #24]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d10c      	bne.n	8015f1a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	689b      	ldr	r3, [r3, #8]
 8015f04:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d11a      	bne.n	8015f42 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	2100      	movs	r1, #0
 8015f10:	4618      	mov	r0, r3
 8015f12:	f7fe fe1e 	bl	8014b52 <create_chain>
 8015f16:	62b8      	str	r0, [r7, #40]	@ 0x28
 8015f18:	e013      	b.n	8015f42 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d007      	beq.n	8015f32 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	699b      	ldr	r3, [r3, #24]
 8015f26:	4619      	mov	r1, r3
 8015f28:	68f8      	ldr	r0, [r7, #12]
 8015f2a:	f7fe feaa 	bl	8014c82 <clmt_clust>
 8015f2e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8015f30:	e007      	b.n	8015f42 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015f32:	68fa      	ldr	r2, [r7, #12]
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	69db      	ldr	r3, [r3, #28]
 8015f38:	4619      	mov	r1, r3
 8015f3a:	4610      	mov	r0, r2
 8015f3c:	f7fe fe09 	bl	8014b52 <create_chain>
 8015f40:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	f000 8110 	beq.w	801616a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f4c:	2b01      	cmp	r3, #1
 8015f4e:	d109      	bne.n	8015f64 <f_write+0x11e>
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	2202      	movs	r2, #2
 8015f54:	755a      	strb	r2, [r3, #21]
 8015f56:	693b      	ldr	r3, [r7, #16]
 8015f58:	2102      	movs	r1, #2
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f7fe f97d 	bl	801425a <unlock_fs>
 8015f60:	2302      	movs	r3, #2
 8015f62:	e110      	b.n	8016186 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f6a:	d109      	bne.n	8015f80 <f_write+0x13a>
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	2201      	movs	r2, #1
 8015f70:	755a      	strb	r2, [r3, #21]
 8015f72:	693b      	ldr	r3, [r7, #16]
 8015f74:	2101      	movs	r1, #1
 8015f76:	4618      	mov	r0, r3
 8015f78:	f7fe f96f 	bl	801425a <unlock_fs>
 8015f7c:	2301      	movs	r3, #1
 8015f7e:	e102      	b.n	8016186 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f84:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	689b      	ldr	r3, [r3, #8]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d102      	bne.n	8015f94 <f_write+0x14e>
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f92:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	7d1b      	ldrb	r3, [r3, #20]
 8015f98:	b25b      	sxtb	r3, r3
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	da1d      	bge.n	8015fda <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015f9e:	693b      	ldr	r3, [r7, #16]
 8015fa0:	7858      	ldrb	r0, [r3, #1]
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	6a1a      	ldr	r2, [r3, #32]
 8015fac:	2301      	movs	r3, #1
 8015fae:	f7fd ffff 	bl	8013fb0 <disk_write>
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d009      	beq.n	8015fcc <f_write+0x186>
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	2201      	movs	r2, #1
 8015fbc:	755a      	strb	r2, [r3, #21]
 8015fbe:	693b      	ldr	r3, [r7, #16]
 8015fc0:	2101      	movs	r1, #1
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	f7fe f949 	bl	801425a <unlock_fs>
 8015fc8:	2301      	movs	r3, #1
 8015fca:	e0dc      	b.n	8016186 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	7d1b      	ldrb	r3, [r3, #20]
 8015fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015fd4:	b2da      	uxtb	r2, r3
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015fda:	693a      	ldr	r2, [r7, #16]
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	69db      	ldr	r3, [r3, #28]
 8015fe0:	4619      	mov	r1, r3
 8015fe2:	4610      	mov	r0, r2
 8015fe4:	f7fe fba0 	bl	8014728 <clust2sect>
 8015fe8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d109      	bne.n	8016004 <f_write+0x1be>
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	2202      	movs	r2, #2
 8015ff4:	755a      	strb	r2, [r3, #21]
 8015ff6:	693b      	ldr	r3, [r7, #16]
 8015ff8:	2102      	movs	r1, #2
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f7fe f92d 	bl	801425a <unlock_fs>
 8016000:	2302      	movs	r3, #2
 8016002:	e0c0      	b.n	8016186 <f_write+0x340>
			sect += csect;
 8016004:	697a      	ldr	r2, [r7, #20]
 8016006:	69bb      	ldr	r3, [r7, #24]
 8016008:	4413      	add	r3, r2
 801600a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	0a5b      	lsrs	r3, r3, #9
 8016010:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016012:	6a3b      	ldr	r3, [r7, #32]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d041      	beq.n	801609c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016018:	69ba      	ldr	r2, [r7, #24]
 801601a:	6a3b      	ldr	r3, [r7, #32]
 801601c:	4413      	add	r3, r2
 801601e:	693a      	ldr	r2, [r7, #16]
 8016020:	8952      	ldrh	r2, [r2, #10]
 8016022:	4293      	cmp	r3, r2
 8016024:	d905      	bls.n	8016032 <f_write+0x1ec>
					cc = fs->csize - csect;
 8016026:	693b      	ldr	r3, [r7, #16]
 8016028:	895b      	ldrh	r3, [r3, #10]
 801602a:	461a      	mov	r2, r3
 801602c:	69bb      	ldr	r3, [r7, #24]
 801602e:	1ad3      	subs	r3, r2, r3
 8016030:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	7858      	ldrb	r0, [r3, #1]
 8016036:	6a3b      	ldr	r3, [r7, #32]
 8016038:	697a      	ldr	r2, [r7, #20]
 801603a:	69f9      	ldr	r1, [r7, #28]
 801603c:	f7fd ffb8 	bl	8013fb0 <disk_write>
 8016040:	4603      	mov	r3, r0
 8016042:	2b00      	cmp	r3, #0
 8016044:	d009      	beq.n	801605a <f_write+0x214>
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	2201      	movs	r2, #1
 801604a:	755a      	strb	r2, [r3, #21]
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	2101      	movs	r1, #1
 8016050:	4618      	mov	r0, r3
 8016052:	f7fe f902 	bl	801425a <unlock_fs>
 8016056:	2301      	movs	r3, #1
 8016058:	e095      	b.n	8016186 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	6a1a      	ldr	r2, [r3, #32]
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	1ad3      	subs	r3, r2, r3
 8016062:	6a3a      	ldr	r2, [r7, #32]
 8016064:	429a      	cmp	r2, r3
 8016066:	d915      	bls.n	8016094 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	6a1a      	ldr	r2, [r3, #32]
 8016072:	697b      	ldr	r3, [r7, #20]
 8016074:	1ad3      	subs	r3, r2, r3
 8016076:	025b      	lsls	r3, r3, #9
 8016078:	69fa      	ldr	r2, [r7, #28]
 801607a:	4413      	add	r3, r2
 801607c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016080:	4619      	mov	r1, r3
 8016082:	f7fe f856 	bl	8014132 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	7d1b      	ldrb	r3, [r3, #20]
 801608a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801608e:	b2da      	uxtb	r2, r3
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016094:	6a3b      	ldr	r3, [r7, #32]
 8016096:	025b      	lsls	r3, r3, #9
 8016098:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801609a:	e044      	b.n	8016126 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	6a1b      	ldr	r3, [r3, #32]
 80160a0:	697a      	ldr	r2, [r7, #20]
 80160a2:	429a      	cmp	r2, r3
 80160a4:	d01b      	beq.n	80160de <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	699a      	ldr	r2, [r3, #24]
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d215      	bcs.n	80160de <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80160b2:	693b      	ldr	r3, [r7, #16]
 80160b4:	7858      	ldrb	r0, [r3, #1]
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80160bc:	2301      	movs	r3, #1
 80160be:	697a      	ldr	r2, [r7, #20]
 80160c0:	f7fd ff56 	bl	8013f70 <disk_read>
 80160c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d009      	beq.n	80160de <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	2201      	movs	r2, #1
 80160ce:	755a      	strb	r2, [r3, #21]
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	2101      	movs	r1, #1
 80160d4:	4618      	mov	r0, r3
 80160d6:	f7fe f8c0 	bl	801425a <unlock_fs>
 80160da:	2301      	movs	r3, #1
 80160dc:	e053      	b.n	8016186 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	697a      	ldr	r2, [r7, #20]
 80160e2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	699b      	ldr	r3, [r3, #24]
 80160e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80160ec:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80160f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80160f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d901      	bls.n	80160fe <f_write+0x2b8>
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	699b      	ldr	r3, [r3, #24]
 8016108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801610c:	4413      	add	r3, r2
 801610e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016110:	69f9      	ldr	r1, [r7, #28]
 8016112:	4618      	mov	r0, r3
 8016114:	f7fe f80d 	bl	8014132 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	7d1b      	ldrb	r3, [r3, #20]
 801611c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016120:	b2da      	uxtb	r2, r3
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016126:	69fa      	ldr	r2, [r7, #28]
 8016128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801612a:	4413      	add	r3, r2
 801612c:	61fb      	str	r3, [r7, #28]
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	699a      	ldr	r2, [r3, #24]
 8016132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016134:	441a      	add	r2, r3
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	619a      	str	r2, [r3, #24]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	68da      	ldr	r2, [r3, #12]
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	699b      	ldr	r3, [r3, #24]
 8016142:	429a      	cmp	r2, r3
 8016144:	bf38      	it	cc
 8016146:	461a      	movcc	r2, r3
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	60da      	str	r2, [r3, #12]
 801614c:	683b      	ldr	r3, [r7, #0]
 801614e:	681a      	ldr	r2, [r3, #0]
 8016150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016152:	441a      	add	r2, r3
 8016154:	683b      	ldr	r3, [r7, #0]
 8016156:	601a      	str	r2, [r3, #0]
 8016158:	687a      	ldr	r2, [r7, #4]
 801615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801615c:	1ad3      	subs	r3, r2, r3
 801615e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	2b00      	cmp	r3, #0
 8016164:	f47f aeb6 	bne.w	8015ed4 <f_write+0x8e>
 8016168:	e000      	b.n	801616c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801616a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	7d1b      	ldrb	r3, [r3, #20]
 8016170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016174:	b2da      	uxtb	r2, r3
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801617a:	693b      	ldr	r3, [r7, #16]
 801617c:	2100      	movs	r1, #0
 801617e:	4618      	mov	r0, r3
 8016180:	f7fe f86b 	bl	801425a <unlock_fs>
 8016184:	2300      	movs	r3, #0
}
 8016186:	4618      	mov	r0, r3
 8016188:	3730      	adds	r7, #48	@ 0x30
 801618a:	46bd      	mov	sp, r7
 801618c:	bd80      	pop	{r7, pc}

0801618e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801618e:	b580      	push	{r7, lr}
 8016190:	b086      	sub	sp, #24
 8016192:	af00      	add	r7, sp, #0
 8016194:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	f107 0208 	add.w	r2, r7, #8
 801619c:	4611      	mov	r1, r2
 801619e:	4618      	mov	r0, r3
 80161a0:	f7ff fbe4 	bl	801596c <validate>
 80161a4:	4603      	mov	r3, r0
 80161a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80161a8:	7dfb      	ldrb	r3, [r7, #23]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d16d      	bne.n	801628a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	7d1b      	ldrb	r3, [r3, #20]
 80161b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d067      	beq.n	801628a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	7d1b      	ldrb	r3, [r3, #20]
 80161be:	b25b      	sxtb	r3, r3
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	da1a      	bge.n	80161fa <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	7858      	ldrb	r0, [r3, #1]
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	6a1a      	ldr	r2, [r3, #32]
 80161d2:	2301      	movs	r3, #1
 80161d4:	f7fd feec 	bl	8013fb0 <disk_write>
 80161d8:	4603      	mov	r3, r0
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d006      	beq.n	80161ec <f_sync+0x5e>
 80161de:	68bb      	ldr	r3, [r7, #8]
 80161e0:	2101      	movs	r1, #1
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7fe f839 	bl	801425a <unlock_fs>
 80161e8:	2301      	movs	r3, #1
 80161ea:	e055      	b.n	8016298 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	7d1b      	ldrb	r3, [r3, #20]
 80161f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80161f4:	b2da      	uxtb	r2, r3
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80161fa:	f7fb fab5 	bl	8011768 <get_fattime>
 80161fe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8016200:	68ba      	ldr	r2, [r7, #8]
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016206:	4619      	mov	r1, r3
 8016208:	4610      	mov	r0, r2
 801620a:	f7fe f9f1 	bl	80145f0 <move_window>
 801620e:	4603      	mov	r3, r0
 8016210:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8016212:	7dfb      	ldrb	r3, [r7, #23]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d138      	bne.n	801628a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801621c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	330b      	adds	r3, #11
 8016222:	781a      	ldrb	r2, [r3, #0]
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	330b      	adds	r3, #11
 8016228:	f042 0220 	orr.w	r2, r2, #32
 801622c:	b2d2      	uxtb	r2, r2
 801622e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	6818      	ldr	r0, [r3, #0]
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	689b      	ldr	r3, [r3, #8]
 8016238:	461a      	mov	r2, r3
 801623a:	68f9      	ldr	r1, [r7, #12]
 801623c:	f7fe fefb 	bl	8015036 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	f103 021c 	add.w	r2, r3, #28
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	68db      	ldr	r3, [r3, #12]
 801624a:	4619      	mov	r1, r3
 801624c:	4610      	mov	r0, r2
 801624e:	f7fd ff44 	bl	80140da <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	3316      	adds	r3, #22
 8016256:	6939      	ldr	r1, [r7, #16]
 8016258:	4618      	mov	r0, r3
 801625a:	f7fd ff3e 	bl	80140da <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	3312      	adds	r3, #18
 8016262:	2100      	movs	r1, #0
 8016264:	4618      	mov	r0, r3
 8016266:	f7fd ff1d 	bl	80140a4 <st_word>
					fs->wflag = 1;
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	2201      	movs	r2, #1
 801626e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	4618      	mov	r0, r3
 8016274:	f7fe f9ea 	bl	801464c <sync_fs>
 8016278:	4603      	mov	r3, r0
 801627a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	7d1b      	ldrb	r3, [r3, #20]
 8016280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016284:	b2da      	uxtb	r2, r3
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	7dfa      	ldrb	r2, [r7, #23]
 801628e:	4611      	mov	r1, r2
 8016290:	4618      	mov	r0, r3
 8016292:	f7fd ffe2 	bl	801425a <unlock_fs>
 8016296:	7dfb      	ldrb	r3, [r7, #23]
}
 8016298:	4618      	mov	r0, r3
 801629a:	3718      	adds	r7, #24
 801629c:	46bd      	mov	sp, r7
 801629e:	bd80      	pop	{r7, pc}

080162a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b084      	sub	sp, #16
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80162a8:	6878      	ldr	r0, [r7, #4]
 80162aa:	f7ff ff70 	bl	801618e <f_sync>
 80162ae:	4603      	mov	r3, r0
 80162b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80162b2:	7bfb      	ldrb	r3, [r7, #15]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d11d      	bne.n	80162f4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f107 0208 	add.w	r2, r7, #8
 80162be:	4611      	mov	r1, r2
 80162c0:	4618      	mov	r0, r3
 80162c2:	f7ff fb53 	bl	801596c <validate>
 80162c6:	4603      	mov	r3, r0
 80162c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80162ca:	7bfb      	ldrb	r3, [r7, #15]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d111      	bne.n	80162f4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	691b      	ldr	r3, [r3, #16]
 80162d4:	4618      	mov	r0, r3
 80162d6:	f7fe f8e7 	bl	80144a8 <dec_lock>
 80162da:	4603      	mov	r3, r0
 80162dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80162de:	7bfb      	ldrb	r3, [r7, #15]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d102      	bne.n	80162ea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2200      	movs	r2, #0
 80162e8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80162ea:	68bb      	ldr	r3, [r7, #8]
 80162ec:	2100      	movs	r1, #0
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7fd ffb3 	bl	801425a <unlock_fs>
#endif
		}
	}
	return res;
 80162f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80162f6:	4618      	mov	r0, r3
 80162f8:	3710      	adds	r7, #16
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}

080162fe <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80162fe:	b580      	push	{r7, lr}
 8016300:	b096      	sub	sp, #88	@ 0x58
 8016302:	af00      	add	r7, sp, #0
 8016304:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8016306:	f107 0108 	add.w	r1, r7, #8
 801630a:	1d3b      	adds	r3, r7, #4
 801630c:	2202      	movs	r2, #2
 801630e:	4618      	mov	r0, r3
 8016310:	f7ff f8d8 	bl	80154c4 <find_volume>
 8016314:	4603      	mov	r3, r0
 8016316:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 801631a:	68bb      	ldr	r3, [r7, #8]
 801631c:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801631e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016322:	2b00      	cmp	r3, #0
 8016324:	f040 80ec 	bne.w	8016500 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8016328:	687a      	ldr	r2, [r7, #4]
 801632a:	f107 030c 	add.w	r3, r7, #12
 801632e:	4611      	mov	r1, r2
 8016330:	4618      	mov	r0, r3
 8016332:	f7fe ffbb 	bl	80152ac <follow_path>
 8016336:	4603      	mov	r3, r0
 8016338:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801633c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016340:	2b00      	cmp	r3, #0
 8016342:	d102      	bne.n	801634a <f_mkdir+0x4c>
 8016344:	2308      	movs	r3, #8
 8016346:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801634a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801634e:	2b04      	cmp	r3, #4
 8016350:	f040 80d6 	bne.w	8016500 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8016354:	f107 030c 	add.w	r3, r7, #12
 8016358:	2100      	movs	r1, #0
 801635a:	4618      	mov	r0, r3
 801635c:	f7fe fbf9 	bl	8014b52 <create_chain>
 8016360:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8016362:	68bb      	ldr	r3, [r7, #8]
 8016364:	895b      	ldrh	r3, [r3, #10]
 8016366:	025b      	lsls	r3, r3, #9
 8016368:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801636a:	2300      	movs	r3, #0
 801636c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8016370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016372:	2b00      	cmp	r3, #0
 8016374:	d102      	bne.n	801637c <f_mkdir+0x7e>
 8016376:	2307      	movs	r3, #7
 8016378:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801637c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801637e:	2b01      	cmp	r3, #1
 8016380:	d102      	bne.n	8016388 <f_mkdir+0x8a>
 8016382:	2302      	movs	r3, #2
 8016384:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801638e:	d102      	bne.n	8016396 <f_mkdir+0x98>
 8016390:	2301      	movs	r3, #1
 8016392:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8016396:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801639a:	2b00      	cmp	r3, #0
 801639c:	d106      	bne.n	80163ac <f_mkdir+0xae>
 801639e:	68bb      	ldr	r3, [r7, #8]
 80163a0:	4618      	mov	r0, r3
 80163a2:	f7fe f8e1 	bl	8014568 <sync_window>
 80163a6:	4603      	mov	r3, r0
 80163a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 80163ac:	f7fb f9dc 	bl	8011768 <get_fattime>
 80163b0:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80163b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d16a      	bne.n	8016490 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80163be:	4618      	mov	r0, r3
 80163c0:	f7fe f9b2 	bl	8014728 <clust2sect>
 80163c4:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 80163c6:	68bb      	ldr	r3, [r7, #8]
 80163c8:	3334      	adds	r3, #52	@ 0x34
 80163ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 80163cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80163d0:	2100      	movs	r1, #0
 80163d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80163d4:	f7fd fece 	bl	8014174 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80163d8:	220b      	movs	r2, #11
 80163da:	2120      	movs	r1, #32
 80163dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80163de:	f7fd fec9 	bl	8014174 <mem_set>
					dir[DIR_Name] = '.';
 80163e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163e4:	222e      	movs	r2, #46	@ 0x2e
 80163e6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80163e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163ea:	330b      	adds	r3, #11
 80163ec:	2210      	movs	r2, #16
 80163ee:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80163f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163f2:	3316      	adds	r3, #22
 80163f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80163f6:	4618      	mov	r0, r3
 80163f8:	f7fd fe6f 	bl	80140da <st_dword>
					st_clust(fs, dir, dcl);
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016400:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016402:	4618      	mov	r0, r3
 8016404:	f7fe fe17 	bl	8015036 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8016408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801640a:	3320      	adds	r3, #32
 801640c:	2220      	movs	r2, #32
 801640e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016410:	4618      	mov	r0, r3
 8016412:	f7fd fe8e 	bl	8014132 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8016416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016418:	3321      	adds	r3, #33	@ 0x21
 801641a:	222e      	movs	r2, #46	@ 0x2e
 801641c:	701a      	strb	r2, [r3, #0]
 801641e:	697b      	ldr	r3, [r7, #20]
 8016420:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8016422:	68bb      	ldr	r3, [r7, #8]
 8016424:	781b      	ldrb	r3, [r3, #0]
 8016426:	2b03      	cmp	r3, #3
 8016428:	d106      	bne.n	8016438 <f_mkdir+0x13a>
 801642a:	68bb      	ldr	r3, [r7, #8]
 801642c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801642e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016430:	429a      	cmp	r2, r3
 8016432:	d101      	bne.n	8016438 <f_mkdir+0x13a>
 8016434:	2300      	movs	r3, #0
 8016436:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8016438:	68b8      	ldr	r0, [r7, #8]
 801643a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801643c:	3320      	adds	r3, #32
 801643e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016440:	4619      	mov	r1, r3
 8016442:	f7fe fdf8 	bl	8015036 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016446:	68bb      	ldr	r3, [r7, #8]
 8016448:	895b      	ldrh	r3, [r3, #10]
 801644a:	653b      	str	r3, [r7, #80]	@ 0x50
 801644c:	e01b      	b.n	8016486 <f_mkdir+0x188>
					fs->winsect = dsc++;
 801644e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016450:	1c5a      	adds	r2, r3, #1
 8016452:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8016454:	68ba      	ldr	r2, [r7, #8]
 8016456:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 8016458:	68bb      	ldr	r3, [r7, #8]
 801645a:	2201      	movs	r2, #1
 801645c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801645e:	68bb      	ldr	r3, [r7, #8]
 8016460:	4618      	mov	r0, r3
 8016462:	f7fe f881 	bl	8014568 <sync_window>
 8016466:	4603      	mov	r3, r0
 8016468:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 801646c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016470:	2b00      	cmp	r3, #0
 8016472:	d10c      	bne.n	801648e <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8016474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016478:	2100      	movs	r1, #0
 801647a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801647c:	f7fd fe7a 	bl	8014174 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016482:	3b01      	subs	r3, #1
 8016484:	653b      	str	r3, [r7, #80]	@ 0x50
 8016486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016488:	2b00      	cmp	r3, #0
 801648a:	d1e0      	bne.n	801644e <f_mkdir+0x150>
 801648c:	e000      	b.n	8016490 <f_mkdir+0x192>
					if (res != FR_OK) break;
 801648e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8016490:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016494:	2b00      	cmp	r3, #0
 8016496:	d107      	bne.n	80164a8 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8016498:	f107 030c 	add.w	r3, r7, #12
 801649c:	4618      	mov	r0, r3
 801649e:	f7fe fe3f 	bl	8015120 <dir_register>
 80164a2:	4603      	mov	r3, r0
 80164a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 80164a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d120      	bne.n	80164f2 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80164b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80164b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80164b6:	3316      	adds	r3, #22
 80164b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80164ba:	4618      	mov	r0, r3
 80164bc:	f7fd fe0d 	bl	80140da <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80164c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7fe fdb5 	bl	8015036 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80164cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80164ce:	330b      	adds	r3, #11
 80164d0:	2210      	movs	r2, #16
 80164d2:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	2201      	movs	r2, #1
 80164d8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80164da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d10e      	bne.n	8016500 <f_mkdir+0x202>
					res = sync_fs(fs);
 80164e2:	68bb      	ldr	r3, [r7, #8]
 80164e4:	4618      	mov	r0, r3
 80164e6:	f7fe f8b1 	bl	801464c <sync_fs>
 80164ea:	4603      	mov	r3, r0
 80164ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80164f0:	e006      	b.n	8016500 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80164f2:	f107 030c 	add.w	r3, r7, #12
 80164f6:	2200      	movs	r2, #0
 80164f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80164fa:	4618      	mov	r0, r3
 80164fc:	f7fe fac4 	bl	8014a88 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8016506:	4611      	mov	r1, r2
 8016508:	4618      	mov	r0, r3
 801650a:	f7fd fea6 	bl	801425a <unlock_fs>
 801650e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8016512:	4618      	mov	r0, r3
 8016514:	3758      	adds	r7, #88	@ 0x58
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}
	...

0801651c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801651c:	b480      	push	{r7}
 801651e:	b087      	sub	sp, #28
 8016520:	af00      	add	r7, sp, #0
 8016522:	60f8      	str	r0, [r7, #12]
 8016524:	60b9      	str	r1, [r7, #8]
 8016526:	4613      	mov	r3, r2
 8016528:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801652a:	2301      	movs	r3, #1
 801652c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801652e:	2300      	movs	r3, #0
 8016530:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016532:	4b1f      	ldr	r3, [pc, #124]	@ (80165b0 <FATFS_LinkDriverEx+0x94>)
 8016534:	7a5b      	ldrb	r3, [r3, #9]
 8016536:	b2db      	uxtb	r3, r3
 8016538:	2b00      	cmp	r3, #0
 801653a:	d131      	bne.n	80165a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801653c:	4b1c      	ldr	r3, [pc, #112]	@ (80165b0 <FATFS_LinkDriverEx+0x94>)
 801653e:	7a5b      	ldrb	r3, [r3, #9]
 8016540:	b2db      	uxtb	r3, r3
 8016542:	461a      	mov	r2, r3
 8016544:	4b1a      	ldr	r3, [pc, #104]	@ (80165b0 <FATFS_LinkDriverEx+0x94>)
 8016546:	2100      	movs	r1, #0
 8016548:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801654a:	4b19      	ldr	r3, [pc, #100]	@ (80165b0 <FATFS_LinkDriverEx+0x94>)
 801654c:	7a5b      	ldrb	r3, [r3, #9]
 801654e:	b2db      	uxtb	r3, r3
 8016550:	4a17      	ldr	r2, [pc, #92]	@ (80165b0 <FATFS_LinkDriverEx+0x94>)
 8016552:	009b      	lsls	r3, r3, #2
 8016554:	4413      	add	r3, r2
 8016556:	68fa      	ldr	r2, [r7, #12]
 8016558:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801655a:	4b15      	ldr	r3, [pc, #84]	@ (80165b0 <FATFS_LinkDriverEx+0x94>)
 801655c:	7a5b      	ldrb	r3, [r3, #9]
 801655e:	b2db      	uxtb	r3, r3
 8016560:	461a      	mov	r2, r3
 8016562:	4b13      	ldr	r3, [pc, #76]	@ (80165b0 <FATFS_LinkDriverEx+0x94>)
 8016564:	4413      	add	r3, r2
 8016566:	79fa      	ldrb	r2, [r7, #7]
 8016568:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801656a:	4b11      	ldr	r3, [pc, #68]	@ (80165b0 <FATFS_LinkDriverEx+0x94>)
 801656c:	7a5b      	ldrb	r3, [r3, #9]
 801656e:	b2db      	uxtb	r3, r3
 8016570:	1c5a      	adds	r2, r3, #1
 8016572:	b2d1      	uxtb	r1, r2
 8016574:	4a0e      	ldr	r2, [pc, #56]	@ (80165b0 <FATFS_LinkDriverEx+0x94>)
 8016576:	7251      	strb	r1, [r2, #9]
 8016578:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801657a:	7dbb      	ldrb	r3, [r7, #22]
 801657c:	3330      	adds	r3, #48	@ 0x30
 801657e:	b2da      	uxtb	r2, r3
 8016580:	68bb      	ldr	r3, [r7, #8]
 8016582:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016584:	68bb      	ldr	r3, [r7, #8]
 8016586:	3301      	adds	r3, #1
 8016588:	223a      	movs	r2, #58	@ 0x3a
 801658a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	3302      	adds	r3, #2
 8016590:	222f      	movs	r2, #47	@ 0x2f
 8016592:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016594:	68bb      	ldr	r3, [r7, #8]
 8016596:	3303      	adds	r3, #3
 8016598:	2200      	movs	r2, #0
 801659a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801659c:	2300      	movs	r3, #0
 801659e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80165a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	371c      	adds	r7, #28
 80165a6:	46bd      	mov	sp, r7
 80165a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ac:	4770      	bx	lr
 80165ae:	bf00      	nop
 80165b0:	20001808 	.word	0x20001808

080165b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b082      	sub	sp, #8
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
 80165bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80165be:	2200      	movs	r2, #0
 80165c0:	6839      	ldr	r1, [r7, #0]
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f7ff ffaa 	bl	801651c <FATFS_LinkDriverEx>
 80165c8:	4603      	mov	r3, r0
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3708      	adds	r7, #8
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}

080165d2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80165d2:	b580      	push	{r7, lr}
 80165d4:	b086      	sub	sp, #24
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	4603      	mov	r3, r0
 80165da:	6039      	str	r1, [r7, #0]
 80165dc:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80165de:	2300      	movs	r3, #0
 80165e0:	60fb      	str	r3, [r7, #12]
 80165e2:	2300      	movs	r3, #0
 80165e4:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80165e6:	f107 030c 	add.w	r3, r7, #12
 80165ea:	2101      	movs	r1, #1
 80165ec:	4618      	mov	r0, r3
 80165ee:	f000 f8e9 	bl	80167c4 <osSemaphoreCreate>
 80165f2:	4602      	mov	r2, r0
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	bf14      	ite	ne
 8016600:	2301      	movne	r3, #1
 8016602:	2300      	moveq	r3, #0
 8016604:	b2db      	uxtb	r3, r3
 8016606:	617b      	str	r3, [r7, #20]

    return ret;
 8016608:	697b      	ldr	r3, [r7, #20]
}
 801660a:	4618      	mov	r0, r3
 801660c:	3718      	adds	r7, #24
 801660e:	46bd      	mov	sp, r7
 8016610:	bd80      	pop	{r7, pc}

08016612 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8016612:	b580      	push	{r7, lr}
 8016614:	b082      	sub	sp, #8
 8016616:	af00      	add	r7, sp, #0
 8016618:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f000 f996 	bl	801694c <osSemaphoreDelete>
#endif
    return 1;
 8016620:	2301      	movs	r3, #1
}
 8016622:	4618      	mov	r0, r3
 8016624:	3708      	adds	r7, #8
 8016626:	46bd      	mov	sp, r7
 8016628:	bd80      	pop	{r7, pc}

0801662a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801662a:	b580      	push	{r7, lr}
 801662c:	b084      	sub	sp, #16
 801662e:	af00      	add	r7, sp, #0
 8016630:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8016632:	2300      	movs	r3, #0
 8016634:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8016636:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	f000 f902 	bl	8016844 <osSemaphoreWait>
 8016640:	4603      	mov	r3, r0
 8016642:	2b00      	cmp	r3, #0
 8016644:	d101      	bne.n	801664a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8016646:	2301      	movs	r3, #1
 8016648:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801664a:	68fb      	ldr	r3, [r7, #12]
}
 801664c:	4618      	mov	r0, r3
 801664e:	3710      	adds	r7, #16
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}

08016654 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b082      	sub	sp, #8
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801665c:	6878      	ldr	r0, [r7, #4]
 801665e:	f000 f93f 	bl	80168e0 <osSemaphoreRelease>
#endif
}
 8016662:	bf00      	nop
 8016664:	3708      	adds	r7, #8
 8016666:	46bd      	mov	sp, r7
 8016668:	bd80      	pop	{r7, pc}

0801666a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801666a:	b480      	push	{r7}
 801666c:	b085      	sub	sp, #20
 801666e:	af00      	add	r7, sp, #0
 8016670:	4603      	mov	r3, r0
 8016672:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8016674:	2300      	movs	r3, #0
 8016676:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8016678:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801667c:	2b84      	cmp	r3, #132	@ 0x84
 801667e:	d005      	beq.n	801668c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8016680:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	4413      	add	r3, r2
 8016688:	3303      	adds	r3, #3
 801668a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801668c:	68fb      	ldr	r3, [r7, #12]
}
 801668e:	4618      	mov	r0, r3
 8016690:	3714      	adds	r7, #20
 8016692:	46bd      	mov	sp, r7
 8016694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016698:	4770      	bx	lr

0801669a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801669a:	b480      	push	{r7}
 801669c:	b083      	sub	sp, #12
 801669e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80166a0:	f3ef 8305 	mrs	r3, IPSR
 80166a4:	607b      	str	r3, [r7, #4]
  return(result);
 80166a6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	bf14      	ite	ne
 80166ac:	2301      	movne	r3, #1
 80166ae:	2300      	moveq	r3, #0
 80166b0:	b2db      	uxtb	r3, r3
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	370c      	adds	r7, #12
 80166b6:	46bd      	mov	sp, r7
 80166b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166bc:	4770      	bx	lr

080166be <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80166be:	b580      	push	{r7, lr}
 80166c0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80166c2:	f001 fd33 	bl	801812c <vTaskStartScheduler>
  
  return osOK;
 80166c6:	2300      	movs	r3, #0
}
 80166c8:	4618      	mov	r0, r3
 80166ca:	bd80      	pop	{r7, pc}

080166cc <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80166d0:	f002 f994 	bl	80189fc <xTaskGetSchedulerState>
 80166d4:	4603      	mov	r3, r0
 80166d6:	2b01      	cmp	r3, #1
 80166d8:	d101      	bne.n	80166de <osKernelRunning+0x12>
    return 0;
 80166da:	2300      	movs	r3, #0
 80166dc:	e000      	b.n	80166e0 <osKernelRunning+0x14>
  else
    return 1;
 80166de:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80166e0:	4618      	mov	r0, r3
 80166e2:	bd80      	pop	{r7, pc}

080166e4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80166e8:	f7ff ffd7 	bl	801669a <inHandlerMode>
 80166ec:	4603      	mov	r3, r0
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d003      	beq.n	80166fa <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80166f2:	f001 fe3f 	bl	8018374 <xTaskGetTickCountFromISR>
 80166f6:	4603      	mov	r3, r0
 80166f8:	e002      	b.n	8016700 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80166fa:	f001 fe2b 	bl	8018354 <xTaskGetTickCount>
 80166fe:	4603      	mov	r3, r0
  }
}
 8016700:	4618      	mov	r0, r3
 8016702:	bd80      	pop	{r7, pc}

08016704 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8016704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016706:	b089      	sub	sp, #36	@ 0x24
 8016708:	af04      	add	r7, sp, #16
 801670a:	6078      	str	r0, [r7, #4]
 801670c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	695b      	ldr	r3, [r3, #20]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d020      	beq.n	8016758 <osThreadCreate+0x54>
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	699b      	ldr	r3, [r3, #24]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d01c      	beq.n	8016758 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	685c      	ldr	r4, [r3, #4]
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	691e      	ldr	r6, [r3, #16]
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016730:	4618      	mov	r0, r3
 8016732:	f7ff ff9a 	bl	801666a <makeFreeRtosPriority>
 8016736:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	695b      	ldr	r3, [r3, #20]
 801673c:	687a      	ldr	r2, [r7, #4]
 801673e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016740:	9202      	str	r2, [sp, #8]
 8016742:	9301      	str	r3, [sp, #4]
 8016744:	9100      	str	r1, [sp, #0]
 8016746:	683b      	ldr	r3, [r7, #0]
 8016748:	4632      	mov	r2, r6
 801674a:	4629      	mov	r1, r5
 801674c:	4620      	mov	r0, r4
 801674e:	f001 fb0b 	bl	8017d68 <xTaskCreateStatic>
 8016752:	4603      	mov	r3, r0
 8016754:	60fb      	str	r3, [r7, #12]
 8016756:	e01c      	b.n	8016792 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	685c      	ldr	r4, [r3, #4]
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016764:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801676c:	4618      	mov	r0, r3
 801676e:	f7ff ff7c 	bl	801666a <makeFreeRtosPriority>
 8016772:	4602      	mov	r2, r0
 8016774:	f107 030c 	add.w	r3, r7, #12
 8016778:	9301      	str	r3, [sp, #4]
 801677a:	9200      	str	r2, [sp, #0]
 801677c:	683b      	ldr	r3, [r7, #0]
 801677e:	4632      	mov	r2, r6
 8016780:	4629      	mov	r1, r5
 8016782:	4620      	mov	r0, r4
 8016784:	f001 fb56 	bl	8017e34 <xTaskCreate>
 8016788:	4603      	mov	r3, r0
 801678a:	2b01      	cmp	r3, #1
 801678c:	d001      	beq.n	8016792 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801678e:	2300      	movs	r3, #0
 8016790:	e000      	b.n	8016794 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8016792:	68fb      	ldr	r3, [r7, #12]
}
 8016794:	4618      	mov	r0, r3
 8016796:	3714      	adds	r7, #20
 8016798:	46bd      	mov	sp, r7
 801679a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801679c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b084      	sub	sp, #16
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d001      	beq.n	80167b2 <osDelay+0x16>
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	e000      	b.n	80167b4 <osDelay+0x18>
 80167b2:	2301      	movs	r3, #1
 80167b4:	4618      	mov	r0, r3
 80167b6:	f001 fc81 	bl	80180bc <vTaskDelay>
  
  return osOK;
 80167ba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80167bc:	4618      	mov	r0, r3
 80167be:	3710      	adds	r7, #16
 80167c0:	46bd      	mov	sp, r7
 80167c2:	bd80      	pop	{r7, pc}

080167c4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b086      	sub	sp, #24
 80167c8:	af02      	add	r7, sp, #8
 80167ca:	6078      	str	r0, [r7, #4]
 80167cc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d016      	beq.n	8016804 <osSemaphoreCreate+0x40>
    if (count == 1) {
 80167d6:	683b      	ldr	r3, [r7, #0]
 80167d8:	2b01      	cmp	r3, #1
 80167da:	d10a      	bne.n	80167f2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	685b      	ldr	r3, [r3, #4]
 80167e0:	2203      	movs	r2, #3
 80167e2:	9200      	str	r2, [sp, #0]
 80167e4:	2200      	movs	r2, #0
 80167e6:	2100      	movs	r1, #0
 80167e8:	2001      	movs	r0, #1
 80167ea:	f000 fad5 	bl	8016d98 <xQueueGenericCreateStatic>
 80167ee:	4603      	mov	r3, r0
 80167f0:	e023      	b.n	801683a <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80167f2:	6838      	ldr	r0, [r7, #0]
 80167f4:	6839      	ldr	r1, [r7, #0]
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	685b      	ldr	r3, [r3, #4]
 80167fa:	461a      	mov	r2, r3
 80167fc:	f000 fbb5 	bl	8016f6a <xQueueCreateCountingSemaphoreStatic>
 8016800:	4603      	mov	r3, r0
 8016802:	e01a      	b.n	801683a <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8016804:	683b      	ldr	r3, [r7, #0]
 8016806:	2b01      	cmp	r3, #1
 8016808:	d110      	bne.n	801682c <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 801680a:	2203      	movs	r2, #3
 801680c:	2100      	movs	r1, #0
 801680e:	2001      	movs	r0, #1
 8016810:	f000 fb49 	bl	8016ea6 <xQueueGenericCreate>
 8016814:	60f8      	str	r0, [r7, #12]
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d005      	beq.n	8016828 <osSemaphoreCreate+0x64>
 801681c:	2300      	movs	r3, #0
 801681e:	2200      	movs	r2, #0
 8016820:	2100      	movs	r1, #0
 8016822:	68f8      	ldr	r0, [r7, #12]
 8016824:	f000 fc18 	bl	8017058 <xQueueGenericSend>
      return sema;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	e006      	b.n	801683a <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 801682c:	683b      	ldr	r3, [r7, #0]
 801682e:	683a      	ldr	r2, [r7, #0]
 8016830:	4611      	mov	r1, r2
 8016832:	4618      	mov	r0, r3
 8016834:	f000 fbd6 	bl	8016fe4 <xQueueCreateCountingSemaphore>
 8016838:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 801683a:	4618      	mov	r0, r3
 801683c:	3710      	adds	r7, #16
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}
	...

08016844 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b084      	sub	sp, #16
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
 801684c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801684e:	2300      	movs	r3, #0
 8016850:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d101      	bne.n	801685c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8016858:	2380      	movs	r3, #128	@ 0x80
 801685a:	e03a      	b.n	80168d2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 801685c:	2300      	movs	r3, #0
 801685e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016866:	d103      	bne.n	8016870 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8016868:	f04f 33ff 	mov.w	r3, #4294967295
 801686c:	60fb      	str	r3, [r7, #12]
 801686e:	e009      	b.n	8016884 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d006      	beq.n	8016884 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d101      	bne.n	8016884 <osSemaphoreWait+0x40>
      ticks = 1;
 8016880:	2301      	movs	r3, #1
 8016882:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8016884:	f7ff ff09 	bl	801669a <inHandlerMode>
 8016888:	4603      	mov	r3, r0
 801688a:	2b00      	cmp	r3, #0
 801688c:	d017      	beq.n	80168be <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801688e:	f107 0308 	add.w	r3, r7, #8
 8016892:	461a      	mov	r2, r3
 8016894:	2100      	movs	r1, #0
 8016896:	6878      	ldr	r0, [r7, #4]
 8016898:	f001 f824 	bl	80178e4 <xQueueReceiveFromISR>
 801689c:	4603      	mov	r3, r0
 801689e:	2b01      	cmp	r3, #1
 80168a0:	d001      	beq.n	80168a6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80168a2:	23ff      	movs	r3, #255	@ 0xff
 80168a4:	e015      	b.n	80168d2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80168a6:	68bb      	ldr	r3, [r7, #8]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d011      	beq.n	80168d0 <osSemaphoreWait+0x8c>
 80168ac:	4b0b      	ldr	r3, [pc, #44]	@ (80168dc <osSemaphoreWait+0x98>)
 80168ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80168b2:	601a      	str	r2, [r3, #0]
 80168b4:	f3bf 8f4f 	dsb	sy
 80168b8:	f3bf 8f6f 	isb	sy
 80168bc:	e008      	b.n	80168d0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80168be:	68f9      	ldr	r1, [r7, #12]
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f000 fef7 	bl	80176b4 <xQueueSemaphoreTake>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b01      	cmp	r3, #1
 80168ca:	d001      	beq.n	80168d0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80168cc:	23ff      	movs	r3, #255	@ 0xff
 80168ce:	e000      	b.n	80168d2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80168d0:	2300      	movs	r3, #0
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	3710      	adds	r7, #16
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}
 80168da:	bf00      	nop
 80168dc:	e000ed04 	.word	0xe000ed04

080168e0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b084      	sub	sp, #16
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80168e8:	2300      	movs	r3, #0
 80168ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80168ec:	2300      	movs	r3, #0
 80168ee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80168f0:	f7ff fed3 	bl	801669a <inHandlerMode>
 80168f4:	4603      	mov	r3, r0
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d016      	beq.n	8016928 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80168fa:	f107 0308 	add.w	r3, r7, #8
 80168fe:	4619      	mov	r1, r3
 8016900:	6878      	ldr	r0, [r7, #4]
 8016902:	f000 fd56 	bl	80173b2 <xQueueGiveFromISR>
 8016906:	4603      	mov	r3, r0
 8016908:	2b01      	cmp	r3, #1
 801690a:	d001      	beq.n	8016910 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801690c:	23ff      	movs	r3, #255	@ 0xff
 801690e:	e017      	b.n	8016940 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016910:	68bb      	ldr	r3, [r7, #8]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d013      	beq.n	801693e <osSemaphoreRelease+0x5e>
 8016916:	4b0c      	ldr	r3, [pc, #48]	@ (8016948 <osSemaphoreRelease+0x68>)
 8016918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801691c:	601a      	str	r2, [r3, #0]
 801691e:	f3bf 8f4f 	dsb	sy
 8016922:	f3bf 8f6f 	isb	sy
 8016926:	e00a      	b.n	801693e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8016928:	2300      	movs	r3, #0
 801692a:	2200      	movs	r2, #0
 801692c:	2100      	movs	r1, #0
 801692e:	6878      	ldr	r0, [r7, #4]
 8016930:	f000 fb92 	bl	8017058 <xQueueGenericSend>
 8016934:	4603      	mov	r3, r0
 8016936:	2b01      	cmp	r3, #1
 8016938:	d001      	beq.n	801693e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801693a:	23ff      	movs	r3, #255	@ 0xff
 801693c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801693e:	68fb      	ldr	r3, [r7, #12]
}
 8016940:	4618      	mov	r0, r3
 8016942:	3710      	adds	r7, #16
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}
 8016948:	e000ed04 	.word	0xe000ed04

0801694c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b082      	sub	sp, #8
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8016954:	f7ff fea1 	bl	801669a <inHandlerMode>
 8016958:	4603      	mov	r3, r0
 801695a:	2b00      	cmp	r3, #0
 801695c:	d001      	beq.n	8016962 <osSemaphoreDelete+0x16>
    return osErrorISR;
 801695e:	2382      	movs	r3, #130	@ 0x82
 8016960:	e003      	b.n	801696a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	f001 f888 	bl	8017a78 <vQueueDelete>

  return osOK; 
 8016968:	2300      	movs	r3, #0
}
 801696a:	4618      	mov	r0, r3
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}

08016972 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8016972:	b590      	push	{r4, r7, lr}
 8016974:	b085      	sub	sp, #20
 8016976:	af02      	add	r7, sp, #8
 8016978:	6078      	str	r0, [r7, #4]
 801697a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	689b      	ldr	r3, [r3, #8]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d011      	beq.n	80169a8 <osMessageCreate+0x36>
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	68db      	ldr	r3, [r3, #12]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d00d      	beq.n	80169a8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	6818      	ldr	r0, [r3, #0]
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	6859      	ldr	r1, [r3, #4]
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	689a      	ldr	r2, [r3, #8]
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	68db      	ldr	r3, [r3, #12]
 801699c:	2400      	movs	r4, #0
 801699e:	9400      	str	r4, [sp, #0]
 80169a0:	f000 f9fa 	bl	8016d98 <xQueueGenericCreateStatic>
 80169a4:	4603      	mov	r3, r0
 80169a6:	e008      	b.n	80169ba <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	6818      	ldr	r0, [r3, #0]
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	685b      	ldr	r3, [r3, #4]
 80169b0:	2200      	movs	r2, #0
 80169b2:	4619      	mov	r1, r3
 80169b4:	f000 fa77 	bl	8016ea6 <xQueueGenericCreate>
 80169b8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	370c      	adds	r7, #12
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd90      	pop	{r4, r7, pc}
	...

080169c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b086      	sub	sp, #24
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	60f8      	str	r0, [r7, #12]
 80169cc:	60b9      	str	r1, [r7, #8]
 80169ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80169d0:	2300      	movs	r3, #0
 80169d2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80169d8:	697b      	ldr	r3, [r7, #20]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d101      	bne.n	80169e2 <osMessagePut+0x1e>
    ticks = 1;
 80169de:	2301      	movs	r3, #1
 80169e0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80169e2:	f7ff fe5a 	bl	801669a <inHandlerMode>
 80169e6:	4603      	mov	r3, r0
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d018      	beq.n	8016a1e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80169ec:	f107 0210 	add.w	r2, r7, #16
 80169f0:	f107 0108 	add.w	r1, r7, #8
 80169f4:	2300      	movs	r3, #0
 80169f6:	68f8      	ldr	r0, [r7, #12]
 80169f8:	f000 fc38 	bl	801726c <xQueueGenericSendFromISR>
 80169fc:	4603      	mov	r3, r0
 80169fe:	2b01      	cmp	r3, #1
 8016a00:	d001      	beq.n	8016a06 <osMessagePut+0x42>
      return osErrorOS;
 8016a02:	23ff      	movs	r3, #255	@ 0xff
 8016a04:	e018      	b.n	8016a38 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016a06:	693b      	ldr	r3, [r7, #16]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d014      	beq.n	8016a36 <osMessagePut+0x72>
 8016a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8016a40 <osMessagePut+0x7c>)
 8016a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016a12:	601a      	str	r2, [r3, #0]
 8016a14:	f3bf 8f4f 	dsb	sy
 8016a18:	f3bf 8f6f 	isb	sy
 8016a1c:	e00b      	b.n	8016a36 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8016a1e:	f107 0108 	add.w	r1, r7, #8
 8016a22:	2300      	movs	r3, #0
 8016a24:	697a      	ldr	r2, [r7, #20]
 8016a26:	68f8      	ldr	r0, [r7, #12]
 8016a28:	f000 fb16 	bl	8017058 <xQueueGenericSend>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	2b01      	cmp	r3, #1
 8016a30:	d001      	beq.n	8016a36 <osMessagePut+0x72>
      return osErrorOS;
 8016a32:	23ff      	movs	r3, #255	@ 0xff
 8016a34:	e000      	b.n	8016a38 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8016a36:	2300      	movs	r3, #0
}
 8016a38:	4618      	mov	r0, r3
 8016a3a:	3718      	adds	r7, #24
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}
 8016a40:	e000ed04 	.word	0xe000ed04

08016a44 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8016a44:	b590      	push	{r4, r7, lr}
 8016a46:	b08b      	sub	sp, #44	@ 0x2c
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	60f8      	str	r0, [r7, #12]
 8016a4c:	60b9      	str	r1, [r7, #8]
 8016a4e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8016a50:	68bb      	ldr	r3, [r7, #8]
 8016a52:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8016a54:	2300      	movs	r3, #0
 8016a56:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8016a58:	68bb      	ldr	r3, [r7, #8]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d10a      	bne.n	8016a74 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8016a5e:	2380      	movs	r3, #128	@ 0x80
 8016a60:	617b      	str	r3, [r7, #20]
    return event;
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	461c      	mov	r4, r3
 8016a66:	f107 0314 	add.w	r3, r7, #20
 8016a6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016a72:	e054      	b.n	8016b1e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8016a74:	2300      	movs	r3, #0
 8016a76:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8016a78:	2300      	movs	r3, #0
 8016a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a82:	d103      	bne.n	8016a8c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8016a84:	f04f 33ff 	mov.w	r3, #4294967295
 8016a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8016a8a:	e009      	b.n	8016aa0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d006      	beq.n	8016aa0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8016a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d101      	bne.n	8016aa0 <osMessageGet+0x5c>
      ticks = 1;
 8016a9c:	2301      	movs	r3, #1
 8016a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8016aa0:	f7ff fdfb 	bl	801669a <inHandlerMode>
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d01c      	beq.n	8016ae4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8016aaa:	f107 0220 	add.w	r2, r7, #32
 8016aae:	f107 0314 	add.w	r3, r7, #20
 8016ab2:	3304      	adds	r3, #4
 8016ab4:	4619      	mov	r1, r3
 8016ab6:	68b8      	ldr	r0, [r7, #8]
 8016ab8:	f000 ff14 	bl	80178e4 <xQueueReceiveFromISR>
 8016abc:	4603      	mov	r3, r0
 8016abe:	2b01      	cmp	r3, #1
 8016ac0:	d102      	bne.n	8016ac8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8016ac2:	2310      	movs	r3, #16
 8016ac4:	617b      	str	r3, [r7, #20]
 8016ac6:	e001      	b.n	8016acc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8016ac8:	2300      	movs	r3, #0
 8016aca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016acc:	6a3b      	ldr	r3, [r7, #32]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d01d      	beq.n	8016b0e <osMessageGet+0xca>
 8016ad2:	4b15      	ldr	r3, [pc, #84]	@ (8016b28 <osMessageGet+0xe4>)
 8016ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016ad8:	601a      	str	r2, [r3, #0]
 8016ada:	f3bf 8f4f 	dsb	sy
 8016ade:	f3bf 8f6f 	isb	sy
 8016ae2:	e014      	b.n	8016b0e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8016ae4:	f107 0314 	add.w	r3, r7, #20
 8016ae8:	3304      	adds	r3, #4
 8016aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016aec:	4619      	mov	r1, r3
 8016aee:	68b8      	ldr	r0, [r7, #8]
 8016af0:	f000 fcf8 	bl	80174e4 <xQueueReceive>
 8016af4:	4603      	mov	r3, r0
 8016af6:	2b01      	cmp	r3, #1
 8016af8:	d102      	bne.n	8016b00 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8016afa:	2310      	movs	r3, #16
 8016afc:	617b      	str	r3, [r7, #20]
 8016afe:	e006      	b.n	8016b0e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8016b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d101      	bne.n	8016b0a <osMessageGet+0xc6>
 8016b06:	2300      	movs	r3, #0
 8016b08:	e000      	b.n	8016b0c <osMessageGet+0xc8>
 8016b0a:	2340      	movs	r3, #64	@ 0x40
 8016b0c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	461c      	mov	r4, r3
 8016b12:	f107 0314 	add.w	r3, r7, #20
 8016b16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016b1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8016b1e:	68f8      	ldr	r0, [r7, #12]
 8016b20:	372c      	adds	r7, #44	@ 0x2c
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd90      	pop	{r4, r7, pc}
 8016b26:	bf00      	nop
 8016b28:	e000ed04 	.word	0xe000ed04

08016b2c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b082      	sub	sp, #8
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8016b34:	f7ff fdb1 	bl	801669a <inHandlerMode>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d004      	beq.n	8016b48 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8016b3e:	6878      	ldr	r0, [r7, #4]
 8016b40:	f000 ff79 	bl	8017a36 <uxQueueMessagesWaitingFromISR>
 8016b44:	4603      	mov	r3, r0
 8016b46:	e003      	b.n	8016b50 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8016b48:	6878      	ldr	r0, [r7, #4]
 8016b4a:	f000 ff53 	bl	80179f4 <uxQueueMessagesWaiting>
 8016b4e:	4603      	mov	r3, r0
  }
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	3708      	adds	r7, #8
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}

08016b58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016b58:	b480      	push	{r7}
 8016b5a:	b083      	sub	sp, #12
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f103 0208 	add.w	r2, r3, #8
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8016b70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	f103 0208 	add.w	r2, r3, #8
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	f103 0208 	add.w	r2, r3, #8
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016b8c:	bf00      	nop
 8016b8e:	370c      	adds	r7, #12
 8016b90:	46bd      	mov	sp, r7
 8016b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b96:	4770      	bx	lr

08016b98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016b98:	b480      	push	{r7}
 8016b9a:	b083      	sub	sp, #12
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016ba6:	bf00      	nop
 8016ba8:	370c      	adds	r7, #12
 8016baa:	46bd      	mov	sp, r7
 8016bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb0:	4770      	bx	lr

08016bb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016bb2:	b480      	push	{r7}
 8016bb4:	b085      	sub	sp, #20
 8016bb6:	af00      	add	r7, sp, #0
 8016bb8:	6078      	str	r0, [r7, #4]
 8016bba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	685b      	ldr	r3, [r3, #4]
 8016bc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016bc2:	683b      	ldr	r3, [r7, #0]
 8016bc4:	68fa      	ldr	r2, [r7, #12]
 8016bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	689a      	ldr	r2, [r3, #8]
 8016bcc:	683b      	ldr	r3, [r7, #0]
 8016bce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	689b      	ldr	r3, [r3, #8]
 8016bd4:	683a      	ldr	r2, [r7, #0]
 8016bd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	683a      	ldr	r2, [r7, #0]
 8016bdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	687a      	ldr	r2, [r7, #4]
 8016be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	1c5a      	adds	r2, r3, #1
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	601a      	str	r2, [r3, #0]
}
 8016bee:	bf00      	nop
 8016bf0:	3714      	adds	r7, #20
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf8:	4770      	bx	lr

08016bfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016bfa:	b480      	push	{r7}
 8016bfc:	b085      	sub	sp, #20
 8016bfe:	af00      	add	r7, sp, #0
 8016c00:	6078      	str	r0, [r7, #4]
 8016c02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016c04:	683b      	ldr	r3, [r7, #0]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016c0a:	68bb      	ldr	r3, [r7, #8]
 8016c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c10:	d103      	bne.n	8016c1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	691b      	ldr	r3, [r3, #16]
 8016c16:	60fb      	str	r3, [r7, #12]
 8016c18:	e00c      	b.n	8016c34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	3308      	adds	r3, #8
 8016c1e:	60fb      	str	r3, [r7, #12]
 8016c20:	e002      	b.n	8016c28 <vListInsert+0x2e>
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	685b      	ldr	r3, [r3, #4]
 8016c26:	60fb      	str	r3, [r7, #12]
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	685b      	ldr	r3, [r3, #4]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	68ba      	ldr	r2, [r7, #8]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d2f6      	bcs.n	8016c22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	685a      	ldr	r2, [r3, #4]
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016c3c:	683b      	ldr	r3, [r7, #0]
 8016c3e:	685b      	ldr	r3, [r3, #4]
 8016c40:	683a      	ldr	r2, [r7, #0]
 8016c42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	68fa      	ldr	r2, [r7, #12]
 8016c48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	683a      	ldr	r2, [r7, #0]
 8016c4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016c50:	683b      	ldr	r3, [r7, #0]
 8016c52:	687a      	ldr	r2, [r7, #4]
 8016c54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	1c5a      	adds	r2, r3, #1
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	601a      	str	r2, [r3, #0]
}
 8016c60:	bf00      	nop
 8016c62:	3714      	adds	r7, #20
 8016c64:	46bd      	mov	sp, r7
 8016c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6a:	4770      	bx	lr

08016c6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b085      	sub	sp, #20
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	691b      	ldr	r3, [r3, #16]
 8016c78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	685b      	ldr	r3, [r3, #4]
 8016c7e:	687a      	ldr	r2, [r7, #4]
 8016c80:	6892      	ldr	r2, [r2, #8]
 8016c82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	689b      	ldr	r3, [r3, #8]
 8016c88:	687a      	ldr	r2, [r7, #4]
 8016c8a:	6852      	ldr	r2, [r2, #4]
 8016c8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	685b      	ldr	r3, [r3, #4]
 8016c92:	687a      	ldr	r2, [r7, #4]
 8016c94:	429a      	cmp	r2, r3
 8016c96:	d103      	bne.n	8016ca0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	689a      	ldr	r2, [r3, #8]
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	1e5a      	subs	r2, r3, #1
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	681b      	ldr	r3, [r3, #0]
}
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	3714      	adds	r7, #20
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbe:	4770      	bx	lr

08016cc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b084      	sub	sp, #16
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
 8016cc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d10d      	bne.n	8016cf0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016cd8:	b672      	cpsid	i
 8016cda:	f383 8811 	msr	BASEPRI, r3
 8016cde:	f3bf 8f6f 	isb	sy
 8016ce2:	f3bf 8f4f 	dsb	sy
 8016ce6:	b662      	cpsie	i
 8016ce8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016cea:	bf00      	nop
 8016cec:	bf00      	nop
 8016cee:	e7fd      	b.n	8016cec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8016cf0:	f002 f9d4 	bl	801909c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	681a      	ldr	r2, [r3, #0]
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016cfc:	68f9      	ldr	r1, [r7, #12]
 8016cfe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016d00:	fb01 f303 	mul.w	r3, r1, r3
 8016d04:	441a      	add	r2, r3
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	681a      	ldr	r2, [r3, #0]
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	681a      	ldr	r2, [r3, #0]
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016d20:	3b01      	subs	r3, #1
 8016d22:	68f9      	ldr	r1, [r7, #12]
 8016d24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016d26:	fb01 f303 	mul.w	r3, r1, r3
 8016d2a:	441a      	add	r2, r3
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	22ff      	movs	r2, #255	@ 0xff
 8016d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	22ff      	movs	r2, #255	@ 0xff
 8016d3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8016d40:	683b      	ldr	r3, [r7, #0]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d114      	bne.n	8016d70 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	691b      	ldr	r3, [r3, #16]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d01a      	beq.n	8016d84 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	3310      	adds	r3, #16
 8016d52:	4618      	mov	r0, r3
 8016d54:	f001 fc88 	bl	8018668 <xTaskRemoveFromEventList>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d012      	beq.n	8016d84 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8016d94 <xQueueGenericReset+0xd4>)
 8016d60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016d64:	601a      	str	r2, [r3, #0]
 8016d66:	f3bf 8f4f 	dsb	sy
 8016d6a:	f3bf 8f6f 	isb	sy
 8016d6e:	e009      	b.n	8016d84 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	3310      	adds	r3, #16
 8016d74:	4618      	mov	r0, r3
 8016d76:	f7ff feef 	bl	8016b58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	3324      	adds	r3, #36	@ 0x24
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f7ff feea 	bl	8016b58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016d84:	f002 f9c0 	bl	8019108 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016d88:	2301      	movs	r3, #1
}
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	3710      	adds	r7, #16
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}
 8016d92:	bf00      	nop
 8016d94:	e000ed04 	.word	0xe000ed04

08016d98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b08e      	sub	sp, #56	@ 0x38
 8016d9c:	af02      	add	r7, sp, #8
 8016d9e:	60f8      	str	r0, [r7, #12]
 8016da0:	60b9      	str	r1, [r7, #8]
 8016da2:	607a      	str	r2, [r7, #4]
 8016da4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d10d      	bne.n	8016dc8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8016dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016db0:	b672      	cpsid	i
 8016db2:	f383 8811 	msr	BASEPRI, r3
 8016db6:	f3bf 8f6f 	isb	sy
 8016dba:	f3bf 8f4f 	dsb	sy
 8016dbe:	b662      	cpsie	i
 8016dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016dc2:	bf00      	nop
 8016dc4:	bf00      	nop
 8016dc6:	e7fd      	b.n	8016dc4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016dc8:	683b      	ldr	r3, [r7, #0]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d10d      	bne.n	8016dea <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8016dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dd2:	b672      	cpsid	i
 8016dd4:	f383 8811 	msr	BASEPRI, r3
 8016dd8:	f3bf 8f6f 	isb	sy
 8016ddc:	f3bf 8f4f 	dsb	sy
 8016de0:	b662      	cpsie	i
 8016de2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016de4:	bf00      	nop
 8016de6:	bf00      	nop
 8016de8:	e7fd      	b.n	8016de6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d002      	beq.n	8016df6 <xQueueGenericCreateStatic+0x5e>
 8016df0:	68bb      	ldr	r3, [r7, #8]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d001      	beq.n	8016dfa <xQueueGenericCreateStatic+0x62>
 8016df6:	2301      	movs	r3, #1
 8016df8:	e000      	b.n	8016dfc <xQueueGenericCreateStatic+0x64>
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d10d      	bne.n	8016e1c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8016e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e04:	b672      	cpsid	i
 8016e06:	f383 8811 	msr	BASEPRI, r3
 8016e0a:	f3bf 8f6f 	isb	sy
 8016e0e:	f3bf 8f4f 	dsb	sy
 8016e12:	b662      	cpsie	i
 8016e14:	623b      	str	r3, [r7, #32]
}
 8016e16:	bf00      	nop
 8016e18:	bf00      	nop
 8016e1a:	e7fd      	b.n	8016e18 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d102      	bne.n	8016e28 <xQueueGenericCreateStatic+0x90>
 8016e22:	68bb      	ldr	r3, [r7, #8]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d101      	bne.n	8016e2c <xQueueGenericCreateStatic+0x94>
 8016e28:	2301      	movs	r3, #1
 8016e2a:	e000      	b.n	8016e2e <xQueueGenericCreateStatic+0x96>
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d10d      	bne.n	8016e4e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8016e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e36:	b672      	cpsid	i
 8016e38:	f383 8811 	msr	BASEPRI, r3
 8016e3c:	f3bf 8f6f 	isb	sy
 8016e40:	f3bf 8f4f 	dsb	sy
 8016e44:	b662      	cpsie	i
 8016e46:	61fb      	str	r3, [r7, #28]
}
 8016e48:	bf00      	nop
 8016e4a:	bf00      	nop
 8016e4c:	e7fd      	b.n	8016e4a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016e4e:	2348      	movs	r3, #72	@ 0x48
 8016e50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016e52:	697b      	ldr	r3, [r7, #20]
 8016e54:	2b48      	cmp	r3, #72	@ 0x48
 8016e56:	d00d      	beq.n	8016e74 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8016e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e5c:	b672      	cpsid	i
 8016e5e:	f383 8811 	msr	BASEPRI, r3
 8016e62:	f3bf 8f6f 	isb	sy
 8016e66:	f3bf 8f4f 	dsb	sy
 8016e6a:	b662      	cpsie	i
 8016e6c:	61bb      	str	r3, [r7, #24]
}
 8016e6e:	bf00      	nop
 8016e70:	bf00      	nop
 8016e72:	e7fd      	b.n	8016e70 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016e74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016e76:	683b      	ldr	r3, [r7, #0]
 8016e78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8016e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d00d      	beq.n	8016e9c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e82:	2201      	movs	r2, #1
 8016e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016e88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8016e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e8e:	9300      	str	r3, [sp, #0]
 8016e90:	4613      	mov	r3, r2
 8016e92:	687a      	ldr	r2, [r7, #4]
 8016e94:	68b9      	ldr	r1, [r7, #8]
 8016e96:	68f8      	ldr	r0, [r7, #12]
 8016e98:	f000 f848 	bl	8016f2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	3730      	adds	r7, #48	@ 0x30
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	bd80      	pop	{r7, pc}

08016ea6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016ea6:	b580      	push	{r7, lr}
 8016ea8:	b08a      	sub	sp, #40	@ 0x28
 8016eaa:	af02      	add	r7, sp, #8
 8016eac:	60f8      	str	r0, [r7, #12]
 8016eae:	60b9      	str	r1, [r7, #8]
 8016eb0:	4613      	mov	r3, r2
 8016eb2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d10d      	bne.n	8016ed6 <xQueueGenericCreate+0x30>
	__asm volatile
 8016eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ebe:	b672      	cpsid	i
 8016ec0:	f383 8811 	msr	BASEPRI, r3
 8016ec4:	f3bf 8f6f 	isb	sy
 8016ec8:	f3bf 8f4f 	dsb	sy
 8016ecc:	b662      	cpsie	i
 8016ece:	613b      	str	r3, [r7, #16]
}
 8016ed0:	bf00      	nop
 8016ed2:	bf00      	nop
 8016ed4:	e7fd      	b.n	8016ed2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d102      	bne.n	8016ee2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016edc:	2300      	movs	r3, #0
 8016ede:	61fb      	str	r3, [r7, #28]
 8016ee0:	e004      	b.n	8016eec <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	68ba      	ldr	r2, [r7, #8]
 8016ee6:	fb02 f303 	mul.w	r3, r2, r3
 8016eea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016eec:	69fb      	ldr	r3, [r7, #28]
 8016eee:	3348      	adds	r3, #72	@ 0x48
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f002 fa01 	bl	80192f8 <pvPortMalloc>
 8016ef6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016ef8:	69bb      	ldr	r3, [r7, #24]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d011      	beq.n	8016f22 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016efe:	69bb      	ldr	r3, [r7, #24]
 8016f00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016f02:	697b      	ldr	r3, [r7, #20]
 8016f04:	3348      	adds	r3, #72	@ 0x48
 8016f06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016f08:	69bb      	ldr	r3, [r7, #24]
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016f10:	79fa      	ldrb	r2, [r7, #7]
 8016f12:	69bb      	ldr	r3, [r7, #24]
 8016f14:	9300      	str	r3, [sp, #0]
 8016f16:	4613      	mov	r3, r2
 8016f18:	697a      	ldr	r2, [r7, #20]
 8016f1a:	68b9      	ldr	r1, [r7, #8]
 8016f1c:	68f8      	ldr	r0, [r7, #12]
 8016f1e:	f000 f805 	bl	8016f2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016f22:	69bb      	ldr	r3, [r7, #24]
	}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3720      	adds	r7, #32
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}

08016f2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b084      	sub	sp, #16
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	60f8      	str	r0, [r7, #12]
 8016f34:	60b9      	str	r1, [r7, #8]
 8016f36:	607a      	str	r2, [r7, #4]
 8016f38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016f3a:	68bb      	ldr	r3, [r7, #8]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d103      	bne.n	8016f48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016f40:	69bb      	ldr	r3, [r7, #24]
 8016f42:	69ba      	ldr	r2, [r7, #24]
 8016f44:	601a      	str	r2, [r3, #0]
 8016f46:	e002      	b.n	8016f4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016f48:	69bb      	ldr	r3, [r7, #24]
 8016f4a:	687a      	ldr	r2, [r7, #4]
 8016f4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016f4e:	69bb      	ldr	r3, [r7, #24]
 8016f50:	68fa      	ldr	r2, [r7, #12]
 8016f52:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016f54:	69bb      	ldr	r3, [r7, #24]
 8016f56:	68ba      	ldr	r2, [r7, #8]
 8016f58:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016f5a:	2101      	movs	r1, #1
 8016f5c:	69b8      	ldr	r0, [r7, #24]
 8016f5e:	f7ff feaf 	bl	8016cc0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016f62:	bf00      	nop
 8016f64:	3710      	adds	r7, #16
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd80      	pop	{r7, pc}

08016f6a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016f6a:	b580      	push	{r7, lr}
 8016f6c:	b08a      	sub	sp, #40	@ 0x28
 8016f6e:	af02      	add	r7, sp, #8
 8016f70:	60f8      	str	r0, [r7, #12]
 8016f72:	60b9      	str	r1, [r7, #8]
 8016f74:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d10d      	bne.n	8016f98 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8016f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f80:	b672      	cpsid	i
 8016f82:	f383 8811 	msr	BASEPRI, r3
 8016f86:	f3bf 8f6f 	isb	sy
 8016f8a:	f3bf 8f4f 	dsb	sy
 8016f8e:	b662      	cpsie	i
 8016f90:	61bb      	str	r3, [r7, #24]
}
 8016f92:	bf00      	nop
 8016f94:	bf00      	nop
 8016f96:	e7fd      	b.n	8016f94 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016f98:	68ba      	ldr	r2, [r7, #8]
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	429a      	cmp	r2, r3
 8016f9e:	d90d      	bls.n	8016fbc <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8016fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fa4:	b672      	cpsid	i
 8016fa6:	f383 8811 	msr	BASEPRI, r3
 8016faa:	f3bf 8f6f 	isb	sy
 8016fae:	f3bf 8f4f 	dsb	sy
 8016fb2:	b662      	cpsie	i
 8016fb4:	617b      	str	r3, [r7, #20]
}
 8016fb6:	bf00      	nop
 8016fb8:	bf00      	nop
 8016fba:	e7fd      	b.n	8016fb8 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016fbc:	2302      	movs	r3, #2
 8016fbe:	9300      	str	r3, [sp, #0]
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	2100      	movs	r1, #0
 8016fc6:	68f8      	ldr	r0, [r7, #12]
 8016fc8:	f7ff fee6 	bl	8016d98 <xQueueGenericCreateStatic>
 8016fcc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016fce:	69fb      	ldr	r3, [r7, #28]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d002      	beq.n	8016fda <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016fd4:	69fb      	ldr	r3, [r7, #28]
 8016fd6:	68ba      	ldr	r2, [r7, #8]
 8016fd8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016fda:	69fb      	ldr	r3, [r7, #28]
	}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3720      	adds	r7, #32
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}

08016fe4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b086      	sub	sp, #24
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
 8016fec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d10d      	bne.n	8017010 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8016ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ff8:	b672      	cpsid	i
 8016ffa:	f383 8811 	msr	BASEPRI, r3
 8016ffe:	f3bf 8f6f 	isb	sy
 8017002:	f3bf 8f4f 	dsb	sy
 8017006:	b662      	cpsie	i
 8017008:	613b      	str	r3, [r7, #16]
}
 801700a:	bf00      	nop
 801700c:	bf00      	nop
 801700e:	e7fd      	b.n	801700c <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8017010:	683a      	ldr	r2, [r7, #0]
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	429a      	cmp	r2, r3
 8017016:	d90d      	bls.n	8017034 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8017018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801701c:	b672      	cpsid	i
 801701e:	f383 8811 	msr	BASEPRI, r3
 8017022:	f3bf 8f6f 	isb	sy
 8017026:	f3bf 8f4f 	dsb	sy
 801702a:	b662      	cpsie	i
 801702c:	60fb      	str	r3, [r7, #12]
}
 801702e:	bf00      	nop
 8017030:	bf00      	nop
 8017032:	e7fd      	b.n	8017030 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8017034:	2202      	movs	r2, #2
 8017036:	2100      	movs	r1, #0
 8017038:	6878      	ldr	r0, [r7, #4]
 801703a:	f7ff ff34 	bl	8016ea6 <xQueueGenericCreate>
 801703e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8017040:	697b      	ldr	r3, [r7, #20]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d002      	beq.n	801704c <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8017046:	697b      	ldr	r3, [r7, #20]
 8017048:	683a      	ldr	r2, [r7, #0]
 801704a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801704c:	697b      	ldr	r3, [r7, #20]
	}
 801704e:	4618      	mov	r0, r3
 8017050:	3718      	adds	r7, #24
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}
	...

08017058 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017058:	b580      	push	{r7, lr}
 801705a:	b08e      	sub	sp, #56	@ 0x38
 801705c:	af00      	add	r7, sp, #0
 801705e:	60f8      	str	r0, [r7, #12]
 8017060:	60b9      	str	r1, [r7, #8]
 8017062:	607a      	str	r2, [r7, #4]
 8017064:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017066:	2300      	movs	r3, #0
 8017068:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017070:	2b00      	cmp	r3, #0
 8017072:	d10d      	bne.n	8017090 <xQueueGenericSend+0x38>
	__asm volatile
 8017074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017078:	b672      	cpsid	i
 801707a:	f383 8811 	msr	BASEPRI, r3
 801707e:	f3bf 8f6f 	isb	sy
 8017082:	f3bf 8f4f 	dsb	sy
 8017086:	b662      	cpsie	i
 8017088:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801708a:	bf00      	nop
 801708c:	bf00      	nop
 801708e:	e7fd      	b.n	801708c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d103      	bne.n	801709e <xQueueGenericSend+0x46>
 8017096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801709a:	2b00      	cmp	r3, #0
 801709c:	d101      	bne.n	80170a2 <xQueueGenericSend+0x4a>
 801709e:	2301      	movs	r3, #1
 80170a0:	e000      	b.n	80170a4 <xQueueGenericSend+0x4c>
 80170a2:	2300      	movs	r3, #0
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d10d      	bne.n	80170c4 <xQueueGenericSend+0x6c>
	__asm volatile
 80170a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170ac:	b672      	cpsid	i
 80170ae:	f383 8811 	msr	BASEPRI, r3
 80170b2:	f3bf 8f6f 	isb	sy
 80170b6:	f3bf 8f4f 	dsb	sy
 80170ba:	b662      	cpsie	i
 80170bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80170be:	bf00      	nop
 80170c0:	bf00      	nop
 80170c2:	e7fd      	b.n	80170c0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80170c4:	683b      	ldr	r3, [r7, #0]
 80170c6:	2b02      	cmp	r3, #2
 80170c8:	d103      	bne.n	80170d2 <xQueueGenericSend+0x7a>
 80170ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80170ce:	2b01      	cmp	r3, #1
 80170d0:	d101      	bne.n	80170d6 <xQueueGenericSend+0x7e>
 80170d2:	2301      	movs	r3, #1
 80170d4:	e000      	b.n	80170d8 <xQueueGenericSend+0x80>
 80170d6:	2300      	movs	r3, #0
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d10d      	bne.n	80170f8 <xQueueGenericSend+0xa0>
	__asm volatile
 80170dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170e0:	b672      	cpsid	i
 80170e2:	f383 8811 	msr	BASEPRI, r3
 80170e6:	f3bf 8f6f 	isb	sy
 80170ea:	f3bf 8f4f 	dsb	sy
 80170ee:	b662      	cpsie	i
 80170f0:	623b      	str	r3, [r7, #32]
}
 80170f2:	bf00      	nop
 80170f4:	bf00      	nop
 80170f6:	e7fd      	b.n	80170f4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80170f8:	f001 fc80 	bl	80189fc <xTaskGetSchedulerState>
 80170fc:	4603      	mov	r3, r0
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d102      	bne.n	8017108 <xQueueGenericSend+0xb0>
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d101      	bne.n	801710c <xQueueGenericSend+0xb4>
 8017108:	2301      	movs	r3, #1
 801710a:	e000      	b.n	801710e <xQueueGenericSend+0xb6>
 801710c:	2300      	movs	r3, #0
 801710e:	2b00      	cmp	r3, #0
 8017110:	d10d      	bne.n	801712e <xQueueGenericSend+0xd6>
	__asm volatile
 8017112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017116:	b672      	cpsid	i
 8017118:	f383 8811 	msr	BASEPRI, r3
 801711c:	f3bf 8f6f 	isb	sy
 8017120:	f3bf 8f4f 	dsb	sy
 8017124:	b662      	cpsie	i
 8017126:	61fb      	str	r3, [r7, #28]
}
 8017128:	bf00      	nop
 801712a:	bf00      	nop
 801712c:	e7fd      	b.n	801712a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801712e:	f001 ffb5 	bl	801909c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801713a:	429a      	cmp	r2, r3
 801713c:	d302      	bcc.n	8017144 <xQueueGenericSend+0xec>
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	2b02      	cmp	r3, #2
 8017142:	d129      	bne.n	8017198 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017144:	683a      	ldr	r2, [r7, #0]
 8017146:	68b9      	ldr	r1, [r7, #8]
 8017148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801714a:	f000 fcd3 	bl	8017af4 <prvCopyDataToQueue>
 801714e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017154:	2b00      	cmp	r3, #0
 8017156:	d010      	beq.n	801717a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801715a:	3324      	adds	r3, #36	@ 0x24
 801715c:	4618      	mov	r0, r3
 801715e:	f001 fa83 	bl	8018668 <xTaskRemoveFromEventList>
 8017162:	4603      	mov	r3, r0
 8017164:	2b00      	cmp	r3, #0
 8017166:	d013      	beq.n	8017190 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017168:	4b3f      	ldr	r3, [pc, #252]	@ (8017268 <xQueueGenericSend+0x210>)
 801716a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801716e:	601a      	str	r2, [r3, #0]
 8017170:	f3bf 8f4f 	dsb	sy
 8017174:	f3bf 8f6f 	isb	sy
 8017178:	e00a      	b.n	8017190 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801717a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801717c:	2b00      	cmp	r3, #0
 801717e:	d007      	beq.n	8017190 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017180:	4b39      	ldr	r3, [pc, #228]	@ (8017268 <xQueueGenericSend+0x210>)
 8017182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017186:	601a      	str	r2, [r3, #0]
 8017188:	f3bf 8f4f 	dsb	sy
 801718c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017190:	f001 ffba 	bl	8019108 <vPortExitCritical>
				return pdPASS;
 8017194:	2301      	movs	r3, #1
 8017196:	e063      	b.n	8017260 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d103      	bne.n	80171a6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801719e:	f001 ffb3 	bl	8019108 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80171a2:	2300      	movs	r3, #0
 80171a4:	e05c      	b.n	8017260 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80171a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d106      	bne.n	80171ba <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80171ac:	f107 0314 	add.w	r3, r7, #20
 80171b0:	4618      	mov	r0, r3
 80171b2:	f001 fabf 	bl	8018734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80171b6:	2301      	movs	r3, #1
 80171b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80171ba:	f001 ffa5 	bl	8019108 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80171be:	f001 f81b 	bl	80181f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80171c2:	f001 ff6b 	bl	801909c <vPortEnterCritical>
 80171c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80171cc:	b25b      	sxtb	r3, r3
 80171ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171d2:	d103      	bne.n	80171dc <xQueueGenericSend+0x184>
 80171d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171d6:	2200      	movs	r2, #0
 80171d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80171dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80171e2:	b25b      	sxtb	r3, r3
 80171e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171e8:	d103      	bne.n	80171f2 <xQueueGenericSend+0x19a>
 80171ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171ec:	2200      	movs	r2, #0
 80171ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80171f2:	f001 ff89 	bl	8019108 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80171f6:	1d3a      	adds	r2, r7, #4
 80171f8:	f107 0314 	add.w	r3, r7, #20
 80171fc:	4611      	mov	r1, r2
 80171fe:	4618      	mov	r0, r3
 8017200:	f001 faae 	bl	8018760 <xTaskCheckForTimeOut>
 8017204:	4603      	mov	r3, r0
 8017206:	2b00      	cmp	r3, #0
 8017208:	d124      	bne.n	8017254 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801720a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801720c:	f000 fd6a 	bl	8017ce4 <prvIsQueueFull>
 8017210:	4603      	mov	r3, r0
 8017212:	2b00      	cmp	r3, #0
 8017214:	d018      	beq.n	8017248 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017218:	3310      	adds	r3, #16
 801721a:	687a      	ldr	r2, [r7, #4]
 801721c:	4611      	mov	r1, r2
 801721e:	4618      	mov	r0, r3
 8017220:	f001 f9fa 	bl	8018618 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017226:	f000 fcf5 	bl	8017c14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801722a:	f000 fff3 	bl	8018214 <xTaskResumeAll>
 801722e:	4603      	mov	r3, r0
 8017230:	2b00      	cmp	r3, #0
 8017232:	f47f af7c 	bne.w	801712e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8017236:	4b0c      	ldr	r3, [pc, #48]	@ (8017268 <xQueueGenericSend+0x210>)
 8017238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801723c:	601a      	str	r2, [r3, #0]
 801723e:	f3bf 8f4f 	dsb	sy
 8017242:	f3bf 8f6f 	isb	sy
 8017246:	e772      	b.n	801712e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801724a:	f000 fce3 	bl	8017c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801724e:	f000 ffe1 	bl	8018214 <xTaskResumeAll>
 8017252:	e76c      	b.n	801712e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017256:	f000 fcdd 	bl	8017c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801725a:	f000 ffdb 	bl	8018214 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801725e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017260:	4618      	mov	r0, r3
 8017262:	3738      	adds	r7, #56	@ 0x38
 8017264:	46bd      	mov	sp, r7
 8017266:	bd80      	pop	{r7, pc}
 8017268:	e000ed04 	.word	0xe000ed04

0801726c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b08e      	sub	sp, #56	@ 0x38
 8017270:	af00      	add	r7, sp, #0
 8017272:	60f8      	str	r0, [r7, #12]
 8017274:	60b9      	str	r1, [r7, #8]
 8017276:	607a      	str	r2, [r7, #4]
 8017278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017280:	2b00      	cmp	r3, #0
 8017282:	d10d      	bne.n	80172a0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8017284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017288:	b672      	cpsid	i
 801728a:	f383 8811 	msr	BASEPRI, r3
 801728e:	f3bf 8f6f 	isb	sy
 8017292:	f3bf 8f4f 	dsb	sy
 8017296:	b662      	cpsie	i
 8017298:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801729a:	bf00      	nop
 801729c:	bf00      	nop
 801729e:	e7fd      	b.n	801729c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80172a0:	68bb      	ldr	r3, [r7, #8]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d103      	bne.n	80172ae <xQueueGenericSendFromISR+0x42>
 80172a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d101      	bne.n	80172b2 <xQueueGenericSendFromISR+0x46>
 80172ae:	2301      	movs	r3, #1
 80172b0:	e000      	b.n	80172b4 <xQueueGenericSendFromISR+0x48>
 80172b2:	2300      	movs	r3, #0
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d10d      	bne.n	80172d4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80172b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172bc:	b672      	cpsid	i
 80172be:	f383 8811 	msr	BASEPRI, r3
 80172c2:	f3bf 8f6f 	isb	sy
 80172c6:	f3bf 8f4f 	dsb	sy
 80172ca:	b662      	cpsie	i
 80172cc:	623b      	str	r3, [r7, #32]
}
 80172ce:	bf00      	nop
 80172d0:	bf00      	nop
 80172d2:	e7fd      	b.n	80172d0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	2b02      	cmp	r3, #2
 80172d8:	d103      	bne.n	80172e2 <xQueueGenericSendFromISR+0x76>
 80172da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80172de:	2b01      	cmp	r3, #1
 80172e0:	d101      	bne.n	80172e6 <xQueueGenericSendFromISR+0x7a>
 80172e2:	2301      	movs	r3, #1
 80172e4:	e000      	b.n	80172e8 <xQueueGenericSendFromISR+0x7c>
 80172e6:	2300      	movs	r3, #0
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d10d      	bne.n	8017308 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80172ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172f0:	b672      	cpsid	i
 80172f2:	f383 8811 	msr	BASEPRI, r3
 80172f6:	f3bf 8f6f 	isb	sy
 80172fa:	f3bf 8f4f 	dsb	sy
 80172fe:	b662      	cpsie	i
 8017300:	61fb      	str	r3, [r7, #28]
}
 8017302:	bf00      	nop
 8017304:	bf00      	nop
 8017306:	e7fd      	b.n	8017304 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017308:	f001 ffb0 	bl	801926c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801730c:	f3ef 8211 	mrs	r2, BASEPRI
 8017310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017314:	b672      	cpsid	i
 8017316:	f383 8811 	msr	BASEPRI, r3
 801731a:	f3bf 8f6f 	isb	sy
 801731e:	f3bf 8f4f 	dsb	sy
 8017322:	b662      	cpsie	i
 8017324:	61ba      	str	r2, [r7, #24]
 8017326:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017328:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801732a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801732e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017334:	429a      	cmp	r2, r3
 8017336:	d302      	bcc.n	801733e <xQueueGenericSendFromISR+0xd2>
 8017338:	683b      	ldr	r3, [r7, #0]
 801733a:	2b02      	cmp	r3, #2
 801733c:	d12c      	bne.n	8017398 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017340:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017348:	683a      	ldr	r2, [r7, #0]
 801734a:	68b9      	ldr	r1, [r7, #8]
 801734c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801734e:	f000 fbd1 	bl	8017af4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017352:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8017356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801735a:	d112      	bne.n	8017382 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801735c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801735e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017360:	2b00      	cmp	r3, #0
 8017362:	d016      	beq.n	8017392 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017366:	3324      	adds	r3, #36	@ 0x24
 8017368:	4618      	mov	r0, r3
 801736a:	f001 f97d 	bl	8018668 <xTaskRemoveFromEventList>
 801736e:	4603      	mov	r3, r0
 8017370:	2b00      	cmp	r3, #0
 8017372:	d00e      	beq.n	8017392 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d00b      	beq.n	8017392 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	2201      	movs	r2, #1
 801737e:	601a      	str	r2, [r3, #0]
 8017380:	e007      	b.n	8017392 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017382:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017386:	3301      	adds	r3, #1
 8017388:	b2db      	uxtb	r3, r3
 801738a:	b25a      	sxtb	r2, r3
 801738c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801738e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8017392:	2301      	movs	r3, #1
 8017394:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8017396:	e001      	b.n	801739c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017398:	2300      	movs	r3, #0
 801739a:	637b      	str	r3, [r7, #52]	@ 0x34
 801739c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801739e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80173a0:	693b      	ldr	r3, [r7, #16]
 80173a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80173a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80173a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80173aa:	4618      	mov	r0, r3
 80173ac:	3738      	adds	r7, #56	@ 0x38
 80173ae:	46bd      	mov	sp, r7
 80173b0:	bd80      	pop	{r7, pc}

080173b2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80173b2:	b580      	push	{r7, lr}
 80173b4:	b08e      	sub	sp, #56	@ 0x38
 80173b6:	af00      	add	r7, sp, #0
 80173b8:	6078      	str	r0, [r7, #4]
 80173ba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80173c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d10d      	bne.n	80173e2 <xQueueGiveFromISR+0x30>
	__asm volatile
 80173c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173ca:	b672      	cpsid	i
 80173cc:	f383 8811 	msr	BASEPRI, r3
 80173d0:	f3bf 8f6f 	isb	sy
 80173d4:	f3bf 8f4f 	dsb	sy
 80173d8:	b662      	cpsie	i
 80173da:	623b      	str	r3, [r7, #32]
}
 80173dc:	bf00      	nop
 80173de:	bf00      	nop
 80173e0:	e7fd      	b.n	80173de <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80173e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d00d      	beq.n	8017406 <xQueueGiveFromISR+0x54>
	__asm volatile
 80173ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173ee:	b672      	cpsid	i
 80173f0:	f383 8811 	msr	BASEPRI, r3
 80173f4:	f3bf 8f6f 	isb	sy
 80173f8:	f3bf 8f4f 	dsb	sy
 80173fc:	b662      	cpsie	i
 80173fe:	61fb      	str	r3, [r7, #28]
}
 8017400:	bf00      	nop
 8017402:	bf00      	nop
 8017404:	e7fd      	b.n	8017402 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d103      	bne.n	8017416 <xQueueGiveFromISR+0x64>
 801740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017410:	689b      	ldr	r3, [r3, #8]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d101      	bne.n	801741a <xQueueGiveFromISR+0x68>
 8017416:	2301      	movs	r3, #1
 8017418:	e000      	b.n	801741c <xQueueGiveFromISR+0x6a>
 801741a:	2300      	movs	r3, #0
 801741c:	2b00      	cmp	r3, #0
 801741e:	d10d      	bne.n	801743c <xQueueGiveFromISR+0x8a>
	__asm volatile
 8017420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017424:	b672      	cpsid	i
 8017426:	f383 8811 	msr	BASEPRI, r3
 801742a:	f3bf 8f6f 	isb	sy
 801742e:	f3bf 8f4f 	dsb	sy
 8017432:	b662      	cpsie	i
 8017434:	61bb      	str	r3, [r7, #24]
}
 8017436:	bf00      	nop
 8017438:	bf00      	nop
 801743a:	e7fd      	b.n	8017438 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801743c:	f001 ff16 	bl	801926c <vPortValidateInterruptPriority>
	__asm volatile
 8017440:	f3ef 8211 	mrs	r2, BASEPRI
 8017444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017448:	b672      	cpsid	i
 801744a:	f383 8811 	msr	BASEPRI, r3
 801744e:	f3bf 8f6f 	isb	sy
 8017452:	f3bf 8f4f 	dsb	sy
 8017456:	b662      	cpsie	i
 8017458:	617a      	str	r2, [r7, #20]
 801745a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801745c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801745e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017464:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801746a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801746c:	429a      	cmp	r2, r3
 801746e:	d22b      	bcs.n	80174c8 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017472:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801747c:	1c5a      	adds	r2, r3, #1
 801747e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017480:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017482:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8017486:	f1b3 3fff 	cmp.w	r3, #4294967295
 801748a:	d112      	bne.n	80174b2 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017490:	2b00      	cmp	r3, #0
 8017492:	d016      	beq.n	80174c2 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017496:	3324      	adds	r3, #36	@ 0x24
 8017498:	4618      	mov	r0, r3
 801749a:	f001 f8e5 	bl	8018668 <xTaskRemoveFromEventList>
 801749e:	4603      	mov	r3, r0
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d00e      	beq.n	80174c2 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80174a4:	683b      	ldr	r3, [r7, #0]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d00b      	beq.n	80174c2 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80174aa:	683b      	ldr	r3, [r7, #0]
 80174ac:	2201      	movs	r2, #1
 80174ae:	601a      	str	r2, [r3, #0]
 80174b0:	e007      	b.n	80174c2 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80174b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80174b6:	3301      	adds	r3, #1
 80174b8:	b2db      	uxtb	r3, r3
 80174ba:	b25a      	sxtb	r2, r3
 80174bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80174c2:	2301      	movs	r3, #1
 80174c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80174c6:	e001      	b.n	80174cc <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80174c8:	2300      	movs	r3, #0
 80174ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80174cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174ce:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	f383 8811 	msr	BASEPRI, r3
}
 80174d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80174d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80174da:	4618      	mov	r0, r3
 80174dc:	3738      	adds	r7, #56	@ 0x38
 80174de:	46bd      	mov	sp, r7
 80174e0:	bd80      	pop	{r7, pc}
	...

080174e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b08c      	sub	sp, #48	@ 0x30
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	60f8      	str	r0, [r7, #12]
 80174ec:	60b9      	str	r1, [r7, #8]
 80174ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80174f0:	2300      	movs	r3, #0
 80174f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80174f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d10d      	bne.n	801751a <xQueueReceive+0x36>
	__asm volatile
 80174fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017502:	b672      	cpsid	i
 8017504:	f383 8811 	msr	BASEPRI, r3
 8017508:	f3bf 8f6f 	isb	sy
 801750c:	f3bf 8f4f 	dsb	sy
 8017510:	b662      	cpsie	i
 8017512:	623b      	str	r3, [r7, #32]
}
 8017514:	bf00      	nop
 8017516:	bf00      	nop
 8017518:	e7fd      	b.n	8017516 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d103      	bne.n	8017528 <xQueueReceive+0x44>
 8017520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017524:	2b00      	cmp	r3, #0
 8017526:	d101      	bne.n	801752c <xQueueReceive+0x48>
 8017528:	2301      	movs	r3, #1
 801752a:	e000      	b.n	801752e <xQueueReceive+0x4a>
 801752c:	2300      	movs	r3, #0
 801752e:	2b00      	cmp	r3, #0
 8017530:	d10d      	bne.n	801754e <xQueueReceive+0x6a>
	__asm volatile
 8017532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017536:	b672      	cpsid	i
 8017538:	f383 8811 	msr	BASEPRI, r3
 801753c:	f3bf 8f6f 	isb	sy
 8017540:	f3bf 8f4f 	dsb	sy
 8017544:	b662      	cpsie	i
 8017546:	61fb      	str	r3, [r7, #28]
}
 8017548:	bf00      	nop
 801754a:	bf00      	nop
 801754c:	e7fd      	b.n	801754a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801754e:	f001 fa55 	bl	80189fc <xTaskGetSchedulerState>
 8017552:	4603      	mov	r3, r0
 8017554:	2b00      	cmp	r3, #0
 8017556:	d102      	bne.n	801755e <xQueueReceive+0x7a>
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d101      	bne.n	8017562 <xQueueReceive+0x7e>
 801755e:	2301      	movs	r3, #1
 8017560:	e000      	b.n	8017564 <xQueueReceive+0x80>
 8017562:	2300      	movs	r3, #0
 8017564:	2b00      	cmp	r3, #0
 8017566:	d10d      	bne.n	8017584 <xQueueReceive+0xa0>
	__asm volatile
 8017568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801756c:	b672      	cpsid	i
 801756e:	f383 8811 	msr	BASEPRI, r3
 8017572:	f3bf 8f6f 	isb	sy
 8017576:	f3bf 8f4f 	dsb	sy
 801757a:	b662      	cpsie	i
 801757c:	61bb      	str	r3, [r7, #24]
}
 801757e:	bf00      	nop
 8017580:	bf00      	nop
 8017582:	e7fd      	b.n	8017580 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017584:	f001 fd8a 	bl	801909c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801758a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801758c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017590:	2b00      	cmp	r3, #0
 8017592:	d01f      	beq.n	80175d4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017594:	68b9      	ldr	r1, [r7, #8]
 8017596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017598:	f000 fb16 	bl	8017bc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801759e:	1e5a      	subs	r2, r3, #1
 80175a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80175a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175a6:	691b      	ldr	r3, [r3, #16]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d00f      	beq.n	80175cc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80175ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175ae:	3310      	adds	r3, #16
 80175b0:	4618      	mov	r0, r3
 80175b2:	f001 f859 	bl	8018668 <xTaskRemoveFromEventList>
 80175b6:	4603      	mov	r3, r0
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d007      	beq.n	80175cc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80175bc:	4b3c      	ldr	r3, [pc, #240]	@ (80176b0 <xQueueReceive+0x1cc>)
 80175be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80175c2:	601a      	str	r2, [r3, #0]
 80175c4:	f3bf 8f4f 	dsb	sy
 80175c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80175cc:	f001 fd9c 	bl	8019108 <vPortExitCritical>
				return pdPASS;
 80175d0:	2301      	movs	r3, #1
 80175d2:	e069      	b.n	80176a8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d103      	bne.n	80175e2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80175da:	f001 fd95 	bl	8019108 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80175de:	2300      	movs	r3, #0
 80175e0:	e062      	b.n	80176a8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80175e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d106      	bne.n	80175f6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80175e8:	f107 0310 	add.w	r3, r7, #16
 80175ec:	4618      	mov	r0, r3
 80175ee:	f001 f8a1 	bl	8018734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80175f2:	2301      	movs	r3, #1
 80175f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80175f6:	f001 fd87 	bl	8019108 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80175fa:	f000 fdfd 	bl	80181f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80175fe:	f001 fd4d 	bl	801909c <vPortEnterCritical>
 8017602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017608:	b25b      	sxtb	r3, r3
 801760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801760e:	d103      	bne.n	8017618 <xQueueReceive+0x134>
 8017610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017612:	2200      	movs	r2, #0
 8017614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801761a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801761e:	b25b      	sxtb	r3, r3
 8017620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017624:	d103      	bne.n	801762e <xQueueReceive+0x14a>
 8017626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017628:	2200      	movs	r2, #0
 801762a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801762e:	f001 fd6b 	bl	8019108 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017632:	1d3a      	adds	r2, r7, #4
 8017634:	f107 0310 	add.w	r3, r7, #16
 8017638:	4611      	mov	r1, r2
 801763a:	4618      	mov	r0, r3
 801763c:	f001 f890 	bl	8018760 <xTaskCheckForTimeOut>
 8017640:	4603      	mov	r3, r0
 8017642:	2b00      	cmp	r3, #0
 8017644:	d123      	bne.n	801768e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017648:	f000 fb36 	bl	8017cb8 <prvIsQueueEmpty>
 801764c:	4603      	mov	r3, r0
 801764e:	2b00      	cmp	r3, #0
 8017650:	d017      	beq.n	8017682 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017654:	3324      	adds	r3, #36	@ 0x24
 8017656:	687a      	ldr	r2, [r7, #4]
 8017658:	4611      	mov	r1, r2
 801765a:	4618      	mov	r0, r3
 801765c:	f000 ffdc 	bl	8018618 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017660:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017662:	f000 fad7 	bl	8017c14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017666:	f000 fdd5 	bl	8018214 <xTaskResumeAll>
 801766a:	4603      	mov	r3, r0
 801766c:	2b00      	cmp	r3, #0
 801766e:	d189      	bne.n	8017584 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8017670:	4b0f      	ldr	r3, [pc, #60]	@ (80176b0 <xQueueReceive+0x1cc>)
 8017672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017676:	601a      	str	r2, [r3, #0]
 8017678:	f3bf 8f4f 	dsb	sy
 801767c:	f3bf 8f6f 	isb	sy
 8017680:	e780      	b.n	8017584 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017684:	f000 fac6 	bl	8017c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017688:	f000 fdc4 	bl	8018214 <xTaskResumeAll>
 801768c:	e77a      	b.n	8017584 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801768e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017690:	f000 fac0 	bl	8017c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017694:	f000 fdbe 	bl	8018214 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801769a:	f000 fb0d 	bl	8017cb8 <prvIsQueueEmpty>
 801769e:	4603      	mov	r3, r0
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	f43f af6f 	beq.w	8017584 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80176a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80176a8:	4618      	mov	r0, r3
 80176aa:	3730      	adds	r7, #48	@ 0x30
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}
 80176b0:	e000ed04 	.word	0xe000ed04

080176b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b08e      	sub	sp, #56	@ 0x38
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
 80176bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80176be:	2300      	movs	r3, #0
 80176c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80176c6:	2300      	movs	r3, #0
 80176c8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80176ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d10d      	bne.n	80176ec <xQueueSemaphoreTake+0x38>
	__asm volatile
 80176d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176d4:	b672      	cpsid	i
 80176d6:	f383 8811 	msr	BASEPRI, r3
 80176da:	f3bf 8f6f 	isb	sy
 80176de:	f3bf 8f4f 	dsb	sy
 80176e2:	b662      	cpsie	i
 80176e4:	623b      	str	r3, [r7, #32]
}
 80176e6:	bf00      	nop
 80176e8:	bf00      	nop
 80176ea:	e7fd      	b.n	80176e8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80176ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d00d      	beq.n	8017710 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80176f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176f8:	b672      	cpsid	i
 80176fa:	f383 8811 	msr	BASEPRI, r3
 80176fe:	f3bf 8f6f 	isb	sy
 8017702:	f3bf 8f4f 	dsb	sy
 8017706:	b662      	cpsie	i
 8017708:	61fb      	str	r3, [r7, #28]
}
 801770a:	bf00      	nop
 801770c:	bf00      	nop
 801770e:	e7fd      	b.n	801770c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017710:	f001 f974 	bl	80189fc <xTaskGetSchedulerState>
 8017714:	4603      	mov	r3, r0
 8017716:	2b00      	cmp	r3, #0
 8017718:	d102      	bne.n	8017720 <xQueueSemaphoreTake+0x6c>
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d101      	bne.n	8017724 <xQueueSemaphoreTake+0x70>
 8017720:	2301      	movs	r3, #1
 8017722:	e000      	b.n	8017726 <xQueueSemaphoreTake+0x72>
 8017724:	2300      	movs	r3, #0
 8017726:	2b00      	cmp	r3, #0
 8017728:	d10d      	bne.n	8017746 <xQueueSemaphoreTake+0x92>
	__asm volatile
 801772a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801772e:	b672      	cpsid	i
 8017730:	f383 8811 	msr	BASEPRI, r3
 8017734:	f3bf 8f6f 	isb	sy
 8017738:	f3bf 8f4f 	dsb	sy
 801773c:	b662      	cpsie	i
 801773e:	61bb      	str	r3, [r7, #24]
}
 8017740:	bf00      	nop
 8017742:	bf00      	nop
 8017744:	e7fd      	b.n	8017742 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017746:	f001 fca9 	bl	801909c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801774a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801774c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801774e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017752:	2b00      	cmp	r3, #0
 8017754:	d024      	beq.n	80177a0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017758:	1e5a      	subs	r2, r3, #1
 801775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801775c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801775e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d104      	bne.n	8017770 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017766:	f001 fb13 	bl	8018d90 <pvTaskIncrementMutexHeldCount>
 801776a:	4602      	mov	r2, r0
 801776c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801776e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017772:	691b      	ldr	r3, [r3, #16]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d00f      	beq.n	8017798 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801777a:	3310      	adds	r3, #16
 801777c:	4618      	mov	r0, r3
 801777e:	f000 ff73 	bl	8018668 <xTaskRemoveFromEventList>
 8017782:	4603      	mov	r3, r0
 8017784:	2b00      	cmp	r3, #0
 8017786:	d007      	beq.n	8017798 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017788:	4b55      	ldr	r3, [pc, #340]	@ (80178e0 <xQueueSemaphoreTake+0x22c>)
 801778a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801778e:	601a      	str	r2, [r3, #0]
 8017790:	f3bf 8f4f 	dsb	sy
 8017794:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017798:	f001 fcb6 	bl	8019108 <vPortExitCritical>
				return pdPASS;
 801779c:	2301      	movs	r3, #1
 801779e:	e09a      	b.n	80178d6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80177a0:	683b      	ldr	r3, [r7, #0]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d114      	bne.n	80177d0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80177a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d00d      	beq.n	80177c8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80177ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177b0:	b672      	cpsid	i
 80177b2:	f383 8811 	msr	BASEPRI, r3
 80177b6:	f3bf 8f6f 	isb	sy
 80177ba:	f3bf 8f4f 	dsb	sy
 80177be:	b662      	cpsie	i
 80177c0:	617b      	str	r3, [r7, #20]
}
 80177c2:	bf00      	nop
 80177c4:	bf00      	nop
 80177c6:	e7fd      	b.n	80177c4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80177c8:	f001 fc9e 	bl	8019108 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80177cc:	2300      	movs	r3, #0
 80177ce:	e082      	b.n	80178d6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80177d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d106      	bne.n	80177e4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80177d6:	f107 030c 	add.w	r3, r7, #12
 80177da:	4618      	mov	r0, r3
 80177dc:	f000 ffaa 	bl	8018734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80177e0:	2301      	movs	r3, #1
 80177e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80177e4:	f001 fc90 	bl	8019108 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80177e8:	f000 fd06 	bl	80181f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80177ec:	f001 fc56 	bl	801909c <vPortEnterCritical>
 80177f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80177f6:	b25b      	sxtb	r3, r3
 80177f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177fc:	d103      	bne.n	8017806 <xQueueSemaphoreTake+0x152>
 80177fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017800:	2200      	movs	r2, #0
 8017802:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017808:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801780c:	b25b      	sxtb	r3, r3
 801780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017812:	d103      	bne.n	801781c <xQueueSemaphoreTake+0x168>
 8017814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017816:	2200      	movs	r2, #0
 8017818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801781c:	f001 fc74 	bl	8019108 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017820:	463a      	mov	r2, r7
 8017822:	f107 030c 	add.w	r3, r7, #12
 8017826:	4611      	mov	r1, r2
 8017828:	4618      	mov	r0, r3
 801782a:	f000 ff99 	bl	8018760 <xTaskCheckForTimeOut>
 801782e:	4603      	mov	r3, r0
 8017830:	2b00      	cmp	r3, #0
 8017832:	d132      	bne.n	801789a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017834:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017836:	f000 fa3f 	bl	8017cb8 <prvIsQueueEmpty>
 801783a:	4603      	mov	r3, r0
 801783c:	2b00      	cmp	r3, #0
 801783e:	d026      	beq.n	801788e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d109      	bne.n	801785c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8017848:	f001 fc28 	bl	801909c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801784c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801784e:	689b      	ldr	r3, [r3, #8]
 8017850:	4618      	mov	r0, r3
 8017852:	f001 f8f1 	bl	8018a38 <xTaskPriorityInherit>
 8017856:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8017858:	f001 fc56 	bl	8019108 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801785c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801785e:	3324      	adds	r3, #36	@ 0x24
 8017860:	683a      	ldr	r2, [r7, #0]
 8017862:	4611      	mov	r1, r2
 8017864:	4618      	mov	r0, r3
 8017866:	f000 fed7 	bl	8018618 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801786a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801786c:	f000 f9d2 	bl	8017c14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017870:	f000 fcd0 	bl	8018214 <xTaskResumeAll>
 8017874:	4603      	mov	r3, r0
 8017876:	2b00      	cmp	r3, #0
 8017878:	f47f af65 	bne.w	8017746 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 801787c:	4b18      	ldr	r3, [pc, #96]	@ (80178e0 <xQueueSemaphoreTake+0x22c>)
 801787e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017882:	601a      	str	r2, [r3, #0]
 8017884:	f3bf 8f4f 	dsb	sy
 8017888:	f3bf 8f6f 	isb	sy
 801788c:	e75b      	b.n	8017746 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801788e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017890:	f000 f9c0 	bl	8017c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017894:	f000 fcbe 	bl	8018214 <xTaskResumeAll>
 8017898:	e755      	b.n	8017746 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801789a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801789c:	f000 f9ba 	bl	8017c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80178a0:	f000 fcb8 	bl	8018214 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80178a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80178a6:	f000 fa07 	bl	8017cb8 <prvIsQueueEmpty>
 80178aa:	4603      	mov	r3, r0
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	f43f af4a 	beq.w	8017746 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80178b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d00d      	beq.n	80178d4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80178b8:	f001 fbf0 	bl	801909c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80178bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80178be:	f000 f901 	bl	8017ac4 <prvGetDisinheritPriorityAfterTimeout>
 80178c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80178c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178c6:	689b      	ldr	r3, [r3, #8]
 80178c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80178ca:	4618      	mov	r0, r3
 80178cc:	f001 f9c0 	bl	8018c50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80178d0:	f001 fc1a 	bl	8019108 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80178d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80178d6:	4618      	mov	r0, r3
 80178d8:	3738      	adds	r7, #56	@ 0x38
 80178da:	46bd      	mov	sp, r7
 80178dc:	bd80      	pop	{r7, pc}
 80178de:	bf00      	nop
 80178e0:	e000ed04 	.word	0xe000ed04

080178e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b08e      	sub	sp, #56	@ 0x38
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	60f8      	str	r0, [r7, #12]
 80178ec:	60b9      	str	r1, [r7, #8]
 80178ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80178f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d10d      	bne.n	8017916 <xQueueReceiveFromISR+0x32>
	__asm volatile
 80178fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178fe:	b672      	cpsid	i
 8017900:	f383 8811 	msr	BASEPRI, r3
 8017904:	f3bf 8f6f 	isb	sy
 8017908:	f3bf 8f4f 	dsb	sy
 801790c:	b662      	cpsie	i
 801790e:	623b      	str	r3, [r7, #32]
}
 8017910:	bf00      	nop
 8017912:	bf00      	nop
 8017914:	e7fd      	b.n	8017912 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017916:	68bb      	ldr	r3, [r7, #8]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d103      	bne.n	8017924 <xQueueReceiveFromISR+0x40>
 801791c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801791e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017920:	2b00      	cmp	r3, #0
 8017922:	d101      	bne.n	8017928 <xQueueReceiveFromISR+0x44>
 8017924:	2301      	movs	r3, #1
 8017926:	e000      	b.n	801792a <xQueueReceiveFromISR+0x46>
 8017928:	2300      	movs	r3, #0
 801792a:	2b00      	cmp	r3, #0
 801792c:	d10d      	bne.n	801794a <xQueueReceiveFromISR+0x66>
	__asm volatile
 801792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017932:	b672      	cpsid	i
 8017934:	f383 8811 	msr	BASEPRI, r3
 8017938:	f3bf 8f6f 	isb	sy
 801793c:	f3bf 8f4f 	dsb	sy
 8017940:	b662      	cpsie	i
 8017942:	61fb      	str	r3, [r7, #28]
}
 8017944:	bf00      	nop
 8017946:	bf00      	nop
 8017948:	e7fd      	b.n	8017946 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801794a:	f001 fc8f 	bl	801926c <vPortValidateInterruptPriority>
	__asm volatile
 801794e:	f3ef 8211 	mrs	r2, BASEPRI
 8017952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017956:	b672      	cpsid	i
 8017958:	f383 8811 	msr	BASEPRI, r3
 801795c:	f3bf 8f6f 	isb	sy
 8017960:	f3bf 8f4f 	dsb	sy
 8017964:	b662      	cpsie	i
 8017966:	61ba      	str	r2, [r7, #24]
 8017968:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801796a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801796c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801796e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017972:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017976:	2b00      	cmp	r3, #0
 8017978:	d02f      	beq.n	80179da <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801797c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017984:	68b9      	ldr	r1, [r7, #8]
 8017986:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017988:	f000 f91e 	bl	8017bc8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801798c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801798e:	1e5a      	subs	r2, r3, #1
 8017990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017992:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017994:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8017998:	f1b3 3fff 	cmp.w	r3, #4294967295
 801799c:	d112      	bne.n	80179c4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179a0:	691b      	ldr	r3, [r3, #16]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d016      	beq.n	80179d4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80179a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179a8:	3310      	adds	r3, #16
 80179aa:	4618      	mov	r0, r3
 80179ac:	f000 fe5c 	bl	8018668 <xTaskRemoveFromEventList>
 80179b0:	4603      	mov	r3, r0
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d00e      	beq.n	80179d4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d00b      	beq.n	80179d4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	2201      	movs	r2, #1
 80179c0:	601a      	str	r2, [r3, #0]
 80179c2:	e007      	b.n	80179d4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80179c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80179c8:	3301      	adds	r3, #1
 80179ca:	b2db      	uxtb	r3, r3
 80179cc:	b25a      	sxtb	r2, r3
 80179ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80179d4:	2301      	movs	r3, #1
 80179d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80179d8:	e001      	b.n	80179de <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80179da:	2300      	movs	r3, #0
 80179dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80179de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80179e2:	693b      	ldr	r3, [r7, #16]
 80179e4:	f383 8811 	msr	BASEPRI, r3
}
 80179e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80179ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80179ec:	4618      	mov	r0, r3
 80179ee:	3738      	adds	r7, #56	@ 0x38
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}

080179f4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b084      	sub	sp, #16
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d10d      	bne.n	8017a1e <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8017a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a06:	b672      	cpsid	i
 8017a08:	f383 8811 	msr	BASEPRI, r3
 8017a0c:	f3bf 8f6f 	isb	sy
 8017a10:	f3bf 8f4f 	dsb	sy
 8017a14:	b662      	cpsie	i
 8017a16:	60bb      	str	r3, [r7, #8]
}
 8017a18:	bf00      	nop
 8017a1a:	bf00      	nop
 8017a1c:	e7fd      	b.n	8017a1a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8017a1e:	f001 fb3d 	bl	801909c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017a26:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8017a28:	f001 fb6e 	bl	8019108 <vPortExitCritical>

	return uxReturn;
 8017a2c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8017a2e:	4618      	mov	r0, r3
 8017a30:	3710      	adds	r7, #16
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bd80      	pop	{r7, pc}

08017a36 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8017a36:	b480      	push	{r7}
 8017a38:	b087      	sub	sp, #28
 8017a3a:	af00      	add	r7, sp, #0
 8017a3c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8017a42:	697b      	ldr	r3, [r7, #20]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d10d      	bne.n	8017a64 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8017a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a4c:	b672      	cpsid	i
 8017a4e:	f383 8811 	msr	BASEPRI, r3
 8017a52:	f3bf 8f6f 	isb	sy
 8017a56:	f3bf 8f4f 	dsb	sy
 8017a5a:	b662      	cpsie	i
 8017a5c:	60fb      	str	r3, [r7, #12]
}
 8017a5e:	bf00      	nop
 8017a60:	bf00      	nop
 8017a62:	e7fd      	b.n	8017a60 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8017a64:	697b      	ldr	r3, [r7, #20]
 8017a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017a68:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8017a6a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	371c      	adds	r7, #28
 8017a70:	46bd      	mov	sp, r7
 8017a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a76:	4770      	bx	lr

08017a78 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b084      	sub	sp, #16
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d10d      	bne.n	8017aa6 <vQueueDelete+0x2e>
	__asm volatile
 8017a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a8e:	b672      	cpsid	i
 8017a90:	f383 8811 	msr	BASEPRI, r3
 8017a94:	f3bf 8f6f 	isb	sy
 8017a98:	f3bf 8f4f 	dsb	sy
 8017a9c:	b662      	cpsie	i
 8017a9e:	60bb      	str	r3, [r7, #8]
}
 8017aa0:	bf00      	nop
 8017aa2:	bf00      	nop
 8017aa4:	e7fd      	b.n	8017aa2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017aa6:	68f8      	ldr	r0, [r7, #12]
 8017aa8:	f000 f934 	bl	8017d14 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d102      	bne.n	8017abc <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8017ab6:	68f8      	ldr	r0, [r7, #12]
 8017ab8:	f001 fcf0 	bl	801949c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017abc:	bf00      	nop
 8017abe:	3710      	adds	r7, #16
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	bd80      	pop	{r7, pc}

08017ac4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017ac4:	b480      	push	{r7}
 8017ac6:	b085      	sub	sp, #20
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d006      	beq.n	8017ae2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	f1c3 0307 	rsb	r3, r3, #7
 8017ade:	60fb      	str	r3, [r7, #12]
 8017ae0:	e001      	b.n	8017ae6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
	}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3714      	adds	r7, #20
 8017aec:	46bd      	mov	sp, r7
 8017aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af2:	4770      	bx	lr

08017af4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b086      	sub	sp, #24
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	60f8      	str	r0, [r7, #12]
 8017afc:	60b9      	str	r1, [r7, #8]
 8017afe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017b00:	2300      	movs	r3, #0
 8017b02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d10d      	bne.n	8017b2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d14d      	bne.n	8017bb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	689b      	ldr	r3, [r3, #8]
 8017b1e:	4618      	mov	r0, r3
 8017b20:	f001 f80a 	bl	8018b38 <xTaskPriorityDisinherit>
 8017b24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	2200      	movs	r2, #0
 8017b2a:	609a      	str	r2, [r3, #8]
 8017b2c:	e043      	b.n	8017bb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d119      	bne.n	8017b68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	6858      	ldr	r0, [r3, #4]
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b3c:	461a      	mov	r2, r3
 8017b3e:	68b9      	ldr	r1, [r7, #8]
 8017b40:	f002 fa80 	bl	801a044 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	685a      	ldr	r2, [r3, #4]
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b4c:	441a      	add	r2, r3
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	685a      	ldr	r2, [r3, #4]
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	689b      	ldr	r3, [r3, #8]
 8017b5a:	429a      	cmp	r2, r3
 8017b5c:	d32b      	bcc.n	8017bb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	681a      	ldr	r2, [r3, #0]
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	605a      	str	r2, [r3, #4]
 8017b66:	e026      	b.n	8017bb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	68d8      	ldr	r0, [r3, #12]
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b70:	461a      	mov	r2, r3
 8017b72:	68b9      	ldr	r1, [r7, #8]
 8017b74:	f002 fa66 	bl	801a044 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	68da      	ldr	r2, [r3, #12]
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b80:	425b      	negs	r3, r3
 8017b82:	441a      	add	r2, r3
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	68da      	ldr	r2, [r3, #12]
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	429a      	cmp	r2, r3
 8017b92:	d207      	bcs.n	8017ba4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	689a      	ldr	r2, [r3, #8]
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b9c:	425b      	negs	r3, r3
 8017b9e:	441a      	add	r2, r3
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	2b02      	cmp	r3, #2
 8017ba8:	d105      	bne.n	8017bb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017baa:	693b      	ldr	r3, [r7, #16]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d002      	beq.n	8017bb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017bb0:	693b      	ldr	r3, [r7, #16]
 8017bb2:	3b01      	subs	r3, #1
 8017bb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017bb6:	693b      	ldr	r3, [r7, #16]
 8017bb8:	1c5a      	adds	r2, r3, #1
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8017bbe:	697b      	ldr	r3, [r7, #20]
}
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	3718      	adds	r7, #24
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd80      	pop	{r7, pc}

08017bc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b082      	sub	sp, #8
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
 8017bd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d018      	beq.n	8017c0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	68da      	ldr	r2, [r3, #12]
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017be2:	441a      	add	r2, r3
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	68da      	ldr	r2, [r3, #12]
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	689b      	ldr	r3, [r3, #8]
 8017bf0:	429a      	cmp	r2, r3
 8017bf2:	d303      	bcc.n	8017bfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	681a      	ldr	r2, [r3, #0]
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	68d9      	ldr	r1, [r3, #12]
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017c04:	461a      	mov	r2, r3
 8017c06:	6838      	ldr	r0, [r7, #0]
 8017c08:	f002 fa1c 	bl	801a044 <memcpy>
	}
}
 8017c0c:	bf00      	nop
 8017c0e:	3708      	adds	r7, #8
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}

08017c14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b084      	sub	sp, #16
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017c1c:	f001 fa3e 	bl	801909c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017c26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017c28:	e011      	b.n	8017c4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d012      	beq.n	8017c58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	3324      	adds	r3, #36	@ 0x24
 8017c36:	4618      	mov	r0, r3
 8017c38:	f000 fd16 	bl	8018668 <xTaskRemoveFromEventList>
 8017c3c:	4603      	mov	r3, r0
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d001      	beq.n	8017c46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017c42:	f000 fdf5 	bl	8018830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017c46:	7bfb      	ldrb	r3, [r7, #15]
 8017c48:	3b01      	subs	r3, #1
 8017c4a:	b2db      	uxtb	r3, r3
 8017c4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	dce9      	bgt.n	8017c2a <prvUnlockQueue+0x16>
 8017c56:	e000      	b.n	8017c5a <prvUnlockQueue+0x46>
					break;
 8017c58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	22ff      	movs	r2, #255	@ 0xff
 8017c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8017c62:	f001 fa51 	bl	8019108 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017c66:	f001 fa19 	bl	801909c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017c70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c72:	e011      	b.n	8017c98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	691b      	ldr	r3, [r3, #16]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d012      	beq.n	8017ca2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	3310      	adds	r3, #16
 8017c80:	4618      	mov	r0, r3
 8017c82:	f000 fcf1 	bl	8018668 <xTaskRemoveFromEventList>
 8017c86:	4603      	mov	r3, r0
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d001      	beq.n	8017c90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017c8c:	f000 fdd0 	bl	8018830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017c90:	7bbb      	ldrb	r3, [r7, #14]
 8017c92:	3b01      	subs	r3, #1
 8017c94:	b2db      	uxtb	r3, r3
 8017c96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	dce9      	bgt.n	8017c74 <prvUnlockQueue+0x60>
 8017ca0:	e000      	b.n	8017ca4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017ca2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	22ff      	movs	r2, #255	@ 0xff
 8017ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8017cac:	f001 fa2c 	bl	8019108 <vPortExitCritical>
}
 8017cb0:	bf00      	nop
 8017cb2:	3710      	adds	r7, #16
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bd80      	pop	{r7, pc}

08017cb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b084      	sub	sp, #16
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017cc0:	f001 f9ec 	bl	801909c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d102      	bne.n	8017cd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017ccc:	2301      	movs	r3, #1
 8017cce:	60fb      	str	r3, [r7, #12]
 8017cd0:	e001      	b.n	8017cd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017cd6:	f001 fa17 	bl	8019108 <vPortExitCritical>

	return xReturn;
 8017cda:	68fb      	ldr	r3, [r7, #12]
}
 8017cdc:	4618      	mov	r0, r3
 8017cde:	3710      	adds	r7, #16
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}

08017ce4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b084      	sub	sp, #16
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017cec:	f001 f9d6 	bl	801909c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017cf8:	429a      	cmp	r2, r3
 8017cfa:	d102      	bne.n	8017d02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	60fb      	str	r3, [r7, #12]
 8017d00:	e001      	b.n	8017d06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017d02:	2300      	movs	r3, #0
 8017d04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017d06:	f001 f9ff 	bl	8019108 <vPortExitCritical>

	return xReturn;
 8017d0a:	68fb      	ldr	r3, [r7, #12]
}
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	3710      	adds	r7, #16
 8017d10:	46bd      	mov	sp, r7
 8017d12:	bd80      	pop	{r7, pc}

08017d14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017d14:	b480      	push	{r7}
 8017d16:	b085      	sub	sp, #20
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	60fb      	str	r3, [r7, #12]
 8017d20:	e016      	b.n	8017d50 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017d22:	4a10      	ldr	r2, [pc, #64]	@ (8017d64 <vQueueUnregisterQueue+0x50>)
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	00db      	lsls	r3, r3, #3
 8017d28:	4413      	add	r3, r2
 8017d2a:	685b      	ldr	r3, [r3, #4]
 8017d2c:	687a      	ldr	r2, [r7, #4]
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	d10b      	bne.n	8017d4a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017d32:	4a0c      	ldr	r2, [pc, #48]	@ (8017d64 <vQueueUnregisterQueue+0x50>)
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	2100      	movs	r1, #0
 8017d38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017d3c:	4a09      	ldr	r2, [pc, #36]	@ (8017d64 <vQueueUnregisterQueue+0x50>)
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	00db      	lsls	r3, r3, #3
 8017d42:	4413      	add	r3, r2
 8017d44:	2200      	movs	r2, #0
 8017d46:	605a      	str	r2, [r3, #4]
				break;
 8017d48:	e006      	b.n	8017d58 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	3301      	adds	r3, #1
 8017d4e:	60fb      	str	r3, [r7, #12]
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	2b07      	cmp	r3, #7
 8017d54:	d9e5      	bls.n	8017d22 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017d56:	bf00      	nop
 8017d58:	bf00      	nop
 8017d5a:	3714      	adds	r7, #20
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d62:	4770      	bx	lr
 8017d64:	20001814 	.word	0x20001814

08017d68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b08e      	sub	sp, #56	@ 0x38
 8017d6c:	af04      	add	r7, sp, #16
 8017d6e:	60f8      	str	r0, [r7, #12]
 8017d70:	60b9      	str	r1, [r7, #8]
 8017d72:	607a      	str	r2, [r7, #4]
 8017d74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d10d      	bne.n	8017d98 <xTaskCreateStatic+0x30>
	__asm volatile
 8017d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d80:	b672      	cpsid	i
 8017d82:	f383 8811 	msr	BASEPRI, r3
 8017d86:	f3bf 8f6f 	isb	sy
 8017d8a:	f3bf 8f4f 	dsb	sy
 8017d8e:	b662      	cpsie	i
 8017d90:	623b      	str	r3, [r7, #32]
}
 8017d92:	bf00      	nop
 8017d94:	bf00      	nop
 8017d96:	e7fd      	b.n	8017d94 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8017d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d10d      	bne.n	8017dba <xTaskCreateStatic+0x52>
	__asm volatile
 8017d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017da2:	b672      	cpsid	i
 8017da4:	f383 8811 	msr	BASEPRI, r3
 8017da8:	f3bf 8f6f 	isb	sy
 8017dac:	f3bf 8f4f 	dsb	sy
 8017db0:	b662      	cpsie	i
 8017db2:	61fb      	str	r3, [r7, #28]
}
 8017db4:	bf00      	nop
 8017db6:	bf00      	nop
 8017db8:	e7fd      	b.n	8017db6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017dba:	2358      	movs	r3, #88	@ 0x58
 8017dbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017dbe:	693b      	ldr	r3, [r7, #16]
 8017dc0:	2b58      	cmp	r3, #88	@ 0x58
 8017dc2:	d00d      	beq.n	8017de0 <xTaskCreateStatic+0x78>
	__asm volatile
 8017dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017dc8:	b672      	cpsid	i
 8017dca:	f383 8811 	msr	BASEPRI, r3
 8017dce:	f3bf 8f6f 	isb	sy
 8017dd2:	f3bf 8f4f 	dsb	sy
 8017dd6:	b662      	cpsie	i
 8017dd8:	61bb      	str	r3, [r7, #24]
}
 8017dda:	bf00      	nop
 8017ddc:	bf00      	nop
 8017dde:	e7fd      	b.n	8017ddc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017de0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d01e      	beq.n	8017e26 <xTaskCreateStatic+0xbe>
 8017de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d01b      	beq.n	8017e26 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017df0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017df4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017df6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dfa:	2202      	movs	r2, #2
 8017dfc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017e00:	2300      	movs	r3, #0
 8017e02:	9303      	str	r3, [sp, #12]
 8017e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e06:	9302      	str	r3, [sp, #8]
 8017e08:	f107 0314 	add.w	r3, r7, #20
 8017e0c:	9301      	str	r3, [sp, #4]
 8017e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e10:	9300      	str	r3, [sp, #0]
 8017e12:	683b      	ldr	r3, [r7, #0]
 8017e14:	687a      	ldr	r2, [r7, #4]
 8017e16:	68b9      	ldr	r1, [r7, #8]
 8017e18:	68f8      	ldr	r0, [r7, #12]
 8017e1a:	f000 f850 	bl	8017ebe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017e1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017e20:	f000 f8e2 	bl	8017fe8 <prvAddNewTaskToReadyList>
 8017e24:	e001      	b.n	8017e2a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8017e26:	2300      	movs	r3, #0
 8017e28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017e2a:	697b      	ldr	r3, [r7, #20]
	}
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	3728      	adds	r7, #40	@ 0x28
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bd80      	pop	{r7, pc}

08017e34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b08c      	sub	sp, #48	@ 0x30
 8017e38:	af04      	add	r7, sp, #16
 8017e3a:	60f8      	str	r0, [r7, #12]
 8017e3c:	60b9      	str	r1, [r7, #8]
 8017e3e:	603b      	str	r3, [r7, #0]
 8017e40:	4613      	mov	r3, r2
 8017e42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017e44:	88fb      	ldrh	r3, [r7, #6]
 8017e46:	009b      	lsls	r3, r3, #2
 8017e48:	4618      	mov	r0, r3
 8017e4a:	f001 fa55 	bl	80192f8 <pvPortMalloc>
 8017e4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017e50:	697b      	ldr	r3, [r7, #20]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d00e      	beq.n	8017e74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017e56:	2058      	movs	r0, #88	@ 0x58
 8017e58:	f001 fa4e 	bl	80192f8 <pvPortMalloc>
 8017e5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017e5e:	69fb      	ldr	r3, [r7, #28]
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d003      	beq.n	8017e6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017e64:	69fb      	ldr	r3, [r7, #28]
 8017e66:	697a      	ldr	r2, [r7, #20]
 8017e68:	631a      	str	r2, [r3, #48]	@ 0x30
 8017e6a:	e005      	b.n	8017e78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017e6c:	6978      	ldr	r0, [r7, #20]
 8017e6e:	f001 fb15 	bl	801949c <vPortFree>
 8017e72:	e001      	b.n	8017e78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017e74:	2300      	movs	r3, #0
 8017e76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017e78:	69fb      	ldr	r3, [r7, #28]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d017      	beq.n	8017eae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017e7e:	69fb      	ldr	r3, [r7, #28]
 8017e80:	2200      	movs	r2, #0
 8017e82:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017e86:	88fa      	ldrh	r2, [r7, #6]
 8017e88:	2300      	movs	r3, #0
 8017e8a:	9303      	str	r3, [sp, #12]
 8017e8c:	69fb      	ldr	r3, [r7, #28]
 8017e8e:	9302      	str	r3, [sp, #8]
 8017e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e92:	9301      	str	r3, [sp, #4]
 8017e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e96:	9300      	str	r3, [sp, #0]
 8017e98:	683b      	ldr	r3, [r7, #0]
 8017e9a:	68b9      	ldr	r1, [r7, #8]
 8017e9c:	68f8      	ldr	r0, [r7, #12]
 8017e9e:	f000 f80e 	bl	8017ebe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017ea2:	69f8      	ldr	r0, [r7, #28]
 8017ea4:	f000 f8a0 	bl	8017fe8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017ea8:	2301      	movs	r3, #1
 8017eaa:	61bb      	str	r3, [r7, #24]
 8017eac:	e002      	b.n	8017eb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017eae:	f04f 33ff 	mov.w	r3, #4294967295
 8017eb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017eb4:	69bb      	ldr	r3, [r7, #24]
	}
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	3720      	adds	r7, #32
 8017eba:	46bd      	mov	sp, r7
 8017ebc:	bd80      	pop	{r7, pc}

08017ebe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017ebe:	b580      	push	{r7, lr}
 8017ec0:	b088      	sub	sp, #32
 8017ec2:	af00      	add	r7, sp, #0
 8017ec4:	60f8      	str	r0, [r7, #12]
 8017ec6:	60b9      	str	r1, [r7, #8]
 8017ec8:	607a      	str	r2, [r7, #4]
 8017eca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ece:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	009b      	lsls	r3, r3, #2
 8017ed4:	461a      	mov	r2, r3
 8017ed6:	21a5      	movs	r1, #165	@ 0xa5
 8017ed8:	f002 f846 	bl	8019f68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017ee0:	6879      	ldr	r1, [r7, #4]
 8017ee2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8017ee6:	440b      	add	r3, r1
 8017ee8:	009b      	lsls	r3, r3, #2
 8017eea:	4413      	add	r3, r2
 8017eec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017eee:	69bb      	ldr	r3, [r7, #24]
 8017ef0:	f023 0307 	bic.w	r3, r3, #7
 8017ef4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017ef6:	69bb      	ldr	r3, [r7, #24]
 8017ef8:	f003 0307 	and.w	r3, r3, #7
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d00d      	beq.n	8017f1c <prvInitialiseNewTask+0x5e>
	__asm volatile
 8017f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f04:	b672      	cpsid	i
 8017f06:	f383 8811 	msr	BASEPRI, r3
 8017f0a:	f3bf 8f6f 	isb	sy
 8017f0e:	f3bf 8f4f 	dsb	sy
 8017f12:	b662      	cpsie	i
 8017f14:	617b      	str	r3, [r7, #20]
}
 8017f16:	bf00      	nop
 8017f18:	bf00      	nop
 8017f1a:	e7fd      	b.n	8017f18 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017f1c:	68bb      	ldr	r3, [r7, #8]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d01f      	beq.n	8017f62 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017f22:	2300      	movs	r3, #0
 8017f24:	61fb      	str	r3, [r7, #28]
 8017f26:	e012      	b.n	8017f4e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017f28:	68ba      	ldr	r2, [r7, #8]
 8017f2a:	69fb      	ldr	r3, [r7, #28]
 8017f2c:	4413      	add	r3, r2
 8017f2e:	7819      	ldrb	r1, [r3, #0]
 8017f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f32:	69fb      	ldr	r3, [r7, #28]
 8017f34:	4413      	add	r3, r2
 8017f36:	3334      	adds	r3, #52	@ 0x34
 8017f38:	460a      	mov	r2, r1
 8017f3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017f3c:	68ba      	ldr	r2, [r7, #8]
 8017f3e:	69fb      	ldr	r3, [r7, #28]
 8017f40:	4413      	add	r3, r2
 8017f42:	781b      	ldrb	r3, [r3, #0]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d006      	beq.n	8017f56 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017f48:	69fb      	ldr	r3, [r7, #28]
 8017f4a:	3301      	adds	r3, #1
 8017f4c:	61fb      	str	r3, [r7, #28]
 8017f4e:	69fb      	ldr	r3, [r7, #28]
 8017f50:	2b0f      	cmp	r3, #15
 8017f52:	d9e9      	bls.n	8017f28 <prvInitialiseNewTask+0x6a>
 8017f54:	e000      	b.n	8017f58 <prvInitialiseNewTask+0x9a>
			{
				break;
 8017f56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017f60:	e003      	b.n	8017f6a <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f64:	2200      	movs	r2, #0
 8017f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f6c:	2b06      	cmp	r3, #6
 8017f6e:	d901      	bls.n	8017f74 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017f70:	2306      	movs	r3, #6
 8017f72:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f78:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f7e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8017f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f82:	2200      	movs	r2, #0
 8017f84:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f88:	3304      	adds	r3, #4
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	f7fe fe04 	bl	8016b98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f92:	3318      	adds	r3, #24
 8017f94:	4618      	mov	r0, r3
 8017f96:	f7fe fdff 	bl	8016b98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fa2:	f1c3 0207 	rsb	r2, r3, #7
 8017fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017fae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8017fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fb8:	2200      	movs	r2, #0
 8017fba:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fbe:	2200      	movs	r2, #0
 8017fc0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017fc4:	683a      	ldr	r2, [r7, #0]
 8017fc6:	68f9      	ldr	r1, [r7, #12]
 8017fc8:	69b8      	ldr	r0, [r7, #24]
 8017fca:	f000 ff5b 	bl	8018e84 <pxPortInitialiseStack>
 8017fce:	4602      	mov	r2, r0
 8017fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fd2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d002      	beq.n	8017fe0 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017fde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017fe0:	bf00      	nop
 8017fe2:	3720      	adds	r7, #32
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	bd80      	pop	{r7, pc}

08017fe8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b082      	sub	sp, #8
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017ff0:	f001 f854 	bl	801909c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80180a0 <prvAddNewTaskToReadyList+0xb8>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	3301      	adds	r3, #1
 8017ffa:	4a29      	ldr	r2, [pc, #164]	@ (80180a0 <prvAddNewTaskToReadyList+0xb8>)
 8017ffc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017ffe:	4b29      	ldr	r3, [pc, #164]	@ (80180a4 <prvAddNewTaskToReadyList+0xbc>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d109      	bne.n	801801a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018006:	4a27      	ldr	r2, [pc, #156]	@ (80180a4 <prvAddNewTaskToReadyList+0xbc>)
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801800c:	4b24      	ldr	r3, [pc, #144]	@ (80180a0 <prvAddNewTaskToReadyList+0xb8>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	2b01      	cmp	r3, #1
 8018012:	d110      	bne.n	8018036 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018014:	f000 fc32 	bl	801887c <prvInitialiseTaskLists>
 8018018:	e00d      	b.n	8018036 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801801a:	4b23      	ldr	r3, [pc, #140]	@ (80180a8 <prvAddNewTaskToReadyList+0xc0>)
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d109      	bne.n	8018036 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018022:	4b20      	ldr	r3, [pc, #128]	@ (80180a4 <prvAddNewTaskToReadyList+0xbc>)
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801802c:	429a      	cmp	r2, r3
 801802e:	d802      	bhi.n	8018036 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018030:	4a1c      	ldr	r2, [pc, #112]	@ (80180a4 <prvAddNewTaskToReadyList+0xbc>)
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018036:	4b1d      	ldr	r3, [pc, #116]	@ (80180ac <prvAddNewTaskToReadyList+0xc4>)
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	3301      	adds	r3, #1
 801803c:	4a1b      	ldr	r2, [pc, #108]	@ (80180ac <prvAddNewTaskToReadyList+0xc4>)
 801803e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018044:	2201      	movs	r2, #1
 8018046:	409a      	lsls	r2, r3
 8018048:	4b19      	ldr	r3, [pc, #100]	@ (80180b0 <prvAddNewTaskToReadyList+0xc8>)
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	4313      	orrs	r3, r2
 801804e:	4a18      	ldr	r2, [pc, #96]	@ (80180b0 <prvAddNewTaskToReadyList+0xc8>)
 8018050:	6013      	str	r3, [r2, #0]
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018056:	4613      	mov	r3, r2
 8018058:	009b      	lsls	r3, r3, #2
 801805a:	4413      	add	r3, r2
 801805c:	009b      	lsls	r3, r3, #2
 801805e:	4a15      	ldr	r2, [pc, #84]	@ (80180b4 <prvAddNewTaskToReadyList+0xcc>)
 8018060:	441a      	add	r2, r3
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	3304      	adds	r3, #4
 8018066:	4619      	mov	r1, r3
 8018068:	4610      	mov	r0, r2
 801806a:	f7fe fda2 	bl	8016bb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801806e:	f001 f84b 	bl	8019108 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018072:	4b0d      	ldr	r3, [pc, #52]	@ (80180a8 <prvAddNewTaskToReadyList+0xc0>)
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d00e      	beq.n	8018098 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801807a:	4b0a      	ldr	r3, [pc, #40]	@ (80180a4 <prvAddNewTaskToReadyList+0xbc>)
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018084:	429a      	cmp	r2, r3
 8018086:	d207      	bcs.n	8018098 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018088:	4b0b      	ldr	r3, [pc, #44]	@ (80180b8 <prvAddNewTaskToReadyList+0xd0>)
 801808a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801808e:	601a      	str	r2, [r3, #0]
 8018090:	f3bf 8f4f 	dsb	sy
 8018094:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018098:	bf00      	nop
 801809a:	3708      	adds	r7, #8
 801809c:	46bd      	mov	sp, r7
 801809e:	bd80      	pop	{r7, pc}
 80180a0:	20001954 	.word	0x20001954
 80180a4:	20001854 	.word	0x20001854
 80180a8:	20001960 	.word	0x20001960
 80180ac:	20001970 	.word	0x20001970
 80180b0:	2000195c 	.word	0x2000195c
 80180b4:	20001858 	.word	0x20001858
 80180b8:	e000ed04 	.word	0xe000ed04

080180bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b084      	sub	sp, #16
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80180c4:	2300      	movs	r3, #0
 80180c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d01a      	beq.n	8018104 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80180ce:	4b15      	ldr	r3, [pc, #84]	@ (8018124 <vTaskDelay+0x68>)
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d00d      	beq.n	80180f2 <vTaskDelay+0x36>
	__asm volatile
 80180d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180da:	b672      	cpsid	i
 80180dc:	f383 8811 	msr	BASEPRI, r3
 80180e0:	f3bf 8f6f 	isb	sy
 80180e4:	f3bf 8f4f 	dsb	sy
 80180e8:	b662      	cpsie	i
 80180ea:	60bb      	str	r3, [r7, #8]
}
 80180ec:	bf00      	nop
 80180ee:	bf00      	nop
 80180f0:	e7fd      	b.n	80180ee <vTaskDelay+0x32>
			vTaskSuspendAll();
 80180f2:	f000 f881 	bl	80181f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80180f6:	2100      	movs	r1, #0
 80180f8:	6878      	ldr	r0, [r7, #4]
 80180fa:	f000 fe5d 	bl	8018db8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80180fe:	f000 f889 	bl	8018214 <xTaskResumeAll>
 8018102:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	2b00      	cmp	r3, #0
 8018108:	d107      	bne.n	801811a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 801810a:	4b07      	ldr	r3, [pc, #28]	@ (8018128 <vTaskDelay+0x6c>)
 801810c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018110:	601a      	str	r2, [r3, #0]
 8018112:	f3bf 8f4f 	dsb	sy
 8018116:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801811a:	bf00      	nop
 801811c:	3710      	adds	r7, #16
 801811e:	46bd      	mov	sp, r7
 8018120:	bd80      	pop	{r7, pc}
 8018122:	bf00      	nop
 8018124:	2000197c 	.word	0x2000197c
 8018128:	e000ed04 	.word	0xe000ed04

0801812c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b08a      	sub	sp, #40	@ 0x28
 8018130:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018132:	2300      	movs	r3, #0
 8018134:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018136:	2300      	movs	r3, #0
 8018138:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801813a:	463a      	mov	r2, r7
 801813c:	1d39      	adds	r1, r7, #4
 801813e:	f107 0308 	add.w	r3, r7, #8
 8018142:	4618      	mov	r0, r3
 8018144:	f7e9 f978 	bl	8001438 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018148:	6839      	ldr	r1, [r7, #0]
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	68ba      	ldr	r2, [r7, #8]
 801814e:	9202      	str	r2, [sp, #8]
 8018150:	9301      	str	r3, [sp, #4]
 8018152:	2300      	movs	r3, #0
 8018154:	9300      	str	r3, [sp, #0]
 8018156:	2300      	movs	r3, #0
 8018158:	460a      	mov	r2, r1
 801815a:	4921      	ldr	r1, [pc, #132]	@ (80181e0 <vTaskStartScheduler+0xb4>)
 801815c:	4821      	ldr	r0, [pc, #132]	@ (80181e4 <vTaskStartScheduler+0xb8>)
 801815e:	f7ff fe03 	bl	8017d68 <xTaskCreateStatic>
 8018162:	4603      	mov	r3, r0
 8018164:	4a20      	ldr	r2, [pc, #128]	@ (80181e8 <vTaskStartScheduler+0xbc>)
 8018166:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018168:	4b1f      	ldr	r3, [pc, #124]	@ (80181e8 <vTaskStartScheduler+0xbc>)
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d002      	beq.n	8018176 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018170:	2301      	movs	r3, #1
 8018172:	617b      	str	r3, [r7, #20]
 8018174:	e001      	b.n	801817a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018176:	2300      	movs	r3, #0
 8018178:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801817a:	697b      	ldr	r3, [r7, #20]
 801817c:	2b01      	cmp	r3, #1
 801817e:	d118      	bne.n	80181b2 <vTaskStartScheduler+0x86>
	__asm volatile
 8018180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018184:	b672      	cpsid	i
 8018186:	f383 8811 	msr	BASEPRI, r3
 801818a:	f3bf 8f6f 	isb	sy
 801818e:	f3bf 8f4f 	dsb	sy
 8018192:	b662      	cpsie	i
 8018194:	613b      	str	r3, [r7, #16]
}
 8018196:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018198:	4b14      	ldr	r3, [pc, #80]	@ (80181ec <vTaskStartScheduler+0xc0>)
 801819a:	f04f 32ff 	mov.w	r2, #4294967295
 801819e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80181a0:	4b13      	ldr	r3, [pc, #76]	@ (80181f0 <vTaskStartScheduler+0xc4>)
 80181a2:	2201      	movs	r2, #1
 80181a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80181a6:	4b13      	ldr	r3, [pc, #76]	@ (80181f4 <vTaskStartScheduler+0xc8>)
 80181a8:	2200      	movs	r2, #0
 80181aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80181ac:	f000 fef8 	bl	8018fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80181b0:	e011      	b.n	80181d6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80181b2:	697b      	ldr	r3, [r7, #20]
 80181b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181b8:	d10d      	bne.n	80181d6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80181ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181be:	b672      	cpsid	i
 80181c0:	f383 8811 	msr	BASEPRI, r3
 80181c4:	f3bf 8f6f 	isb	sy
 80181c8:	f3bf 8f4f 	dsb	sy
 80181cc:	b662      	cpsie	i
 80181ce:	60fb      	str	r3, [r7, #12]
}
 80181d0:	bf00      	nop
 80181d2:	bf00      	nop
 80181d4:	e7fd      	b.n	80181d2 <vTaskStartScheduler+0xa6>
}
 80181d6:	bf00      	nop
 80181d8:	3718      	adds	r7, #24
 80181da:	46bd      	mov	sp, r7
 80181dc:	bd80      	pop	{r7, pc}
 80181de:	bf00      	nop
 80181e0:	0801c69c 	.word	0x0801c69c
 80181e4:	08018849 	.word	0x08018849
 80181e8:	20001978 	.word	0x20001978
 80181ec:	20001974 	.word	0x20001974
 80181f0:	20001960 	.word	0x20001960
 80181f4:	20001958 	.word	0x20001958

080181f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80181f8:	b480      	push	{r7}
 80181fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80181fc:	4b04      	ldr	r3, [pc, #16]	@ (8018210 <vTaskSuspendAll+0x18>)
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	3301      	adds	r3, #1
 8018202:	4a03      	ldr	r2, [pc, #12]	@ (8018210 <vTaskSuspendAll+0x18>)
 8018204:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8018206:	bf00      	nop
 8018208:	46bd      	mov	sp, r7
 801820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820e:	4770      	bx	lr
 8018210:	2000197c 	.word	0x2000197c

08018214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b084      	sub	sp, #16
 8018218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801821a:	2300      	movs	r3, #0
 801821c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801821e:	2300      	movs	r3, #0
 8018220:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018222:	4b43      	ldr	r3, [pc, #268]	@ (8018330 <xTaskResumeAll+0x11c>)
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d10d      	bne.n	8018246 <xTaskResumeAll+0x32>
	__asm volatile
 801822a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801822e:	b672      	cpsid	i
 8018230:	f383 8811 	msr	BASEPRI, r3
 8018234:	f3bf 8f6f 	isb	sy
 8018238:	f3bf 8f4f 	dsb	sy
 801823c:	b662      	cpsie	i
 801823e:	603b      	str	r3, [r7, #0]
}
 8018240:	bf00      	nop
 8018242:	bf00      	nop
 8018244:	e7fd      	b.n	8018242 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018246:	f000 ff29 	bl	801909c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801824a:	4b39      	ldr	r3, [pc, #228]	@ (8018330 <xTaskResumeAll+0x11c>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	3b01      	subs	r3, #1
 8018250:	4a37      	ldr	r2, [pc, #220]	@ (8018330 <xTaskResumeAll+0x11c>)
 8018252:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018254:	4b36      	ldr	r3, [pc, #216]	@ (8018330 <xTaskResumeAll+0x11c>)
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d161      	bne.n	8018320 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801825c:	4b35      	ldr	r3, [pc, #212]	@ (8018334 <xTaskResumeAll+0x120>)
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d05d      	beq.n	8018320 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018264:	e02e      	b.n	80182c4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018266:	4b34      	ldr	r3, [pc, #208]	@ (8018338 <xTaskResumeAll+0x124>)
 8018268:	68db      	ldr	r3, [r3, #12]
 801826a:	68db      	ldr	r3, [r3, #12]
 801826c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	3318      	adds	r3, #24
 8018272:	4618      	mov	r0, r3
 8018274:	f7fe fcfa 	bl	8016c6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	3304      	adds	r3, #4
 801827c:	4618      	mov	r0, r3
 801827e:	f7fe fcf5 	bl	8016c6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018286:	2201      	movs	r2, #1
 8018288:	409a      	lsls	r2, r3
 801828a:	4b2c      	ldr	r3, [pc, #176]	@ (801833c <xTaskResumeAll+0x128>)
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	4313      	orrs	r3, r2
 8018290:	4a2a      	ldr	r2, [pc, #168]	@ (801833c <xTaskResumeAll+0x128>)
 8018292:	6013      	str	r3, [r2, #0]
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018298:	4613      	mov	r3, r2
 801829a:	009b      	lsls	r3, r3, #2
 801829c:	4413      	add	r3, r2
 801829e:	009b      	lsls	r3, r3, #2
 80182a0:	4a27      	ldr	r2, [pc, #156]	@ (8018340 <xTaskResumeAll+0x12c>)
 80182a2:	441a      	add	r2, r3
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	3304      	adds	r3, #4
 80182a8:	4619      	mov	r1, r3
 80182aa:	4610      	mov	r0, r2
 80182ac:	f7fe fc81 	bl	8016bb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80182b4:	4b23      	ldr	r3, [pc, #140]	@ (8018344 <xTaskResumeAll+0x130>)
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182ba:	429a      	cmp	r2, r3
 80182bc:	d302      	bcc.n	80182c4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80182be:	4b22      	ldr	r3, [pc, #136]	@ (8018348 <xTaskResumeAll+0x134>)
 80182c0:	2201      	movs	r2, #1
 80182c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80182c4:	4b1c      	ldr	r3, [pc, #112]	@ (8018338 <xTaskResumeAll+0x124>)
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d1cc      	bne.n	8018266 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d001      	beq.n	80182d6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80182d2:	f000 fb73 	bl	80189bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80182d6:	4b1d      	ldr	r3, [pc, #116]	@ (801834c <xTaskResumeAll+0x138>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d010      	beq.n	8018304 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80182e2:	f000 f859 	bl	8018398 <xTaskIncrementTick>
 80182e6:	4603      	mov	r3, r0
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d002      	beq.n	80182f2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80182ec:	4b16      	ldr	r3, [pc, #88]	@ (8018348 <xTaskResumeAll+0x134>)
 80182ee:	2201      	movs	r2, #1
 80182f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	3b01      	subs	r3, #1
 80182f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d1f1      	bne.n	80182e2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80182fe:	4b13      	ldr	r3, [pc, #76]	@ (801834c <xTaskResumeAll+0x138>)
 8018300:	2200      	movs	r2, #0
 8018302:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018304:	4b10      	ldr	r3, [pc, #64]	@ (8018348 <xTaskResumeAll+0x134>)
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d009      	beq.n	8018320 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801830c:	2301      	movs	r3, #1
 801830e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018310:	4b0f      	ldr	r3, [pc, #60]	@ (8018350 <xTaskResumeAll+0x13c>)
 8018312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018316:	601a      	str	r2, [r3, #0]
 8018318:	f3bf 8f4f 	dsb	sy
 801831c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018320:	f000 fef2 	bl	8019108 <vPortExitCritical>

	return xAlreadyYielded;
 8018324:	68bb      	ldr	r3, [r7, #8]
}
 8018326:	4618      	mov	r0, r3
 8018328:	3710      	adds	r7, #16
 801832a:	46bd      	mov	sp, r7
 801832c:	bd80      	pop	{r7, pc}
 801832e:	bf00      	nop
 8018330:	2000197c 	.word	0x2000197c
 8018334:	20001954 	.word	0x20001954
 8018338:	20001914 	.word	0x20001914
 801833c:	2000195c 	.word	0x2000195c
 8018340:	20001858 	.word	0x20001858
 8018344:	20001854 	.word	0x20001854
 8018348:	20001968 	.word	0x20001968
 801834c:	20001964 	.word	0x20001964
 8018350:	e000ed04 	.word	0xe000ed04

08018354 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018354:	b480      	push	{r7}
 8018356:	b083      	sub	sp, #12
 8018358:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801835a:	4b05      	ldr	r3, [pc, #20]	@ (8018370 <xTaskGetTickCount+0x1c>)
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018360:	687b      	ldr	r3, [r7, #4]
}
 8018362:	4618      	mov	r0, r3
 8018364:	370c      	adds	r7, #12
 8018366:	46bd      	mov	sp, r7
 8018368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801836c:	4770      	bx	lr
 801836e:	bf00      	nop
 8018370:	20001958 	.word	0x20001958

08018374 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8018374:	b580      	push	{r7, lr}
 8018376:	b082      	sub	sp, #8
 8018378:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801837a:	f000 ff77 	bl	801926c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801837e:	2300      	movs	r3, #0
 8018380:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8018382:	4b04      	ldr	r3, [pc, #16]	@ (8018394 <xTaskGetTickCountFromISR+0x20>)
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018388:	683b      	ldr	r3, [r7, #0]
}
 801838a:	4618      	mov	r0, r3
 801838c:	3708      	adds	r7, #8
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}
 8018392:	bf00      	nop
 8018394:	20001958 	.word	0x20001958

08018398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b086      	sub	sp, #24
 801839c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801839e:	2300      	movs	r3, #0
 80183a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80183a2:	4b50      	ldr	r3, [pc, #320]	@ (80184e4 <xTaskIncrementTick+0x14c>)
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	f040 808b 	bne.w	80184c2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80183ac:	4b4e      	ldr	r3, [pc, #312]	@ (80184e8 <xTaskIncrementTick+0x150>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	3301      	adds	r3, #1
 80183b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80183b4:	4a4c      	ldr	r2, [pc, #304]	@ (80184e8 <xTaskIncrementTick+0x150>)
 80183b6:	693b      	ldr	r3, [r7, #16]
 80183b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80183ba:	693b      	ldr	r3, [r7, #16]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d123      	bne.n	8018408 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80183c0:	4b4a      	ldr	r3, [pc, #296]	@ (80184ec <xTaskIncrementTick+0x154>)
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d00d      	beq.n	80183e6 <xTaskIncrementTick+0x4e>
	__asm volatile
 80183ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183ce:	b672      	cpsid	i
 80183d0:	f383 8811 	msr	BASEPRI, r3
 80183d4:	f3bf 8f6f 	isb	sy
 80183d8:	f3bf 8f4f 	dsb	sy
 80183dc:	b662      	cpsie	i
 80183de:	603b      	str	r3, [r7, #0]
}
 80183e0:	bf00      	nop
 80183e2:	bf00      	nop
 80183e4:	e7fd      	b.n	80183e2 <xTaskIncrementTick+0x4a>
 80183e6:	4b41      	ldr	r3, [pc, #260]	@ (80184ec <xTaskIncrementTick+0x154>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	60fb      	str	r3, [r7, #12]
 80183ec:	4b40      	ldr	r3, [pc, #256]	@ (80184f0 <xTaskIncrementTick+0x158>)
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	4a3e      	ldr	r2, [pc, #248]	@ (80184ec <xTaskIncrementTick+0x154>)
 80183f2:	6013      	str	r3, [r2, #0]
 80183f4:	4a3e      	ldr	r2, [pc, #248]	@ (80184f0 <xTaskIncrementTick+0x158>)
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	6013      	str	r3, [r2, #0]
 80183fa:	4b3e      	ldr	r3, [pc, #248]	@ (80184f4 <xTaskIncrementTick+0x15c>)
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	3301      	adds	r3, #1
 8018400:	4a3c      	ldr	r2, [pc, #240]	@ (80184f4 <xTaskIncrementTick+0x15c>)
 8018402:	6013      	str	r3, [r2, #0]
 8018404:	f000 fada 	bl	80189bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018408:	4b3b      	ldr	r3, [pc, #236]	@ (80184f8 <xTaskIncrementTick+0x160>)
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	693a      	ldr	r2, [r7, #16]
 801840e:	429a      	cmp	r2, r3
 8018410:	d348      	bcc.n	80184a4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018412:	4b36      	ldr	r3, [pc, #216]	@ (80184ec <xTaskIncrementTick+0x154>)
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d104      	bne.n	8018426 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801841c:	4b36      	ldr	r3, [pc, #216]	@ (80184f8 <xTaskIncrementTick+0x160>)
 801841e:	f04f 32ff 	mov.w	r2, #4294967295
 8018422:	601a      	str	r2, [r3, #0]
					break;
 8018424:	e03e      	b.n	80184a4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018426:	4b31      	ldr	r3, [pc, #196]	@ (80184ec <xTaskIncrementTick+0x154>)
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	68db      	ldr	r3, [r3, #12]
 801842c:	68db      	ldr	r3, [r3, #12]
 801842e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018430:	68bb      	ldr	r3, [r7, #8]
 8018432:	685b      	ldr	r3, [r3, #4]
 8018434:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018436:	693a      	ldr	r2, [r7, #16]
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	429a      	cmp	r2, r3
 801843c:	d203      	bcs.n	8018446 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801843e:	4a2e      	ldr	r2, [pc, #184]	@ (80184f8 <xTaskIncrementTick+0x160>)
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018444:	e02e      	b.n	80184a4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	3304      	adds	r3, #4
 801844a:	4618      	mov	r0, r3
 801844c:	f7fe fc0e 	bl	8016c6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018450:	68bb      	ldr	r3, [r7, #8]
 8018452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018454:	2b00      	cmp	r3, #0
 8018456:	d004      	beq.n	8018462 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	3318      	adds	r3, #24
 801845c:	4618      	mov	r0, r3
 801845e:	f7fe fc05 	bl	8016c6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018462:	68bb      	ldr	r3, [r7, #8]
 8018464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018466:	2201      	movs	r2, #1
 8018468:	409a      	lsls	r2, r3
 801846a:	4b24      	ldr	r3, [pc, #144]	@ (80184fc <xTaskIncrementTick+0x164>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	4313      	orrs	r3, r2
 8018470:	4a22      	ldr	r2, [pc, #136]	@ (80184fc <xTaskIncrementTick+0x164>)
 8018472:	6013      	str	r3, [r2, #0]
 8018474:	68bb      	ldr	r3, [r7, #8]
 8018476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018478:	4613      	mov	r3, r2
 801847a:	009b      	lsls	r3, r3, #2
 801847c:	4413      	add	r3, r2
 801847e:	009b      	lsls	r3, r3, #2
 8018480:	4a1f      	ldr	r2, [pc, #124]	@ (8018500 <xTaskIncrementTick+0x168>)
 8018482:	441a      	add	r2, r3
 8018484:	68bb      	ldr	r3, [r7, #8]
 8018486:	3304      	adds	r3, #4
 8018488:	4619      	mov	r1, r3
 801848a:	4610      	mov	r0, r2
 801848c:	f7fe fb91 	bl	8016bb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018490:	68bb      	ldr	r3, [r7, #8]
 8018492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018494:	4b1b      	ldr	r3, [pc, #108]	@ (8018504 <xTaskIncrementTick+0x16c>)
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801849a:	429a      	cmp	r2, r3
 801849c:	d3b9      	bcc.n	8018412 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 801849e:	2301      	movs	r3, #1
 80184a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80184a2:	e7b6      	b.n	8018412 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80184a4:	4b17      	ldr	r3, [pc, #92]	@ (8018504 <xTaskIncrementTick+0x16c>)
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80184aa:	4915      	ldr	r1, [pc, #84]	@ (8018500 <xTaskIncrementTick+0x168>)
 80184ac:	4613      	mov	r3, r2
 80184ae:	009b      	lsls	r3, r3, #2
 80184b0:	4413      	add	r3, r2
 80184b2:	009b      	lsls	r3, r3, #2
 80184b4:	440b      	add	r3, r1
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	2b01      	cmp	r3, #1
 80184ba:	d907      	bls.n	80184cc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80184bc:	2301      	movs	r3, #1
 80184be:	617b      	str	r3, [r7, #20]
 80184c0:	e004      	b.n	80184cc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80184c2:	4b11      	ldr	r3, [pc, #68]	@ (8018508 <xTaskIncrementTick+0x170>)
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	3301      	adds	r3, #1
 80184c8:	4a0f      	ldr	r2, [pc, #60]	@ (8018508 <xTaskIncrementTick+0x170>)
 80184ca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80184cc:	4b0f      	ldr	r3, [pc, #60]	@ (801850c <xTaskIncrementTick+0x174>)
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d001      	beq.n	80184d8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80184d4:	2301      	movs	r3, #1
 80184d6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80184d8:	697b      	ldr	r3, [r7, #20]
}
 80184da:	4618      	mov	r0, r3
 80184dc:	3718      	adds	r7, #24
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}
 80184e2:	bf00      	nop
 80184e4:	2000197c 	.word	0x2000197c
 80184e8:	20001958 	.word	0x20001958
 80184ec:	2000190c 	.word	0x2000190c
 80184f0:	20001910 	.word	0x20001910
 80184f4:	2000196c 	.word	0x2000196c
 80184f8:	20001974 	.word	0x20001974
 80184fc:	2000195c 	.word	0x2000195c
 8018500:	20001858 	.word	0x20001858
 8018504:	20001854 	.word	0x20001854
 8018508:	20001964 	.word	0x20001964
 801850c:	20001968 	.word	0x20001968

08018510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018510:	b580      	push	{r7, lr}
 8018512:	b088      	sub	sp, #32
 8018514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018516:	4b3b      	ldr	r3, [pc, #236]	@ (8018604 <vTaskSwitchContext+0xf4>)
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d003      	beq.n	8018526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801851e:	4b3a      	ldr	r3, [pc, #232]	@ (8018608 <vTaskSwitchContext+0xf8>)
 8018520:	2201      	movs	r2, #1
 8018522:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018524:	e069      	b.n	80185fa <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8018526:	4b38      	ldr	r3, [pc, #224]	@ (8018608 <vTaskSwitchContext+0xf8>)
 8018528:	2200      	movs	r2, #0
 801852a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801852c:	4b37      	ldr	r3, [pc, #220]	@ (801860c <vTaskSwitchContext+0xfc>)
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018532:	61fb      	str	r3, [r7, #28]
 8018534:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8018538:	61bb      	str	r3, [r7, #24]
 801853a:	69fb      	ldr	r3, [r7, #28]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	69ba      	ldr	r2, [r7, #24]
 8018540:	429a      	cmp	r2, r3
 8018542:	d111      	bne.n	8018568 <vTaskSwitchContext+0x58>
 8018544:	69fb      	ldr	r3, [r7, #28]
 8018546:	3304      	adds	r3, #4
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	69ba      	ldr	r2, [r7, #24]
 801854c:	429a      	cmp	r2, r3
 801854e:	d10b      	bne.n	8018568 <vTaskSwitchContext+0x58>
 8018550:	69fb      	ldr	r3, [r7, #28]
 8018552:	3308      	adds	r3, #8
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	69ba      	ldr	r2, [r7, #24]
 8018558:	429a      	cmp	r2, r3
 801855a:	d105      	bne.n	8018568 <vTaskSwitchContext+0x58>
 801855c:	69fb      	ldr	r3, [r7, #28]
 801855e:	330c      	adds	r3, #12
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	69ba      	ldr	r2, [r7, #24]
 8018564:	429a      	cmp	r2, r3
 8018566:	d008      	beq.n	801857a <vTaskSwitchContext+0x6a>
 8018568:	4b28      	ldr	r3, [pc, #160]	@ (801860c <vTaskSwitchContext+0xfc>)
 801856a:	681a      	ldr	r2, [r3, #0]
 801856c:	4b27      	ldr	r3, [pc, #156]	@ (801860c <vTaskSwitchContext+0xfc>)
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	3334      	adds	r3, #52	@ 0x34
 8018572:	4619      	mov	r1, r3
 8018574:	4610      	mov	r0, r2
 8018576:	f7e8 ff4d 	bl	8001414 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801857a:	4b25      	ldr	r3, [pc, #148]	@ (8018610 <vTaskSwitchContext+0x100>)
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	fab3 f383 	clz	r3, r3
 8018586:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8018588:	7afb      	ldrb	r3, [r7, #11]
 801858a:	f1c3 031f 	rsb	r3, r3, #31
 801858e:	617b      	str	r3, [r7, #20]
 8018590:	4920      	ldr	r1, [pc, #128]	@ (8018614 <vTaskSwitchContext+0x104>)
 8018592:	697a      	ldr	r2, [r7, #20]
 8018594:	4613      	mov	r3, r2
 8018596:	009b      	lsls	r3, r3, #2
 8018598:	4413      	add	r3, r2
 801859a:	009b      	lsls	r3, r3, #2
 801859c:	440b      	add	r3, r1
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d10d      	bne.n	80185c0 <vTaskSwitchContext+0xb0>
	__asm volatile
 80185a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185a8:	b672      	cpsid	i
 80185aa:	f383 8811 	msr	BASEPRI, r3
 80185ae:	f3bf 8f6f 	isb	sy
 80185b2:	f3bf 8f4f 	dsb	sy
 80185b6:	b662      	cpsie	i
 80185b8:	607b      	str	r3, [r7, #4]
}
 80185ba:	bf00      	nop
 80185bc:	bf00      	nop
 80185be:	e7fd      	b.n	80185bc <vTaskSwitchContext+0xac>
 80185c0:	697a      	ldr	r2, [r7, #20]
 80185c2:	4613      	mov	r3, r2
 80185c4:	009b      	lsls	r3, r3, #2
 80185c6:	4413      	add	r3, r2
 80185c8:	009b      	lsls	r3, r3, #2
 80185ca:	4a12      	ldr	r2, [pc, #72]	@ (8018614 <vTaskSwitchContext+0x104>)
 80185cc:	4413      	add	r3, r2
 80185ce:	613b      	str	r3, [r7, #16]
 80185d0:	693b      	ldr	r3, [r7, #16]
 80185d2:	685b      	ldr	r3, [r3, #4]
 80185d4:	685a      	ldr	r2, [r3, #4]
 80185d6:	693b      	ldr	r3, [r7, #16]
 80185d8:	605a      	str	r2, [r3, #4]
 80185da:	693b      	ldr	r3, [r7, #16]
 80185dc:	685a      	ldr	r2, [r3, #4]
 80185de:	693b      	ldr	r3, [r7, #16]
 80185e0:	3308      	adds	r3, #8
 80185e2:	429a      	cmp	r2, r3
 80185e4:	d104      	bne.n	80185f0 <vTaskSwitchContext+0xe0>
 80185e6:	693b      	ldr	r3, [r7, #16]
 80185e8:	685b      	ldr	r3, [r3, #4]
 80185ea:	685a      	ldr	r2, [r3, #4]
 80185ec:	693b      	ldr	r3, [r7, #16]
 80185ee:	605a      	str	r2, [r3, #4]
 80185f0:	693b      	ldr	r3, [r7, #16]
 80185f2:	685b      	ldr	r3, [r3, #4]
 80185f4:	68db      	ldr	r3, [r3, #12]
 80185f6:	4a05      	ldr	r2, [pc, #20]	@ (801860c <vTaskSwitchContext+0xfc>)
 80185f8:	6013      	str	r3, [r2, #0]
}
 80185fa:	bf00      	nop
 80185fc:	3720      	adds	r7, #32
 80185fe:	46bd      	mov	sp, r7
 8018600:	bd80      	pop	{r7, pc}
 8018602:	bf00      	nop
 8018604:	2000197c 	.word	0x2000197c
 8018608:	20001968 	.word	0x20001968
 801860c:	20001854 	.word	0x20001854
 8018610:	2000195c 	.word	0x2000195c
 8018614:	20001858 	.word	0x20001858

08018618 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b084      	sub	sp, #16
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
 8018620:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d10d      	bne.n	8018644 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8018628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801862c:	b672      	cpsid	i
 801862e:	f383 8811 	msr	BASEPRI, r3
 8018632:	f3bf 8f6f 	isb	sy
 8018636:	f3bf 8f4f 	dsb	sy
 801863a:	b662      	cpsie	i
 801863c:	60fb      	str	r3, [r7, #12]
}
 801863e:	bf00      	nop
 8018640:	bf00      	nop
 8018642:	e7fd      	b.n	8018640 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018644:	4b07      	ldr	r3, [pc, #28]	@ (8018664 <vTaskPlaceOnEventList+0x4c>)
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	3318      	adds	r3, #24
 801864a:	4619      	mov	r1, r3
 801864c:	6878      	ldr	r0, [r7, #4]
 801864e:	f7fe fad4 	bl	8016bfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018652:	2101      	movs	r1, #1
 8018654:	6838      	ldr	r0, [r7, #0]
 8018656:	f000 fbaf 	bl	8018db8 <prvAddCurrentTaskToDelayedList>
}
 801865a:	bf00      	nop
 801865c:	3710      	adds	r7, #16
 801865e:	46bd      	mov	sp, r7
 8018660:	bd80      	pop	{r7, pc}
 8018662:	bf00      	nop
 8018664:	20001854 	.word	0x20001854

08018668 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018668:	b580      	push	{r7, lr}
 801866a:	b086      	sub	sp, #24
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	68db      	ldr	r3, [r3, #12]
 8018674:	68db      	ldr	r3, [r3, #12]
 8018676:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018678:	693b      	ldr	r3, [r7, #16]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d10d      	bne.n	801869a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801867e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018682:	b672      	cpsid	i
 8018684:	f383 8811 	msr	BASEPRI, r3
 8018688:	f3bf 8f6f 	isb	sy
 801868c:	f3bf 8f4f 	dsb	sy
 8018690:	b662      	cpsie	i
 8018692:	60fb      	str	r3, [r7, #12]
}
 8018694:	bf00      	nop
 8018696:	bf00      	nop
 8018698:	e7fd      	b.n	8018696 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801869a:	693b      	ldr	r3, [r7, #16]
 801869c:	3318      	adds	r3, #24
 801869e:	4618      	mov	r0, r3
 80186a0:	f7fe fae4 	bl	8016c6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80186a4:	4b1d      	ldr	r3, [pc, #116]	@ (801871c <xTaskRemoveFromEventList+0xb4>)
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d11c      	bne.n	80186e6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80186ac:	693b      	ldr	r3, [r7, #16]
 80186ae:	3304      	adds	r3, #4
 80186b0:	4618      	mov	r0, r3
 80186b2:	f7fe fadb 	bl	8016c6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80186b6:	693b      	ldr	r3, [r7, #16]
 80186b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186ba:	2201      	movs	r2, #1
 80186bc:	409a      	lsls	r2, r3
 80186be:	4b18      	ldr	r3, [pc, #96]	@ (8018720 <xTaskRemoveFromEventList+0xb8>)
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	4313      	orrs	r3, r2
 80186c4:	4a16      	ldr	r2, [pc, #88]	@ (8018720 <xTaskRemoveFromEventList+0xb8>)
 80186c6:	6013      	str	r3, [r2, #0]
 80186c8:	693b      	ldr	r3, [r7, #16]
 80186ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80186cc:	4613      	mov	r3, r2
 80186ce:	009b      	lsls	r3, r3, #2
 80186d0:	4413      	add	r3, r2
 80186d2:	009b      	lsls	r3, r3, #2
 80186d4:	4a13      	ldr	r2, [pc, #76]	@ (8018724 <xTaskRemoveFromEventList+0xbc>)
 80186d6:	441a      	add	r2, r3
 80186d8:	693b      	ldr	r3, [r7, #16]
 80186da:	3304      	adds	r3, #4
 80186dc:	4619      	mov	r1, r3
 80186de:	4610      	mov	r0, r2
 80186e0:	f7fe fa67 	bl	8016bb2 <vListInsertEnd>
 80186e4:	e005      	b.n	80186f2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80186e6:	693b      	ldr	r3, [r7, #16]
 80186e8:	3318      	adds	r3, #24
 80186ea:	4619      	mov	r1, r3
 80186ec:	480e      	ldr	r0, [pc, #56]	@ (8018728 <xTaskRemoveFromEventList+0xc0>)
 80186ee:	f7fe fa60 	bl	8016bb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80186f2:	693b      	ldr	r3, [r7, #16]
 80186f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80186f6:	4b0d      	ldr	r3, [pc, #52]	@ (801872c <xTaskRemoveFromEventList+0xc4>)
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186fc:	429a      	cmp	r2, r3
 80186fe:	d905      	bls.n	801870c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018700:	2301      	movs	r3, #1
 8018702:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018704:	4b0a      	ldr	r3, [pc, #40]	@ (8018730 <xTaskRemoveFromEventList+0xc8>)
 8018706:	2201      	movs	r2, #1
 8018708:	601a      	str	r2, [r3, #0]
 801870a:	e001      	b.n	8018710 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 801870c:	2300      	movs	r3, #0
 801870e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018710:	697b      	ldr	r3, [r7, #20]
}
 8018712:	4618      	mov	r0, r3
 8018714:	3718      	adds	r7, #24
 8018716:	46bd      	mov	sp, r7
 8018718:	bd80      	pop	{r7, pc}
 801871a:	bf00      	nop
 801871c:	2000197c 	.word	0x2000197c
 8018720:	2000195c 	.word	0x2000195c
 8018724:	20001858 	.word	0x20001858
 8018728:	20001914 	.word	0x20001914
 801872c:	20001854 	.word	0x20001854
 8018730:	20001968 	.word	0x20001968

08018734 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018734:	b480      	push	{r7}
 8018736:	b083      	sub	sp, #12
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801873c:	4b06      	ldr	r3, [pc, #24]	@ (8018758 <vTaskInternalSetTimeOutState+0x24>)
 801873e:	681a      	ldr	r2, [r3, #0]
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018744:	4b05      	ldr	r3, [pc, #20]	@ (801875c <vTaskInternalSetTimeOutState+0x28>)
 8018746:	681a      	ldr	r2, [r3, #0]
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	605a      	str	r2, [r3, #4]
}
 801874c:	bf00      	nop
 801874e:	370c      	adds	r7, #12
 8018750:	46bd      	mov	sp, r7
 8018752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018756:	4770      	bx	lr
 8018758:	2000196c 	.word	0x2000196c
 801875c:	20001958 	.word	0x20001958

08018760 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b088      	sub	sp, #32
 8018764:	af00      	add	r7, sp, #0
 8018766:	6078      	str	r0, [r7, #4]
 8018768:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d10d      	bne.n	801878c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8018770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018774:	b672      	cpsid	i
 8018776:	f383 8811 	msr	BASEPRI, r3
 801877a:	f3bf 8f6f 	isb	sy
 801877e:	f3bf 8f4f 	dsb	sy
 8018782:	b662      	cpsie	i
 8018784:	613b      	str	r3, [r7, #16]
}
 8018786:	bf00      	nop
 8018788:	bf00      	nop
 801878a:	e7fd      	b.n	8018788 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801878c:	683b      	ldr	r3, [r7, #0]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d10d      	bne.n	80187ae <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8018792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018796:	b672      	cpsid	i
 8018798:	f383 8811 	msr	BASEPRI, r3
 801879c:	f3bf 8f6f 	isb	sy
 80187a0:	f3bf 8f4f 	dsb	sy
 80187a4:	b662      	cpsie	i
 80187a6:	60fb      	str	r3, [r7, #12]
}
 80187a8:	bf00      	nop
 80187aa:	bf00      	nop
 80187ac:	e7fd      	b.n	80187aa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80187ae:	f000 fc75 	bl	801909c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80187b2:	4b1d      	ldr	r3, [pc, #116]	@ (8018828 <xTaskCheckForTimeOut+0xc8>)
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	69ba      	ldr	r2, [r7, #24]
 80187be:	1ad3      	subs	r3, r2, r3
 80187c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80187c2:	683b      	ldr	r3, [r7, #0]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187ca:	d102      	bne.n	80187d2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80187cc:	2300      	movs	r3, #0
 80187ce:	61fb      	str	r3, [r7, #28]
 80187d0:	e023      	b.n	801881a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	681a      	ldr	r2, [r3, #0]
 80187d6:	4b15      	ldr	r3, [pc, #84]	@ (801882c <xTaskCheckForTimeOut+0xcc>)
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	429a      	cmp	r2, r3
 80187dc:	d007      	beq.n	80187ee <xTaskCheckForTimeOut+0x8e>
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	685b      	ldr	r3, [r3, #4]
 80187e2:	69ba      	ldr	r2, [r7, #24]
 80187e4:	429a      	cmp	r2, r3
 80187e6:	d302      	bcc.n	80187ee <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80187e8:	2301      	movs	r3, #1
 80187ea:	61fb      	str	r3, [r7, #28]
 80187ec:	e015      	b.n	801881a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	697a      	ldr	r2, [r7, #20]
 80187f4:	429a      	cmp	r2, r3
 80187f6:	d20b      	bcs.n	8018810 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80187f8:	683b      	ldr	r3, [r7, #0]
 80187fa:	681a      	ldr	r2, [r3, #0]
 80187fc:	697b      	ldr	r3, [r7, #20]
 80187fe:	1ad2      	subs	r2, r2, r3
 8018800:	683b      	ldr	r3, [r7, #0]
 8018802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018804:	6878      	ldr	r0, [r7, #4]
 8018806:	f7ff ff95 	bl	8018734 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801880a:	2300      	movs	r3, #0
 801880c:	61fb      	str	r3, [r7, #28]
 801880e:	e004      	b.n	801881a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8018810:	683b      	ldr	r3, [r7, #0]
 8018812:	2200      	movs	r2, #0
 8018814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018816:	2301      	movs	r3, #1
 8018818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801881a:	f000 fc75 	bl	8019108 <vPortExitCritical>

	return xReturn;
 801881e:	69fb      	ldr	r3, [r7, #28]
}
 8018820:	4618      	mov	r0, r3
 8018822:	3720      	adds	r7, #32
 8018824:	46bd      	mov	sp, r7
 8018826:	bd80      	pop	{r7, pc}
 8018828:	20001958 	.word	0x20001958
 801882c:	2000196c 	.word	0x2000196c

08018830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018830:	b480      	push	{r7}
 8018832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018834:	4b03      	ldr	r3, [pc, #12]	@ (8018844 <vTaskMissedYield+0x14>)
 8018836:	2201      	movs	r2, #1
 8018838:	601a      	str	r2, [r3, #0]
}
 801883a:	bf00      	nop
 801883c:	46bd      	mov	sp, r7
 801883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018842:	4770      	bx	lr
 8018844:	20001968 	.word	0x20001968

08018848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b082      	sub	sp, #8
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018850:	f000 f854 	bl	80188fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018854:	4b07      	ldr	r3, [pc, #28]	@ (8018874 <prvIdleTask+0x2c>)
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	2b01      	cmp	r3, #1
 801885a:	d907      	bls.n	801886c <prvIdleTask+0x24>
			{
				taskYIELD();
 801885c:	4b06      	ldr	r3, [pc, #24]	@ (8018878 <prvIdleTask+0x30>)
 801885e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018862:	601a      	str	r2, [r3, #0]
 8018864:	f3bf 8f4f 	dsb	sy
 8018868:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801886c:	f7e8 fdcb 	bl	8001406 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8018870:	e7ee      	b.n	8018850 <prvIdleTask+0x8>
 8018872:	bf00      	nop
 8018874:	20001858 	.word	0x20001858
 8018878:	e000ed04 	.word	0xe000ed04

0801887c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b082      	sub	sp, #8
 8018880:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018882:	2300      	movs	r3, #0
 8018884:	607b      	str	r3, [r7, #4]
 8018886:	e00c      	b.n	80188a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018888:	687a      	ldr	r2, [r7, #4]
 801888a:	4613      	mov	r3, r2
 801888c:	009b      	lsls	r3, r3, #2
 801888e:	4413      	add	r3, r2
 8018890:	009b      	lsls	r3, r3, #2
 8018892:	4a12      	ldr	r2, [pc, #72]	@ (80188dc <prvInitialiseTaskLists+0x60>)
 8018894:	4413      	add	r3, r2
 8018896:	4618      	mov	r0, r3
 8018898:	f7fe f95e 	bl	8016b58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	3301      	adds	r3, #1
 80188a0:	607b      	str	r3, [r7, #4]
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	2b06      	cmp	r3, #6
 80188a6:	d9ef      	bls.n	8018888 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80188a8:	480d      	ldr	r0, [pc, #52]	@ (80188e0 <prvInitialiseTaskLists+0x64>)
 80188aa:	f7fe f955 	bl	8016b58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80188ae:	480d      	ldr	r0, [pc, #52]	@ (80188e4 <prvInitialiseTaskLists+0x68>)
 80188b0:	f7fe f952 	bl	8016b58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80188b4:	480c      	ldr	r0, [pc, #48]	@ (80188e8 <prvInitialiseTaskLists+0x6c>)
 80188b6:	f7fe f94f 	bl	8016b58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80188ba:	480c      	ldr	r0, [pc, #48]	@ (80188ec <prvInitialiseTaskLists+0x70>)
 80188bc:	f7fe f94c 	bl	8016b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80188c0:	480b      	ldr	r0, [pc, #44]	@ (80188f0 <prvInitialiseTaskLists+0x74>)
 80188c2:	f7fe f949 	bl	8016b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80188c6:	4b0b      	ldr	r3, [pc, #44]	@ (80188f4 <prvInitialiseTaskLists+0x78>)
 80188c8:	4a05      	ldr	r2, [pc, #20]	@ (80188e0 <prvInitialiseTaskLists+0x64>)
 80188ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80188cc:	4b0a      	ldr	r3, [pc, #40]	@ (80188f8 <prvInitialiseTaskLists+0x7c>)
 80188ce:	4a05      	ldr	r2, [pc, #20]	@ (80188e4 <prvInitialiseTaskLists+0x68>)
 80188d0:	601a      	str	r2, [r3, #0]
}
 80188d2:	bf00      	nop
 80188d4:	3708      	adds	r7, #8
 80188d6:	46bd      	mov	sp, r7
 80188d8:	bd80      	pop	{r7, pc}
 80188da:	bf00      	nop
 80188dc:	20001858 	.word	0x20001858
 80188e0:	200018e4 	.word	0x200018e4
 80188e4:	200018f8 	.word	0x200018f8
 80188e8:	20001914 	.word	0x20001914
 80188ec:	20001928 	.word	0x20001928
 80188f0:	20001940 	.word	0x20001940
 80188f4:	2000190c 	.word	0x2000190c
 80188f8:	20001910 	.word	0x20001910

080188fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b082      	sub	sp, #8
 8018900:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018902:	e019      	b.n	8018938 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018904:	f000 fbca 	bl	801909c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018908:	4b10      	ldr	r3, [pc, #64]	@ (801894c <prvCheckTasksWaitingTermination+0x50>)
 801890a:	68db      	ldr	r3, [r3, #12]
 801890c:	68db      	ldr	r3, [r3, #12]
 801890e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	3304      	adds	r3, #4
 8018914:	4618      	mov	r0, r3
 8018916:	f7fe f9a9 	bl	8016c6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801891a:	4b0d      	ldr	r3, [pc, #52]	@ (8018950 <prvCheckTasksWaitingTermination+0x54>)
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	3b01      	subs	r3, #1
 8018920:	4a0b      	ldr	r2, [pc, #44]	@ (8018950 <prvCheckTasksWaitingTermination+0x54>)
 8018922:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018924:	4b0b      	ldr	r3, [pc, #44]	@ (8018954 <prvCheckTasksWaitingTermination+0x58>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	3b01      	subs	r3, #1
 801892a:	4a0a      	ldr	r2, [pc, #40]	@ (8018954 <prvCheckTasksWaitingTermination+0x58>)
 801892c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801892e:	f000 fbeb 	bl	8019108 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018932:	6878      	ldr	r0, [r7, #4]
 8018934:	f000 f810 	bl	8018958 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018938:	4b06      	ldr	r3, [pc, #24]	@ (8018954 <prvCheckTasksWaitingTermination+0x58>)
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d1e1      	bne.n	8018904 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018940:	bf00      	nop
 8018942:	bf00      	nop
 8018944:	3708      	adds	r7, #8
 8018946:	46bd      	mov	sp, r7
 8018948:	bd80      	pop	{r7, pc}
 801894a:	bf00      	nop
 801894c:	20001928 	.word	0x20001928
 8018950:	20001954 	.word	0x20001954
 8018954:	2000193c 	.word	0x2000193c

08018958 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018958:	b580      	push	{r7, lr}
 801895a:	b084      	sub	sp, #16
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018966:	2b00      	cmp	r3, #0
 8018968:	d108      	bne.n	801897c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801896e:	4618      	mov	r0, r3
 8018970:	f000 fd94 	bl	801949c <vPortFree>
				vPortFree( pxTCB );
 8018974:	6878      	ldr	r0, [r7, #4]
 8018976:	f000 fd91 	bl	801949c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801897a:	e01b      	b.n	80189b4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018982:	2b01      	cmp	r3, #1
 8018984:	d103      	bne.n	801898e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018986:	6878      	ldr	r0, [r7, #4]
 8018988:	f000 fd88 	bl	801949c <vPortFree>
	}
 801898c:	e012      	b.n	80189b4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018994:	2b02      	cmp	r3, #2
 8018996:	d00d      	beq.n	80189b4 <prvDeleteTCB+0x5c>
	__asm volatile
 8018998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801899c:	b672      	cpsid	i
 801899e:	f383 8811 	msr	BASEPRI, r3
 80189a2:	f3bf 8f6f 	isb	sy
 80189a6:	f3bf 8f4f 	dsb	sy
 80189aa:	b662      	cpsie	i
 80189ac:	60fb      	str	r3, [r7, #12]
}
 80189ae:	bf00      	nop
 80189b0:	bf00      	nop
 80189b2:	e7fd      	b.n	80189b0 <prvDeleteTCB+0x58>
	}
 80189b4:	bf00      	nop
 80189b6:	3710      	adds	r7, #16
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}

080189bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80189bc:	b480      	push	{r7}
 80189be:	b083      	sub	sp, #12
 80189c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80189c2:	4b0c      	ldr	r3, [pc, #48]	@ (80189f4 <prvResetNextTaskUnblockTime+0x38>)
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d104      	bne.n	80189d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80189cc:	4b0a      	ldr	r3, [pc, #40]	@ (80189f8 <prvResetNextTaskUnblockTime+0x3c>)
 80189ce:	f04f 32ff 	mov.w	r2, #4294967295
 80189d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80189d4:	e008      	b.n	80189e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80189d6:	4b07      	ldr	r3, [pc, #28]	@ (80189f4 <prvResetNextTaskUnblockTime+0x38>)
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	68db      	ldr	r3, [r3, #12]
 80189dc:	68db      	ldr	r3, [r3, #12]
 80189de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	685b      	ldr	r3, [r3, #4]
 80189e4:	4a04      	ldr	r2, [pc, #16]	@ (80189f8 <prvResetNextTaskUnblockTime+0x3c>)
 80189e6:	6013      	str	r3, [r2, #0]
}
 80189e8:	bf00      	nop
 80189ea:	370c      	adds	r7, #12
 80189ec:	46bd      	mov	sp, r7
 80189ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f2:	4770      	bx	lr
 80189f4:	2000190c 	.word	0x2000190c
 80189f8:	20001974 	.word	0x20001974

080189fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80189fc:	b480      	push	{r7}
 80189fe:	b083      	sub	sp, #12
 8018a00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018a02:	4b0b      	ldr	r3, [pc, #44]	@ (8018a30 <xTaskGetSchedulerState+0x34>)
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d102      	bne.n	8018a10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018a0a:	2301      	movs	r3, #1
 8018a0c:	607b      	str	r3, [r7, #4]
 8018a0e:	e008      	b.n	8018a22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018a10:	4b08      	ldr	r3, [pc, #32]	@ (8018a34 <xTaskGetSchedulerState+0x38>)
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d102      	bne.n	8018a1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018a18:	2302      	movs	r3, #2
 8018a1a:	607b      	str	r3, [r7, #4]
 8018a1c:	e001      	b.n	8018a22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018a1e:	2300      	movs	r3, #0
 8018a20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018a22:	687b      	ldr	r3, [r7, #4]
	}
 8018a24:	4618      	mov	r0, r3
 8018a26:	370c      	adds	r7, #12
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a2e:	4770      	bx	lr
 8018a30:	20001960 	.word	0x20001960
 8018a34:	2000197c 	.word	0x2000197c

08018a38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b084      	sub	sp, #16
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018a44:	2300      	movs	r3, #0
 8018a46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d069      	beq.n	8018b22 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018a4e:	68bb      	ldr	r3, [r7, #8]
 8018a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a52:	4b36      	ldr	r3, [pc, #216]	@ (8018b2c <xTaskPriorityInherit+0xf4>)
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	d259      	bcs.n	8018b10 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018a5c:	68bb      	ldr	r3, [r7, #8]
 8018a5e:	699b      	ldr	r3, [r3, #24]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	db06      	blt.n	8018a72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a64:	4b31      	ldr	r3, [pc, #196]	@ (8018b2c <xTaskPriorityInherit+0xf4>)
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a6a:	f1c3 0207 	rsb	r2, r3, #7
 8018a6e:	68bb      	ldr	r3, [r7, #8]
 8018a70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018a72:	68bb      	ldr	r3, [r7, #8]
 8018a74:	6959      	ldr	r1, [r3, #20]
 8018a76:	68bb      	ldr	r3, [r7, #8]
 8018a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a7a:	4613      	mov	r3, r2
 8018a7c:	009b      	lsls	r3, r3, #2
 8018a7e:	4413      	add	r3, r2
 8018a80:	009b      	lsls	r3, r3, #2
 8018a82:	4a2b      	ldr	r2, [pc, #172]	@ (8018b30 <xTaskPriorityInherit+0xf8>)
 8018a84:	4413      	add	r3, r2
 8018a86:	4299      	cmp	r1, r3
 8018a88:	d13a      	bne.n	8018b00 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018a8a:	68bb      	ldr	r3, [r7, #8]
 8018a8c:	3304      	adds	r3, #4
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f7fe f8ec 	bl	8016c6c <uxListRemove>
 8018a94:	4603      	mov	r3, r0
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d115      	bne.n	8018ac6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8018a9a:	68bb      	ldr	r3, [r7, #8]
 8018a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a9e:	4924      	ldr	r1, [pc, #144]	@ (8018b30 <xTaskPriorityInherit+0xf8>)
 8018aa0:	4613      	mov	r3, r2
 8018aa2:	009b      	lsls	r3, r3, #2
 8018aa4:	4413      	add	r3, r2
 8018aa6:	009b      	lsls	r3, r3, #2
 8018aa8:	440b      	add	r3, r1
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d10a      	bne.n	8018ac6 <xTaskPriorityInherit+0x8e>
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ab4:	2201      	movs	r2, #1
 8018ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8018aba:	43da      	mvns	r2, r3
 8018abc:	4b1d      	ldr	r3, [pc, #116]	@ (8018b34 <xTaskPriorityInherit+0xfc>)
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	4013      	ands	r3, r2
 8018ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8018b34 <xTaskPriorityInherit+0xfc>)
 8018ac4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018ac6:	4b19      	ldr	r3, [pc, #100]	@ (8018b2c <xTaskPriorityInherit+0xf4>)
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018acc:	68bb      	ldr	r3, [r7, #8]
 8018ace:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018ad0:	68bb      	ldr	r3, [r7, #8]
 8018ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ad4:	2201      	movs	r2, #1
 8018ad6:	409a      	lsls	r2, r3
 8018ad8:	4b16      	ldr	r3, [pc, #88]	@ (8018b34 <xTaskPriorityInherit+0xfc>)
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	4313      	orrs	r3, r2
 8018ade:	4a15      	ldr	r2, [pc, #84]	@ (8018b34 <xTaskPriorityInherit+0xfc>)
 8018ae0:	6013      	str	r3, [r2, #0]
 8018ae2:	68bb      	ldr	r3, [r7, #8]
 8018ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ae6:	4613      	mov	r3, r2
 8018ae8:	009b      	lsls	r3, r3, #2
 8018aea:	4413      	add	r3, r2
 8018aec:	009b      	lsls	r3, r3, #2
 8018aee:	4a10      	ldr	r2, [pc, #64]	@ (8018b30 <xTaskPriorityInherit+0xf8>)
 8018af0:	441a      	add	r2, r3
 8018af2:	68bb      	ldr	r3, [r7, #8]
 8018af4:	3304      	adds	r3, #4
 8018af6:	4619      	mov	r1, r3
 8018af8:	4610      	mov	r0, r2
 8018afa:	f7fe f85a 	bl	8016bb2 <vListInsertEnd>
 8018afe:	e004      	b.n	8018b0a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018b00:	4b0a      	ldr	r3, [pc, #40]	@ (8018b2c <xTaskPriorityInherit+0xf4>)
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018b06:	68bb      	ldr	r3, [r7, #8]
 8018b08:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018b0a:	2301      	movs	r3, #1
 8018b0c:	60fb      	str	r3, [r7, #12]
 8018b0e:	e008      	b.n	8018b22 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018b10:	68bb      	ldr	r3, [r7, #8]
 8018b12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018b14:	4b05      	ldr	r3, [pc, #20]	@ (8018b2c <xTaskPriorityInherit+0xf4>)
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b1a:	429a      	cmp	r2, r3
 8018b1c:	d201      	bcs.n	8018b22 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018b1e:	2301      	movs	r3, #1
 8018b20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018b22:	68fb      	ldr	r3, [r7, #12]
	}
 8018b24:	4618      	mov	r0, r3
 8018b26:	3710      	adds	r7, #16
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd80      	pop	{r7, pc}
 8018b2c:	20001854 	.word	0x20001854
 8018b30:	20001858 	.word	0x20001858
 8018b34:	2000195c 	.word	0x2000195c

08018b38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b086      	sub	sp, #24
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018b44:	2300      	movs	r3, #0
 8018b46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d074      	beq.n	8018c38 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8018c44 <xTaskPriorityDisinherit+0x10c>)
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	693a      	ldr	r2, [r7, #16]
 8018b54:	429a      	cmp	r2, r3
 8018b56:	d00d      	beq.n	8018b74 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8018b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b5c:	b672      	cpsid	i
 8018b5e:	f383 8811 	msr	BASEPRI, r3
 8018b62:	f3bf 8f6f 	isb	sy
 8018b66:	f3bf 8f4f 	dsb	sy
 8018b6a:	b662      	cpsie	i
 8018b6c:	60fb      	str	r3, [r7, #12]
}
 8018b6e:	bf00      	nop
 8018b70:	bf00      	nop
 8018b72:	e7fd      	b.n	8018b70 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8018b74:	693b      	ldr	r3, [r7, #16]
 8018b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d10d      	bne.n	8018b98 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8018b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b80:	b672      	cpsid	i
 8018b82:	f383 8811 	msr	BASEPRI, r3
 8018b86:	f3bf 8f6f 	isb	sy
 8018b8a:	f3bf 8f4f 	dsb	sy
 8018b8e:	b662      	cpsie	i
 8018b90:	60bb      	str	r3, [r7, #8]
}
 8018b92:	bf00      	nop
 8018b94:	bf00      	nop
 8018b96:	e7fd      	b.n	8018b94 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8018b98:	693b      	ldr	r3, [r7, #16]
 8018b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018b9c:	1e5a      	subs	r2, r3, #1
 8018b9e:	693b      	ldr	r3, [r7, #16]
 8018ba0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018ba2:	693b      	ldr	r3, [r7, #16]
 8018ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ba6:	693b      	ldr	r3, [r7, #16]
 8018ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018baa:	429a      	cmp	r2, r3
 8018bac:	d044      	beq.n	8018c38 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018bae:	693b      	ldr	r3, [r7, #16]
 8018bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d140      	bne.n	8018c38 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018bb6:	693b      	ldr	r3, [r7, #16]
 8018bb8:	3304      	adds	r3, #4
 8018bba:	4618      	mov	r0, r3
 8018bbc:	f7fe f856 	bl	8016c6c <uxListRemove>
 8018bc0:	4603      	mov	r3, r0
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d115      	bne.n	8018bf2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018bc6:	693b      	ldr	r3, [r7, #16]
 8018bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018bca:	491f      	ldr	r1, [pc, #124]	@ (8018c48 <xTaskPriorityDisinherit+0x110>)
 8018bcc:	4613      	mov	r3, r2
 8018bce:	009b      	lsls	r3, r3, #2
 8018bd0:	4413      	add	r3, r2
 8018bd2:	009b      	lsls	r3, r3, #2
 8018bd4:	440b      	add	r3, r1
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d10a      	bne.n	8018bf2 <xTaskPriorityDisinherit+0xba>
 8018bdc:	693b      	ldr	r3, [r7, #16]
 8018bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018be0:	2201      	movs	r2, #1
 8018be2:	fa02 f303 	lsl.w	r3, r2, r3
 8018be6:	43da      	mvns	r2, r3
 8018be8:	4b18      	ldr	r3, [pc, #96]	@ (8018c4c <xTaskPriorityDisinherit+0x114>)
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	4013      	ands	r3, r2
 8018bee:	4a17      	ldr	r2, [pc, #92]	@ (8018c4c <xTaskPriorityDisinherit+0x114>)
 8018bf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018bf2:	693b      	ldr	r3, [r7, #16]
 8018bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018bf6:	693b      	ldr	r3, [r7, #16]
 8018bf8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018bfa:	693b      	ldr	r3, [r7, #16]
 8018bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018bfe:	f1c3 0207 	rsb	r2, r3, #7
 8018c02:	693b      	ldr	r3, [r7, #16]
 8018c04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018c06:	693b      	ldr	r3, [r7, #16]
 8018c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c0a:	2201      	movs	r2, #1
 8018c0c:	409a      	lsls	r2, r3
 8018c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8018c4c <xTaskPriorityDisinherit+0x114>)
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	4313      	orrs	r3, r2
 8018c14:	4a0d      	ldr	r2, [pc, #52]	@ (8018c4c <xTaskPriorityDisinherit+0x114>)
 8018c16:	6013      	str	r3, [r2, #0]
 8018c18:	693b      	ldr	r3, [r7, #16]
 8018c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018c1c:	4613      	mov	r3, r2
 8018c1e:	009b      	lsls	r3, r3, #2
 8018c20:	4413      	add	r3, r2
 8018c22:	009b      	lsls	r3, r3, #2
 8018c24:	4a08      	ldr	r2, [pc, #32]	@ (8018c48 <xTaskPriorityDisinherit+0x110>)
 8018c26:	441a      	add	r2, r3
 8018c28:	693b      	ldr	r3, [r7, #16]
 8018c2a:	3304      	adds	r3, #4
 8018c2c:	4619      	mov	r1, r3
 8018c2e:	4610      	mov	r0, r2
 8018c30:	f7fd ffbf 	bl	8016bb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018c34:	2301      	movs	r3, #1
 8018c36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c38:	697b      	ldr	r3, [r7, #20]
	}
 8018c3a:	4618      	mov	r0, r3
 8018c3c:	3718      	adds	r7, #24
 8018c3e:	46bd      	mov	sp, r7
 8018c40:	bd80      	pop	{r7, pc}
 8018c42:	bf00      	nop
 8018c44:	20001854 	.word	0x20001854
 8018c48:	20001858 	.word	0x20001858
 8018c4c:	2000195c 	.word	0x2000195c

08018c50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b088      	sub	sp, #32
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
 8018c58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018c5e:	2301      	movs	r3, #1
 8018c60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	f000 8089 	beq.w	8018d7c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018c6a:	69bb      	ldr	r3, [r7, #24]
 8018c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d10d      	bne.n	8018c8e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8018c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c76:	b672      	cpsid	i
 8018c78:	f383 8811 	msr	BASEPRI, r3
 8018c7c:	f3bf 8f6f 	isb	sy
 8018c80:	f3bf 8f4f 	dsb	sy
 8018c84:	b662      	cpsie	i
 8018c86:	60fb      	str	r3, [r7, #12]
}
 8018c88:	bf00      	nop
 8018c8a:	bf00      	nop
 8018c8c:	e7fd      	b.n	8018c8a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018c8e:	69bb      	ldr	r3, [r7, #24]
 8018c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c92:	683a      	ldr	r2, [r7, #0]
 8018c94:	429a      	cmp	r2, r3
 8018c96:	d902      	bls.n	8018c9e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018c98:	683b      	ldr	r3, [r7, #0]
 8018c9a:	61fb      	str	r3, [r7, #28]
 8018c9c:	e002      	b.n	8018ca4 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018c9e:	69bb      	ldr	r3, [r7, #24]
 8018ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018ca2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018ca4:	69bb      	ldr	r3, [r7, #24]
 8018ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ca8:	69fa      	ldr	r2, [r7, #28]
 8018caa:	429a      	cmp	r2, r3
 8018cac:	d066      	beq.n	8018d7c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018cae:	69bb      	ldr	r3, [r7, #24]
 8018cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018cb2:	697a      	ldr	r2, [r7, #20]
 8018cb4:	429a      	cmp	r2, r3
 8018cb6:	d161      	bne.n	8018d7c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018cb8:	4b32      	ldr	r3, [pc, #200]	@ (8018d84 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	69ba      	ldr	r2, [r7, #24]
 8018cbe:	429a      	cmp	r2, r3
 8018cc0:	d10d      	bne.n	8018cde <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8018cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cc6:	b672      	cpsid	i
 8018cc8:	f383 8811 	msr	BASEPRI, r3
 8018ccc:	f3bf 8f6f 	isb	sy
 8018cd0:	f3bf 8f4f 	dsb	sy
 8018cd4:	b662      	cpsie	i
 8018cd6:	60bb      	str	r3, [r7, #8]
}
 8018cd8:	bf00      	nop
 8018cda:	bf00      	nop
 8018cdc:	e7fd      	b.n	8018cda <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018cde:	69bb      	ldr	r3, [r7, #24]
 8018ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ce2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018ce4:	69bb      	ldr	r3, [r7, #24]
 8018ce6:	69fa      	ldr	r2, [r7, #28]
 8018ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018cea:	69bb      	ldr	r3, [r7, #24]
 8018cec:	699b      	ldr	r3, [r3, #24]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	db04      	blt.n	8018cfc <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018cf2:	69fb      	ldr	r3, [r7, #28]
 8018cf4:	f1c3 0207 	rsb	r2, r3, #7
 8018cf8:	69bb      	ldr	r3, [r7, #24]
 8018cfa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018cfc:	69bb      	ldr	r3, [r7, #24]
 8018cfe:	6959      	ldr	r1, [r3, #20]
 8018d00:	693a      	ldr	r2, [r7, #16]
 8018d02:	4613      	mov	r3, r2
 8018d04:	009b      	lsls	r3, r3, #2
 8018d06:	4413      	add	r3, r2
 8018d08:	009b      	lsls	r3, r3, #2
 8018d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8018d88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8018d0c:	4413      	add	r3, r2
 8018d0e:	4299      	cmp	r1, r3
 8018d10:	d134      	bne.n	8018d7c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018d12:	69bb      	ldr	r3, [r7, #24]
 8018d14:	3304      	adds	r3, #4
 8018d16:	4618      	mov	r0, r3
 8018d18:	f7fd ffa8 	bl	8016c6c <uxListRemove>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d115      	bne.n	8018d4e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018d22:	69bb      	ldr	r3, [r7, #24]
 8018d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018d26:	4918      	ldr	r1, [pc, #96]	@ (8018d88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8018d28:	4613      	mov	r3, r2
 8018d2a:	009b      	lsls	r3, r3, #2
 8018d2c:	4413      	add	r3, r2
 8018d2e:	009b      	lsls	r3, r3, #2
 8018d30:	440b      	add	r3, r1
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d10a      	bne.n	8018d4e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8018d38:	69bb      	ldr	r3, [r7, #24]
 8018d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d3c:	2201      	movs	r2, #1
 8018d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8018d42:	43da      	mvns	r2, r3
 8018d44:	4b11      	ldr	r3, [pc, #68]	@ (8018d8c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	4013      	ands	r3, r2
 8018d4a:	4a10      	ldr	r2, [pc, #64]	@ (8018d8c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018d4c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018d4e:	69bb      	ldr	r3, [r7, #24]
 8018d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d52:	2201      	movs	r2, #1
 8018d54:	409a      	lsls	r2, r3
 8018d56:	4b0d      	ldr	r3, [pc, #52]	@ (8018d8c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	4313      	orrs	r3, r2
 8018d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8018d8c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018d5e:	6013      	str	r3, [r2, #0]
 8018d60:	69bb      	ldr	r3, [r7, #24]
 8018d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018d64:	4613      	mov	r3, r2
 8018d66:	009b      	lsls	r3, r3, #2
 8018d68:	4413      	add	r3, r2
 8018d6a:	009b      	lsls	r3, r3, #2
 8018d6c:	4a06      	ldr	r2, [pc, #24]	@ (8018d88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8018d6e:	441a      	add	r2, r3
 8018d70:	69bb      	ldr	r3, [r7, #24]
 8018d72:	3304      	adds	r3, #4
 8018d74:	4619      	mov	r1, r3
 8018d76:	4610      	mov	r0, r2
 8018d78:	f7fd ff1b 	bl	8016bb2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018d7c:	bf00      	nop
 8018d7e:	3720      	adds	r7, #32
 8018d80:	46bd      	mov	sp, r7
 8018d82:	bd80      	pop	{r7, pc}
 8018d84:	20001854 	.word	0x20001854
 8018d88:	20001858 	.word	0x20001858
 8018d8c:	2000195c 	.word	0x2000195c

08018d90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018d90:	b480      	push	{r7}
 8018d92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018d94:	4b07      	ldr	r3, [pc, #28]	@ (8018db4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d004      	beq.n	8018da6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018d9c:	4b05      	ldr	r3, [pc, #20]	@ (8018db4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018da2:	3201      	adds	r2, #1
 8018da4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8018da6:	4b03      	ldr	r3, [pc, #12]	@ (8018db4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018da8:	681b      	ldr	r3, [r3, #0]
	}
 8018daa:	4618      	mov	r0, r3
 8018dac:	46bd      	mov	sp, r7
 8018dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db2:	4770      	bx	lr
 8018db4:	20001854 	.word	0x20001854

08018db8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b084      	sub	sp, #16
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	6078      	str	r0, [r7, #4]
 8018dc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018dc2:	4b29      	ldr	r3, [pc, #164]	@ (8018e68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018dc8:	4b28      	ldr	r3, [pc, #160]	@ (8018e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	3304      	adds	r3, #4
 8018dce:	4618      	mov	r0, r3
 8018dd0:	f7fd ff4c 	bl	8016c6c <uxListRemove>
 8018dd4:	4603      	mov	r3, r0
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d10b      	bne.n	8018df2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8018dda:	4b24      	ldr	r3, [pc, #144]	@ (8018e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018de0:	2201      	movs	r2, #1
 8018de2:	fa02 f303 	lsl.w	r3, r2, r3
 8018de6:	43da      	mvns	r2, r3
 8018de8:	4b21      	ldr	r3, [pc, #132]	@ (8018e70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	4013      	ands	r3, r2
 8018dee:	4a20      	ldr	r2, [pc, #128]	@ (8018e70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018df0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018df8:	d10a      	bne.n	8018e10 <prvAddCurrentTaskToDelayedList+0x58>
 8018dfa:	683b      	ldr	r3, [r7, #0]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d007      	beq.n	8018e10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018e00:	4b1a      	ldr	r3, [pc, #104]	@ (8018e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	3304      	adds	r3, #4
 8018e06:	4619      	mov	r1, r3
 8018e08:	481a      	ldr	r0, [pc, #104]	@ (8018e74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8018e0a:	f7fd fed2 	bl	8016bb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018e0e:	e026      	b.n	8018e5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018e10:	68fa      	ldr	r2, [r7, #12]
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	4413      	add	r3, r2
 8018e16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018e18:	4b14      	ldr	r3, [pc, #80]	@ (8018e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	68ba      	ldr	r2, [r7, #8]
 8018e1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018e20:	68ba      	ldr	r2, [r7, #8]
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	429a      	cmp	r2, r3
 8018e26:	d209      	bcs.n	8018e3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018e28:	4b13      	ldr	r3, [pc, #76]	@ (8018e78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8018e2a:	681a      	ldr	r2, [r3, #0]
 8018e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8018e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	3304      	adds	r3, #4
 8018e32:	4619      	mov	r1, r3
 8018e34:	4610      	mov	r0, r2
 8018e36:	f7fd fee0 	bl	8016bfa <vListInsert>
}
 8018e3a:	e010      	b.n	8018e5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8018e7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8018e3e:	681a      	ldr	r2, [r3, #0]
 8018e40:	4b0a      	ldr	r3, [pc, #40]	@ (8018e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	3304      	adds	r3, #4
 8018e46:	4619      	mov	r1, r3
 8018e48:	4610      	mov	r0, r2
 8018e4a:	f7fd fed6 	bl	8016bfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8018e80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	68ba      	ldr	r2, [r7, #8]
 8018e54:	429a      	cmp	r2, r3
 8018e56:	d202      	bcs.n	8018e5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8018e58:	4a09      	ldr	r2, [pc, #36]	@ (8018e80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018e5a:	68bb      	ldr	r3, [r7, #8]
 8018e5c:	6013      	str	r3, [r2, #0]
}
 8018e5e:	bf00      	nop
 8018e60:	3710      	adds	r7, #16
 8018e62:	46bd      	mov	sp, r7
 8018e64:	bd80      	pop	{r7, pc}
 8018e66:	bf00      	nop
 8018e68:	20001958 	.word	0x20001958
 8018e6c:	20001854 	.word	0x20001854
 8018e70:	2000195c 	.word	0x2000195c
 8018e74:	20001940 	.word	0x20001940
 8018e78:	20001910 	.word	0x20001910
 8018e7c:	2000190c 	.word	0x2000190c
 8018e80:	20001974 	.word	0x20001974

08018e84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018e84:	b480      	push	{r7}
 8018e86:	b085      	sub	sp, #20
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	60f8      	str	r0, [r7, #12]
 8018e8c:	60b9      	str	r1, [r7, #8]
 8018e8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	3b04      	subs	r3, #4
 8018e94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018e96:	68fb      	ldr	r3, [r7, #12]
 8018e98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8018e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	3b04      	subs	r3, #4
 8018ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018ea4:	68bb      	ldr	r3, [r7, #8]
 8018ea6:	f023 0201 	bic.w	r2, r3, #1
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	3b04      	subs	r3, #4
 8018eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8018ee8 <pxPortInitialiseStack+0x64>)
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	3b14      	subs	r3, #20
 8018ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018ec0:	687a      	ldr	r2, [r7, #4]
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	3b04      	subs	r3, #4
 8018eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	f06f 0202 	mvn.w	r2, #2
 8018ed2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	3b20      	subs	r3, #32
 8018ed8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018eda:	68fb      	ldr	r3, [r7, #12]
}
 8018edc:	4618      	mov	r0, r3
 8018ede:	3714      	adds	r7, #20
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ee6:	4770      	bx	lr
 8018ee8:	08018eed 	.word	0x08018eed

08018eec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018eec:	b480      	push	{r7}
 8018eee:	b085      	sub	sp, #20
 8018ef0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018ef6:	4b15      	ldr	r3, [pc, #84]	@ (8018f4c <prvTaskExitError+0x60>)
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018efe:	d00d      	beq.n	8018f1c <prvTaskExitError+0x30>
	__asm volatile
 8018f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f04:	b672      	cpsid	i
 8018f06:	f383 8811 	msr	BASEPRI, r3
 8018f0a:	f3bf 8f6f 	isb	sy
 8018f0e:	f3bf 8f4f 	dsb	sy
 8018f12:	b662      	cpsie	i
 8018f14:	60fb      	str	r3, [r7, #12]
}
 8018f16:	bf00      	nop
 8018f18:	bf00      	nop
 8018f1a:	e7fd      	b.n	8018f18 <prvTaskExitError+0x2c>
	__asm volatile
 8018f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f20:	b672      	cpsid	i
 8018f22:	f383 8811 	msr	BASEPRI, r3
 8018f26:	f3bf 8f6f 	isb	sy
 8018f2a:	f3bf 8f4f 	dsb	sy
 8018f2e:	b662      	cpsie	i
 8018f30:	60bb      	str	r3, [r7, #8]
}
 8018f32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018f34:	bf00      	nop
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d0fc      	beq.n	8018f36 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018f3c:	bf00      	nop
 8018f3e:	bf00      	nop
 8018f40:	3714      	adds	r7, #20
 8018f42:	46bd      	mov	sp, r7
 8018f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f48:	4770      	bx	lr
 8018f4a:	bf00      	nop
 8018f4c:	2000008c 	.word	0x2000008c

08018f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018f50:	4b07      	ldr	r3, [pc, #28]	@ (8018f70 <pxCurrentTCBConst2>)
 8018f52:	6819      	ldr	r1, [r3, #0]
 8018f54:	6808      	ldr	r0, [r1, #0]
 8018f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f5a:	f380 8809 	msr	PSP, r0
 8018f5e:	f3bf 8f6f 	isb	sy
 8018f62:	f04f 0000 	mov.w	r0, #0
 8018f66:	f380 8811 	msr	BASEPRI, r0
 8018f6a:	4770      	bx	lr
 8018f6c:	f3af 8000 	nop.w

08018f70 <pxCurrentTCBConst2>:
 8018f70:	20001854 	.word	0x20001854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018f74:	bf00      	nop
 8018f76:	bf00      	nop

08018f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018f78:	4808      	ldr	r0, [pc, #32]	@ (8018f9c <prvPortStartFirstTask+0x24>)
 8018f7a:	6800      	ldr	r0, [r0, #0]
 8018f7c:	6800      	ldr	r0, [r0, #0]
 8018f7e:	f380 8808 	msr	MSP, r0
 8018f82:	f04f 0000 	mov.w	r0, #0
 8018f86:	f380 8814 	msr	CONTROL, r0
 8018f8a:	b662      	cpsie	i
 8018f8c:	b661      	cpsie	f
 8018f8e:	f3bf 8f4f 	dsb	sy
 8018f92:	f3bf 8f6f 	isb	sy
 8018f96:	df00      	svc	0
 8018f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018f9a:	bf00      	nop
 8018f9c:	e000ed08 	.word	0xe000ed08

08018fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b084      	sub	sp, #16
 8018fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018fa6:	4b37      	ldr	r3, [pc, #220]	@ (8019084 <xPortStartScheduler+0xe4>)
 8018fa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	781b      	ldrb	r3, [r3, #0]
 8018fae:	b2db      	uxtb	r3, r3
 8018fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	22ff      	movs	r2, #255	@ 0xff
 8018fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	781b      	ldrb	r3, [r3, #0]
 8018fbc:	b2db      	uxtb	r3, r3
 8018fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018fc0:	78fb      	ldrb	r3, [r7, #3]
 8018fc2:	b2db      	uxtb	r3, r3
 8018fc4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8018fc8:	b2da      	uxtb	r2, r3
 8018fca:	4b2f      	ldr	r3, [pc, #188]	@ (8019088 <xPortStartScheduler+0xe8>)
 8018fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018fce:	4b2f      	ldr	r3, [pc, #188]	@ (801908c <xPortStartScheduler+0xec>)
 8018fd0:	2207      	movs	r2, #7
 8018fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018fd4:	e009      	b.n	8018fea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8018fd6:	4b2d      	ldr	r3, [pc, #180]	@ (801908c <xPortStartScheduler+0xec>)
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	3b01      	subs	r3, #1
 8018fdc:	4a2b      	ldr	r2, [pc, #172]	@ (801908c <xPortStartScheduler+0xec>)
 8018fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018fe0:	78fb      	ldrb	r3, [r7, #3]
 8018fe2:	b2db      	uxtb	r3, r3
 8018fe4:	005b      	lsls	r3, r3, #1
 8018fe6:	b2db      	uxtb	r3, r3
 8018fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018fea:	78fb      	ldrb	r3, [r7, #3]
 8018fec:	b2db      	uxtb	r3, r3
 8018fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018ff2:	2b80      	cmp	r3, #128	@ 0x80
 8018ff4:	d0ef      	beq.n	8018fd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018ff6:	4b25      	ldr	r3, [pc, #148]	@ (801908c <xPortStartScheduler+0xec>)
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	f1c3 0307 	rsb	r3, r3, #7
 8018ffe:	2b04      	cmp	r3, #4
 8019000:	d00d      	beq.n	801901e <xPortStartScheduler+0x7e>
	__asm volatile
 8019002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019006:	b672      	cpsid	i
 8019008:	f383 8811 	msr	BASEPRI, r3
 801900c:	f3bf 8f6f 	isb	sy
 8019010:	f3bf 8f4f 	dsb	sy
 8019014:	b662      	cpsie	i
 8019016:	60bb      	str	r3, [r7, #8]
}
 8019018:	bf00      	nop
 801901a:	bf00      	nop
 801901c:	e7fd      	b.n	801901a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801901e:	4b1b      	ldr	r3, [pc, #108]	@ (801908c <xPortStartScheduler+0xec>)
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	021b      	lsls	r3, r3, #8
 8019024:	4a19      	ldr	r2, [pc, #100]	@ (801908c <xPortStartScheduler+0xec>)
 8019026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019028:	4b18      	ldr	r3, [pc, #96]	@ (801908c <xPortStartScheduler+0xec>)
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8019030:	4a16      	ldr	r2, [pc, #88]	@ (801908c <xPortStartScheduler+0xec>)
 8019032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	b2da      	uxtb	r2, r3
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801903c:	4b14      	ldr	r3, [pc, #80]	@ (8019090 <xPortStartScheduler+0xf0>)
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	4a13      	ldr	r2, [pc, #76]	@ (8019090 <xPortStartScheduler+0xf0>)
 8019042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8019046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019048:	4b11      	ldr	r3, [pc, #68]	@ (8019090 <xPortStartScheduler+0xf0>)
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	4a10      	ldr	r2, [pc, #64]	@ (8019090 <xPortStartScheduler+0xf0>)
 801904e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8019052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019054:	f000 f8dc 	bl	8019210 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019058:	4b0e      	ldr	r3, [pc, #56]	@ (8019094 <xPortStartScheduler+0xf4>)
 801905a:	2200      	movs	r2, #0
 801905c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801905e:	f000 f8fb 	bl	8019258 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019062:	4b0d      	ldr	r3, [pc, #52]	@ (8019098 <xPortStartScheduler+0xf8>)
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	4a0c      	ldr	r2, [pc, #48]	@ (8019098 <xPortStartScheduler+0xf8>)
 8019068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801906c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801906e:	f7ff ff83 	bl	8018f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019072:	f7ff fa4d 	bl	8018510 <vTaskSwitchContext>
	prvTaskExitError();
 8019076:	f7ff ff39 	bl	8018eec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801907a:	2300      	movs	r3, #0
}
 801907c:	4618      	mov	r0, r3
 801907e:	3710      	adds	r7, #16
 8019080:	46bd      	mov	sp, r7
 8019082:	bd80      	pop	{r7, pc}
 8019084:	e000e400 	.word	0xe000e400
 8019088:	20001980 	.word	0x20001980
 801908c:	20001984 	.word	0x20001984
 8019090:	e000ed20 	.word	0xe000ed20
 8019094:	2000008c 	.word	0x2000008c
 8019098:	e000ef34 	.word	0xe000ef34

0801909c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801909c:	b480      	push	{r7}
 801909e:	b083      	sub	sp, #12
 80190a0:	af00      	add	r7, sp, #0
	__asm volatile
 80190a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190a6:	b672      	cpsid	i
 80190a8:	f383 8811 	msr	BASEPRI, r3
 80190ac:	f3bf 8f6f 	isb	sy
 80190b0:	f3bf 8f4f 	dsb	sy
 80190b4:	b662      	cpsie	i
 80190b6:	607b      	str	r3, [r7, #4]
}
 80190b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80190ba:	4b11      	ldr	r3, [pc, #68]	@ (8019100 <vPortEnterCritical+0x64>)
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	3301      	adds	r3, #1
 80190c0:	4a0f      	ldr	r2, [pc, #60]	@ (8019100 <vPortEnterCritical+0x64>)
 80190c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80190c4:	4b0e      	ldr	r3, [pc, #56]	@ (8019100 <vPortEnterCritical+0x64>)
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	2b01      	cmp	r3, #1
 80190ca:	d112      	bne.n	80190f2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80190cc:	4b0d      	ldr	r3, [pc, #52]	@ (8019104 <vPortEnterCritical+0x68>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	b2db      	uxtb	r3, r3
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d00d      	beq.n	80190f2 <vPortEnterCritical+0x56>
	__asm volatile
 80190d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190da:	b672      	cpsid	i
 80190dc:	f383 8811 	msr	BASEPRI, r3
 80190e0:	f3bf 8f6f 	isb	sy
 80190e4:	f3bf 8f4f 	dsb	sy
 80190e8:	b662      	cpsie	i
 80190ea:	603b      	str	r3, [r7, #0]
}
 80190ec:	bf00      	nop
 80190ee:	bf00      	nop
 80190f0:	e7fd      	b.n	80190ee <vPortEnterCritical+0x52>
	}
}
 80190f2:	bf00      	nop
 80190f4:	370c      	adds	r7, #12
 80190f6:	46bd      	mov	sp, r7
 80190f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190fc:	4770      	bx	lr
 80190fe:	bf00      	nop
 8019100:	2000008c 	.word	0x2000008c
 8019104:	e000ed04 	.word	0xe000ed04

08019108 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019108:	b480      	push	{r7}
 801910a:	b083      	sub	sp, #12
 801910c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801910e:	4b13      	ldr	r3, [pc, #76]	@ (801915c <vPortExitCritical+0x54>)
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d10d      	bne.n	8019132 <vPortExitCritical+0x2a>
	__asm volatile
 8019116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801911a:	b672      	cpsid	i
 801911c:	f383 8811 	msr	BASEPRI, r3
 8019120:	f3bf 8f6f 	isb	sy
 8019124:	f3bf 8f4f 	dsb	sy
 8019128:	b662      	cpsie	i
 801912a:	607b      	str	r3, [r7, #4]
}
 801912c:	bf00      	nop
 801912e:	bf00      	nop
 8019130:	e7fd      	b.n	801912e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8019132:	4b0a      	ldr	r3, [pc, #40]	@ (801915c <vPortExitCritical+0x54>)
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	3b01      	subs	r3, #1
 8019138:	4a08      	ldr	r2, [pc, #32]	@ (801915c <vPortExitCritical+0x54>)
 801913a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801913c:	4b07      	ldr	r3, [pc, #28]	@ (801915c <vPortExitCritical+0x54>)
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d105      	bne.n	8019150 <vPortExitCritical+0x48>
 8019144:	2300      	movs	r3, #0
 8019146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019148:	683b      	ldr	r3, [r7, #0]
 801914a:	f383 8811 	msr	BASEPRI, r3
}
 801914e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019150:	bf00      	nop
 8019152:	370c      	adds	r7, #12
 8019154:	46bd      	mov	sp, r7
 8019156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801915a:	4770      	bx	lr
 801915c:	2000008c 	.word	0x2000008c

08019160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019160:	f3ef 8009 	mrs	r0, PSP
 8019164:	f3bf 8f6f 	isb	sy
 8019168:	4b15      	ldr	r3, [pc, #84]	@ (80191c0 <pxCurrentTCBConst>)
 801916a:	681a      	ldr	r2, [r3, #0]
 801916c:	f01e 0f10 	tst.w	lr, #16
 8019170:	bf08      	it	eq
 8019172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801917a:	6010      	str	r0, [r2, #0]
 801917c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8019184:	b672      	cpsid	i
 8019186:	f380 8811 	msr	BASEPRI, r0
 801918a:	f3bf 8f4f 	dsb	sy
 801918e:	f3bf 8f6f 	isb	sy
 8019192:	b662      	cpsie	i
 8019194:	f7ff f9bc 	bl	8018510 <vTaskSwitchContext>
 8019198:	f04f 0000 	mov.w	r0, #0
 801919c:	f380 8811 	msr	BASEPRI, r0
 80191a0:	bc09      	pop	{r0, r3}
 80191a2:	6819      	ldr	r1, [r3, #0]
 80191a4:	6808      	ldr	r0, [r1, #0]
 80191a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191aa:	f01e 0f10 	tst.w	lr, #16
 80191ae:	bf08      	it	eq
 80191b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80191b4:	f380 8809 	msr	PSP, r0
 80191b8:	f3bf 8f6f 	isb	sy
 80191bc:	4770      	bx	lr
 80191be:	bf00      	nop

080191c0 <pxCurrentTCBConst>:
 80191c0:	20001854 	.word	0x20001854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80191c4:	bf00      	nop
 80191c6:	bf00      	nop

080191c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b082      	sub	sp, #8
 80191cc:	af00      	add	r7, sp, #0
	__asm volatile
 80191ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191d2:	b672      	cpsid	i
 80191d4:	f383 8811 	msr	BASEPRI, r3
 80191d8:	f3bf 8f6f 	isb	sy
 80191dc:	f3bf 8f4f 	dsb	sy
 80191e0:	b662      	cpsie	i
 80191e2:	607b      	str	r3, [r7, #4]
}
 80191e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80191e6:	f7ff f8d7 	bl	8018398 <xTaskIncrementTick>
 80191ea:	4603      	mov	r3, r0
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d003      	beq.n	80191f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80191f0:	4b06      	ldr	r3, [pc, #24]	@ (801920c <SysTick_Handler+0x44>)
 80191f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80191f6:	601a      	str	r2, [r3, #0]
 80191f8:	2300      	movs	r3, #0
 80191fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80191fc:	683b      	ldr	r3, [r7, #0]
 80191fe:	f383 8811 	msr	BASEPRI, r3
}
 8019202:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019204:	bf00      	nop
 8019206:	3708      	adds	r7, #8
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}
 801920c:	e000ed04 	.word	0xe000ed04

08019210 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019210:	b480      	push	{r7}
 8019212:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019214:	4b0b      	ldr	r3, [pc, #44]	@ (8019244 <vPortSetupTimerInterrupt+0x34>)
 8019216:	2200      	movs	r2, #0
 8019218:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801921a:	4b0b      	ldr	r3, [pc, #44]	@ (8019248 <vPortSetupTimerInterrupt+0x38>)
 801921c:	2200      	movs	r2, #0
 801921e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019220:	4b0a      	ldr	r3, [pc, #40]	@ (801924c <vPortSetupTimerInterrupt+0x3c>)
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	4a0a      	ldr	r2, [pc, #40]	@ (8019250 <vPortSetupTimerInterrupt+0x40>)
 8019226:	fba2 2303 	umull	r2, r3, r2, r3
 801922a:	099b      	lsrs	r3, r3, #6
 801922c:	4a09      	ldr	r2, [pc, #36]	@ (8019254 <vPortSetupTimerInterrupt+0x44>)
 801922e:	3b01      	subs	r3, #1
 8019230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019232:	4b04      	ldr	r3, [pc, #16]	@ (8019244 <vPortSetupTimerInterrupt+0x34>)
 8019234:	2207      	movs	r2, #7
 8019236:	601a      	str	r2, [r3, #0]
}
 8019238:	bf00      	nop
 801923a:	46bd      	mov	sp, r7
 801923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019240:	4770      	bx	lr
 8019242:	bf00      	nop
 8019244:	e000e010 	.word	0xe000e010
 8019248:	e000e018 	.word	0xe000e018
 801924c:	20000018 	.word	0x20000018
 8019250:	10624dd3 	.word	0x10624dd3
 8019254:	e000e014 	.word	0xe000e014

08019258 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019258:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8019268 <vPortEnableVFP+0x10>
 801925c:	6801      	ldr	r1, [r0, #0]
 801925e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8019262:	6001      	str	r1, [r0, #0]
 8019264:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019266:	bf00      	nop
 8019268:	e000ed88 	.word	0xe000ed88

0801926c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801926c:	b480      	push	{r7}
 801926e:	b085      	sub	sp, #20
 8019270:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019272:	f3ef 8305 	mrs	r3, IPSR
 8019276:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	2b0f      	cmp	r3, #15
 801927c:	d917      	bls.n	80192ae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801927e:	4a1a      	ldr	r2, [pc, #104]	@ (80192e8 <vPortValidateInterruptPriority+0x7c>)
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	4413      	add	r3, r2
 8019284:	781b      	ldrb	r3, [r3, #0]
 8019286:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019288:	4b18      	ldr	r3, [pc, #96]	@ (80192ec <vPortValidateInterruptPriority+0x80>)
 801928a:	781b      	ldrb	r3, [r3, #0]
 801928c:	7afa      	ldrb	r2, [r7, #11]
 801928e:	429a      	cmp	r2, r3
 8019290:	d20d      	bcs.n	80192ae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8019292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019296:	b672      	cpsid	i
 8019298:	f383 8811 	msr	BASEPRI, r3
 801929c:	f3bf 8f6f 	isb	sy
 80192a0:	f3bf 8f4f 	dsb	sy
 80192a4:	b662      	cpsie	i
 80192a6:	607b      	str	r3, [r7, #4]
}
 80192a8:	bf00      	nop
 80192aa:	bf00      	nop
 80192ac:	e7fd      	b.n	80192aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80192ae:	4b10      	ldr	r3, [pc, #64]	@ (80192f0 <vPortValidateInterruptPriority+0x84>)
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80192b6:	4b0f      	ldr	r3, [pc, #60]	@ (80192f4 <vPortValidateInterruptPriority+0x88>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	429a      	cmp	r2, r3
 80192bc:	d90d      	bls.n	80192da <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80192be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192c2:	b672      	cpsid	i
 80192c4:	f383 8811 	msr	BASEPRI, r3
 80192c8:	f3bf 8f6f 	isb	sy
 80192cc:	f3bf 8f4f 	dsb	sy
 80192d0:	b662      	cpsie	i
 80192d2:	603b      	str	r3, [r7, #0]
}
 80192d4:	bf00      	nop
 80192d6:	bf00      	nop
 80192d8:	e7fd      	b.n	80192d6 <vPortValidateInterruptPriority+0x6a>
	}
 80192da:	bf00      	nop
 80192dc:	3714      	adds	r7, #20
 80192de:	46bd      	mov	sp, r7
 80192e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e4:	4770      	bx	lr
 80192e6:	bf00      	nop
 80192e8:	e000e3f0 	.word	0xe000e3f0
 80192ec:	20001980 	.word	0x20001980
 80192f0:	e000ed0c 	.word	0xe000ed0c
 80192f4:	20001984 	.word	0x20001984

080192f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b08a      	sub	sp, #40	@ 0x28
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019300:	2300      	movs	r3, #0
 8019302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019304:	f7fe ff78 	bl	80181f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019308:	4b5f      	ldr	r3, [pc, #380]	@ (8019488 <pvPortMalloc+0x190>)
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d101      	bne.n	8019314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019310:	f000 f924 	bl	801955c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019314:	4b5d      	ldr	r3, [pc, #372]	@ (801948c <pvPortMalloc+0x194>)
 8019316:	681a      	ldr	r2, [r3, #0]
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	4013      	ands	r3, r2
 801931c:	2b00      	cmp	r3, #0
 801931e:	f040 8094 	bne.w	801944a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d020      	beq.n	801936a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8019328:	2208      	movs	r2, #8
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	4413      	add	r3, r2
 801932e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	f003 0307 	and.w	r3, r3, #7
 8019336:	2b00      	cmp	r3, #0
 8019338:	d017      	beq.n	801936a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	f023 0307 	bic.w	r3, r3, #7
 8019340:	3308      	adds	r3, #8
 8019342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	f003 0307 	and.w	r3, r3, #7
 801934a:	2b00      	cmp	r3, #0
 801934c:	d00d      	beq.n	801936a <pvPortMalloc+0x72>
	__asm volatile
 801934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019352:	b672      	cpsid	i
 8019354:	f383 8811 	msr	BASEPRI, r3
 8019358:	f3bf 8f6f 	isb	sy
 801935c:	f3bf 8f4f 	dsb	sy
 8019360:	b662      	cpsie	i
 8019362:	617b      	str	r3, [r7, #20]
}
 8019364:	bf00      	nop
 8019366:	bf00      	nop
 8019368:	e7fd      	b.n	8019366 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	2b00      	cmp	r3, #0
 801936e:	d06c      	beq.n	801944a <pvPortMalloc+0x152>
 8019370:	4b47      	ldr	r3, [pc, #284]	@ (8019490 <pvPortMalloc+0x198>)
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	687a      	ldr	r2, [r7, #4]
 8019376:	429a      	cmp	r2, r3
 8019378:	d867      	bhi.n	801944a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801937a:	4b46      	ldr	r3, [pc, #280]	@ (8019494 <pvPortMalloc+0x19c>)
 801937c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801937e:	4b45      	ldr	r3, [pc, #276]	@ (8019494 <pvPortMalloc+0x19c>)
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019384:	e004      	b.n	8019390 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8019386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019388:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801938a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019392:	685b      	ldr	r3, [r3, #4]
 8019394:	687a      	ldr	r2, [r7, #4]
 8019396:	429a      	cmp	r2, r3
 8019398:	d903      	bls.n	80193a2 <pvPortMalloc+0xaa>
 801939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d1f1      	bne.n	8019386 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80193a2:	4b39      	ldr	r3, [pc, #228]	@ (8019488 <pvPortMalloc+0x190>)
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80193a8:	429a      	cmp	r2, r3
 80193aa:	d04e      	beq.n	801944a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80193ac:	6a3b      	ldr	r3, [r7, #32]
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	2208      	movs	r2, #8
 80193b2:	4413      	add	r3, r2
 80193b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80193b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193b8:	681a      	ldr	r2, [r3, #0]
 80193ba:	6a3b      	ldr	r3, [r7, #32]
 80193bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80193be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193c0:	685a      	ldr	r2, [r3, #4]
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	1ad2      	subs	r2, r2, r3
 80193c6:	2308      	movs	r3, #8
 80193c8:	005b      	lsls	r3, r3, #1
 80193ca:	429a      	cmp	r2, r3
 80193cc:	d922      	bls.n	8019414 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80193ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	4413      	add	r3, r2
 80193d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80193d6:	69bb      	ldr	r3, [r7, #24]
 80193d8:	f003 0307 	and.w	r3, r3, #7
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d00d      	beq.n	80193fc <pvPortMalloc+0x104>
	__asm volatile
 80193e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193e4:	b672      	cpsid	i
 80193e6:	f383 8811 	msr	BASEPRI, r3
 80193ea:	f3bf 8f6f 	isb	sy
 80193ee:	f3bf 8f4f 	dsb	sy
 80193f2:	b662      	cpsie	i
 80193f4:	613b      	str	r3, [r7, #16]
}
 80193f6:	bf00      	nop
 80193f8:	bf00      	nop
 80193fa:	e7fd      	b.n	80193f8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80193fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193fe:	685a      	ldr	r2, [r3, #4]
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	1ad2      	subs	r2, r2, r3
 8019404:	69bb      	ldr	r3, [r7, #24]
 8019406:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801940a:	687a      	ldr	r2, [r7, #4]
 801940c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801940e:	69b8      	ldr	r0, [r7, #24]
 8019410:	f000 f906 	bl	8019620 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019414:	4b1e      	ldr	r3, [pc, #120]	@ (8019490 <pvPortMalloc+0x198>)
 8019416:	681a      	ldr	r2, [r3, #0]
 8019418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801941a:	685b      	ldr	r3, [r3, #4]
 801941c:	1ad3      	subs	r3, r2, r3
 801941e:	4a1c      	ldr	r2, [pc, #112]	@ (8019490 <pvPortMalloc+0x198>)
 8019420:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019422:	4b1b      	ldr	r3, [pc, #108]	@ (8019490 <pvPortMalloc+0x198>)
 8019424:	681a      	ldr	r2, [r3, #0]
 8019426:	4b1c      	ldr	r3, [pc, #112]	@ (8019498 <pvPortMalloc+0x1a0>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	429a      	cmp	r2, r3
 801942c:	d203      	bcs.n	8019436 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801942e:	4b18      	ldr	r3, [pc, #96]	@ (8019490 <pvPortMalloc+0x198>)
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	4a19      	ldr	r2, [pc, #100]	@ (8019498 <pvPortMalloc+0x1a0>)
 8019434:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019438:	685a      	ldr	r2, [r3, #4]
 801943a:	4b14      	ldr	r3, [pc, #80]	@ (801948c <pvPortMalloc+0x194>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	431a      	orrs	r2, r3
 8019440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019442:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019446:	2200      	movs	r2, #0
 8019448:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801944a:	f7fe fee3 	bl	8018214 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801944e:	69fb      	ldr	r3, [r7, #28]
 8019450:	2b00      	cmp	r3, #0
 8019452:	d101      	bne.n	8019458 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8019454:	f7e7 ffe9 	bl	800142a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019458:	69fb      	ldr	r3, [r7, #28]
 801945a:	f003 0307 	and.w	r3, r3, #7
 801945e:	2b00      	cmp	r3, #0
 8019460:	d00d      	beq.n	801947e <pvPortMalloc+0x186>
	__asm volatile
 8019462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019466:	b672      	cpsid	i
 8019468:	f383 8811 	msr	BASEPRI, r3
 801946c:	f3bf 8f6f 	isb	sy
 8019470:	f3bf 8f4f 	dsb	sy
 8019474:	b662      	cpsie	i
 8019476:	60fb      	str	r3, [r7, #12]
}
 8019478:	bf00      	nop
 801947a:	bf00      	nop
 801947c:	e7fd      	b.n	801947a <pvPortMalloc+0x182>
	return pvReturn;
 801947e:	69fb      	ldr	r3, [r7, #28]
}
 8019480:	4618      	mov	r0, r3
 8019482:	3728      	adds	r7, #40	@ 0x28
 8019484:	46bd      	mov	sp, r7
 8019486:	bd80      	pop	{r7, pc}
 8019488:	20009990 	.word	0x20009990
 801948c:	2000999c 	.word	0x2000999c
 8019490:	20009994 	.word	0x20009994
 8019494:	20009988 	.word	0x20009988
 8019498:	20009998 	.word	0x20009998

0801949c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801949c:	b580      	push	{r7, lr}
 801949e:	b086      	sub	sp, #24
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d04e      	beq.n	801954c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80194ae:	2308      	movs	r3, #8
 80194b0:	425b      	negs	r3, r3
 80194b2:	697a      	ldr	r2, [r7, #20]
 80194b4:	4413      	add	r3, r2
 80194b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80194b8:	697b      	ldr	r3, [r7, #20]
 80194ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80194bc:	693b      	ldr	r3, [r7, #16]
 80194be:	685a      	ldr	r2, [r3, #4]
 80194c0:	4b24      	ldr	r3, [pc, #144]	@ (8019554 <vPortFree+0xb8>)
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	4013      	ands	r3, r2
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d10d      	bne.n	80194e6 <vPortFree+0x4a>
	__asm volatile
 80194ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194ce:	b672      	cpsid	i
 80194d0:	f383 8811 	msr	BASEPRI, r3
 80194d4:	f3bf 8f6f 	isb	sy
 80194d8:	f3bf 8f4f 	dsb	sy
 80194dc:	b662      	cpsie	i
 80194de:	60fb      	str	r3, [r7, #12]
}
 80194e0:	bf00      	nop
 80194e2:	bf00      	nop
 80194e4:	e7fd      	b.n	80194e2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80194e6:	693b      	ldr	r3, [r7, #16]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d00d      	beq.n	801950a <vPortFree+0x6e>
	__asm volatile
 80194ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194f2:	b672      	cpsid	i
 80194f4:	f383 8811 	msr	BASEPRI, r3
 80194f8:	f3bf 8f6f 	isb	sy
 80194fc:	f3bf 8f4f 	dsb	sy
 8019500:	b662      	cpsie	i
 8019502:	60bb      	str	r3, [r7, #8]
}
 8019504:	bf00      	nop
 8019506:	bf00      	nop
 8019508:	e7fd      	b.n	8019506 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801950a:	693b      	ldr	r3, [r7, #16]
 801950c:	685a      	ldr	r2, [r3, #4]
 801950e:	4b11      	ldr	r3, [pc, #68]	@ (8019554 <vPortFree+0xb8>)
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	4013      	ands	r3, r2
 8019514:	2b00      	cmp	r3, #0
 8019516:	d019      	beq.n	801954c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019518:	693b      	ldr	r3, [r7, #16]
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	2b00      	cmp	r3, #0
 801951e:	d115      	bne.n	801954c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019520:	693b      	ldr	r3, [r7, #16]
 8019522:	685a      	ldr	r2, [r3, #4]
 8019524:	4b0b      	ldr	r3, [pc, #44]	@ (8019554 <vPortFree+0xb8>)
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	43db      	mvns	r3, r3
 801952a:	401a      	ands	r2, r3
 801952c:	693b      	ldr	r3, [r7, #16]
 801952e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019530:	f7fe fe62 	bl	80181f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019534:	693b      	ldr	r3, [r7, #16]
 8019536:	685a      	ldr	r2, [r3, #4]
 8019538:	4b07      	ldr	r3, [pc, #28]	@ (8019558 <vPortFree+0xbc>)
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	4413      	add	r3, r2
 801953e:	4a06      	ldr	r2, [pc, #24]	@ (8019558 <vPortFree+0xbc>)
 8019540:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019542:	6938      	ldr	r0, [r7, #16]
 8019544:	f000 f86c 	bl	8019620 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8019548:	f7fe fe64 	bl	8018214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801954c:	bf00      	nop
 801954e:	3718      	adds	r7, #24
 8019550:	46bd      	mov	sp, r7
 8019552:	bd80      	pop	{r7, pc}
 8019554:	2000999c 	.word	0x2000999c
 8019558:	20009994 	.word	0x20009994

0801955c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801955c:	b480      	push	{r7}
 801955e:	b085      	sub	sp, #20
 8019560:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019566:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019568:	4b27      	ldr	r3, [pc, #156]	@ (8019608 <prvHeapInit+0xac>)
 801956a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	f003 0307 	and.w	r3, r3, #7
 8019572:	2b00      	cmp	r3, #0
 8019574:	d00c      	beq.n	8019590 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019576:	68fb      	ldr	r3, [r7, #12]
 8019578:	3307      	adds	r3, #7
 801957a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	f023 0307 	bic.w	r3, r3, #7
 8019582:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019584:	68ba      	ldr	r2, [r7, #8]
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	1ad3      	subs	r3, r2, r3
 801958a:	4a1f      	ldr	r2, [pc, #124]	@ (8019608 <prvHeapInit+0xac>)
 801958c:	4413      	add	r3, r2
 801958e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019594:	4a1d      	ldr	r2, [pc, #116]	@ (801960c <prvHeapInit+0xb0>)
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801959a:	4b1c      	ldr	r3, [pc, #112]	@ (801960c <prvHeapInit+0xb0>)
 801959c:	2200      	movs	r2, #0
 801959e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	68ba      	ldr	r2, [r7, #8]
 80195a4:	4413      	add	r3, r2
 80195a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80195a8:	2208      	movs	r2, #8
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	1a9b      	subs	r3, r3, r2
 80195ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	f023 0307 	bic.w	r3, r3, #7
 80195b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	4a15      	ldr	r2, [pc, #84]	@ (8019610 <prvHeapInit+0xb4>)
 80195bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80195be:	4b14      	ldr	r3, [pc, #80]	@ (8019610 <prvHeapInit+0xb4>)
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	2200      	movs	r2, #0
 80195c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80195c6:	4b12      	ldr	r3, [pc, #72]	@ (8019610 <prvHeapInit+0xb4>)
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	2200      	movs	r2, #0
 80195cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80195d2:	683b      	ldr	r3, [r7, #0]
 80195d4:	68fa      	ldr	r2, [r7, #12]
 80195d6:	1ad2      	subs	r2, r2, r3
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80195dc:	4b0c      	ldr	r3, [pc, #48]	@ (8019610 <prvHeapInit+0xb4>)
 80195de:	681a      	ldr	r2, [r3, #0]
 80195e0:	683b      	ldr	r3, [r7, #0]
 80195e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80195e4:	683b      	ldr	r3, [r7, #0]
 80195e6:	685b      	ldr	r3, [r3, #4]
 80195e8:	4a0a      	ldr	r2, [pc, #40]	@ (8019614 <prvHeapInit+0xb8>)
 80195ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80195ec:	683b      	ldr	r3, [r7, #0]
 80195ee:	685b      	ldr	r3, [r3, #4]
 80195f0:	4a09      	ldr	r2, [pc, #36]	@ (8019618 <prvHeapInit+0xbc>)
 80195f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80195f4:	4b09      	ldr	r3, [pc, #36]	@ (801961c <prvHeapInit+0xc0>)
 80195f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80195fa:	601a      	str	r2, [r3, #0]
}
 80195fc:	bf00      	nop
 80195fe:	3714      	adds	r7, #20
 8019600:	46bd      	mov	sp, r7
 8019602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019606:	4770      	bx	lr
 8019608:	20001988 	.word	0x20001988
 801960c:	20009988 	.word	0x20009988
 8019610:	20009990 	.word	0x20009990
 8019614:	20009998 	.word	0x20009998
 8019618:	20009994 	.word	0x20009994
 801961c:	2000999c 	.word	0x2000999c

08019620 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019620:	b480      	push	{r7}
 8019622:	b085      	sub	sp, #20
 8019624:	af00      	add	r7, sp, #0
 8019626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019628:	4b28      	ldr	r3, [pc, #160]	@ (80196cc <prvInsertBlockIntoFreeList+0xac>)
 801962a:	60fb      	str	r3, [r7, #12]
 801962c:	e002      	b.n	8019634 <prvInsertBlockIntoFreeList+0x14>
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	60fb      	str	r3, [r7, #12]
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	687a      	ldr	r2, [r7, #4]
 801963a:	429a      	cmp	r2, r3
 801963c:	d8f7      	bhi.n	801962e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	685b      	ldr	r3, [r3, #4]
 8019646:	68ba      	ldr	r2, [r7, #8]
 8019648:	4413      	add	r3, r2
 801964a:	687a      	ldr	r2, [r7, #4]
 801964c:	429a      	cmp	r2, r3
 801964e:	d108      	bne.n	8019662 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	685a      	ldr	r2, [r3, #4]
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	685b      	ldr	r3, [r3, #4]
 8019658:	441a      	add	r2, r3
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	685b      	ldr	r3, [r3, #4]
 801966a:	68ba      	ldr	r2, [r7, #8]
 801966c:	441a      	add	r2, r3
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	429a      	cmp	r2, r3
 8019674:	d118      	bne.n	80196a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	681a      	ldr	r2, [r3, #0]
 801967a:	4b15      	ldr	r3, [pc, #84]	@ (80196d0 <prvInsertBlockIntoFreeList+0xb0>)
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	429a      	cmp	r2, r3
 8019680:	d00d      	beq.n	801969e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	685a      	ldr	r2, [r3, #4]
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	685b      	ldr	r3, [r3, #4]
 801968c:	441a      	add	r2, r3
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	681a      	ldr	r2, [r3, #0]
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	601a      	str	r2, [r3, #0]
 801969c:	e008      	b.n	80196b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801969e:	4b0c      	ldr	r3, [pc, #48]	@ (80196d0 <prvInsertBlockIntoFreeList+0xb0>)
 80196a0:	681a      	ldr	r2, [r3, #0]
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	601a      	str	r2, [r3, #0]
 80196a6:	e003      	b.n	80196b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	681a      	ldr	r2, [r3, #0]
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80196b0:	68fa      	ldr	r2, [r7, #12]
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	429a      	cmp	r2, r3
 80196b6:	d002      	beq.n	80196be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	687a      	ldr	r2, [r7, #4]
 80196bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80196be:	bf00      	nop
 80196c0:	3714      	adds	r7, #20
 80196c2:	46bd      	mov	sp, r7
 80196c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196c8:	4770      	bx	lr
 80196ca:	bf00      	nop
 80196cc:	20009988 	.word	0x20009988
 80196d0:	20009990 	.word	0x20009990

080196d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80196d8:	2201      	movs	r2, #1
 80196da:	490e      	ldr	r1, [pc, #56]	@ (8019714 <MX_USB_HOST_Init+0x40>)
 80196dc:	480e      	ldr	r0, [pc, #56]	@ (8019718 <MX_USB_HOST_Init+0x44>)
 80196de:	f7f8 fde7 	bl	80122b0 <USBH_Init>
 80196e2:	4603      	mov	r3, r0
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d001      	beq.n	80196ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80196e8:	f7e9 fcce 	bl	8003088 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80196ec:	490b      	ldr	r1, [pc, #44]	@ (801971c <MX_USB_HOST_Init+0x48>)
 80196ee:	480a      	ldr	r0, [pc, #40]	@ (8019718 <MX_USB_HOST_Init+0x44>)
 80196f0:	f7f8 feb1 	bl	8012456 <USBH_RegisterClass>
 80196f4:	4603      	mov	r3, r0
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d001      	beq.n	80196fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80196fa:	f7e9 fcc5 	bl	8003088 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80196fe:	4806      	ldr	r0, [pc, #24]	@ (8019718 <MX_USB_HOST_Init+0x44>)
 8019700:	f7f8 ff35 	bl	801256e <USBH_Start>
 8019704:	4603      	mov	r3, r0
 8019706:	2b00      	cmp	r3, #0
 8019708:	d001      	beq.n	801970e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801970a:	f7e9 fcbd 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801970e:	bf00      	nop
 8019710:	bd80      	pop	{r7, pc}
 8019712:	bf00      	nop
 8019714:	08019721 	.word	0x08019721
 8019718:	200099a0 	.word	0x200099a0
 801971c:	2000006c 	.word	0x2000006c

08019720 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8019720:	b480      	push	{r7}
 8019722:	b083      	sub	sp, #12
 8019724:	af00      	add	r7, sp, #0
 8019726:	6078      	str	r0, [r7, #4]
 8019728:	460b      	mov	r3, r1
 801972a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801972c:	78fb      	ldrb	r3, [r7, #3]
 801972e:	3b01      	subs	r3, #1
 8019730:	2b04      	cmp	r3, #4
 8019732:	d819      	bhi.n	8019768 <USBH_UserProcess+0x48>
 8019734:	a201      	add	r2, pc, #4	@ (adr r2, 801973c <USBH_UserProcess+0x1c>)
 8019736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801973a:	bf00      	nop
 801973c:	08019769 	.word	0x08019769
 8019740:	08019759 	.word	0x08019759
 8019744:	08019769 	.word	0x08019769
 8019748:	08019761 	.word	0x08019761
 801974c:	08019751 	.word	0x08019751
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8019750:	4b09      	ldr	r3, [pc, #36]	@ (8019778 <USBH_UserProcess+0x58>)
 8019752:	2203      	movs	r2, #3
 8019754:	701a      	strb	r2, [r3, #0]
  break;
 8019756:	e008      	b.n	801976a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8019758:	4b07      	ldr	r3, [pc, #28]	@ (8019778 <USBH_UserProcess+0x58>)
 801975a:	2202      	movs	r2, #2
 801975c:	701a      	strb	r2, [r3, #0]
  break;
 801975e:	e004      	b.n	801976a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8019760:	4b05      	ldr	r3, [pc, #20]	@ (8019778 <USBH_UserProcess+0x58>)
 8019762:	2201      	movs	r2, #1
 8019764:	701a      	strb	r2, [r3, #0]
  break;
 8019766:	e000      	b.n	801976a <USBH_UserProcess+0x4a>

  default:
  break;
 8019768:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801976a:	bf00      	nop
 801976c:	370c      	adds	r7, #12
 801976e:	46bd      	mov	sp, r7
 8019770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019774:	4770      	bx	lr
 8019776:	bf00      	nop
 8019778:	20009d84 	.word	0x20009d84

0801977c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801977c:	b580      	push	{r7, lr}
 801977e:	b08a      	sub	sp, #40	@ 0x28
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019784:	f107 0314 	add.w	r3, r7, #20
 8019788:	2200      	movs	r2, #0
 801978a:	601a      	str	r2, [r3, #0]
 801978c:	605a      	str	r2, [r3, #4]
 801978e:	609a      	str	r2, [r3, #8]
 8019790:	60da      	str	r2, [r3, #12]
 8019792:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801979c:	d13c      	bne.n	8019818 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801979e:	4b20      	ldr	r3, [pc, #128]	@ (8019820 <HAL_HCD_MspInit+0xa4>)
 80197a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80197a2:	4a1f      	ldr	r2, [pc, #124]	@ (8019820 <HAL_HCD_MspInit+0xa4>)
 80197a4:	f043 0301 	orr.w	r3, r3, #1
 80197a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80197aa:	4b1d      	ldr	r3, [pc, #116]	@ (8019820 <HAL_HCD_MspInit+0xa4>)
 80197ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80197ae:	f003 0301 	and.w	r3, r3, #1
 80197b2:	613b      	str	r3, [r7, #16]
 80197b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80197b6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80197ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80197bc:	2302      	movs	r3, #2
 80197be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80197c0:	2300      	movs	r3, #0
 80197c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80197c4:	2303      	movs	r3, #3
 80197c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80197c8:	230a      	movs	r3, #10
 80197ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80197cc:	f107 0314 	add.w	r3, r7, #20
 80197d0:	4619      	mov	r1, r3
 80197d2:	4814      	ldr	r0, [pc, #80]	@ (8019824 <HAL_HCD_MspInit+0xa8>)
 80197d4:	f7ed fb40 	bl	8006e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80197d8:	4b11      	ldr	r3, [pc, #68]	@ (8019820 <HAL_HCD_MspInit+0xa4>)
 80197da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80197dc:	4a10      	ldr	r2, [pc, #64]	@ (8019820 <HAL_HCD_MspInit+0xa4>)
 80197de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80197e2:	6353      	str	r3, [r2, #52]	@ 0x34
 80197e4:	4b0e      	ldr	r3, [pc, #56]	@ (8019820 <HAL_HCD_MspInit+0xa4>)
 80197e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80197e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80197ec:	60fb      	str	r3, [r7, #12]
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	4b0b      	ldr	r3, [pc, #44]	@ (8019820 <HAL_HCD_MspInit+0xa4>)
 80197f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80197f4:	4a0a      	ldr	r2, [pc, #40]	@ (8019820 <HAL_HCD_MspInit+0xa4>)
 80197f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80197fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80197fc:	4b08      	ldr	r3, [pc, #32]	@ (8019820 <HAL_HCD_MspInit+0xa4>)
 80197fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019804:	60bb      	str	r3, [r7, #8]
 8019806:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019808:	2200      	movs	r2, #0
 801980a:	2105      	movs	r1, #5
 801980c:	2043      	movs	r0, #67	@ 0x43
 801980e:	f7eb ffdf 	bl	80057d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019812:	2043      	movs	r0, #67	@ 0x43
 8019814:	f7eb fff8 	bl	8005808 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019818:	bf00      	nop
 801981a:	3728      	adds	r7, #40	@ 0x28
 801981c:	46bd      	mov	sp, r7
 801981e:	bd80      	pop	{r7, pc}
 8019820:	40023800 	.word	0x40023800
 8019824:	40020000 	.word	0x40020000

08019828 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b082      	sub	sp, #8
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8019836:	4618      	mov	r0, r3
 8019838:	f7f9 fad1 	bl	8012dde <USBH_LL_IncTimer>
}
 801983c:	bf00      	nop
 801983e:	3708      	adds	r7, #8
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}

08019844 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b082      	sub	sp, #8
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8019852:	4618      	mov	r0, r3
 8019854:	f7f9 fb11 	bl	8012e7a <USBH_LL_Connect>
}
 8019858:	bf00      	nop
 801985a:	3708      	adds	r7, #8
 801985c:	46bd      	mov	sp, r7
 801985e:	bd80      	pop	{r7, pc}

08019860 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b082      	sub	sp, #8
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801986e:	4618      	mov	r0, r3
 8019870:	f7f9 fb1e 	bl	8012eb0 <USBH_LL_Disconnect>
}
 8019874:	bf00      	nop
 8019876:	3708      	adds	r7, #8
 8019878:	46bd      	mov	sp, r7
 801987a:	bd80      	pop	{r7, pc}

0801987c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b082      	sub	sp, #8
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
 8019884:	460b      	mov	r3, r1
 8019886:	70fb      	strb	r3, [r7, #3]
 8019888:	4613      	mov	r3, r2
 801988a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8019892:	4618      	mov	r0, r3
 8019894:	f7f9 fb72 	bl	8012f7c <USBH_LL_NotifyURBChange>
#endif
}
 8019898:	bf00      	nop
 801989a:	3708      	adds	r7, #8
 801989c:	46bd      	mov	sp, r7
 801989e:	bd80      	pop	{r7, pc}

080198a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b082      	sub	sp, #8
 80198a4:	af00      	add	r7, sp, #0
 80198a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80198ae:	4618      	mov	r0, r3
 80198b0:	f7f9 fabf 	bl	8012e32 <USBH_LL_PortEnabled>
}
 80198b4:	bf00      	nop
 80198b6:	3708      	adds	r7, #8
 80198b8:	46bd      	mov	sp, r7
 80198ba:	bd80      	pop	{r7, pc}

080198bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80198bc:	b580      	push	{r7, lr}
 80198be:	b082      	sub	sp, #8
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80198ca:	4618      	mov	r0, r3
 80198cc:	f7f9 fac3 	bl	8012e56 <USBH_LL_PortDisabled>
}
 80198d0:	bf00      	nop
 80198d2:	3708      	adds	r7, #8
 80198d4:	46bd      	mov	sp, r7
 80198d6:	bd80      	pop	{r7, pc}

080198d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80198d8:	b580      	push	{r7, lr}
 80198da:	b082      	sub	sp, #8
 80198dc:	af00      	add	r7, sp, #0
 80198de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80198e6:	2b01      	cmp	r3, #1
 80198e8:	d12a      	bne.n	8019940 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80198ea:	4a18      	ldr	r2, [pc, #96]	@ (801994c <USBH_LL_Init+0x74>)
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	4a15      	ldr	r2, [pc, #84]	@ (801994c <USBH_LL_Init+0x74>)
 80198f6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80198fa:	4b14      	ldr	r3, [pc, #80]	@ (801994c <USBH_LL_Init+0x74>)
 80198fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8019900:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8019902:	4b12      	ldr	r3, [pc, #72]	@ (801994c <USBH_LL_Init+0x74>)
 8019904:	2208      	movs	r2, #8
 8019906:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8019908:	4b10      	ldr	r3, [pc, #64]	@ (801994c <USBH_LL_Init+0x74>)
 801990a:	2201      	movs	r2, #1
 801990c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801990e:	4b0f      	ldr	r3, [pc, #60]	@ (801994c <USBH_LL_Init+0x74>)
 8019910:	2200      	movs	r2, #0
 8019912:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8019914:	4b0d      	ldr	r3, [pc, #52]	@ (801994c <USBH_LL_Init+0x74>)
 8019916:	2202      	movs	r2, #2
 8019918:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801991a:	4b0c      	ldr	r3, [pc, #48]	@ (801994c <USBH_LL_Init+0x74>)
 801991c:	2200      	movs	r2, #0
 801991e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8019920:	480a      	ldr	r0, [pc, #40]	@ (801994c <USBH_LL_Init+0x74>)
 8019922:	f7ed fc5e 	bl	80071e2 <HAL_HCD_Init>
 8019926:	4603      	mov	r3, r0
 8019928:	2b00      	cmp	r3, #0
 801992a:	d001      	beq.n	8019930 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801992c:	f7e9 fbac 	bl	8003088 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8019930:	4806      	ldr	r0, [pc, #24]	@ (801994c <USBH_LL_Init+0x74>)
 8019932:	f7ee f8bf 	bl	8007ab4 <HAL_HCD_GetCurrentFrame>
 8019936:	4603      	mov	r3, r0
 8019938:	4619      	mov	r1, r3
 801993a:	6878      	ldr	r0, [r7, #4]
 801993c:	f7f9 fa40 	bl	8012dc0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8019940:	2300      	movs	r3, #0
}
 8019942:	4618      	mov	r0, r3
 8019944:	3708      	adds	r7, #8
 8019946:	46bd      	mov	sp, r7
 8019948:	bd80      	pop	{r7, pc}
 801994a:	bf00      	nop
 801994c:	20009d88 	.word	0x20009d88

08019950 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b084      	sub	sp, #16
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019958:	2300      	movs	r3, #0
 801995a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801995c:	2300      	movs	r3, #0
 801995e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019966:	4618      	mov	r0, r3
 8019968:	f7ee f82c 	bl	80079c4 <HAL_HCD_Start>
 801996c:	4603      	mov	r3, r0
 801996e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019970:	7bfb      	ldrb	r3, [r7, #15]
 8019972:	4618      	mov	r0, r3
 8019974:	f000 f95e 	bl	8019c34 <USBH_Get_USB_Status>
 8019978:	4603      	mov	r3, r0
 801997a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801997c:	7bbb      	ldrb	r3, [r7, #14]
}
 801997e:	4618      	mov	r0, r3
 8019980:	3710      	adds	r7, #16
 8019982:	46bd      	mov	sp, r7
 8019984:	bd80      	pop	{r7, pc}

08019986 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8019986:	b580      	push	{r7, lr}
 8019988:	b084      	sub	sp, #16
 801998a:	af00      	add	r7, sp, #0
 801998c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801998e:	2300      	movs	r3, #0
 8019990:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019992:	2300      	movs	r3, #0
 8019994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801999c:	4618      	mov	r0, r3
 801999e:	f7ee f834 	bl	8007a0a <HAL_HCD_Stop>
 80199a2:	4603      	mov	r3, r0
 80199a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80199a6:	7bfb      	ldrb	r3, [r7, #15]
 80199a8:	4618      	mov	r0, r3
 80199aa:	f000 f943 	bl	8019c34 <USBH_Get_USB_Status>
 80199ae:	4603      	mov	r3, r0
 80199b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80199b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80199b4:	4618      	mov	r0, r3
 80199b6:	3710      	adds	r7, #16
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd80      	pop	{r7, pc}

080199bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b084      	sub	sp, #16
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80199c4:	2301      	movs	r3, #1
 80199c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80199ce:	4618      	mov	r0, r3
 80199d0:	f7ee f87e 	bl	8007ad0 <HAL_HCD_GetCurrentSpeed>
 80199d4:	4603      	mov	r3, r0
 80199d6:	2b02      	cmp	r3, #2
 80199d8:	d00c      	beq.n	80199f4 <USBH_LL_GetSpeed+0x38>
 80199da:	2b02      	cmp	r3, #2
 80199dc:	d80d      	bhi.n	80199fa <USBH_LL_GetSpeed+0x3e>
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d002      	beq.n	80199e8 <USBH_LL_GetSpeed+0x2c>
 80199e2:	2b01      	cmp	r3, #1
 80199e4:	d003      	beq.n	80199ee <USBH_LL_GetSpeed+0x32>
 80199e6:	e008      	b.n	80199fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80199e8:	2300      	movs	r3, #0
 80199ea:	73fb      	strb	r3, [r7, #15]
    break;
 80199ec:	e008      	b.n	8019a00 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80199ee:	2301      	movs	r3, #1
 80199f0:	73fb      	strb	r3, [r7, #15]
    break;
 80199f2:	e005      	b.n	8019a00 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80199f4:	2302      	movs	r3, #2
 80199f6:	73fb      	strb	r3, [r7, #15]
    break;
 80199f8:	e002      	b.n	8019a00 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80199fa:	2301      	movs	r3, #1
 80199fc:	73fb      	strb	r3, [r7, #15]
    break;
 80199fe:	bf00      	nop
  }
  return  speed;
 8019a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a02:	4618      	mov	r0, r3
 8019a04:	3710      	adds	r7, #16
 8019a06:	46bd      	mov	sp, r7
 8019a08:	bd80      	pop	{r7, pc}

08019a0a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8019a0a:	b580      	push	{r7, lr}
 8019a0c:	b084      	sub	sp, #16
 8019a0e:	af00      	add	r7, sp, #0
 8019a10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a12:	2300      	movs	r3, #0
 8019a14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019a16:	2300      	movs	r3, #0
 8019a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019a20:	4618      	mov	r0, r3
 8019a22:	f7ee f80f 	bl	8007a44 <HAL_HCD_ResetPort>
 8019a26:	4603      	mov	r3, r0
 8019a28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019a2a:	7bfb      	ldrb	r3, [r7, #15]
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	f000 f901 	bl	8019c34 <USBH_Get_USB_Status>
 8019a32:	4603      	mov	r3, r0
 8019a34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a38:	4618      	mov	r0, r3
 8019a3a:	3710      	adds	r7, #16
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	bd80      	pop	{r7, pc}

08019a40 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b082      	sub	sp, #8
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
 8019a48:	460b      	mov	r3, r1
 8019a4a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019a52:	78fa      	ldrb	r2, [r7, #3]
 8019a54:	4611      	mov	r1, r2
 8019a56:	4618      	mov	r0, r3
 8019a58:	f7ee f817 	bl	8007a8a <HAL_HCD_HC_GetXferCount>
 8019a5c:	4603      	mov	r3, r0
}
 8019a5e:	4618      	mov	r0, r3
 8019a60:	3708      	adds	r7, #8
 8019a62:	46bd      	mov	sp, r7
 8019a64:	bd80      	pop	{r7, pc}

08019a66 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8019a66:	b590      	push	{r4, r7, lr}
 8019a68:	b089      	sub	sp, #36	@ 0x24
 8019a6a:	af04      	add	r7, sp, #16
 8019a6c:	6078      	str	r0, [r7, #4]
 8019a6e:	4608      	mov	r0, r1
 8019a70:	4611      	mov	r1, r2
 8019a72:	461a      	mov	r2, r3
 8019a74:	4603      	mov	r3, r0
 8019a76:	70fb      	strb	r3, [r7, #3]
 8019a78:	460b      	mov	r3, r1
 8019a7a:	70bb      	strb	r3, [r7, #2]
 8019a7c:	4613      	mov	r3, r2
 8019a7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a80:	2300      	movs	r3, #0
 8019a82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019a84:	2300      	movs	r3, #0
 8019a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8019a8e:	787c      	ldrb	r4, [r7, #1]
 8019a90:	78ba      	ldrb	r2, [r7, #2]
 8019a92:	78f9      	ldrb	r1, [r7, #3]
 8019a94:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019a96:	9302      	str	r3, [sp, #8]
 8019a98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019a9c:	9301      	str	r3, [sp, #4]
 8019a9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019aa2:	9300      	str	r3, [sp, #0]
 8019aa4:	4623      	mov	r3, r4
 8019aa6:	f7ed fc03 	bl	80072b0 <HAL_HCD_HC_Init>
 8019aaa:	4603      	mov	r3, r0
 8019aac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019aae:	7bfb      	ldrb	r3, [r7, #15]
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	f000 f8bf 	bl	8019c34 <USBH_Get_USB_Status>
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019aba:	7bbb      	ldrb	r3, [r7, #14]
}
 8019abc:	4618      	mov	r0, r3
 8019abe:	3714      	adds	r7, #20
 8019ac0:	46bd      	mov	sp, r7
 8019ac2:	bd90      	pop	{r4, r7, pc}

08019ac4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019ac4:	b580      	push	{r7, lr}
 8019ac6:	b084      	sub	sp, #16
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	6078      	str	r0, [r7, #4]
 8019acc:	460b      	mov	r3, r1
 8019ace:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019ade:	78fa      	ldrb	r2, [r7, #3]
 8019ae0:	4611      	mov	r1, r2
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	f7ed fc9c 	bl	8007420 <HAL_HCD_HC_Halt>
 8019ae8:	4603      	mov	r3, r0
 8019aea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019aec:	7bfb      	ldrb	r3, [r7, #15]
 8019aee:	4618      	mov	r0, r3
 8019af0:	f000 f8a0 	bl	8019c34 <USBH_Get_USB_Status>
 8019af4:	4603      	mov	r3, r0
 8019af6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8019afa:	4618      	mov	r0, r3
 8019afc:	3710      	adds	r7, #16
 8019afe:	46bd      	mov	sp, r7
 8019b00:	bd80      	pop	{r7, pc}

08019b02 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019b02:	b590      	push	{r4, r7, lr}
 8019b04:	b089      	sub	sp, #36	@ 0x24
 8019b06:	af04      	add	r7, sp, #16
 8019b08:	6078      	str	r0, [r7, #4]
 8019b0a:	4608      	mov	r0, r1
 8019b0c:	4611      	mov	r1, r2
 8019b0e:	461a      	mov	r2, r3
 8019b10:	4603      	mov	r3, r0
 8019b12:	70fb      	strb	r3, [r7, #3]
 8019b14:	460b      	mov	r3, r1
 8019b16:	70bb      	strb	r3, [r7, #2]
 8019b18:	4613      	mov	r3, r2
 8019b1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019b20:	2300      	movs	r3, #0
 8019b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8019b2a:	787c      	ldrb	r4, [r7, #1]
 8019b2c:	78ba      	ldrb	r2, [r7, #2]
 8019b2e:	78f9      	ldrb	r1, [r7, #3]
 8019b30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019b34:	9303      	str	r3, [sp, #12]
 8019b36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019b38:	9302      	str	r3, [sp, #8]
 8019b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b3c:	9301      	str	r3, [sp, #4]
 8019b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019b42:	9300      	str	r3, [sp, #0]
 8019b44:	4623      	mov	r3, r4
 8019b46:	f7ed fc8f 	bl	8007468 <HAL_HCD_HC_SubmitRequest>
 8019b4a:	4603      	mov	r3, r0
 8019b4c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8019b4e:	7bfb      	ldrb	r3, [r7, #15]
 8019b50:	4618      	mov	r0, r3
 8019b52:	f000 f86f 	bl	8019c34 <USBH_Get_USB_Status>
 8019b56:	4603      	mov	r3, r0
 8019b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	3714      	adds	r7, #20
 8019b60:	46bd      	mov	sp, r7
 8019b62:	bd90      	pop	{r4, r7, pc}

08019b64 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b082      	sub	sp, #8
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
 8019b6c:	460b      	mov	r3, r1
 8019b6e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019b76:	78fa      	ldrb	r2, [r7, #3]
 8019b78:	4611      	mov	r1, r2
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	f7ed ff70 	bl	8007a60 <HAL_HCD_HC_GetURBState>
 8019b80:	4603      	mov	r3, r0
}
 8019b82:	4618      	mov	r0, r3
 8019b84:	3708      	adds	r7, #8
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}

08019b8a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8019b8a:	b580      	push	{r7, lr}
 8019b8c:	b082      	sub	sp, #8
 8019b8e:	af00      	add	r7, sp, #0
 8019b90:	6078      	str	r0, [r7, #4]
 8019b92:	460b      	mov	r3, r1
 8019b94:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8019b9c:	2b01      	cmp	r3, #1
 8019b9e:	d103      	bne.n	8019ba8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8019ba0:	78fb      	ldrb	r3, [r7, #3]
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	f000 f872 	bl	8019c8c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8019ba8:	20c8      	movs	r0, #200	@ 0xc8
 8019baa:	f7eb fa9d 	bl	80050e8 <HAL_Delay>
  return USBH_OK;
 8019bae:	2300      	movs	r3, #0
}
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	3708      	adds	r7, #8
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	bd80      	pop	{r7, pc}

08019bb8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8019bb8:	b480      	push	{r7}
 8019bba:	b085      	sub	sp, #20
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
 8019bc0:	460b      	mov	r3, r1
 8019bc2:	70fb      	strb	r3, [r7, #3]
 8019bc4:	4613      	mov	r3, r2
 8019bc6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019bce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019bd0:	78fa      	ldrb	r2, [r7, #3]
 8019bd2:	68f9      	ldr	r1, [r7, #12]
 8019bd4:	4613      	mov	r3, r2
 8019bd6:	011b      	lsls	r3, r3, #4
 8019bd8:	1a9b      	subs	r3, r3, r2
 8019bda:	009b      	lsls	r3, r3, #2
 8019bdc:	440b      	add	r3, r1
 8019bde:	3317      	adds	r3, #23
 8019be0:	781b      	ldrb	r3, [r3, #0]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d00a      	beq.n	8019bfc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019be6:	78fa      	ldrb	r2, [r7, #3]
 8019be8:	68f9      	ldr	r1, [r7, #12]
 8019bea:	4613      	mov	r3, r2
 8019bec:	011b      	lsls	r3, r3, #4
 8019bee:	1a9b      	subs	r3, r3, r2
 8019bf0:	009b      	lsls	r3, r3, #2
 8019bf2:	440b      	add	r3, r1
 8019bf4:	333c      	adds	r3, #60	@ 0x3c
 8019bf6:	78ba      	ldrb	r2, [r7, #2]
 8019bf8:	701a      	strb	r2, [r3, #0]
 8019bfa:	e009      	b.n	8019c10 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8019bfc:	78fa      	ldrb	r2, [r7, #3]
 8019bfe:	68f9      	ldr	r1, [r7, #12]
 8019c00:	4613      	mov	r3, r2
 8019c02:	011b      	lsls	r3, r3, #4
 8019c04:	1a9b      	subs	r3, r3, r2
 8019c06:	009b      	lsls	r3, r3, #2
 8019c08:	440b      	add	r3, r1
 8019c0a:	333d      	adds	r3, #61	@ 0x3d
 8019c0c:	78ba      	ldrb	r2, [r7, #2]
 8019c0e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8019c10:	2300      	movs	r3, #0
}
 8019c12:	4618      	mov	r0, r3
 8019c14:	3714      	adds	r7, #20
 8019c16:	46bd      	mov	sp, r7
 8019c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c1c:	4770      	bx	lr

08019c1e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8019c1e:	b580      	push	{r7, lr}
 8019c20:	b082      	sub	sp, #8
 8019c22:	af00      	add	r7, sp, #0
 8019c24:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8019c26:	6878      	ldr	r0, [r7, #4]
 8019c28:	f7eb fa5e 	bl	80050e8 <HAL_Delay>
}
 8019c2c:	bf00      	nop
 8019c2e:	3708      	adds	r7, #8
 8019c30:	46bd      	mov	sp, r7
 8019c32:	bd80      	pop	{r7, pc}

08019c34 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019c34:	b480      	push	{r7}
 8019c36:	b085      	sub	sp, #20
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019c3e:	2300      	movs	r3, #0
 8019c40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019c42:	79fb      	ldrb	r3, [r7, #7]
 8019c44:	2b03      	cmp	r3, #3
 8019c46:	d817      	bhi.n	8019c78 <USBH_Get_USB_Status+0x44>
 8019c48:	a201      	add	r2, pc, #4	@ (adr r2, 8019c50 <USBH_Get_USB_Status+0x1c>)
 8019c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c4e:	bf00      	nop
 8019c50:	08019c61 	.word	0x08019c61
 8019c54:	08019c67 	.word	0x08019c67
 8019c58:	08019c6d 	.word	0x08019c6d
 8019c5c:	08019c73 	.word	0x08019c73
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019c60:	2300      	movs	r3, #0
 8019c62:	73fb      	strb	r3, [r7, #15]
    break;
 8019c64:	e00b      	b.n	8019c7e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8019c66:	2302      	movs	r3, #2
 8019c68:	73fb      	strb	r3, [r7, #15]
    break;
 8019c6a:	e008      	b.n	8019c7e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8019c6c:	2301      	movs	r3, #1
 8019c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8019c70:	e005      	b.n	8019c7e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019c72:	2302      	movs	r3, #2
 8019c74:	73fb      	strb	r3, [r7, #15]
    break;
 8019c76:	e002      	b.n	8019c7e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019c78:	2302      	movs	r3, #2
 8019c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8019c7c:	bf00      	nop
  }
  return usb_status;
 8019c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c80:	4618      	mov	r0, r3
 8019c82:	3714      	adds	r7, #20
 8019c84:	46bd      	mov	sp, r7
 8019c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8a:	4770      	bx	lr

08019c8c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b084      	sub	sp, #16
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	4603      	mov	r3, r0
 8019c94:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8019c96:	79fb      	ldrb	r3, [r7, #7]
 8019c98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8019c9a:	79fb      	ldrb	r3, [r7, #7]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d102      	bne.n	8019ca6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	73fb      	strb	r3, [r7, #15]
 8019ca4:	e001      	b.n	8019caa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8019ca6:	2301      	movs	r3, #1
 8019ca8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8019caa:	7bfb      	ldrb	r3, [r7, #15]
 8019cac:	461a      	mov	r2, r3
 8019cae:	2120      	movs	r1, #32
 8019cb0:	4803      	ldr	r0, [pc, #12]	@ (8019cc0 <MX_DriverVbusFS+0x34>)
 8019cb2:	f7ed fa7d 	bl	80071b0 <HAL_GPIO_WritePin>
}
 8019cb6:	bf00      	nop
 8019cb8:	3710      	adds	r7, #16
 8019cba:	46bd      	mov	sp, r7
 8019cbc:	bd80      	pop	{r7, pc}
 8019cbe:	bf00      	nop
 8019cc0:	40020c00 	.word	0x40020c00

08019cc4 <malloc>:
 8019cc4:	4b02      	ldr	r3, [pc, #8]	@ (8019cd0 <malloc+0xc>)
 8019cc6:	4601      	mov	r1, r0
 8019cc8:	6818      	ldr	r0, [r3, #0]
 8019cca:	f000 b82d 	b.w	8019d28 <_malloc_r>
 8019cce:	bf00      	nop
 8019cd0:	20000090 	.word	0x20000090

08019cd4 <free>:
 8019cd4:	4b02      	ldr	r3, [pc, #8]	@ (8019ce0 <free+0xc>)
 8019cd6:	4601      	mov	r1, r0
 8019cd8:	6818      	ldr	r0, [r3, #0]
 8019cda:	f000 b9c1 	b.w	801a060 <_free_r>
 8019cde:	bf00      	nop
 8019ce0:	20000090 	.word	0x20000090

08019ce4 <sbrk_aligned>:
 8019ce4:	b570      	push	{r4, r5, r6, lr}
 8019ce6:	4e0f      	ldr	r6, [pc, #60]	@ (8019d24 <sbrk_aligned+0x40>)
 8019ce8:	460c      	mov	r4, r1
 8019cea:	6831      	ldr	r1, [r6, #0]
 8019cec:	4605      	mov	r5, r0
 8019cee:	b911      	cbnz	r1, 8019cf6 <sbrk_aligned+0x12>
 8019cf0:	f000 f96c 	bl	8019fcc <_sbrk_r>
 8019cf4:	6030      	str	r0, [r6, #0]
 8019cf6:	4621      	mov	r1, r4
 8019cf8:	4628      	mov	r0, r5
 8019cfa:	f000 f967 	bl	8019fcc <_sbrk_r>
 8019cfe:	1c43      	adds	r3, r0, #1
 8019d00:	d103      	bne.n	8019d0a <sbrk_aligned+0x26>
 8019d02:	f04f 34ff 	mov.w	r4, #4294967295
 8019d06:	4620      	mov	r0, r4
 8019d08:	bd70      	pop	{r4, r5, r6, pc}
 8019d0a:	1cc4      	adds	r4, r0, #3
 8019d0c:	f024 0403 	bic.w	r4, r4, #3
 8019d10:	42a0      	cmp	r0, r4
 8019d12:	d0f8      	beq.n	8019d06 <sbrk_aligned+0x22>
 8019d14:	1a21      	subs	r1, r4, r0
 8019d16:	4628      	mov	r0, r5
 8019d18:	f000 f958 	bl	8019fcc <_sbrk_r>
 8019d1c:	3001      	adds	r0, #1
 8019d1e:	d1f2      	bne.n	8019d06 <sbrk_aligned+0x22>
 8019d20:	e7ef      	b.n	8019d02 <sbrk_aligned+0x1e>
 8019d22:	bf00      	nop
 8019d24:	2000a168 	.word	0x2000a168

08019d28 <_malloc_r>:
 8019d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d2c:	1ccd      	adds	r5, r1, #3
 8019d2e:	f025 0503 	bic.w	r5, r5, #3
 8019d32:	3508      	adds	r5, #8
 8019d34:	2d0c      	cmp	r5, #12
 8019d36:	bf38      	it	cc
 8019d38:	250c      	movcc	r5, #12
 8019d3a:	2d00      	cmp	r5, #0
 8019d3c:	4606      	mov	r6, r0
 8019d3e:	db01      	blt.n	8019d44 <_malloc_r+0x1c>
 8019d40:	42a9      	cmp	r1, r5
 8019d42:	d904      	bls.n	8019d4e <_malloc_r+0x26>
 8019d44:	230c      	movs	r3, #12
 8019d46:	6033      	str	r3, [r6, #0]
 8019d48:	2000      	movs	r0, #0
 8019d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019e24 <_malloc_r+0xfc>
 8019d52:	f000 f869 	bl	8019e28 <__malloc_lock>
 8019d56:	f8d8 3000 	ldr.w	r3, [r8]
 8019d5a:	461c      	mov	r4, r3
 8019d5c:	bb44      	cbnz	r4, 8019db0 <_malloc_r+0x88>
 8019d5e:	4629      	mov	r1, r5
 8019d60:	4630      	mov	r0, r6
 8019d62:	f7ff ffbf 	bl	8019ce4 <sbrk_aligned>
 8019d66:	1c43      	adds	r3, r0, #1
 8019d68:	4604      	mov	r4, r0
 8019d6a:	d158      	bne.n	8019e1e <_malloc_r+0xf6>
 8019d6c:	f8d8 4000 	ldr.w	r4, [r8]
 8019d70:	4627      	mov	r7, r4
 8019d72:	2f00      	cmp	r7, #0
 8019d74:	d143      	bne.n	8019dfe <_malloc_r+0xd6>
 8019d76:	2c00      	cmp	r4, #0
 8019d78:	d04b      	beq.n	8019e12 <_malloc_r+0xea>
 8019d7a:	6823      	ldr	r3, [r4, #0]
 8019d7c:	4639      	mov	r1, r7
 8019d7e:	4630      	mov	r0, r6
 8019d80:	eb04 0903 	add.w	r9, r4, r3
 8019d84:	f000 f922 	bl	8019fcc <_sbrk_r>
 8019d88:	4581      	cmp	r9, r0
 8019d8a:	d142      	bne.n	8019e12 <_malloc_r+0xea>
 8019d8c:	6821      	ldr	r1, [r4, #0]
 8019d8e:	1a6d      	subs	r5, r5, r1
 8019d90:	4629      	mov	r1, r5
 8019d92:	4630      	mov	r0, r6
 8019d94:	f7ff ffa6 	bl	8019ce4 <sbrk_aligned>
 8019d98:	3001      	adds	r0, #1
 8019d9a:	d03a      	beq.n	8019e12 <_malloc_r+0xea>
 8019d9c:	6823      	ldr	r3, [r4, #0]
 8019d9e:	442b      	add	r3, r5
 8019da0:	6023      	str	r3, [r4, #0]
 8019da2:	f8d8 3000 	ldr.w	r3, [r8]
 8019da6:	685a      	ldr	r2, [r3, #4]
 8019da8:	bb62      	cbnz	r2, 8019e04 <_malloc_r+0xdc>
 8019daa:	f8c8 7000 	str.w	r7, [r8]
 8019dae:	e00f      	b.n	8019dd0 <_malloc_r+0xa8>
 8019db0:	6822      	ldr	r2, [r4, #0]
 8019db2:	1b52      	subs	r2, r2, r5
 8019db4:	d420      	bmi.n	8019df8 <_malloc_r+0xd0>
 8019db6:	2a0b      	cmp	r2, #11
 8019db8:	d917      	bls.n	8019dea <_malloc_r+0xc2>
 8019dba:	1961      	adds	r1, r4, r5
 8019dbc:	42a3      	cmp	r3, r4
 8019dbe:	6025      	str	r5, [r4, #0]
 8019dc0:	bf18      	it	ne
 8019dc2:	6059      	strne	r1, [r3, #4]
 8019dc4:	6863      	ldr	r3, [r4, #4]
 8019dc6:	bf08      	it	eq
 8019dc8:	f8c8 1000 	streq.w	r1, [r8]
 8019dcc:	5162      	str	r2, [r4, r5]
 8019dce:	604b      	str	r3, [r1, #4]
 8019dd0:	4630      	mov	r0, r6
 8019dd2:	f000 f82f 	bl	8019e34 <__malloc_unlock>
 8019dd6:	f104 000b 	add.w	r0, r4, #11
 8019dda:	1d23      	adds	r3, r4, #4
 8019ddc:	f020 0007 	bic.w	r0, r0, #7
 8019de0:	1ac2      	subs	r2, r0, r3
 8019de2:	bf1c      	itt	ne
 8019de4:	1a1b      	subne	r3, r3, r0
 8019de6:	50a3      	strne	r3, [r4, r2]
 8019de8:	e7af      	b.n	8019d4a <_malloc_r+0x22>
 8019dea:	6862      	ldr	r2, [r4, #4]
 8019dec:	42a3      	cmp	r3, r4
 8019dee:	bf0c      	ite	eq
 8019df0:	f8c8 2000 	streq.w	r2, [r8]
 8019df4:	605a      	strne	r2, [r3, #4]
 8019df6:	e7eb      	b.n	8019dd0 <_malloc_r+0xa8>
 8019df8:	4623      	mov	r3, r4
 8019dfa:	6864      	ldr	r4, [r4, #4]
 8019dfc:	e7ae      	b.n	8019d5c <_malloc_r+0x34>
 8019dfe:	463c      	mov	r4, r7
 8019e00:	687f      	ldr	r7, [r7, #4]
 8019e02:	e7b6      	b.n	8019d72 <_malloc_r+0x4a>
 8019e04:	461a      	mov	r2, r3
 8019e06:	685b      	ldr	r3, [r3, #4]
 8019e08:	42a3      	cmp	r3, r4
 8019e0a:	d1fb      	bne.n	8019e04 <_malloc_r+0xdc>
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	6053      	str	r3, [r2, #4]
 8019e10:	e7de      	b.n	8019dd0 <_malloc_r+0xa8>
 8019e12:	230c      	movs	r3, #12
 8019e14:	6033      	str	r3, [r6, #0]
 8019e16:	4630      	mov	r0, r6
 8019e18:	f000 f80c 	bl	8019e34 <__malloc_unlock>
 8019e1c:	e794      	b.n	8019d48 <_malloc_r+0x20>
 8019e1e:	6005      	str	r5, [r0, #0]
 8019e20:	e7d6      	b.n	8019dd0 <_malloc_r+0xa8>
 8019e22:	bf00      	nop
 8019e24:	2000a16c 	.word	0x2000a16c

08019e28 <__malloc_lock>:
 8019e28:	4801      	ldr	r0, [pc, #4]	@ (8019e30 <__malloc_lock+0x8>)
 8019e2a:	f000 b909 	b.w	801a040 <__retarget_lock_acquire_recursive>
 8019e2e:	bf00      	nop
 8019e30:	2000a2ac 	.word	0x2000a2ac

08019e34 <__malloc_unlock>:
 8019e34:	4801      	ldr	r0, [pc, #4]	@ (8019e3c <__malloc_unlock+0x8>)
 8019e36:	f000 b904 	b.w	801a042 <__retarget_lock_release_recursive>
 8019e3a:	bf00      	nop
 8019e3c:	2000a2ac 	.word	0x2000a2ac

08019e40 <sniprintf>:
 8019e40:	b40c      	push	{r2, r3}
 8019e42:	b530      	push	{r4, r5, lr}
 8019e44:	4b18      	ldr	r3, [pc, #96]	@ (8019ea8 <sniprintf+0x68>)
 8019e46:	1e0c      	subs	r4, r1, #0
 8019e48:	681d      	ldr	r5, [r3, #0]
 8019e4a:	b09d      	sub	sp, #116	@ 0x74
 8019e4c:	da08      	bge.n	8019e60 <sniprintf+0x20>
 8019e4e:	238b      	movs	r3, #139	@ 0x8b
 8019e50:	602b      	str	r3, [r5, #0]
 8019e52:	f04f 30ff 	mov.w	r0, #4294967295
 8019e56:	b01d      	add	sp, #116	@ 0x74
 8019e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e5c:	b002      	add	sp, #8
 8019e5e:	4770      	bx	lr
 8019e60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019e64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019e68:	f04f 0300 	mov.w	r3, #0
 8019e6c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019e6e:	bf14      	ite	ne
 8019e70:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019e74:	4623      	moveq	r3, r4
 8019e76:	9304      	str	r3, [sp, #16]
 8019e78:	9307      	str	r3, [sp, #28]
 8019e7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019e7e:	9002      	str	r0, [sp, #8]
 8019e80:	9006      	str	r0, [sp, #24]
 8019e82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019e86:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019e88:	ab21      	add	r3, sp, #132	@ 0x84
 8019e8a:	a902      	add	r1, sp, #8
 8019e8c:	4628      	mov	r0, r5
 8019e8e:	9301      	str	r3, [sp, #4]
 8019e90:	f000 f98c 	bl	801a1ac <_svfiprintf_r>
 8019e94:	1c43      	adds	r3, r0, #1
 8019e96:	bfbc      	itt	lt
 8019e98:	238b      	movlt	r3, #139	@ 0x8b
 8019e9a:	602b      	strlt	r3, [r5, #0]
 8019e9c:	2c00      	cmp	r4, #0
 8019e9e:	d0da      	beq.n	8019e56 <sniprintf+0x16>
 8019ea0:	9b02      	ldr	r3, [sp, #8]
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	701a      	strb	r2, [r3, #0]
 8019ea6:	e7d6      	b.n	8019e56 <sniprintf+0x16>
 8019ea8:	20000090 	.word	0x20000090

08019eac <siprintf>:
 8019eac:	b40e      	push	{r1, r2, r3}
 8019eae:	b510      	push	{r4, lr}
 8019eb0:	b09d      	sub	sp, #116	@ 0x74
 8019eb2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019eb4:	9002      	str	r0, [sp, #8]
 8019eb6:	9006      	str	r0, [sp, #24]
 8019eb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019ebc:	480a      	ldr	r0, [pc, #40]	@ (8019ee8 <siprintf+0x3c>)
 8019ebe:	9107      	str	r1, [sp, #28]
 8019ec0:	9104      	str	r1, [sp, #16]
 8019ec2:	490a      	ldr	r1, [pc, #40]	@ (8019eec <siprintf+0x40>)
 8019ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ec8:	9105      	str	r1, [sp, #20]
 8019eca:	2400      	movs	r4, #0
 8019ecc:	a902      	add	r1, sp, #8
 8019ece:	6800      	ldr	r0, [r0, #0]
 8019ed0:	9301      	str	r3, [sp, #4]
 8019ed2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8019ed4:	f000 f96a 	bl	801a1ac <_svfiprintf_r>
 8019ed8:	9b02      	ldr	r3, [sp, #8]
 8019eda:	701c      	strb	r4, [r3, #0]
 8019edc:	b01d      	add	sp, #116	@ 0x74
 8019ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ee2:	b003      	add	sp, #12
 8019ee4:	4770      	bx	lr
 8019ee6:	bf00      	nop
 8019ee8:	20000090 	.word	0x20000090
 8019eec:	ffff0208 	.word	0xffff0208

08019ef0 <_vsniprintf_r>:
 8019ef0:	b530      	push	{r4, r5, lr}
 8019ef2:	4614      	mov	r4, r2
 8019ef4:	2c00      	cmp	r4, #0
 8019ef6:	b09b      	sub	sp, #108	@ 0x6c
 8019ef8:	4605      	mov	r5, r0
 8019efa:	461a      	mov	r2, r3
 8019efc:	da05      	bge.n	8019f0a <_vsniprintf_r+0x1a>
 8019efe:	238b      	movs	r3, #139	@ 0x8b
 8019f00:	6003      	str	r3, [r0, #0]
 8019f02:	f04f 30ff 	mov.w	r0, #4294967295
 8019f06:	b01b      	add	sp, #108	@ 0x6c
 8019f08:	bd30      	pop	{r4, r5, pc}
 8019f0a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019f0e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019f12:	f04f 0300 	mov.w	r3, #0
 8019f16:	9319      	str	r3, [sp, #100]	@ 0x64
 8019f18:	bf14      	ite	ne
 8019f1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019f1e:	4623      	moveq	r3, r4
 8019f20:	9302      	str	r3, [sp, #8]
 8019f22:	9305      	str	r3, [sp, #20]
 8019f24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019f28:	9100      	str	r1, [sp, #0]
 8019f2a:	9104      	str	r1, [sp, #16]
 8019f2c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019f30:	4669      	mov	r1, sp
 8019f32:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019f34:	f000 f93a 	bl	801a1ac <_svfiprintf_r>
 8019f38:	1c43      	adds	r3, r0, #1
 8019f3a:	bfbc      	itt	lt
 8019f3c:	238b      	movlt	r3, #139	@ 0x8b
 8019f3e:	602b      	strlt	r3, [r5, #0]
 8019f40:	2c00      	cmp	r4, #0
 8019f42:	d0e0      	beq.n	8019f06 <_vsniprintf_r+0x16>
 8019f44:	9b00      	ldr	r3, [sp, #0]
 8019f46:	2200      	movs	r2, #0
 8019f48:	701a      	strb	r2, [r3, #0]
 8019f4a:	e7dc      	b.n	8019f06 <_vsniprintf_r+0x16>

08019f4c <vsniprintf>:
 8019f4c:	b507      	push	{r0, r1, r2, lr}
 8019f4e:	9300      	str	r3, [sp, #0]
 8019f50:	4613      	mov	r3, r2
 8019f52:	460a      	mov	r2, r1
 8019f54:	4601      	mov	r1, r0
 8019f56:	4803      	ldr	r0, [pc, #12]	@ (8019f64 <vsniprintf+0x18>)
 8019f58:	6800      	ldr	r0, [r0, #0]
 8019f5a:	f7ff ffc9 	bl	8019ef0 <_vsniprintf_r>
 8019f5e:	b003      	add	sp, #12
 8019f60:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f64:	20000090 	.word	0x20000090

08019f68 <memset>:
 8019f68:	4402      	add	r2, r0
 8019f6a:	4603      	mov	r3, r0
 8019f6c:	4293      	cmp	r3, r2
 8019f6e:	d100      	bne.n	8019f72 <memset+0xa>
 8019f70:	4770      	bx	lr
 8019f72:	f803 1b01 	strb.w	r1, [r3], #1
 8019f76:	e7f9      	b.n	8019f6c <memset+0x4>

08019f78 <strncpy>:
 8019f78:	b510      	push	{r4, lr}
 8019f7a:	3901      	subs	r1, #1
 8019f7c:	4603      	mov	r3, r0
 8019f7e:	b132      	cbz	r2, 8019f8e <strncpy+0x16>
 8019f80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019f84:	f803 4b01 	strb.w	r4, [r3], #1
 8019f88:	3a01      	subs	r2, #1
 8019f8a:	2c00      	cmp	r4, #0
 8019f8c:	d1f7      	bne.n	8019f7e <strncpy+0x6>
 8019f8e:	441a      	add	r2, r3
 8019f90:	2100      	movs	r1, #0
 8019f92:	4293      	cmp	r3, r2
 8019f94:	d100      	bne.n	8019f98 <strncpy+0x20>
 8019f96:	bd10      	pop	{r4, pc}
 8019f98:	f803 1b01 	strb.w	r1, [r3], #1
 8019f9c:	e7f9      	b.n	8019f92 <strncpy+0x1a>

08019f9e <strstr>:
 8019f9e:	780a      	ldrb	r2, [r1, #0]
 8019fa0:	b570      	push	{r4, r5, r6, lr}
 8019fa2:	b96a      	cbnz	r2, 8019fc0 <strstr+0x22>
 8019fa4:	bd70      	pop	{r4, r5, r6, pc}
 8019fa6:	429a      	cmp	r2, r3
 8019fa8:	d109      	bne.n	8019fbe <strstr+0x20>
 8019faa:	460c      	mov	r4, r1
 8019fac:	4605      	mov	r5, r0
 8019fae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d0f6      	beq.n	8019fa4 <strstr+0x6>
 8019fb6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019fba:	429e      	cmp	r6, r3
 8019fbc:	d0f7      	beq.n	8019fae <strstr+0x10>
 8019fbe:	3001      	adds	r0, #1
 8019fc0:	7803      	ldrb	r3, [r0, #0]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d1ef      	bne.n	8019fa6 <strstr+0x8>
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	e7ec      	b.n	8019fa4 <strstr+0x6>
	...

08019fcc <_sbrk_r>:
 8019fcc:	b538      	push	{r3, r4, r5, lr}
 8019fce:	4d06      	ldr	r5, [pc, #24]	@ (8019fe8 <_sbrk_r+0x1c>)
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	4604      	mov	r4, r0
 8019fd4:	4608      	mov	r0, r1
 8019fd6:	602b      	str	r3, [r5, #0]
 8019fd8:	f7ea fa38 	bl	800444c <_sbrk>
 8019fdc:	1c43      	adds	r3, r0, #1
 8019fde:	d102      	bne.n	8019fe6 <_sbrk_r+0x1a>
 8019fe0:	682b      	ldr	r3, [r5, #0]
 8019fe2:	b103      	cbz	r3, 8019fe6 <_sbrk_r+0x1a>
 8019fe4:	6023      	str	r3, [r4, #0]
 8019fe6:	bd38      	pop	{r3, r4, r5, pc}
 8019fe8:	2000a2a8 	.word	0x2000a2a8

08019fec <__errno>:
 8019fec:	4b01      	ldr	r3, [pc, #4]	@ (8019ff4 <__errno+0x8>)
 8019fee:	6818      	ldr	r0, [r3, #0]
 8019ff0:	4770      	bx	lr
 8019ff2:	bf00      	nop
 8019ff4:	20000090 	.word	0x20000090

08019ff8 <__libc_init_array>:
 8019ff8:	b570      	push	{r4, r5, r6, lr}
 8019ffa:	4d0d      	ldr	r5, [pc, #52]	@ (801a030 <__libc_init_array+0x38>)
 8019ffc:	4c0d      	ldr	r4, [pc, #52]	@ (801a034 <__libc_init_array+0x3c>)
 8019ffe:	1b64      	subs	r4, r4, r5
 801a000:	10a4      	asrs	r4, r4, #2
 801a002:	2600      	movs	r6, #0
 801a004:	42a6      	cmp	r6, r4
 801a006:	d109      	bne.n	801a01c <__libc_init_array+0x24>
 801a008:	4d0b      	ldr	r5, [pc, #44]	@ (801a038 <__libc_init_array+0x40>)
 801a00a:	4c0c      	ldr	r4, [pc, #48]	@ (801a03c <__libc_init_array+0x44>)
 801a00c:	f000 fba6 	bl	801a75c <_init>
 801a010:	1b64      	subs	r4, r4, r5
 801a012:	10a4      	asrs	r4, r4, #2
 801a014:	2600      	movs	r6, #0
 801a016:	42a6      	cmp	r6, r4
 801a018:	d105      	bne.n	801a026 <__libc_init_array+0x2e>
 801a01a:	bd70      	pop	{r4, r5, r6, pc}
 801a01c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a020:	4798      	blx	r3
 801a022:	3601      	adds	r6, #1
 801a024:	e7ee      	b.n	801a004 <__libc_init_array+0xc>
 801a026:	f855 3b04 	ldr.w	r3, [r5], #4
 801a02a:	4798      	blx	r3
 801a02c:	3601      	adds	r6, #1
 801a02e:	e7f2      	b.n	801a016 <__libc_init_array+0x1e>
 801a030:	0801c794 	.word	0x0801c794
 801a034:	0801c794 	.word	0x0801c794
 801a038:	0801c794 	.word	0x0801c794
 801a03c:	0801c798 	.word	0x0801c798

0801a040 <__retarget_lock_acquire_recursive>:
 801a040:	4770      	bx	lr

0801a042 <__retarget_lock_release_recursive>:
 801a042:	4770      	bx	lr

0801a044 <memcpy>:
 801a044:	440a      	add	r2, r1
 801a046:	4291      	cmp	r1, r2
 801a048:	f100 33ff 	add.w	r3, r0, #4294967295
 801a04c:	d100      	bne.n	801a050 <memcpy+0xc>
 801a04e:	4770      	bx	lr
 801a050:	b510      	push	{r4, lr}
 801a052:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a056:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a05a:	4291      	cmp	r1, r2
 801a05c:	d1f9      	bne.n	801a052 <memcpy+0xe>
 801a05e:	bd10      	pop	{r4, pc}

0801a060 <_free_r>:
 801a060:	b538      	push	{r3, r4, r5, lr}
 801a062:	4605      	mov	r5, r0
 801a064:	2900      	cmp	r1, #0
 801a066:	d041      	beq.n	801a0ec <_free_r+0x8c>
 801a068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a06c:	1f0c      	subs	r4, r1, #4
 801a06e:	2b00      	cmp	r3, #0
 801a070:	bfb8      	it	lt
 801a072:	18e4      	addlt	r4, r4, r3
 801a074:	f7ff fed8 	bl	8019e28 <__malloc_lock>
 801a078:	4a1d      	ldr	r2, [pc, #116]	@ (801a0f0 <_free_r+0x90>)
 801a07a:	6813      	ldr	r3, [r2, #0]
 801a07c:	b933      	cbnz	r3, 801a08c <_free_r+0x2c>
 801a07e:	6063      	str	r3, [r4, #4]
 801a080:	6014      	str	r4, [r2, #0]
 801a082:	4628      	mov	r0, r5
 801a084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a088:	f7ff bed4 	b.w	8019e34 <__malloc_unlock>
 801a08c:	42a3      	cmp	r3, r4
 801a08e:	d908      	bls.n	801a0a2 <_free_r+0x42>
 801a090:	6820      	ldr	r0, [r4, #0]
 801a092:	1821      	adds	r1, r4, r0
 801a094:	428b      	cmp	r3, r1
 801a096:	bf01      	itttt	eq
 801a098:	6819      	ldreq	r1, [r3, #0]
 801a09a:	685b      	ldreq	r3, [r3, #4]
 801a09c:	1809      	addeq	r1, r1, r0
 801a09e:	6021      	streq	r1, [r4, #0]
 801a0a0:	e7ed      	b.n	801a07e <_free_r+0x1e>
 801a0a2:	461a      	mov	r2, r3
 801a0a4:	685b      	ldr	r3, [r3, #4]
 801a0a6:	b10b      	cbz	r3, 801a0ac <_free_r+0x4c>
 801a0a8:	42a3      	cmp	r3, r4
 801a0aa:	d9fa      	bls.n	801a0a2 <_free_r+0x42>
 801a0ac:	6811      	ldr	r1, [r2, #0]
 801a0ae:	1850      	adds	r0, r2, r1
 801a0b0:	42a0      	cmp	r0, r4
 801a0b2:	d10b      	bne.n	801a0cc <_free_r+0x6c>
 801a0b4:	6820      	ldr	r0, [r4, #0]
 801a0b6:	4401      	add	r1, r0
 801a0b8:	1850      	adds	r0, r2, r1
 801a0ba:	4283      	cmp	r3, r0
 801a0bc:	6011      	str	r1, [r2, #0]
 801a0be:	d1e0      	bne.n	801a082 <_free_r+0x22>
 801a0c0:	6818      	ldr	r0, [r3, #0]
 801a0c2:	685b      	ldr	r3, [r3, #4]
 801a0c4:	6053      	str	r3, [r2, #4]
 801a0c6:	4408      	add	r0, r1
 801a0c8:	6010      	str	r0, [r2, #0]
 801a0ca:	e7da      	b.n	801a082 <_free_r+0x22>
 801a0cc:	d902      	bls.n	801a0d4 <_free_r+0x74>
 801a0ce:	230c      	movs	r3, #12
 801a0d0:	602b      	str	r3, [r5, #0]
 801a0d2:	e7d6      	b.n	801a082 <_free_r+0x22>
 801a0d4:	6820      	ldr	r0, [r4, #0]
 801a0d6:	1821      	adds	r1, r4, r0
 801a0d8:	428b      	cmp	r3, r1
 801a0da:	bf04      	itt	eq
 801a0dc:	6819      	ldreq	r1, [r3, #0]
 801a0de:	685b      	ldreq	r3, [r3, #4]
 801a0e0:	6063      	str	r3, [r4, #4]
 801a0e2:	bf04      	itt	eq
 801a0e4:	1809      	addeq	r1, r1, r0
 801a0e6:	6021      	streq	r1, [r4, #0]
 801a0e8:	6054      	str	r4, [r2, #4]
 801a0ea:	e7ca      	b.n	801a082 <_free_r+0x22>
 801a0ec:	bd38      	pop	{r3, r4, r5, pc}
 801a0ee:	bf00      	nop
 801a0f0:	2000a16c 	.word	0x2000a16c

0801a0f4 <__ssputs_r>:
 801a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0f8:	688e      	ldr	r6, [r1, #8]
 801a0fa:	461f      	mov	r7, r3
 801a0fc:	42be      	cmp	r6, r7
 801a0fe:	680b      	ldr	r3, [r1, #0]
 801a100:	4682      	mov	sl, r0
 801a102:	460c      	mov	r4, r1
 801a104:	4690      	mov	r8, r2
 801a106:	d82d      	bhi.n	801a164 <__ssputs_r+0x70>
 801a108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a10c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a110:	d026      	beq.n	801a160 <__ssputs_r+0x6c>
 801a112:	6965      	ldr	r5, [r4, #20]
 801a114:	6909      	ldr	r1, [r1, #16]
 801a116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a11a:	eba3 0901 	sub.w	r9, r3, r1
 801a11e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a122:	1c7b      	adds	r3, r7, #1
 801a124:	444b      	add	r3, r9
 801a126:	106d      	asrs	r5, r5, #1
 801a128:	429d      	cmp	r5, r3
 801a12a:	bf38      	it	cc
 801a12c:	461d      	movcc	r5, r3
 801a12e:	0553      	lsls	r3, r2, #21
 801a130:	d527      	bpl.n	801a182 <__ssputs_r+0x8e>
 801a132:	4629      	mov	r1, r5
 801a134:	f7ff fdf8 	bl	8019d28 <_malloc_r>
 801a138:	4606      	mov	r6, r0
 801a13a:	b360      	cbz	r0, 801a196 <__ssputs_r+0xa2>
 801a13c:	6921      	ldr	r1, [r4, #16]
 801a13e:	464a      	mov	r2, r9
 801a140:	f7ff ff80 	bl	801a044 <memcpy>
 801a144:	89a3      	ldrh	r3, [r4, #12]
 801a146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a14a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a14e:	81a3      	strh	r3, [r4, #12]
 801a150:	6126      	str	r6, [r4, #16]
 801a152:	6165      	str	r5, [r4, #20]
 801a154:	444e      	add	r6, r9
 801a156:	eba5 0509 	sub.w	r5, r5, r9
 801a15a:	6026      	str	r6, [r4, #0]
 801a15c:	60a5      	str	r5, [r4, #8]
 801a15e:	463e      	mov	r6, r7
 801a160:	42be      	cmp	r6, r7
 801a162:	d900      	bls.n	801a166 <__ssputs_r+0x72>
 801a164:	463e      	mov	r6, r7
 801a166:	6820      	ldr	r0, [r4, #0]
 801a168:	4632      	mov	r2, r6
 801a16a:	4641      	mov	r1, r8
 801a16c:	f000 faa6 	bl	801a6bc <memmove>
 801a170:	68a3      	ldr	r3, [r4, #8]
 801a172:	1b9b      	subs	r3, r3, r6
 801a174:	60a3      	str	r3, [r4, #8]
 801a176:	6823      	ldr	r3, [r4, #0]
 801a178:	4433      	add	r3, r6
 801a17a:	6023      	str	r3, [r4, #0]
 801a17c:	2000      	movs	r0, #0
 801a17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a182:	462a      	mov	r2, r5
 801a184:	f000 fab4 	bl	801a6f0 <_realloc_r>
 801a188:	4606      	mov	r6, r0
 801a18a:	2800      	cmp	r0, #0
 801a18c:	d1e0      	bne.n	801a150 <__ssputs_r+0x5c>
 801a18e:	6921      	ldr	r1, [r4, #16]
 801a190:	4650      	mov	r0, sl
 801a192:	f7ff ff65 	bl	801a060 <_free_r>
 801a196:	230c      	movs	r3, #12
 801a198:	f8ca 3000 	str.w	r3, [sl]
 801a19c:	89a3      	ldrh	r3, [r4, #12]
 801a19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a1a2:	81a3      	strh	r3, [r4, #12]
 801a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a1a8:	e7e9      	b.n	801a17e <__ssputs_r+0x8a>
	...

0801a1ac <_svfiprintf_r>:
 801a1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1b0:	4698      	mov	r8, r3
 801a1b2:	898b      	ldrh	r3, [r1, #12]
 801a1b4:	061b      	lsls	r3, r3, #24
 801a1b6:	b09d      	sub	sp, #116	@ 0x74
 801a1b8:	4607      	mov	r7, r0
 801a1ba:	460d      	mov	r5, r1
 801a1bc:	4614      	mov	r4, r2
 801a1be:	d510      	bpl.n	801a1e2 <_svfiprintf_r+0x36>
 801a1c0:	690b      	ldr	r3, [r1, #16]
 801a1c2:	b973      	cbnz	r3, 801a1e2 <_svfiprintf_r+0x36>
 801a1c4:	2140      	movs	r1, #64	@ 0x40
 801a1c6:	f7ff fdaf 	bl	8019d28 <_malloc_r>
 801a1ca:	6028      	str	r0, [r5, #0]
 801a1cc:	6128      	str	r0, [r5, #16]
 801a1ce:	b930      	cbnz	r0, 801a1de <_svfiprintf_r+0x32>
 801a1d0:	230c      	movs	r3, #12
 801a1d2:	603b      	str	r3, [r7, #0]
 801a1d4:	f04f 30ff 	mov.w	r0, #4294967295
 801a1d8:	b01d      	add	sp, #116	@ 0x74
 801a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1de:	2340      	movs	r3, #64	@ 0x40
 801a1e0:	616b      	str	r3, [r5, #20]
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a1e6:	2320      	movs	r3, #32
 801a1e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a1ec:	f8cd 800c 	str.w	r8, [sp, #12]
 801a1f0:	2330      	movs	r3, #48	@ 0x30
 801a1f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a390 <_svfiprintf_r+0x1e4>
 801a1f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a1fa:	f04f 0901 	mov.w	r9, #1
 801a1fe:	4623      	mov	r3, r4
 801a200:	469a      	mov	sl, r3
 801a202:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a206:	b10a      	cbz	r2, 801a20c <_svfiprintf_r+0x60>
 801a208:	2a25      	cmp	r2, #37	@ 0x25
 801a20a:	d1f9      	bne.n	801a200 <_svfiprintf_r+0x54>
 801a20c:	ebba 0b04 	subs.w	fp, sl, r4
 801a210:	d00b      	beq.n	801a22a <_svfiprintf_r+0x7e>
 801a212:	465b      	mov	r3, fp
 801a214:	4622      	mov	r2, r4
 801a216:	4629      	mov	r1, r5
 801a218:	4638      	mov	r0, r7
 801a21a:	f7ff ff6b 	bl	801a0f4 <__ssputs_r>
 801a21e:	3001      	adds	r0, #1
 801a220:	f000 80a7 	beq.w	801a372 <_svfiprintf_r+0x1c6>
 801a224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a226:	445a      	add	r2, fp
 801a228:	9209      	str	r2, [sp, #36]	@ 0x24
 801a22a:	f89a 3000 	ldrb.w	r3, [sl]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	f000 809f 	beq.w	801a372 <_svfiprintf_r+0x1c6>
 801a234:	2300      	movs	r3, #0
 801a236:	f04f 32ff 	mov.w	r2, #4294967295
 801a23a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a23e:	f10a 0a01 	add.w	sl, sl, #1
 801a242:	9304      	str	r3, [sp, #16]
 801a244:	9307      	str	r3, [sp, #28]
 801a246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a24a:	931a      	str	r3, [sp, #104]	@ 0x68
 801a24c:	4654      	mov	r4, sl
 801a24e:	2205      	movs	r2, #5
 801a250:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a254:	484e      	ldr	r0, [pc, #312]	@ (801a390 <_svfiprintf_r+0x1e4>)
 801a256:	f7e5 fff3 	bl	8000240 <memchr>
 801a25a:	9a04      	ldr	r2, [sp, #16]
 801a25c:	b9d8      	cbnz	r0, 801a296 <_svfiprintf_r+0xea>
 801a25e:	06d0      	lsls	r0, r2, #27
 801a260:	bf44      	itt	mi
 801a262:	2320      	movmi	r3, #32
 801a264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a268:	0711      	lsls	r1, r2, #28
 801a26a:	bf44      	itt	mi
 801a26c:	232b      	movmi	r3, #43	@ 0x2b
 801a26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a272:	f89a 3000 	ldrb.w	r3, [sl]
 801a276:	2b2a      	cmp	r3, #42	@ 0x2a
 801a278:	d015      	beq.n	801a2a6 <_svfiprintf_r+0xfa>
 801a27a:	9a07      	ldr	r2, [sp, #28]
 801a27c:	4654      	mov	r4, sl
 801a27e:	2000      	movs	r0, #0
 801a280:	f04f 0c0a 	mov.w	ip, #10
 801a284:	4621      	mov	r1, r4
 801a286:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a28a:	3b30      	subs	r3, #48	@ 0x30
 801a28c:	2b09      	cmp	r3, #9
 801a28e:	d94b      	bls.n	801a328 <_svfiprintf_r+0x17c>
 801a290:	b1b0      	cbz	r0, 801a2c0 <_svfiprintf_r+0x114>
 801a292:	9207      	str	r2, [sp, #28]
 801a294:	e014      	b.n	801a2c0 <_svfiprintf_r+0x114>
 801a296:	eba0 0308 	sub.w	r3, r0, r8
 801a29a:	fa09 f303 	lsl.w	r3, r9, r3
 801a29e:	4313      	orrs	r3, r2
 801a2a0:	9304      	str	r3, [sp, #16]
 801a2a2:	46a2      	mov	sl, r4
 801a2a4:	e7d2      	b.n	801a24c <_svfiprintf_r+0xa0>
 801a2a6:	9b03      	ldr	r3, [sp, #12]
 801a2a8:	1d19      	adds	r1, r3, #4
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	9103      	str	r1, [sp, #12]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	bfbb      	ittet	lt
 801a2b2:	425b      	neglt	r3, r3
 801a2b4:	f042 0202 	orrlt.w	r2, r2, #2
 801a2b8:	9307      	strge	r3, [sp, #28]
 801a2ba:	9307      	strlt	r3, [sp, #28]
 801a2bc:	bfb8      	it	lt
 801a2be:	9204      	strlt	r2, [sp, #16]
 801a2c0:	7823      	ldrb	r3, [r4, #0]
 801a2c2:	2b2e      	cmp	r3, #46	@ 0x2e
 801a2c4:	d10a      	bne.n	801a2dc <_svfiprintf_r+0x130>
 801a2c6:	7863      	ldrb	r3, [r4, #1]
 801a2c8:	2b2a      	cmp	r3, #42	@ 0x2a
 801a2ca:	d132      	bne.n	801a332 <_svfiprintf_r+0x186>
 801a2cc:	9b03      	ldr	r3, [sp, #12]
 801a2ce:	1d1a      	adds	r2, r3, #4
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	9203      	str	r2, [sp, #12]
 801a2d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a2d8:	3402      	adds	r4, #2
 801a2da:	9305      	str	r3, [sp, #20]
 801a2dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a3a0 <_svfiprintf_r+0x1f4>
 801a2e0:	7821      	ldrb	r1, [r4, #0]
 801a2e2:	2203      	movs	r2, #3
 801a2e4:	4650      	mov	r0, sl
 801a2e6:	f7e5 ffab 	bl	8000240 <memchr>
 801a2ea:	b138      	cbz	r0, 801a2fc <_svfiprintf_r+0x150>
 801a2ec:	9b04      	ldr	r3, [sp, #16]
 801a2ee:	eba0 000a 	sub.w	r0, r0, sl
 801a2f2:	2240      	movs	r2, #64	@ 0x40
 801a2f4:	4082      	lsls	r2, r0
 801a2f6:	4313      	orrs	r3, r2
 801a2f8:	3401      	adds	r4, #1
 801a2fa:	9304      	str	r3, [sp, #16]
 801a2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a300:	4824      	ldr	r0, [pc, #144]	@ (801a394 <_svfiprintf_r+0x1e8>)
 801a302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a306:	2206      	movs	r2, #6
 801a308:	f7e5 ff9a 	bl	8000240 <memchr>
 801a30c:	2800      	cmp	r0, #0
 801a30e:	d036      	beq.n	801a37e <_svfiprintf_r+0x1d2>
 801a310:	4b21      	ldr	r3, [pc, #132]	@ (801a398 <_svfiprintf_r+0x1ec>)
 801a312:	bb1b      	cbnz	r3, 801a35c <_svfiprintf_r+0x1b0>
 801a314:	9b03      	ldr	r3, [sp, #12]
 801a316:	3307      	adds	r3, #7
 801a318:	f023 0307 	bic.w	r3, r3, #7
 801a31c:	3308      	adds	r3, #8
 801a31e:	9303      	str	r3, [sp, #12]
 801a320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a322:	4433      	add	r3, r6
 801a324:	9309      	str	r3, [sp, #36]	@ 0x24
 801a326:	e76a      	b.n	801a1fe <_svfiprintf_r+0x52>
 801a328:	fb0c 3202 	mla	r2, ip, r2, r3
 801a32c:	460c      	mov	r4, r1
 801a32e:	2001      	movs	r0, #1
 801a330:	e7a8      	b.n	801a284 <_svfiprintf_r+0xd8>
 801a332:	2300      	movs	r3, #0
 801a334:	3401      	adds	r4, #1
 801a336:	9305      	str	r3, [sp, #20]
 801a338:	4619      	mov	r1, r3
 801a33a:	f04f 0c0a 	mov.w	ip, #10
 801a33e:	4620      	mov	r0, r4
 801a340:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a344:	3a30      	subs	r2, #48	@ 0x30
 801a346:	2a09      	cmp	r2, #9
 801a348:	d903      	bls.n	801a352 <_svfiprintf_r+0x1a6>
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d0c6      	beq.n	801a2dc <_svfiprintf_r+0x130>
 801a34e:	9105      	str	r1, [sp, #20]
 801a350:	e7c4      	b.n	801a2dc <_svfiprintf_r+0x130>
 801a352:	fb0c 2101 	mla	r1, ip, r1, r2
 801a356:	4604      	mov	r4, r0
 801a358:	2301      	movs	r3, #1
 801a35a:	e7f0      	b.n	801a33e <_svfiprintf_r+0x192>
 801a35c:	ab03      	add	r3, sp, #12
 801a35e:	9300      	str	r3, [sp, #0]
 801a360:	462a      	mov	r2, r5
 801a362:	4b0e      	ldr	r3, [pc, #56]	@ (801a39c <_svfiprintf_r+0x1f0>)
 801a364:	a904      	add	r1, sp, #16
 801a366:	4638      	mov	r0, r7
 801a368:	f3af 8000 	nop.w
 801a36c:	1c42      	adds	r2, r0, #1
 801a36e:	4606      	mov	r6, r0
 801a370:	d1d6      	bne.n	801a320 <_svfiprintf_r+0x174>
 801a372:	89ab      	ldrh	r3, [r5, #12]
 801a374:	065b      	lsls	r3, r3, #25
 801a376:	f53f af2d 	bmi.w	801a1d4 <_svfiprintf_r+0x28>
 801a37a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a37c:	e72c      	b.n	801a1d8 <_svfiprintf_r+0x2c>
 801a37e:	ab03      	add	r3, sp, #12
 801a380:	9300      	str	r3, [sp, #0]
 801a382:	462a      	mov	r2, r5
 801a384:	4b05      	ldr	r3, [pc, #20]	@ (801a39c <_svfiprintf_r+0x1f0>)
 801a386:	a904      	add	r1, sp, #16
 801a388:	4638      	mov	r0, r7
 801a38a:	f000 f879 	bl	801a480 <_printf_i>
 801a38e:	e7ed      	b.n	801a36c <_svfiprintf_r+0x1c0>
 801a390:	0801c758 	.word	0x0801c758
 801a394:	0801c762 	.word	0x0801c762
 801a398:	00000000 	.word	0x00000000
 801a39c:	0801a0f5 	.word	0x0801a0f5
 801a3a0:	0801c75e 	.word	0x0801c75e

0801a3a4 <_printf_common>:
 801a3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3a8:	4616      	mov	r6, r2
 801a3aa:	4698      	mov	r8, r3
 801a3ac:	688a      	ldr	r2, [r1, #8]
 801a3ae:	690b      	ldr	r3, [r1, #16]
 801a3b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a3b4:	4293      	cmp	r3, r2
 801a3b6:	bfb8      	it	lt
 801a3b8:	4613      	movlt	r3, r2
 801a3ba:	6033      	str	r3, [r6, #0]
 801a3bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a3c0:	4607      	mov	r7, r0
 801a3c2:	460c      	mov	r4, r1
 801a3c4:	b10a      	cbz	r2, 801a3ca <_printf_common+0x26>
 801a3c6:	3301      	adds	r3, #1
 801a3c8:	6033      	str	r3, [r6, #0]
 801a3ca:	6823      	ldr	r3, [r4, #0]
 801a3cc:	0699      	lsls	r1, r3, #26
 801a3ce:	bf42      	ittt	mi
 801a3d0:	6833      	ldrmi	r3, [r6, #0]
 801a3d2:	3302      	addmi	r3, #2
 801a3d4:	6033      	strmi	r3, [r6, #0]
 801a3d6:	6825      	ldr	r5, [r4, #0]
 801a3d8:	f015 0506 	ands.w	r5, r5, #6
 801a3dc:	d106      	bne.n	801a3ec <_printf_common+0x48>
 801a3de:	f104 0a19 	add.w	sl, r4, #25
 801a3e2:	68e3      	ldr	r3, [r4, #12]
 801a3e4:	6832      	ldr	r2, [r6, #0]
 801a3e6:	1a9b      	subs	r3, r3, r2
 801a3e8:	42ab      	cmp	r3, r5
 801a3ea:	dc26      	bgt.n	801a43a <_printf_common+0x96>
 801a3ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a3f0:	6822      	ldr	r2, [r4, #0]
 801a3f2:	3b00      	subs	r3, #0
 801a3f4:	bf18      	it	ne
 801a3f6:	2301      	movne	r3, #1
 801a3f8:	0692      	lsls	r2, r2, #26
 801a3fa:	d42b      	bmi.n	801a454 <_printf_common+0xb0>
 801a3fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a400:	4641      	mov	r1, r8
 801a402:	4638      	mov	r0, r7
 801a404:	47c8      	blx	r9
 801a406:	3001      	adds	r0, #1
 801a408:	d01e      	beq.n	801a448 <_printf_common+0xa4>
 801a40a:	6823      	ldr	r3, [r4, #0]
 801a40c:	6922      	ldr	r2, [r4, #16]
 801a40e:	f003 0306 	and.w	r3, r3, #6
 801a412:	2b04      	cmp	r3, #4
 801a414:	bf02      	ittt	eq
 801a416:	68e5      	ldreq	r5, [r4, #12]
 801a418:	6833      	ldreq	r3, [r6, #0]
 801a41a:	1aed      	subeq	r5, r5, r3
 801a41c:	68a3      	ldr	r3, [r4, #8]
 801a41e:	bf0c      	ite	eq
 801a420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a424:	2500      	movne	r5, #0
 801a426:	4293      	cmp	r3, r2
 801a428:	bfc4      	itt	gt
 801a42a:	1a9b      	subgt	r3, r3, r2
 801a42c:	18ed      	addgt	r5, r5, r3
 801a42e:	2600      	movs	r6, #0
 801a430:	341a      	adds	r4, #26
 801a432:	42b5      	cmp	r5, r6
 801a434:	d11a      	bne.n	801a46c <_printf_common+0xc8>
 801a436:	2000      	movs	r0, #0
 801a438:	e008      	b.n	801a44c <_printf_common+0xa8>
 801a43a:	2301      	movs	r3, #1
 801a43c:	4652      	mov	r2, sl
 801a43e:	4641      	mov	r1, r8
 801a440:	4638      	mov	r0, r7
 801a442:	47c8      	blx	r9
 801a444:	3001      	adds	r0, #1
 801a446:	d103      	bne.n	801a450 <_printf_common+0xac>
 801a448:	f04f 30ff 	mov.w	r0, #4294967295
 801a44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a450:	3501      	adds	r5, #1
 801a452:	e7c6      	b.n	801a3e2 <_printf_common+0x3e>
 801a454:	18e1      	adds	r1, r4, r3
 801a456:	1c5a      	adds	r2, r3, #1
 801a458:	2030      	movs	r0, #48	@ 0x30
 801a45a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a45e:	4422      	add	r2, r4
 801a460:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a464:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a468:	3302      	adds	r3, #2
 801a46a:	e7c7      	b.n	801a3fc <_printf_common+0x58>
 801a46c:	2301      	movs	r3, #1
 801a46e:	4622      	mov	r2, r4
 801a470:	4641      	mov	r1, r8
 801a472:	4638      	mov	r0, r7
 801a474:	47c8      	blx	r9
 801a476:	3001      	adds	r0, #1
 801a478:	d0e6      	beq.n	801a448 <_printf_common+0xa4>
 801a47a:	3601      	adds	r6, #1
 801a47c:	e7d9      	b.n	801a432 <_printf_common+0x8e>
	...

0801a480 <_printf_i>:
 801a480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a484:	7e0f      	ldrb	r7, [r1, #24]
 801a486:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a488:	2f78      	cmp	r7, #120	@ 0x78
 801a48a:	4691      	mov	r9, r2
 801a48c:	4680      	mov	r8, r0
 801a48e:	460c      	mov	r4, r1
 801a490:	469a      	mov	sl, r3
 801a492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a496:	d807      	bhi.n	801a4a8 <_printf_i+0x28>
 801a498:	2f62      	cmp	r7, #98	@ 0x62
 801a49a:	d80a      	bhi.n	801a4b2 <_printf_i+0x32>
 801a49c:	2f00      	cmp	r7, #0
 801a49e:	f000 80d1 	beq.w	801a644 <_printf_i+0x1c4>
 801a4a2:	2f58      	cmp	r7, #88	@ 0x58
 801a4a4:	f000 80b8 	beq.w	801a618 <_printf_i+0x198>
 801a4a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a4ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a4b0:	e03a      	b.n	801a528 <_printf_i+0xa8>
 801a4b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a4b6:	2b15      	cmp	r3, #21
 801a4b8:	d8f6      	bhi.n	801a4a8 <_printf_i+0x28>
 801a4ba:	a101      	add	r1, pc, #4	@ (adr r1, 801a4c0 <_printf_i+0x40>)
 801a4bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a4c0:	0801a519 	.word	0x0801a519
 801a4c4:	0801a52d 	.word	0x0801a52d
 801a4c8:	0801a4a9 	.word	0x0801a4a9
 801a4cc:	0801a4a9 	.word	0x0801a4a9
 801a4d0:	0801a4a9 	.word	0x0801a4a9
 801a4d4:	0801a4a9 	.word	0x0801a4a9
 801a4d8:	0801a52d 	.word	0x0801a52d
 801a4dc:	0801a4a9 	.word	0x0801a4a9
 801a4e0:	0801a4a9 	.word	0x0801a4a9
 801a4e4:	0801a4a9 	.word	0x0801a4a9
 801a4e8:	0801a4a9 	.word	0x0801a4a9
 801a4ec:	0801a62b 	.word	0x0801a62b
 801a4f0:	0801a557 	.word	0x0801a557
 801a4f4:	0801a5e5 	.word	0x0801a5e5
 801a4f8:	0801a4a9 	.word	0x0801a4a9
 801a4fc:	0801a4a9 	.word	0x0801a4a9
 801a500:	0801a64d 	.word	0x0801a64d
 801a504:	0801a4a9 	.word	0x0801a4a9
 801a508:	0801a557 	.word	0x0801a557
 801a50c:	0801a4a9 	.word	0x0801a4a9
 801a510:	0801a4a9 	.word	0x0801a4a9
 801a514:	0801a5ed 	.word	0x0801a5ed
 801a518:	6833      	ldr	r3, [r6, #0]
 801a51a:	1d1a      	adds	r2, r3, #4
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	6032      	str	r2, [r6, #0]
 801a520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a528:	2301      	movs	r3, #1
 801a52a:	e09c      	b.n	801a666 <_printf_i+0x1e6>
 801a52c:	6833      	ldr	r3, [r6, #0]
 801a52e:	6820      	ldr	r0, [r4, #0]
 801a530:	1d19      	adds	r1, r3, #4
 801a532:	6031      	str	r1, [r6, #0]
 801a534:	0606      	lsls	r6, r0, #24
 801a536:	d501      	bpl.n	801a53c <_printf_i+0xbc>
 801a538:	681d      	ldr	r5, [r3, #0]
 801a53a:	e003      	b.n	801a544 <_printf_i+0xc4>
 801a53c:	0645      	lsls	r5, r0, #25
 801a53e:	d5fb      	bpl.n	801a538 <_printf_i+0xb8>
 801a540:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a544:	2d00      	cmp	r5, #0
 801a546:	da03      	bge.n	801a550 <_printf_i+0xd0>
 801a548:	232d      	movs	r3, #45	@ 0x2d
 801a54a:	426d      	negs	r5, r5
 801a54c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a550:	4858      	ldr	r0, [pc, #352]	@ (801a6b4 <_printf_i+0x234>)
 801a552:	230a      	movs	r3, #10
 801a554:	e011      	b.n	801a57a <_printf_i+0xfa>
 801a556:	6821      	ldr	r1, [r4, #0]
 801a558:	6833      	ldr	r3, [r6, #0]
 801a55a:	0608      	lsls	r0, r1, #24
 801a55c:	f853 5b04 	ldr.w	r5, [r3], #4
 801a560:	d402      	bmi.n	801a568 <_printf_i+0xe8>
 801a562:	0649      	lsls	r1, r1, #25
 801a564:	bf48      	it	mi
 801a566:	b2ad      	uxthmi	r5, r5
 801a568:	2f6f      	cmp	r7, #111	@ 0x6f
 801a56a:	4852      	ldr	r0, [pc, #328]	@ (801a6b4 <_printf_i+0x234>)
 801a56c:	6033      	str	r3, [r6, #0]
 801a56e:	bf14      	ite	ne
 801a570:	230a      	movne	r3, #10
 801a572:	2308      	moveq	r3, #8
 801a574:	2100      	movs	r1, #0
 801a576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a57a:	6866      	ldr	r6, [r4, #4]
 801a57c:	60a6      	str	r6, [r4, #8]
 801a57e:	2e00      	cmp	r6, #0
 801a580:	db05      	blt.n	801a58e <_printf_i+0x10e>
 801a582:	6821      	ldr	r1, [r4, #0]
 801a584:	432e      	orrs	r6, r5
 801a586:	f021 0104 	bic.w	r1, r1, #4
 801a58a:	6021      	str	r1, [r4, #0]
 801a58c:	d04b      	beq.n	801a626 <_printf_i+0x1a6>
 801a58e:	4616      	mov	r6, r2
 801a590:	fbb5 f1f3 	udiv	r1, r5, r3
 801a594:	fb03 5711 	mls	r7, r3, r1, r5
 801a598:	5dc7      	ldrb	r7, [r0, r7]
 801a59a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a59e:	462f      	mov	r7, r5
 801a5a0:	42bb      	cmp	r3, r7
 801a5a2:	460d      	mov	r5, r1
 801a5a4:	d9f4      	bls.n	801a590 <_printf_i+0x110>
 801a5a6:	2b08      	cmp	r3, #8
 801a5a8:	d10b      	bne.n	801a5c2 <_printf_i+0x142>
 801a5aa:	6823      	ldr	r3, [r4, #0]
 801a5ac:	07df      	lsls	r7, r3, #31
 801a5ae:	d508      	bpl.n	801a5c2 <_printf_i+0x142>
 801a5b0:	6923      	ldr	r3, [r4, #16]
 801a5b2:	6861      	ldr	r1, [r4, #4]
 801a5b4:	4299      	cmp	r1, r3
 801a5b6:	bfde      	ittt	le
 801a5b8:	2330      	movle	r3, #48	@ 0x30
 801a5ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a5be:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a5c2:	1b92      	subs	r2, r2, r6
 801a5c4:	6122      	str	r2, [r4, #16]
 801a5c6:	f8cd a000 	str.w	sl, [sp]
 801a5ca:	464b      	mov	r3, r9
 801a5cc:	aa03      	add	r2, sp, #12
 801a5ce:	4621      	mov	r1, r4
 801a5d0:	4640      	mov	r0, r8
 801a5d2:	f7ff fee7 	bl	801a3a4 <_printf_common>
 801a5d6:	3001      	adds	r0, #1
 801a5d8:	d14a      	bne.n	801a670 <_printf_i+0x1f0>
 801a5da:	f04f 30ff 	mov.w	r0, #4294967295
 801a5de:	b004      	add	sp, #16
 801a5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5e4:	6823      	ldr	r3, [r4, #0]
 801a5e6:	f043 0320 	orr.w	r3, r3, #32
 801a5ea:	6023      	str	r3, [r4, #0]
 801a5ec:	4832      	ldr	r0, [pc, #200]	@ (801a6b8 <_printf_i+0x238>)
 801a5ee:	2778      	movs	r7, #120	@ 0x78
 801a5f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a5f4:	6823      	ldr	r3, [r4, #0]
 801a5f6:	6831      	ldr	r1, [r6, #0]
 801a5f8:	061f      	lsls	r7, r3, #24
 801a5fa:	f851 5b04 	ldr.w	r5, [r1], #4
 801a5fe:	d402      	bmi.n	801a606 <_printf_i+0x186>
 801a600:	065f      	lsls	r7, r3, #25
 801a602:	bf48      	it	mi
 801a604:	b2ad      	uxthmi	r5, r5
 801a606:	6031      	str	r1, [r6, #0]
 801a608:	07d9      	lsls	r1, r3, #31
 801a60a:	bf44      	itt	mi
 801a60c:	f043 0320 	orrmi.w	r3, r3, #32
 801a610:	6023      	strmi	r3, [r4, #0]
 801a612:	b11d      	cbz	r5, 801a61c <_printf_i+0x19c>
 801a614:	2310      	movs	r3, #16
 801a616:	e7ad      	b.n	801a574 <_printf_i+0xf4>
 801a618:	4826      	ldr	r0, [pc, #152]	@ (801a6b4 <_printf_i+0x234>)
 801a61a:	e7e9      	b.n	801a5f0 <_printf_i+0x170>
 801a61c:	6823      	ldr	r3, [r4, #0]
 801a61e:	f023 0320 	bic.w	r3, r3, #32
 801a622:	6023      	str	r3, [r4, #0]
 801a624:	e7f6      	b.n	801a614 <_printf_i+0x194>
 801a626:	4616      	mov	r6, r2
 801a628:	e7bd      	b.n	801a5a6 <_printf_i+0x126>
 801a62a:	6833      	ldr	r3, [r6, #0]
 801a62c:	6825      	ldr	r5, [r4, #0]
 801a62e:	6961      	ldr	r1, [r4, #20]
 801a630:	1d18      	adds	r0, r3, #4
 801a632:	6030      	str	r0, [r6, #0]
 801a634:	062e      	lsls	r6, r5, #24
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	d501      	bpl.n	801a63e <_printf_i+0x1be>
 801a63a:	6019      	str	r1, [r3, #0]
 801a63c:	e002      	b.n	801a644 <_printf_i+0x1c4>
 801a63e:	0668      	lsls	r0, r5, #25
 801a640:	d5fb      	bpl.n	801a63a <_printf_i+0x1ba>
 801a642:	8019      	strh	r1, [r3, #0]
 801a644:	2300      	movs	r3, #0
 801a646:	6123      	str	r3, [r4, #16]
 801a648:	4616      	mov	r6, r2
 801a64a:	e7bc      	b.n	801a5c6 <_printf_i+0x146>
 801a64c:	6833      	ldr	r3, [r6, #0]
 801a64e:	1d1a      	adds	r2, r3, #4
 801a650:	6032      	str	r2, [r6, #0]
 801a652:	681e      	ldr	r6, [r3, #0]
 801a654:	6862      	ldr	r2, [r4, #4]
 801a656:	2100      	movs	r1, #0
 801a658:	4630      	mov	r0, r6
 801a65a:	f7e5 fdf1 	bl	8000240 <memchr>
 801a65e:	b108      	cbz	r0, 801a664 <_printf_i+0x1e4>
 801a660:	1b80      	subs	r0, r0, r6
 801a662:	6060      	str	r0, [r4, #4]
 801a664:	6863      	ldr	r3, [r4, #4]
 801a666:	6123      	str	r3, [r4, #16]
 801a668:	2300      	movs	r3, #0
 801a66a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a66e:	e7aa      	b.n	801a5c6 <_printf_i+0x146>
 801a670:	6923      	ldr	r3, [r4, #16]
 801a672:	4632      	mov	r2, r6
 801a674:	4649      	mov	r1, r9
 801a676:	4640      	mov	r0, r8
 801a678:	47d0      	blx	sl
 801a67a:	3001      	adds	r0, #1
 801a67c:	d0ad      	beq.n	801a5da <_printf_i+0x15a>
 801a67e:	6823      	ldr	r3, [r4, #0]
 801a680:	079b      	lsls	r3, r3, #30
 801a682:	d413      	bmi.n	801a6ac <_printf_i+0x22c>
 801a684:	68e0      	ldr	r0, [r4, #12]
 801a686:	9b03      	ldr	r3, [sp, #12]
 801a688:	4298      	cmp	r0, r3
 801a68a:	bfb8      	it	lt
 801a68c:	4618      	movlt	r0, r3
 801a68e:	e7a6      	b.n	801a5de <_printf_i+0x15e>
 801a690:	2301      	movs	r3, #1
 801a692:	4632      	mov	r2, r6
 801a694:	4649      	mov	r1, r9
 801a696:	4640      	mov	r0, r8
 801a698:	47d0      	blx	sl
 801a69a:	3001      	adds	r0, #1
 801a69c:	d09d      	beq.n	801a5da <_printf_i+0x15a>
 801a69e:	3501      	adds	r5, #1
 801a6a0:	68e3      	ldr	r3, [r4, #12]
 801a6a2:	9903      	ldr	r1, [sp, #12]
 801a6a4:	1a5b      	subs	r3, r3, r1
 801a6a6:	42ab      	cmp	r3, r5
 801a6a8:	dcf2      	bgt.n	801a690 <_printf_i+0x210>
 801a6aa:	e7eb      	b.n	801a684 <_printf_i+0x204>
 801a6ac:	2500      	movs	r5, #0
 801a6ae:	f104 0619 	add.w	r6, r4, #25
 801a6b2:	e7f5      	b.n	801a6a0 <_printf_i+0x220>
 801a6b4:	0801c769 	.word	0x0801c769
 801a6b8:	0801c77a 	.word	0x0801c77a

0801a6bc <memmove>:
 801a6bc:	4288      	cmp	r0, r1
 801a6be:	b510      	push	{r4, lr}
 801a6c0:	eb01 0402 	add.w	r4, r1, r2
 801a6c4:	d902      	bls.n	801a6cc <memmove+0x10>
 801a6c6:	4284      	cmp	r4, r0
 801a6c8:	4623      	mov	r3, r4
 801a6ca:	d807      	bhi.n	801a6dc <memmove+0x20>
 801a6cc:	1e43      	subs	r3, r0, #1
 801a6ce:	42a1      	cmp	r1, r4
 801a6d0:	d008      	beq.n	801a6e4 <memmove+0x28>
 801a6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a6d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a6da:	e7f8      	b.n	801a6ce <memmove+0x12>
 801a6dc:	4402      	add	r2, r0
 801a6de:	4601      	mov	r1, r0
 801a6e0:	428a      	cmp	r2, r1
 801a6e2:	d100      	bne.n	801a6e6 <memmove+0x2a>
 801a6e4:	bd10      	pop	{r4, pc}
 801a6e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a6ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a6ee:	e7f7      	b.n	801a6e0 <memmove+0x24>

0801a6f0 <_realloc_r>:
 801a6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6f4:	4607      	mov	r7, r0
 801a6f6:	4614      	mov	r4, r2
 801a6f8:	460d      	mov	r5, r1
 801a6fa:	b921      	cbnz	r1, 801a706 <_realloc_r+0x16>
 801a6fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a700:	4611      	mov	r1, r2
 801a702:	f7ff bb11 	b.w	8019d28 <_malloc_r>
 801a706:	b92a      	cbnz	r2, 801a714 <_realloc_r+0x24>
 801a708:	f7ff fcaa 	bl	801a060 <_free_r>
 801a70c:	4625      	mov	r5, r4
 801a70e:	4628      	mov	r0, r5
 801a710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a714:	f000 f81a 	bl	801a74c <_malloc_usable_size_r>
 801a718:	4284      	cmp	r4, r0
 801a71a:	4606      	mov	r6, r0
 801a71c:	d802      	bhi.n	801a724 <_realloc_r+0x34>
 801a71e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a722:	d8f4      	bhi.n	801a70e <_realloc_r+0x1e>
 801a724:	4621      	mov	r1, r4
 801a726:	4638      	mov	r0, r7
 801a728:	f7ff fafe 	bl	8019d28 <_malloc_r>
 801a72c:	4680      	mov	r8, r0
 801a72e:	b908      	cbnz	r0, 801a734 <_realloc_r+0x44>
 801a730:	4645      	mov	r5, r8
 801a732:	e7ec      	b.n	801a70e <_realloc_r+0x1e>
 801a734:	42b4      	cmp	r4, r6
 801a736:	4622      	mov	r2, r4
 801a738:	4629      	mov	r1, r5
 801a73a:	bf28      	it	cs
 801a73c:	4632      	movcs	r2, r6
 801a73e:	f7ff fc81 	bl	801a044 <memcpy>
 801a742:	4629      	mov	r1, r5
 801a744:	4638      	mov	r0, r7
 801a746:	f7ff fc8b 	bl	801a060 <_free_r>
 801a74a:	e7f1      	b.n	801a730 <_realloc_r+0x40>

0801a74c <_malloc_usable_size_r>:
 801a74c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a750:	1f18      	subs	r0, r3, #4
 801a752:	2b00      	cmp	r3, #0
 801a754:	bfbc      	itt	lt
 801a756:	580b      	ldrlt	r3, [r1, r0]
 801a758:	18c0      	addlt	r0, r0, r3
 801a75a:	4770      	bx	lr

0801a75c <_init>:
 801a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a75e:	bf00      	nop
 801a760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a762:	bc08      	pop	{r3}
 801a764:	469e      	mov	lr, r3
 801a766:	4770      	bx	lr

0801a768 <_fini>:
 801a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a76a:	bf00      	nop
 801a76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a76e:	bc08      	pop	{r3}
 801a770:	469e      	mov	lr, r3
 801a772:	4770      	bx	lr
